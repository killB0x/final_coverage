/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:34:22 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.SocketChannel;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.HashAlgorithm;
import net.spy.memcached.KetamaNodeKeyFormatter;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.MemcachedNodeROImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KetamaNodeKeyFormatter_ESTest extends KetamaNodeKeyFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KetamaNodeKeyFormatter.Format ketamaNodeKeyFormatter_Format0 = KetamaNodeKeyFormatter.Format.LIBMEMCACHED;
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter(ketamaNodeKeyFormatter_Format0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1241);
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(250, 250, (HashAlgorithm) null);
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 11211);
      MemcachedNodeROImpl memcachedNodeROImpl0 = new MemcachedNodeROImpl(memcachedNode0);
      String string0 = ketamaNodeKeyFormatter0.getKeyForNode(memcachedNodeROImpl0, 250);
      assertEquals("192.168.1.42/192.168.1.42:1241", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42:1241-250", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter((KetamaNodeKeyFormatter.Format) null);
      ketamaNodeKeyFormatter0.getFormat();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(16384);
      SocketChannel socketChannel0 = SocketChannel.open();
      mockInetSocketAddress0.getHostName();
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 16384);
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter();
      String string0 = ketamaNodeKeyFormatter0.getKeyForNode(memcachedNode0, 16384);
      assertEquals("192.168.1.42/192.168.1.42:16384-16384", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(16384);
      SocketChannel socketChannel0 = SocketChannel.open();
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 16384);
      KetamaNodeKeyFormatter.Format ketamaNodeKeyFormatter_Format0 = KetamaNodeKeyFormatter.Format.LIBMEMCACHED;
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter(ketamaNodeKeyFormatter_Format0);
      String string0 = ketamaNodeKeyFormatter0.getKeyForNode(memcachedNode0, 998);
      assertEquals("192.168.1.42/192.168.1.42:16384", mockInetSocketAddress0.toString());
      assertEquals("192.168.1.42:16384-998", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(16384);
      SocketChannel socketChannel0 = SocketChannel.open();
      MemcachedNode memcachedNode0 = binaryConnectionFactory0.createMemcachedNode(mockInetSocketAddress0, socketChannel0, 16384);
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter();
      ketamaNodeKeyFormatter0.getKeyForNode(memcachedNode0, 998);
      String string0 = ketamaNodeKeyFormatter0.getKeyForNode(memcachedNode0, 998);
      assertEquals("192.168.1.42:16384-998", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter();
      // Undeclared exception!
      try { 
        ketamaNodeKeyFormatter0.getKeyForNode((MemcachedNode) null, (-1235));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KetamaNodeKeyFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KetamaNodeKeyFormatter.Format ketamaNodeKeyFormatter_Format0 = KetamaNodeKeyFormatter.Format.LIBMEMCACHED;
      KetamaNodeKeyFormatter ketamaNodeKeyFormatter0 = new KetamaNodeKeyFormatter(ketamaNodeKeyFormatter_Format0);
      KetamaNodeKeyFormatter.Format ketamaNodeKeyFormatter_Format1 = ketamaNodeKeyFormatter0.getFormat();
      assertSame(ketamaNodeKeyFormatter_Format0, ketamaNodeKeyFormatter_Format1);
  }
}
