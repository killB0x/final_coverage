/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:28:12 GMT 2022
 */

package net.spy.memcached.compat.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.compat.log.Logger;
import net.spy.memcached.compat.log.LoggerFactory;
import net.spy.memcached.compat.log.SLF4JLogger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoggerFactory_ESTest extends LoggerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.getLogger((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.compat.log.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Logger logger0 = LoggerFactory.getLogger("GFJ's4{#X+R");
      assertFalse(logger0.isTraceEnabled());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LoggerFactory.getLogger(class0);
      Logger logger0 = LoggerFactory.getLogger(class0);
      assertFalse(logger0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.getLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Logger name may not be null.
         //
         verifyException("net.spy.memcached.compat.log.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Logger logger0 = LoggerFactory.getLogger(class0);
      Class<SLF4JLogger> class1 = SLF4JLogger.class;
      Logger logger1 = LoggerFactory.getLogger(class1);
      assertNotSame(logger1, logger0);
  }
}
