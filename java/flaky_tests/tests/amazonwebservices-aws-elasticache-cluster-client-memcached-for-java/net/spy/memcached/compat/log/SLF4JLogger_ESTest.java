/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:29:36 GMT 2022
 */

package net.spy.memcached.compat.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.compat.log.Level;
import net.spy.memcached.compat.log.SLF4JLogger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SLF4JLogger_ESTest extends SLF4JLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("");
      Level level0 = Level.INFO;
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        sLF4JLogger0.log(level0, (Object) null, (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = null;
      try {
        sLF4JLogger0 = new SLF4JLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Logger name may not be null.
         //
         verifyException("net.spy.memcached.compat.log.AbstractLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("}<Z");
      sLF4JLogger0.fatal((Object) "}<Z");
      assertEquals("}<Z", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("<m");
      sLF4JLogger0.warn((Object) "<m");
      assertEquals("<m", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("!a?s4~vVQzE");
      sLF4JLogger0.info((Object) "!a?s4~vVQzE");
      assertEquals("!a?s4~vVQzE", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("ERROR");
      Level level0 = Level.DEBUG;
      sLF4JLogger0.log(level0, (Object) level0, (Throwable) null);
      assertEquals("ERROR", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("\"?2*u0Wli%T;b");
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable();
      sLF4JLogger0.log(level0, (Object) sLF4JLogger0, (Throwable) mockThrowable0);
      assertEquals("\"?2*u0Wli%T;b", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("\"?2*u0Wli%T;b");
      sLF4JLogger0.trace((Object) "\"?2*u0Wli%T;b", (Throwable) null);
      assertEquals("\"?2*u0Wli%T;b", sLF4JLogger0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("\"?2*u0Wli%T;b");
      boolean boolean0 = sLF4JLogger0.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("\"?2*u0Wli%T;b");
      boolean boolean0 = sLF4JLogger0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SLF4JLogger sLF4JLogger0 = new SLF4JLogger("}^1{{p{8");
      boolean boolean0 = sLF4JLogger0.isTraceEnabled();
      assertFalse(boolean0);
  }
}
