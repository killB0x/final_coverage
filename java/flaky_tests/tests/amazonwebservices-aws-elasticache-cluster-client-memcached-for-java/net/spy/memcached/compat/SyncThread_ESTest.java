/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:56:25 GMT 2022
 */

package net.spy.memcached.compat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.CyclicBarrier;
import net.spy.memcached.compat.SyncThread;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SyncThread_ESTest extends SyncThread_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CyclicBarrier cyclicBarrier0 = new CyclicBarrier(1);
      cyclicBarrier0.reset();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      SyncThread<Integer> syncThread0 = new SyncThread<Integer>(cyclicBarrier0, callable0);
      syncThread0.run();
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "J<9:P:+E&Z%U");
      CyclicBarrier cyclicBarrier0 = new CyclicBarrier(1, mockThread0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(cyclicBarrier0).when(callable0).call();
      SyncThread<Object> syncThread0 = new SyncThread<Object>(cyclicBarrier0, callable0);
      syncThread0.getResult();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<SyncThread<Object>> callable0 = (Callable<SyncThread<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      SyncThread.getDistinctResultCount(556, callable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      try { 
        SyncThread.getDistinctResultCount((-1), callable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      SyncThread.getCompletedThreads(253, callable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Callable<SyncThread<Integer>> callable0 = (Callable<SyncThread<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SyncThread.getCompletedThreads((-2905), callable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2905
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      Object object0 = new Object();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      SyncThread.getCompletedThreads(1, callable0);
      try { 
        SyncThread.getDistinctResultCount(55, (Callable<SyncThread<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.compat.SyncThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Thread[] threadArray0 = new Thread[9];
      CyclicBarrier cyclicBarrier0 = new CyclicBarrier(1);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      SyncThread<Object> syncThread0 = new SyncThread<Object>(cyclicBarrier0, callable0);
      syncThread0.getResult();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      SyncThread<Object> syncThread0 = new SyncThread<Object>((CyclicBarrier) null, callable0);
      syncThread0.run();
      try { 
        syncThread0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.compat.SyncThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        SyncThread.getDistinctResultCount(55, (Callable<SyncThread<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.compat.SyncThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Callable<SyncThread<Object>> callable0 = (Callable<SyncThread<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      int int0 = SyncThread.getDistinctResultCount(1, callable0);
      assertEquals(1, int0);
  }
}
