/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:54:00 GMT 2022
 */

package net.spy.memcached.auth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.security.auth.callback.Callback;
import javax.security.auth.callback.NameCallback;
import javax.security.auth.callback.PasswordCallback;
import javax.security.auth.callback.TextOutputCallback;
import javax.security.auth.callback.UnsupportedCallbackException;
import net.spy.memcached.auth.PlainCallbackHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlainCallbackHandler_ESTest extends PlainCallbackHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("(X^u!zko", "a");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("p=E)XNlF<mX h", "p=E)XNlF<mX h");
      // Undeclared exception!
      try { 
        plainCallbackHandler0.handle((Callback[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.auth.PlainCallbackHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = null;
      try {
        plainCallbackHandler0 = new PlainCallbackHandler((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.auth.PlainCallbackHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("_{\":R~xU!O8", "_{\":R~xU!O8");
      Callback[] callbackArray0 = new Callback[1];
      PasswordCallback passwordCallback0 = new PasswordCallback("_{\":R~xU!O8", false);
      callbackArray0[0] = (Callback) passwordCallback0;
      plainCallbackHandler0.handle(callbackArray0);
      assertEquals(1, callbackArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("(X^u!zko", "(X^u!zko");
      Callback[] callbackArray0 = new Callback[2];
      try { 
        plainCallbackHandler0.handle(callbackArray0);
        fail("Expecting exception: UnsupportedCallbackException");
      
      } catch(UnsupportedCallbackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.auth.PlainCallbackHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("{ra*_*WO;|w'{~0", "{ra*_*WO;|w'{~0");
      Callback[] callbackArray0 = new Callback[1];
      TextOutputCallback textOutputCallback0 = new TextOutputCallback(0, "{ra*_*WO;|w'{~0");
      callbackArray0[0] = (Callback) textOutputCallback0;
      try { 
        plainCallbackHandler0.handle(callbackArray0);
        fail("Expecting exception: UnsupportedCallbackException");
      
      } catch(UnsupportedCallbackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.auth.PlainCallbackHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PlainCallbackHandler plainCallbackHandler0 = new PlainCallbackHandler("p=E)XNlF<mX h", "p=E)XNlF<mX h");
      Callback[] callbackArray0 = new Callback[1];
      NameCallback nameCallback0 = new NameCallback("p=E)XNlF<mX h");
      callbackArray0[0] = (Callback) nameCallback0;
      plainCallbackHandler0.handle(callbackArray0);
      assertEquals(1, callbackArray0.length);
  }
}
