/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:52:58 GMT 2022
 */

package net.spy.memcached.auth;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.DefaultHashAlgorithm;
import net.spy.memcached.MemcachedConnection;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.OperationFactory;
import net.spy.memcached.auth.AuthDescriptor;
import net.spy.memcached.auth.AuthThread;
import net.spy.memcached.auth.AuthThreadMonitor;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthThreadMonitor_ESTest extends AuthThreadMonitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthThreadMonitor authThreadMonitor0 = new AuthThreadMonitor();
      AuthDescriptor authDescriptor0 = AuthDescriptor.typical("Incomplete authentication interrupted for node ", "eLX");
      authThreadMonitor0.authConnection((MemcachedConnection) null, (OperationFactory) null, authDescriptor0, (MemcachedNode) null);
      Map<Object, AuthThread> map0 = authThreadMonitor0.getNodeMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AuthThreadMonitor authThreadMonitor0 = new AuthThreadMonitor();
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      AuthDescriptor authDescriptor0 = AuthDescriptor.typical("V[6s(z", "V[6s(z");
      ClientMode clientMode0 = ClientMode.Dynamic;
      authThreadMonitor0.authConnection((MemcachedConnection) null, asciiOperationFactory0, authDescriptor0, (MemcachedNode) null);
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1_64_HASH;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 646, 404, defaultHashAlgorithm0);
      OperationFactory operationFactory0 = binaryConnectionFactory0.getOperationFactory();
      authThreadMonitor0.authConnection((MemcachedConnection) null, operationFactory0, authDescriptor0, (MemcachedNode) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthThreadMonitor authThreadMonitor0 = new AuthThreadMonitor();
      authThreadMonitor0.interruptAllPendingAuth();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AuthThreadMonitor authThreadMonitor0 = new AuthThreadMonitor();
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      AuthDescriptor authDescriptor0 = AuthDescriptor.typical("V[6s(z", "V[6s(z");
      authThreadMonitor0.authConnection((MemcachedConnection) null, asciiOperationFactory0, authDescriptor0, (MemcachedNode) null);
      authThreadMonitor0.interruptAllPendingAuth();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuthThreadMonitor authThreadMonitor0 = new AuthThreadMonitor();
      Map<Object, AuthThread> map0 = authThreadMonitor0.getNodeMap();
      assertEquals(0, map0.size());
  }
}
