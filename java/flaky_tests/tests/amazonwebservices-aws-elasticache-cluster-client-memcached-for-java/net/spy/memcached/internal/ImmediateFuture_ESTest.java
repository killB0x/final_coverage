/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:13:36 GMT 2022
 */

package net.spy.memcached.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import net.spy.memcached.internal.ImmediateFuture;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmediateFuture_ESTest extends ImmediateFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImmediateFuture immediateFuture0 = new ImmediateFuture((Boolean) null);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Boolean boolean0 = immediateFuture0.get(0L, timeUnit0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("*3X.zf=*i8");
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Boolean boolean1 = immediateFuture0.get(0L, timeUnit0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImmediateFuture immediateFuture0 = new ImmediateFuture((Boolean) null);
      Boolean boolean0 = immediateFuture0.get();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("*3X.zf=*i8");
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      Boolean boolean1 = immediateFuture0.get();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockException mockException0 = new MockException();
      ImmediateFuture immediateFuture0 = new ImmediateFuture(mockException0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      try { 
        immediateFuture0.get((-756L), timeUnit0);
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("net.spy.memcached.internal.ImmediateFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Boolean boolean1 = immediateFuture0.get((-1025L), timeUnit0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockException mockException0 = new MockException();
      ImmediateFuture immediateFuture0 = new ImmediateFuture(mockException0);
      try { 
        immediateFuture0.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("net.spy.memcached.internal.ImmediateFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      Boolean boolean1 = immediateFuture0.get();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      boolean boolean1 = immediateFuture0.isDone();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      ImmediateFuture immediateFuture0 = new ImmediateFuture(boolean0);
      boolean boolean1 = immediateFuture0.isCancelled();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockException mockException0 = new MockException();
      ImmediateFuture immediateFuture0 = new ImmediateFuture(mockException0);
      boolean boolean0 = immediateFuture0.cancel(true);
      assertFalse(boolean0);
  }
}
