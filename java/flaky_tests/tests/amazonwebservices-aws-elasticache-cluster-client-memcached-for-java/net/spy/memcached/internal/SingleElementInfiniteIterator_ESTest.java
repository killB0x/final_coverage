/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:42:21 GMT 2022
 */

package net.spy.memcached.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.internal.SingleElementInfiniteIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingleElementInfiniteIterator_ESTest extends SingleElementInfiniteIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      SingleElementInfiniteIterator<Object> singleElementInfiniteIterator0 = new SingleElementInfiniteIterator<Object>(object0);
      Object object1 = singleElementInfiniteIterator0.next();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      SingleElementInfiniteIterator<Object> singleElementInfiniteIterator0 = new SingleElementInfiniteIterator<Object>(object0);
      // Undeclared exception!
      try { 
        singleElementInfiniteIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot remove from this iterator.
         //
         verifyException("net.spy.memcached.internal.SingleElementInfiniteIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SingleElementInfiniteIterator<Object> singleElementInfiniteIterator0 = new SingleElementInfiniteIterator<Object>((Object) null);
      boolean boolean0 = singleElementInfiniteIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SingleElementInfiniteIterator<Object> singleElementInfiniteIterator0 = new SingleElementInfiniteIterator<Object>((Object) null);
      Object object0 = singleElementInfiniteIterator0.next();
      assertNull(object0);
  }
}
