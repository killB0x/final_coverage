/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 12:39:01 GMT 2022
 */

package net.spy.memcached.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.util.Collection;
import java.util.LinkedList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import net.spy.memcached.BinaryConnectionFactory;
import net.spy.memcached.BroadcastOpFactory;
import net.spy.memcached.ClientMode;
import net.spy.memcached.ConnectionObserver;
import net.spy.memcached.DefaultConnectionFactory;
import net.spy.memcached.FailureMode;
import net.spy.memcached.MemcachedConnection;
import net.spy.memcached.MemcachedNode;
import net.spy.memcached.OperationFactory;
import net.spy.memcached.internal.BasicThreadFactory;
import net.spy.memcached.internal.CheckedOperationTimeoutException;
import net.spy.memcached.internal.OperationCompletionListener;
import net.spy.memcached.internal.OperationFuture;
import net.spy.memcached.ops.CancelledOperationStatus;
import net.spy.memcached.ops.MultiGetsOperationCallback;
import net.spy.memcached.ops.OperationCallback;
import net.spy.memcached.ops.OperationState;
import net.spy.memcached.ops.OperationStatus;
import net.spy.memcached.ops.StatsOperation;
import net.spy.memcached.ops.StatusCode;
import net.spy.memcached.ops.TimedOutOperationStatus;
import net.spy.memcached.ops.TouchOperation;
import net.spy.memcached.protocol.BaseOperationImpl;
import net.spy.memcached.protocol.ascii.AsciiOperationFactory;
import net.spy.memcached.protocol.binary.BinaryOperationFactory;
import net.spy.memcached.protocol.binary.StatsOperationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperationFuture_ESTest extends OperationFuture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(65280);
      assertNotNull(countDownLatch0);
      
      String string0 = countDownLatch0.toString();
      assertNotNull(string0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>((String) null, countDownLatch0, 4294967295L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertNull(operationFuture0.getKey());
      
      Integer integer0 = new Integer(65280);
      assertNotNull(integer0);
      assertEquals(65280, (int)integer0);
      
      AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer0);
      assertNotNull(atomicReference0);
      assertEquals("65280", atomicReference0.toString());
      
      OperationFuture<Integer> operationFuture1 = new OperationFuture<Integer>((String) null, countDownLatch0, atomicReference0, 65280, (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("65280", atomicReference0.toString());
      assertNull(operationFuture1.getKey());
      
      String string1 = operationFuture1.getKey();
      assertNull(string1);
      assertEquals("65280", atomicReference0.toString());
      assertNull(operationFuture1.getKey());
      
      AtomicReference<Delayed> atomicReference1 = new AtomicReference<Delayed>();
      assertNotNull(atomicReference1);
      assertEquals("null", atomicReference1.toString());
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture2 = new OperationFuture<ForkJoinTask<Integer>>("net.spy.memcached.internal.GetFutkre", countDownLatch0, 4294967295L, (ExecutorService) null);
      assertNotNull(operationFuture2);
      assertFalse(operationFuture2.equals((Object)operationFuture0));
      assertEquals("net.spy.memcached.internal.GetFutkre", operationFuture2.getKey());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture2.removeListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, (-1208), (-1208));
      assertNotNull(binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      assertNotNull(memcachedConnection0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0);
      assertNotNull(countDownLatch0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperation statsOperation0 = binaryOperationFactory0.keyStats("Wy_s?l-v+FlCISK.SW~", statsOperation_Callback0);
      assertNotNull(statsOperation0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isCancelled());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertFalse(statsOperation0.hasErrored());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2048, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      assertNotNull(forkJoinPool0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Runnable) memcachedConnection0, integer0);
      assertNotNull(forkJoinTask0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      ForkJoinTask<Integer> forkJoinTask1 = forkJoinPool0.submit(forkJoinTask0);
      assertNotNull(forkJoinTask1);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      AtomicReference<ForkJoinTask<Integer>> atomicReference0 = new AtomicReference<ForkJoinTask<Integer>>(forkJoinTask1);
      assertNotNull(atomicReference0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>((String) null, countDownLatch0, atomicReference0, 105L, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(operationFuture0.getKey());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      operationFuture0.setOperation(statsOperation0);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(operationFuture0.getKey());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isCancelled());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertFalse(statsOperation0.hasErrored());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = operationFuture0.removeListener(operationCompletionListener0);
      assertNotNull(operationFuture1);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertSame(operationFuture0, operationFuture1);
      assertSame(operationFuture1, operationFuture0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertNull(operationFuture0.getKey());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertEquals(0, linkedList0.size());
      assertNull(operationFuture1.getKey());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Wy_s?l-v+FlCISK.SW~";
      CountDownLatch countDownLatch0 = new CountDownLatch(0);
      assertNotNull(countDownLatch0);
      
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 0, 0);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      
      ExecutorService executorService0 = binaryConnectionFactory0.getListenerExecutorService();
      assertNotNull(executorService0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      
      OperationFuture<Future<Object>> operationFuture0 = new OperationFuture<Future<Object>>("Wy_s?l-v+FlCISK.SW~", countDownLatch0, 0L, executorService0);
      assertNotNull(operationFuture0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(0, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals("Wy_s?l-v+FlCISK.SW~", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.getCas();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(190, (-941));
      assertNotNull(binaryConnectionFactory0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(190, binaryConnectionFactory0.getOpQueueLen());
      assertEquals((-941), binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedBlockingDeque<ConnectionObserver> linkedBlockingDeque0 = new LinkedBlockingDeque<ConnectionObserver>();
      assertNotNull(linkedBlockingDeque0);
      
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      assertNotNull(asciiOperationFactory0);
      
      MemcachedConnection memcachedConnection0 = new MemcachedConnection(190, binaryConnectionFactory0, linkedList0, linkedBlockingDeque0, binaryConnectionFactory0.DEFAULT_FAILURE_MODE, asciiOperationFactory0);
      assertNotNull(memcachedConnection0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0);
      assertNotNull(countDownLatch0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(190, binaryConnectionFactory0.getOpQueueLen());
      assertEquals((-941), binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isInterrupted());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("", countDownLatch0, atomicReference0, 1L, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals(190, binaryConnectionFactory0.getOpQueueLen());
      assertEquals((-941), binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isInterrupted());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals("null", atomicReference0.toString());
      assertEquals("", operationFuture0.getKey());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        operationFuture0.get(1L, timeUnit0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, (-1208), (-1208));
      assertNotNull(binaryConnectionFactory0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      assertNotNull(memcachedConnection0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0);
      assertNotNull(countDownLatch0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("Wy_s?l-v+FlCISK.SW~", countDownLatch0, 16384, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals("Wy_s?l-v+FlCISK.SW~", operationFuture0.getKey());
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = new OperationFuture<ForkJoinTask<Integer>>(" LusFwX\"prb!", countDownLatch0, (AtomicReference<ForkJoinTask<Integer>>) null, (-911L), (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals(" LusFwX\"prb!", operationFuture1.getKey());
      
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Runnable) memcachedConnection0, (Integer) 16384);
      assertNotNull(forkJoinTask0);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals((-1208), binaryConnectionFactory0.getOpQueueLen());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertEquals((-1208), binaryConnectionFactory0.getReadBufSize());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      StatusCode statusCode0 = StatusCode.ERR_EXISTS;
      OperationStatus operationStatus0 = new OperationStatus(true, "1F*U-QsBBRL)Pl5", statusCode0);
      assertNotNull(operationStatus0);
      assertTrue(operationStatus0.isSuccess());
      assertEquals(StatusCode.ERR_EXISTS, operationStatus0.getStatusCode());
      assertEquals("1F*U-QsBBRL)Pl5", operationStatus0.getMessage());
      
      // Undeclared exception!
      try { 
        operationFuture1.set(forkJoinTask0, operationStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      assertNotNull(countDownLatch0);
      
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("", countDownLatch0, 2, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = new OperationFuture<ForkJoinTask<Integer>>("", countDownLatch0, 0L, (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("", operationFuture1.getKey());
      
      OperationStatus operationStatus0 = operationFuture1.status;
      assertNull(operationStatus0);
      
      OperationFuture<Integer> operationFuture2 = new OperationFuture<Integer>("sfqRF5U?", countDownLatch0, (-242L), (ExecutorService) null);
      assertNotNull(operationFuture2);
      assertFalse(operationFuture2.equals((Object)operationFuture0));
      assertEquals("sfqRF5U?", operationFuture2.getKey());
      
      StatusCode statusCode0 = StatusCode.ERR_NOT_FOUND;
      OperationStatus operationStatus1 = new OperationStatus(true, "", statusCode0);
      assertNotNull(operationStatus1);
      assertTrue(operationStatus1.isSuccess());
      assertEquals("", operationStatus1.getMessage());
      assertEquals(StatusCode.ERR_NOT_FOUND, operationStatus1.getStatusCode());
      
      operationFuture2.set(integer0, operationStatus1);
      assertNotSame(operationFuture2, operationFuture0);
      assertFalse(operationFuture2.equals((Object)operationFuture0));
      assertEquals("sfqRF5U?", operationFuture2.getKey());
      assertTrue(operationStatus1.isSuccess());
      assertEquals("", operationStatus1.getMessage());
      assertEquals(StatusCode.ERR_NOT_FOUND, operationStatus1.getStatusCode());
      
      OperationStatus operationStatus2 = operationFuture2.getStatus();
      assertNotNull(operationStatus2);
      assertNotSame(operationFuture2, operationFuture0);
      assertSame(operationStatus2, operationStatus1);
      assertFalse(operationFuture2.equals((Object)operationFuture0));
      assertEquals("sfqRF5U?", operationFuture2.getKey());
      assertEquals(StatusCode.ERR_NOT_FOUND, operationStatus2.getStatusCode());
      assertEquals("", operationStatus2.getMessage());
      assertTrue(operationStatus2.isSuccess());
      
      // Undeclared exception!
      try { 
        operationFuture2.getCas();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Timed out waiting for operation
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("cF|jb'o", (CountDownLatch) null, (-1L), (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("cF|jb'o", operationFuture0.getKey());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperation statsOperation0 = binaryOperationFactory0.keyStats("cF|jb'o", statsOperation_Callback0);
      assertNotNull(statsOperation0);
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertFalse(statsOperation0.isCancelled());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertEquals(0, statsOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      operationFuture0.setOperation(statsOperation0);
      assertEquals("cF|jb'o", operationFuture0.getKey());
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertFalse(statsOperation0.isCancelled());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertEquals(0, statsOperation0.getCloneCount());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.removeListener(operationCompletionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("", (CountDownLatch) null, 1367L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperation statsOperation0 = binaryOperationFactory0.keyStats("", statsOperation_Callback0);
      assertNotNull(statsOperation0);
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      operationFuture0.setOperation(statsOperation0);
      assertEquals("", operationFuture0.getKey());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.removeListener(operationCompletionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(65280);
      assertNotNull(countDownLatch0);
      
      String string0 = countDownLatch0.toString();
      assertNotNull(string0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>((String) null, countDownLatch0, 4294967295L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertNull(operationFuture0.getKey());
      
      BinaryOperationFactory binaryOperationFactory0 = new BinaryOperationFactory();
      assertNotNull(binaryOperationFactory0);
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperation statsOperation0 = binaryOperationFactory0.keyStats((String) null, statsOperation_Callback0);
      assertNotNull(statsOperation0);
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      operationFuture0.setOperation(statsOperation0);
      assertNull(operationFuture0.getKey());
      assertFalse(statsOperation0.hasErrored());
      assertFalse(statsOperation0.isTimedOutUnsent());
      assertEquals(0L, statsOperation0.getWriteCompleteTimestamp());
      assertFalse(statsOperation0.isTimedOut());
      assertEquals(0, statsOperation0.getCloneCount());
      assertFalse(statsOperation0.isCancelled());
      assertEquals(OperationState.WRITE_QUEUED, statsOperation0.getState());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = operationFuture0.removeListener(operationCompletionListener0);
      assertNotNull(operationFuture1);
      assertSame(operationFuture0, operationFuture1);
      assertSame(operationFuture1, operationFuture0);
      assertNull(operationFuture0.getKey());
      assertNull(operationFuture1.getKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "cF|jb'o";
      CountDownLatch countDownLatch0 = null;
      long long0 = 0L;
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("cF|jb'o", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("cF|jb'o", operationFuture0.getKey());
      
      int int0 = 1;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        operationFuture0.get((-2170L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      CountDownLatch countDownLatch0 = new CountDownLatch(1);
      assertNotNull(countDownLatch0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("Wy_s?l-v+FlCISK.SW~", countDownLatch0, (-1208), scheduledThreadPoolExecutor0);
      assertNotNull(operationFuture0);
      assertEquals("Wy_s?l-v+FlCISK.SW~", operationFuture0.getKey());
      
      OperationStatus operationStatus0 = operationFuture0.status;
      assertNull(operationStatus0);
      
      OperationFuture<Integer> operationFuture1 = new OperationFuture<Integer>("", countDownLatch0, 0L, scheduledThreadPoolExecutor0);
      assertNotNull(operationFuture1);
      assertEquals("", operationFuture1.getKey());
      
      operationFuture1.set(integer0, (OperationStatus) null);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("", operationFuture1.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture1.getStatus();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Timed out waiting for operation
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      assertNotNull(countDownLatch0);
      
      int int0 = 0;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      StatsOperation.Callback statsOperation_Callback0 = mock(StatsOperation.Callback.class, new ViolatedAssumptionAnswer());
      StatsOperationImpl statsOperationImpl0 = new StatsOperationImpl("", statsOperation_Callback0);
      assertNotNull(statsOperationImpl0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isCancelled());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      
      String string0 = statsOperationImpl0.toString();
      assertNotNull(string0);
      assertEquals("Cmd: 16 Opaque: 1", string0);
      assertEquals(OperationState.WRITE_QUEUED, statsOperationImpl0.getState());
      assertFalse(statsOperationImpl0.isTimedOutUnsent());
      assertFalse(statsOperationImpl0.isCancelled());
      assertEquals(0L, statsOperationImpl0.getWriteCompleteTimestamp());
      assertFalse(statsOperationImpl0.hasErrored());
      assertFalse(statsOperationImpl0.isTimedOut());
      assertEquals(0, statsOperationImpl0.getCloneCount());
      
      long long0 = 648L;
      ExecutorService executorService0 = null;
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("", countDownLatch0, 2, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.getStatus();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Timed out waiting for operation
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(1);
      assertNotNull(countDownLatch0);
      
      countDownLatch0.countDown();
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer1);
      assertNotNull(atomicReference0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals("1", atomicReference0.toString());
      
      ClientMode clientMode0 = ClientMode.Dynamic;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 1, 0);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      ExecutorService executorService0 = binaryConnectionFactory0.getListenerExecutorService();
      assertNotNull(executorService0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread((Runnable) null);
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(16384, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      assertNotNull(forkJoinPool0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("", countDownLatch0, atomicReference0, 0L, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals("1", atomicReference0.toString());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertEquals("", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.get();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertNotNull(binaryConnectionFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      assertNotNull(memcachedConnection0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      LinkedBlockingDeque<MemcachedNode> linkedBlockingDeque0 = new LinkedBlockingDeque<MemcachedNode>();
      assertNotNull(linkedBlockingDeque0);
      
      OperationFactory operationFactory0 = binaryConnectionFactory0.getOperationFactory();
      assertNotNull(operationFactory0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0, (Collection<MemcachedNode>) linkedBlockingDeque0);
      assertNotNull(countDownLatch0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("4x@&3J,AQD", countDownLatch0, 30L, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals("4x@&3J,AQD", operationFuture0.getKey());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      OperationFuture<OperationFuture<Object>> operationFuture1 = new OperationFuture<OperationFuture<Object>>("SASLAUTH", countDownLatch0, 998, forkJoinPool0);
      assertNotNull(operationFuture1);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertFalse(memcachedConnection0.isInterrupted());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals("SASLAUTH", operationFuture1.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture1.getStatus();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountDownLatch countDownLatch0 = null;
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("cF|jb'o", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("cF|jb'o", operationFuture0.getKey());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = new OperationFuture<ForkJoinTask<Integer>>("cF|jb'o", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("cF|jb'o", operationFuture1.getKey());
      
      OperationStatus operationStatus0 = operationFuture1.status;
      assertNull(operationStatus0);
      
      operationFuture0.set(integer0, (OperationStatus) null);
      assertEquals("cF|jb'o", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.getStatus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      assertNotNull(countDownLatch0);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("", countDownLatch0, 2, scheduledThreadPoolExecutor0);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "&/CU=b<`w,h8.fY6i$*");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ForkJoinTask<Integer> forkJoinTask0 = forkJoinPool0.submit((Runnable) mockThread1, integer0);
      assertNotNull(forkJoinTask0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      
      StatusCode statusCode0 = StatusCode.ERR_UNKNOWN_COMMAND;
      OperationStatus operationStatus0 = new OperationStatus(true, "No operation", statusCode0);
      assertNotNull(operationStatus0);
      assertEquals(StatusCode.ERR_UNKNOWN_COMMAND, operationStatus0.getStatusCode());
      assertTrue(operationStatus0.isSuccess());
      assertEquals("No operation", operationStatus0.getMessage());
      
      operationFuture0.set(forkJoinTask0, operationStatus0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("", operationFuture0.getKey());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(StatusCode.ERR_UNKNOWN_COMMAND, operationStatus0.getStatusCode());
      assertTrue(operationStatus0.isSuccess());
      assertEquals("No operation", operationStatus0.getMessage());
      
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.removeListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      assertNotNull(countDownLatch0);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 2, (-1043));
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals((-1043), binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      ExecutorService executorService0 = binaryConnectionFactory0.getListenerExecutorService();
      assertNotNull(executorService0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals((-1043), binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      
      OperationFuture<Future<Object>> operationFuture0 = new OperationFuture<Future<Object>>("r7'VeEdL'ke|EB}J-", countDownLatch0, 1000L, executorService0);
      assertNotNull(operationFuture0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals((-1043), binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals("r7'VeEdL'ke|EB}J-", operationFuture0.getKey());
      
      OperationFuture<MockInetSocketAddress> operationFuture1 = new OperationFuture<MockInetSocketAddress>("r7'VeEdL'ke|EB}J-", countDownLatch0, (-1663L), executorService0);
      assertNotNull(operationFuture1);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2, binaryConnectionFactory0.getOpQueueLen());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals((-1043), binaryConnectionFactory0.getReadBufSize());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals("r7'VeEdL'ke|EB}J-", operationFuture1.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture1.cancel(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicThreadFactory basicThreadFactory0 = new BasicThreadFactory("Error getting status of operation", false);
      assertNotNull(basicThreadFactory0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1179, basicThreadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>(scheduledThreadPoolExecutor0);
      assertNotNull(atomicReference0);
      
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("INFO", (CountDownLatch) null, atomicReference0, 2083L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("INFO", operationFuture0.getKey());
      
      ExecutorService executorService0 = operationFuture0.executor();
      assertNull(executorService0);
      assertEquals("INFO", operationFuture0.getKey());
      
      OperationFuture<OperationFuture<Delayed>> operationFuture1 = new OperationFuture<OperationFuture<Delayed>>("Error getting status of operation", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("Error getting status of operation", operationFuture1.getKey());
      
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      assertNotNull(asciiOperationFactory0);
      
      boolean boolean0 = scheduledThreadPoolExecutor0.isShutdown();
      assertFalse(boolean0);
      
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 1179);
      assertNotNull(multiGetsOperationCallback0);
      
      TouchOperation touchOperation0 = asciiOperationFactory0.touch(".`Nz4 [@Hd|", (-1), multiGetsOperationCallback0);
      assertNotNull(touchOperation0);
      assertFalse(touchOperation0.isTimedOutUnsent());
      assertFalse(touchOperation0.isCancelled());
      assertFalse(touchOperation0.hasErrored());
      assertEquals(0L, touchOperation0.getWriteCompleteTimestamp());
      assertFalse(touchOperation0.isTimedOut());
      assertEquals((-1), touchOperation0.getExpiration());
      assertEquals(OperationState.WRITE_QUEUED, touchOperation0.getState());
      assertEquals(0, touchOperation0.getCloneCount());
      
      operationFuture1.setOperation(touchOperation0);
      assertEquals("Error getting status of operation", operationFuture1.getKey());
      assertFalse(touchOperation0.isTimedOutUnsent());
      assertFalse(touchOperation0.isCancelled());
      assertFalse(touchOperation0.hasErrored());
      assertEquals(0L, touchOperation0.getWriteCompleteTimestamp());
      assertFalse(touchOperation0.isTimedOut());
      assertEquals((-1), touchOperation0.getExpiration());
      assertEquals(OperationState.WRITE_QUEUED, touchOperation0.getState());
      assertEquals(0, touchOperation0.getCloneCount());
      
      AtomicReference<OperationFuture<Object>> atomicReference1 = new AtomicReference<OperationFuture<Object>>();
      assertNotNull(atomicReference1);
      assertEquals("null", atomicReference1.toString());
      
      OperationFuture<OperationFuture<Object>> operationFuture2 = new OperationFuture<OperationFuture<Object>>("", (CountDownLatch) null, atomicReference1, 0L, (ExecutorService) null);
      assertNotNull(operationFuture2);
      assertEquals("null", atomicReference1.toString());
      assertEquals("", operationFuture2.getKey());
      
      operationFuture0.setCas((-1));
      assertEquals("INFO", operationFuture0.getKey());
      
      OperationFuture<MockInetSocketAddress> operationFuture3 = new OperationFuture<MockInetSocketAddress>(".`Nz4 [@Hd|", (CountDownLatch) null, (-3092L), scheduledThreadPoolExecutor0);
      assertNotNull(operationFuture3);
      assertEquals(".`Nz4 [@Hd|", operationFuture3.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture3.cancel(false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>(" data=", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals(" data=", operationFuture0.getKey());
      
      String string0 = operationFuture0.getKey();
      assertNotNull(string0);
      assertEquals(" data=", string0);
      assertEquals(" data=", operationFuture0.getKey());
      
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      OperationFuture<Delayed> operationFuture1 = new OperationFuture<Delayed>("", (CountDownLatch) null, atomicReference0, (-1L), (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("null", atomicReference0.toString());
      assertEquals("", operationFuture1.getKey());
      
      OperationFuture<Delayed> operationFuture2 = new OperationFuture<Delayed>("Interrupted", (CountDownLatch) null, (-3327L), (ExecutorService) null);
      assertNotNull(operationFuture2);
      assertFalse(operationFuture2.equals((Object)operationFuture1));
      assertEquals("Interrupted", operationFuture2.getKey());
      
      operationFuture2.setCas((-1L));
      assertNotSame(operationFuture2, operationFuture1);
      assertFalse(operationFuture2.equals((Object)operationFuture1));
      assertEquals("Interrupted", operationFuture2.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture2.cancel();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>(")?qr4@)n/;o&Ng2 ", (CountDownLatch) null, (-283), (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals(")?qr4@)n/;o&Ng2 ", operationFuture0.getKey());
      
      OperationFuture<Object> operationFuture1 = new OperationFuture<Object>(")?qr4@)n/;o&Ng2 ", (CountDownLatch) null, (-283), (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals(")?qr4@)n/;o&Ng2 ", operationFuture1.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture1.isCancelled();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      assertNotNull(binaryConnectionFactory0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      assertNotNull(memcachedConnection0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isInterrupted());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      LinkedBlockingDeque<MemcachedNode> linkedBlockingDeque0 = new LinkedBlockingDeque<MemcachedNode>();
      assertNotNull(linkedBlockingDeque0);
      
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0, (Collection<MemcachedNode>) linkedBlockingDeque0);
      assertNotNull(countDownLatch0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isInterrupted());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertEquals(0, memcachedConnection0.countStackFrames());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("4x@&3J,AQD", countDownLatch0, 30L, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(ClientMode.Dynamic, binaryConnectionFactory0.getClientMode());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(16384, binaryConnectionFactory0.getReadBufSize());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(16384, binaryConnectionFactory0.getOpQueueLen());
      assertEquals(0, linkedList0.size());
      assertFalse(memcachedConnection0.isInterrupted());
      assertFalse(memcachedConnection0.isDaemon());
      assertFalse(memcachedConnection0.isShutDown());
      assertEquals(0, memcachedConnection0.countStackFrames());
      assertEquals("4x@&3J,AQD", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.isCancelled();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(695);
      assertNotNull(countDownLatch0);
      
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("", countDownLatch0, 0L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      String string0 = operationFuture0.getKey();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", operationFuture0.getKey());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = countDownLatch0.await((long) 695, timeUnit0);
      assertFalse(boolean0);
      
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      OperationFuture<Delayed> operationFuture1 = new OperationFuture<Delayed>("", countDownLatch0, atomicReference0, 0L, (ExecutorService) null);
      assertNotNull(operationFuture1);
      assertEquals("null", atomicReference0.toString());
      assertEquals("", operationFuture1.getKey());
      
      String string1 = "]P{p4g#^hcBVNjF";
      OperationFuture<Delayed> operationFuture2 = new OperationFuture<Delayed>("]P{p4g#^hcBVNjF", countDownLatch0, 0L, (ExecutorService) null);
      assertNotNull(operationFuture2);
      assertFalse(operationFuture2.equals((Object)operationFuture1));
      assertEquals("]P{p4g#^hcBVNjF", operationFuture2.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture1.cancel();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CountDownLatch countDownLatch0 = null;
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("Error getting status of operation", (CountDownLatch) null, 0L, (ExecutorService) null);
      assertNotNull(operationFuture0);
      assertEquals("Error getting status of operation", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.getCas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 65280;
      CountDownLatch countDownLatch0 = new CountDownLatch(65280);
      assertNotNull(countDownLatch0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      assertNotNull(forkJoinPool0);
      
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("", countDownLatch0, 1, forkJoinPool0);
      assertNotNull(operationFuture0);
      assertEquals("", operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.getCas();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Timed out waiting for operation
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(2086);
      assertNotNull(integer0);
      assertEquals(2086, (int)integer0);
      
      AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>(integer0);
      assertNotNull(atomicReference0);
      assertEquals("2086", atomicReference0.toString());
      
      ClientMode clientMode0 = ClientMode.Static;
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory(clientMode0, 2086, 0);
      assertNotNull(binaryConnectionFactory0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2086, binaryConnectionFactory0.getOpQueueLen());
      
      ExecutorService executorService0 = binaryConnectionFactory0.getListenerExecutorService();
      assertNotNull(executorService0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2086, binaryConnectionFactory0.getOpQueueLen());
      
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>((String) null, (CountDownLatch) null, atomicReference0, 2086, executorService0);
      assertNotNull(operationFuture0);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_OP_QUEUE_LEN);
      assertEquals(998, DefaultConnectionFactory.DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD);
      assertEquals(10000L, DefaultConnectionFactory.DEFAULT_OP_QUEUE_MAX_BLOCK_TIME);
      assertEquals(1000L, DefaultConnectionFactory.DEFAULT_AUTH_WAIT_TIME);
      assertEquals(30L, DefaultConnectionFactory.DEFAULT_MAX_RECONNECT_DELAY);
      assertEquals(16384, DefaultConnectionFactory.DEFAULT_READ_BUFFER_SIZE);
      assertEquals(2500L, DefaultConnectionFactory.DEFAULT_OPERATION_TIMEOUT);
      assertEquals("2086", atomicReference0.toString());
      assertFalse(binaryConnectionFactory0.isDaemon());
      assertEquals(0, binaryConnectionFactory0.getReadBufSize());
      assertTrue(binaryConnectionFactory0.isDefaultExecutorService());
      assertEquals(10000L, binaryConnectionFactory0.getOpQueueMaxBlockTime());
      assertEquals(2500L, binaryConnectionFactory0.getOperationTimeout());
      assertFalse(binaryConnectionFactory0.getKeepAlive());
      assertEquals(998, binaryConnectionFactory0.getTimeoutExceptionThreshold());
      assertFalse(binaryConnectionFactory0.shouldOptimize());
      assertEquals(30L, binaryConnectionFactory0.getMaxReconnectDelay());
      assertFalse(binaryConnectionFactory0.useNagleAlgorithm());
      assertFalse(binaryConnectionFactory0.skipTlsHostnameVerification());
      assertEquals(ClientMode.Static, binaryConnectionFactory0.getClientMode());
      assertEquals(60000L, binaryConnectionFactory0.getDynamicModePollingInterval());
      assertEquals(FailureMode.Redistribute, binaryConnectionFactory0.getFailureMode());
      assertNull(binaryConnectionFactory0.getHostnameForTlsVerification());
      assertEquals(1000L, binaryConnectionFactory0.getAuthWaitTime());
      assertEquals(2086, binaryConnectionFactory0.getOpQueueLen());
      assertNull(operationFuture0.getKey());
      
      // Undeclared exception!
      try { 
        operationFuture0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("", countDownLatch0, 2, scheduledThreadPoolExecutor0);
      TimedOutOperationStatus timedOutOperationStatus0 = (TimedOutOperationStatus)BaseOperationImpl.TIMED_OUT;
      timedOutOperationStatus0.toString();
      scheduledThreadPoolExecutor0.setRemoveOnCancelPolicy(true);
      AtomicReference<ForkJoinTask<Object>> atomicReference0 = new AtomicReference<ForkJoinTask<Object>>();
      OperationFuture<ForkJoinTask<Object>> operationFuture1 = new OperationFuture<ForkJoinTask<Object>>("", countDownLatch0, atomicReference0, 2, scheduledThreadPoolExecutor0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        operationFuture1.get((long) 2, timeUnit0);
        fail("Expecting exception: CheckedOperationTimeoutException");
      
      } catch(CheckedOperationTimeoutException e) {
         //
         // Timed out waiting for operation - failing node: <unknown>
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadPoolExecutor_CallerRunsPolicy0);
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("Error getting status of operation", countDownLatch0, 2, scheduledThreadPoolExecutor0);
      scheduledThreadPoolExecutor0.getContinueExistingPeriodicTasksAfterShutdownPolicy();
      OperationFuture<Object> operationFuture1 = new OperationFuture<Object>("s/<]", countDownLatch0, 2, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        operationFuture1.get();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Timed out waiting for operation
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(695);
      countDownLatch0.toString();
      BasicThreadFactory basicThreadFactory0 = new BasicThreadFactory("", false);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(695, basicThreadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      OperationFuture<OperationFuture<Delayed>> operationFuture0 = new OperationFuture<OperationFuture<Delayed>>("", countDownLatch0, (AtomicReference<OperationFuture<Delayed>>) null, 695, scheduledThreadPoolExecutor0);
      OperationFuture<ForkJoinTask<Object>> operationFuture1 = new OperationFuture<ForkJoinTask<Object>>("Nh7P!AK*-Gv'u4LsH", countDownLatch0, 0L, scheduledThreadPoolExecutor0);
      CancelledOperationStatus cancelledOperationStatus0 = (CancelledOperationStatus)BaseOperationImpl.CANCELLED;
      operationFuture1.status = (OperationStatus) cancelledOperationStatus0;
      cancelledOperationStatus0.toString();
      scheduledThreadPoolExecutor0.setRemoveOnCancelPolicy(false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        operationFuture1.get(0L, timeUnit0);
        fail("Expecting exception: CheckedOperationTimeoutException");
      
      } catch(CheckedOperationTimeoutException e) {
         //
         // Timed out waiting for operation - failing node: <unknown>
         //
         verifyException("net.spy.memcached.internal.OperationFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      CountDownLatch countDownLatch0 = new CountDownLatch(1);
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>((String) null, countDownLatch0, 1, (ExecutorService) null);
      operationFuture0.signalComplete();
      // Undeclared exception!
      try { 
        operationFuture0.cancel();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("cF|jb'o", (CountDownLatch) null, 0L, (ExecutorService) null);
      OperationFuture<ForkJoinTask<Integer>> operationFuture1 = new OperationFuture<ForkJoinTask<Integer>>("cF|jb'o", (CountDownLatch) null, 0L, (ExecutorService) null);
      OperationStatus operationStatus0 = operationFuture1.status;
      // Undeclared exception!
      try { 
        operationFuture1.cancel();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicThreadFactory basicThreadFactory0 = new BasicThreadFactory("Wzp [&z7L}!J&4i=H_A", false);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(598, basicThreadFactory0);
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("Wzp [&z7L}!J&4i=H_A", (CountDownLatch) null, (AtomicReference<Object>) null, 500L, scheduledThreadPoolExecutor0);
      ExecutorService executorService0 = operationFuture0.executor();
      OperationFuture<OperationFuture<Delayed>> operationFuture1 = new OperationFuture<OperationFuture<Delayed>>("Wzp [&z7L}!J&4i=H_A", (CountDownLatch) null, (-1468L), executorService0);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      TouchOperation touchOperation0 = asciiOperationFactory0.touch("#x\"blqSE$625*", 598, (OperationCallback) null);
      operationFuture1.setOperation(touchOperation0);
      assertEquals("Wzp [&z7L}!J&4i=H_A", operationFuture1.getKey());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicThreadFactory basicThreadFactory0 = new BasicThreadFactory("Error getting status of operation", false);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1179, basicThreadFactory0);
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>(scheduledThreadPoolExecutor0);
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("INFO", (CountDownLatch) null, atomicReference0, 2083L, (ExecutorService) null);
      operationFuture0.executor();
      OperationFuture<OperationFuture<Delayed>> operationFuture1 = new OperationFuture<OperationFuture<Delayed>>("Error getting status of operation", (CountDownLatch) null, 0L, (ExecutorService) null);
      AsciiOperationFactory asciiOperationFactory0 = new AsciiOperationFactory();
      scheduledThreadPoolExecutor0.getTaskCount();
      scheduledThreadPoolExecutor0.isShutdown();
      MultiGetsOperationCallback multiGetsOperationCallback0 = new MultiGetsOperationCallback((OperationCallback) null, 1179);
      TouchOperation touchOperation0 = asciiOperationFactory0.touch(".`Nz4 [@Hd|", (-1), multiGetsOperationCallback0);
      operationFuture1.setOperation(touchOperation0);
      AtomicReference<OperationFuture<Object>> atomicReference1 = new AtomicReference<OperationFuture<Object>>();
      OperationFuture<OperationFuture<Object>> operationFuture2 = new OperationFuture<OperationFuture<Object>>("", (CountDownLatch) null, atomicReference1, 0L, (ExecutorService) null);
      OperationFuture<MockInetSocketAddress> operationFuture3 = new OperationFuture<MockInetSocketAddress>(".`Nz4 [@Hd|", (CountDownLatch) null, (-3092L), scheduledThreadPoolExecutor0);
      operationFuture3.signalComplete();
      // Undeclared exception!
      try { 
        operationFuture3.cancel(false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = null;
      int int0 = 1;
      CountDownLatch countDownLatch0 = new CountDownLatch(1);
      ExecutorService executorService0 = null;
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>((String) null, countDownLatch0, 1, (ExecutorService) null);
      operationFuture0.signalComplete();
      // Undeclared exception!
      try { 
        operationFuture0.isDone();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadPoolExecutor_CallerRunsPolicy0);
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("", countDownLatch0, 2, scheduledThreadPoolExecutor0);
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.removeListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>("Errorqgetting status of operation", countDownLatch0, 927L, scheduledThreadPoolExecutor0);
      OperationFuture<MockInetSocketAddress> operationFuture1 = new OperationFuture<MockInetSocketAddress>("Errorqgetting status of operation", countDownLatch0, (AtomicReference<MockInetSocketAddress>) null, 3124L, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        operationFuture0.removeListener((OperationCompletionListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The listener can't be null.
         //
         verifyException("net.spy.memcached.internal.AbstractListenableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("Error getting status of operation", (CountDownLatch) null, 0L, (ExecutorService) null);
      operationFuture0.getKey();
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      OperationFuture<Delayed> operationFuture1 = new OperationFuture<Delayed>("(Y3OR-B", (CountDownLatch) null, atomicReference0, (-1812L), (ExecutorService) null);
      OperationFuture<Delayed> operationFuture2 = new OperationFuture<Delayed>("Error getting status of operation", (CountDownLatch) null, 5779L, (ExecutorService) null);
      assertEquals("Error getting status of operation", operationFuture2.getKey());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OperationFuture<Integer> operationFuture0 = new OperationFuture<Integer>("Error getting status of operation", (CountDownLatch) null, 0L, (ExecutorService) null);
      operationFuture0.getKey();
      AtomicReference<Delayed> atomicReference0 = new AtomicReference<Delayed>();
      OperationFuture<Delayed> operationFuture1 = new OperationFuture<Delayed>("", (CountDownLatch) null, atomicReference0, 0L, (ExecutorService) null);
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture1.removeListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      OperationFuture<MockInetSocketAddress> operationFuture0 = new OperationFuture<MockInetSocketAddress>((String) null, countDownLatch0, (AtomicReference<MockInetSocketAddress>) null, 2, scheduledThreadPoolExecutor0);
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.addListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CountDownLatch countDownLatch0 = new CountDownLatch(2);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2);
      OperationFuture<MockInetSocketAddress> operationFuture0 = new OperationFuture<MockInetSocketAddress>("rek8}Bflpq", countDownLatch0, (AtomicReference<MockInetSocketAddress>) null, 3124L, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        operationFuture0.addListener((OperationCompletionListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The listener can't be null.
         //
         verifyException("net.spy.memcached.internal.AbstractListenableFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-283));
      OperationFuture<ForkJoinTask<Integer>> operationFuture0 = new OperationFuture<ForkJoinTask<Integer>>(")?qr4@)n/;o&Ng2 ", (CountDownLatch) null, (-283), (ExecutorService) null);
      // Undeclared exception!
      try { 
        operationFuture0.isDone();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryConnectionFactory binaryConnectionFactory0 = new BinaryConnectionFactory();
      LinkedList<InetSocketAddress> linkedList0 = new LinkedList<InetSocketAddress>();
      MemcachedConnection memcachedConnection0 = binaryConnectionFactory0.createConnection(linkedList0);
      BroadcastOpFactory broadcastOpFactory0 = mock(BroadcastOpFactory.class, new ViolatedAssumptionAnswer());
      LinkedBlockingDeque<MemcachedNode> linkedBlockingDeque0 = new LinkedBlockingDeque<MemcachedNode>();
      CountDownLatch countDownLatch0 = memcachedConnection0.broadcastOperation(broadcastOpFactory0, (Collection<MemcachedNode>) linkedBlockingDeque0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      OperationFuture<Object> operationFuture0 = new OperationFuture<Object>("4x@&3J,AQD", countDownLatch0, 30L, forkJoinPool0);
      OperationCompletionListener operationCompletionListener0 = mock(OperationCompletionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        operationFuture0.addListener(operationCompletionListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No operation
         //
      }
  }
}
