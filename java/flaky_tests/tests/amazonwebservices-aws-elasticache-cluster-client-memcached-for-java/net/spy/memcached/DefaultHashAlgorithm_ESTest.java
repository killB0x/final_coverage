/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 13:13:14 GMT 2022
 */

package net.spy.memcached;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.spy.memcached.DefaultHashAlgorithm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultHashAlgorithm_ESTest extends DefaultHashAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultHashAlgorithm[] defaultHashAlgorithmArray0 = DefaultHashAlgorithm.values();
      assertEquals(7, defaultHashAlgorithmArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      long long0 = defaultHashAlgorithm0.hash("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1A_64_HASH;
      // Undeclared exception!
      try { 
        defaultHashAlgorithm0.hash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.DefaultHashAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultHashAlgorithm.computeHashDigest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.spy.memcached.KeyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1A_32_HASH;
      long long0 = defaultHashAlgorithm0.hash(".");
      assertEquals(722245873L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1_32_HASH;
      long long0 = defaultHashAlgorithm0.hash("ijuzGA");
      assertEquals(257848273L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.KETAMA_HASH;
      long long0 = defaultHashAlgorithm0.hash("N#EGdF&C)n<-,!)");
      assertEquals(1175271662L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.FNV1A_64_HASH;
      long long0 = defaultHashAlgorithm0.hash("UO$^{ :WQ@)");
      assertEquals(908102589L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.CRC_HASH;
      long long0 = defaultHashAlgorithm0.hash("+^_+3+*p");
      assertEquals(4341L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.valueOf("FNV1_64_HASH");
      long long0 = defaultHashAlgorithm0.hash("=97:0l");
      assertEquals(2964866152L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultHashAlgorithm defaultHashAlgorithm0 = DefaultHashAlgorithm.NATIVE_HASH;
      long long0 = defaultHashAlgorithm0.hash("[20\"<{su7t");
      assertEquals(3114484199L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = DefaultHashAlgorithm.computeHashDigest("^2");
      assertEquals(48, byteArray0.length);
  }
}
