/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 03:58:58 GMT 2022
 */

package com.github.bordertech.buildtools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.bordertech.buildtools.Badger;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Badger_ESTest extends Badger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile((File) null, "");
      File file0 = badger0.getOutputFile(mockFile0);
      assertEquals(0L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Badger badger0 = new Badger();
      File file0 = MockFile.createTempFile("t9R)[JyK]7K#WV", "t9R)[JyK]7K#WV");
      File file1 = badger0.getOutputFile(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("t9R)[JyK]7K#WV0t9R)[JyK]7K#WV.svg.svg");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file2 = badger0.getOutputFile(file1);
      assertFalse(file2.isFile());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("com.github.bordertech.buildtools.plugins.BadgerException");
      badger0.setOutputDir(mockFile0);
      File file0 = badger0.getOutputFile(mockFile0);
      assertEquals("com.github.bordertech.buildtools.plugins.BadgerException.svg", file0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("badges.xsl.svg");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "zhm?=Z\u00038:fwl]l{u02");
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("/bordertech/badges.xsl");
      File file0 = badger0.getOutputFile(mockFile0);
      assertEquals(18L, file0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Badger badger0 = new Badger();
      // Undeclared exception!
      try { 
        badger0.getOutputFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.bordertech.buildtools.Badger", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("Q$9(zF3Z#?`tl0Q$9(zF3Z#?`tl.svg.svg.xml");
      File file0 = badger0.getOutputFile(mockFile0);
      assertEquals("Q$9(zF3Z#?`tl0Q$9(zF3Z#?`tl.svg.svg.svg", file0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("a(", "a(");
      File[] fileArray0 = new File[1];
      badger0.setOutputDir(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      badger0.setInputXml(fileArray0);
      try { 
        badger0.execute();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not create directory/home/user/a(/a(
         //
         verifyException("com.github.bordertech.buildtools.Badger", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Badger badger0 = new Badger();
      File[] fileArray0 = new File[1];
      File file0 = MockFile.createTempFile("B3G[h", "B3G[h");
      badger0.setOutputDir(file0);
      badger0.setInputXml(fileArray0);
      try { 
        badger0.execute();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not find directory/tmp/B3G[h0B3G[h
         //
         verifyException("com.github.bordertech.buildtools.Badger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Badger badger0 = new Badger();
      File[] fileArray0 = new File[1];
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("Q$9(zF}Z#A`tl", "Q$9(zF}Z#A`tl");
      File[] fileArray0 = new File[9];
      fileArray0[0] = (File) mockFile0;
      badger0.setOutputDir(mockFile0);
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("com.github.bordertech.buildtools.Badger", "com.github.bordertech.buildtools.Badger");
      File file0 = badger0.getOutputFile(mockFile0);
      badger0.setOutputDir(file0);
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("");
      File[] fileArray0 = new File[1];
      badger0.setOutputDir(mockFile0);
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Badger badger0 = new Badger();
      File[] fileArray0 = new File[0];
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Badger badger0 = new Badger();
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Badger badger0 = new Badger();
      MockFile mockFile0 = new MockFile("Q$9(zF}Z#?`tl", "Q$9(zF}Z#?`tl");
      File file0 = MockFile.createTempFile("Q$9(zF}Z#?`tl", "Q$9(zF}Z#?`tl", (File) mockFile0);
      File[] fileArray0 = new File[5];
      fileArray0[0] = file0;
      badger0.setOutputDir(mockFile0);
      badger0.setInputXml(fileArray0);
      // Undeclared exception!
      try { 
        badger0.execute();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }
}
