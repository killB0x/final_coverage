/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:59:14 GMT 2022
 */

package edu.ksu.canvas.model;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.ksu.canvas.model.Progress;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Progress_ESTest extends Progress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setWorkflowState("#q4NjMHNJIjhra");
      String string0 = progress0.getWorkflowState();
      assertEquals("#q4NjMHNJIjhra", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setWorkflowState("");
      String string0 = progress0.getWorkflowState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(0);
      progress0.setUserId(integer0);
      Integer integer1 = progress0.getUserId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(2334);
      progress0.setUserId(integer0);
      Integer integer1 = progress0.getUserId();
      assertEquals(2334, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer((-2091));
      progress0.setUserId(integer0);
      Integer integer1 = progress0.getUserId();
      assertEquals((-2091), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setUrl("9p1%c");
      String string0 = progress0.getUrl();
      assertEquals("9p1%c", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setUrl("");
      String string0 = progress0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Progress progress0 = new Progress();
      MockDate mockDate0 = new MockDate(1107, 0, 1769, (-1), 0);
      progress0.setUpdatedAt(mockDate0);
      Date date0 = progress0.getUpdatedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setTag("dA(#Db=");
      String string0 = progress0.getTag();
      assertEquals("dA(#Db=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setTag("");
      String string0 = progress0.getTag();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setMessage("#LS!4bT\"vtI");
      String string0 = progress0.getMessage();
      assertEquals("#LS!4bT\"vtI", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setMessage("");
      String string0 = progress0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(2207);
      progress0.setId(integer0);
      Integer integer1 = progress0.getId();
      assertEquals(2207, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer((-761));
      progress0.setId(integer0);
      Integer integer1 = progress0.getId();
      assertEquals((-761), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Progress progress0 = new Progress();
      MockDate mockDate0 = new MockDate();
      progress0.setCreatedAt(mockDate0);
      Date date0 = progress0.getCreatedAt();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setContextType("\"1\"B;L{F~\u0005AkP");
      String string0 = progress0.getContextType();
      assertEquals("\"1\"B;L{F~\u0005AkP", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Progress progress0 = new Progress();
      progress0.setContextType("");
      String string0 = progress0.getContextType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(0);
      progress0.setContextId(integer0);
      Integer integer1 = progress0.getContextId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(554);
      progress0.setContextId(integer0);
      Integer integer1 = progress0.getContextId();
      assertEquals(554, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer((-896));
      progress0.setContextId(integer0);
      Integer integer1 = progress0.getContextId();
      assertEquals((-896), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Progress progress0 = new Progress();
      Double double0 = new Double(0.0);
      progress0.setCompletion(double0);
      Double double1 = progress0.getCompletion();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Progress progress0 = new Progress();
      Double double0 = new Double(1.0);
      progress0.setCompletion(double0);
      Double double1 = progress0.getCompletion();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Progress progress0 = new Progress();
      Double double0 = new Double((-4557));
      progress0.setCompletion(double0);
      Double double1 = progress0.getCompletion();
      assertEquals((-4557.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Progress progress0 = new Progress();
      Date date0 = progress0.getUpdatedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Progress progress0 = new Progress();
      String string0 = progress0.getTag();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = progress0.getContextId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Progress progress0 = new Progress();
      Date date0 = progress0.getCreatedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Progress progress0 = new Progress();
      Double double0 = progress0.getCompletion();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = progress0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Progress progress0 = new Progress();
      String string0 = progress0.getWorkflowState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = progress0.getUserId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Progress progress0 = new Progress();
      String string0 = progress0.getContextType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Progress progress0 = new Progress();
      String string0 = progress0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Progress progress0 = new Progress();
      String string0 = progress0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Progress progress0 = new Progress();
      Integer integer0 = new Integer(0);
      progress0.setId(integer0);
      Integer integer1 = progress0.getId();
      assertEquals(0, (int)integer1);
  }
}
