/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:51:33 GMT 2022
 */

package edu.ksu.canvas.model;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.ksu.canvas.model.Grade;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Grade_ESTest extends Grade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedFinalScore("");
      String string0 = grade0.getUnpostedFinalScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedFinalGrade("");
      String string0 = grade0.getUnpostedFinalGrade();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedCurrentScore("S+Hq");
      String string0 = grade0.getUnpostedCurrentScore();
      assertEquals("S+Hq", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedCurrentScore("");
      String string0 = grade0.getUnpostedCurrentScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedCurrentGrade("G[");
      String string0 = grade0.getUnpostedCurrentGrade();
      assertEquals("G[", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setOverrideScore("@R");
      String string0 = grade0.getOverrideScore();
      assertEquals("@R", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setOverrideScore("");
      String string0 = grade0.getOverrideScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setOverrideGrade("#T(QU!");
      String string0 = grade0.getOverrideGrade();
      assertEquals("#T(QU!", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setOverrideGrade("");
      String string0 = grade0.getOverrideGrade();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setHtmlUrl("");
      String string0 = grade0.getHtmlUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setFinalScore(".mmL/-4Eisj!vyo$~y");
      String string0 = grade0.getFinalScore();
      assertEquals(".mmL/-4Eisj!vyo$~y", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setFinalGrade(".mmL/-4Eisj!vyo$~y");
      String string0 = grade0.getFinalGrade();
      assertEquals(".mmL/-4Eisj!vyo$~y", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setCurrentScore("@R");
      String string0 = grade0.getCurrentScore();
      assertEquals("@R", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setCurrentScore("");
      String string0 = grade0.getCurrentScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setCurrentGrade("S+Hq");
      String string0 = grade0.getCurrentGrade();
      assertEquals("S+Hq", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getOverrideScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getUnpostedCurrentGrade();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedCurrentGrade("");
      String string0 = grade0.getUnpostedCurrentGrade();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedFinalScore("qMvoho3E&8&J:");
      String string0 = grade0.getUnpostedFinalScore();
      assertEquals("qMvoho3E&8&J:", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getFinalGrade();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getCurrentGrade();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setUnpostedFinalGrade("edu.ksu.canvas.model.Grade");
      String string0 = grade0.getUnpostedFinalGrade();
      assertEquals("edu.ksu.canvas.model.Grade", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getHtmlUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getOverrideGrade();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getUnpostedCurrentScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getFinalScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getCurrentScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getUnpostedFinalGrade();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Grade grade0 = new Grade();
      String string0 = grade0.getUnpostedFinalScore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setFinalScore("");
      String string0 = grade0.getFinalScore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setHtmlUrl("qMvoho3E&8&J:");
      String string0 = grade0.getHtmlUrl();
      assertEquals("qMvoho3E&8&J:", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setFinalGrade("");
      String string0 = grade0.getFinalGrade();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Grade grade0 = new Grade();
      grade0.setCurrentGrade("");
      String string0 = grade0.getCurrentGrade();
      assertEquals("", string0);
  }
}
