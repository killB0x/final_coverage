/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 11:14:36 GMT 2022
 */

package edu.ksu.canvas.requestOptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.ksu.canvas.requestOptions.ListUserCoursesOptions;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListUserCoursesOptions_ESTest extends ListUserCoursesOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListUserCoursesOptions.State listUserCoursesOptions_State0 = ListUserCoursesOptions.State.AVAILABLE;
      String string0 = listUserCoursesOptions_State0.toString();
      assertEquals("available", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("mn`>s1f8y&");
      String string0 = listUserCoursesOptions0.getUserId();
      assertEquals("mn`>s1f8y&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("");
      String string0 = listUserCoursesOptions0.getUserId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("9VIFgKtqmi24B^");
      // Undeclared exception!
      try { 
        listUserCoursesOptions0.states((List<ListUserCoursesOptions.State>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("a");
      // Undeclared exception!
      try { 
        listUserCoursesOptions0.includes((List<ListUserCoursesOptions.Include>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("59VIF1&Kt6mi24B^");
      listUserCoursesOptions0.optionsMap = null;
      ListUserCoursesOptions.EnrollmentState listUserCoursesOptions_EnrollmentState0 = ListUserCoursesOptions.EnrollmentState.COMPLETED;
      // Undeclared exception!
      try { 
        listUserCoursesOptions0.enrollmentStates(listUserCoursesOptions_EnrollmentState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions((String) null);
      String string0 = listUserCoursesOptions0.getUserId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("59VIF1&Kt6mi24B^");
      LinkedList<ListUserCoursesOptions.Include> linkedList0 = new LinkedList<ListUserCoursesOptions.Include>();
      ListUserCoursesOptions listUserCoursesOptions1 = listUserCoursesOptions0.includes(linkedList0);
      assertSame(listUserCoursesOptions1, listUserCoursesOptions0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions("3  Nr[PO]r]9\"^{7qFN");
      ListUserCoursesOptions.EnrollmentState listUserCoursesOptions_EnrollmentState0 = ListUserCoursesOptions.EnrollmentState.COMPLETED;
      ListUserCoursesOptions listUserCoursesOptions1 = listUserCoursesOptions0.enrollmentStates(listUserCoursesOptions_EnrollmentState0);
      assertSame(listUserCoursesOptions0, listUserCoursesOptions1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListUserCoursesOptions.EnrollmentState listUserCoursesOptions_EnrollmentState0 = ListUserCoursesOptions.EnrollmentState.INVITED_OR_PENDING;
      String string0 = listUserCoursesOptions_EnrollmentState0.toString();
      assertEquals("invited_or_pending", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListUserCoursesOptions.Include listUserCoursesOptions_Include0 = ListUserCoursesOptions.Include.FAVORITES;
      String string0 = listUserCoursesOptions_Include0.toString();
      assertEquals("favorites", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListUserCoursesOptions listUserCoursesOptions0 = new ListUserCoursesOptions((String) null);
      LinkedList<ListUserCoursesOptions.State> linkedList0 = new LinkedList<ListUserCoursesOptions.State>();
      ListUserCoursesOptions.State listUserCoursesOptions_State0 = ListUserCoursesOptions.State.UNPUBLISHED;
      linkedList0.add(listUserCoursesOptions_State0);
      ListUserCoursesOptions listUserCoursesOptions1 = listUserCoursesOptions0.states(linkedList0);
      assertSame(listUserCoursesOptions0, listUserCoursesOptions1);
  }
}
