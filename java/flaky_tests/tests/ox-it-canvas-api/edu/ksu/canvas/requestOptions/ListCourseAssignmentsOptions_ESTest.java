/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:47:50 GMT 2022
 */

package edu.ksu.canvas.requestOptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.ksu.canvas.requestOptions.ListCourseAssignmentsOptions;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListCourseAssignmentsOptions_ESTest extends ListCourseAssignmentsOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("upcoming");
      Boolean boolean0 = Boolean.valueOf("all_dates");
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.overrideAssignmentDates(boolean0);
      assertSame(listCourseAssignmentsOptions0, listCourseAssignmentsOptions1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions((String) null);
      String string0 = listCourseAssignmentsOptions0.getCourseId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("upcoming");
      String string0 = listCourseAssignmentsOptions0.getCourseId();
      assertEquals("upcoming", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("I6");
      listCourseAssignmentsOptions0.optionsMap = null;
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.searchTerm("I6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("UNGRADED");
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.orderBy((ListCourseAssignmentsOptions.OrderBy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.ListCourseAssignmentsOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("$T%r7{Lc;");
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.needsGradingCountBySection((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.ListCourseAssignmentsOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("x");
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.includes((List<ListCourseAssignmentsOptions.Include>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("name");
      listCourseAssignmentsOptions0.optionsMap = null;
      ListCourseAssignmentsOptions.Bucket listCourseAssignmentsOptions_Bucket0 = ListCourseAssignmentsOptions.Bucket.UPCOMING;
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.bucketFilter(listCourseAssignmentsOptions_Bucket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.BaseOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListCourseAssignmentsOptions.Bucket listCourseAssignmentsOptions_Bucket0 = ListCourseAssignmentsOptions.Bucket.OVERDUE;
      String string0 = listCourseAssignmentsOptions_Bucket0.toString();
      assertEquals("overdue", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListCourseAssignmentsOptions.OrderBy listCourseAssignmentsOptions_OrderBy0 = ListCourseAssignmentsOptions.OrderBy.POSITION;
      String string0 = listCourseAssignmentsOptions_OrderBy0.toString();
      assertEquals("position", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListCourseAssignmentsOptions.Include listCourseAssignmentsOptions_Include0 = ListCourseAssignmentsOptions.Include.OVERRIDES;
      String string0 = listCourseAssignmentsOptions_Include0.toString();
      assertEquals("overrides", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions((String) null);
      LinkedList<ListCourseAssignmentsOptions.Include> linkedList0 = new LinkedList<ListCourseAssignmentsOptions.Include>();
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.includes(linkedList0);
      assertNull(listCourseAssignmentsOptions1.getCourseId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions((String) null);
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.searchTerm("");
      assertSame(listCourseAssignmentsOptions1, listCourseAssignmentsOptions0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("");
      String string0 = listCourseAssignmentsOptions0.getCourseId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListCourseAssignmentsOptions.OrderBy listCourseAssignmentsOptions_OrderBy0 = ListCourseAssignmentsOptions.OrderBy.NAME;
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("name");
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.orderBy(listCourseAssignmentsOptions_OrderBy0);
      assertEquals("name", listCourseAssignmentsOptions1.getCourseId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("");
      ListCourseAssignmentsOptions.Bucket listCourseAssignmentsOptions_Bucket0 = ListCourseAssignmentsOptions.Bucket.UNGRADED;
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.bucketFilter(listCourseAssignmentsOptions_Bucket0);
      assertSame(listCourseAssignmentsOptions0, listCourseAssignmentsOptions1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("");
      Boolean boolean0 = Boolean.valueOf(true);
      ListCourseAssignmentsOptions listCourseAssignmentsOptions1 = listCourseAssignmentsOptions0.needsGradingCountBySection(boolean0);
      assertEquals("", listCourseAssignmentsOptions1.getCourseId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListCourseAssignmentsOptions listCourseAssignmentsOptions0 = new ListCourseAssignmentsOptions("I%(o");
      // Undeclared exception!
      try { 
        listCourseAssignmentsOptions0.overrideAssignmentDates((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.requestOptions.ListCourseAssignmentsOptions", e);
      }
  }
}
