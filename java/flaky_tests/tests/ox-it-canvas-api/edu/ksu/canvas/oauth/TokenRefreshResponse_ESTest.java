/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:31:10 GMT 2022
 */

package edu.ksu.canvas.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import edu.ksu.canvas.oauth.TokenRefreshResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenRefreshResponse_ESTest extends TokenRefreshResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.new TokenUser();
      tokenRefreshResponse0.setUser(tokenRefreshResponse_TokenUser0);
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser1 = tokenRefreshResponse0.getUser();
      assertNull(tokenRefreshResponse_TokenUser1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      tokenRefreshResponse0.setTokenType("^-TTU7f?,Y");
      String string0 = tokenRefreshResponse0.getTokenType();
      assertEquals("^-TTU7f?,Y", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      Long long0 = new Long(4799L);
      tokenRefreshResponse0.setExpiresIn(long0);
      Long long1 = tokenRefreshResponse0.getExpiresIn();
      assertEquals(4799L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      tokenRefreshResponse0.setAccessToken("");
      String string0 = tokenRefreshResponse0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      Long long0 = new Long(0L);
      tokenRefreshResponse0.setExpiresIn(long0);
      Long long1 = tokenRefreshResponse0.getExpiresIn();
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      Long long0 = tokenRefreshResponse0.getExpiresIn();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.new TokenUser();
      Integer integer0 = new Integer((-2146297191));
      tokenRefreshResponse_TokenUser0.setId(integer0);
      assertNull(tokenRefreshResponse_TokenUser0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.new TokenUser();
      tokenRefreshResponse_TokenUser0.setName("");
      assertEquals("", tokenRefreshResponse_TokenUser0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.new TokenUser();
      Integer integer0 = tokenRefreshResponse_TokenUser0.getId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.new TokenUser();
      String string0 = tokenRefreshResponse_TokenUser0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      tokenRefreshResponse0.setTokenType("");
      String string0 = tokenRefreshResponse0.getTokenType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      String string0 = tokenRefreshResponse0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      TokenRefreshResponse.TokenUser tokenRefreshResponse_TokenUser0 = tokenRefreshResponse0.getUser();
      assertNull(tokenRefreshResponse_TokenUser0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      tokenRefreshResponse0.setAccessToken(".");
      String string0 = tokenRefreshResponse0.getAccessToken();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      Long long0 = new Long((-1L));
      tokenRefreshResponse0.setExpiresIn(long0);
      Long long1 = tokenRefreshResponse0.getExpiresIn();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenRefreshResponse tokenRefreshResponse0 = new TokenRefreshResponse();
      String string0 = tokenRefreshResponse0.getTokenType();
      assertNull(string0);
  }
}
