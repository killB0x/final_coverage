/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 10:24:30 GMT 2022
 */

package edu.ksu.canvas.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.ksu.canvas.oauth.OauthTokenRefresher;
import edu.ksu.canvas.oauth.RefreshableOauthToken;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RefreshableOauthToken_ESTest extends RefreshableOauthToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "", "");
      Date date0 = refreshableOauthToken0.now();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "XKsz4vT:CqH", (String) null);
      String string0 = refreshableOauthToken0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "Error from URL %s : %s", "Error from URL %s : %s");
      String string0 = refreshableOauthToken0.getAccessToken();
      assertEquals("Error from URL %s : %s", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "edu.ksu.canvas.oauth.RefreshableOauthToken$TokeTExpiration", "edu.ksu.canvas.oauth.RefreshableOauthToken$TokeTExpiration");
      // Undeclared exception!
      try { 
        refreshableOauthToken0.refresh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.oauth.RefreshableOauthToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "", "");
      String string0 = refreshableOauthToken0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RefreshableOauthToken refreshableOauthToken0 = null;
      try {
        refreshableOauthToken0 = new RefreshableOauthToken((OauthTokenRefresher) null, "3#SNc|I\"E5g8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.ksu.canvas.oauth.RefreshableOauthToken", e);
      }
  }
}
