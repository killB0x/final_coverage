/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:14:19 GMT 2022
 */

package org.opengis.cite.indoorgml10.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.opengis.cite.indoorgml10.util.URIUtils;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URIUtils_ESTest extends URIUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI(".xml", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base URI has no scheme component: .xml
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI((String) null, "ftp");
      assertNull(uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, ".$;P8ScZPXYG!TU/");
      File file0 = URIUtils.dereferenceURI(uRI1);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      File file0 = URIUtils.dereferenceURI(uRI1);
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = URIUtils.dereferenceURI(uRI0);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI("o-a`e$O=*fSog2!_ =", "o-a`e$O=*fSog2!_ =");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: o-a`e$O=*fSog2!_ =
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      try { 
        URIUtils.parseURI(uRI1);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI("be:o?k", "be:o?k");
      try { 
        URIUtils.parseURI(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: be
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI("ftp", "ftp", "ftp");
      // Undeclared exception!
      try { 
        URIUtils.parseURI(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.URI("file", "file", "file");
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.create("s*+E?Vk5VwFzNbTqm");
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received s*+E?Vk5VwFzNbTqm
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI("http://apache.org/xml/features/xinclude/fixup-base-uris", "$f=c/");
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/sun/jersey/api/client/Client
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received null
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        URIUtils.parseURI(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received 
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      try { 
        URIUtils.parseURI(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /tmp/foo.bar (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.parseURI((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received null
         //
         verifyException("org.opengis.cite.indoorgml10.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URIUtils uRIUtils0 = new URIUtils();
  }
}
