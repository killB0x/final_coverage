/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 07:07:20 GMT 2022
 */

package com.irurueta.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.irurueta.geometry.Box2D;
import com.irurueta.geometry.CoordinatesType;
import com.irurueta.geometry.HomogeneousPoint2D;
import com.irurueta.geometry.InhomogeneousPoint2D;
import com.irurueta.geometry.KDTree;
import com.irurueta.geometry.Point2D;
import com.irurueta.geometry.Rectangle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Box_ESTest extends Box_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      InhomogeneousPoint2D inhomogeneousPoint2D0 = new InhomogeneousPoint2D(4136.878771188, 1617.178022593);
      double double0 = box2D0.getSqrDistance(inhomogeneousPoint2D0);
      assertEquals(1.9723277167469967E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point2D point2D0 = Rectangle.getClosestPoint(0.0, 1566.5615937035, 0.0, 1566.5615937035, 0.0, 987.87884423);
      Box2D box2D0 = new Box2D(point2D0, point2D0);
      box2D0.setBounds(point2D0, point2D0);
      assertEquals(0.0, point2D0.getHomX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point2D point2D0 = Rectangle.getCenter(278.9051845, (-2665.259), (-1.7976931348623157E308), 0.0);
      HomogeneousPoint2D homogeneousPoint2D0 = new HomogeneousPoint2D(point2D0);
      KDTree.BoxNode<Point2D> kDTree_BoxNode0 = new KDTree.BoxNode<Point2D>(point2D0, homogeneousPoint2D0, 3, (-3889), 2, 3, 3);
      double double0 = kDTree_BoxNode0.getSqrDistance(homogeneousPoint2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      box2D0.mHi = null;
      Point2D point2D0 = box2D0.getHi();
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point2D point2D0 = Rectangle.getCenter(278.9051845, (-2665.259), (-1.7976931348623157E308), 0.0);
      HomogeneousPoint2D homogeneousPoint2D0 = new HomogeneousPoint2D(point2D0);
      KDTree.BoxNode<Point2D> kDTree_BoxNode0 = new KDTree.BoxNode<Point2D>(point2D0, homogeneousPoint2D0, 3, (-3889), 2, 3, 3);
      // Undeclared exception!
      try { 
        kDTree_BoxNode0.setLo(point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.geometry.KDTree$BoxNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CoordinatesType coordinatesType0 = CoordinatesType.INHOMOGENEOUS_COORDINATES;
      Point2D point2D0 = Point2D.create(coordinatesType0);
      KDTree.BoxNode<Point2D> kDTree_BoxNode0 = new KDTree.BoxNode<Point2D>(point2D0, point2D0, 2, 3, 3, 2, 2);
      // Undeclared exception!
      try { 
        kDTree_BoxNode0.setHi(point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.geometry.KDTree$BoxNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HomogeneousPoint2D homogeneousPoint2D0 = new HomogeneousPoint2D();
      KDTree.BoxNode<Point2D> kDTree_BoxNode0 = new KDTree.BoxNode<Point2D>(homogeneousPoint2D0, homogeneousPoint2D0, 3, 3, 2, 3, 3);
      // Undeclared exception!
      try { 
        kDTree_BoxNode0.setBounds(homogeneousPoint2D0, homogeneousPoint2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.geometry.KDTree$BoxNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      // Undeclared exception!
      try { 
        box2D0.getSqrDistance((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.geometry.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      // Undeclared exception!
      try { 
        box2D0.getDistance((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.geometry.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      Rectangle rectangle0 = new Rectangle(4136.878771188, 4136.878771188, 4136.878771188, 1.7976931348623157E308);
      box2D0.fromRectangle(rectangle0);
      InhomogeneousPoint2D inhomogeneousPoint2D0 = new InhomogeneousPoint2D(4136.878771188, 1617.178022593);
      double double0 = box2D0.getSqrDistance(inhomogeneousPoint2D0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3, 0.0, 0.0, 1.0E-10);
      Box2D box2D0 = new Box2D(rectangle0);
      box2D0.setBounds((-693.39), 380.570932400269, 1.0E-10, 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      InhomogeneousPoint2D inhomogeneousPoint2D0 = (InhomogeneousPoint2D)box2D0.getLo();
      double double0 = box2D0.getDistance(inhomogeneousPoint2D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.5), inhomogeneousPoint2D0.getHomX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      Point2D point2D0 = Rectangle.getCenter((-1238.850606941), (-1238.850606941), (-1238.850606941), (-1238.850606941));
      double double0 = box2D0.getDistance(point2D0);
      assertEquals(1751.292223308916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      InhomogeneousPoint2D inhomogeneousPoint2D0 = (InhomogeneousPoint2D)box2D0.getHi();
      assertEquals(0.5, inhomogeneousPoint2D0.getHomY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      box2D0.setLo((Point2D) null);
      Point2D point2D0 = box2D0.getLo();
      assertNull(point2D0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Box2D box2D0 = new Box2D();
      InhomogeneousPoint2D inhomogeneousPoint2D0 = new InhomogeneousPoint2D(4136.878771188, 1617.178022593);
      box2D0.setHi(inhomogeneousPoint2D0);
      assertEquals(CoordinatesType.INHOMOGENEOUS_COORDINATES, inhomogeneousPoint2D0.getType());
  }
}
