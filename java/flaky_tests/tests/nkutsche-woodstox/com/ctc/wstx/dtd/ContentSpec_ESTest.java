/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:49:06 GMT 2022
 */

package com.ctc.wstx.dtd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.dtd.ChoiceContentSpec;
import com.ctc.wstx.dtd.ContentSpec;
import com.ctc.wstx.dtd.SeqContentSpec;
import com.ctc.wstx.dtd.TokenContentSpec;
import com.ctc.wstx.util.PrefixedName;
import java.util.LinkedList;
import javax.xml.namespace.QName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ContentSpec_ESTest extends ContentSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      SeqContentSpec seqContentSpec0 = SeqContentSpec.construct(true, 'K', linkedList0);
      seqContentSpec0.setArity(']');
      assertEquals(']', seqContentSpec0.getArity());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      ChoiceContentSpec choiceContentSpec0 = ChoiceContentSpec.constructChoice(false, 'z', linkedList0);
      choiceContentSpec0.rewrite();
      assertEquals('z', choiceContentSpec0.getArity());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TokenContentSpec tokenContentSpec0 = TokenContentSpec.sDummy;
      boolean boolean0 = tokenContentSpec0.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      TokenContentSpec tokenContentSpec0 = TokenContentSpec.getDummySpec();
      linkedList0.add((ContentSpec) tokenContentSpec0);
      ChoiceContentSpec choiceContentSpec0 = ChoiceContentSpec.constructChoice(false, 'z', linkedList0);
      choiceContentSpec0.getSimpleValidator();
      assertEquals('z', choiceContentSpec0.getArity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TokenContentSpec tokenContentSpec0 = TokenContentSpec.getDummySpec();
      char char0 = tokenContentSpec0.getArity();
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      SeqContentSpec seqContentSpec0 = SeqContentSpec.construct(true, 'F', linkedList0);
      // Undeclared exception!
      try { 
        seqContentSpec0.rewrite();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.ctc.wstx.dtd.SeqContentSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      linkedList0.offerFirst((ContentSpec) null);
      ChoiceContentSpec choiceContentSpec0 = ChoiceContentSpec.constructMixed(false, linkedList0);
      // Undeclared exception!
      try { 
        choiceContentSpec0.getSimpleValidator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.dtd.ChoiceContentSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      ChoiceContentSpec choiceContentSpec0 = ChoiceContentSpec.constructMixed(false, linkedList0);
      // Undeclared exception!
      try { 
        choiceContentSpec0.getSimpleValidator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to construct empty PrefixedNameSet
         //
         verifyException("com.ctc.wstx.dtd.SmallPrefixedNameSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QName qName0 = new QName("~3x");
      PrefixedName prefixedName0 = PrefixedName.valueOf(qName0);
      TokenContentSpec tokenContentSpec0 = TokenContentSpec.construct('1', prefixedName0);
      char char0 = tokenContentSpec0.getArity();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<ContentSpec> linkedList0 = new LinkedList<ContentSpec>();
      ChoiceContentSpec choiceContentSpec0 = ChoiceContentSpec.constructMixed(true, linkedList0);
      boolean boolean0 = choiceContentSpec0.isLeaf();
      assertEquals('*', choiceContentSpec0.getArity());
      assertFalse(boolean0);
  }
}
