/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:16:16 GMT 2022
 */

package com.ctc.wstx.dtd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.dtd.DTDId;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTDId_ESTest extends DTDId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      DTDId dTDId1 = DTDId.constructFromSystemId(uRI0, 72, false);
      boolean boolean0 = dTDId1.equals(dTDId0);
      assertFalse(dTDId0.equals((Object)dTDId1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      DTDId dTDId0 = DTDId.construct((String) null, uRI0, 0, false);
      dTDId0.mHashCode = 0;
      dTDId0.mHashCode = (-1);
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.construct("(xncA_1!X*/?NI", uRI0, 1, true);
      DTDId dTDId1 = DTDId.construct("5=x)_jRlktZyW*b4V+", uRI0, 1, true);
      boolean boolean0 = dTDId0.equals(dTDId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.construct(" [config flags: 0x", uRI0, 1, true);
      DTDId dTDId1 = DTDId.construct(" [config flags: 0x", uRI0, 1, true);
      boolean boolean0 = dTDId0.equals(dTDId1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 72, false);
      DTDId dTDId1 = DTDId.constructFromPublicId("com.ctc.wstx.dtd.DTDId", 72, false);
      boolean boolean0 = dTDId1.equals(dTDId0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      DTDId dTDId1 = DTDId.construct("'iOKaE}qi#", uRI0, 4234, true);
      boolean boolean0 = dTDId0.equals(dTDId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      DTDId dTDId1 = DTDId.construct("'iOKaE}qi#", uRI0, 4234, false);
      boolean boolean0 = dTDId0.equals(dTDId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      DTDId dTDId1 = DTDId.constructFromSystemId(uRI0, 72, false);
      boolean boolean0 = dTDId0.equals(dTDId1);
      assertFalse(dTDId1.equals((Object)dTDId0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      DTDId dTDId0 = DTDId.construct((String) null, uRI0, 0, false);
      boolean boolean0 = dTDId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      boolean boolean0 = dTDId0.equals(dTDId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      boolean boolean0 = dTDId0.equals(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DTDId.construct("", (URI) null, 903, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal arguments; both public and system id null/empty.
         //
         verifyException("com.ctc.wstx.dtd.DTDId", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      DTDId dTDId0 = DTDId.construct("", uRI0, 1745, true);
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.construct("n3PEO(*;4HSiEd4", uRI0, 0, false);
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      DTDId dTDId0 = DTDId.construct((String) null, uRI0, 0, false);
      dTDId0.hashCode();
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DTDId.constructFromSystemId((URI) null, 903, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null system id.
         //
         verifyException("com.ctc.wstx.dtd.DTDId", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DTDId.constructFromPublicId("", 284, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty/null public id.
         //
         verifyException("com.ctc.wstx.dtd.DTDId", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DTDId dTDId0 = DTDId.constructFromPublicId("n3PEO(*;4HSiEd4", 72, true);
      dTDId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DTDId.constructFromPublicId((String) null, 60, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty/null public id.
         //
         verifyException("com.ctc.wstx.dtd.DTDId", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DTDId dTDId0 = DTDId.constructFromSystemId(uRI0, 4234, false);
      String string0 = dTDId0.toString();
      assertEquals("Public-id: null, system-id: http://foo.bar [config flags: 0x108a], xml11: false", string0);
  }
}
