/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:00:33 GMT 2022
 */

package com.ctc.wstx.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.util.StringVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringVector_ESTest extends StringVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addString("_Tu");
      int int0 = stringVector0.findLastIndexByValueNonInterned("getLastString() called on empty StringVector.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addString("");
      String string0 = stringVector0.findLastByValueNonInterned("lu`!A$0R^{ a/v");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      stringVector0.addStrings("AhH:-W", "AhH:-W");
      stringVector0.addStrings((String) null, "AhH:-W");
      String string0 = stringVector0.findLastNonInterned("getLastString() called on empty StringVector.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      stringVector0.addStrings("", "");
      String string0 = stringVector0.findLastFromMap("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringVector stringVector0 = new StringVector(459);
      // Undeclared exception!
      try { 
        stringVector0.removeLast(3037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 459
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1047);
      // Undeclared exception!
      try { 
        stringVector0.getString(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 0 out of valid range; current size: 0.
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      stringVector0.setString(1, "[(size = 7 ) \"\" == 2, \"\" == 2, \"-{UC)atIKsmu{v\" == 3, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2]");
      assertEquals(2, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      int int0 = stringVector0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings((String) null, (String) null);
      stringVector0.removeLast();
      assertEquals(1, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      stringVector0.removeLast();
      assertEquals(1, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("-", "-");
      String string0 = stringVector0.getString(1);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      String string0 = stringVector0.getString(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringVector stringVector0 = new StringVector(93);
      stringVector0.addString((String) null);
      String string0 = stringVector0.getLastString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringVector stringVector0 = new StringVector(5);
      stringVector0.addStrings("", "");
      String string0 = stringVector0.getLastString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringVector stringVector0 = new StringVector(0);
      String[] stringArray0 = stringVector0.getInternalArray();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "[(size = 7 ) \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2]");
      String string0 = stringVector0.findLastNonInterned("");
      assertNotNull(string0);
      assertEquals("[(size = 7 ) \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2, \"\" == 2]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("_Tu", "eC");
      stringVector0.addString("_Tu");
      stringVector0.addString("4");
      stringVector0.removeLast(1);
      stringVector0.removeLast(1);
      stringVector0.addString("=N(>bVdfc>!");
      stringVector0.addString("F$FjQA;");
      stringVector0.removeLast();
      int int0 = stringVector0.findLastIndexNonInterned("eC");
      assertEquals(3, stringVector0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("getLastString() called on empty StringVector.", "getLastString() called on empty StringVector.");
      stringVector0.addString("_Tu");
      stringVector0.findLastByValueNonInterned("_Tu");
      assertFalse(stringVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringVector stringVector0 = new StringVector(459);
      stringVector0.addString("Df");
      stringVector0.asArray();
      assertEquals(1, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringVector stringVector0 = new StringVector(0);
      // Undeclared exception!
      try { 
        stringVector0.addStrings("-", "-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringVector stringVector0 = new StringVector(0);
      // Undeclared exception!
      try { 
        stringVector0.addString("S.S'>}EH07{$`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringVector stringVector0 = null;
      try {
        stringVector0 = new StringVector((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringVector stringVector0 = new StringVector(5);
      stringVector0.addStrings("", "");
      int int0 = stringVector0.findLastIndexByValueNonInterned("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1719);
      stringVector0.addStrings((String) null, (String) null);
      String string0 = stringVector0.findLastByValueNonInterned((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("_Tu", "eC");
      int int0 = stringVector0.findLastIndexNonInterned("eC");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      boolean boolean0 = stringVector0.containsInterned("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      stringVector0.addStrings("AhH:-W", "AhH:-W");
      String string0 = stringVector0.toString();
      assertEquals("[(size = 2 ) \"AhH:-W\" == 2, \"AhH:-W\" == 2]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("_Tu", "eC");
      stringVector0.addStrings(",Ro\"'+0>MbAP", "4");
      stringVector0.addString("4");
      int int0 = stringVector0.findLastIndexByValueNonInterned(",Ro\"'+0>MbAP");
      assertEquals(5, stringVector0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings((String) null, (String) null);
      int int0 = stringVector0.findLastIndexByValueNonInterned("Tb9+");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringVector stringVector0 = new StringVector(2331);
      stringVector0.addStrings((String) null, (String) null);
      String string0 = stringVector0.findLastByValueNonInterned("Gi{gS)i05x$#%=K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      String string0 = stringVector0.findLastByValueNonInterned("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      stringVector0.addStrings("AhH:-W", "AhH:-W");
      String string0 = stringVector0.findLastByValueNonInterned("e6");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings(",Ro\"'+0>MbAP", ",Ro\"'+0>MbAP");
      int int0 = stringVector0.findLastIndexNonInterned(",Ro\"'+0>MbAP");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("", "");
      String string0 = stringVector0.findLastNonInterned("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings(",Ro\"'+0>MbAP", ",Ro\"'+0>MbAP");
      stringVector0.clear(true);
      assertEquals(0, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringVector stringVector0 = new StringVector(5);
      stringVector0.clear(false);
      assertTrue(stringVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      stringVector0.addStrings("eC", "eC");
      stringVector0.addString("B?C^Lh[4");
      stringVector0.addStrings(".", "eC");
      stringVector0.addStrings("eC", (String) null);
      stringVector0.addStrings("eC", "");
      stringVector0.addString("eC");
      assertFalse(stringVector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      stringVector0.addString((String) null);
      stringVector0.addStrings("", "AhH:-W");
      stringVector0.removeLast();
      int int0 = stringVector0.findLastIndexNonInterned("cwr+?YZ2n4nE$=F]");
      assertEquals(2, stringVector0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringVector stringVector0 = new StringVector(0);
      // Undeclared exception!
      try { 
        stringVector0.getLastString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getLastString() called on empty StringVector.
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("getLastString() called on empty StringVector.", "getLastString() called on empty StringVector.");
      stringVector0.getLastString();
      assertEquals(2, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("ph;5FT; _UQ_af]V'k", (String) null);
      stringVector0.getString(1);
      assertEquals(2, stringVector0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      // Undeclared exception!
      try { 
        stringVector0.getString(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of valid range; current size: 0.
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringVector stringVector0 = new StringVector(0);
      // Undeclared exception!
      try { 
        stringVector0.getString((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1 out of valid range; current size: 0.
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringVector stringVector0 = new StringVector(5);
      boolean boolean0 = stringVector0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      stringVector0.addStrings("ph;5FT; _UQ_af]V'k", (String) null);
      boolean boolean0 = stringVector0.isEmpty();
      assertEquals(2, stringVector0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      String[] stringArray0 = stringVector0.getInternalArray();
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      String[] stringArray0 = stringVector0.asArray();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      int int0 = stringVector0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringVector stringVector0 = new StringVector(1);
      // Undeclared exception!
      try { 
        stringVector0.setString(9, ",Ro\"'+0>MbAP");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 1
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringVector stringVector0 = new StringVector(3);
      // Undeclared exception!
      try { 
        stringVector0.removeLast();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 3
         //
         verifyException("com.ctc.wstx.util.StringVector", e);
      }
  }
}
