/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:11:40 GMT 2022
 */

package com.ctc.wstx.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.util.URLUtil;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URLUtil_ESTest extends URLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromCurrentDir();
      URL uRL1 = URLUtil.urlFromSystemId("|dLfq%h1-k", uRL0);
      assertNull(uRL1.getAuthority());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        URLUtil.uriFromSystemId("9CA)5l(W:h;S");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId '9CA)5l(W:h;S']: java.net.URISyntaxException: Illegal character in scheme name at index 0: 9CA)5l(W:h;S
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        URLUtil.urlFromSystemId(";a],u8 p|;Y<uGcalBR");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId ';a],u8 p:;Y<uGcalBR']: java.net.MalformedURLException: no protocol: ;a],u8 p:;Y<uGcalBR
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("[resolving systemId '", "", 15, "com.ctc.wstx.util.ExceptionUtil", uRLStreamHandler0);
      try { 
        URLUtil.urlFromSystemId("", uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId '']: java.net.MalformedURLException: unknown protocol: [resolving systemid '
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", "nrR7{d.V", 8, "");
      URL uRL1 = URLUtil.urlFromSystemId("8=> A?ox=K4,T", uRL0);
      assertEquals("nrR7{d.V:8", uRL1.getAuthority());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = URLUtil.uriFromSystemId("_?i]a:a-,7+");
      assertEquals("_?i]a:a-,7+", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromSystemId("S,");
      URLUtil.outputStreamFromURL(uRL0);
      InputStream inputStream0 = URLUtil.inputStreamFromURL(uRL0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtil.urlFromSystemId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtil.uriFromSystemId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtil.toURL((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        URLUtil.outputStreamFromURL(uRL0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        URLUtil.urlFromSystemId("+~b:");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId '+~b:']: java.net.MalformedURLException: no protocol: +~b:
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&um%fs|O1P");
      URL uRL0 = URLUtil.toURL(mockFile0);
      assertEquals((-1), uRL0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        URLUtil.outputStreamFromURL(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", (String) null, 1196, "UTF-8");
      OutputStream outputStream0 = URLUtil.outputStreamFromURL(uRL0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromSystemId(";a],u8 'p|;Y<uGcalBR");
      try { 
        URLUtil.inputStreamFromURL(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", "nrR7{d.V", 8, "");
      // Undeclared exception!
      try { 
        URLUtil.inputStreamFromURL(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        URLUtil.inputStreamFromURL(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = URLUtil.uriFromSystemId("Internal error: ");
      assertEquals("/home/user/Internal%20error:%20", uRI0.getRawPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = URLUtil.uriFromSystemId("|Ti1g5B\"l(L#>#v");
      assertEquals("/home/user/%7CTi1g5B%22l(L%23%3E%23v", uRI0.getRawPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = URLUtil.uriFromSystemId("G|Uesj5-a(tF");
      assertTrue(uRI0.isOpaque());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        URLUtil.urlFromSystemId("xe_ :u8mN", (URL) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId 'xe_ :u8mN']: java.net.MalformedURLException: no protocol: xe_ :u8mN
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromSystemId("WU/{gesPWsS%T|ui");
      // Undeclared exception!
      try { 
        URLUtil.inputStreamFromURL(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \"T:\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromSystemId("");
      try { 
        URLUtil.outputStreamFromURL(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        URLUtil.uriFromSystemId("'n]: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId ''n]: ']: java.net.URISyntaxException: Illegal character in scheme name at index 0: 'n]: 
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = URLUtil.urlFromCurrentDir();
      // Undeclared exception!
      try { 
        URLUtil.urlFromSystemId((String) null, uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }
}
