/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:45:13 GMT 2022
 */

package com.ctc.wstx.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SymbolTable_ESTest extends SymbolTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("bPdL", (SymbolTable.Bucket) null);
      assertEquals("bPdL", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      char[] charArray0 = new char[8];
      charArray0[4] = 'f';
      String string0 = symbolTable_Bucket0.find(charArray0, 4, 4);
      assertEquals("bPdL", symbolTable_Bucket0.getSymbol());
      assertNull(string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 's';
      // Undeclared exception!
      try { 
        SymbolTable.calcHash(charArray0, 1, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = SymbolTable.calcHash(charArray0, 0, (-2720));
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.findSymbol("e@m\"lC$v`E&0{gimy");
      assertEquals(1, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("e@m\"lC$v`E&0{gimy", string0);
      
      String string1 = symbolTable0.findSymbol("7V)8~moRYWwmM7e&0");
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, symbolTable0.size());
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(string1);
      assertEquals("7V)8~moRYWwmM7e&0", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 1);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'K';
      String string0 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(string0);
      assertEquals("K", string0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string1 = symbolTable0.findSymbolIfExists(charArray1, 1, 1, 1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNull(string1);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[2];
      String string0 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.version());
      assertEquals(1, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = '%';
      String string1 = symbolTable0.findSymbol(charArray1, 1, 1, 1205);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, symbolTable0.version());
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(2, symbolTable0.size());
      assertNotNull(string1);
      assertEquals("%", string1);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '%', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertNotNull(symbolTable1);
      
      symbolTable1.mThisVersion = (-163);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals((-163), symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      
      boolean boolean0 = symbolTable0.isDirectChildOf(symbolTable1);
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals((-163), symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 27);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = 27;
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(27, symbolTable0.size());
      
      SymbolTable symbolTable1 = new SymbolTable(false);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable1.version());
      assertTrue(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.size());
      assertNotNull(symbolTable1);
      
      symbolTable0.mergeChild(symbolTable1);
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(27, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable1.version());
      assertTrue(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 29, 0.01F);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      symbolTable0.mThisVersion = 0;
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.version());
      
      int int0 = symbolTable0.version();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.version());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertNotNull(symbolTable1);
      
      symbolTable1.mThisVersion = (-163);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals((-163), symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      
      int int0 = symbolTable1.version();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals((-163), symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertEquals((-163), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.findSymbol("TK\"`b@*9O:\"5&N: ");
      assertEquals(1, symbolTable0.version());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertNotNull(string0);
      assertEquals("TK\"`b@*9O:\"5&N: ", string0);
      
      int int0 = symbolTable0.size();
      assertEquals(1, symbolTable0.version());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = (-15);
      assertEquals((-15), symbolTable0.size());
      assertEquals(-0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      
      int int0 = symbolTable0.size();
      assertEquals((-15), symbolTable0.size());
      assertEquals(-0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      symbolTable0.mThisVersion = (-1);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals((-1), symbolTable0.version());
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals((-1), symbolTable0.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.version());
      assertNotNull(symbolTable1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.size());
      assertEquals(2, symbolTable1.version());
      assertNotNull(symbolTable1);
      
      symbolTable1.mThisVersion = (-1509);
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.size());
      assertEquals((-1509), symbolTable1.version());
      
      SymbolTable symbolTable2 = symbolTable1.makeChild();
      assertNotSame(symbolTable0, symbolTable2);
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertNotSame(symbolTable1, symbolTable2);
      assertNotSame(symbolTable2, symbolTable1);
      assertNotSame(symbolTable2, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(0, symbolTable1.size());
      assertEquals((-1509), symbolTable1.version());
      assertEquals(Double.NaN, symbolTable2.calcAvgSeek(), 0.01);
      assertFalse(symbolTable2.isDirty());
      assertEquals(0, symbolTable2.size());
      assertEquals((-1508), symbolTable2.version());
      assertNotNull(symbolTable2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.findSymbol("4W");
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("4W", string0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(1.0, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable1.size());
      assertNotNull(symbolTable1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = (-1498);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals((-1498), symbolTable0.size());
      assertEquals(-0.0, symbolTable0.calcAvgSeek(), 0.01);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals((-1498), symbolTable0.size());
      assertEquals(-0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(-0.0, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals((-1498), symbolTable1.size());
      assertEquals(2, symbolTable1.version());
      assertNotNull(symbolTable1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(2, symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertNotNull(symbolTable1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Internal error on SymbolTable.rehash(): had ";
      symbolTable1.mSymbols = stringArray0;
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(2, symbolTable1.version());
      assertEquals(Double.POSITIVE_INFINITY, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable1.size());
      assertFalse(symbolTable1.isDirty());
      
      symbolTable1.mSize = (-1406);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(2, symbolTable1.version());
      assertEquals((-7.112375533428165E-4), symbolTable1.calcAvgSeek(), 0.01);
      assertEquals((-1406), symbolTable1.size());
      assertFalse(symbolTable1.isDirty());
      
      SymbolTable symbolTable2 = symbolTable1.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable0, symbolTable2);
      assertNotSame(symbolTable1, symbolTable0);
      assertNotSame(symbolTable1, symbolTable2);
      assertNotSame(symbolTable2, symbolTable1);
      assertNotSame(symbolTable2, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(2, symbolTable1.version());
      assertEquals((-7.112375533428165E-4), symbolTable1.calcAvgSeek(), 0.01);
      assertEquals((-1406), symbolTable1.size());
      assertFalse(symbolTable1.isDirty());
      assertFalse(symbolTable2.isDirty());
      assertEquals(3, symbolTable2.version());
      assertEquals((-7.112375533428165E-4), symbolTable2.calcAvgSeek(), 0.01);
      assertEquals((-1406), symbolTable2.size());
      assertNotNull(symbolTable2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertNotNull(symbolTable1);
      
      boolean boolean0 = symbolTable1.isDirty();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(0, symbolTable1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '&';
      int int0 = SymbolTable.calcHash(charArray0, 2, 2);
      assertEquals(1178, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '&', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = SymbolTable.calcHash("\u0000");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = SymbolTable.calcHash("{a5&|my&TD4!e |'");
      assertEquals((-1381521160), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 27);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertNotNull(symbolTable1);
      
      symbolTable1.mSize = 27;
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(0.0, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(27, symbolTable1.size());
      
      symbolTable0.mergeChild(symbolTable1);
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertFalse(symbolTable0.isDirty());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.version());
      assertEquals(27, symbolTable0.size());
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(0.0, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(27, symbolTable1.size());
      
      double double0 = symbolTable0.calcAvgSeek();
      assertNotSame(symbolTable0, symbolTable1);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable0.isDirty());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.version());
      assertEquals(27, symbolTable0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = (-1038);
      assertEquals((-1038), symbolTable0.size());
      assertEquals(-0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      
      String string0 = symbolTable0.findSymbol(" entries; now have ");
      assertEquals((-1037), symbolTable0.size());
      assertEquals((-9.643201542912247E-4), symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(string0);
      assertEquals(" entries; now have ", string0);
      
      double double0 = symbolTable0.calcAvgSeek();
      assertEquals((-1037), symbolTable0.size());
      assertEquals((-9.643201542912247E-4), symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals((-9.643201542912247E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.mergeChild((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.isDirectChildOf((SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[2];
      String string0 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbolIfExists((char[]) null, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[16];
      String string0 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.version());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.size());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(16, charArray0.length);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbolIfExists(charArray0, (-194), 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -194 out of bounds for length 16
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol((char[]) null, 521, 521, 521);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 4);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = 4;
      assertEquals(1, symbolTable0.version());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(4, symbolTable0.size());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol(charArray0, 4, 4, 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error on SymbolTable.rehash(): had 4 entries; now have 0.
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 27);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = 27;
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(27, symbolTable0.size());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      symbolTable0.mSymbols = stringArray0;
      assertEquals(0.037037037037037035, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(27, symbolTable0.size());
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol("b");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      symbolTable0.mIndexMask = (-1);
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol("V4gDs}1m_Zt{T");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1362658063 out of bounds for length 128
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SymbolTable.calcHash((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SymbolTable.calcHash("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        SymbolTable.calcHash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 9993);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      symbolTable0.calcAvgSeek();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertNotNull(symbolTable0);
      
      symbolTable0.mBuckets = null;
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      
      // Undeclared exception!
      try { 
        symbolTable0.calcAvgSeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 1756478996, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 2145041105);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(true, (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not use negative/zero initial size: -39
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("Internal error on SymbolTable.rehash(): had ", (SymbolTable.Bucket) null);
      assertEquals("Internal error on SymbolTable.rehash(): had ", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      String string0 = symbolTable_Bucket0.find("Internal error on SymbolTable.rehash(): had ");
      assertEquals("Internal error on SymbolTable.rehash(): had ", symbolTable_Bucket0.getSymbol());
      assertNotNull(string0);
      assertEquals("Internal error on SymbolTable.rehash(): had ", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[5];
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("\u0000", (SymbolTable.Bucket) null);
      assertEquals("\u0000", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      String string0 = symbolTable_Bucket0.find(charArray0, 1, 1);
      assertEquals("\u0000", symbolTable_Bucket0.getSymbol());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = SymbolTable.calcHash("*gI:lX'S~)");
      assertEquals(338356657, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("", (SymbolTable.Bucket) null);
      assertEquals("", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      String string0 = symbolTable_Bucket0.getSymbol();
      assertEquals("", symbolTable_Bucket0.getSymbol());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("", (SymbolTable.Bucket) null);
      assertEquals("", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      SymbolTable.Bucket symbolTable_Bucket1 = symbolTable_Bucket0.getNext();
      assertEquals("", symbolTable_Bucket0.getSymbol());
      assertNull(symbolTable_Bucket1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 343);
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      int int0 = symbolTable0.size();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("5!7{DEK4eC{<#", (SymbolTable.Bucket) null);
      assertEquals("5!7{DEK4eC{<#", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      SymbolTable.Bucket symbolTable_Bucket1 = new SymbolTable.Bucket("5!7{DEK4eC{<#", symbolTable_Bucket0);
      assertFalse(symbolTable_Bucket1.equals((Object)symbolTable_Bucket0));
      assertEquals("5!7{DEK4eC{<#", symbolTable_Bucket0.getSymbol());
      assertEquals("5!7{DEK4eC{<#", symbolTable_Bucket1.getSymbol());
      assertNotNull(symbolTable_Bucket1);
      
      String string0 = symbolTable_Bucket1.find((String) null);
      assertNotSame(symbolTable_Bucket0, symbolTable_Bucket1);
      assertNotSame(symbolTable_Bucket1, symbolTable_Bucket0);
      assertFalse(symbolTable_Bucket0.equals((Object)symbolTable_Bucket1));
      assertFalse(symbolTable_Bucket1.equals((Object)symbolTable_Bucket0));
      assertEquals("5!7{DEK4eC{<#", symbolTable_Bucket0.getSymbol());
      assertEquals("5!7{DEK4eC{<#", symbolTable_Bucket1.getSymbol());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("x", (SymbolTable.Bucket) null);
      assertEquals("x", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      char[] charArray0 = new char[4];
      String string0 = symbolTable_Bucket0.find(charArray0, 1, 1);
      assertEquals("x", symbolTable_Bucket0.getSymbol());
      assertNull(string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("", (SymbolTable.Bucket) null);
      assertEquals("", symbolTable_Bucket0.getSymbol());
      assertNotNull(symbolTable_Bucket0);
      
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable1.size());
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertNotNull(symbolTable1);
      
      SymbolTable.Bucket[] symbolTable_BucketArray0 = new SymbolTable.Bucket[2];
      symbolTable_BucketArray0[0] = symbolTable_Bucket0;
      symbolTable1.mBuckets = symbolTable_BucketArray0;
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable1.size());
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      
      double double0 = symbolTable1.calcAvgSeek();
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable1, symbolTable0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, symbolTable1.calcAvgSeek(), 0.01);
      assertEquals(0, symbolTable1.size());
      assertFalse(symbolTable1.isDirty());
      assertEquals(2, symbolTable1.version());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.findSymbol("e@m\"lC$v`E&0{gimy");
      assertEquals(1, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("e@m\"lC$v`E&0{gimy", string0);
      
      char[] charArray0 = new char[2];
      String string1 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string2 = symbolTable0.findSymbol("#QIu%w!C+'bj8(jP(WX");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(2.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string2);
      assertEquals("#QIu%w!C+'bj8(jP(WX", string2);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol(charArray0, 10, 10, 2134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 2
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[2];
      String string0 = symbolTable0.findSymbol("MJ*");
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("MJ*", string0);
      
      String string1 = symbolTable0.findSymbol(charArray0, 1, 1, 128);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.size());
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string2 = symbolTable0.findSymbol("\"tbr1yDU<}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.3333333333333333, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(3, symbolTable0.size());
      assertNotNull(string2);
      assertEquals("\"tbr1yDU<}", string2);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol(charArray0, 128, 128, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 128 out of bounds for length 2
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true, 27);
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertNotNull(symbolTable0);
      
      symbolTable0.mSize = 27;
      assertEquals(27, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0.0, symbolTable0.calcAvgSeek(), 0.01);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = "!S";
      stringArray0[2] = "!S";
      symbolTable0.mSymbols = stringArray0;
      assertEquals(27, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0.07407407407407407, symbolTable0.calcAvgSeek(), 0.01);
      
      // Undeclared exception!
      try { 
        symbolTable0.findSymbol("!S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error on SymbolTable.rehash(): had 27 entries; now have 2.
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertNotNull(symbolTable0);
      
      symbolTable0.mSizeThreshold = 1;
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      
      String string0 = symbolTable0.findSymbol("e@m\"lC$v`E&0{gimy");
      assertEquals(1, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string0);
      assertEquals("e@m\"lC$v`E&0{gimy", string0);
      
      char[] charArray0 = new char[2];
      String string1 = symbolTable0.findSymbol(charArray0, 1, 1, 128);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string1);
      assertEquals("\u0000", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[4];
      symbolTable0.mSizeThreshold = 1;
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      
      String string0 = symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, symbolTable0.size());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.version());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = symbolTable0.findSymbol("\u0000");
      assertTrue(symbolTable0.isDirty());
      assertEquals(2, symbolTable0.size());
      assertEquals(1, symbolTable0.version());
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(string1);
      assertEquals("\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertNotNull(symbolTable0);
      
      symbolTable0.mIndexMask = 0;
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(0, symbolTable0.size());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      
      String string0 = symbolTable0.findSymbol("o");
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(1, symbolTable0.size());
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = symbolTable0.findSymbol(" 0kldX+a@(");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.size());
      assertNotNull(string1);
      assertEquals(" 0kldX+a@(", string1);
      
      String string2 = symbolTable0.findSymbol(" 0kldX+a@(");
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
      assertEquals(2, symbolTable0.size());
      assertNotNull(string2);
      assertEquals(" 0kldX+a@(", string2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.mIndexMask = 0;
      symbolTable0.findSymbol("8qH,uUKO&5");
      symbolTable0.findSymbol("`@");
      symbolTable0.findSymbol("*<qukVQxF9iw");
      assertEquals(2.0, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      symbolTable0.findSymbol("e1]x");
      symbolTable0.findSymbol("rK?a");
      assertEquals(1.5, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      symbolTable0.findSymbol("K");
      symbolTable0.findSymbol("K");
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.findSymbol("");
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 1);
      symbolTable0.findSymbol("H9aO/c;{XcO");
      char[] charArray0 = new char[2];
      symbolTable0.findSymbol(charArray0, 1, 1, 1);
      symbolTable0.findSymbolIfExists(charArray0, 1, 1, 1);
      assertEquals(2, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 4);
      symbolTable0.findSymbol("F+ll factor can not be higher thJn 10.0.");
      symbolTable0.findSymbol("ow");
      char[] charArray0 = new char[0];
      symbolTable0.findSymbolIfExists(charArray0, 4, 4, 4);
      assertEquals(2, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[16];
      symbolTable0.findSymbol(charArray0, 1, 1, 1);
      char[] charArray1 = new char[3];
      charArray1[1] = 'H';
      symbolTable0.findSymbolIfExists(charArray1, 1, 1, 1);
      assertEquals(1, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[16];
      symbolTable0.findSymbol(charArray0, 1, 1, 1);
      symbolTable0.findSymbolIfExists(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      char[] charArray0 = new char[0];
      String string0 = symbolTable0.findSymbolIfExists(charArray0, 12, (-1), (-3682));
      assertNotNull(string0);
      assertEquals(1, symbolTable0.version());
      assertTrue(symbolTable0.isDirty());
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[5];
      String string0 = symbolTable0.findSymbolIfExists(charArray0, 1, 128, 128);
      assertEquals(1, symbolTable0.version());
      assertNull(string0);
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(true);
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        symbolTable1.findSymbol(charArray0, 1289, 1289, 1289);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      symbolTable0.findSymbol(charArray0, 0, 1, 0);
      char[] charArray1 = new char[6];
      symbolTable0.findSymbol(charArray1, 1, 1, 128);
      assertEquals(2, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[15];
      symbolTable0.findSymbol(charArray0, 4, 4, 4);
      symbolTable0.findSymbol(charArray0, 4, 4, 4);
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[15];
      String[] stringArray0 = new String[2];
      stringArray0[1] = " entries; now have ";
      symbolTable0.mSymbols = stringArray0;
      symbolTable0.findSymbol(charArray0, 1, 1, 1);
      symbolTable0.findSymbol(charArray0, 1, 1, 1);
      assertEquals(1, symbolTable0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      char[] charArray0 = new char[0];
      symbolTable0.findSymbol(charArray0, 57, (-3682), (-3384));
      assertEquals(Double.NaN, symbolTable0.calcAvgSeek(), 0.01);
      assertTrue(symbolTable0.isDirty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[5];
      symbolTable0.findSymbol(charArray0, 1, 1, 128);
      symbolTable0.findSymbolIfExists(charArray0, 1, 128, 128);
      assertEquals(1.0, symbolTable0.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      boolean boolean0 = symbolTable1.isDirectChildOf(symbolTable0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, symbolTable1.calcAvgSeek(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      boolean boolean0 = symbolTable0.isDirectChildOf(symbolTable0);
      assertFalse(boolean0);
      assertTrue(symbolTable0.isDirty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(false, 831, 831);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fill factor can not be higher than 10.0.
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(true, 33, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fill factor can not be lower than 0.01.
         //
         verifyException("com.ctc.wstx.util.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[24];
      SymbolTable.Bucket symbolTable_Bucket0 = new SymbolTable.Bucket("[ON@CgxXc,{YU", (SymbolTable.Bucket) null);
      SymbolTable.Bucket symbolTable_Bucket1 = new SymbolTable.Bucket("[ON@CgxXc,{YU", symbolTable_Bucket0);
      String string0 = symbolTable_Bucket1.find(charArray0, 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      SymbolTable symbolTable1 = symbolTable0.makeChild();
      symbolTable1.findSymbol("%f$");
      assertEquals(1, symbolTable1.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false);
      int int0 = symbolTable0.version();
      assertTrue(symbolTable0.isDirty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.setInternStrings(false);
      assertEquals(1, symbolTable0.version());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      boolean boolean0 = symbolTable0.isDirty();
      assertEquals(0, symbolTable0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(false, 27);
      symbolTable0.mergeChild(symbolTable0);
      assertEquals(1, symbolTable0.version());
      assertEquals(0, symbolTable0.size());
      assertTrue(symbolTable0.isDirty());
  }
}
