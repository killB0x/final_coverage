/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:51:13 GMT 2022
 */

package com.ctc.wstx.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.util.SimpleCache;
import java.util.AbstractMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleCache_ESTest extends SimpleCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      SimpleCache<Integer, Integer> simpleCache0 = new SimpleCache<Integer, Integer>(1);
      simpleCache0.add(integer0, integer1);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleCache<Integer, Integer> simpleCache0 = null;
      try {
        simpleCache0 = new SimpleCache<Integer, Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleCache.LimitMap<Integer, Integer> simpleCache_LimitMap0 = new SimpleCache.LimitMap<Integer, Integer>(0);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      boolean boolean0 = simpleCache_LimitMap0.removeEldestEntry(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleCache<Integer, Integer> simpleCache0 = new SimpleCache<Integer, Integer>(2718);
      simpleCache0.add((Integer) null, (Integer) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleCache<Integer, Integer> simpleCache0 = new SimpleCache<Integer, Integer>(0);
      simpleCache0.add((Integer) null, (Integer) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleCache<Integer, Integer> simpleCache0 = new SimpleCache<Integer, Integer>(2716);
      Integer integer0 = new Integer(2716);
      Integer integer1 = simpleCache0.find(integer0);
      assertNull(integer1);
  }
}
