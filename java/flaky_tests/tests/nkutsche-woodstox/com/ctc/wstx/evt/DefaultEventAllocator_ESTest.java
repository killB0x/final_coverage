/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:10:05 GMT 2022
 */

package com.ctc.wstx.evt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.evt.DefaultEventAllocator;
import com.ctc.wstx.sr.ElemAttrs;
import com.ctc.wstx.util.EmptyNamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.stream.Location;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.stream.util.XMLEventAllocator;
import javax.xml.stream.util.XMLEventConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultEventAllocator_ESTest extends DefaultEventAllocator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.sStdInstance;
      XMLEventAllocator xMLEventAllocator0 = defaultEventAllocator0.newInstance();
      assertNotSame(defaultEventAllocator0, xMLEventAllocator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = new DefaultEventAllocator(false);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.getFastInstance();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      // Undeclared exception!
      try { 
        defaultEventAllocator0.allocate((XMLStreamReader) streamReaderDelegate0, (XMLEventConsumer) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.getFastInstance();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      // Undeclared exception!
      try { 
        defaultEventAllocator0.allocate((XMLStreamReader) streamReaderDelegate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.getFastInstance();
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        defaultEventAllocator0.allocate((XMLStreamReader) streamReaderDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.sStdInstance;
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        defaultEventAllocator0.allocate((XMLStreamReader) streamReaderDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.sStdInstance;
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        defaultEventAllocator0.allocate((XMLStreamReader) streamReaderDelegate0, (XMLEventConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.getDefaultInstance();
      assertNotNull(defaultEventAllocator0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultEventAllocator defaultEventAllocator0 = DefaultEventAllocator.getFastInstance();
      EmptyNamespaceContext emptyNamespaceContext0 = EmptyNamespaceContext.getInstance();
      // Undeclared exception!
      try { 
        defaultEventAllocator0.withStartElement((Location) null, (QName) null, emptyNamespaceContext0, (ElemAttrs) null, false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/ctc/wstx/evt/CompactStartElement
         //
         verifyException("com.ctc.wstx.evt.DefaultEventAllocator", e);
      }
  }
}
