/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:32:57 GMT 2022
 */

package com.ctc.wstx.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.io.SystemId;
import java.io.IOException;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemId_ESTest extends SystemId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SystemId systemId0 = new SystemId((String) null, uRL0);
      assertTrue(systemId0.hasResolvedURL());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.ctc.wstx.util.URLUtil", "com.ctc.wstx.util.URLUtil", 633, "com.ctc.wstx.util.URLUtil", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct("", uRL0);
      String string0 = systemId0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("_m+", "_m+", 0, "_m+", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct(uRL0);
      URL uRL1 = systemId0.asURL();
      assertEquals(0, uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemId systemId0 = SystemId.construct("E#LfV0/x");
      systemId0.mSystemId = null;
      // Undeclared exception!
      try { 
        systemId0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemId systemId0 = SystemId.construct("", (URL) null);
      systemId0.mSystemId = null;
      // Undeclared exception!
      try { 
        systemId0.asURL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.util.URLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemId systemId0 = SystemId.construct("*3g3^UoG:QI;EbW|L");
      try { 
        systemId0.asURL();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [resolving systemId '*3g3^UoG:QI;EbW:L']: java.net.MalformedURLException: no protocol: *3g3^UoG:QI;EbW:L
         //
         verifyException("com.ctc.wstx.util.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.ctc.wstx.util.URLUtil", "com.ctc.wstx.util.URLUtil", 633, "com.ctc.wstx.util.URLUtil", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct(uRL0);
      String string0 = systemId0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.ctc.wstx.util.URLUtil", "com.ctc.wstx.util.URLUtil", 633, "com.ctc.wstx.util.URLUtil", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct("com.ctc.wstx.util.URLUtil", uRL0);
      String string0 = systemId0.toString();
      assertTrue(systemId0.hasResolvedURL());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.ctc.wstx.util.URLUtil", "com.ctc.wstx.util.URLUtil", 633, "com.ctc.wstx.util.URLUtil", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct("com.ctc.wstx.util.URLUtil", uRL0);
      boolean boolean0 = systemId0.hasResolvedURL();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemId systemId0 = SystemId.construct("`iRfYHqY3_C$LV8");
      boolean boolean0 = systemId0.hasResolvedURL();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemId systemId0 = SystemId.construct("ESWphuO&b&4q@7e");
      systemId0.asURL();
      assertTrue(systemId0.hasResolvedURL());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("com.ctc.wstx.util.URLUtil", "com.ctc.wstx.util.URLUtil", 633, "com.ctc.wstx.util.URLUtil", uRLStreamHandler0);
      SystemId systemId0 = SystemId.construct("com.ctc.wstx.util.URLUtil", uRL0);
      URL uRL1 = systemId0.asURL();
      assertEquals("com.ctc.wstx.util.URLUtil:633", uRL1.getAuthority());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemId systemId0 = SystemId.construct((String) null, (URL) null);
      assertNull(systemId0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemId systemId0 = SystemId.construct((URL) null);
      assertNull(systemId0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemId systemId0 = SystemId.construct((String) null);
      assertNull(systemId0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SystemId systemId0 = SystemId.construct((String) null, uRL0);
      assertTrue(systemId0.hasResolvedURL());
      assertNotNull(systemId0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemId systemId0 = null;
      try {
        systemId0 = new SystemId((String) null, (URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null for both systemId and url
         //
         verifyException("com.ctc.wstx.io.SystemId", e);
      }
  }
}
