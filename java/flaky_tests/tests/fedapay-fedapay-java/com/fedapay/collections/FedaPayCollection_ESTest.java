/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 12:39:42 GMT 2022
 */

package com.fedapay.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fedapay.collections.FedaPayCollection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FedaPayCollection_ESTest extends FedaPayCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      fedaPayCollection0.fedaPayObject = (Map<String, Object>) hashMap0;
      fedaPayCollection0.setFedaPayObject((Map<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      fedaPayCollection0.setMeta(hashMap0);
      fedaPayCollection0.setFedaPayObject((Map<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      fedaPayCollection0.fedaPayObject = (Map<String, Object>) hashMap0;
      Map<String, Object> map0 = fedaPayCollection0.getMeta();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>(linkedList0, (Map<String, Object>) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>((List<String>) null, hashMap0, hashMap0);
      Map<String, Object> map0 = fedaPayCollection0.getMeta();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>((List<String>) null, hashMap0, hashMap0);
      hashMap0.put("", "");
      Map<String, Object> map0 = fedaPayCollection0.getMeta();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      fedaPayCollection0.fedaPayObject = (Map<String, Object>) hashMap0;
      Map<String, Object> map0 = fedaPayCollection0.getFedaPayObject();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      fedaPayCollection0.fedaPayObject = (Map<String, Object>) hashMap0;
      hashMap0.put("", "");
      Map<String, Object> map0 = fedaPayCollection0.getFedaPayObject();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+fb.+,t@/c[_53YYK");
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      fedaPayCollection0.setData(linkedList0);
      List<String> list0 = fedaPayCollection0.getData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      List<String> list0 = fedaPayCollection0.getData();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>();
      Map<String, Object> map0 = fedaPayCollection0.getFedaPayObject();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FedaPayCollection<String> fedaPayCollection0 = new FedaPayCollection<String>(linkedList0, (Map<String, Object>) null, (Map<String, Object>) null);
      List<String> list0 = fedaPayCollection0.getData();
      assertEquals(0, list0.size());
  }
}
