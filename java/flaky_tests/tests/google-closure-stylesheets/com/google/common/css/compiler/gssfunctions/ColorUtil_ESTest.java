/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:13:19 GMT 2022
 */

package com.google.common.css.compiler.gssfunctions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.css.compiler.gssfunctions.ColorUtil;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColorUtil_ESTest extends ColorUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.getHSBColor((-1.0F), 125.0F, (-1.0F));
      boolean boolean0 = ColorUtil.testContrast(color0, color1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.YELLOW;
      boolean boolean0 = ColorUtil.testContrast(color1, color0, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.red;
      boolean boolean0 = ColorUtil.testContrast(color0, color0, (-1.0F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1268.134F;
      floatArray0[2] = (-175.4209F);
      Color color0 = ColorUtil.hslToColor(floatArray0);
      assertEquals((-1708664), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1268.134F;
      Color color0 = ColorUtil.hslToColor(floatArray0);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.WHITE;
      float[] floatArray0 = ColorUtil.toHsl(color0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.YELLOW;
      int int0 = ColorUtil.luminanceDiff(color0, color0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.WHITE;
      int int0 = ColorUtil.luminanceDiff(color0, color1);
      assertEquals(179, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = new Color(0);
      int int0 = ColorUtil.luminance(color0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Color color0 = Color.cyan;
      int int0 = ColorUtil.luminance(color0);
      assertEquals(178, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = ColorUtil.luminance(1, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ColorUtil.luminance(0, 114, 0);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = ColorUtil.luminance((-590), (-590), 1789);
      assertEquals((-318), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ColorUtil.hslToHsb(floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ColorUtil.hsbToHsl(floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Color color0 = ColorUtil.hsbToColor(floatArray0);
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) 1322;
      Color color0 = ColorUtil.hsbToColor(floatArray0);
      assertEquals(247, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = Color.RED;
      float[] floatArray0 = ColorUtil.toHsb(color0);
      Color color1 = ColorUtil.hsbToColor(floatArray0);
      assertEquals((-65536), color1.getRGB());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Color color0 = ColorUtil.hslToColor(floatArray0);
      int int0 = ColorUtil.colorDiff(color0, color0);
      assertEquals(0, int0);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Color color0 = ColorUtil.hslToColor(floatArray0);
      Color color1 = Color.CYAN;
      int int0 = ColorUtil.colorDiff(color1, color0);
      assertEquals(510, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = ColorUtil.colorDiff(2, 3, 2, 2, 3, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = ColorUtil.colorDiff(2147475040, 0, 0, 0, (-1090), 0);
      assertEquals(2147476130, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ColorUtil.colorDiff((-2147386271), 0, (-2147386271), 0, 1, 0);
      assertEquals((-194753), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.toHsl((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.toHsb((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.testContrast((Color) null, (Color) null, 1386.1562F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Color color0 = Color.darkGray;
      // Undeclared exception!
      try { 
        ColorUtil.testContrast(color0, (Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.luminanceDiff((Color) null, (Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.luminance((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        ColorUtil.hslToHsb(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ColorUtil.hslToColor(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.hsbToHsl((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ColorUtil.hsbToHsl(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ColorUtil.hsbToColor(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.formatColor((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.colorDiff((Color) null, (Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Color color0 = Color.CYAN;
      Color color1 = Color.BLUE;
      boolean boolean0 = ColorUtil.testContrast(color0, color1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.WHITE;
      boolean boolean0 = ColorUtil.testContrast(color1, color0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Color color0 = Color.red;
      boolean boolean0 = ColorUtil.testContrast(color0, color0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.PINK;
      Color color2 = color1.brighter();
      boolean boolean0 = ColorUtil.testContrast(color0, color2, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = Color.WHITE;
      boolean boolean0 = ColorUtil.testContrast(color1, color0, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Color color0 = Color.yellow;
      String string0 = ColorUtil.formatColor(color0);
      assertEquals("#FFFF00", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.hslToColor((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.hsbToColor((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Color color0 = Color.red;
      boolean boolean0 = ColorUtil.testContrast(color0, color0, 1.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Color color0 = Color.red;
      float[] floatArray0 = ColorUtil.toHsl(color0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.5F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorUtil.hslToHsb((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.css.compiler.gssfunctions.ColorUtil", e);
      }
  }
}
