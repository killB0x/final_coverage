/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 01:23:57 GMT 2022
 */

package com.google.common.css.compiler.passes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.css.compiler.ast.MutatingVisitController;
import com.google.common.css.compiler.passes.SplitRulesetNodes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SplitRulesetNodes_ESTest extends SplitRulesetNodes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutatingVisitController mutatingVisitController0 = mock(MutatingVisitController.class, new ViolatedAssumptionAnswer());
      SplitRulesetNodes splitRulesetNodes0 = null;
      try {
        splitRulesetNodes0 = new SplitRulesetNodes(mutatingVisitController0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableSet
         //
         verifyException("com.google.common.css.compiler.ast.SkippingTreeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutatingVisitController mutatingVisitController0 = mock(MutatingVisitController.class, new ViolatedAssumptionAnswer());
      SplitRulesetNodes splitRulesetNodes0 = null;
      try {
        splitRulesetNodes0 = new SplitRulesetNodes(mutatingVisitController0, false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/ImmutableSet
         //
         verifyException("com.google.common.css.compiler.ast.SkippingTreeVisitor", e);
      }
  }
}
