/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:33:31 GMT 2022
 */

package com.j256.simplemagic.entries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.ContentInfo;
import com.j256.simplemagic.endian.EndianConverter;
import com.j256.simplemagic.endian.EndianType;
import com.j256.simplemagic.entries.MagicEntry;
import com.j256.simplemagic.entries.MagicFormatter;
import com.j256.simplemagic.entries.MagicMatcher;
import com.j256.simplemagic.logger.LogBackendType;
import com.j256.simplemagic.logger.LoggerFactory;
import com.j256.simplemagic.types.BigEndianString16Type;
import com.j256.simplemagic.types.ByteType;
import com.j256.simplemagic.types.DefaultType;
import com.j256.simplemagic.types.FloatType;
import com.j256.simplemagic.types.Id3LengthType;
import com.j256.simplemagic.types.LittleEndianString16Type;
import com.j256.simplemagic.types.LocalDateType;
import com.j256.simplemagic.types.LocalLongDateType;
import com.j256.simplemagic.types.LongType;
import com.j256.simplemagic.types.PStringType;
import com.j256.simplemagic.types.RegexType;
import com.j256.simplemagic.types.SearchType;
import com.j256.simplemagic.types.ShortType;
import com.j256.simplemagic.types.StringType;
import com.j256.simplemagic.types.UtcLongDateType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicEntry_ESTest extends MagicEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(")h$!gwn8i8`>Vv");
      MagicEntry magicEntry0 = new MagicEntry(")h$!gwn8i8`>Vv", (byte)0, false, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      MagicEntry magicEntry1 = new MagicEntry("CVs=$Z9a1", 967, false, (byte)92, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, true, false, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-14), false, (-14), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, true, (MagicFormatter) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)78;
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("w_'OecZ%");
      MagicEntry magicEntry0 = new MagicEntry("w_'OecZ%", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      searchType0.convertTestString("G1", "%bcdeEfFgGiosuxX");
      MagicEntry magicEntry1 = new MagicEntry("cPt7r!!", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, false, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      MagicFormatter magicFormatter0 = new MagicFormatter("Wfwf~(}lO$");
      Long long0 = new Long((-4389));
      MagicEntry magicEntry0 = new MagicEntry("unknown", (-4389), false, (-134), (MagicEntry.OffsetInfo) null, searchType0, long0, false, (Object) null, false, false, magicFormatter0);
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OYcZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OYcZt", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      EndianType endianType0 = EndianType.LITTLE;
      LocalLongDateType localLongDateType0 = new LocalLongDateType(endianType0);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      MagicFormatter magicFormatter1 = new MagicFormatter("");
      MagicEntry magicEntry1 = new MagicEntry(",test '", 300, true, 3475, (MagicEntry.OffsetInfo) null, localLongDateType0, long0, false, object0, true, true, magicFormatter1);
      magicEntry0.addChild(magicEntry1);
      byte[] byteArray0 = new byte[1];
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-975), endianConverter0, true, (-90), (-975));
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("lIZ2p@g", (-975), true, (-975), magicEntry_OffsetInfo0, searchType0, (Long) null, true, object0, true, true, magicFormatter0);
      magicEntry0.setMimeType("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      magicEntry0.matchBytes(byteArray0);
      UtcLongDateType utcLongDateType0 = new UtcLongDateType(endianType0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)0, true, 1941, (MagicEntry.OffsetInfo) null, utcLongDateType0, (Long) null, false, (Object) null, true, false, (MagicFormatter) null);
      // Undeclared exception!
      try { 
        magicEntry1.matchBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.endian.LittleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicEntry magicEntry0 = new MagicEntry((String) null, 263, false, 263, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, (MagicFormatter) null);
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(":`dPJ]Tup>!t[b=!v/");
      DefaultType defaultType0 = new DefaultType();
      MagicEntry magicEntry0 = new MagicEntry(":`dPJ]Tup>!t[b=!v/", 19, false, 19, (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, false, "E_'/ecZt", true, true, magicFormatter0);
      magicEntry0.setOptional(true);
      Long long0 = new Long((byte)0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, defaultType0, long0, false, (Object) null, false, false, magicFormatter0);
      magicEntry1.addChild(magicEntry0);
      MagicEntry magicEntry2 = new MagicEntry((String) null, (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, true, (Object) null, false, true, magicFormatter0);
      magicEntry2.addChild(magicEntry0);
      magicEntry0.setMimeType("RPSS");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      magicEntry2.matchBytes(byteArray0);
      magicEntry2.isOptional();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(":`dPJ]Tup>!t[b=!v/");
      DefaultType defaultType0 = new DefaultType();
      MagicEntry magicEntry0 = new MagicEntry(":`dPJ]Tup>!t[b=!v/", 19, false, 19, (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, false, "E_'/ecZt", true, true, magicFormatter0);
      magicEntry0.setOptional(true);
      Long long0 = new Long((byte)0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, defaultType0, long0, false, (Object) null, false, false, magicFormatter0);
      magicEntry1.addChild(magicEntry0);
      MagicEntry magicEntry2 = new MagicEntry((String) null, (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, true, (Object) null, false, true, magicFormatter0);
      magicEntry2.addChild(magicEntry0);
      magicEntry0.setMimeType("RPSS");
      magicEntry2.isOptional();
      magicEntry0.toString();
      byte[] byteArray0 = new byte[0];
      magicEntry1.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(":`dPJ]Tup>!t[b=!v/");
      DefaultType defaultType0 = new DefaultType();
      MagicEntry magicEntry0 = new MagicEntry(":`dPJ]Tup>!t[b=!v/", 19, false, 19, (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, false, "E_'/ecZt", false, true, magicFormatter0);
      magicEntry0.setOptional(false);
      Long long0 = new Long((byte)0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, defaultType0, long0, false, (Object) null, false, false, magicFormatter0);
      magicEntry1.addChild(magicEntry0);
      MagicEntry magicEntry2 = new MagicEntry((String) null, (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, true, (Object) null, false, true, magicFormatter0);
      magicEntry2.addChild(magicEntry0);
      magicEntry2.addChild(magicEntry1);
      magicEntry0.setMimeType("R6aPSS");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      magicEntry2.matchBytes(byteArray0);
      magicEntry2.isOptional();
      magicEntry2.toString();
      magicEntry1.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(":`dPJ]Tup>!t[b=!v/");
      DefaultType defaultType0 = new DefaultType();
      MagicEntry magicEntry0 = new MagicEntry(":`dPJ]Tup>!t[b=!v/", 32, false, 32, (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, false, "E_'/ecZt", false, true, magicFormatter0);
      magicEntry0.setOptional(false);
      Long long0 = new Long((byte)0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)0, false, (byte)0, (MagicEntry.OffsetInfo) null, defaultType0, long0, false, (Object) null, false, false, magicFormatter0);
      magicEntry1.addChild(magicEntry0);
      MagicEntry magicEntry2 = new MagicEntry((String) null, (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, true, (Object) null, false, true, magicFormatter0);
      magicEntry2.addChild(magicEntry0);
      magicEntry0.setMimeType("RPSS");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      magicEntry2.matchBytes(byteArray0);
      magicEntry2.isOptional();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter(")h$!gwn8i8`>Vv");
      MagicEntry magicEntry0 = new MagicEntry(")h$!gwn8i8`>Vv", (byte)0, false, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      MagicEntry magicEntry1 = new MagicEntry("CVs=$Z9a1", 967, false, (byte)92, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, true, false, magicFormatter0);
      magicEntry1.setMimeType("<QP|0:%=L%IJW*Q4");
      magicEntry0.addChild(magicEntry1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      magicEntry0.matchBytes(byteArray0);
      magicEntry1.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("e=QZ(F");
      Long.getLong("e=QZ(F", (Long) null);
      MagicEntry magicEntry0 = new MagicEntry("", 632, false, (-53), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, true, false, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry("5NUq|(D|Q", 632, false, 39, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[2];
      magicEntry1.addChild(magicEntry0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      magicEntry1.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("h8kJ[");
      ByteType byteType0 = new ByteType();
      MagicEntry magicEntry0 = new MagicEntry("h8kJ[", 1, true, 0, (MagicEntry.OffsetInfo) null, byteType0, (Long) null, true, (Object) null, true, false, magicFormatter0);
      // Undeclared exception!
      try { 
        magicEntry0.getStartsWithByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.BaseLongType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_1OecZt");
      byte[] byteArray0 = new byte[0];
      EndianType endianType0 = EndianType.LITTLE;
      Id3LengthType id3LengthType0 = new Id3LengthType(endianType0);
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("%bcdeEfFgGiosuxX", (-3019), true, (-3019), (MagicEntry.OffsetInfo) null, id3LengthType0, (Long) null, true, object0, true, true, magicFormatter0);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3019 out of bounds for length 0
         //
         verifyException("com.j256.simplemagic.types.Id3LengthType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_1OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_1OecZt", (byte)19, true, (byte)19, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, (byte)19, true, 364, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      byte[] byteArray0 = new byte[9];
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      magicFormatter0.toString();
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry("E_'/ecZt", (-4337), true, (byte) (-6), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, magicEntry0, true, true, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      byte[] byteArray0 = new byte[1];
      magicEntry0.toString();
      magicEntry0.setMimeType("PASCAL");
      byteArray0[0] = (byte) (-6);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.j256.simplemagic.entries.MagicEntry cannot be cast to class com.j256.simplemagic.types.StringType$TestInfo (com.j256.simplemagic.entries.MagicEntry and com.j256.simplemagic.types.StringType$TestInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75e8662b)
         //
         verifyException("com.j256.simplemagic.types.SearchType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[1];
      magicEntry0.setMimeType("PASCAL");
      byteArray0[0] = (byte) (-6);
      magicEntry0.matchBytes(byteArray0);
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.setMimeType("lqh");
      byte[] byteArray0 = new byte[1];
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(1, endianConverter0, false, (-2143), 1713);
      DefaultType defaultType0 = new DefaultType();
      Long.getLong("");
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      byte[] byteArray0 = new byte[0];
      magicEntry_OffsetInfo0.getOffset(byteArray0);
      RegexType regexType0 = new RegexType();
      Long long0 = new Long(0L);
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-1), false, 368, magicEntry_OffsetInfo0, regexType0, long0, false, magicEntry_OffsetInfo0, false, false, magicFormatter0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-126);
      magicEntry0.matchBytes(byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecnZt");
      RegexType regexType0 = new RegexType();
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("lqh", 240, true, 1, (MagicEntry.OffsetInfo) null, regexType0, (Long) null, false, object0, false, false, magicFormatter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, true, (-1669), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      magicEntry0.getStartsWithByte();
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      EndianType endianType0 = EndianType.BIG;
      LongType longType0 = new LongType(endianType0);
      MagicEntry magicEntry0 = new MagicEntry("", (-3181), false, (-3181), (MagicEntry.OffsetInfo) null, longType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-101);
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)51, true, (byte)51, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 52);
      DefaultType defaultType0 = new DefaultType();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo1 = new MagicEntry.OffsetInfo((-3927), (EndianConverter) null, false, 886, 52);
      StringType stringType0 = new StringType();
      Long long0 = new Long(0);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      LocalDateType localDateType0 = new LocalDateType(endianType0);
      MagicEntry magicEntry0 = new MagicEntry("%bcdeEfFgGiosuxX", 0, false, (-3927), magicEntry_OffsetInfo0, localDateType0, long0, false, endianType0, true, false, magicFormatter0);
      magicEntry0.isOptional();
      magicEntry0.toString();
      magicEntry0.getLevel();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("_;SfPN");
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-1), true, 0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, true, magicFormatter0);
      magicEntry0.setOptional(true);
      LoggerFactory.getLogger("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)1;
      magicEntry0.matchBytes(byteArray0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, 0, true, (-1471), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, magicEntry0, false, false, magicFormatter0);
      magicEntry1.getStartsWithByte();
      magicEntry0.isOptional();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = null;
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      boolean boolean1 = true;
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      long long0 = (-1068L);
      Long long1 = new Long((-1068L));
      Object object1 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("E_'/ecZt", (-1), true, (byte)1, (MagicEntry.OffsetInfo) null, searchType0, long1, true, object1, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)36;
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class com.j256.simplemagic.types.StringType$TestInfo (java.lang.Object is in module java.base of loader 'bootstrap'; com.j256.simplemagic.types.StringType$TestInfo is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75e8662b)
         //
         verifyException("com.j256.simplemagic.types.SearchType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry((String) null, (byte) (-18), false, (-4043), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, "E_'OecZt", false, false, magicFormatter0);
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, false, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, "", false, false, magicFormatter0);
      // Undeclared exception!
      try { 
        magicEntry0.getStartsWithByte();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class com.j256.simplemagic.types.StringType$TestInfo (java.lang.String is in module java.base of loader 'bootstrap'; com.j256.simplemagic.types.StringType$TestInfo is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75e8662b)
         //
         verifyException("com.j256.simplemagic.types.StringType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      magicFormatter0.toString();
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, true, (byte) (-6), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.addChild(magicEntry0);
      byte[] byteArray0 = new byte[1];
      magicEntry0.toString();
      magicEntry0.getStartsWithByte();
      MagicEntry magicEntry1 = new MagicEntry("[,c", 761, true, 761, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, "E_'/ecZt", true, false, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      magicEntry0.setMimeType((String) null);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("_;SfPN");
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-1), true, 0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, true, magicFormatter0);
      LoggerFactory.getLogger("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)1;
      magicEntry0.matchBytes(byteArray0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, 0, true, (-1471), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, magicEntry0, false, false, magicFormatter0);
      magicEntry1.getStartsWithByte();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      MagicEntry magicEntry0 = new MagicEntry("", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, false, magicFormatter0);
      magicEntry0.isOptional();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EndianType endianType0 = EndianType.LITTLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(32, endianConverter0, true, 32, 32);
      SearchType searchType0 = new SearchType();
      Long long0 = Long.getLong("O{MWs", (long) 32);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)39;
      searchType0.extractValueFromBytes(32, byteArray0, true);
      MagicEntry magicEntry0 = new MagicEntry("O{MWs", (-2579), true, (-1312), magicEntry_OffsetInfo0, searchType0, long0, true, searchType0, true, true, magicFormatter0);
      magicEntry0.isOptional();
      magicEntry0.isOptional();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      EndianType endianType0 = EndianType.MIDDLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-49), endianConverter0, true, (-49), (-49));
      Long long0 = new Long((byte)0);
      MagicEntry magicEntry0 = new MagicEntry((String) null, (byte)0, true, (byte)0, magicEntry_OffsetInfo0, searchType0, long0, true, searchType0, true, true, magicFormatter0);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes((byte[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Middle-endian only supports 4-byte integers
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, true, (-1838), 1311);
      PStringType pStringType0 = new PStringType();
      Long long0 = Long.getLong("O", (long) (-1838));
      MagicFormatter magicFormatter0 = new MagicFormatter("O");
      MagicEntry magicEntry0 = new MagicEntry("q'r014RHSjxa@A", (-4337), true, (-4337), magicEntry_OffsetInfo0, pStringType0, long0, true, "q'r014RHSjxa@A", true, true, magicFormatter0);
      Long long1 = new Long(0);
      MagicEntry magicEntry1 = new MagicEntry("Bk0K({T2 G9},/C", 4798, true, (-4337), magicEntry_OffsetInfo0, pStringType0, long1, true, long0, false, false, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      magicEntry1.setMimeType("Bk0K({T2 G9},/C");
      magicEntry1.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      magicEntry_OffsetInfo0.getOffset(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("w_'OecZQn%");
      MagicEntry magicEntry0 = new MagicEntry("w_'OecZQn%", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.setMimeType("C_FevZZT^q/<_W6");
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-2882), (EndianConverter) null, false, (-1), (-1));
      EndianType endianType0 = EndianType.NATIVE;
      LocalDateType localDateType0 = new LocalDateType(endianType0);
      Long long0 = new Long((-1173L));
      MagicFormatter magicFormatter0 = new MagicFormatter(":7$WfEbV^j>ozsi-{^,");
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-2882), true, 39, magicEntry_OffsetInfo0, localDateType0, (Long) null, false, object0, true, false, magicFormatter0);
      Long long1 = new Long(0L);
      MagicEntry magicEntry1 = new MagicEntry("E}SC>Fr", 316, true, 39, magicEntry_OffsetInfo0, localDateType0, long1, true, magicFormatter0, true, true, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
      magicEntry0.getStartsWithByte();
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EndianType endianType0 = EndianType.LITTLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(32, endianConverter0, false, (-4392), (-4392));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      magicEntry_OffsetInfo0.getOffset(byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "qyJ+}i|-hU:m!*}YM>q";
      int int0 = 592;
      boolean boolean0 = false;
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 619);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(592);
      // Undeclared exception!
      try { 
        magicEntry_OffsetInfo0.getOffset((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.endian.LittleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("{Z)]e ");
      DefaultType defaultType0 = new DefaultType();
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry((String) null, (byte) (-76), true, (byte) (-76), (MagicEntry.OffsetInfo) null, defaultType0, (Long) null, true, object0, true, true, magicFormatter0);
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong("T*TQ]$C%RC");
      MagicFormatter magicFormatter0 = new MagicFormatter(",test '");
      MagicEntry magicEntry0 = new MagicEntry("T*TQ]$C%RC", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, magicFormatter0, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.j256.simplemagic.entries.MagicFormatter cannot be cast to class com.j256.simplemagic.types.StringType$TestInfo (com.j256.simplemagic.entries.MagicFormatter and com.j256.simplemagic.types.StringType$TestInfo are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @75e8662b)
         //
         verifyException("com.j256.simplemagic.types.SearchType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MagicFormatter magicFormatter0 = new MagicFormatter("E_1OecZt");
      Long long0 = new Long(240);
      MagicEntry magicEntry0 = new MagicEntry("lqh", 240, true, 240, (MagicEntry.OffsetInfo) null, (MagicMatcher) null, long0, true, magicFormatter0, true, true, magicFormatter0);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.entries.MagicEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "(tPo>6)+h\"pYSE2eC}";
      int int0 = 0;
      boolean boolean0 = true;
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, true, (-5), (-5));
      StringType stringType0 = new StringType();
      byte[] byteArray0 = new byte[0];
      magicEntry_OffsetInfo0.getOffset(byteArray0);
      Long long0 = new Long(0);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = null;
      try {
        magicFormatter0 = new MagicFormatter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'Of%ecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'Of%ecZt", (byte)0, false, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      byte[] byteArray0 = new byte[9];
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      byte[] byteArray0 = new byte[1];
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 0);
      DefaultType defaultType0 = new DefaultType();
      Long.getLong("");
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("", (-3955), false, 0, magicEntry_OffsetInfo0, defaultType0, (Long) null, true, defaultType0, true, false, magicFormatter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("_;SfPN");
      MagicEntry magicEntry0 = new MagicEntry((String) null, (-1), true, 0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, true, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry((String) null, 0, true, (-1471), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, magicEntry0, false, false, magicFormatter0);
      magicEntry1.getStartsWithByte();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(113, endianConverter0, true, 542, 113);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)0;
      magicEntry_OffsetInfo0.getOffset(byteArray0);
      UtcLongDateType utcLongDateType0 = new UtcLongDateType(endianType0);
      Long long0 = new Long(113);
      Object object0 = new Object();
      magicEntry_OffsetInfo0.getOffset(byteArray0);
      MagicFormatter magicFormatter0 = new MagicFormatter("5Ko5JEaF");
      MagicEntry magicEntry0 = new MagicEntry("", 113, false, 113, magicEntry_OffsetInfo0, utcLongDateType0, long0, true, object0, false, false, magicFormatter0);
      magicEntry0.getLevel();
      magicEntry0.getLevel();
      MagicEntry magicEntry1 = new MagicEntry("%bcdeEfFgGiosuxX", 32, true, 0, magicEntry_OffsetInfo0, utcLongDateType0, long0, false, "", true, true, magicFormatter0);
      magicEntry0.addChild(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "pi";
      int int0 = (-324);
      boolean boolean0 = true;
      EndianType endianType0 = EndianType.MIDDLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      int int1 = 556;
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(3776, endianConverter0, true, 556, 0);
      EndianType endianType1 = EndianType.NATIVE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        magicEntry_OffsetInfo0.getOffset(byteArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Middle-endian only supports 4-byte integers
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EndianType endianType0 = EndianType.LITTLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(2081, endianConverter0, false, 2081, 78);
      EndianType endianType1 = EndianType.NATIVE;
      LocalLongDateType localLongDateType0 = new LocalLongDateType(endianType1);
      Long long0 = new Long(78);
      MagicEntry magicEntry0 = new MagicEntry("", 2081, false, 2081, magicEntry_OffsetInfo0, localLongDateType0, long0, false, endianConverter0, false, true, (MagicFormatter) null);
      magicEntry0.getLevel();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-1252), endianConverter0, false, 0, 0);
      StringType stringType0 = new StringType();
      Long long0 = new Long(1358L);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("T {44!");
      MagicEntry magicEntry0 = new MagicEntry("T {44!", (-175), false, (-175), magicEntry_OffsetInfo0, stringType0, long0, true, object0, false, false, magicFormatter0);
      magicEntry0.getLevel();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 52);
      DefaultType defaultType0 = new DefaultType();
      Long.getLong("");
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("", (-3927), false, 0, magicEntry_OffsetInfo0, defaultType0, (Long) null, true, defaultType0, true, false, magicFormatter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      magicEntry0.matchBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-4371), endianConverter0, false, (-47), 520);
      LocalDateType localDateType0 = new LocalDateType(endianType0);
      Long long0 = new Long((-47));
      MagicEntry magicEntry0 = new MagicEntry("", (-4371), false, (-4371), magicEntry_OffsetInfo0, localDateType0, long0, false, endianConverter0, false, false, (MagicFormatter) null);
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)127, false, (byte)127, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      magicEntry0.getStartsWithByte();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      System.setCurrentTimeMillis(1301L);
      MagicFormatter magicFormatter0 = new MagicFormatter("I|FY");
      MagicEntry magicEntry0 = new MagicEntry("unknown", 969, true, 675, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.getStartsWithByte();
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("w_'OecZQn%");
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-2046), endianConverter0, true, (-2046), (-2046));
      MagicEntry magicEntry0 = new MagicEntry("w_'OecZQn%", (-2046), false, (-2046), magicEntry_OffsetInfo0, searchType0, (Long) null, true, (Object) null, false, true, magicFormatter0);
      magicEntry0.getStartsWithByte();
      magicEntry0.matchBytes((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      EndianType endianType0 = EndianType.BIG;
      LocalDateType localDateType0 = new LocalDateType(endianType0);
      Long long0 = new Long((-1637));
      MagicEntry magicEntry0 = new MagicEntry("", (-1637), false, (-1637), (MagicEntry.OffsetInfo) null, localDateType0, long0, false, "", false, false, magicFormatter0);
      magicEntry0.matchBytes((byte[]) null);
      magicEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 52);
      DefaultType defaultType0 = new DefaultType();
      Long.getLong("");
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("", (-3927), false, 0, magicEntry_OffsetInfo0, defaultType0, (Long) null, true, defaultType0, true, false, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry("qwd", 2972, true, (-4337), magicEntry_OffsetInfo0, defaultType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      Long long0 = new Long((-167L));
      MagicEntry magicEntry2 = new MagicEntry("%bcdeEfFgGiosuxX", (-41), false, 0, magicEntry_OffsetInfo0, defaultType0, long0, true, endianConverter0, false, false, magicFormatter0);
      magicEntry2.getStartsWithByte();
      magicEntry2.setMimeType("lqh");
      magicEntry2.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      MagicEntry magicEntry0 = new MagicEntry("application/vnd.wap.wbxml", (byte)0, true, (byte) (-46), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.setOptional(true);
      magicEntry0.addChild(magicEntry0);
      magicEntry0.addChild(magicEntry0);
      byte[] byteArray0 = new byte[1];
      magicEntry0.setMimeType((String) null);
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EndianType endianType0 = EndianType.LITTLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-1), endianConverter0, false, 0, 0);
      DefaultType defaultType0 = new DefaultType();
      Long long0 = new Long(0);
      Object object0 = new Object();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) long0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      Object object1 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("5;0k*bsSVvGg<");
      StringBuilder stringBuilder3 = stringBuilder1.append((double) (-1));
      Object object2 = new Object();
      stringBuilder1.insert(0, (double) 0);
      magicFormatter0.format(stringBuilder3, object2);
      defaultType0.renderValue(stringBuilder2, object1, magicFormatter0);
      MagicFormatter magicFormatter1 = new MagicFormatter(".\"&]0qba$");
      MagicEntry magicEntry0 = new MagicEntry(".\"&]0qba$", (-1), false, 32, magicEntry_OffsetInfo0, defaultType0, long0, false, object0, false, true, magicFormatter1);
      magicEntry0.getStartsWithByte();
      magicEntry0.addChild((MagicEntry) null);
      magicEntry0.matchBytes((byte[]) null);
      magicEntry0.addChild((MagicEntry) null);
      magicEntry0.setOptional(false);
      ContentInfo contentInfo0 = magicEntry0.matchBytes((byte[]) null);
      assertNull(contentInfo0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)127, false, (byte)127, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, false, (Object) null, false, false, magicFormatter0);
      magicEntry0.setOptional(false);
      byte[] byteArray0 = magicEntry0.getStartsWithByte();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EndianType endianType0 = EndianType.MIDDLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-370), endianConverter0, false, 0, 0);
      RegexType regexType0 = new RegexType();
      Long long0 = new Long(0);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("}^3r,&HF:#wgi(_].@");
      MagicEntry magicEntry0 = new MagicEntry("l5pQx8-$l", (-370), false, 0, magicEntry_OffsetInfo0, regexType0, long0, true, object0, false, false, magicFormatter0);
      magicEntry0.setOptional(true);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("w_'OecZQn%");
      MagicEntry magicEntry0 = new MagicEntry("w_'OecZQn%", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.setMimeType("%bcdeEfFgGiosuxX");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-1180), endianConverter0, true, 571, (-1180));
      EndianType endianType1 = EndianType.NATIVE;
      ShortType shortType0 = new ShortType(endianType1);
      Long long0 = new Long(571);
      MagicFormatter magicFormatter0 = new MagicFormatter("#UXX-w8h:$D.wX");
      MagicEntry magicEntry0 = new MagicEntry("application/vnd.stardivision.math", 1563, false, 571, magicEntry_OffsetInfo0, shortType0, long0, true, endianType0, true, true, magicFormatter0);
      magicEntry0.setMimeType("%bcdeEfFgGiosuxX");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicEntry magicEntry0 = new MagicEntry((String) null, (byte) (-10), false, (byte) (-10), (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, (MagicFormatter) null);
      String string0 = magicEntry0.toString();
      assertEquals("level -10", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EndianType endianType0 = EndianType.MIDDLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(32, endianConverter0, true, 0, (-4405));
      ShortType shortType0 = new ShortType(endianType0);
      Long long0 = new Long((-5292L));
      MagicEntry magicEntry0 = new MagicEntry("", 32, true, (-4405), magicEntry_OffsetInfo0, shortType0, long0, true, endianType0, false, false, (MagicFormatter) null);
      String string0 = magicEntry0.toString();
      assertEquals("level 32,name '',test 'MIDDLE'", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'/ecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'/ecZt", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, "E_'/ecZt", true, true, magicFormatter0);
      String string0 = magicEntry0.toString();
      assertEquals("level 0,name 'E_'/ecZt',test 'E_'/ecZt',format 'E_'/ecZt'", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(0, endianConverter0, false, 0, 0);
      FloatType floatType0 = new FloatType(endianType0);
      Long long0 = new Long(0);
      Object object0 = new Object();
      MagicFormatter magicFormatter0 = new MagicFormatter("6'fTC8/C}b`oS|E");
      MagicEntry magicEntry0 = new MagicEntry("", (-621), true, 0, magicEntry_OffsetInfo0, floatType0, long0, false, object0, true, false, magicFormatter0);
      MagicEntry magicEntry1 = new MagicEntry("", 0, false, 0, magicEntry_OffsetInfo0, floatType0, long0, true, magicEntry0, true, true, magicFormatter0);
      magicEntry1.addChild(magicEntry0);
      assertFalse(magicEntry1.equals((Object)magicEntry0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = null;
      int int0 = 265;
      boolean boolean0 = false;
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(265, (EndianConverter) null, false, 265, 0);
      EndianType endianType0 = EndianType.MIDDLE;
      FloatType floatType0 = new FloatType(endianType0);
      Long long0 = new Long(1000L);
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = true;
      MagicFormatter magicFormatter0 = null;
      try {
        magicFormatter0 = new MagicFormatter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(3362, (EndianConverter) null, false, 621, 621);
      EndianType endianType0 = EndianType.LITTLE;
      ShortType shortType0 = new ShortType(endianType0);
      Long long0 = new Long((-321L));
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("vlQZU0", 39, false, (-1), magicEntry_OffsetInfo0, shortType0, long0, false, (Object) null, false, true, magicFormatter0);
      magicFormatter0.toString();
      LogBackendType logBackendType0 = LogBackendType.SLF4J;
      LoggerFactory.setLogBackendType(logBackendType0);
      magicEntry0.addChild((MagicEntry) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SearchType searchType0 = new SearchType();
      Long.getLong((String) null);
      MagicFormatter magicFormatter0 = new MagicFormatter("E_'OecZt");
      MagicEntry magicEntry0 = new MagicEntry("E_'OecZt", (byte)0, true, (byte)0, (MagicEntry.OffsetInfo) null, searchType0, (Long) null, true, (Object) null, true, true, magicFormatter0);
      magicEntry0.addChild((MagicEntry) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        magicEntry0.matchBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.entries.MagicEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "(p>";
      int int0 = (-1469);
      boolean boolean0 = true;
      int int1 = 0;
      EndianType endianType0 = EndianType.MIDDLE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      int int2 = 0;
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(592, endianConverter0, true, 0, 0);
      BigEndianString16Type bigEndianString16Type0 = new BigEndianString16Type();
      String string1 = "#MYv\"N6B?ax+)J ";
      try { 
        Long.valueOf("#MYv\"N6B?ax+)J ", 592);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 592 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(357, endianConverter0, true, 357, 357);
      StringType stringType0 = new StringType();
      stringType0.convertTestString("com.j256.simplemagic.entries.MagicEntry$ContentData", "com.j256.simplemagic.entries.MagicEntry$ContentData");
      Long long0 = Long.getLong("com.j256.simplemagic.entries.MagicEntry$ContentData", (-695L));
      StringBuilder stringBuilder0 = new StringBuilder("kSw1A");
      MagicFormatter magicFormatter0 = new MagicFormatter("com.j256.simplemagic.entries.MagicEntry$ContentData");
      stringType0.renderValue(stringBuilder0, (Object) null, magicFormatter0);
      MagicFormatter magicFormatter1 = new MagicFormatter("ice");
      MagicEntry magicEntry0 = new MagicEntry("com.j256.simplemagic.entries.MagicEntry$ContentData", 2324, true, 0, magicEntry_OffsetInfo0, stringType0, long0, true, stringType0, true, true, magicFormatter1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MagicFormatter magicFormatter0 = new MagicFormatter("w_'OecZQn%");
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-2046), endianConverter0, true, (-2046), (-2046));
  }
}
