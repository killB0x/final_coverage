/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:27:43 GMT 2022
 */

package com.j256.simplemagic.entries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.ContentInfoUtil;
import com.j256.simplemagic.endian.EndianConverter;
import com.j256.simplemagic.endian.EndianType;
import com.j256.simplemagic.entries.MagicEntry;
import com.j256.simplemagic.entries.MagicEntryParser;
import com.j256.simplemagic.entries.MagicFormatter;
import com.j256.simplemagic.entries.MagicMatcher;
import com.j256.simplemagic.types.LittleEndianString16Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicEntryParser_ESTest extends MagicEntryParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(638, endianConverter0, false, 638, 638);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(638);
      MagicFormatter magicFormatter0 = new MagicFormatter("bT");
      MagicEntry magicEntry0 = new MagicEntry("bT", 3, false, 638, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, false, "bT", false, true, magicFormatter0);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "lqh", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "k6e B5?\u0003Eq\"|!s2oe", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, " is not available on the classpath", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(94, endianConverter0, false, 94, 94);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(5L);
      MagicFormatter magicFormatter0 = new MagicFormatter("!T:blhnk type strng");
      MagicEntry magicEntry0 = new MagicEntry("k6e B5?\u0003Eq\"|!s2oe", 94, false, 94, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, false, long0, false, false, magicFormatter0);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!T:blhnk type strng", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, ">Y*4NCO q: ]I", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MagicEntryParser.parseLine((MagicEntry) null, (String) null, (ContentInfoUtil.ErrorCallBack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "(2 Mt?(P'`^ *", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(2272);
      MagicFormatter magicFormatter0 = new MagicFormatter("!:blank type string");
      MagicEntry magicEntry0 = new MagicEntry("!:blank type string", 2272, false, 2272, (MagicEntry.OffsetInfo) null, (MagicMatcher) null, long0, false, long0, false, false, magicFormatter0);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:blank type string", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(9);
      MagicFormatter magicFormatter0 = new MagicFormatter("!:blank type string");
      MagicEntry magicEntry0 = new MagicEntry("!:blank type string", 9, true, 9, (MagicEntry.OffsetInfo) null, (MagicMatcher) null, long0, true, long0, true, true, magicFormatter0);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:!:!:D]A$,3kh_{;? ", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(16);
      MagicFormatter magicFormatter0 = new MagicFormatter("!:blank typestring");
      MagicEntry magicEntry0 = new MagicEntry("!:blank typestring", 16, false, 16, (MagicEntry.OffsetInfo) null, (MagicMatcher) null, long0, false, long0, false, false, magicFormatter0);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:blank typestring", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(638, endianConverter0, true, 638, 638);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(966L);
      Integer integer0 = new Integer(638);
      MagicEntry magicEntry0 = new MagicEntry("OA AMW4h", 638, true, 638, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, true, integer0, true, false, (MagicFormatter) null);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:Sp:a!K=+", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(255, endianConverter0, true, 255, 2129);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      MagicFormatter magicFormatter0 = new MagicFormatter("com.j256.simplemagic.types.FloatType");
      MagicEntry magicEntry0 = new MagicEntry("!::]b", 9, true, 2147483645, magicEntry_OffsetInfo0, littleEndianString16Type0, (Long) null, true, magicEntry_OffsetInfo0, false, true, magicFormatter0);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!::]b", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EndianType endianType0 = EndianType.NATIVE;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(638, endianConverter0, true, 638, 638);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      MagicEntry magicEntry0 = new MagicEntry("", 638, true, 638, magicEntry_OffsetInfo0, littleEndianString16Type0, (Long) null, true, littleEndianString16Type0, true, true, (MagicFormatter) null);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:optional", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "E, value ", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "E, value ", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long((-1708L));
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo((-1245), endianConverter0, false, 106, 638);
      MagicEntry magicEntry0 = new MagicEntry("%>4&2jid<4>/-g", 106, false, 638, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, false, "%>4&2jid<4>/-g", true, true, (MagicFormatter) null);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "OA AMW4h", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "D]A$,3kh_{;? ", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(638, endianConverter0, true, 638, 638);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(966L);
      MagicFormatter magicFormatter0 = new MagicFormatter("");
      MagicEntry magicEntry0 = new MagicEntry("Sv+I|ut7a", 2790, true, 2790, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, false, long0, false, false, magicFormatter0);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "level ", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "&2 G{Mt?(t-'`^] *", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "2 to?(&-'^ *", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "2 to?(&-'^ *", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "& G{Mj?'`R`^p^] *", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "&2 G{Mt?(t-'`^] *", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(594, endianConverter0, true, 638, 98);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(638);
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("OA AMW4h", (-1106), false, 2, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, true, object0, true, false, (MagicFormatter) null);
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "& G{Mj?'`R`^p^] *", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "d>Y*:4NC> q# ]I", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "d>Y*4NC> q# ]I", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(594, endianConverter0, true, 638, 98);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(638);
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("OA AMW4h", (-1106), false, 2, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, true, object0, true, false, (MagicFormatter) null);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "=", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "!:leshort", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      EndianConverter endianConverter0 = endianType0.getConverter();
      MagicEntry.OffsetInfo magicEntry_OffsetInfo0 = new MagicEntry.OffsetInfo(594, endianConverter0, true, 638, 98);
      LittleEndianString16Type littleEndianString16Type0 = new LittleEndianString16Type();
      Long long0 = new Long(638);
      Object object0 = new Object();
      MagicEntry magicEntry0 = new MagicEntry("OA AMW4h", (-1106), false, 2, magicEntry_OffsetInfo0, littleEndianString16Type0, long0, true, object0, true, false, (MagicFormatter) null);
      MagicEntry magicEntry1 = MagicEntryParser.parseLine(magicEntry0, "!:level ", (ContentInfoUtil.ErrorCallBack) null);
      assertNull(magicEntry1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ContentInfoUtil.ErrorCallBack contentInfoUtil_ErrorCallBack0 = mock(ContentInfoUtil.ErrorCallBack.class, new ViolatedAssumptionAnswer());
      MagicEntry magicEntry0 = MagicEntryParser.parseLine((MagicEntry) null, "(2 Mt?(P'`^ *", contentInfoUtil_ErrorCallBack0);
      assertNull(magicEntry0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MagicEntryParser magicEntryParser0 = new MagicEntryParser();
  }
}
