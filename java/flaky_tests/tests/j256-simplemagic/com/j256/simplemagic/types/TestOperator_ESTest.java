/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:03:45 GMT 2022
 */

package com.j256.simplemagic.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.endian.EndianType;
import com.j256.simplemagic.types.ByteType;
import com.j256.simplemagic.types.FloatType;
import com.j256.simplemagic.types.Id3LengthType;
import com.j256.simplemagic.types.LocalDateType;
import com.j256.simplemagic.types.LongType;
import com.j256.simplemagic.types.ShortType;
import com.j256.simplemagic.types.TestOperator;
import com.j256.simplemagic.types.UtcDateType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestOperator_ESTest extends TestOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestOperator.fromTest("</L#[wk#<X2jf6l[j3");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = Integer.valueOf(126);
      EndianType endianType0 = EndianType.BIG;
      TestOperator testOperator0 = TestOperator.NEGATE;
      FloatType floatType0 = new FloatType(endianType0);
      boolean boolean0 = testOperator0.doTest(true, integer0, integer0, floatType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.AND_ALL_CLEARED;
      Short short0 = Short.valueOf((short)2030);
      ByteType byteType0 = new ByteType();
      boolean boolean0 = testOperator0.doTest(true, short0, short0, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.AND_ALL_CLEARED;
      Short short0 = Short.valueOf((short)126);
      ByteType byteType0 = new ByteType();
      boolean boolean0 = testOperator0.doTest(false, (byte)0, short0, byteType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.AND_ALL_SET;
      Integer integer0 = Integer.valueOf((-1363));
      EndianType endianType0 = EndianType.BIG;
      FloatType floatType0 = new FloatType(endianType0);
      boolean boolean0 = testOperator0.doTest(false, integer0, (-4385), floatType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.LESS_THAN;
      Long long0 = Long.getLong("", (-100L));
      EndianType endianType0 = EndianType.LITTLE;
      LocalDateType localDateType0 = new LocalDateType(endianType0);
      boolean boolean0 = testOperator0.doTest(false, 98, long0, localDateType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.GREATER_THAN;
      boolean boolean0 = testOperator0.doTest(true, float0, (byte)27, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.NOT_EQUALS;
      Float float0 = Float.valueOf((-1.0F));
      Long long0 = Long.valueOf(424L);
      EndianType endianType0 = EndianType.LITTLE;
      LongType longType0 = new LongType(endianType0);
      boolean boolean0 = testOperator0.doTest(false, float0, long0, longType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = Float.valueOf((-1.0F));
      EndianType endianType0 = EndianType.MIDDLE;
      UtcDateType utcDateType0 = new UtcDateType(endianType0);
      Short short0 = Short.valueOf((short)2030);
      TestOperator testOperator0 = TestOperator.EQUALS;
      boolean boolean0 = testOperator0.doTest(true, short0, float0, utcDateType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestOperator[] testOperatorArray0 = TestOperator.values();
      assertEquals(7, testOperatorArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestOperator.valueOf("NOT_EQUALS");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TestOperator.fromTest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.TestOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.NEGATE;
      ByteType byteType0 = new ByteType();
      // Undeclared exception!
      try { 
        testOperator0.doTest(false, (Number) null, (Number) null, byteType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.TestOperator$7", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestOperator.fromTest(":");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestOperator.fromTest("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestOperator.fromTest("^i");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double(0.0);
      TestOperator testOperator0 = TestOperator.NEGATE;
      EndianType endianType0 = EndianType.MIDDLE;
      Id3LengthType id3LengthType0 = new Id3LengthType(endianType0);
      boolean boolean0 = testOperator0.doTest(true, double1, double0, id3LengthType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, (-1270));
      EndianType endianType0 = EndianType.BIG;
      UtcDateType utcDateType0 = new UtcDateType(endianType0);
      TestOperator testOperator0 = TestOperator.NEGATE;
      boolean boolean0 = testOperator0.doTest(false, integer0, integer0, utcDateType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = Double.valueOf((-1.0));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.AND_ALL_CLEARED;
      boolean boolean0 = testOperator0.doTest(false, double0, double0, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = Double.valueOf((-1399.228834471701));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.AND_ALL_SET;
      boolean boolean0 = testOperator0.doTest(true, double0, double0, byteType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.AND_ALL_SET;
      Float float0 = Float.valueOf(0.0F);
      boolean boolean0 = testOperator0.doTest(true, float0, double0, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double(685.86274);
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.LESS_THAN;
      Float float0 = Float.valueOf(4452.3F);
      boolean boolean0 = testOperator0.doTest(false, double0, float0, byteType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.LESS_THAN;
      Integer integer0 = Integer.getInteger((String) null, (-1270));
      EndianType endianType0 = EndianType.BIG;
      UtcDateType utcDateType0 = new UtcDateType(endianType0);
      boolean boolean0 = testOperator0.doTest(true, integer0, integer0, utcDateType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EndianType endianType0 = EndianType.MIDDLE;
      ShortType shortType0 = new ShortType(endianType0);
      Double double0 = Double.valueOf((-1.0));
      Double double1 = Double.valueOf(0.0);
      TestOperator testOperator0 = TestOperator.GREATER_THAN;
      boolean boolean0 = testOperator0.doTest(false, double1, double0, shortType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.GREATER_THAN;
      Integer integer0 = Integer.valueOf((-37));
      boolean boolean0 = testOperator0.doTest(false, integer0, integer0, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, (-1270));
      EndianType endianType0 = EndianType.BIG;
      UtcDateType utcDateType0 = new UtcDateType(endianType0);
      TestOperator testOperator0 = TestOperator.NOT_EQUALS;
      Short short0 = Short.valueOf((short)5);
      boolean boolean0 = testOperator0.doTest(true, short0, integer0, utcDateType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.NOT_EQUALS;
      boolean boolean0 = testOperator0.doTest(false, double0, double0, byteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestOperator testOperator0 = TestOperator.EQUALS;
      Short short0 = Short.valueOf((short)2792);
      ByteType byteType0 = new ByteType();
      boolean boolean0 = testOperator0.doTest(false, short0, short0, byteType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double double0 = new Double((-1.0));
      ByteType byteType0 = new ByteType();
      TestOperator testOperator0 = TestOperator.EQUALS;
      Float float0 = Float.valueOf(0.0F);
      boolean boolean0 = testOperator0.doTest(true, double0, float0, byteType0);
      assertFalse(boolean0);
  }
}
