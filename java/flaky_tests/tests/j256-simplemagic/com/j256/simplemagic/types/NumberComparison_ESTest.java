/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:12:34 GMT 2022
 */

package com.j256.simplemagic.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.endian.EndianType;
import com.j256.simplemagic.types.ByteType;
import com.j256.simplemagic.types.FloatType;
import com.j256.simplemagic.types.NumberComparison;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberComparison_ESTest extends NumberComparison_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      FloatType floatType0 = new FloatType(endianType0);
      Long long0 = new Long(1800L);
      NumberComparison numberComparison0 = new NumberComparison(floatType0, "00000000000000000000000000000000000000000000000000000000000000000000000");
      Long long1 = new Long(0L);
      boolean boolean0 = numberComparison0.isMatch(long0, false, long1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      NumberComparison numberComparison0 = null;
      try {
        numberComparison0 = new NumberComparison(byteType0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.TestOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      FloatType floatType0 = new FloatType(endianType0);
      NumberComparison numberComparison0 = (NumberComparison)floatType0.convertTestString("00000000000000000000000000000000000000000000000000000000000000000000000", "9");
      Long long0 = new Long(1800L);
      boolean boolean0 = numberComparison0.isMatch(long0, true, long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      NumberComparison numberComparison0 = new NumberComparison(byteType0, "5");
      // Undeclared exception!
      try { 
        numberComparison0.isMatch((Long) null, false, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.ByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      NumberComparison numberComparison0 = null;
      try {
        numberComparison0 = new NumberComparison(byteType0, "=,7~Org8~c4GA&pLE q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not parse number from: ',7~Org8~c4GA&pLE q'
         //
         verifyException("com.j256.simplemagic.types.NumberComparison", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EndianType endianType0 = EndianType.BIG;
      FloatType floatType0 = new FloatType(endianType0);
      NumberComparison numberComparison0 = (NumberComparison)floatType0.convertTestString("00000000000000000000000000000000000000000000000000000000000000000000000", "9");
      Float float0 = (Float)numberComparison0.getValue();
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      NumberComparison numberComparison0 = new NumberComparison(byteType0, "1");
      String string0 = numberComparison0.toString();
      assertEquals("EQUALS, value 1", string0);
  }
}
