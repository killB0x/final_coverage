/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:09:03 GMT 2022
 */

package com.j256.simplemagic.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.types.StringOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringOperator_ESTest extends StringOperator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringOperator.fromTest("!_");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('G', '~', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('\\', ')', true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('^', '^', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('\'', 'I', true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.NOT_EQUALS;
      boolean boolean0 = stringOperator0.doTest(')', '\'', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.DEFAULT_OPERATOR;
      boolean boolean0 = stringOperator0.doTest('\'', 'K', true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringOperator[] stringOperatorArray0 = StringOperator.values();
      assertEquals(4, stringOperatorArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringOperator.valueOf("GREATER_THAN");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringOperator.fromTest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.types.StringOperator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringOperator.fromTest("<<");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringOperator.fromTest("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringOperator.fromTest("Phvn<meDsy");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('a', 'a', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('R', 'b', true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('-', '-', true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.LESS_THAN;
      boolean boolean0 = stringOperator0.doTest('D', '5', false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('X', '_', false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('R', 'R', true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('L', ' ', true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.GREATER_THAN;
      boolean boolean0 = stringOperator0.doTest('v', 'n', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.NOT_EQUALS;
      boolean boolean0 = stringOperator0.doTest('Z', '\\', false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.NOT_EQUALS;
      boolean boolean0 = stringOperator0.doTest('g', 'g', false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.EQUALS;
      boolean boolean0 = stringOperator0.doTest(')', ')', true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringOperator stringOperator0 = StringOperator.EQUALS;
      boolean boolean0 = stringOperator0.doTest('P', '.', true);
      assertFalse(boolean0);
  }
}
