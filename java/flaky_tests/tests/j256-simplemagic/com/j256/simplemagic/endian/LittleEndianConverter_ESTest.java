/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:01:47 GMT 2022
 */

package com.j256.simplemagic.endian;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.endian.LittleEndianConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LittleEndianConverter_ESTest extends LittleEndianConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      littleEndianConverter0.convertToByteArray(364L, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = new byte[6];
      littleEndianConverter0.convertNumber((byte)0, byteArray0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = littleEndianConverter0.convertToByteArray((-1319L), 4333);
      littleEndianConverter0.convertNumber(814, byteArray0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = littleEndianConverter0.convertToByteArray((-414L), 2034);
      Long long0 = littleEndianConverter0.convertNumber((byte)1, byteArray0, 790);
      assertEquals((-2L), (long)long0);
      assertEquals(2034, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = new byte[4];
      Long long0 = littleEndianConverter0.convertId3(1, byteArray0, 1);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = littleEndianConverter0.convertToByteArray((-414L), 2034);
      Long long0 = littleEndianConverter0.convertId3((byte)22, byteArray0, 7);
      assertEquals(562949953421311L, (long)long0);
      assertEquals(2034, byteArray0.length);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      littleEndianConverter0.convertToByteArray(5409, 5409);
      // Undeclared exception!
      littleEndianConverter0.convertToByteArray(5409, 5409);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      // Undeclared exception!
      try { 
        littleEndianConverter0.convertToByteArray((-348), (-348));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -348
         //
         verifyException("com.j256.simplemagic.endian.LittleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = new byte[0];
      Long long0 = littleEndianConverter0.convertId3(1110, byteArray0, 1110);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = littleEndianConverter0.convertToByteArray((-900L), 130);
      Long long0 = littleEndianConverter0.convertId3(0, byteArray0, 130);
      assertNotNull(long0);
      assertEquals((-388L), (long)long0);
      assertEquals(130, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      byte[] byteArray0 = new byte[0];
      Long long0 = littleEndianConverter0.convertNumber((-4272), byteArray0, (-4272));
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      // Undeclared exception!
      try { 
        littleEndianConverter0.convertNumber(302, (byte[]) null, 302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LittleEndianConverter littleEndianConverter0 = new LittleEndianConverter();
      // Undeclared exception!
      try { 
        littleEndianConverter0.convertId3(81, (byte[]) null, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
