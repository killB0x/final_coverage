/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:00:25 GMT 2022
 */

package com.j256.simplemagic.endian;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.endian.MiddleEndianConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MiddleEndianConverter_ESTest extends MiddleEndianConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[4];
      Long long0 = middleEndianConverter0.convertNumber((byte)0, byteArray0, (byte)4);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        middleEndianConverter0.convertNumber((-892), byteArray0, (byte) (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Middle-endian only supports 4-byte integers
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = middleEndianConverter0.convertToByteArray((-1L), 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = middleEndianConverter0.convertToByteArray(1802, 254);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)24;
      Long long0 = middleEndianConverter0.convertNumber((byte)0, byteArray0, 4);
      assertNotNull(long0);
      assertEquals(24L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[9];
      Long long0 = middleEndianConverter0.convertId3((byte)4, byteArray0, (byte)4);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)4;
      Long long0 = middleEndianConverter0.convertId3((byte)4, byteArray0, (byte)4);
      assertEquals(8388608L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[9];
      Long long0 = middleEndianConverter0.convertId3((-1166), byteArray0, (byte)4);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        middleEndianConverter0.convertNumber(1802, byteArray0, 1802);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Middle-endian only supports 4-byte integers
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[0];
      Long long0 = middleEndianConverter0.convertNumber(4, byteArray0, 4);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        middleEndianConverter0.convertId3(213, byteArray0, 213);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Middle-endian only supports 4-byte integers
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      byte[] byteArray0 = middleEndianConverter0.convertToByteArray((-1941), (-1941));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      // Undeclared exception!
      try { 
        middleEndianConverter0.convertId3(4, (byte[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MiddleEndianConverter middleEndianConverter0 = new MiddleEndianConverter();
      // Undeclared exception!
      try { 
        middleEndianConverter0.convertNumber((byte)4, (byte[]) null, (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.endian.MiddleEndianConverter", e);
      }
  }
}
