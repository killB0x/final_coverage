/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:41:46 GMT 2022
 */

package com.j256.simplemagic.logger.backend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.logger.Level;
import com.j256.simplemagic.logger.LogBackend;
import com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slf4jLoggingLogBackend_ESTest extends Slf4jLoggingLogBackend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend((Logger) null);
      Level level0 = Level.TRACE;
      // Undeclared exception!
      try { 
        slf4jLoggingLogBackend0.log(level0, "$VALUES", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend((Logger) null);
      Level level0 = Level.INFO;
      // Undeclared exception!
      try { 
        slf4jLoggingLogBackend0.log(level0, "y.R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable("");
      slf4jLoggingLogBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Slf4jLoggingLogBackend.Slf4jLoggingLogBackendFactory slf4jLoggingLogBackend_Slf4jLoggingLogBackendFactory0 = new Slf4jLoggingLogBackend.Slf4jLoggingLogBackendFactory();
      LogBackend logBackend0 = slf4jLoggingLogBackend_Slf4jLoggingLogBackendFactory0.createLogBackend("");
      Level level0 = Level.INFO;
      MockThrowable mockThrowable0 = new MockThrowable();
      logBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.ERROR;
      slf4jLoggingLogBackend0.log(level0, "INFO", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable("");
      slf4jLoggingLogBackend0.log(level0, "", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.DEBUG;
      slf4jLoggingLogBackend0.log(level0, "T", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.FATAL;
      slf4jLoggingLogBackend0.log(level0, "INFO", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable("");
      slf4jLoggingLogBackend0.log(level0, "g(&<-", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.OFF;
      slf4jLoggingLogBackend0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.FATAL;
      slf4jLoggingLogBackend0.log(level0, ",T2j{)-9zW-+_&jt\"N");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.WARNING;
      slf4jLoggingLogBackend0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.DEBUG;
      slf4jLoggingLogBackend0.log(level0, "");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.TRACE;
      slf4jLoggingLogBackend0.log(level0, "l[Dzo2}W");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.OFF;
      boolean boolean0 = slf4jLoggingLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.INFO;
      boolean boolean0 = slf4jLoggingLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.FATAL;
      boolean boolean0 = slf4jLoggingLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.ERROR;
      boolean boolean0 = slf4jLoggingLogBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend((Logger) null);
      Level level0 = Level.WARNING;
      // Undeclared exception!
      try { 
        slf4jLoggingLogBackend0.isLevelEnabled(level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      Level level0 = Level.DEBUG;
      boolean boolean0 = slf4jLoggingLogBackend0.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Slf4jLoggingLogBackend.Slf4jLoggingLogBackendFactory slf4jLoggingLogBackend_Slf4jLoggingLogBackendFactory0 = new Slf4jLoggingLogBackend.Slf4jLoggingLogBackendFactory();
      LogBackend logBackend0 = slf4jLoggingLogBackend_Slf4jLoggingLogBackendFactory0.createLogBackend("0qe>H-~");
      Level level0 = Level.ERROR;
      logBackend0.log(level0, "0qe>H-~");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend((Logger) null);
      Level level0 = Level.TRACE;
      // Undeclared exception!
      try { 
        slf4jLoggingLogBackend0.isLevelEnabled(level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend", e);
      }
  }
}
