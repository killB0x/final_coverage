/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:49:08 GMT 2022
 */

package com.j256.simplemagic.logger.backend;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.logger.Level;
import com.j256.simplemagic.logger.LogBackend;
import com.j256.simplemagic.logger.backend.LocalLogBackend;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalLogBackend_ESTest extends LocalLogBackend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("=");
      Level level0 = Level.WARNING;
      boolean boolean0 = localLogBackend0.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalLogBackend.openLogFile("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Log file  was not found
         //
         verifyException("com.j256.simplemagic.logger.backend.LocalLogBackend", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("@|]~<");
      MockThrowable mockThrowable0 = new MockThrowable("/simpleLoggingLocalLog.properties");
      // Undeclared exception!
      try { 
        localLogBackend0.log((Level) null, "@|]~<", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("}ukMw#{dgTkSb<|");
      // Undeclared exception!
      try { 
        localLogBackend0.log((Level) null, "}ukMw#{dgTkSb<|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalLogBackend localLogBackend0 = null;
      try {
        localLogBackend0 = new LocalLogBackend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalLogBackend.LocalLogBackendFactory localLogBackend_LocalLogBackendFactory0 = new LocalLogBackend.LocalLogBackendFactory("WARNING");
      LogBackend logBackend0 = localLogBackend_LocalLogBackendFactory0.createLogBackend("WARNING");
      Level level0 = Level.TRACE;
      boolean boolean0 = logBackend0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("=");
      Level level0 = Level.WARNING;
      localLogBackend0.log(level0, "=");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalLogBackend.LocalLogBackendFactory localLogBackend_LocalLogBackendFactory0 = new LocalLogBackend.LocalLogBackendFactory("INFO");
      LogBackend logBackend0 = localLogBackend_LocalLogBackendFactory0.createLogBackend("=");
      LogBackend logBackend1 = localLogBackend_LocalLogBackendFactory0.createLogBackend("com.j256.simplelogging.file");
      assertNotSame(logBackend1, logBackend0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("");
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable();
      localLogBackend0.log(level0, "ip9NV", (Throwable) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalLogBackend.openLogFile((String) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalLogBackend.openLogFile("1");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("=");
      localLogBackend0.flush();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("=");
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable();
      localLogBackend0.log(level0, "_v[e=Me!|O5DN", (Throwable) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalLogBackend.LocalLogBackendFactory localLogBackend_LocalLogBackendFactory0 = new LocalLogBackend.LocalLogBackendFactory();
  }
}
