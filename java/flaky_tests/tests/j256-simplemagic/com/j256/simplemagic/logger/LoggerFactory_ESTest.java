/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:55:11 GMT 2022
 */

package com.j256.simplemagic.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.logger.LogBackendFactory;
import com.j256.simplemagic.logger.LogBackendType;
import com.j256.simplemagic.logger.Logger;
import com.j256.simplemagic.logger.LoggerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoggerFactory_ESTest extends LoggerFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.setLogBackendType((LogBackendType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.getSimpleClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOCAL;
      LoggerFactory.setLogBackendType(logBackendType0);
      // Undeclared exception!
      try { 
        LoggerFactory.getLogger((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.getLogger((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException("ch.qos.logback.classic.LoggerContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoggerFactory.getLogger((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<LoggerFactory> class0 = LoggerFactory.class;
      Logger logger0 = LoggerFactory.getLogger(class0);
      Logger logger1 = LoggerFactory.getLogger("{T])9$}G%jnM`.");
      assertFalse(logger1.equals((Object)logger0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoggerFactory.getLogger("");
      LogBackendFactory logBackendFactory0 = LoggerFactory.getLogBackendFactory();
      assertEquals(LogBackendType.SLF4J, logBackendFactory0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = LoggerFactory.getSimpleClassName(".^0OQP<}(|ea|m");
      assertEquals("^0OQP<}(|ea|m", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = LoggerFactory.getSimpleClassName("{T])9$}G%jnM`.");
      assertEquals("{T])9$}G%jnM`.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = LoggerFactory.getSimpleClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOG4J2;
      // Undeclared exception!
      try { 
        LoggerFactory.setLogBackendType(logBackendType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Logging backend type LOG4J2 is not available on the classpath
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogBackendFactory logBackendFactory0 = LoggerFactory.getLogBackendFactory();
      assertNull(logBackendFactory0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LoggerFactory.setLogBackendFactory((LogBackendFactory) null);
  }
}
