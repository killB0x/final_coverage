/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 11:45:49 GMT 2022
 */

package com.j256.simplemagic.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.logger.Level;
import com.j256.simplemagic.logger.LogBackend;
import com.j256.simplemagic.logger.Logger;
import com.j256.simplemagic.logger.backend.ConsoleLogBackend;
import com.j256.simplemagic.logger.backend.JavaUtilLogBackend;
import com.j256.simplemagic.logger.backend.LocalLogBackend;
import com.j256.simplemagic.logger.backend.LogbackLogBackend;
import com.j256.simplemagic.logger.backend.NullLogBackend;
import com.j256.simplemagic.logger.backend.Slf4jLoggingLogBackend;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Logger_ESTest extends Logger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal("", object0, (Object) "", (Object) nullLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "", object0, object1, object0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("70Pue:px~z1{k[");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.trace("DEBUG", (Object) mockThrowable0, object0, (Object) logbackLogBackend0, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 70Pue:px~z1{k[", mockThrowable0.toString());
      assertEquals("70Pue:px~z1{k[", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      logger1.warn((Throwable) mockThrowable0, "null", objectArray0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.warn((Throwable) null, "", (Object) "", (Object) mockThrowable0, (Object) "com.j256.simplemagic.logger.Logger", (Object) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.warn((Throwable) mockThrowable0, "XQRrwx$8d[CGTw", object0, (Object) "XQRrwx$8d[CGTw", (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.warn((Throwable) mockThrowable0, "KLmWx.O~*f0i2~nw", object0, (Object) null);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.warn((Throwable) mockThrowable0, "", object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.warn((Throwable) null, "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      logger0.warn("$Cuu^", (Object[]) stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.warn("", (Object) "", (Object) "", (Object) "", object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.warn("Log file ", object0, (Object) level0, object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.warn("{2ITyNM{lVG.b!;vX!", object0, object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.backend.LogbackLogBackend");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.warn("#3k8c", (Object) "xn<{du");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.warn("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isTraceEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("null", "null", (String) null, 0);
      assertNotNull(stackTraceElement0);
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("null", stackTraceElement0.getClassName());
      assertEquals("null", stackTraceElement0.getMethodName());
      assertNull(stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("null.null(Unknown Source)", stackTraceElement0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.trace("null", (Object) stackTraceElement0, object0);
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("null", stackTraceElement0.getClassName());
      assertEquals("null", stackTraceElement0.getMethodName());
      assertNull(stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("null.null(Unknown Source)", stackTraceElement0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      logger0.log(level0, (Throwable) null, "Ix4eS6ZGW", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, (Throwable) null, "{}", object0, object0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("]@Rbt");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Level level0 = Level.WARNING;
      logger1.log(level0, (Throwable) mockThrowable0, "9+aZ?9qYD`$0p[!Pf.", object0, (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ]@Rbt", mockThrowable0.toString());
      assertEquals("]@Rbt", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("kh6O+YrcJ/");
      assertNotNull(localLogBackend0);
      
      Logger logger0 = new Logger(localLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplelogging.level");
      assertNotNull(mockThrowable0);
      
      Level level0 = Level.WARNING;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, (Throwable) mockThrowable0, "/simpleLoggingLocalLog.properties", object0);
      assertEquals("com.j256.simplelogging.level", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplelogging.level", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.log(level0, (Throwable) mockThrowable0, "!?FLec2M88L'FVp");
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isDebugEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.DEBUG;
      Object[] objectArray0 = new Object[7];
      logger1.log(level0, (String) null, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Level level0 = Level.WARNING;
      logger0.log(level0, "", object0, object0, (Object) "IO exception reading the log properties file '/simpleLoggingLocalLog.properties': ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, "R@dPO^]GC%x*98}1`]W", (Object) nullLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      logger0.log(level0, "TPC5e&+zTD");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      logger0.info((Throwable) mockThrowable0, "", objectArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable("eTNlh=lOAN% q(lT2N");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.info((Throwable) mockThrowable0, "DEBUG", (Object) level0, (Object) mockThrowable0, object0, (Object) level0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: eTNlh=lOAN% q(lT2N", mockThrowable0.toString());
      assertEquals("eTNlh=lOAN% q(lT2N", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("eTNlh=lOAN% q(lT2N");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.info((Throwable) mockThrowable0, "com.j256.simplemagic.logger.Logger", object0, object0, (Object) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: eTNlh=lOAN% q(lT2N", mockThrowable0.toString());
      assertEquals("eTNlh=lOAN% q(lT2N", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("*rxgY");
      assertNotNull(mockThrowable0);
      
      logger0.info((Throwable) mockThrowable0, "*rxgY", (Object) mockThrowable0, (Object) "*rxgY");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: *rxgY", mockThrowable0.toString());
      assertEquals("*rxgY", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.info((Throwable) mockThrowable0, "", (Object) nullLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("w");
      assertNotNull(mockThrowable0);
      
      logger0.info((Throwable) mockThrowable0, "w");
      assertEquals("w", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: w", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.info((String) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.Logger");
      assertNotNull(mockThrowable0);
      
      logger0.info(".ZT UyyF%.Yw", (Object) logger0, (Object) consoleLogBackend0, (Object) mockThrowable0, (Object) consoleLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplemagic.logger.Logger", mockThrowable0.toString());
      assertEquals("com.j256.simplemagic.logger.Logger", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.info("", object0, object0, object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.info("", (Object) nullLogBackend0, (Object) nullLogBackend0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.info("", (Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isInfoEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      logger1.info((String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      logger1.fatal((Throwable) mockThrowable0, (String) null, objectArray0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable("]@Rbt");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.fatal((Throwable) mockThrowable0, ", ", object0, object0, object0, (Object) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ]@Rbt", mockThrowable0.toString());
      assertEquals("]@Rbt", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.fatal((Throwable) null, "", (Object) nullLogBackend0, (Object) mockThrowable0, (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.fatal((Throwable) mockThrowable0, "PfQ9", object0, object0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal((Throwable) mockThrowable0, "DEBUG", object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("kh6O+YrcJ/");
      assertNotNull(localLogBackend0);
      
      Logger logger0 = new Logger(localLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplelogging.level");
      assertNotNull(mockThrowable0);
      
      logger0.fatal((Throwable) mockThrowable0, "com.j256.simplelogging.level");
      assertEquals("com.j256.simplelogging.level", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplelogging.level", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      logger0.fatal("s8", (Object[]) stackTraceElementArray0);
      assertEquals(2, stackTraceElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal("PfQ9", object0, (Object) "PfQ9", (Object) "PfQ9");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockThrowable mockThrowable0 = new MockThrowable("w");
      assertNotNull(mockThrowable0);
      
      logger0.fatal("9\"iPJ<*gGC", (Object) mockThrowable0, object0);
      assertEquals("w", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: w", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalLogBackend localLogBackend0 = new LocalLogBackend("kh6O+YrcJ/");
      assertNotNull(localLogBackend0);
      
      Logger logger0 = new Logger(localLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.fatal("", object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      logger1.fatal("");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      logger0.error((Throwable) mockThrowable0, "", objectArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error((Throwable) mockThrowable0, "!", (Object) mockThrowable0, object0, (Object) "Log file ", object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.error((Throwable) mockThrowable0, "", (Object) mockThrowable0, (Object) "!?FLec2M88L'FVp", (Object) level0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.error((Throwable) null, "SC6a>", (Object) "' was not found", (Object) "' was not found");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger1.error((Throwable) mockThrowable0, ")giew(VjUB", (Object) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.Logger");
      assertNotNull(mockThrowable0);
      
      logger0.error((Throwable) mockThrowable0, "{}");
      assertEquals("com.j256.simplemagic.logger.Logger", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplemagic.logger.Logger", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.error("", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error("9\"iPJ<*gGC", object0, (Object) nullLogBackend0, object0, object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("");
      assertNotNull(consoleLogBackend0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error((String) null, (Object) consoleLogBackend0, object0, object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.Logger");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.error("v,FQV_ksog\"AU", (Object) "com.j256.simplemagic.logger.Logger", object0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.error("5", (Object) nullLogBackend0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.error("@} EMPs");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.debug((Throwable) mockThrowable0, "{}", (Object[]) null);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug((Throwable) mockThrowable0, (String) null, (Object) mockThrowable0, object0, (Object) "");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("com.j256.simplemagic.logger.backend.LogbackLogBackend");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      boolean boolean0 = logger0.isLevelEnabled(level0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      boolean boolean0 = logger0.isLevelEnabled(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      LogBackend logBackend0 = logger0.getLogBackend();
      assertNull(logBackend0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "GLRazPNk<w", (Object) mockThrowable0, object0, object0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, (String) null, (Object) mockThrowable0, object0, (Object) consoleLogBackend0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, (String) null, (Object) null, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, (String) null, (Object) "{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) null, "%wMUs]XFN'(.bKqqR}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.warn("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("TbIuwxj-XM!", (Object) null, (Object) "TbIuwxj-XM!", object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("Logging backend type ", object0, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("B{TFd!0Yuq{}", (Object) "B{TFd!0Yuq{}", (Object) "B{TFd!0Yuq{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("JJ00y\"{:amxF\"", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "JJ00y\"{:amxF\"", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("/simpleLoggingLocalLog.properties");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "/simpleLoggingLocalLog.properties", (Object) "/simpleLoggingLocalLog.properties", (Object) null, (Object) mockThrowable0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "t'1hm1-(yK+unCb/#@", (Object) mockThrowable0, (Object) mockThrowable0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("nk!25xUC*|&t:");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "nk!25xUC*|&t:", (Object) null, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "com.j256.simplelogging.file", (Object) "com.j256.simplelogging.file");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.trace((Throwable) mockThrowable0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.trace("4\"JWuZZ-WAK", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("n'G+b5!}8H", (Object) "", (Object) null, (Object) null, (Object) "n'G+b5!}8H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.trace((String) null, (Object) null, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("com.j256.simplelogging.file", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable("DT@$n2w8");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "com.j256.simplemagic.logger.backend.CommonsLoggingLogBackend", (Object) null, (Object) null, (Object) "DT@$n2w8", (Object) level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "{}", (Object) level0, (Object) "{}", (Object) javaUtilLogBackend0, (Object) level0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      MockThrowable mockThrowable0 = new MockThrowable("NO]vm[~3uWI|");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "NO]vm[~3uWI|", (Object) null, object0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      MockThrowable mockThrowable0 = new MockThrowable("17N_&Q8KVz|o");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "17N_&Q8KVz|o", (Object) null, (Object) level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) null, ",X%4)+|]EO6", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.log(level0, "null", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, "E", (Object) null, (Object) "E", (Object) level0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", (Object) javaUtilLogBackend0, (Object) null, (Object) "{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "com.j256.simplemagic.logger.backend.LocalLogBackend", (Object) "com.j256.simplemagic.logger.backend.LocalLogBackend", (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "", object0, (Object) level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, "'&l-##-$", (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      // Undeclared exception!
      try { 
        logger0.log(level0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "t(%&3?_?NXL!?u]", (Object) mockThrowable0, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) null, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("'VcEQ82a", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((String) null, object0, (Object) javaUtilLogBackend0, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("", object0, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("] ", (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("2^i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("R{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, (String) null, (Object) javaUtilLogBackend0, (Object) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "", (Object) mockThrowable0, (Object) null, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable(".Q-Ex!^TnWRDN/");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, ".Q-Ex!^TnWRDN/", (Object) null, (Object) ".Q-Ex!^TnWRDN/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "Mo$k`Asb1p", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("/simpleLoggingLocalLog.properties", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.fatal((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("H-M)8Q<kg>Z", (Object) "H-M)8Q<kg>Z", (Object) "H-M)8Q<kg>Z", (Object) "H-M)8Q<kg>Z", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("wnoo1),tyditqWhQ.G", object0, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("Qc", (Object) "Qc", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("com.j256.simplemagic.logger.Logger");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.Logger");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, ",4_\"6~v!pZk", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "", object0, (Object) "", object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) null, "com.j256.simplemagic.logger.backend.JavaUtilLogBackend$1", (Object) null, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "KWT.feKwmh;oqr", object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable(", ");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "com.j256.simplemagic.logger.Logger", (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("null");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.error(":S$}{TnGh|0>XZJq", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error("", (Object) "", (Object) null, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("R{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((String) null, object0, (Object) javaUtilLogBackend0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("FATAL", (Object) "FATAL", (Object) "FATAL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("] ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) null, "f\"c", (Object) null, (Object) null, (Object) "f\"c", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.Logger");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "com.j256.simplemagic.logger.Logger", (Object) mockThrowable0, (Object) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "6*0#ye:@Vr", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.debug("T", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug("[=Knki9s", (Object) "[=Knki9s", (Object) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug("", object0, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug("", (Object) "", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug("", (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.debug(", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      LogbackLogBackend logbackLogBackend0 = new LogbackLogBackend(logger0);
      assertNotNull(logbackLogBackend0);
      
      Logger logger1 = new Logger(logbackLogBackend0);
      assertNotNull(logger1);
      
      Level level0 = Level.DEBUG;
      Logger.setGlobalLogLevel(level0);
      logger1.trace((Throwable) null, "");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      Logger.setGlobalLogLevel(level0);
      // Undeclared exception!
      try { 
        logger0.error("{}", (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("8{}", (Object) javaUtilLogBackend0, (Object) "8{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, object0, (Object) mockThrowable0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, ", ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("/o!3N/");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("m4T|Fgvol=2d(Trb");
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, ";{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, object0);
      assertEquals("{}", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: {}", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "{}", (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) null, "{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "{}", (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("6'?+Tqn-A");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      logger0.debug("6'?+Tqn-A", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        logger0.warn("{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug("{}", (Object) "{}");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.error("{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("{}");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug("{}");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "8{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0, object0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace((Throwable) mockThrowable0, "{}", (Object) null, object0, (Object) mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("}{V");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "}{V", (Object) mockThrowable0, (Object) "}{V", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.WARNING;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", object0, (Object) level0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) null, "{}", (Object) null, (Object) "{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      org.slf4j.Logger logger0 = mock(org.slf4j.Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isDebugEnabled();
      Slf4jLoggingLogBackend slf4jLoggingLogBackend0 = new Slf4jLoggingLogBackend(logger0);
      assertNotNull(slf4jLoggingLogBackend0);
      
      Logger logger1 = new Logger(slf4jLoggingLogBackend0);
      assertNotNull(logger1);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger1.debug((Throwable) mockThrowable0, "", object0, (Object) slf4jLoggingLogBackend0, object0, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      // Undeclared exception!
      try { 
        logger0.isLevelEnabled(level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, (Object) "{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.trace("{}", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.trace("{}");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, (Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0, object0, (Object) mockThrowable0, object0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("{}", (Object) "{}", (Object) javaUtilLogBackend0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.trace("{}", (Object) javaUtilLogBackend0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object[] objectArray0 = new Object[0];
      logger0.trace((Throwable) null, "{}", objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      logger0.trace((Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) null, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace("{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0, object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("R{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, "R{}", object0, (Object) level0, (Object) "R{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("R{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) null, "", (Object) "R{}", (Object) level0, (Object) "");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "tZX$em36", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "8{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.TRACE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.log(level0, "FATAL", (Object) "{}", object0, (Object) "{}", (Object) "{}");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", object0, (Object) javaUtilLogBackend0, (Object) "{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend(";{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info(";{}", (Object) null, (Object) ";{}", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("Giy%v:rF{)U");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, "Giy%v:rF{)U", (Object) null, object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      assertNotNull(nullLogBackend0);
      
      Logger logger0 = new Logger(nullLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug((Throwable) mockThrowable0, "8B-HEXKbMlC", (Object) mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Logger logger0 = new Logger((LogBackend) null);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.trace("", (Object) null, (Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("R{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("*", (Object) "R{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.Logger");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.trace((Throwable) mockThrowable0, "com.j256.simplemagic.logger.Logger", (Object) "com.j256.simplemagic.logger.Logger", (Object) "com.j256.simplemagic.logger.Logger", object0, (Object) "8{}");
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: com.j256.simplemagic.logger.Logger", mockThrowable0.toString());
      assertEquals("com.j256.simplemagic.logger.Logger", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.fatal("{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.error("{}", (Object) javaUtilLogBackend0, (Object) "{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "8{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("O=");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.DEBUG;
      logger0.log(level0, "O=", (Object) "O=");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug("{}", (Object) javaUtilLogBackend0, (Object) "{}", (Object) "{}", (Object) javaUtilLogBackend0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.warn("{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.error((Throwable) mockThrowable0, "gK3*DR9U m4", object0, (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object) javaUtilLogBackend0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, (Object) "{}", (Object) javaUtilLogBackend0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "{}", (Object) javaUtilLogBackend0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      logger0.debug("{}", (Object) "{}", (Object) "{}");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "8{}", object0, object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "hn!Eh.X", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn("{}", (Object) javaUtilLogBackend0, object0, object0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("#eE{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      logger0.debug((Throwable) mockThrowable0, "#eE{}", object0, (Object) javaUtilLogBackend0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("9{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.OFF;
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "9{}", (Object) javaUtilLogBackend0, (Object) mockThrowable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConsoleLogBackend consoleLogBackend0 = new ConsoleLogBackend("{}");
      assertNotNull(consoleLogBackend0);
      
      Logger logger0 = new Logger(consoleLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("com.j256.simplemagic.logger.backend.NullLogBackend");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.debug((Throwable) mockThrowable0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.ERROR;
      MockThrowable mockThrowable0 = new MockThrowable("?");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.warn((Throwable) mockThrowable0, "{}", object0, (Object) null, (Object) mockThrowable0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      // Undeclared exception!
      try { 
        logger0.info("Ma", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      Level level0 = Level.INFO;
      MockThrowable mockThrowable0 = new MockThrowable("{}", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        logger0.log(level0, (Throwable) mockThrowable0, "{}", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable("{}");
      assertNotNull(mockThrowable0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "com.j256.simplemagic.logger.LoggerFactory", object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("");
      assertNotNull(javaUtilLogBackend0);
      
      Logger logger0 = new Logger(javaUtilLogBackend0);
      assertNotNull(logger0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        logger0.info((Throwable) mockThrowable0, "", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        logger0.fatal((Throwable) mockThrowable0, "{}", (Object) mockThrowable0, object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        logger0.fatal("{}", object0, object0, object0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.fatal("{}", (Object) javaUtilLogBackend0, (Object) javaUtilLogBackend0, (Object) "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      NullLogBackend nullLogBackend0 = new NullLogBackend();
      Logger logger0 = new Logger(nullLogBackend0);
      LogBackend logBackend0 = logger0.getLogBackend();
      assertSame(logBackend0, nullLogBackend0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.info("{}", (Object) javaUtilLogBackend0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{L;'");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Object object0 = new Object();
      logger0.debug("{L;'", (Object) javaUtilLogBackend0, (Object) "{L;'", object0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("8{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      MockThrowable mockThrowable0 = new MockThrowable();
      logger0.debug((Throwable) mockThrowable0, "8{}");
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      Level level0 = Level.FATAL;
      // Undeclared exception!
      try { 
        logger0.log(level0, "{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("Qvt(%O");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.warn("IO exception reading the log properties file '/simpleLoggingLocalLog.properties': ", (Object) "Qvt(%O", (Object) "IO exception reading the log properties file '/simpleLoggingLocalLog.properties': ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.fatal("{}", (Object[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JavaUtilLogBackend javaUtilLogBackend0 = new JavaUtilLogBackend("{}");
      Logger logger0 = new Logger(javaUtilLogBackend0);
      // Undeclared exception!
      try { 
        logger0.fatal("{}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }
}
