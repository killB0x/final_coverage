/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 12:09:56 GMT 2022
 */

package com.j256.simplemagic.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.j256.simplemagic.logger.LogBackend;
import com.j256.simplemagic.logger.LogBackendType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogBackendType_ESTest extends LogBackendType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogBackendType[] logBackendTypeArray0 = LogBackendType.values();
      assertEquals(9, logBackendTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.valueOf("SLF4J");
      assertEquals(LogBackendType.SLF4J, logBackendType0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.valueOf("NULL");
      assertEquals(LogBackendType.NULL, logBackendType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOG4J2;
      LogBackend logBackend0 = logBackendType0.createLogBackend("");
      assertNotNull(logBackend0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOGBACK;
      // Undeclared exception!
      try { 
        logBackendType0.createLogBackend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException("ch.qos.logback.classic.LoggerContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOGBACK;
      boolean boolean0 = logBackendType0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOG4J;
      boolean boolean0 = logBackendType0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.NULL;
      boolean boolean0 = logBackendType0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOCAL;
      boolean boolean0 = logBackendType0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LogBackendType logBackendType0 = LogBackendType.LOG4J2;
      // Undeclared exception!
      try { 
        logBackendType0.createLogBackend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.j256.simplemagic.logger.LoggerFactory", e);
      }
  }
}
