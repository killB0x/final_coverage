/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 08:34:15 GMT 2022
 */

package io.github.rcarlosdasilva.kits.net.ua;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.rcarlosdasilva.kits.net.ua.Version;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Version_ESTest extends Version_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Version version0 = new Version("{CR4h", "F(", "");
      version0.version = "";
      version0.version = null;
      version0.version = "@/./T";
      Version version1 = new Version("F(", "16z", "{CR4h");
      int int0 = version0.compareTo(version1);
      assertEquals("{CR4h", version1.getMinorVersion());
      assertEquals((-6), int0);
      assertEquals("16z", version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      version0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.version = "'boTx]ihmP";
      version0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.minorVersion = "";
      version0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.minorVersion = "";
      String string0 = version0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.version = "'boTx]ihmP";
      String string0 = version0.getMajorVersion();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.minorVersion = "";
      String string0 = version0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Version version0 = new Version((String) null, "", (String) null);
      String string0 = version0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      String string0 = version0.toString();
      assertEquals(" x!d/Eiz+p3", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Version version0 = new Version((String) null, "", (String) null);
      String string0 = version0.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      String string0 = version0.getVersion();
      assertEquals(" x!d/Eiz+p3", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Version version0 = new Version("1?!bZi./OD\"3;QP", "", (String) null);
      String string0 = version0.getMinorVersion();
      assertEquals("", version0.getMajorVersion());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      String string0 = version0.getMinorVersion();
      assertEquals(" x!d/Eiz+p3", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = new Version((String) null, (String) null, "s91UL2");
      String string0 = version0.getMajorVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      String string0 = version0.getMajorVersion();
      assertEquals(" x!d/Eiz+p3", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.version = "'boTx]ihmP";
      version0.version = "";
      version0.version = "";
      version0.version = null;
      // Undeclared exception!
      try { 
        version0.compareTo(version0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.net.ua.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Version version0 = new Version("s", "s", "s");
      Version version1 = new Version("7", "s", "7");
      int int0 = version0.compareTo(version1);
      assertEquals("s", version1.getMajorVersion());
      assertEquals("7", version1.getMinorVersion());
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      Version version1 = new Version(".X.", "", "");
      int int0 = version0.compareTo(version1);
      assertEquals("", version1.getMinorVersion());
      assertEquals("", version1.getMajorVersion());
      assertEquals((-1), int0);
      assertEquals("", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Version version0 = new Version(".q", "2/n\".vK35k\"+Hb6}#'R", "\"#Dk\"k>@/*");
      Version version1 = new Version("", "\"#Dk\"k>@/*", "\"#Dk\"k>@/*");
      int int0 = version0.compareTo(version1);
      assertEquals("\"#Dk\"k>@/*", version1.getMajorVersion());
      assertEquals("\"#Dk\"k>@/*", version0.getMinorVersion());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      Version version1 = new Version("~2\"[%au+2)mD~PL#0p", "", "");
      int int0 = version1.compareTo(version0);
      assertEquals("", version1.getMajorVersion());
      assertEquals(1, int0);
      assertEquals("", version1.getMinorVersion());
      assertEquals("", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Version version0 = new Version("1?!bZi./OD\"3;QP", (String) null, "");
      int int0 = version0.compareTo(version0);
      assertEquals(0, int0);
      assertEquals("", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      Version version1 = new Version("~2\"[%au+2)mD~PL#0p", "", "");
      int int0 = version0.compareTo(version1);
      assertEquals((-1), int0);
      assertEquals("", version1.getMajorVersion());
      assertEquals("", version1.getMinorVersion());
      assertEquals("", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Version version0 = new Version("", "", "io.github.rcarlosdasilva.kits.net.ua.Version");
      int int0 = version0.compareTo((Version) null);
      assertEquals(1, int0);
      assertEquals("io.github.rcarlosdasilva.kits.net.ua.Version", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Version version0 = new Version("HvY`:-;4g", "HvY`:-;4g", "HvY`:-;4g");
      Version version1 = new Version("HvY`:-;4g", "HvY`:-;4g", "HvY`:-;4g");
      boolean boolean0 = version0.equals(version1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.version = "'boTx]ihmP";
      version0.version = "";
      version0.version = "";
      version0.version = null;
      Version version1 = new Version("", "", "");
      assertFalse(version1.equals((Object)version0));
      
      version1.version = null;
      boolean boolean0 = version0.equals(version1);
      assertTrue(version1.equals((Object)version0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Version version0 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", " x!d/Eiz+p3");
      Version version1 = new Version(" x!d/Eiz+p3", " x!d/Eiz+p3", "");
      boolean boolean0 = version0.equals(version1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Version version0 = new Version("O%8t", (String) null, (String) null);
      Version version1 = new Version((String) null, (String) null, "_]r!Z+GcUU+lyTt)Gc");
      version1.minorVersion = null;
      boolean boolean0 = version0.equals(version1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Version version0 = new Version("O%8t", (String) null, (String) null);
      Version version1 = new Version((String) null, (String) null, "_]r!Z+GcUU+lyTt)Gc");
      boolean boolean0 = version0.equals(version1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Version version0 = new Version(".X.", "", "");
      Version version1 = new Version("~2\"[%au+2)mD~PL#0p", "", "");
      boolean boolean0 = version0.equals(version1);
      assertEquals("", version1.getMinorVersion());
      assertFalse(boolean0);
      assertEquals("", version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Version version0 = new Version("", "", "");
      Version version1 = new Version("", (String) null, "ond");
      boolean boolean0 = version1.equals(version0);
      assertEquals("ond", version1.getMinorVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Version version0 = new Version((String) null, (String) null, "4.qi");
      Version version1 = new Version("4.qi", (String) null, "4.qi");
      boolean boolean0 = version0.equals(version1);
      assertFalse(boolean0);
      assertFalse(version1.equals((Object)version0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      boolean boolean0 = version0.equals(".X.");
      assertEquals("", version0.getMinorVersion());
      assertFalse(boolean0);
      assertEquals(".X.", version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Version version0 = new Version("", "", "");
      boolean boolean0 = version0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Version version0 = new Version("s", "s", "s");
      boolean boolean0 = version0.equals(version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      Version version1 = new Version(".X.", "", "");
      boolean boolean0 = version1.equals(version0);
      assertEquals("", version1.getMinorVersion());
      assertFalse(boolean0);
      assertEquals("", version0.getMinorVersion());
      assertEquals("", version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Version version0 = new Version((String) null, (String) null, (String) null);
      version0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Version version0 = new Version("", ".X.", "");
      String string0 = version0.getMinorVersion();
      assertEquals(".X.", version0.getMajorVersion());
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
