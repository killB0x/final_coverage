/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:23:15 GMT 2022
 */

package io.github.rcarlosdasilva.kits.net.http;

import org.junit.Test;
import static org.junit.Assert.*;
import io.github.rcarlosdasilva.kits.net.http.ContentType;
import io.github.rcarlosdasilva.kits.net.http.MultiFile;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiFile_ESTest extends MultiFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentType contentType0 = ContentType.SWF;
      MultiFile multiFile0 = new MultiFile(contentType0, "lxyjG0+2M\"7", "lxyjG0+2M\"7", (File) null);
      multiFile0.setFileName((String) null);
      String string0 = multiFile0.getFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.github.rcarlosdasilva.kits.net.http.MultiFile");
      MultiFile multiFile0 = new MultiFile("io.github.rcarlosdasilva.kits.net.http.MultiFile", "VCF", mockFile0);
      assertEquals("VCF", multiFile0.getFileName());
      
      multiFile0.setFileName("");
      multiFile0.getFileName();
      assertEquals("io.github.rcarlosdasilva.kits.net.http.MultiFile", multiFile0.getFileKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("}o&+zm'#j9E:0", (String) null);
      MultiFile multiFile0 = new MultiFile((String) null, "$o", file0);
      String string0 = multiFile0.getFileKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("KK{Kj<s:pE2.gzu", "%FvjddZvaE5-{U=");
      MultiFile multiFile0 = new MultiFile("", "", file0);
      String string0 = multiFile0.getFileKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContentType contentType0 = ContentType.SWF;
      MultiFile multiFile0 = new MultiFile(contentType0, "lxyjG0+2M\"7", "lxyjG0+2M\"7", (File) null);
      File file0 = multiFile0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("P");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "P");
      MultiFile multiFile0 = new MultiFile("P", "P", mockFile0);
      File file0 = multiFile0.getFile();
      assertEquals(1L, file0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.github.rcarlosdasilva.kits.net.http.MultiFile");
      mockFile0.mkdirs();
      MultiFile multiFile0 = new MultiFile("io.github.rcarlosdasilva.kits.net.http.MultiFile", "VCF", mockFile0);
      multiFile0.getFile();
      assertEquals("io.github.rcarlosdasilva.kits.net.http.MultiFile", multiFile0.getFileKey());
      assertEquals("VCF", multiFile0.getFileName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.github.rcarlosdasilva.kits.net.http.MultiFile");
      MultiFile multiFile0 = new MultiFile("io.github.rcarlosdasilva.kits.net.http.MultiFile", "VCF", mockFile0);
      multiFile0.getFile();
      assertEquals("VCF", multiFile0.getFileName());
      assertEquals("io.github.rcarlosdasilva.kits.net.http.MultiFile", multiFile0.getFileKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContentType contentType0 = ContentType.ICO;
      MockFile mockFile0 = new MockFile("1vz=/2HLg/MwCq");
      File file0 = MockFile.createTempFile(".l.rBnB[^q91fj", "B", (File) mockFile0);
      MultiFile multiFile0 = new MultiFile(contentType0, "B", ".l.rBnB[^q91fj", file0);
      multiFile0.getFile();
      assertEquals("B", multiFile0.getFileKey());
      assertEquals(".l.rBnB[^q91fj", multiFile0.getFileName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Kqr`", "bb5z6");
      MultiFile multiFile0 = new MultiFile("bb5z6", "WMV", mockFile0);
      multiFile0.getContentType();
      assertEquals("bb5z6", multiFile0.getFileKey());
      assertEquals("WMV", multiFile0.getFileName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.github.rcarlosdasilva.kits.net.http.MultiFile");
      MultiFile multiFile0 = new MultiFile("io.github.rcarlosdasilva.kits.net.http.MultiFile", "VCF", mockFile0);
      String string0 = multiFile0.getFileName();
      assertEquals("VCF", string0);
      assertEquals("io.github.rcarlosdasilva.kits.net.http.MultiFile", multiFile0.getFileKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Kqr`", "bb5z6");
      MultiFile multiFile0 = new MultiFile("bb5z6", "WMV", mockFile0);
      assertEquals("bb5z6", multiFile0.getFileKey());
      
      multiFile0.setFileKey("fz");
      assertEquals("WMV", multiFile0.getFileName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Kqr`", "bb5z6");
      MultiFile multiFile0 = new MultiFile("bb5z6", "WMV", mockFile0);
      ContentType contentType0 = ContentType.HTML;
      multiFile0.setContentType(contentType0);
      assertEquals("WMV", multiFile0.getFileName());
      assertEquals("bb5z6", multiFile0.getFileKey());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.github.rcarlosdasilva.kits.net.http.MultiFile");
      MultiFile multiFile0 = new MultiFile("io.github.rcarlosdasilva.kits.net.http.MultiFile", "VCF", mockFile0);
      String string0 = multiFile0.getFileKey();
      assertEquals("io.github.rcarlosdasilva.kits.net.http.MultiFile", string0);
      assertEquals("VCF", multiFile0.getFileName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiFile multiFile0 = new MultiFile((ContentType) null, "P", (String) null, (File) null);
      multiFile0.getContentType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("P");
      MultiFile multiFile0 = new MultiFile("P", "P", mockFile0);
      multiFile0.setFile(mockFile0);
      assertNull(mockFile0.getParent());
  }
}
