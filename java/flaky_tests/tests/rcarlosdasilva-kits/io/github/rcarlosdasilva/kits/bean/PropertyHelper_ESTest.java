/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 08:49:47 GMT 2022
 */

package io.github.rcarlosdasilva.kits.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.rcarlosdasilva.kits.bean.PropertyHelper;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyHelper_ESTest extends PropertyHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = PropertyHelper.write(object0, "cBs#F", object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyHelper.propertyDescriptors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      // Undeclared exception!
      try { 
        PropertyHelper.propertyDescriptors(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Lists
         //
         verifyException("io.github.rcarlosdasilva.kits.bean.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = PropertyHelper.isReadable((PropertyDescriptor) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = PropertyHelper.isWriteable((PropertyDescriptor) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptor propertyDescriptor0 = PropertyHelper.propertyDescriptor(class0, "");
      assertNull(propertyDescriptor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = PropertyHelper.write((Object) null, ">,+", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("class", class0, "class", (String) null);
      boolean boolean0 = PropertyHelper.isReadable(propertyDescriptor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("cBs#F", (Method) null, (Method) null);
      boolean boolean0 = PropertyHelper.isReadable(propertyDescriptor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = PropertyHelper.read((Object) null, (String) null);
      Object object1 = PropertyHelper.read(object0, (String) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("cBs#F", (Method) null, (Method) null);
      boolean boolean0 = PropertyHelper.isWriteable(propertyDescriptor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("vt[&q`h5GPz\"y?`eno", (Method) null, (Method) null);
      // Undeclared exception!
      try { 
        PropertyHelper.read((Object) "vt[&q`h5GPz\"y?`eno", propertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.bean.PropertyHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyHelper propertyHelper0 = new PropertyHelper();
      Class<Object> class0 = Object.class;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("class", class0, "class", (String) null);
      Object object0 = PropertyHelper.read((Object) propertyHelper0, propertyDescriptor0);
      assertEquals("class io.github.rcarlosdasilva.kits.bean.PropertyHelper", object0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("vt[&q`h5GPz\"y?`eno", (Method) null, (Method) null);
      // Undeclared exception!
      try { 
        PropertyHelper.write((Object) propertyDescriptor0, propertyDescriptor0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.bean.PropertyHelper", e);
      }
  }
}
