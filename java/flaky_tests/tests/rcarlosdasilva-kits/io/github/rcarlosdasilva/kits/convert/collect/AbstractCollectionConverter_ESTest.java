/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:05:12 GMT 2022
 */

package io.github.rcarlosdasilva.kits.convert.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.rcarlosdasilva.kits.convert.collect.CollectionInternalConverter;
import io.github.rcarlosdasilva.kits.convert.collect.impl.Map2ListConverter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCollectionConverter_ESTest extends AbstractCollectionConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CollectionInternalConverter<LinkedList<Integer>, Integer, Integer> collectionInternalConverter0 = (CollectionInternalConverter<LinkedList<Integer>, Integer, Integer>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Map2ListConverter<LinkedList<Integer>, Integer, Integer> map2ListConverter0 = new Map2ListConverter<LinkedList<Integer>, Integer, Integer>(collectionInternalConverter0);
      List<Integer> list0 = map2ListConverter0.convert((Map<LinkedList<Integer>, Integer>) null, (List<Integer>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CollectionInternalConverter<Integer, Integer, Integer> collectionInternalConverter0 = (CollectionInternalConverter<Integer, Integer, Integer>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      Map2ListConverter<Integer, Integer, Integer> map2ListConverter0 = new Map2ListConverter<Integer, Integer, Integer>(collectionInternalConverter0);
      // Undeclared exception!
      try { 
        map2ListConverter0.collectionInstance();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Lists
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.Map2ListConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CollectionInternalConverter<Integer, Integer, Integer> collectionInternalConverter0 = (CollectionInternalConverter<Integer, Integer, Integer>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      Map2ListConverter<Integer, Integer, Integer> map2ListConverter0 = new Map2ListConverter<Integer, Integer, Integer>(collectionInternalConverter0);
      // Undeclared exception!
      try { 
        map2ListConverter0.convert((Map<Integer, Integer>) hashMap0, (List<Integer>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Lists
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.Map2ListConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CollectionInternalConverter<Integer, Integer, LinkedList<Integer>> collectionInternalConverter0 = (CollectionInternalConverter<Integer, Integer, LinkedList<Integer>>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      Map2ListConverter<Integer, Integer, LinkedList<Integer>> map2ListConverter0 = new Map2ListConverter<Integer, Integer, LinkedList<Integer>>(collectionInternalConverter0);
      List<LinkedList<Integer>> list0 = map2ListConverter0.convert((Map<Integer, Integer>) null, (List<LinkedList<Integer>>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CollectionInternalConverter<Integer, Integer, Integer> collectionInternalConverter0 = (CollectionInternalConverter<Integer, Integer, Integer>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      Map2ListConverter<Integer, Integer, Integer> map2ListConverter0 = new Map2ListConverter<Integer, Integer, Integer>(collectionInternalConverter0);
      List<Integer> list0 = map2ListConverter0.convert((Map<Integer, Integer>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Map2ListConverter<LinkedList<Integer>, Integer, LinkedList<Integer>> map2ListConverter0 = null;
      try {
        map2ListConverter0 = new Map2ListConverter<LinkedList<Integer>, Integer, LinkedList<Integer>>((CollectionInternalConverter<LinkedList<Integer>, Integer, LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.AbstractCollectionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CollectionInternalConverter<Integer, Integer, Integer> collectionInternalConverter0 = (CollectionInternalConverter<Integer, Integer, Integer>) mock(CollectionInternalConverter.class, new ViolatedAssumptionAnswer());
      Map2ListConverter<Integer, Integer, Integer> map2ListConverter0 = new Map2ListConverter<Integer, Integer, Integer>(collectionInternalConverter0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        map2ListConverter0.convert((Map<Integer, Integer>) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Lists
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.Map2ListConverter", e);
      }
  }
}
