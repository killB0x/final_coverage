/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 08:31:12 GMT 2022
 */

package io.github.rcarlosdasilva.kits.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.rcarlosdasilva.kits.encryption.BCryptHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BCryptHelper_ESTest extends BCryptHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BCryptHelper.BCrypt bCryptHelper_BCrypt0 = new BCryptHelper.BCrypt();
      byte[] byteArray0 = new byte[19];
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        bCryptHelper_BCrypt0.crypt_raw(byteArray0, byteArray0, (byte)20, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad salt length
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper$BCrypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCryptHelper.check("", "\u0000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt version
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(118);
      // Undeclared exception!
      BCryptHelper.encrypt("u");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCryptHelper.check("", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCryptHelper.check((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BCryptHelper.BCrypt bCryptHelper_BCrypt0 = new BCryptHelper.BCrypt();
      byte[] byteArray0 = new byte[9];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        bCryptHelper_BCrypt0.crypt_raw(byteArray0, byteArray0, (byte)8, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad salt length
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper$BCrypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BCryptHelper.BCrypt bCryptHelper_BCrypt0 = new BCryptHelper.BCrypt();
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        bCryptHelper_BCrypt0.crypt_raw(byteArray0, byteArray0, 422, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad number of rounds
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper$BCrypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BCryptHelper.BCrypt bCryptHelper_BCrypt0 = new BCryptHelper.BCrypt();
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        bCryptHelper_BCrypt0.crypt_raw(byteArray0, byteArray0, 1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad number of rounds
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper$BCrypt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = BCryptHelper.encrypt((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCryptHelper.check("IvYD<lDHRoIbJ*a`oe", "$N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt version
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BCryptHelper.check("lg_runds exceeds maximum (30)", "lg_runds exceeds maximum (30)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid salt version
         //
         verifyException("io.github.rcarlosdasilva.kits.encryption.BCryptHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BCryptHelper bCryptHelper0 = new BCryptHelper();
  }
}
