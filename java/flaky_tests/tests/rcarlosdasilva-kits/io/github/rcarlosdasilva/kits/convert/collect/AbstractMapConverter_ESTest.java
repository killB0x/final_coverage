/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:01:21 GMT 2022
 */

package io.github.rcarlosdasilva.kits.convert.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.rcarlosdasilva.kits.convert.collect.MapInternalConverter;
import io.github.rcarlosdasilva.kits.convert.collect.impl.List2MapConverter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractMapConverter_ESTest extends AbstractMapConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapInternalConverter<HashMap<Integer, Integer>, Integer, LinkedList<Integer>> mapInternalConverter0 = (MapInternalConverter<HashMap<Integer, Integer>, Integer, LinkedList<Integer>>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<HashMap<Integer, Integer>, Integer, LinkedList<Integer>> list2MapConverter0 = new List2MapConverter<HashMap<Integer, Integer>, Integer, LinkedList<Integer>>(mapInternalConverter0);
      Map<Integer, LinkedList<Integer>> map0 = list2MapConverter0.convert((List<HashMap<Integer, Integer>>) null, (Map<Integer, LinkedList<Integer>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MapInternalConverter<LinkedList<Integer>, LinkedList<Integer>, Integer> mapInternalConverter0 = (MapInternalConverter<LinkedList<Integer>, LinkedList<Integer>, Integer>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<LinkedList<Integer>, LinkedList<Integer>, Integer> list2MapConverter0 = new List2MapConverter<LinkedList<Integer>, LinkedList<Integer>, Integer>(mapInternalConverter0);
      HashMap<LinkedList<Integer>, Integer> hashMap0 = new HashMap<LinkedList<Integer>, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(linkedList0, integer0);
      Map<LinkedList<Integer>, Integer> map0 = list2MapConverter0.convert((List<LinkedList<Integer>>) null, (Map<LinkedList<Integer>, Integer>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MapInternalConverter<Integer, LinkedList<Integer>, LinkedList<Integer>> mapInternalConverter0 = (MapInternalConverter<Integer, LinkedList<Integer>, LinkedList<Integer>>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<Integer, LinkedList<Integer>, LinkedList<Integer>> list2MapConverter0 = new List2MapConverter<Integer, LinkedList<Integer>, LinkedList<Integer>>(mapInternalConverter0);
      Map<LinkedList<Integer>, LinkedList<Integer>> map0 = list2MapConverter0.convert((List<Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MapInternalConverter<Integer, Integer, Integer> mapInternalConverter0 = (MapInternalConverter<Integer, Integer, Integer>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<Integer, Integer, Integer> list2MapConverter0 = new List2MapConverter<Integer, Integer, Integer>(mapInternalConverter0);
      // Undeclared exception!
      try { 
        list2MapConverter0.mapInstance();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Maps
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.List2MapConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MapInternalConverter<LinkedList<Integer>, Integer, Integer> mapInternalConverter0 = (MapInternalConverter<LinkedList<Integer>, Integer, Integer>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<LinkedList<Integer>, Integer, Integer> list2MapConverter0 = new List2MapConverter<LinkedList<Integer>, Integer, Integer>(mapInternalConverter0);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        list2MapConverter0.convert((List<LinkedList<Integer>>) linkedList0, (Map<Integer, Integer>) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Maps
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.List2MapConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MapInternalConverter<LinkedList<Integer>, Integer, Integer> mapInternalConverter0 = (MapInternalConverter<LinkedList<Integer>, Integer, Integer>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<LinkedList<Integer>, Integer, Integer> list2MapConverter0 = new List2MapConverter<LinkedList<Integer>, Integer, Integer>(mapInternalConverter0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Map<Integer, Integer> map0 = list2MapConverter0.convert((List<LinkedList<Integer>>) null, (Map<Integer, Integer>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      List2MapConverter<Integer, LinkedList<Integer>, LinkedList<Integer>> list2MapConverter0 = null;
      try {
        list2MapConverter0 = new List2MapConverter<Integer, LinkedList<Integer>, LinkedList<Integer>>((MapInternalConverter<Integer, LinkedList<Integer>, LinkedList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.AbstractMapConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MapInternalConverter<LinkedList<Integer>, HashMap<Integer, Integer>, Integer> mapInternalConverter0 = (MapInternalConverter<LinkedList<Integer>, HashMap<Integer, Integer>, Integer>) mock(MapInternalConverter.class, new ViolatedAssumptionAnswer());
      List2MapConverter<LinkedList<Integer>, HashMap<Integer, Integer>, Integer> list2MapConverter0 = new List2MapConverter<LinkedList<Integer>, HashMap<Integer, Integer>, Integer>(mapInternalConverter0);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      // Undeclared exception!
      try { 
        list2MapConverter0.convert((List<LinkedList<Integer>>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/collect/Maps
         //
         verifyException("io.github.rcarlosdasilva.kits.convert.collect.impl.List2MapConverter", e);
      }
  }
}
