/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 14:17:02 GMT 2022
 */

package org.ubercraft.sucre.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.ubercraft.sucre.common.ObjectUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectUtil_ESTest extends ObjectUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short)2491);
      short short1 = ObjectUtil.unwrap(short0, (byte)0);
      assertEquals((short)2491, short1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = ObjectUtil.unwrap((Long) null, 810L);
      assertEquals(810L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = ObjectUtil.unwrap(integer0, (int) (byte)31);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Float float0 = new Float(0.0);
      float float1 = ObjectUtil.unwrap(float0, (float) (short)0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-337.482F));
      float float1 = ObjectUtil.unwrap(float0, (-337.482F));
      assertEquals((-337.482F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-175.3765));
      double double1 = ObjectUtil.unwrap(double0, (-175.3765));
      assertEquals((-175.3765), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      char char0 = ObjectUtil.unwrap(character0, '9');
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      byte byte1 = ObjectUtil.unwrap(byte0, (byte)1);
      assertEquals((byte)108, byte1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = ObjectUtil.unwrap((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1856);
      Object object0 = new Object();
      boolean boolean0 = ObjectUtil.leftEquals(integer0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      boolean boolean0 = ObjectUtil.leftEquals(integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long((-2410L));
      Float float0 = new Float(2425.7389272685);
      boolean boolean0 = ObjectUtil.rightEquals(long0, float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtil.leftEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ObjectUtil.rightEquals(class0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = ObjectUtil.nullSafeEquals(object0, object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(657);
      boolean boolean0 = ObjectUtil.nullSafeEquals((Object) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = ObjectUtil.nullSafeEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = ObjectUtil.nullSafeEquals(boolean0, (Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Character character0 = Character.valueOf('o');
      char char0 = ObjectUtil.unwrap(character0, 'i');
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char char0 = ObjectUtil.unwrap((Character) null, '$');
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Short short0 = new Short((byte)0);
      short short1 = ObjectUtil.unwrap(short0, (byte)0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short short0 = ObjectUtil.unwrap((Short) null, (byte) (-95));
      assertEquals((short) (-95), short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      byte byte1 = ObjectUtil.unwrap(byte0, (byte)0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = ObjectUtil.unwrap((Byte) null, (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Float float0 = new Float(2425.7389272685);
      float float1 = ObjectUtil.unwrap(float0, (float) (-2410L));
      assertEquals(2425.739F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float float0 = ObjectUtil.unwrap((Float) null, 1216.3F);
      assertEquals(1216.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double double0 = new Double(6.664177424835334);
      double double1 = ObjectUtil.unwrap(double0, 6.664177424835334);
      assertEquals(6.664177424835334, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = ObjectUtil.unwrap((Double) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long((-2410L));
      long long1 = ObjectUtil.unwrap(long0, 1362L);
      assertEquals((-2410L), long1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = ObjectUtil.unwrap((Long) null, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1);
      int int0 = ObjectUtil.unwrap(integer0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = ObjectUtil.unwrap((Integer) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Qi39s^%eL6");
      boolean boolean1 = ObjectUtil.unwrap(boolean0, true);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ObjectUtil.getPrimitiveDefault(class0);
      boolean boolean0 = ObjectUtil.leftEquals((Object) null, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
  }
}
