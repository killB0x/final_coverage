/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 14:21:31 GMT 2022
 */

package org.ubercraft.sucre.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;
import org.ubercraft.sucre.common.ExceptionUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExceptionUtil_ESTest extends ExceptionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtil.asError((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ubercraft.sucre.common.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockException mockException0 = new MockException();
      try { 
        ExceptionUtil.asChecked(mockException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtil.asUnchecked(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockError mockError0 = new MockError();
      try { 
        ExceptionUtil.asError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockException mockException0 = new MockException("_y%X");
      try { 
        ExceptionUtil.asError(mockException0);
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // _y%X
         //
         verifyException("org.ubercraft.sucre.common.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      try { 
        ExceptionUtil.asUnchecked((Throwable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ubercraft.sucre.common.ExceptionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      try { 
        ExceptionUtil.asUnchecked(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      try { 
        ExceptionUtil.asChecked(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtil.asChecked(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ExceptionUtil exceptionUtil0 = new ExceptionUtil();
  }
}
