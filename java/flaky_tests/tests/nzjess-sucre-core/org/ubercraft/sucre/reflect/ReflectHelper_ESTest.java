/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 14:20:32 GMT 2022
 */

package org.ubercraft.sucre.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.ubercraft.sucre.reflect.ReflectHelper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectHelper_ESTest extends ReflectHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = ReflectHelper.mutatorMethodNameToFieldName("set]+");
      assertEquals("]+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectHelper.mutatorMethodNameToFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectHelper.accessorMethodNameToFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ReflectHelper.mutatorMethodNameToFieldName("set");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ReflectHelper.mutatorMethodNameToFieldName("'c)Re");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ReflectHelper.accessorMethodNameToFieldName("is");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = ReflectHelper.accessorMethodNameToFieldName("getget");
      assertEquals("get", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = ReflectHelper.accessorMethodNameToFieldName("'c)Re");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ReflectHelper reflectHelper0 = new ReflectHelper();
  }
}
