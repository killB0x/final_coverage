/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 14:24:31 GMT 2022
 */

package org.ubercraft.sucre.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.ubercraft.sucre.reflect.FieldReflectorFactory;
import org.ubercraft.sucre.reflect.Reflect;
import org.ubercraft.sucre.reflect.Reflector;
import org.ubercraft.sucre.reflect.ReflectorFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reflect_ESTest extends Reflect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reflect reflect0 = new Reflect();
      Class<Object> class0 = Object.class;
      Class<FieldReflectorFactory> class1 = FieldReflectorFactory.class;
      reflect0.setReflectorFactoryClass(class0, class1);
      // Undeclared exception!
      try { 
        reflect0.preCache(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to pre-cache accessor/mutator maps for type: java.lang.Object
         //
         verifyException("org.ubercraft.sucre.reflect.Reflect", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reflect reflect0 = Reflect.METHODS;
      Class<FieldReflectorFactory> class0 = FieldReflectorFactory.class;
      reflect0.preCache(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<FieldReflectorFactory> class0 = FieldReflectorFactory.class;
      Reflect reflect0 = new Reflect(class0);
      // Undeclared exception!
      try { 
        reflect0.FIELDS.unCache((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reflect reflect0 = new Reflect((Class<? extends ReflectorFactory>) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reflect0.setReflectorFactoryClass(class0, (Class<? extends ReflectorFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<FieldReflectorFactory> class0 = FieldReflectorFactory.class;
      Reflect reflect0 = new Reflect();
      // Undeclared exception!
      try { 
        reflect0.setReflectorFactoryClass((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type cannot be null
         //
         verifyException("org.ubercraft.sucre.common.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reflect reflect0 = Reflect.FIELDS;
      // Undeclared exception!
      try { 
        reflect0.getReflector((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type cannot be null
         //
         verifyException("org.ubercraft.sucre.common.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reflect reflect0 = Reflect.METHODS;
      Class<Object> class0 = Object.class;
      Reflector reflector0 = reflect0.getReflector(class0);
      reflect0.clearCache();
      Reflector reflector1 = reflect0.getReflector(class0);
      assertNotSame(reflector1, reflector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reflect reflect0 = Reflect.METHODS;
      Class<Object> class0 = Object.class;
      Reflector reflector0 = reflect0.getReflector(class0);
      Reflector reflector1 = reflect0.getReflector(class0);
      assertSame(reflector1, reflector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reflect reflect0 = Reflect.METHODS;
      Class<Object> class0 = Object.class;
      Class<FieldReflectorFactory> class1 = FieldReflectorFactory.class;
      reflect0.setReflectorFactoryClass(class0, class1);
      Reflector reflector0 = reflect0.getReflector(class0);
      assertNotNull(reflector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<FieldReflectorFactory> class0 = FieldReflectorFactory.class;
      Reflect reflect0 = new Reflect((Class<? extends ReflectorFactory>) null);
      // Undeclared exception!
      try { 
        reflect0.preCache(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to create reflector for type: org.ubercraft.sucre.reflect.FieldReflectorFactory
         //
         verifyException("org.ubercraft.sucre.reflect.Reflect", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reflect reflect0 = new Reflect();
      // Undeclared exception!
      try { 
        reflect0.preCache((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type cannot be null
         //
         verifyException("org.ubercraft.sucre.common.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reflect reflect0 = Reflect.METHODS;
      Class<Object> class0 = Object.class;
      reflect0.unCache(class0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reflect reflect0 = new Reflect((Class<? extends ReflectorFactory>) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        reflect0.getReflector(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to create reflector for type: java.lang.Object
         //
         verifyException("org.ubercraft.sucre.reflect.Reflect", e);
      }
  }
}
