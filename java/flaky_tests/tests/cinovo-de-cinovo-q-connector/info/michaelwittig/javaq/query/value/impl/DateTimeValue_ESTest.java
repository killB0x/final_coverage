/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:01:56 GMT 2022
 */

package info.michaelwittig.javaq.query.value.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import info.michaelwittig.javaq.query.value.impl.DateTimeValue;
import info.michaelwittig.javaq.query.value.impl.ListValue;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeValue_ESTest extends DateTimeValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      List<Date> list0 = linkedList0.subList(0, 0);
      linkedList0.push((Date) null);
      // Undeclared exception!
      try { 
        DateTimeValue.froms((Collection<Date>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeValue.froms((Collection<Date>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.value.impl.DateTimeValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeValue dateTimeValue0 = DateTimeValue.from((Date) null);
      String string0 = dateTimeValue0.toQ();
      assertEquals("0Nz", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DateTimeValue dateTimeValue0 = DateTimeValue.from(mockDate0);
      String string0 = dateTimeValue0.toQ();
      assertEquals("2014.02.14T20:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashSet<Date> linkedHashSet0 = new LinkedHashSet<Date>();
      ListValue<Date, TypeList<Date, Type<Date>>> listValue0 = DateTimeValue.froms((Collection<Date>) linkedHashSet0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      ListValue<Date, TypeList<Date, Type<Date>>> listValue0 = DateTimeValue.froms(dateArray0);
      assertNotNull(listValue0);
  }
}
