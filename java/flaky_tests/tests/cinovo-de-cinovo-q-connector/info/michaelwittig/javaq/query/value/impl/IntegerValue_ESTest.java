/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:12:41 GMT 2022
 */

package info.michaelwittig.javaq.query.value.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import info.michaelwittig.javaq.query.value.impl.IntegerValue;
import info.michaelwittig.javaq.query.value.impl.ListValue;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerValue_ESTest extends IntegerValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListValue<Integer, TypeList<Integer, Type<Integer>>> listValue0 = IntegerValue.froms((Collection<Integer>) linkedList0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerValue integerValue0 = IntegerValue.from((Integer) null);
      String string0 = integerValue0.toQ();
      assertEquals("0N", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(3935);
      IntegerValue integerValue0 = IntegerValue.from(integer0);
      String string0 = integerValue0.toQ();
      assertEquals("3935", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ListValue<Integer, TypeList<Integer, Type<Integer>>> listValue0 = IntegerValue.froms(integerArray0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerValue.froms((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.value.impl.IntegerValue", e);
      }
  }
}
