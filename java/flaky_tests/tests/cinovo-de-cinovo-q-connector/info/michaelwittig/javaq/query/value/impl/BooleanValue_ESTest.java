/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:02:53 GMT 2022
 */

package info.michaelwittig.javaq.query.value.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import info.michaelwittig.javaq.query.value.impl.BooleanValue;
import info.michaelwittig.javaq.query.value.impl.ListValue;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BooleanValue_ESTest extends BooleanValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add(boolean0);
      List<Boolean> list0 = linkedList0.subList(0, 1);
      linkedList0.poll();
      // Undeclared exception!
      try { 
        BooleanValue.froms((Collection<Boolean>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanValue.froms((Collection<Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.value.impl.BooleanValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BooleanValue booleanValue0 = BooleanValue.from((Boolean) null);
      String string0 = booleanValue0.toQ();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      BooleanValue booleanValue0 = BooleanValue.from(boolean0);
      String string0 = booleanValue0.toQ();
      assertEquals("1b", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ListValue<Boolean, TypeList<Boolean, Type<Boolean>>> listValue0 = BooleanValue.froms((Collection<Boolean>) linkedList0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ListValue<Boolean, TypeList<Boolean, Type<Boolean>>> listValue0 = BooleanValue.froms((Boolean[]) null);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      BooleanValue booleanValue0 = BooleanValue.from(boolean0);
      String string0 = booleanValue0.toQ();
      assertEquals("0b", string0);
  }
}
