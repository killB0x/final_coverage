/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:54:51 GMT 2022
 */

package info.michaelwittig.javaq.query.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.Select;
import info.michaelwittig.javaq.query.Table;
import info.michaelwittig.javaq.query.column.AggregateColumn;
import info.michaelwittig.javaq.query.column.Column;
import info.michaelwittig.javaq.query.column.impl.DateColumn;
import info.michaelwittig.javaq.query.column.impl.TimeColumn;
import info.michaelwittig.javaq.query.filter.Filter;
import info.michaelwittig.javaq.query.group.Group;
import info.michaelwittig.javaq.query.impl.SelectImpl;
import info.michaelwittig.javaq.query.type.impl.TypeTime;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SelectImpl_ESTest extends SelectImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(table0).toString();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Table table1 = select0.getTable();
      assertNull(table1.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.start(0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getRowNumber();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.start(1);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getRowNumber();
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      selectImpl_SelectBuilderImpl0.start((-604));
      Integer integer0 = select0.getRowNumber();
      assertEquals((-604), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.limit(5107);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getNumberOfRows();
      assertEquals(5107, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.limit((-1));
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getNumberOfRows();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      TimeColumn timeColumn0 = new TimeColumn("H&6^<K:U7G[h=P");
      AggregateColumn<TypeTime> aggregateColumn0 = timeColumn0.min();
      Filter filter0 = timeColumn0.filterSmallerOrEqualThan((Column<TypeTime>) aggregateColumn0);
      selectImpl_SelectBuilderImpl0.filter(filter0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      List<Filter> list0 = select0.getFilters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      TimeColumn timeColumn0 = new TimeColumn("H&6^<K:U7G[h=P");
      selectImpl_SelectBuilderImpl0.column(timeColumn0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      List<Column<?>> list0 = select0.getColumns();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      DateColumn dateColumn0 = new DateColumn("FEn*lENDPRye0y");
      selectImpl_SelectBuilderImpl0.column(dateColumn0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select FEn*lENDPRye0y from null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn("notEqua").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      TimeColumn timeColumn0 = new TimeColumn("notEqua");
      AggregateColumn<TypeTime> aggregateColumn0 = timeColumn0.sum();
      Filter filter0 = timeColumn0.filterGreaterThan((Column<TypeTime>) aggregateColumn0);
      selectImpl_SelectBuilderImpl0.filter(filter0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select from notEqua where notEqua>sum notEqua", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn("R(").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.filter((Filter) null);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      // Undeclared exception!
      try { 
        ((SelectImpl) select0).toQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.impl.SelectImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn("R(").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.limit(0);
      selectImpl_SelectBuilderImpl0.start(0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select[0 0] from R(", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn(")3Lg").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      DateColumn dateColumn0 = new DateColumn("info.michaelwittig.javaq.query.impl.SelectImpl$SelectBuilderImpl$1");
      selectImpl_SelectBuilderImpl0.limit((-1));
      Select.Sort.Direction select_Sort_Direction0 = Select.Sort.Direction.descending;
      selectImpl_SelectBuilderImpl0.order(select_Sort_Direction0, dateColumn0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select[-1;>info.michaelwittig.javaq.query.impl.SelectImpl$SelectBuilderImpl$1] from )3Lg", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn("R(").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.limit(0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select[0] from R(", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      doReturn(")3Lg").when(table0).toQ();
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      DateColumn dateColumn0 = new DateColumn("info.michaelwittig.javaq.query.impl.SelectImpl$SelectBuilderImpl$1");
      Select.Sort.Direction select_Sort_Direction0 = Select.Sort.Direction.descending;
      selectImpl_SelectBuilderImpl0.order(select_Sort_Direction0, dateColumn0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      String string0 = ((SelectImpl) select0).toQ();
      assertEquals("select[>info.michaelwittig.javaq.query.impl.SelectImpl$SelectBuilderImpl$1] from )3Lg", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      selectImpl_SelectBuilderImpl0.limit(0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getNumberOfRows();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      DateColumn dateColumn0 = new DateColumn("info.michaelwittig.javaq.query.impl.SelectImpl$SelectBuilderImpl$1");
      Select.Sort.Direction select_Sort_Direction0 = Select.Sort.Direction.descending;
      selectImpl_SelectBuilderImpl0.order(select_Sort_Direction0, dateColumn0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Select.Sort select_Sort0 = select0.getSortColmn();
      assertNotNull(select_Sort0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getNumberOfRows();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Integer integer0 = select0.getRowNumber();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      List<Filter> list0 = select0.getFilters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      List<Group> list0 = select0.getGroups();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      List<Column<?>> list0 = select0.getColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Table table0 = mock(Table.class, new ViolatedAssumptionAnswer());
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl(table0);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Select.Sort select_Sort0 = select0.getSortColmn();
      assertNull(select_Sort0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SelectImpl.SelectBuilderImpl selectImpl_SelectBuilderImpl0 = new SelectImpl.SelectBuilderImpl((Table) null);
      Select select0 = selectImpl_SelectBuilderImpl0.build();
      Table table0 = select0.getTable();
      assertNull(table0);
  }
}
