/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 22:52:46 GMT 2022
 */

package info.michaelwittig.javaq.connector.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.connector.impl.CResultHelper;
import info.michaelwittig.javaq.query.Result;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CResultHelper_ESTest extends CResultHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Result result0 = CResultHelper.convert(mockDate0);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Date date0 = new Date(0L);
      Result result0 = CResultHelper.convert(date0);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      Result result0 = CResultHelper.convert(time0);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object object0 = new Object();
      try { 
        CResultHelper.convert(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unsupported sync result type: class java.lang.Object
         //
         verifyException("info.michaelwittig.javaq.connector.impl.CResultHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      Result result0 = CResultHelper.convert(timestamp0);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Long long0 = new Long((-783L));
      Result result0 = CResultHelper.convert(long0);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Result result0 = CResultHelper.convert((Object) null);
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Result result0 = CResultHelper.convert("h[xp.AV;Ai((l");
      assertNotNull(result0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CResultHelper cResultHelper0 = new CResultHelper();
  }
}
