/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:55:01 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.ParameterizedHeader;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterizedHeader_ESTest extends ParameterizedHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("");
      String string0 = parameterizedHeader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString(", ");
      Map<String, String> map0 = parameterizedHeader0.parameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString(", ");
      List<String> list0 = parameterizedHeader0.parameterNames();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("%OAh`N3");
      String string0 = parameterizedHeader0.parameter("%OAh`N3", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("aEo~C-VU=\"e");
      String string0 = parameterizedHeader0.parameter("aEo~C-VU=\"e");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("z,i");
      Map<String, String> map0 = parameterizedHeader0.parameters();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("aEo~C-VU=\"e");
      ParameterizedHeader parameterizedHeader1 = ParameterizedHeader.fromString("$VALUES");
      boolean boolean0 = parameterizedHeader0.equals(parameterizedHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString(", ");
      boolean boolean0 = parameterizedHeader0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("aEo~C-VU=\"e");
      boolean boolean0 = parameterizedHeader0.equals(parameterizedHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("aEo~C-VU=\"e");
      boolean boolean0 = parameterizedHeader0.equals("aEo~C-VU=\"e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeader.fromString("Q=j& d70[4|7yTx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got character code 91 ([) while parsing parameter value
         //
         verifyException("io.muserver.ParameterizedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeader.fromString("D=,r|{zJTJF[(kHx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 123 while in PARAM_NAME
         //
         verifyException("io.muserver.ParameterizedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("C!*=\"^=X}]\"");
      assertNotNull(parameterizedHeader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeader.fromString("A= ec!vHXv>iH~9o ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got character code 62 (>) while parsing parameter value
         //
         verifyException("io.muserver.ParameterizedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeader.fromString("=j+4%Y0b$UDe%^GCb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nameless values not allowed
         //
         verifyException("io.muserver.ParameterizedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("O+HH~,7HrIMCs");
      String string0 = parameterizedHeader0.toString();
      assertEquals("O+HH~, 7HrIMCs", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("");
      String string0 = parameterizedHeader0.parameter((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString((String) null);
      assertNotNull(parameterizedHeader0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("+W");
      boolean boolean0 = parameterizedHeader0.hasParameter("+W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("&=4bX0H|pmN3");
      boolean boolean0 = parameterizedHeader0.hasParameter("r]iM0J5eZp(&C&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("&=4bX0H|pmN3");
      String string0 = parameterizedHeader0.toString();
      assertEquals("&=4bX0H|pmN3", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("aEo~C-VU=\"e");
      parameterizedHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString(", ");
      String string0 = parameterizedHeader0.parameter((String) null, ", ");
      assertEquals(", ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("&=4bX0H|pmN3");
      List<String> list0 = parameterizedHeader0.parameterNames();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParameterizedHeader parameterizedHeader0 = ParameterizedHeader.fromString("&=4bX0H|pmN3");
      String string0 = parameterizedHeader0.parameter("&");
      assertEquals("4bX0H|pmN3", string0);
  }
}
