/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:45:48 GMT 2022
 */

package io.muserver.handlers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.Method;
import io.muserver.handlers.CORSHandler;
import io.muserver.handlers.CORSHandlerBuilder;
import io.muserver.rest.CORSConfig;
import io.muserver.rest.CORSConfigBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CORSHandlerBuilder_ESTest extends CORSHandlerBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      // Undeclared exception!
      try { 
        cORSHandlerBuilder0.withCORSConfig((CORSConfig) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // corsConfig cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = new CORSHandlerBuilder();
      // Undeclared exception!
      try { 
        cORSHandlerBuilder0.withCORSConfig((CORSConfigBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.handlers.CORSHandlerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      Method[] methodArray0 = new Method[1];
      CORSHandlerBuilder cORSHandlerBuilder1 = cORSHandlerBuilder0.withAllowedMethods(methodArray0);
      // Undeclared exception!
      try { 
        cORSHandlerBuilder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You must specify the CORS config
         //
         verifyException("io.muserver.handlers.CORSHandlerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      // Undeclared exception!
      try { 
        cORSHandlerBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You must specify the CORS config
         //
         verifyException("io.muserver.handlers.CORSHandlerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      CORSHandlerBuilder cORSHandlerBuilder1 = cORSHandlerBuilder0.withAllowedMethods((Method[]) null);
      assertSame(cORSHandlerBuilder1, cORSHandlerBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      Method[] methodArray0 = new Method[0];
      cORSHandlerBuilder0.withAllowedMethods(methodArray0);
      // Undeclared exception!
      try { 
        cORSHandlerBuilder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You must specify the CORS config
         //
         verifyException("io.muserver.handlers.CORSHandlerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      CORSConfigBuilder cORSConfigBuilder0 = CORSConfigBuilder.disabled();
      CORSHandlerBuilder cORSHandlerBuilder1 = cORSHandlerBuilder0.withCORSConfig(cORSConfigBuilder0);
      assertSame(cORSHandlerBuilder0, cORSHandlerBuilder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CORSConfigBuilder cORSConfigBuilder0 = CORSHandlerBuilder.config();
      assertNotNull(cORSConfigBuilder0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CORSHandlerBuilder cORSHandlerBuilder0 = CORSHandlerBuilder.corsHandler();
      CORSConfigBuilder cORSConfigBuilder0 = CORSConfigBuilder.disabled();
      CORSConfig cORSConfig0 = cORSConfigBuilder0.build();
      CORSHandlerBuilder cORSHandlerBuilder1 = cORSHandlerBuilder0.withCORSConfig(cORSConfig0);
      CORSHandler cORSHandler0 = cORSHandlerBuilder1.build();
      assertNotNull(cORSHandler0);
  }
}
