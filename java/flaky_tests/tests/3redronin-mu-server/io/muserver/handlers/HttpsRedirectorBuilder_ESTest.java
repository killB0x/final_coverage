/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:13:19 GMT 2022
 */

package io.muserver.handlers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.handlers.HttpsRedirector;
import io.muserver.handlers.HttpsRedirectorBuilder;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpsRedirectorBuilder_ESTest extends HttpsRedirectorBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = HttpsRedirectorBuilder.toHttpsPort(1);
      HttpsRedirectorBuilder httpsRedirectorBuilder1 = httpsRedirectorBuilder0.withPort(1);
      assertSame(httpsRedirectorBuilder1, httpsRedirectorBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = HttpsRedirectorBuilder.toHttpsPort((-479));
      // Undeclared exception!
      try { 
        httpsRedirectorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The HTTPS port to redirect to should be a positive number
         //
         verifyException("io.muserver.handlers.HttpsRedirectorBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = HttpsRedirectorBuilder.toHttpsPort(222);
      HttpsRedirector httpsRedirector0 = httpsRedirectorBuilder0.build();
      assertNotNull(httpsRedirector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = HttpsRedirectorBuilder.toHttpsPort((-479));
      HttpsRedirectorBuilder httpsRedirectorBuilder1 = httpsRedirectorBuilder0.includeSubDomains(false);
      assertSame(httpsRedirectorBuilder0, httpsRedirectorBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = new HttpsRedirectorBuilder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      HttpsRedirectorBuilder httpsRedirectorBuilder1 = httpsRedirectorBuilder0.withHSTSExpireTime((-4789), timeUnit0);
      assertSame(httpsRedirectorBuilder1, httpsRedirectorBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HttpsRedirectorBuilder httpsRedirectorBuilder0 = new HttpsRedirectorBuilder();
      HttpsRedirectorBuilder httpsRedirectorBuilder1 = httpsRedirectorBuilder0.withHSTSPreload(false);
      assertSame(httpsRedirectorBuilder1, httpsRedirectorBuilder0);
  }
}
