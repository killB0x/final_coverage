/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:52:48 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.AsyncHandle;
import io.muserver.AsyncSsePublisherImpl;
import io.muserver.ResponseCompleteListener;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsyncSsePublisherImpl_ESTest extends AsyncSsePublisherImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncSsePublisherImpl0.setClientReconnectTime((-2764L), timeUnit0);
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      asyncSsePublisherImpl0.send("4=;c/z!0c=", "The SSE stream was already closed", "");
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      asyncSsePublisherImpl0.send("The declared content length for ");
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      assertFalse(asyncSsePublisherImpl0.isClosed());
      
      asyncSsePublisherImpl0.close();
      boolean boolean0 = asyncSsePublisherImpl0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.setResponseCompleteHandler((ResponseCompleteListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.sendComment("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.sendComment("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE Comments cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.send("NRR\"", "(\r\n)|[\r\n]", "(\r\n)|[\r\n]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE IDs cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.send((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.send("\r", "\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE event names cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      assertFalse(asyncSsePublisherImpl0.isClosed());
      
      asyncSsePublisherImpl0.close();
      asyncSsePublisherImpl0.close();
      assertTrue(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      assertFalse(asyncSsePublisherImpl0.isClosed());
      
      asyncSsePublisherImpl0.close();
      asyncSsePublisherImpl0.send("c*bC", "c*bC");
      assertTrue(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      asyncSsePublisherImpl0.send("", "l7?R 1;");
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      ResponseCompleteListener responseCompleteListener0 = mock(ResponseCompleteListener.class, new ViolatedAssumptionAnswer());
      asyncSsePublisherImpl0.setResponseCompleteHandler(responseCompleteListener0);
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.setClientReconnectTime(2167L, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.send(">,R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      boolean boolean0 = asyncSsePublisherImpl0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl(asyncHandle0);
      asyncSsePublisherImpl0.sendComment("Error while reading body");
      assertFalse(asyncSsePublisherImpl0.isClosed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AsyncSsePublisherImpl asyncSsePublisherImpl0 = new AsyncSsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        asyncSsePublisherImpl0.send("4{M @ ", "4{M @ ", "4{M @ ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.AsyncSsePublisherImpl", e);
      }
  }
}
