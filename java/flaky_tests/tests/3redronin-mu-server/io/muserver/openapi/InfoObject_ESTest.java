/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:22:54 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ContactObject;
import io.muserver.openapi.InfoObject;
import io.muserver.openapi.LicenseObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InfoObject_ESTest extends InfoObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.create("name");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("name", (String) null, uRI0, (ContactObject) null, licenseObject0, "");
      StringWriter stringWriter0 = new StringWriter();
      infoObject0.writeJson(stringWriter0);
      assertEquals("", infoObject0.version());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.create("name");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("name", "name", uRI0, (ContactObject) null, licenseObject0, "");
      String string0 = infoObject0.version();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ContactObject contactObject0 = new ContactObject("", uRI0, "JD@zY`");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("", "", uRI0, contactObject0, licenseObject0, "");
      String string0 = infoObject0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.URI("aeAELP", "aeAELP", "");
      LicenseObject licenseObject0 = new LicenseObject("G>Yv", uRI0);
      InfoObject infoObject0 = new InfoObject("G>Yv", "G=P", uRI0, (ContactObject) null, licenseObject0, "G=P");
      URI uRI1 = infoObject0.termsOfService();
      assertEquals("G=P", infoObject0.description());
      assertEquals("G=P", infoObject0.version());
      assertNotNull(uRI1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.create("name");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("name", "name", uRI0, (ContactObject) null, licenseObject0, "");
      URI uRI1 = infoObject0.termsOfService();
      assertEquals("", infoObject0.version());
      assertNotNull(uRI1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.create("name");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("name", "name", uRI0, (ContactObject) null, licenseObject0, "");
      LicenseObject licenseObject1 = infoObject0.license();
      assertNotNull(licenseObject1);
      assertEquals("", infoObject0.version());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.create("name");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("name", (String) null, uRI0, (ContactObject) null, licenseObject0, "");
      String string0 = infoObject0.description();
      assertNull(string0);
      assertEquals("", infoObject0.version());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("yJeNh.>", (URI) null);
      InfoObject infoObject0 = new InfoObject("", "", (URI) null, (ContactObject) null, licenseObject0, "R@[c9Z");
      String string0 = infoObject0.description();
      assertEquals("", string0);
      assertEquals("R@[c9Z", infoObject0.version());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("", (URI) null);
      ContactObject contactObject0 = new ContactObject("", (URI) null, "@?nW'#9");
      InfoObject infoObject0 = new InfoObject("", "", (URI) null, contactObject0, licenseObject0, "woZ1?6z!w-0<KU{");
      ContactObject contactObject1 = infoObject0.contact();
      assertNotNull(contactObject1);
      assertEquals("woZ1?6z!w-0<KU{", infoObject0.version());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("&JzsEyRX", (URI) null);
      InfoObject infoObject0 = new InfoObject("&JzsEyRX", "&JzsEyRX", (URI) null, (ContactObject) null, licenseObject0, "&JzsEyRX");
      // Undeclared exception!
      try { 
        infoObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.InfoObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("description", (URI) null);
      InfoObject infoObject0 = null;
      try {
        infoObject0 = new InfoObject("description", (String) null, (URI) null, (ContactObject) null, licenseObject0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // version cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("descrption", (URI) null);
      InfoObject infoObject0 = new InfoObject("io.muserver.openapi.LicenseObject", "descrption", (URI) null, (ContactObject) null, licenseObject0, "io.muserver.openapi.LicenseObject");
      String string0 = infoObject0.description();
      assertEquals("io.muserver.openapi.LicenseObject", infoObject0.version());
      assertEquals("descrption", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("descrption", (URI) null);
      InfoObject infoObject0 = new InfoObject("io.muserver.openapi.LicenseObject", "descrption", (URI) null, (ContactObject) null, licenseObject0, "io.muserver.openapi.LicenseObject");
      String string0 = infoObject0.title();
      assertNotNull(string0);
      assertEquals("io.muserver.openapi.LicenseObject", infoObject0.version());
      assertEquals("descrption", infoObject0.description());
      assertEquals("io.muserver.openapi.LicenseObject", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.URI("aeAELP", "aeAELP", "");
      LicenseObject licenseObject0 = new LicenseObject("G>Yv", uRI0);
      InfoObject infoObject0 = new InfoObject("G>Yv", "G=P", uRI0, (ContactObject) null, licenseObject0, "G=P");
      String string0 = infoObject0.version();
      assertEquals("G=P", infoObject0.description());
      assertNotNull(string0);
      assertEquals("G=P", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("XOBC1a26Wno_a", (URI) null);
      InfoObject infoObject0 = new InfoObject("'R['c.Vc[", "'R['c.Vc[", (URI) null, (ContactObject) null, licenseObject0, "");
      infoObject0.contact();
      assertEquals("", infoObject0.version());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LicenseObject licenseObject0 = new LicenseObject("des@VRcription", (URI) null);
      InfoObject infoObject0 = new InfoObject("des@VRcription", "des@VRcription", (URI) null, (ContactObject) null, licenseObject0, "des@VRcription");
      URI uRI0 = infoObject0.termsOfService();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.URI("fIz;7?0q)E.0]c6(", "contact", "", "", "contact");
      InfoObject infoObject0 = new InfoObject("XOBC1a26Wno_,", "", uRI0, (ContactObject) null, (LicenseObject) null, "fIz;7?0q)E.0]c6(");
      infoObject0.license();
      assertEquals("fIz;7?0q)E.0]c6(", infoObject0.version());
      assertEquals("", infoObject0.description());
  }
}
