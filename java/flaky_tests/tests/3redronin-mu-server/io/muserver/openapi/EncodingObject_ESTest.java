/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:55:47 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.EncodingObject;
import io.muserver.openapi.HeaderObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncodingObject_ESTest extends EncodingObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncodingObject encodingObject0 = new EncodingObject((String) null, (Map<String, HeaderObject>) null, (String) null, true, false);
      boolean boolean0 = encodingObject0.allowReserved();
      assertFalse(boolean0);
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject((String) null, hashMap0, (String) null, true, false);
      boolean boolean0 = encodingObject0.explode();
      assertFalse(encodingObject0.allowReserved);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("fr", hashMap0, "label", true, false);
      StringWriter stringWriter0 = new StringWriter();
      encodingObject0.writeJson(stringWriter0);
      assertFalse(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
      assertEquals("label", encodingObject0.style());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject((String) null, hashMap0, (String) null, true, true);
      encodingObject0.style();
      assertTrue(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncodingObject encodingObject0 = new EncodingObject((String) null, (Map<String, HeaderObject>) null, (String) null, true, false);
      encodingObject0.headers();
      assertFalse(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      hashMap0.put("{%% 9;o,DAtUr", (HeaderObject) null);
      EncodingObject encodingObject0 = new EncodingObject("fr", hashMap0, "label", true, false);
      Map<String, HeaderObject> map0 = encodingObject0.headers();
      assertTrue(encodingObject0.explode);
      assertNotNull(map0);
      assertEquals("label", encodingObject0.style());
      assertFalse(encodingObject0.allowReserved);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject((String) null, hashMap0, (String) null, true, true);
      encodingObject0.contentType();
      assertTrue(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("fr", hashMap0, "label", true, false);
      String string0 = encodingObject0.contentType();
      assertNotNull(string0);
      assertEquals("label", encodingObject0.style());
      assertFalse(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
      assertEquals("fr", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("((8Z}P#", hashMap0, (String) null, true, true);
      boolean boolean0 = encodingObject0.allowReserved();
      assertTrue(encodingObject0.explode);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject((String) null, hashMap0, (String) null, true, true);
      // Undeclared exception!
      try { 
        encodingObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.EncodingObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = null;
      try {
        encodingObject0 = new EncodingObject("boolean", hashMap0, "boolean", false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'style' must be one of [matrix, label, form, simple, spaceDelimited, pipeDelimited, deepObject] but was boolean
         //
         verifyException("io.muserver.openapi.EncodingObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject((String) null, hashMap0, (String) null, false, false);
      boolean boolean0 = encodingObject0.explode();
      assertFalse(encodingObject0.allowReserved);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("fr", hashMap0, "label", true, false);
      Map<String, HeaderObject> map0 = encodingObject0.headers();
      assertTrue(encodingObject0.explode);
      assertFalse(encodingObject0.allowReserved);
      assertNotNull(map0);
      assertEquals("label", encodingObject0.style());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("fr", hashMap0, "label", true, false);
      String string0 = encodingObject0.style();
      assertTrue(encodingObject0.explode);
      assertNotNull(string0);
      assertEquals("label", string0);
      assertFalse(encodingObject0.allowReserved);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("", hashMap0, "label", false, true);
      String string0 = encodingObject0.contentType();
      assertFalse(encodingObject0.explode);
      assertTrue(encodingObject0.allowReserved);
      assertEquals("label", encodingObject0.style());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObject encodingObject0 = new EncodingObject("", hashMap0, "label", false, true);
      StringWriter stringWriter0 = new StringWriter();
      encodingObject0.writeJson(stringWriter0);
      assertEquals("label", encodingObject0.style());
      assertFalse(encodingObject0.explode);
      assertTrue(encodingObject0.allowReserved);
  }
}
