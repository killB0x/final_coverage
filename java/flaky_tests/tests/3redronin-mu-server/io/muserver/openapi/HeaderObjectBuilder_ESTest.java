/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:20:07 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.HeaderObjectBuilder;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.SchemaObject;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeaderObjectBuilder_ESTest extends HeaderObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = new HeaderObjectBuilder();
      headerObjectBuilder0.withRequired(true);
      HeaderObject headerObject0 = headerObjectBuilder0.build();
      assertTrue(headerObject0.required());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = HeaderObjectBuilder.headerObject();
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withContent(hashMap0);
      // Undeclared exception!
      try { 
        headerObjectBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'content', when specified, must have a single value only, but was {}
         //
         verifyException("io.muserver.openapi.HeaderObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = HeaderObjectBuilder.headerObject();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withSchema((SchemaObject) null);
      assertSame(headerObjectBuilder0, headerObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = new HeaderObjectBuilder();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withExample(headerObjectBuilder0);
      assertSame(headerObjectBuilder1, headerObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = new HeaderObjectBuilder();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withExplode("io.muserver.openapi.HeaderObjectBuilder");
      assertSame(headerObjectBuilder0, headerObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = HeaderObjectBuilder.headerObject();
      Boolean boolean0 = Boolean.FALSE;
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withDeprecated(boolean0);
      assertSame(headerObjectBuilder1, headerObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = HeaderObjectBuilder.headerObject();
      HashMap<String, ExampleObject> hashMap0 = new HashMap<String, ExampleObject>();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withExamples(hashMap0);
      assertSame(headerObjectBuilder1, headerObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = new HeaderObjectBuilder();
      HeaderObject headerObject0 = headerObjectBuilder0.build();
      assertNull(headerObject0.explode());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = new HeaderObjectBuilder();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withStyle("io.muserver.openapi.HeaderObjectBuilder");
      assertSame(headerObjectBuilder0, headerObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HeaderObjectBuilder headerObjectBuilder0 = HeaderObjectBuilder.headerObject();
      HeaderObjectBuilder headerObjectBuilder1 = headerObjectBuilder0.withDescription("c^c}W.N5z:|+");
      assertSame(headerObjectBuilder0, headerObjectBuilder1);
  }
}
