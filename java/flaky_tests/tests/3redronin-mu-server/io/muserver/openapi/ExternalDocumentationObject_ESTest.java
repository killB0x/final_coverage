/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:28:44 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ExternalDocumentationObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalDocumentationObject_ESTest extends ExternalDocumentationObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.URI("io.muserver.openapi.ExternalDocumentationObject", "io.muserver.openapi.ExternalDocumentationObject", "f.%e(PS1.");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("description", uRI0);
      URI uRI1 = externalDocumentationObject0.url();
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      URI uRI1 = externalDocumentationObject0.url();
      assertSame(uRI0, uRI1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject((String) null, uRI0);
      String string0 = externalDocumentationObject0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      URI uRI0 = MockURI.URI("fy-i0B", "fy-i0B", "J6/Td:,&V.*$&`xO");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("J6/Td:,&V.*$&`xO", uRI0);
      String string0 = externalDocumentationObject0.description();
      assertEquals("J6/Td:,&V.*$&`xO", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject((String) null, uRI0);
      // Undeclared exception!
      try { 
        externalDocumentationObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ExternalDocumentationObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExternalDocumentationObject externalDocumentationObject0 = null;
      try {
        externalDocumentationObject0 = new ExternalDocumentationObject("", (URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // url cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.URI("io.muserver.openapi.ExternalDocumentationObject", "io.muserver.openapi.ExternalDocumentationObject", "f.%e(PS1.");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("description", uRI0);
      StringWriter stringWriter0 = new StringWriter();
      externalDocumentationObject0.writeJson(stringWriter0);
      assertEquals("description", externalDocumentationObject0.description());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      String string0 = externalDocumentationObject0.description();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      URI uRI0 = MockURI.URI("description", (String) null, "description", 0, (String) null, "k'%5qWG", "k'%5qWG");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("description", uRI0);
      URI uRI1 = externalDocumentationObject0.url();
      assertEquals("description", uRI1.getHost());
  }
}
