/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:37:17 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.DiscriminatorObject;
import io.muserver.openapi.DiscriminatorObjectBuilder;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscriminatorObjectBuilder_ESTest extends DiscriminatorObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiscriminatorObjectBuilder discriminatorObjectBuilder0 = DiscriminatorObjectBuilder.discriminatorObject();
      discriminatorObjectBuilder0.withPropertyName("?3aeL4iCgx}O c$r");
      DiscriminatorObject discriminatorObject0 = discriminatorObjectBuilder0.build();
      assertEquals("?3aeL4iCgx}O c$r", discriminatorObject0.propertyName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiscriminatorObjectBuilder discriminatorObjectBuilder0 = DiscriminatorObjectBuilder.discriminatorObject();
      // Undeclared exception!
      try { 
        discriminatorObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiscriminatorObjectBuilder discriminatorObjectBuilder0 = new DiscriminatorObjectBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DiscriminatorObjectBuilder discriminatorObjectBuilder1 = discriminatorObjectBuilder0.withMapping(hashMap0);
      assertSame(discriminatorObjectBuilder1, discriminatorObjectBuilder0);
  }
}
