/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:11:43 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.ResponseObjectBuilder;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ResponseObjectBuilder_ESTest extends ResponseObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = new ResponseObjectBuilder();
      ResponseObjectBuilder responseObjectBuilder1 = responseObjectBuilder0.withDescription("H>49EV\"IW{b");
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      ResponseObject responseObject0 = responseObjectBuilder1.build();
      ResponseObject responseObject1 = new ResponseObject("H>49EV\"IW{b", hashMap0, (Map<String, MediaTypeObject>) null, (Map<String, LinkObject>) null);
      ResponseObjectBuilder responseObjectBuilder2 = ResponseObjectBuilder.mergeResponses(responseObject1, responseObject0);
      assertNotSame(responseObjectBuilder0, responseObjectBuilder2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>(2046);
      ResponseObject responseObject0 = mock(ResponseObject.class, new ViolatedAssumptionAnswer());
      doReturn((Map<String, MediaTypeObject>) null, hashMap1, (Map<String, MediaTypeObject>) null).when(responseObject0).content();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0).when(responseObject0).headers();
      // Undeclared exception!
      try { 
        ResponseObjectBuilder.mergeResponses(responseObject0, responseObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ResponseObjectBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = new ResponseObjectBuilder();
      // Undeclared exception!
      try { 
        responseObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // description cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = new ResponseObjectBuilder();
      ResponseObjectBuilder responseObjectBuilder1 = responseObjectBuilder0.withHeaders((Map<String, HeaderObject>) null);
      assertSame(responseObjectBuilder0, responseObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("", hashMap0, hashMap1, hashMap2);
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.mergeResponses(responseObject0, responseObject0);
      ResponseObjectBuilder responseObjectBuilder1 = responseObjectBuilder0.withContent(hashMap1);
      assertSame(responseObjectBuilder0, responseObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.responseObject();
      ResponseObjectBuilder responseObjectBuilder1 = responseObjectBuilder0.withLinks((Map<String, LinkObject>) null);
      assertSame(responseObjectBuilder1, responseObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      HashMap<String, MediaTypeObject> hashMap2 = new HashMap<String, MediaTypeObject>();
      hashMap1.put("gzy8D#c{vd", (LinkObject) null);
      ResponseObject responseObject0 = new ResponseObject("gzy8D#c{vd", hashMap0, hashMap2, hashMap1);
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.mergeResponses(responseObject0, responseObject0);
      assertNotNull(responseObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      HashMap<String, MediaTypeObject> hashMap2 = new HashMap<String, MediaTypeObject>();
      hashMap2.put("", (MediaTypeObject) null);
      ResponseObject responseObject0 = new ResponseObject("", hashMap0, hashMap2, hashMap1);
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.mergeResponses(responseObject0, responseObject0);
      assertNotNull(responseObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      HashMap<String, MediaTypeObject> hashMap2 = new HashMap<String, MediaTypeObject>();
      ResponseObject responseObject0 = new ResponseObject("gzy8D#c{vd", hashMap0, hashMap2, hashMap1);
      hashMap0.put("gzy8D#c{vd", (HeaderObject) null);
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.mergeResponses(responseObject0, responseObject0);
      assertNotNull(responseObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = new ResponseObjectBuilder();
      ResponseObjectBuilder responseObjectBuilder1 = responseObjectBuilder0.withDescription("'YmMzj@.3w1~ gT9");
      ResponseObject responseObject0 = responseObjectBuilder1.build();
      ResponseObjectBuilder responseObjectBuilder2 = ResponseObjectBuilder.mergeResponses((ResponseObject) null, responseObject0);
      assertNotSame(responseObjectBuilder1, responseObjectBuilder2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseObjectBuilder responseObjectBuilder0 = ResponseObjectBuilder.mergeResponses((ResponseObject) null, (ResponseObject) null);
      assertNotNull(responseObjectBuilder0);
  }
}
