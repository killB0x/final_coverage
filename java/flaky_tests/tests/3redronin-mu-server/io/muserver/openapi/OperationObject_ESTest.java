/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:50:42 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.CallbackObject;
import io.muserver.openapi.ExternalDocumentationObject;
import io.muserver.openapi.OperationObject;
import io.muserver.openapi.ParameterObject;
import io.muserver.openapi.RequestBodyObject;
import io.muserver.openapi.ResponsesObject;
import io.muserver.openapi.SecurityRequirementObject;
import io.muserver.openapi.ServerObject;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperationObject_ESTest extends OperationObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      List<String> list0 = ParameterObject.allowedStyles();
      URI uRI0 = MockURI.aHttpURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("~>6i*QtdH", uRI0);
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<SecurityRequirementObject> linkedList1 = new LinkedList<SecurityRequirementObject>();
      LinkedList<ServerObject> linkedList2 = new LinkedList<ServerObject>();
      OperationObject operationObject0 = null;
      try {
        operationObject0 = new OperationObject(list0, "~>6i*QtdH", "~>6i*QtdH", externalDocumentationObject0, "~>6i*QtdH", linkedList0, (RequestBodyObject) null, (ResponsesObject) null, (Map<String, CallbackObject>) null, boolean0, linkedList1, linkedList2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // responses cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }
}
