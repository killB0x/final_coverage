/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:37:59 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.LinkObjectBuilder;
import io.muserver.openapi.ServerObject;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkObjectBuilder_ESTest extends LinkObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = LinkObjectBuilder.linkObject();
      LinkObjectBuilder linkObjectBuilder1 = linkObjectBuilder0.withServer((ServerObject) null);
      assertSame(linkObjectBuilder1, linkObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = LinkObjectBuilder.linkObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkObjectBuilder linkObjectBuilder1 = linkObjectBuilder0.withParameters(hashMap0);
      assertSame(linkObjectBuilder1, linkObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = LinkObjectBuilder.linkObject();
      LinkObjectBuilder linkObjectBuilder1 = linkObjectBuilder0.withOperationId("_ f,BQ [`");
      assertSame(linkObjectBuilder1, linkObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = new LinkObjectBuilder();
      LinkObject linkObject0 = linkObjectBuilder0.build();
      assertNull(linkObject0.description());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = new LinkObjectBuilder();
      LinkObjectBuilder linkObjectBuilder1 = linkObjectBuilder0.withDescription("");
      assertSame(linkObjectBuilder0, linkObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkObjectBuilder linkObjectBuilder0 = LinkObjectBuilder.linkObject();
      Object object0 = new Object();
      LinkObjectBuilder linkObjectBuilder1 = linkObjectBuilder0.withRequestBody(object0);
      assertSame(linkObjectBuilder0, linkObjectBuilder1);
  }
}
