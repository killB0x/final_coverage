/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:53:47 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ExternalDocumentationObject;
import io.muserver.openapi.TagObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TagObject_ESTest extends TagObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("io.muserver.openapi.Jsonizer", uRI0);
      TagObject tagObject0 = new TagObject("description", "io.muserver.openapi.Jsonizer", externalDocumentationObject0);
      TagObject tagObject1 = new TagObject("description", "", tagObject0.externalDocs);
      boolean boolean0 = tagObject0.equals(tagObject1);
      assertEquals("", tagObject1.description());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      TagObject tagObject0 = new TagObject("", (String) null, externalDocumentationObject0);
      String string0 = tagObject0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("t", uRI0);
      TagObject tagObject0 = new TagObject("4+}J6^#[lW5?De;CjeP", "t", externalDocumentationObject0);
      ExternalDocumentationObject externalDocumentationObject1 = tagObject0.externalDocs();
      assertNotNull(externalDocumentationObject1);
      assertEquals("t", tagObject0.description());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      TagObject tagObject0 = new TagObject("", (String) null, externalDocumentationObject0);
      String string0 = tagObject0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("t", uRI0);
      TagObject tagObject0 = new TagObject("4+}J6^#[lW5?De;CjeP", "t", externalDocumentationObject0);
      String string0 = tagObject0.description();
      assertNotNull(string0);
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TagObject tagObject0 = new TagObject("io.muserver.openapi.TagObject", "io.muserver.openapi.TagObject", (ExternalDocumentationObject) null);
      // Undeclared exception!
      try { 
        tagObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.TagObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TagObject tagObject0 = null;
      try {
        tagObject0 = new TagObject((String) null, (String) null, (ExternalDocumentationObject) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TagObject tagObject0 = new TagObject("io.muserver.openapi.TagObject", "io.muserver.openapi.TagObject", (ExternalDocumentationObject) null);
      boolean boolean0 = tagObject0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      TagObject tagObject0 = new TagObject("", "", externalDocumentationObject0);
      boolean boolean0 = tagObject0.equals(tagObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("V'% Gr", uRI0);
      TagObject tagObject0 = new TagObject("io.muserver.openapi.ExternalDocumentationObject", "0*wZ)|OMKQ_p", externalDocumentationObject0);
      Object object0 = new Object();
      boolean boolean0 = tagObject0.equals(object0);
      assertEquals("0*wZ)|OMKQ_p", tagObject0.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TagObject tagObject0 = new TagObject("V/)8q-~nDKW )U", "", (ExternalDocumentationObject) null);
      String string0 = tagObject0.name();
      assertEquals("", tagObject0.description());
      assertNotNull(string0);
      assertEquals("V/)8q-~nDKW )U", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TagObject tagObject0 = new TagObject("V/)8q-~nDKW )U", "", (ExternalDocumentationObject) null);
      StringWriter stringWriter0 = new StringWriter();
      tagObject0.writeJson(stringWriter0);
      assertEquals("", tagObject0.description());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TagObject tagObject0 = new TagObject("V/)8q-~nDKW )U", "", (ExternalDocumentationObject) null);
      tagObject0.hashCode();
      assertEquals("", tagObject0.description());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TagObject tagObject0 = new TagObject("V/)8q-~nDKW )U", "", (ExternalDocumentationObject) null);
      tagObject0.externalDocs();
      assertEquals("", tagObject0.description());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      ExternalDocumentationObject externalDocumentationObject0 = new ExternalDocumentationObject("", uRI0);
      TagObject tagObject0 = new TagObject("", "", externalDocumentationObject0);
      String string0 = tagObject0.description();
      assertEquals("", string0);
  }
}
