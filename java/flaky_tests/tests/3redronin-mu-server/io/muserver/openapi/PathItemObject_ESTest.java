/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:51:48 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.OperationObject;
import io.muserver.openapi.ParameterObject;
import io.muserver.openapi.PathItemObject;
import io.muserver.openapi.ServerObject;
import io.muserver.openapi.ServerVariableObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathItemObject_ESTest extends PathItemObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("head", "", hashMap0, linkedList0, linkedList1);
      StringWriter stringWriter0 = new StringWriter(39);
      pathItemObject0.writeJson(stringWriter0);
      assertEquals("", pathItemObject0.description());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject((String) null, (String) null, (Map<String, OperationObject>) null, (List<ServerObject>) null, linkedList0);
      String string0 = pathItemObject0.summary();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("", "", hashMap0, (List<ServerObject>) null, linkedList0);
      String string0 = pathItemObject0.summary();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("", "", hashMap0, (List<ServerObject>) null, linkedList0);
      List<ServerObject> list0 = pathItemObject0.servers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("LJ", ", writeOnly=", (Map<String, OperationObject>) null, linkedList0, linkedList1);
      HashMap<String, ServerVariableObject> hashMap0 = new HashMap<String, ServerVariableObject>();
      ServerObject serverObject0 = new ServerObject("_,14+dlkRlJ{", ", writeOnly=", hashMap0);
      linkedList0.add(serverObject0);
      List<ServerObject> list0 = pathItemObject0.servers();
      assertEquals(", writeOnly=", pathItemObject0.description());
      assertNotNull(list0);
      assertTrue(list0.contains(serverObject0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      PathItemObject pathItemObject0 = new PathItemObject("'Yp", "'Yp", hashMap0, (List<ServerObject>) null, (List<ParameterObject>) null);
      List<ParameterObject> list0 = pathItemObject0.parameters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("head", "", hashMap0, linkedList0, linkedList1);
      linkedList1.add((ParameterObject) null);
      List<ParameterObject> list0 = pathItemObject0.parameters();
      assertNotNull(list0);
      assertEquals("", pathItemObject0.description());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject(">H}w3+x*4G", "_-0iOX R", (Map<String, OperationObject>) null, linkedList0, linkedList1);
      pathItemObject0.operations();
      assertEquals("_-0iOX R", pathItemObject0.description());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("$0>2AlmKLR", "$0>2AlmKLR", hashMap0, linkedList0, linkedList1);
      String string0 = pathItemObject0.description();
      assertEquals("$0>2AlmKLR", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("", "", hashMap0, (List<ServerObject>) null, linkedList0);
      String string0 = pathItemObject0.description();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject((String) null, (String) null, hashMap0, (List<ServerObject>) null, linkedList0);
      // Undeclared exception!
      try { 
        pathItemObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.PathItemObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      linkedList0.add((ParameterObject) null);
      PathItemObject pathItemObject0 = null;
      try {
        pathItemObject0 = new PathItemObject((String) null, (String) null, hashMap0, (List<ServerObject>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.PathItemObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("", "", (Map<String, OperationObject>) null, (List<ServerObject>) null, linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      pathItemObject0.writeJson(stringWriter0);
      assertEquals("", pathItemObject0.summary());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      PathItemObject pathItemObject0 = new PathItemObject("mZSr`J", "mZSr`J", hashMap0, (List<ServerObject>) null, (List<ParameterObject>) null);
      hashMap0.put("_EH<", (OperationObject) null);
      Map<String, OperationObject> map0 = pathItemObject0.operations();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("$0>2AlmKLR", "$0>2AlmKLR", hashMap0, linkedList0, linkedList1);
      Map<String, OperationObject> map0 = pathItemObject0.operations();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("explode", (String) null, hashMap0, linkedList0, linkedList1);
      List<ServerObject> list0 = pathItemObject0.servers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("head", "", hashMap0, linkedList0, linkedList1);
      List<ParameterObject> list0 = pathItemObject0.parameters();
      assertEquals("", pathItemObject0.description());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("head", "", hashMap0, linkedList0, linkedList1);
      String string0 = pathItemObject0.summary();
      assertNotNull(string0);
      assertEquals("", pathItemObject0.description());
      assertEquals("head", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, OperationObject> hashMap0 = new HashMap<String, OperationObject>();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      LinkedList<ParameterObject> linkedList1 = new LinkedList<ParameterObject>();
      PathItemObject pathItemObject0 = new PathItemObject("explode", (String) null, hashMap0, linkedList0, linkedList1);
      String string0 = pathItemObject0.description();
      assertNull(string0);
  }
}
