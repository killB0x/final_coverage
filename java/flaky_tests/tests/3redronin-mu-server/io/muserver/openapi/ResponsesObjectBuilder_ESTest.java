/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:15:50 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.ResponsesObject;
import io.muserver.openapi.ResponsesObjectBuilder;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ResponsesObjectBuilder_ESTest extends ResponsesObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ResponsesObjectBuilder.responsesObject();
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      LinkObject linkObject0 = mock(LinkObject.class, new ViolatedAssumptionAnswer());
      hashMap2.put("io.muserver.openapi.ResponsesObjectBuilder", linkObject0);
      ResponseObject responseObject0 = new ResponseObject("io.muserver.openapi.ResponsesObjectBuilder", hashMap0, hashMap1, hashMap2);
      HashMap<String, ResponseObject> hashMap3 = new HashMap<String, ResponseObject>();
      hashMap3.put((String) null, responseObject0);
      ResponsesObject responsesObject0 = mock(ResponsesObject.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap3, hashMap3, (Map) null).when(responsesObject0).httpStatusCodes();
      // Undeclared exception!
      try { 
        ResponsesObjectBuilder.mergeResponses(responsesObject0, responsesObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ResponsesObjectBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      hashMap0.put(", writeOnly=", (ResponseObject) null);
      ResponsesObject responsesObject0 = new ResponsesObject((ResponseObject) null, hashMap0);
      // Undeclared exception!
      try { 
        ResponsesObjectBuilder.mergeResponses(responsesObject0, responsesObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // description cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResponsesObjectBuilder responsesObjectBuilder0 = new ResponsesObjectBuilder();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResponsesObjectBuilder responsesObjectBuilder0 = ResponsesObjectBuilder.responsesObject();
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      ResponsesObjectBuilder responsesObjectBuilder1 = responsesObjectBuilder0.withHttpStatusCodes(hashMap0);
      assertSame(responsesObjectBuilder0, responsesObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResponsesObjectBuilder responsesObjectBuilder0 = ResponsesObjectBuilder.responsesObject();
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("io.muserver.openapi.ResponsesObjectBuilder", hashMap0, hashMap1, hashMap2);
      ResponsesObjectBuilder responsesObjectBuilder1 = responsesObjectBuilder0.withDefaultValue(responseObject0);
      assertSame(responsesObjectBuilder0, responsesObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("io.muserver.openapi.ResponsesObjectBuilder", hashMap0, hashMap1, hashMap2);
      HashMap<String, ResponseObject> hashMap3 = new HashMap<String, ResponseObject>();
      hashMap3.put((String) null, responseObject0);
      ResponsesObject responsesObject0 = new ResponsesObject((ResponseObject) null, hashMap3);
      ResponsesObjectBuilder responsesObjectBuilder0 = ResponsesObjectBuilder.mergeResponses(responsesObject0, responsesObject0);
      ResponsesObject responsesObject1 = responsesObjectBuilder0.build();
      ResponsesObjectBuilder responsesObjectBuilder1 = ResponsesObjectBuilder.mergeResponses(responsesObject1, responsesObject0);
      assertNotSame(responsesObjectBuilder0, responsesObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ResponsesObjectBuilder responsesObjectBuilder0 = ResponsesObjectBuilder.responsesObject();
      // Undeclared exception!
      try { 
        responsesObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // httpStatusCodes cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }
}
