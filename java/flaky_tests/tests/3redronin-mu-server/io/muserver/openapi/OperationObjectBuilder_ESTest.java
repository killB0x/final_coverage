/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:40:45 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.CallbackObject;
import io.muserver.openapi.ExternalDocumentationObject;
import io.muserver.openapi.OperationObject;
import io.muserver.openapi.OperationObjectBuilder;
import io.muserver.openapi.ParameterObject;
import io.muserver.openapi.RequestBodyObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.ResponsesObject;
import io.muserver.openapi.SecurityRequirementObject;
import io.muserver.openapi.ServerObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OperationObjectBuilder_ESTest extends OperationObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        OperationObjectBuilder.builderFrom((OperationObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.OperationObjectBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      // Undeclared exception!
      try { 
        operationObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // responses cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withRequestBody((RequestBodyObject) null);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withDescription("\"5");
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      LinkedList<SecurityRequirementObject> linkedList0 = new LinkedList<SecurityRequirementObject>();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withSecurity(linkedList0);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      HashMap<String, CallbackObject> hashMap0 = new HashMap<String, CallbackObject>();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withCallbacks(hashMap0);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      Boolean boolean0 = Boolean.TRUE;
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withDeprecated(boolean0);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withSummary("io.muserver.openapi.OperationObjectBuilder");
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      LinkedList<ParameterObject> linkedList0 = new LinkedList<ParameterObject>();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withParameters(linkedList0);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withTags(linkedList0);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withOperationId(".n]2InauXev/_");
      assertSame(operationObjectBuilder1, operationObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = new OperationObjectBuilder();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withServers((List<ServerObject>) null);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      OperationObjectBuilder operationObjectBuilder1 = operationObjectBuilder0.withExternalDocs((ExternalDocumentationObject) null);
      assertSame(operationObjectBuilder0, operationObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperationObjectBuilder operationObjectBuilder0 = OperationObjectBuilder.operationObject();
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      hashMap0.put("Ys^|9Tjq+={[", (ResponseObject) null);
      ResponsesObject responsesObject0 = new ResponsesObject((ResponseObject) null, hashMap0);
      operationObjectBuilder0.withResponses(responsesObject0);
      OperationObject operationObject0 = operationObjectBuilder0.build();
      OperationObjectBuilder operationObjectBuilder1 = OperationObjectBuilder.builderFrom(operationObject0);
      assertFalse(operationObjectBuilder1.equals((Object)operationObjectBuilder0));
  }
}
