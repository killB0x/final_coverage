/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:58:37 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.ParameterObjectBuilder;
import io.muserver.openapi.SchemaObject;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterObjectBuilder_ESTest extends ParameterObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = new ParameterObjectBuilder();
      Boolean boolean0 = Boolean.FALSE;
      parameterObjectBuilder0.withRequired(boolean0);
      // Undeclared exception!
      try { 
        parameterObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      // Undeclared exception!
      try { 
        parameterObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      Boolean boolean0 = Boolean.FALSE;
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withExplode(boolean0);
      // Undeclared exception!
      try { 
        parameterObjectBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withSchema((SchemaObject) null);
      assertSame(parameterObjectBuilder1, parameterObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withAllowReserved(false);
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withAllowEmptyValue(false);
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withContent(hashMap0);
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withDescription("form");
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withName("Ij(]Jidsy");
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withIn(">F q");
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      HashMap<String, ExampleObject> hashMap0 = new HashMap<String, ExampleObject>();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withExamples(hashMap0);
      assertSame(parameterObjectBuilder1, parameterObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = new ParameterObjectBuilder();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withExample(parameterObjectBuilder0);
      assertSame(parameterObjectBuilder1, parameterObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = new ParameterObjectBuilder();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withStyle("");
      assertSame(parameterObjectBuilder1, parameterObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterObjectBuilder parameterObjectBuilder0 = ParameterObjectBuilder.parameterObject();
      ParameterObjectBuilder parameterObjectBuilder1 = parameterObjectBuilder0.withDeprecated(true);
      assertSame(parameterObjectBuilder0, parameterObjectBuilder1);
  }
}
