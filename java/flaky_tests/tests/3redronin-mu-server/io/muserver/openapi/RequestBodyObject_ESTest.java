/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:27:04 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.RequestBodyObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RequestBodyObject_ESTest extends RequestBodyObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("array", hashMap0, true);
      StringWriter stringWriter0 = new StringWriter();
      requestBodyObject0.writeJson(stringWriter0);
      assertTrue(requestBodyObject0.required);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject((String) null, hashMap0, false);
      StringWriter stringWriter0 = new StringWriter(2630);
      requestBodyObject0.writeJson(stringWriter0);
      assertFalse(requestBodyObject0.required);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject((String) null, hashMap0, false);
      boolean boolean0 = requestBodyObject0.required();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject((String) null, hashMap0, false);
      requestBodyObject0.description();
      assertFalse(requestBodyObject0.required);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("", hashMap0, false);
      String string0 = requestBodyObject0.description();
      assertFalse(requestBodyObject0.required);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      hashMap0.put("array", (MediaTypeObject) null);
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("array", hashMap0, true);
      Map<String, MediaTypeObject> map0 = requestBodyObject0.content();
      assertTrue(requestBodyObject0.required);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestBodyObject requestBodyObject0 = null;
      try {
        requestBodyObject0 = new RequestBodyObject("A,Fs>", (Map<String, MediaTypeObject>) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // content cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("array", hashMap0, true);
      Map<String, MediaTypeObject> map0 = requestBodyObject0.content();
      assertTrue(requestBodyObject0.required);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("array", hashMap0, true);
      String string0 = requestBodyObject0.description();
      assertTrue(requestBodyObject0.required);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("", hashMap0, true);
      boolean boolean0 = requestBodyObject0.required();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("w@(8dqwIiw@lv<!", hashMap0, true);
      // Undeclared exception!
      try { 
        requestBodyObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.RequestBodyObject", e);
      }
  }
}
