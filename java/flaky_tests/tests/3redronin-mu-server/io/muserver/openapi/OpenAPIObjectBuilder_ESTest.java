/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:08:14 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ComponentsObject;
import io.muserver.openapi.ContactObject;
import io.muserver.openapi.ExternalDocumentationObject;
import io.muserver.openapi.InfoObject;
import io.muserver.openapi.LicenseObject;
import io.muserver.openapi.OpenAPIObject;
import io.muserver.openapi.OpenAPIObjectBuilder;
import io.muserver.openapi.PathItemObject;
import io.muserver.openapi.PathsObject;
import io.muserver.openapi.SecurityRequirementObject;
import io.muserver.openapi.ServerObject;
import io.muserver.openapi.TagObject;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenAPIObjectBuilder_ESTest extends OpenAPIObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      HashMap<String, PathItemObject> hashMap0 = new HashMap<String, PathItemObject>();
      PathsObject pathsObject0 = new PathsObject(hashMap0);
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withPaths(pathsObject0);
      OpenAPIObject openAPIObject0 = openAPIObjectBuilder1.build();
      assertEquals("3.0.1", openAPIObject0.openApi());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      HashMap<String, PathItemObject> hashMap0 = new HashMap<String, PathItemObject>();
      PathsObject pathsObject0 = new PathsObject(hashMap0);
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withPaths(pathsObject0);
      LinkedList<TagObject> linkedList0 = new LinkedList<TagObject>();
      linkedList0.add((TagObject) null);
      OpenAPIObjectBuilder openAPIObjectBuilder2 = openAPIObjectBuilder1.withTags(linkedList0);
      // Undeclared exception!
      try { 
        openAPIObjectBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.OpenAPIObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      // Undeclared exception!
      try { 
        openAPIObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // paths cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      LinkedList<SecurityRequirementObject> linkedList0 = new LinkedList<SecurityRequirementObject>();
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withSecurity(linkedList0);
      assertSame(openAPIObjectBuilder0, openAPIObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = new OpenAPIObjectBuilder();
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withComponents((ComponentsObject) null);
      assertSame(openAPIObjectBuilder0, openAPIObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      LinkedList<ServerObject> linkedList0 = new LinkedList<ServerObject>();
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withServers(linkedList0);
      assertSame(openAPIObjectBuilder1, openAPIObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = new OpenAPIObjectBuilder();
      OpenAPIObjectBuilder openAPIObjectBuilder1 = openAPIObjectBuilder0.withExternalDocs((ExternalDocumentationObject) null);
      assertSame(openAPIObjectBuilder1, openAPIObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenAPIObjectBuilder openAPIObjectBuilder0 = OpenAPIObjectBuilder.openAPIObject();
      URI uRI0 = MockURI.create("");
      LicenseObject licenseObject0 = new LicenseObject("", uRI0);
      InfoObject infoObject0 = new InfoObject("", "", uRI0, (ContactObject) null, licenseObject0, "");
      openAPIObjectBuilder0.withInfo(infoObject0);
      // Undeclared exception!
      try { 
        openAPIObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // paths cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }
}
