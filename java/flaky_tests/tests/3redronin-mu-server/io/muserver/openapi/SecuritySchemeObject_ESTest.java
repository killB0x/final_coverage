/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:16:32 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.OAuthFlowObject;
import io.muserver.openapi.OAuthFlowsObject;
import io.muserver.openapi.SecuritySchemeObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecuritySchemeObject_ESTest extends SecuritySchemeObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.create("apiKey");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "text", "ccd%q&OH9p}D~", "apiKey", "']bz_?J*+epiul?g", (String) null, (OAuthFlowsObject) null, uRI0);
      StringWriter stringWriter0 = new StringWriter(123);
      securitySchemeObject0.writeJson(stringWriter0);
      assertEquals("apiKey", securitySchemeObject0.in());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.URI("apiKey", "apiKey", "apiKey");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "", "0x{3]'", (String) null, (String) null, "0x{3]'", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.scheme();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "*AW$jvC", "/", "", "", "./ha69Wvwq?i2qdN*-", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.scheme();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("http", "http", "apiKey", "zgQjzx#t/6KN", "http", "http", (OAuthFlowsObject) null, (URI) null);
      URI uRI0 = securitySchemeObject0.openIdConnectUrl();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.URI("apiKey", "apiKey", "apiKey");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "apiKey", "apiKey", "apiKey", "apiKey", "<", (OAuthFlowsObject) null, uRI0);
      URI uRI1 = securitySchemeObject0.openIdConnectUrl();
      assertEquals("apiKey", uRI1.getScheme());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "`^jC#6<8#", "scopes", 123, "", "scopes", ">}HXfiOxWf(,f");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "apiKey", "openIdConnect", "`^jC#6<8#", "", "w.>`U", (OAuthFlowsObject) null, uRI0);
      URI uRI1 = securitySchemeObject0.openIdConnectUrl();
      assertNull(uRI1.getScheme());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "jg_=3@DXh&Z`Nk/$y", (String) null, "jg_=3@DXh&Z`Nk/$y", "U$B&dN_x Vf7`Ut*{H", "U$B&dN_x Vf7`Ut*{H", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "xI", "", "UnX&&n!t,d[[Po", "c$'Y`Rp,OQq-5^>J", "", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI("apiKey", "apiKey", "apiKey");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "", "0x{3]'", (String) null, (String) null, "0x{3]'", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.in();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.URI("openIdConnect");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.in();
      assertEquals("openIdConnect", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "", oAuthFlowsObject0, uRI0);
      OAuthFlowsObject oAuthFlowsObject1 = securitySchemeObject0.flows();
      assertSame(oAuthFlowsObject1, oAuthFlowsObject0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", (String) null, (String) null, "openIdConnect", "http", "http", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "", "(#>V\"nir>VJ]", "", "(#>V\"nir>VJ]", (String) null, (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.description();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.create("apiKey");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "text", "ccd%q&OH9p}D~", "apiKey", "']bz_?J*+epiul?g", (String) null, (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.bearerFormat();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "", oAuthFlowsObject0, uRI0);
      String string0 = securitySchemeObject0.bearerFormat();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.URI("openIdConnect");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", "openIdConnect", (OAuthFlowsObject) null, uRI0);
      // Undeclared exception!
      try { 
        securitySchemeObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.SecuritySchemeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.create("opWXVenIdConne3t");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("oauth2", "oauth2", "oauth2", "opWXVenIdConne3t", (String) null, "h7M@/[", oAuthFlowsObject0, uRI0);
      assertEquals("oauth2", securitySchemeObject0.type());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      SecuritySchemeObject securitySchemeObject0 = null;
      try {
        securitySchemeObject0 = new SecuritySchemeObject("l j|fvTs}D", "apiey", "$L=:IR*4L'y", "http", "http", "RkQ&@*!!lM8|lZ,J", (OAuthFlowsObject) null, uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'type' must be one of [apiKey, http, oauth2, openIdConnect] but was l j|fvTs}D
         //
         verifyException("io.muserver.openapi.SecuritySchemeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "apiKey", oAuthFlowsObject0, uRI0);
      String string0 = securitySchemeObject0.bearerFormat();
      assertEquals("apiKey", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<String> list0 = SecuritySchemeObject.validTypes();
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "W[V-nTbu'C`4W+%b", "apiKey", "", oAuthFlowsObject0, uRI0);
      String string0 = securitySchemeObject0.name();
      assertEquals("apiKey", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "xI", "", "UnX&&n!t,d[[Po", "c$'Y`Rp,OQq-5^>J", "", (OAuthFlowsObject) null, uRI0);
      StringWriter stringWriter0 = new StringWriter(1);
      securitySchemeObject0.writeJson(stringWriter0);
      assertEquals("c$'Y`Rp,OQq-5^>J", securitySchemeObject0.scheme());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "xI", "", "UnX&&n!t,d[[Po", "c$'Y`Rp,OQq-5^>J", "", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.type();
      assertEquals("openIdConnect", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("apiKey", "d", "", "", "+Vh{qg ", "+Vh{qg ", oAuthFlowsObject0, uRI0);
      String string0 = securitySchemeObject0.in();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "xI", "", "UnX&&n!t,d[[Po", "c$'Y`Rp,OQq-5^>J", "", (OAuthFlowsObject) null, uRI0);
      OAuthFlowsObject oAuthFlowsObject0 = securitySchemeObject0.flows();
      assertNull(oAuthFlowsObject0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "xI", "", "UnX&&n!t,d[[Po", "c$'Y`Rp,OQq-5^>J", "", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.scheme();
      assertEquals("c$'Y`Rp,OQq-5^>J", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      SecuritySchemeObject securitySchemeObject0 = new SecuritySchemeObject("openIdConnect", "openIdConnect", "", "UnX&&n!t,d[[Po", "openIdConnect", "", (OAuthFlowsObject) null, uRI0);
      String string0 = securitySchemeObject0.description();
      assertEquals("openIdConnect", string0);
  }
}
