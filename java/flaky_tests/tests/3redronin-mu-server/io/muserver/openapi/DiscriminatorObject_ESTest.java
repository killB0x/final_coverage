/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:32:03 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.DiscriminatorObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscriminatorObject_ESTest extends DiscriminatorObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("", (Map<String, String>) null);
      String string0 = discriminatorObject0.propertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("woy[P'W<+d#[b#LLu", (Map<String, String>) null);
      Map<String, String> map0 = discriminatorObject0.mapping();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("P|eD&+24E$cz4", "");
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("K;*dL^Z", hashMap0);
      Map<String, String> map0 = discriminatorObject0.mapping();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("", hashMap0);
      // Undeclared exception!
      try { 
        discriminatorObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.DiscriminatorObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DiscriminatorObject discriminatorObject0 = null;
      try {
        discriminatorObject0 = new DiscriminatorObject((String) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("woy[P'W<+d#[b#LLu", (Map<String, String>) null);
      String string0 = discriminatorObject0.propertyName();
      assertEquals("woy[P'W<+d#[b#LLu", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("woy[P'W<+d#[b#LLu", (Map<String, String>) null);
      StringWriter stringWriter0 = new StringWriter(3027);
      discriminatorObject0.writeJson(stringWriter0);
      assertEquals("woy[P'W<+d#[b#LLu", discriminatorObject0.propertyName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DiscriminatorObject discriminatorObject0 = new DiscriminatorObject("propertyName", hashMap0);
      Map<String, String> map0 = discriminatorObject0.mapping();
      assertEquals(0, map0.size());
  }
}
