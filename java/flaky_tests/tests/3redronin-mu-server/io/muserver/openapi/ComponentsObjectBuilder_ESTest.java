/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:16:41 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.CallbackObject;
import io.muserver.openapi.ComponentsObject;
import io.muserver.openapi.ComponentsObjectBuilder;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.ParameterObject;
import io.muserver.openapi.PathItemObject;
import io.muserver.openapi.RequestBodyObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.SchemaObject;
import io.muserver.openapi.SecuritySchemeObject;
import io.muserver.openapi.ServerObject;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComponentsObjectBuilder_ESTest extends ComponentsObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>(0);
      componentsObjectBuilder0.withSchemas(hashMap0);
      ComponentsObject componentsObject0 = componentsObjectBuilder0.build();
      assertNotNull(componentsObject0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = ComponentsObjectBuilder.componentsObject();
      HashMap<String, SecuritySchemeObject> hashMap0 = new HashMap<String, SecuritySchemeObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withSecuritySchemes(hashMap0);
      assertSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = ComponentsObjectBuilder.componentsObject();
      HashMap<String, CallbackObject> hashMap0 = new HashMap<String, CallbackObject>();
      HashMap<String, PathItemObject> hashMap1 = new HashMap<String, PathItemObject>();
      CallbackObject callbackObject0 = new CallbackObject(hashMap1);
      hashMap0.put("l`E{J:eD~Z,v[i%Ys ", callbackObject0);
      componentsObjectBuilder0.withCallbacks(hashMap0);
      // Undeclared exception!
      try { 
        componentsObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value 'l`E{J:eD~Z,v[i%Ys ' is not a valid key. It must match ^[a-zA-Z0-9.\\-_]+$
         //
         verifyException("io.muserver.openapi.ComponentsObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = ComponentsObjectBuilder.componentsObject();
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withResponses(hashMap0);
      assertSame(componentsObjectBuilder0, componentsObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = ComponentsObjectBuilder.componentsObject();
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withHeaders(hashMap0);
      assertSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      HashMap<String, ExampleObject> hashMap0 = new HashMap<String, ExampleObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withExamples(hashMap0);
      assertSame(componentsObjectBuilder0, componentsObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      HashMap<String, ParameterObject> hashMap0 = new HashMap<String, ParameterObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withParameters(hashMap0);
      assertSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      HashMap<String, LinkObject> hashMap0 = new HashMap<String, LinkObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withLinks(hashMap0);
      assertSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      HashMap<String, RequestBodyObject> hashMap0 = new HashMap<String, RequestBodyObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withRequestBodies(hashMap0);
      assertSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = ComponentsObjectBuilder.componentsObject((ComponentsObject) null);
      HashMap<String, LinkObject> hashMap0 = new HashMap<String, LinkObject>();
      ComponentsObjectBuilder componentsObjectBuilder1 = componentsObjectBuilder0.withLinks(hashMap0);
      Object object0 = new Object();
      LinkObject linkObject0 = new LinkObject("wEy}VjfEM", (Map<String, Object>) null, object0, "wEy}VjfEM", (ServerObject) null);
      hashMap0.put((String) null, linkObject0);
      // Undeclared exception!
      try { 
        componentsObjectBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComponentsObjectBuilder componentsObjectBuilder0 = new ComponentsObjectBuilder();
      ComponentsObject componentsObject0 = componentsObjectBuilder0.build();
      ComponentsObjectBuilder componentsObjectBuilder1 = ComponentsObjectBuilder.componentsObject(componentsObject0);
      assertNotSame(componentsObjectBuilder1, componentsObjectBuilder0);
  }
}
