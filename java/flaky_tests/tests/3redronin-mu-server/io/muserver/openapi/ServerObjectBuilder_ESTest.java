/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:48:33 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ServerObject;
import io.muserver.openapi.ServerObjectBuilder;
import io.muserver.openapi.ServerVariableObject;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerObjectBuilder_ESTest extends ServerObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServerObjectBuilder serverObjectBuilder0 = new ServerObjectBuilder();
      ServerObjectBuilder serverObjectBuilder1 = serverObjectBuilder0.withUrl("Km!-NkV");
      ServerObject serverObject0 = serverObjectBuilder1.build();
      assertEquals("Km!-NkV", serverObject0.url());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ServerObjectBuilder serverObjectBuilder0 = new ServerObjectBuilder();
      // Undeclared exception!
      try { 
        serverObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // url cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ServerObjectBuilder serverObjectBuilder0 = ServerObjectBuilder.serverObject();
      assertNotNull(serverObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ServerObjectBuilder serverObjectBuilder0 = new ServerObjectBuilder();
      ServerObjectBuilder serverObjectBuilder1 = serverObjectBuilder0.withVariables((Map<String, ServerVariableObject>) null);
      assertSame(serverObjectBuilder0, serverObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ServerObjectBuilder serverObjectBuilder0 = new ServerObjectBuilder();
      ServerObjectBuilder serverObjectBuilder1 = serverObjectBuilder0.withDescription("Km!-NkV");
      assertSame(serverObjectBuilder0, serverObjectBuilder1);
  }
}
