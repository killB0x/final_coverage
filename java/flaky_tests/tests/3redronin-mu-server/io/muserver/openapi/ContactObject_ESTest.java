/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:57:42 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ContactObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ContactObject_ESTest extends ContactObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.URI("F:Y0ZVa39f=", "io.muserver.openapi.ContactObject", "&dny!-<t4*69ODpQ-sr");
      ContactObject contactObject0 = new ContactObject("io.muserver.openapi.ContactObject", uRI0, (String) null);
      URI uRI1 = contactObject0.url();
      assertNull(uRI1.getHost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.create("email");
      ContactObject contactObject0 = new ContactObject("email", uRI0, (String) null);
      URI uRI1 = contactObject0.url();
      assertSame(uRI1, uRI0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ContactObject contactObject0 = new ContactObject("email", uRI0, "q@BaamA9G] TmqfD");
      URI uRI1 = contactObject0.url();
      assertEquals("q@BaamA9G] TmqfD", contactObject0.email());
      assertNotNull(uRI1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ContactObject contactObject0 = new ContactObject("email", uRI0, "q@BaamA9G] TmqfD");
      String string0 = contactObject0.name();
      assertEquals("q@BaamA9G] TmqfD", contactObject0.email());
      assertNotNull(string0);
      assertEquals("email", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ContactObject contactObject0 = new ContactObject("", uRI0, (String) null);
      String string0 = contactObject0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      ContactObject contactObject0 = new ContactObject("email", uRI0, "q@BaamA9G] TmqfD");
      String string0 = contactObject0.email();
      assertNotNull(string0);
      assertEquals("q@BaamA9G] TmqfD", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContactObject contactObject0 = null;
      try {
        contactObject0 = new ContactObject("url", (URI) null, "url");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'email' must be a valid email address, but was url
         //
         verifyException("io.muserver.openapi.ContactObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContactObject contactObject0 = new ContactObject("{W+r^|;r!.#*[ms@", (URI) null, "{W+r^|;r!.#*[ms@");
      // Undeclared exception!
      try { 
        contactObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ContactObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContactObject contactObject0 = new ContactObject("Curl", (URI) null, (String) null);
      StringWriter stringWriter0 = new StringWriter();
      contactObject0.writeJson(stringWriter0);
      assertEquals("Curl", contactObject0.name());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContactObject contactObject0 = new ContactObject("Curl", (URI) null, (String) null);
      URI uRI0 = contactObject0.url();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContactObject contactObject0 = new ContactObject("Curl", (URI) null, (String) null);
      String string0 = contactObject0.email();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContactObject contactObject0 = new ContactObject((String) null, (URI) null, (String) null);
      String string0 = contactObject0.name();
      assertNull(string0);
  }
}
