/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:39:21 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.SecurityRequirementObject;
import io.muserver.openapi.SecurityRequirementObjectBuilder;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecurityRequirementObjectBuilder_ESTest extends SecurityRequirementObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecurityRequirementObjectBuilder securityRequirementObjectBuilder0 = new SecurityRequirementObjectBuilder();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      securityRequirementObjectBuilder0.withRequirements(hashMap0);
      SecurityRequirementObject securityRequirementObject0 = securityRequirementObjectBuilder0.build();
      assertNotNull(securityRequirementObject0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecurityRequirementObjectBuilder securityRequirementObjectBuilder0 = new SecurityRequirementObjectBuilder();
      // Undeclared exception!
      try { 
        securityRequirementObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirements cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecurityRequirementObjectBuilder securityRequirementObjectBuilder0 = SecurityRequirementObjectBuilder.securityRequirementObject();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SecurityRequirementObjectBuilder securityRequirementObjectBuilder1 = securityRequirementObjectBuilder0.withRequirements(hashMap0);
      assertSame(securityRequirementObjectBuilder0, securityRequirementObjectBuilder1);
  }
}
