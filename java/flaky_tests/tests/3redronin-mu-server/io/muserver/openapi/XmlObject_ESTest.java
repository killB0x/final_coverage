/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:46:24 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.XmlObject;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlObject_ESTest extends XmlObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XmlObject xmlObject0 = new XmlObject("", uRI0, "\r", true, false);
      boolean boolean0 = xmlObject0.attribute();
      assertFalse(xmlObject0.wrapped);
      assertTrue(boolean0);
      assertEquals("\r", xmlObject0.prefix());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.create("(_g9sa5B");
      XmlObject xmlObject0 = new XmlObject("(_g9sa5B", uRI0, "(_g9sa5B", true, true);
      StringWriter stringWriter0 = new StringWriter(0);
      xmlObject0.writeJson(stringWriter0);
      assertTrue(xmlObject0.attribute);
      assertTrue(xmlObject0.wrapped);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.URI("namespace", "+PD5Mzq~6rLY*znraYz", "R");
      XmlObject xmlObject0 = new XmlObject("namespace", uRI0, "2F&", false, false);
      StringWriter stringWriter0 = new StringWriter();
      xmlObject0.writeJson(stringWriter0);
      assertEquals("2F&", xmlObject0.prefix());
      assertFalse(xmlObject0.attribute);
      assertFalse(xmlObject0.wrapped);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, "", (String) null, "]A)");
      XmlObject xmlObject0 = new XmlObject((String) null, uRI0, (String) null, true, true);
      boolean boolean0 = xmlObject0.wrapped();
      assertTrue(boolean0);
      assertTrue(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.URI("namespace", "+PD5Mzq~6rLY*znraYz", "R");
      XmlObject xmlObject0 = new XmlObject("namespace", uRI0, "2F&", false, false);
      String string0 = xmlObject0.prefix();
      assertNotNull(string0);
      assertEquals("2F&", string0);
      assertFalse(xmlObject0.wrapped);
      assertFalse(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      XmlObject xmlObject0 = new XmlObject("", uRI0, "", false, false);
      String string0 = xmlObject0.prefix();
      assertFalse(xmlObject0.wrapped);
      assertNotNull(string0);
      assertFalse(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlObject xmlObject0 = new XmlObject("EcxWv", (URI) null, "EcxWv", false, false);
      xmlObject0.namespace();
      assertFalse(xmlObject0.wrapped);
      assertFalse(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.URI("namespace", "+PD5Mzq~6rLY*znraYz", "R");
      XmlObject xmlObject0 = new XmlObject("namespace", uRI0, "2F&", false, false);
      URI uRI1 = xmlObject0.namespace();
      assertFalse(xmlObject0.wrapped);
      assertEquals("2F&", xmlObject0.prefix());
      assertNotNull(uRI1);
      assertFalse(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "namespace", "namespace", 923, (String) null, "", "");
      XmlObject xmlObject0 = new XmlObject((String) null, uRI0, "&-y=o82&;T!~bw2`V", false, false);
      URI uRI1 = xmlObject0.namespace();
      assertNotNull(uRI1);
      assertFalse(xmlObject0.attribute);
      assertFalse(xmlObject0.wrapped);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, "HY-so", "HY-so");
      XmlObject xmlObject0 = new XmlObject((String) null, uRI0, "HY-so", false, false);
      String string0 = xmlObject0.name();
      assertNull(string0);
      assertFalse(xmlObject0.wrapped);
      assertFalse(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      XmlObject xmlObject0 = new XmlObject("name", uRI0, "name", true, true);
      String string0 = xmlObject0.name();
      assertNotNull(string0);
      assertTrue(xmlObject0.attribute);
      assertTrue(xmlObject0.wrapped);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.URI("namespace", "+PD5Mzq~6rLY*znraYz", "R");
      XmlObject xmlObject0 = new XmlObject("namespace", uRI0, "2F&", false, false);
      boolean boolean0 = xmlObject0.attribute();
      assertEquals("2F&", xmlObject0.prefix());
      assertFalse(xmlObject0.wrapped);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XmlObject xmlObject0 = new XmlObject("wrapped", uRI0, "wrapped", false, false);
      // Undeclared exception!
      try { 
        xmlObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.XmlObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XmlObject xmlObject0 = new XmlObject("", uRI0, "\r", true, false);
      String string0 = xmlObject0.name();
      assertNotNull(string0);
      assertTrue(xmlObject0.attribute);
      assertEquals("", string0);
      assertFalse(xmlObject0.wrapped);
      assertEquals("\r", xmlObject0.prefix());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XmlObject xmlObject0 = new XmlObject("", uRI0, "\r", true, false);
      StringWriter stringWriter0 = new StringWriter();
      xmlObject0.writeJson(stringWriter0);
      assertEquals("\r", xmlObject0.prefix());
      assertTrue(xmlObject0.attribute);
      assertFalse(xmlObject0.wrapped);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XmlObject xmlObject0 = new XmlObject("", uRI0, "\r", true, false);
      boolean boolean0 = xmlObject0.wrapped();
      assertFalse(boolean0);
      assertEquals("\r", xmlObject0.prefix());
      assertTrue(xmlObject0.attribute);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, "", (String) null, "]A)");
      XmlObject xmlObject0 = new XmlObject((String) null, uRI0, (String) null, true, true);
      xmlObject0.prefix();
      assertTrue(xmlObject0.attribute);
      assertTrue(xmlObject0.wrapped);
  }
}
