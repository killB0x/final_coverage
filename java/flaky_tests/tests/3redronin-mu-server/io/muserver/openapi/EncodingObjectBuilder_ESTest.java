/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:10:45 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.EncodingObject;
import io.muserver.openapi.EncodingObjectBuilder;
import io.muserver.openapi.HeaderObject;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncodingObjectBuilder_ESTest extends EncodingObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = new EncodingObjectBuilder();
      encodingObjectBuilder0.withAllowReserved(true);
      EncodingObject encodingObject0 = encodingObjectBuilder0.build();
      assertTrue(encodingObject0.allowReserved);
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = new EncodingObjectBuilder();
      EncodingObjectBuilder encodingObjectBuilder1 = encodingObjectBuilder0.withStyle("nullable");
      // Undeclared exception!
      try { 
        encodingObjectBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'style' must be one of [matrix, label, form, simple, spaceDelimited, pipeDelimited, deepObject] but was nullable
         //
         verifyException("io.muserver.openapi.EncodingObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = EncodingObjectBuilder.encodingObject();
      EncodingObject encodingObject0 = encodingObjectBuilder0.build();
      assertTrue(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = EncodingObjectBuilder.encodingObject();
      encodingObjectBuilder0.withExplode(false);
      EncodingObject encodingObject0 = encodingObjectBuilder0.build();
      assertFalse(encodingObject0.explode);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = EncodingObjectBuilder.encodingObject();
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      EncodingObjectBuilder encodingObjectBuilder1 = encodingObjectBuilder0.withHeaders(hashMap0);
      assertSame(encodingObjectBuilder0, encodingObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EncodingObjectBuilder encodingObjectBuilder0 = new EncodingObjectBuilder();
      EncodingObjectBuilder encodingObjectBuilder1 = encodingObjectBuilder0.withContentType("nullable");
      assertSame(encodingObjectBuilder0, encodingObjectBuilder1);
  }
}
