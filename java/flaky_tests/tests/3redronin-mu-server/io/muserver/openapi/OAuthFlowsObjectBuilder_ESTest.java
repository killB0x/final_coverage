/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:34:18 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import io.muserver.openapi.OAuthFlowObject;
import io.muserver.openapi.OAuthFlowsObject;
import io.muserver.openapi.OAuthFlowsObjectBuilder;
import java.net.URI;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OAuthFlowsObjectBuilder_ESTest extends OAuthFlowsObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder0 = new OAuthFlowsObjectBuilder();
      OAuthFlowsObject oAuthFlowsObject0 = oAuthFlowsObjectBuilder0.build();
      assertNotNull(oAuthFlowsObject0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder0 = new OAuthFlowsObjectBuilder();
      URI uRI0 = MockURI.URI("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder1 = oAuthFlowsObjectBuilder0.withPassword(oAuthFlowObject0);
      assertSame(oAuthFlowsObjectBuilder1, oAuthFlowsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder0 = new OAuthFlowsObjectBuilder();
      URI uRI0 = MockURI.URI("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder1 = oAuthFlowsObjectBuilder0.withImplicit(oAuthFlowObject0);
      assertSame(oAuthFlowsObjectBuilder0, oAuthFlowsObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder0 = new OAuthFlowsObjectBuilder();
      URI uRI0 = MockURI.URI("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder1 = oAuthFlowsObjectBuilder0.withClientCredentials(oAuthFlowObject0);
      assertSame(oAuthFlowsObjectBuilder1, oAuthFlowsObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder0 = OAuthFlowsObjectBuilder.oAuthFlowsObject();
      OAuthFlowsObjectBuilder oAuthFlowsObjectBuilder1 = oAuthFlowsObjectBuilder0.withAuthorizationCode((OAuthFlowObject) null);
      assertSame(oAuthFlowsObjectBuilder1, oAuthFlowsObjectBuilder0);
  }
}
