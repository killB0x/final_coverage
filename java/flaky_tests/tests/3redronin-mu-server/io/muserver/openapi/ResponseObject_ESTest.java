/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:24:59 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.EncodingObject;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.SchemaObject;
import io.muserver.openapi.ServerObject;
import io.muserver.openapi.ServerVariableObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ResponseObject_ESTest extends ResponseObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      ResponseObject responseObject0 = new ResponseObject("FF;2&vB98vR>#uJ", hashMap0, (Map<String, MediaTypeObject>) null, (Map<String, LinkObject>) null);
      Map<String, LinkObject> map0 = responseObject0.links();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("headers", (Map<String, HeaderObject>) null, hashMap0, hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<String, ServerVariableObject> hashMap3 = new HashMap<String, ServerVariableObject>();
      ServerObject serverObject0 = new ServerObject("TW%-7,#';", "RG1c|rL~e", hashMap3);
      LinkObject linkObject0 = new LinkObject("f'Q.~w7%9u4`m=\"", hashMap2, (Object) null, "", serverObject0);
      hashMap1.put("", linkObject0);
      Map<String, LinkObject> map0 = responseObject0.links();
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, MediaTypeObject> hashMap0 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("headers", (Map<String, HeaderObject>) null, hashMap0, hashMap1);
      Map<String, HeaderObject> map0 = responseObject0.headers();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      hashMap0.put("F;2&vB98vR>#uJ", (HeaderObject) null);
      ResponseObject responseObject0 = new ResponseObject("F;2&vB98vR>#uJ", hashMap0, (Map<String, MediaTypeObject>) null, (Map<String, LinkObject>) null);
      Map<String, HeaderObject> map0 = responseObject0.headers();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("", hashMap0, (Map<String, MediaTypeObject>) null, hashMap1);
      String string0 = responseObject0.description();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      ResponseObject responseObject0 = new ResponseObject("F;2&vB98vR>#uJ", hashMap0, (Map<String, MediaTypeObject>) null, (Map<String, LinkObject>) null);
      Map<String, MediaTypeObject> map0 = responseObject0.content();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      Object object0 = new Object();
      HashMap<String, EncodingObject> hashMap3 = new HashMap<String, EncodingObject>();
      MediaTypeObject mediaTypeObject0 = new MediaTypeObject((SchemaObject) null, object0, (Map<String, ExampleObject>) null, hashMap3);
      hashMap1.put("l+$c/NrblpX'", mediaTypeObject0);
      Map<String, MediaTypeObject> map0 = responseObject0.content();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap1 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("io.muserver.openapi.ResponseObject", hashMap0, (Map<String, MediaTypeObject>) null, hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<String, ServerVariableObject> hashMap3 = new HashMap<String, ServerVariableObject>();
      ServerObject serverObject0 = new ServerObject("h;{96I3e=e;B0f", "", hashMap3);
      LinkObject linkObject0 = new LinkObject("h;{96I3e=e;B0f", hashMap2, hashMap1, "allOf", serverObject0);
      hashMap1.put("I", linkObject0);
      StringWriter stringWriter0 = new StringWriter(123);
      // Undeclared exception!
      try { 
        responseObject0.writeJson(stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("<.||]WLsrT0]V^", hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        responseObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ResponseObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, LinkObject> hashMap0 = new HashMap<String, LinkObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      ResponseObject responseObject0 = null;
      try {
        responseObject0 = new ResponseObject((String) null, (Map<String, HeaderObject>) null, hashMap1, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // description cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      Map<String, LinkObject> map0 = responseObject0.links();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      String string0 = responseObject0.description();
      assertEquals("l+$c/NrblpX'", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      StringWriter stringWriter0 = new StringWriter();
      responseObject0.writeJson(stringWriter0);
      assertEquals("l+$c/NrblpX'", responseObject0.description());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      Map<String, MediaTypeObject> map0 = responseObject0.content();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, HeaderObject> hashMap0 = new HashMap<String, HeaderObject>();
      HashMap<String, MediaTypeObject> hashMap1 = new HashMap<String, MediaTypeObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ResponseObject responseObject0 = new ResponseObject("l+$c/NrblpX'", hashMap0, hashMap1, hashMap2);
      Map<String, HeaderObject> map0 = responseObject0.headers();
      assertEquals(0, map0.size());
  }
}
