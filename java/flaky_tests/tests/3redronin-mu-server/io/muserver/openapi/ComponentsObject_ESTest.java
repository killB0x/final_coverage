/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:49:40 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.CallbackObject;
import io.muserver.openapi.ComponentsObject;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.HeaderObject;
import io.muserver.openapi.LinkObject;
import io.muserver.openapi.MediaTypeObject;
import io.muserver.openapi.ParameterObject;
import io.muserver.openapi.PathItemObject;
import io.muserver.openapi.RequestBodyObject;
import io.muserver.openapi.ResponseObject;
import io.muserver.openapi.SchemaObject;
import io.muserver.openapi.SecuritySchemeObject;
import io.muserver.openapi.ServerObject;
import io.muserver.openapi.ServerVariableObject;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComponentsObject_ESTest extends ComponentsObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ExampleObject> hashMap1 = new HashMap<String, ExampleObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, (Map<String, ResponseObject>) null, (Map<String, ParameterObject>) null, hashMap1, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, (Map<String, SecuritySchemeObject>) null, hashMap2, (Map<String, CallbackObject>) null);
      Map<String, SecuritySchemeObject> map0 = componentsObject0.securitySchemes();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, RequestBodyObject> hashMap1 = new HashMap<String, RequestBodyObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, (Map<String, ParameterObject>) null, (Map<String, ExampleObject>) null, hashMap1, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, SchemaObject> map0 = componentsObject0.schemas();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ExampleObject> hashMap1 = new HashMap<String, ExampleObject>();
      HashMap<String, LinkObject> hashMap2 = new HashMap<String, LinkObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, (Map<String, ResponseObject>) null, (Map<String, ParameterObject>) null, hashMap1, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, (Map<String, SecuritySchemeObject>) null, hashMap2, (Map<String, CallbackObject>) null);
      Map<String, ResponseObject> map0 = componentsObject0.responses();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, RequestBodyObject> hashMap3 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap4 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, (Map<String, ExampleObject>) null, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7);
      hashMap1.put("securitySchemes", (ResponseObject) null);
      Map<String, ResponseObject> map0 = componentsObject0.responses();
      assertNotNull(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap7 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap8 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7, hashMap8);
      Map<String, RequestBodyObject> map0 = componentsObject0.requestBodies();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, (Map<String, HeaderObject>) null, hashMap5, hashMap6, hashMap7);
      HashMap<String, MediaTypeObject> hashMap8 = new HashMap<String, MediaTypeObject>();
      RequestBodyObject requestBodyObject0 = new RequestBodyObject("-", hashMap8, false);
      hashMap4.put("a}]>)", requestBodyObject0);
      Map<String, RequestBodyObject> map0 = componentsObject0.requestBodies();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, RequestBodyObject> hashMap1 = new HashMap<String, RequestBodyObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, (Map<String, ParameterObject>) null, (Map<String, ExampleObject>) null, hashMap1, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, ParameterObject> map0 = componentsObject0.parameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, (Map<String, ExampleObject>) null, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, LinkObject> map0 = componentsObject0.links();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap7 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap8 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7, hashMap8);
      HashMap<String, Object> hashMap9 = new HashMap<String, Object>();
      HashMap<String, ServerVariableObject> hashMap10 = new HashMap<String, ServerVariableObject>();
      ServerObject serverObject0 = new ServerObject("requestBodies", "-", hashMap10);
      LinkObject linkObject0 = new LinkObject((String) null, hashMap9, hashMap6, "-", serverObject0);
      hashMap7.put((String) null, linkObject0);
      Map<String, LinkObject> map0 = componentsObject0.links();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap7 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap8 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7, hashMap8);
      Map<String, HeaderObject> map0 = componentsObject0.headers();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, RequestBodyObject> hashMap1 = new HashMap<String, RequestBodyObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, (Map<String, ParameterObject>) null, (Map<String, ExampleObject>) null, hashMap1, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, ExampleObject> map0 = componentsObject0.examples();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, (Map<String, SecuritySchemeObject>) null, hashMap6, (Map<String, CallbackObject>) null);
      Map<String, CallbackObject> map0 = componentsObject0.callbacks();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      HashMap<String, PathItemObject> hashMap5 = new HashMap<String, PathItemObject>();
      CallbackObject callbackObject0 = new CallbackObject(hashMap5);
      hashMap4.put("io.muserver.openapi.OAuthFlowObject", callbackObject0);
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, (Map<String, ExampleObject>) null, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, CallbackObject> map0 = componentsObject0.callbacks();
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap2 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap3 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap4 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7);
      // Undeclared exception!
      try { 
        componentsObject0.writeJson((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.ComponentsObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap2 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap3 = new HashMap<String, RequestBodyObject>();
      hashMap1.put((String) null, (ParameterObject) null);
      HashMap<String, HeaderObject> hashMap4 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = null;
      try {
        componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap2 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap3 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap4 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      hashMap3.put("", (RequestBodyObject) null);
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = null;
      try {
        componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, hashMap7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The value '' is not a valid key. It must match ^[a-zA-Z0-9.\\-_]+$
         //
         verifyException("io.muserver.openapi.ComponentsObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      hashMap3.put("T9", (ExampleObject) null);
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, ExampleObject> map0 = componentsObject0.examples();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, ResponseObject> hashMap0 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap1 = new HashMap<String, ParameterObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap3 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap4 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, hashMap0, hashMap1, (Map<String, ExampleObject>) null, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, hashMap2, hashMap3, hashMap4);
      Map<String, CallbackObject> map0 = componentsObject0.callbacks();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, ResponseObject> map0 = componentsObject0.responses();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, SecuritySchemeObject> hashMap5 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, LinkObject> hashMap6 = new HashMap<String, LinkObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, (Map<String, HeaderObject>) null, hashMap5, hashMap6, hashMap7);
      Map<String, HeaderObject> map0 = componentsObject0.headers();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      StringWriter stringWriter0 = new StringWriter();
      componentsObject0.writeJson(stringWriter0);
      assertEquals("{\"schemas\":{},\"responses\":{},\"parameters\":{},\"examples\":{},\"requestBodies\":{},\"headers\":{},\"securitySchemes\":{},\"callbacks\":{}}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, ExampleObject> map0 = componentsObject0.examples();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, ParameterObject> map0 = componentsObject0.parameters();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, SecuritySchemeObject> map0 = componentsObject0.securitySchemes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, SchemaObject> hashMap0 = new HashMap<String, SchemaObject>();
      HashMap<String, ResponseObject> hashMap1 = new HashMap<String, ResponseObject>();
      HashMap<String, ParameterObject> hashMap2 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap3 = new HashMap<String, ExampleObject>();
      HashMap<String, RequestBodyObject> hashMap4 = new HashMap<String, RequestBodyObject>();
      HashMap<String, HeaderObject> hashMap5 = new HashMap<String, HeaderObject>();
      HashMap<String, SecuritySchemeObject> hashMap6 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap7 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject(hashMap0, hashMap1, hashMap2, hashMap3, hashMap4, hashMap5, hashMap6, (Map<String, LinkObject>) null, hashMap7);
      Map<String, SchemaObject> map0 = componentsObject0.schemas();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, ParameterObject> hashMap0 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap1 = new HashMap<String, ExampleObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap3 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, (Map<String, ResponseObject>) null, hashMap0, hashMap1, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, hashMap2, (Map<String, LinkObject>) null, hashMap3);
      Map<String, LinkObject> map0 = componentsObject0.links();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, ParameterObject> hashMap0 = new HashMap<String, ParameterObject>();
      HashMap<String, ExampleObject> hashMap1 = new HashMap<String, ExampleObject>();
      HashMap<String, SecuritySchemeObject> hashMap2 = new HashMap<String, SecuritySchemeObject>();
      HashMap<String, CallbackObject> hashMap3 = new HashMap<String, CallbackObject>();
      ComponentsObject componentsObject0 = new ComponentsObject((Map<String, SchemaObject>) null, (Map<String, ResponseObject>) null, hashMap0, hashMap1, (Map<String, RequestBodyObject>) null, (Map<String, HeaderObject>) null, hashMap2, (Map<String, LinkObject>) null, hashMap3);
      Map<String, RequestBodyObject> map0 = componentsObject0.requestBodies();
      assertNull(map0);
  }
}
