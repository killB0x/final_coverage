/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:47:46 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.ExampleObject;
import io.muserver.openapi.ExampleObjectBuilder;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExampleObjectBuilder_ESTest extends ExampleObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExampleObjectBuilder exampleObjectBuilder0 = new ExampleObjectBuilder();
      URI uRI0 = MockURI.create("");
      ExampleObjectBuilder exampleObjectBuilder1 = exampleObjectBuilder0.withExternalValue(uRI0);
      ExampleObjectBuilder exampleObjectBuilder2 = exampleObjectBuilder1.withValue(exampleObjectBuilder0);
      // Undeclared exception!
      try { 
        exampleObjectBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only one of 'value' or 'externalValue' can have a value
         //
         verifyException("io.muserver.openapi.ExampleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExampleObjectBuilder exampleObjectBuilder0 = ExampleObjectBuilder.exampleObject();
      ExampleObject exampleObject0 = exampleObjectBuilder0.build();
      assertNull(exampleObject0.summary());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExampleObjectBuilder exampleObjectBuilder0 = ExampleObjectBuilder.exampleObject();
      ExampleObjectBuilder exampleObjectBuilder1 = exampleObjectBuilder0.withSummary(":r9U\"");
      assertSame(exampleObjectBuilder1, exampleObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExampleObjectBuilder exampleObjectBuilder0 = ExampleObjectBuilder.exampleObject();
      ExampleObjectBuilder exampleObjectBuilder1 = exampleObjectBuilder0.withDescription("");
      assertSame(exampleObjectBuilder0, exampleObjectBuilder1);
  }
}
