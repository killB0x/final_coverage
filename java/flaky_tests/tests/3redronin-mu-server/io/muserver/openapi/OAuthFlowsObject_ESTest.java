/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:52:36 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.OAuthFlowObject;
import io.muserver.openapi.OAuthFlowsObject;
import java.io.StringWriter;
import java.net.URI;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OAuthFlowsObject_ESTest extends OAuthFlowsObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject0, oAuthFlowObject1);
      OAuthFlowObject oAuthFlowObject2 = oAuthFlowsObject0.authorizationCode();
      assertNotNull(oAuthFlowObject2);
      assertSame(oAuthFlowObject2, oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      OAuthFlowsObject oAuthFlowsObject1 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowsObject0.implicit, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject1 = oAuthFlowsObject1.clientCredentials();
      assertSame(oAuthFlowObject0, oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject1);
      OAuthFlowObject oAuthFlowObject2 = oAuthFlowsObject0.clientCredentials();
      assertNotNull(oAuthFlowObject2);
      assertSame(oAuthFlowObject2, oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject1);
      OAuthFlowsObject oAuthFlowsObject1 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject1, oAuthFlowsObject0.implicit, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject2 = oAuthFlowsObject1.password();
      assertNotNull(oAuthFlowObject2);
      assertSame(oAuthFlowObject2, oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject0, oAuthFlowObject1);
      OAuthFlowObject oAuthFlowObject2 = oAuthFlowsObject0.implicit();
      assertNotNull(oAuthFlowObject2);
      assertSame(oAuthFlowObject2, oAuthFlowObject0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, (URI) null, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject1, oAuthFlowObject1, oAuthFlowObject0, oAuthFlowObject0);
      OAuthFlowObject oAuthFlowObject2 = oAuthFlowsObject0.implicit();
      assertNotNull(oAuthFlowObject2);
      assertSame(oAuthFlowObject2, oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject1);
      StringWriter stringWriter0 = new StringWriter();
      OAuthFlowsObject oAuthFlowsObject1 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject1, oAuthFlowsObject0.implicit, (OAuthFlowObject) null);
      oAuthFlowsObject1.writeJson(stringWriter0);
      assertNotSame(oAuthFlowsObject1, oAuthFlowsObject0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowObject oAuthFlowObject1 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject1, oAuthFlowObject1);
      StringWriter stringWriter0 = new StringWriter();
      oAuthFlowsObject0.writeJson(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject((OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject0 = oAuthFlowsObject0.password();
      assertNull(oAuthFlowObject0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject((OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject0 = oAuthFlowsObject0.implicit();
      assertNull(oAuthFlowObject0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject((OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject0 = oAuthFlowsObject0.clientCredentials();
      assertNull(oAuthFlowObject0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      OAuthFlowsObject oAuthFlowsObject1 = new OAuthFlowsObject((OAuthFlowObject) null, oAuthFlowObject0, oAuthFlowsObject0.authorizationCode, (OAuthFlowObject) null);
      OAuthFlowObject oAuthFlowObject1 = oAuthFlowsObject1.authorizationCode();
      assertNull(oAuthFlowObject1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      OAuthFlowObject oAuthFlowObject0 = new OAuthFlowObject(uRI0, uRI0, uRI0, hashMap0);
      OAuthFlowsObject oAuthFlowsObject0 = new OAuthFlowsObject(oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0, oAuthFlowObject0);
      StringWriter stringWriter0 = new StringWriter();
      hashMap0.put((String) null, "j9}T#Un+");
      // Undeclared exception!
      try { 
        oAuthFlowsObject0.writeJson(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.openapi.Jsonizer", e);
      }
  }
}
