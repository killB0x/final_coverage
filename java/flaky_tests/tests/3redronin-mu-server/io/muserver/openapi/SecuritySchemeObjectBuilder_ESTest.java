/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:25:40 GMT 2022
 */

package io.muserver.openapi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.openapi.OAuthFlowsObject;
import io.muserver.openapi.SecuritySchemeObjectBuilder;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecuritySchemeObjectBuilder_ESTest extends SecuritySchemeObjectBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = new SecuritySchemeObjectBuilder();
      // Undeclared exception!
      try { 
        securitySchemeObjectBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = SecuritySchemeObjectBuilder.securitySchemeObject();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withName("");
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = new SecuritySchemeObjectBuilder();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withIn("'type' must be one of ");
      assertSame(securitySchemeObjectBuilder1, securitySchemeObjectBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = SecuritySchemeObjectBuilder.securitySchemeObject();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withType("&R*sLy{cT$Eu[.[!");
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = new SecuritySchemeObjectBuilder();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withFlows((OAuthFlowsObject) null);
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = SecuritySchemeObjectBuilder.securitySchemeObject();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withBearerFormat("pDRi+8");
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = new SecuritySchemeObjectBuilder();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withScheme("&amp;");
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = SecuritySchemeObjectBuilder.securitySchemeObject();
      URI uRI0 = MockURI.aHttpURI;
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withOpenIdConnectUrl(uRI0);
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder0 = new SecuritySchemeObjectBuilder();
      SecuritySchemeObjectBuilder securitySchemeObjectBuilder1 = securitySchemeObjectBuilder0.withDescription("j\")Fold0{6n0xp");
      assertSame(securitySchemeObjectBuilder0, securitySchemeObjectBuilder1);
  }
}
