/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:27:29 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.MuRequest;
import io.muserver.RateLimiterImpl;
import io.muserver.ServerSettings;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerSettings_ESTest extends ServerSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings((-728L), (-1977), (-1977), (-1L), 9, false, linkedHashSet0, linkedList0);
      String string0 = serverSettings0.toString();
      assertEquals("ServerSettings{minimumGzipSize=-728, maxHeadersSize=-1977, requestReadTimeoutMillis=-1977, maxRequestSize=-1, maxUrlSize=9, gzipEnabled=false, rateLimiters=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings((-728L), (-1977), (-1977), (-1L), 9, false, linkedHashSet0, linkedList0);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = serverSettings0.block(muRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings(963L, 1, 963L, 2581, 0, false, linkedHashSet0, linkedList0);
      linkedList0.add((RateLimiterImpl) null);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        serverSettings0.block(muRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.ServerSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ServerSettings serverSettings0 = new ServerSettings(5079L, (-1556), 5079L, 1493L, (-1556), true, linkedHashSet0, (List<RateLimiterImpl>) null);
      boolean boolean0 = serverSettings0.shouldCompress("+0", "C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ServerSettings serverSettings0 = new ServerSettings(5079L, (-1556), 5079L, 1493L, (-1556), true, linkedHashSet0, (List<RateLimiterImpl>) null);
      // Undeclared exception!
      try { 
        serverSettings0.shouldCompress("io.muserver.RequestBodyReader", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"io.muserver.RequestBodyReader\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings((-1504), (-1504), (-1504), (-1504), (-1504), true, (Set<String>) null, linkedList0);
      // Undeclared exception!
      try { 
        serverSettings0.shouldCompress("+0", "+0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ServerSettings serverSettings0 = new ServerSettings((-1556), 1832, 1832, 1832, (-2004318069), true, linkedHashSet0, (List<RateLimiterImpl>) null);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = serverSettings0.block(muRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings((-1550), (-1550), (-1550), (-1550), (-1550), true, linkedHashSet0, linkedList0);
      linkedHashSet0.add("+0");
      boolean boolean0 = serverSettings0.shouldCompress("+0", "+0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ServerSettings serverSettings0 = new ServerSettings(0L, 2, 2, 2, (-2998), true, linkedHashSet0, (List<RateLimiterImpl>) null);
      boolean boolean0 = serverSettings0.shouldCompress((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings(0, 0, 0, 0, 0, true, linkedHashSet0, linkedList0);
      boolean boolean0 = serverSettings0.shouldCompress("+0", "+0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings(0, (-2025), 0, 0, 2521, true, linkedHashSet0, linkedList0);
      boolean boolean0 = serverSettings0.shouldCompress((String) null, "Ve%6/Sneh*;7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<RateLimiterImpl> linkedList0 = new LinkedList<RateLimiterImpl>();
      ServerSettings serverSettings0 = new ServerSettings(0, 0, 0, 0, 0, false, linkedHashSet0, linkedList0);
      boolean boolean0 = serverSettings0.shouldCompress("ServerSettings{minimumGzipSize=0, maxHeadersSize=0, requestReadTimeoutMillis=0, maxRequestSize=0, maxUrlSize=0, gzipEnabled=false, rateLimiters=[]}", "ServerSettings{minimumGzipSize=0, maxHeadersSize=0, requestReadTimeoutMillis=0, maxRequestSize=0, maxUrlSize=0, gzipEnabled=false, rateLimiters=[]}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ServerSettings serverSettings0 = new ServerSettings((-1556), 1832, 1832, 1832, (-2004318069), true, linkedHashSet0, (List<RateLimiterImpl>) null);
      boolean boolean0 = serverSettings0.shouldCompress("+0", ", maxUrlSize=");
      assertFalse(boolean0);
  }
}
