/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:35:15 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.ForwardedHeader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ForwardedHeader_ESTest extends ForwardedHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("i$=Ut` pC*h");
      String string0 = ForwardedHeader.toString(list0);
      assertEquals("i$=Ut`pC*h", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ForwardedHeader> linkedList0 = new LinkedList<ForwardedHeader>();
      String string0 = ForwardedHeader.toString((List<ForwardedHeader>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, (String) null, (String) null, (String) null, hashMap0);
      String string0 = forwardedHeader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, "", "io.muserver.ForwardedHeader$1", (String) null, hashMap0);
      String string0 = forwardedHeader0.proto();
      assertEquals("", forwardedHeader0.forValue());
      assertNull(string0);
      assertEquals("io.muserver.ForwardedHeader$1", forwardedHeader0.host());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("vQ{KWf-q`d", "vQ{KWf-q`d", "vQ{KWf-q`d", "vQ{KWf-q`d", hashMap0);
      String string0 = forwardedHeader0.proto();
      assertEquals("vQ{KWf-q`d", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, "aNUL>?\"*Me>cbMl{;D", (String) null, "aNUL>?\"*Me>cbMl{;D", (Map<String, String>) null);
      String string0 = forwardedHeader0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("N\tD~}KgW&rS?-L\"", ")=;Ub|)[^t|", "", "", hashMap0);
      String string0 = forwardedHeader0.host();
      assertEquals("N\tD~}KgW&rS?-L\"", forwardedHeader0.by());
      assertEquals("", string0);
      assertEquals("", forwardedHeader0.proto());
      assertEquals(")=;Ub|)[^t|", forwardedHeader0.forValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("]Y8U`t^/RZ~y%r|", (String) null, "]Y8U`t^/RZ~y%r|", "", hashMap0);
      String string0 = forwardedHeader0.forValue();
      assertNull(string0);
      assertEquals("", forwardedHeader0.proto());
      assertEquals("]Y8U`t^/RZ~y%r|", forwardedHeader0.host());
      assertEquals("]Y8U`t^/RZ~y%r|", forwardedHeader0.by());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, "j", "GH'r", "j", hashMap0);
      String string0 = forwardedHeader0.forValue();
      assertNotNull(string0);
      assertEquals("j", forwardedHeader0.proto());
      assertEquals("GH'r", forwardedHeader0.host());
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", "", "", hashMap0);
      Map<String, String> map0 = forwardedHeader0.extensions();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, "j", "GH'r", "j", hashMap0);
      String string0 = forwardedHeader0.by();
      assertEquals("j", forwardedHeader0.proto());
      assertEquals("j", forwardedHeader0.forValue());
      assertNull(string0);
      assertEquals("GH'r", forwardedHeader0.host());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("H&APi;eS6\"!T~]an}8", "H&APi;eS6\"!T~]an}8", "H&APi;eS6\"!T~]an}8", "H&APi;eS6\"!T~]an}8", hashMap0);
      String string0 = forwardedHeader0.by();
      assertEquals("H&APi;eS6\"!T~]an}8", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.toString((List<ForwardedHeader>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("by=by;for=!O~^");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("by=\"jJ=\";for=\"jJ=\";host=\"jJ=\";proto=\"jJ=\";by=\"jJ=\"");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("7q=@%9aMfP3m,");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("by=\"<z{R\";for=\"N[t*.m\";host=\"_bT;2t+w3UGhPbDet.\"");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(61);
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", "", "", hashMap0);
      Map<String, String> map0 = forwardedHeader0.extensions();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", "", "", hashMap0);
      String string0 = forwardedHeader0.toString();
      assertEquals("by=;for=;host=;proto=", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("m3", "m3", "m3", "m3", hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(1704, 1704);
      hashMap1.put("A0.m7dSI+@;B*~09}", "A0.m7dSI+@;B*~09}");
      ForwardedHeader forwardedHeader1 = new ForwardedHeader("m3", "m3", "m3", "m3", hashMap1);
      boolean boolean0 = forwardedHeader1.equals(forwardedHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", "", "", hashMap0);
      ForwardedHeader forwardedHeader1 = new ForwardedHeader("", "", "", "", hashMap0);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, (String) null, "", "-<<t1@TQ1<kX<Jc3/", (Map<String, String>) null);
      ForwardedHeader forwardedHeader1 = new ForwardedHeader((String) null, (String) null, "\"", ", lW2|&K's^zIw}mD^", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader1);
      assertEquals("\"", forwardedHeader1.host());
      assertEquals(", lW2|&K's^zIw}mD^", forwardedHeader1.proto());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("X]!Y;wJ1", (String) null, "X]!Y;wJ1", "X]!Y;wJ1", (Map<String, String>) null);
      ForwardedHeader forwardedHeader1 = new ForwardedHeader("X]!Y;wJ1", "X]!Y;wJ1", (String) null, "\"", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader1);
      assertEquals("X]!Y;wJ1", forwardedHeader1.forValue());
      assertFalse(boolean0);
      assertEquals("\"", forwardedHeader1.proto());
      assertEquals("X]!Y;wJ1", forwardedHeader1.by());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("Unexpected ending point at state ", (String) null, "q)U)>!;GRqch", "X2O", hashMap0);
      ForwardedHeader forwardedHeader1 = new ForwardedHeader((String) null, "", "", "", hashMap0);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader1);
      assertEquals("X2O", forwardedHeader0.proto());
      assertEquals("q)U)>!;GRqch", forwardedHeader0.host());
      assertEquals("Unexpected ending point at state ", forwardedHeader0.by());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, (String) null, (String) null, (String) null, (Map<String, String>) null);
      ForwardedHeader forwardedHeader1 = new ForwardedHeader((String) null, (String) null, (String) null, ", lW2|&K's^zIw}mD^", (Map<String, String>) null);
      boolean boolean0 = forwardedHeader0.equals(forwardedHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      LinkedList<ForwardedHeader> linkedList0 = new LinkedList<ForwardedHeader>();
      linkedList0.add(forwardedHeader0);
      linkedList0.offerLast(forwardedHeader0);
      String string0 = ForwardedHeader.toString((List<ForwardedHeader>) linkedList0);
      assertEquals("by=;for=;proto=, by=;for=;proto=", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.fromString("G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected ending point at state PARAM_NAME for G
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("by=\"cA\";for=\"cA\";host=\"cA\";proto=\"cA\"");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("=tr.iKm^U z.J;Ig=BF");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("1e7= P?U4J7J9e");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.fromString("by=;for=;host=;proto=;=\"M=`@+*\"8SSc({c\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got character code 127 () while parsing parameter value
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.fromString("9 JH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got whitespace in parameter name while in PARAM_NAME - header was 9
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.fromString("UZ, ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 44 while in PARAM_NAME
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("by=wN.w9-eDrWo;for=wN.w9-eDrWo;host=wN.w9-eDrWo;proto=wN.w9-eDrWo;&9=M^1;=>EGefuTp<vc=\"&9=M^1;=>EGefuTp<vc\"");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString(",");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ForwardedHeader.fromString(", lW2|&K's^zIw}mD^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 125 while in PARAM_NAME
         //
         verifyException("io.muserver.ForwardedHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      List<ForwardedHeader> list0 = ForwardedHeader.fromString((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      String string0 = forwardedHeader0.forValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("Unexpected ending point at state ", (String) null, "q)U)>!;GRqch", "X2O", hashMap0);
      String string0 = forwardedHeader0.host();
      assertEquals("Unexpected ending point at state ", forwardedHeader0.by());
      assertNotNull(string0);
      assertEquals("q)U)>!;GRqch", string0);
      assertEquals("X2O", forwardedHeader0.proto());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      String string0 = forwardedHeader0.proto();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader((String) null, (String) null, (String) null, (String) null, (Map<String, String>) null);
      forwardedHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ForwardedHeader forwardedHeader0 = new ForwardedHeader("", "", (String) null, "", (Map<String, String>) null);
      String string0 = forwardedHeader0.by();
      assertEquals("", string0);
  }
}
