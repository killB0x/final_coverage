/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:06:29 GMT 2022
 */

package io.muserver.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.MuRequest;
import io.muserver.rest.LazyAccessInputStream;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyAccessInputStream_ESTest extends LazyAccessInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      lazyAccessInputStream0.mark(266);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      byte[] byteArray0 = new byte[7];
      lazyAccessInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      byte[] byteArray0 = new byte[6];
      lazyAccessInputStream0.read(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      byte[] byteArray0 = new byte[0];
      lazyAccessInputStream0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      byte[] byteArray0 = new byte[7];
      lazyAccessInputStream0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      lazyAccessInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      lazyAccessInputStream0.markSupported();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream((MuRequest) null);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.skip((-644L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream((MuRequest) null);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream((MuRequest) null);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.skip(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream((MuRequest) null);
      lazyAccessInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MuRequest muRequest0 = mock(MuRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(muRequest0).inputStream();
      LazyAccessInputStream lazyAccessInputStream0 = new LazyAccessInputStream(muRequest0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        lazyAccessInputStream0.read(byteArray0, (-269), (-269));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.rest.LazyAccessInputStream", e);
      }
  }
}
