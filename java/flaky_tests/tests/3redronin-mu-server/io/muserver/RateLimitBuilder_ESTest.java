/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 23:04:40 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.RateLimit;
import io.muserver.RateLimitBuilder;
import io.muserver.RateLimitRejectionAction;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RateLimitBuilder_ESTest extends RateLimitBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withWindow(1L, timeUnit0);
      assertSame(rateLimitBuilder0, rateLimitBuilder1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = new RateLimitBuilder();
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withRate(1L);
      assertSame(rateLimitBuilder1, rateLimitBuilder0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      // Undeclared exception!
      try { 
        rateLimitBuilder0.withRejectionAction((RateLimitRejectionAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // action cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = new RateLimitBuilder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        rateLimitBuilder0.withWindow((-513L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid period (-513) for the rate limit
         //
         verifyException("io.muserver.RateLimitBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withWindow(346L, timeUnit0);
      assertSame(rateLimitBuilder1, rateLimitBuilder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = new RateLimitBuilder();
      // Undeclared exception!
      try { 
        rateLimitBuilder0.withRate((-1705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rate (-1705) for the rate limit
         //
         verifyException("io.muserver.RateLimitBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withRate(346L);
      assertSame(rateLimitBuilder1, rateLimitBuilder0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      RateLimit rateLimit0 = rateLimitBuilder0.build();
      assertNotNull(rateLimit0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withBucket("wE0r[}|e7Z<8");
      assertSame(rateLimitBuilder1, rateLimitBuilder0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RateLimitBuilder rateLimitBuilder0 = RateLimitBuilder.rateLimit();
      RateLimitRejectionAction rateLimitRejectionAction0 = RateLimitRejectionAction.IGNORE;
      RateLimitBuilder rateLimitBuilder1 = rateLimitBuilder0.withRejectionAction(rateLimitRejectionAction0);
      assertSame(rateLimitBuilder1, rateLimitBuilder0);
  }
}
