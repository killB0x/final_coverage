/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:51:24 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.ParameterizedHeaderWithValue;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterizedHeaderWithValue_ESTest extends ParameterizedHeaderWithValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("value", hashMap0);
      String string0 = parameterizedHeaderWithValue0.value();
      assertEquals("value", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("value", hashMap0);
      String string0 = parameterizedHeaderWithValue0.toString();
      assertEquals("value", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      hashMap0.put((String) null, "g|LF7#");
      Map<String, String> map0 = parameterizedHeaderWithValue0.parameters();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("8", hashMap0);
      String string0 = parameterizedHeaderWithValue0.parameter("8", "8");
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      String string0 = parameterizedHeaderWithValue0.parameter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      hashMap0.put("", "tCvFD*^#|V");
      String string0 = parameterizedHeaderWithValue0.parameter("");
      assertEquals("tCvFD*^#|V", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      hashMap0.put("", "");
      String string0 = parameterizedHeaderWithValue0.parameter("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("yX", (String) null);
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("yX", hashMap0);
      // Undeclared exception!
      try { 
        parameterizedHeaderWithValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.ParseUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = null;
      try {
        parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("jw!g z#&!4~", (Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters cannot be null
         //
         verifyException("io.muserver.Mutils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      Map<String, String> map0 = parameterizedHeaderWithValue0.parameters();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      String string0 = parameterizedHeaderWithValue0.value();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      hashMap0.put("", "");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue1 = new ParameterizedHeaderWithValue("", hashMap1);
      boolean boolean0 = parameterizedHeaderWithValue0.equals(parameterizedHeaderWithValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      ParameterizedHeaderWithValue parameterizedHeaderWithValue1 = new ParameterizedHeaderWithValue(";=tCvFD*^#|V", hashMap0);
      boolean boolean0 = parameterizedHeaderWithValue0.equals(parameterizedHeaderWithValue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      ParameterizedHeaderWithValue parameterizedHeaderWithValue1 = new ParameterizedHeaderWithValue("", hashMap0);
      boolean boolean0 = parameterizedHeaderWithValue1.equals(parameterizedHeaderWithValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      boolean boolean0 = parameterizedHeaderWithValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("value", hashMap0);
      boolean boolean0 = parameterizedHeaderWithValue0.equals(parameterizedHeaderWithValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      boolean boolean0 = parameterizedHeaderWithValue0.equals("{]W-oQ$();");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString("2;x%_wCJE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected ending point at state PARAM_NAME for 2;x%_wCJE
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<ParameterizedHeaderWithValue> list0 = ParameterizedHeaderWithValue.fromString(";=\"($R]@K0^j\";null=");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<ParameterizedHeaderWithValue> list0 = ParameterizedHeaderWithValue.fromString("|=Cu';BnU=,ON'f)&");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString("=C=P;+nL=W bNf) &");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got character code 41 ()) while parsing parameter value
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString(";=\"($R]@K0^j\";null=; (=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 40 while in PARAM_NAME
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString("-+s;#x= MKd?SXju");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got character code 63 (?) while parsing parameter value
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString("(Y@-pA>Ly;VL0 V,Y7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got whitespace in parameter name while in PARAM_NAME - header was VL0
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<ParameterizedHeaderWithValue> list0 = ParameterizedHeaderWithValue.fromString("Yi-]uzLL;,^<C-[");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString("&^_ ~@YaE)/7VU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 127 while in VALUE at position 4
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterizedHeaderWithValue.fromString(",;jC,M#<LN>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Got ascii 44 while in PARAM_NAME
         //
         verifyException("io.muserver.ParameterizedHeaderWithValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<ParameterizedHeaderWithValue> list0 = ParameterizedHeaderWithValue.fromString("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<ParameterizedHeaderWithValue> list0 = ParameterizedHeaderWithValue.fromString((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      String string0 = parameterizedHeaderWithValue0.parameter((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      String string0 = parameterizedHeaderWithValue0.parameter("3fey@H,Q]+,q", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      parameterizedHeaderWithValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterizedHeaderWithValue parameterizedHeaderWithValue0 = new ParameterizedHeaderWithValue("", hashMap0);
      String string0 = parameterizedHeaderWithValue0.toString();
      assertEquals("", string0);
  }
}
