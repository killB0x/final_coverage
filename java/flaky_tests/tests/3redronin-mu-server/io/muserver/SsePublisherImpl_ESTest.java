/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:44:39 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.AsyncHandle;
import io.muserver.SsePublisherImpl;
import java.io.IOException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SsePublisherImpl_ESTest extends SsePublisherImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      try { 
        ssePublisherImpl0.send("retry: 0\n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while publishing SSE message
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Future<Void> future0 = (Future<Void>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn(future0).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      ssePublisherImpl0.send("_k66", "1miIy+");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Future<Void> future0 = (Future<Void>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn(future0).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      ssePublisherImpl0.send("", "", "}K+9");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Future<Void> future0 = (Future<Void>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn(future0).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      ssePublisherImpl0.sendComment("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SsePublisherImpl.dataText("^i1yb3%f_)J.[X", "", "~{#]");
      assertEquals("id: ~{#]\nevent: \ndata: ^i1yb3%f_)J.[X\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SsePublisherImpl.commentText("rtW &*YH&CB*Y ]QYZ-");
      assertEquals(":rtW &*YH&CB*Y ]QYZ-\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      String string0 = SsePublisherImpl.clientReconnectText((-1L), timeUnit0);
      assertEquals("retry: -1000\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        ssePublisherImpl0.setClientReconnectTime((-4395L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      try { 
        ssePublisherImpl0.setClientReconnectTime((-540L), timeUnit0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while publishing SSE message
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.sendComment("Got content before a request body reader was set");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      try { 
        ssePublisherImpl0.sendComment("7vFxSfx3)C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while publishing SSE message
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.send("Xqp9h", "Xqp9h", "Xqp9h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      try { 
        ssePublisherImpl0.send("Bhw74", "Bhw74", "Bhw74");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while publishing SSE message
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.send("application/x-rar-compressed", "application/x-rar-compressed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.send("id: X\nevent: X\ndata: X\n\n", "id: X\nevent: X\ndata: X\n\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE event names cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.send("\r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SsePublisherImpl.dataText((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SsePublisherImpl.commentText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SsePublisherImpl.commentText("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE Comments cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SsePublisherImpl.clientReconnectText((-1L), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.send("^i1yb3%f_)J.[X", "}", "id: ~{#]\nevent: \ndata: ^i1yb3%f_)J.[X\n\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE IDs cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      ssePublisherImpl0.close();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SsePublisherImpl.dataText((String) null, "\r", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE event names cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Future<Void> future0 = (Future<Void>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn(future0).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      ssePublisherImpl0.send("io.muserver.ResponseState");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Future<Void> future0 = (Future<Void>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn(future0).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ssePublisherImpl0.setClientReconnectTime((-9223372036854775808L), timeUnit0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AsyncHandle asyncHandle0 = mock(AsyncHandle.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(asyncHandle0).write(any(java.nio.ByteBuffer.class));
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl(asyncHandle0);
      try { 
        ssePublisherImpl0.send("(ZBxb~sm+V", "(ZBxb~sm+V");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error while publishing SSE message
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SsePublisherImpl ssePublisherImpl0 = new SsePublisherImpl((AsyncHandle) null);
      // Undeclared exception!
      try { 
        ssePublisherImpl0.sendComment("id: :\nevent: :\ndata: :\n\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SSE Comments cannot have new line characters in them
         //
         verifyException("io.muserver.SsePublisherImpl", e);
      }
  }
}
