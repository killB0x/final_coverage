/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:46:58 GMT 2022
 */

package io.muserver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.muserver.SniKeyManager;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLSession;
import javax.net.ssl.X509ExtendedKeyManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SniKeyManager_ESTest extends SniKeyManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "", map0);
      Principal[] principalArray0 = new Principal[0];
      SSLEngine sSLEngine0 = mock(SSLEngine.class, new ViolatedAssumptionAnswer());
      doReturn((SSLSession) null).when(sSLEngine0).getHandshakeSession();
      // Undeclared exception!
      try { 
        sniKeyManager0.chooseEngineServerAlias("", principalArray0, sSLEngine0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(x509ExtendedKeyManager0).getServerAliases(anyString() , any(java.security.Principal[].class));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "SSLSocket not expected to be used", hashMap0);
      Principal[] principalArray0 = new Principal[4];
      String[] stringArray0 = sniKeyManager0.getServerAliases("'u=#Jxl!`{%|vSX-q", principalArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(x509ExtendedKeyManager0).getServerAliases(anyString() , any(java.security.Principal[].class));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "", hashMap0);
      Principal[] principalArray0 = new Principal[5];
      String[] stringArray1 = sniKeyManager0.getServerAliases("", principalArray0);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(x509ExtendedKeyManager0).getServerAliases(anyString() , any(java.security.Principal[].class));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "SSLSocket not expected to be used", hashMap0);
      Principal[] principalArray0 = new Principal[4];
      String[] stringArray1 = sniKeyManager0.getServerAliases("'u=#Jxl!`{%|vSX-q", principalArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn((PrivateKey) null).when(x509ExtendedKeyManager0).getPrivateKey(anyString());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "", hashMap0);
      PrivateKey privateKey0 = sniKeyManager0.getPrivateKey("");
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn((X509Certificate[]) null).when(x509ExtendedKeyManager0).getCertificateChain(anyString());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "SSLSocket not expected to be used", hashMap0);
      X509Certificate[] x509CertificateArray0 = sniKeyManager0.getCertificateChain("SSLSocket not expected to be used");
      assertNull(x509CertificateArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X509Certificate[] x509CertificateArray0 = new X509Certificate[9];
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn(x509CertificateArray0).when(x509ExtendedKeyManager0).getCertificateChain(anyString());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "i{KVt9[}k>@`RL0", map0);
      X509Certificate[] x509CertificateArray1 = sniKeyManager0.getCertificateChain("");
      assertEquals(9, x509CertificateArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "", map0);
      // Undeclared exception!
      try { 
        sniKeyManager0.getPrivateKey("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "R$QRuAw98kBoC}1b;", hashMap0);
      // Undeclared exception!
      try { 
        sniKeyManager0.getCertificateChain("R$QRuAw98kBoC}1b;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "[Yxph|!i+Zq*", hashMap0);
      Principal[] principalArray0 = new Principal[8];
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      SSLEngine sSLEngine0 = mock(SSLEngine.class, new ViolatedAssumptionAnswer());
      doReturn(sSLSession0).when(sSLEngine0).getHandshakeSession();
      // Undeclared exception!
      try { 
        sniKeyManager0.chooseEngineServerAlias("#~%Sb=b-KC", principalArray0, sSLEngine0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.evosuite.shaded.org.mockito.codegen.SSLSession$MockitoMock$1150974665 cannot be cast to class javax.net.ssl.ExtendedSSLSession (org.evosuite.shaded.org.mockito.codegen.SSLSession$MockitoMock$1150974665 is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @32ca355a; javax.net.ssl.ExtendedSSLSession is in module java.base of loader 'bootstrap')
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "", hashMap0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        sniKeyManager0.chooseClientAlias(stringArray0, (Principal[]) null, mockSocket0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a client
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn(x509CertificateArray0).when(x509ExtendedKeyManager0).getCertificateChain(anyString());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "", hashMap0);
      X509Certificate[] x509CertificateArray1 = sniKeyManager0.getCertificateChain("u}b");
      assertSame(x509CertificateArray1, x509CertificateArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "Not a client", hashMap0);
      // Undeclared exception!
      try { 
        sniKeyManager0.chooseEngineClientAlias((String[]) null, (Principal[]) null, (SSLEngine) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a client
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(privateKey0).toString();
      X509ExtendedKeyManager x509ExtendedKeyManager0 = mock(X509ExtendedKeyManager.class, new ViolatedAssumptionAnswer());
      doReturn(privateKey0).when(x509ExtendedKeyManager0).getPrivateKey(anyString());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager(x509ExtendedKeyManager0, "", hashMap0);
      PrivateKey privateKey1 = sniKeyManager0.getPrivateKey("");
      assertNull(privateKey1.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "", map0);
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        sniKeyManager0.chooseServerAlias("", (Principal[]) null, mockSocket0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SSLSocket not expected to be used
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "", hashMap0);
      // Undeclared exception!
      try { 
        sniKeyManager0.getServerAliases("", (Principal[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SniKeyManager sniKeyManager0 = new SniKeyManager((X509ExtendedKeyManager) null, "", hashMap0);
      // Undeclared exception!
      try { 
        sniKeyManager0.getClientAliases("", (Principal[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a client
         //
         verifyException("io.muserver.SniKeyManager", e);
      }
  }
}
