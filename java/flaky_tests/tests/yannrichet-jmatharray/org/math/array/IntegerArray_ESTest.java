/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:11:08 GMT 2022
 */

package org.math.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.math.array.IntegerArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntegerArray_ESTest extends IntegerArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(1466, 1466);
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      IntegerArray.product(intArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntegerArray.sum(intArray0);
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = (-3203);
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      IntegerArray.getRowCopy(intArray1, 0);
      // Undeclared exception!
      try { 
        IntegerArray.toString("YJVfl", intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(3668, (-1907));
      // Undeclared exception!
      IntegerArray.max(intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(3350, 79);
      IntegerArray.getRowsRangeCopy(intArray0, 79, 2560);
      int[] intArray1 = new int[9];
      intArray1[0] = 63;
      intArray1[1] = 2224;
      intArray1[2] = 3350;
      intArray1[3] = 32;
      intArray1[4] = 2560;
      intArray1[5] = 79;
      intArray1[6] = 3350;
      intArray1[7] = 3350;
      intArray1[8] = 2560;
      // Undeclared exception!
      IntegerArray.deleteRows(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2273, 2273);
      // Undeclared exception!
      IntegerArray.min(intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1405, 1405);
      // Undeclared exception!
      IntegerArray.cumProduct(intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1273, 1273);
      // Undeclared exception!
      IntegerArray.cumSum(intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1901);
      intArray0[1] = (-680);
      intArray0[2] = 1733;
      intArray0[3] = 904;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 2609;
      IntegerArray.getRangeCopy(intArray0, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2366, 2366);
      // Undeclared exception!
      IntegerArray.insertColumns(intArray0, 2366, intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(1530, 1530);
      // Undeclared exception!
      IntegerArray.mergeColumns(intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[4][3];
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.toString("'rG!@IWR/$%eh", intArray1);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != java.lang.Integer
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy((int[][]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[][] intArray0 = new int[21][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy((int[][]) null, 1013, 1013, 1013, 1013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange((int[]) null, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[][] intArray1 = IntegerArray.getRowsRangeCopy(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      // Undeclared exception!
      IntegerArray.diagonal(15383, 1023);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[][][] intArray0 = new int[0][3][5];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 1, 1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[][] intArray2 = new int[6][8];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 1;
      intArray3[6] = 1;
      intArray3[7] = 3811;
      intArray2[3] = intArray3;
      intArray2[4] = intArray1;
      intArray2[5] = intArray1;
      int int0 = IntegerArray.getColumnDimension(intArray2, 1);
      assertEquals(0, int0);
      assertEquals(6, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy((int[][]) null, 1061, 1061);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[][] intArray2 = IntegerArray.deleteRows(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      
      int[][] intArray3 = IntegerArray.getSubMatrixRangeCopy(intArray0, 0, (-1), 0, 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.int2double((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[][] intArray1 = IntegerArray.deleteRowsRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(doubleArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[][] intArray1 = IntegerArray.transpose(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int[][] intArray2 = new int[2][8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = new int[0];
      intArray2[0] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 1416;
      intArray4[1] = 1404;
      intArray4[2] = (-2896);
      intArray4[3] = (-1809);
      intArray4[4] = (-2232);
      intArray4[5] = (-105);
      intArray4[6] = 1;
      intArray2[1] = intArray4;
      int[] intArray5 = IntegerArray.maxIndex(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray3);
      assertArrayEquals(new int[] {}, intArray5);
      assertNotNull(intArray5);
      assertEquals(2, intArray2.length);
      assertEquals(0, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.min((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.mergeRows((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2720, 2720);
      assertNotNull(intArray0);
      assertEquals(2720, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.toString(intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2821, 2821);
      assertNotNull(intArray0);
      assertEquals(2821, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.toString("", intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(238, 238);
      assertNotNull(intArray0);
      assertEquals(238, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.int2double(intArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[][][] intArray0 = new int[0][3][5];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, (-99), (-99));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[][] intArray2 = new int[8][6];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      intArray2[7] = intArray1;
      int[] intArray3 = IntegerArray.max(intArray2);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(8, intArray2.length);
      assertEquals(0, intArray3.length);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-99);
      doubleArray1[1] = (double) (-99);
      doubleArray1[2] = (double) (-99);
      doubleArray1[3] = (double) (-99);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-99);
      doubleArray2[1] = (double) (-99);
      doubleArray2[2] = (double) (-99);
      doubleArray2[3] = (double) (-99);
      doubleArray2[4] = (double) (-99);
      doubleArray2[5] = (double) (-99);
      doubleArray2[6] = (double) (-99);
      doubleArray2[7] = (double) (-99);
      doubleArray2[8] = (double) (-99);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-99);
      doubleArray3[1] = (double) (-99);
      doubleArray3[2] = (double) (-99);
      doubleArray3[3] = (double) (-99);
      doubleArray3[4] = (double) (-99);
      doubleArray3[5] = (double) (-99);
      doubleArray3[6] = (double) (-99);
      doubleArray3[7] = 807.06239690978;
      doubleArray0[2] = doubleArray3;
      int[][] intArray4 = IntegerArray.floor(doubleArray0);
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      assertEquals(3, intArray4.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy((int[][]) null, (-2157));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.merge((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int[] intArray1 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = IntegerArray.cumSum(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray1);
      assertArrayEquals(new int[] {1, 2, 3, 4, 5}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      
      int[][] intArray3 = new int[3][1];
      intArray3[0] = intArray0;
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      int[] intArray4 = IntegerArray.product(intArray3);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertArrayEquals(new int[] {1, 2, 3, 4, 5}, intArray4);
      assertNotNull(intArray4);
      assertEquals(3, intArray3.length);
      assertEquals(5, intArray4.length);
      
      int[][] intArray5 = new int[8][8];
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = intArray0;
      intArray5[1] = intArray2;
      intArray5[2] = intArray2;
      intArray5[3] = intArray2;
      intArray5[4] = intArray1;
      intArray5[5] = intArray2;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 1;
      intArray6[1] = 1;
      intArray6[2] = 1;
      intArray6[3] = 1;
      intArray5[6] = intArray6;
      int[] intArray7 = new int[1];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray0));
      
      intArray7[0] = 1;
      intArray5[7] = intArray7;
      int[][] intArray8 = IntegerArray.getRowsRangeCopy(intArray5, 1, 1);
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray3));
      assertNotSame(intArray8, intArray5);
      assertNotSame(intArray8, intArray3);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray8);
      assertNotNull(intArray8);
      assertEquals(1, intArray8.length);
      assertEquals(8, intArray5.length);
      
      int int0 = IntegerArray.minIndex(intArray2);
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray0.equals((Object)intArray6));
      assertFalse(intArray0.equals((Object)intArray7));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray6));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray7));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray6));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray7));
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray6);
      assertNotSame(intArray0, intArray7);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray6);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray7);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray6);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray7);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray1);
      assertArrayEquals(new int[] {1, 2, 3, 4, 5}, intArray2);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange((int[][]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.sum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        IntegerArray.product(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.insert(intArray1, 0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.getColumnsRangeCopy(intArray0, 0, 0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray3.length);
      
      int[][] intArray4 = new int[7][8];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = intArray1;
      intArray4[2] = intArray2;
      intArray4[3] = intArray2;
      intArray4[4] = intArray2;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray4[6] = intArray1;
      // Undeclared exception!
      try { 
        IntegerArray.copy(intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      int int1 = 22;
      int[][] intArray0 = IntegerArray.diagonal(0, 22);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = IntegerArray.mergeRows(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[][] intArray0 = new int[16][0];
      // Undeclared exception!
      try { 
        IntegerArray.toString(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = IntegerArray.delete(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[][] intArray2 = new int[3][7];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      // Undeclared exception!
      try { 
        IntegerArray.toString(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 14;
      intArray1[1] = (-396);
      intArray1[2] = 1;
      intArray1[3] = 930;
      intArray1[4] = (-1);
      intArray1[5] = (-536);
      intArray1[6] = (-2107);
      int int0 = IntegerArray.product(intArray1);
      assertArrayEquals(new int[] {14, (-396), 1, 930, (-1), (-536), (-2107)}, intArray1);
      assertEquals((-1127089536), int0);
      assertEquals(7, intArray1.length);
      
      int int1 = IntegerArray.max(intArray1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {14, (-396), 1, 930, (-1), (-536), (-2107)}, intArray1);
      assertEquals(930, int1);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray0 = IntegerArray.int2double(intArray1);
      assertArrayEquals(new int[] {14, (-396), 1, 930, (-1), (-536), (-2107)}, intArray1);
      assertArrayEquals(new double[] {14.0, (-396.0), 1.0, 930.0, (-1.0), (-536.0), (-2107.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray2 = IntegerArray.getColumnCopy(intArray0, 1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.transpose((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray1 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = IntegerArray.copy(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray0, (-5087), 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5095
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows((int[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[][] intArray0 = new int[0][2];
      int int0 = 1103;
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 1103);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int1 = IntegerArray.maxIndex(intArray1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1103;
      doubleArray0[4] = (double) 0;
      int[] intArray2 = IntegerArray.floor(doubleArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1103.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 1103, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, intArray2.length);
      
      int int2 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, int2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray1, 0, 1831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.delete((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getCopy((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.floor((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(2819, 2819);
      assertNotNull(intArray0);
      assertEquals(2819, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.sum(intArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(5, 0, 0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = IntegerArray.transpose(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[0];
      int int0 = IntegerArray.product(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(1, int0);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.fill(0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = IntegerArray.getCopy(intArray1, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      int[][] intArray3 = new int[0][1];
      assertFalse(intArray3.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension(intArray3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray0, (-1), (-1866));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1864
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.merge(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      int[][] intArray3 = IntegerArray.getRowsRangeCopy(intArray1, 0, 0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(3, intArray1.length);
      assertEquals(1, intArray3.length);
      
      int[][] intArray4 = IntegerArray.transpose(intArray1);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotNull(intArray4);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray4.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray4, 0, 0, (-3973), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(1, 1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int[][][] intArray1 = new int[0][8][9];
      int[] intArray2 = IntegerArray.getColumnCopy(intArray1, 1, 1142);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      int[][] intArray3 = new int[8][5];
      intArray3[0] = intArray2;
      intArray3[1] = intArray0;
      intArray3[2] = intArray0;
      intArray3[3] = intArray2;
      intArray3[4] = intArray0;
      intArray3[5] = intArray0;
      intArray3[6] = intArray0;
      intArray3[7] = intArray0;
      int[][] intArray4 = IntegerArray.mergeColumns(intArray3);
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotNull(intArray4);
      assertEquals(8, intArray3.length);
      assertEquals(0, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(48, intArray1.length);
      
      int[] intArray2 = IntegerArray.getDiagonal(intArray0, 1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray2, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -43
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(1, 1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int[][][] intArray1 = new int[0][8][9];
      int[] intArray2 = IntegerArray.getColumnCopy(intArray1, 1, 1142);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      int[] intArray3 = IntegerArray.delete(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {1}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(1, intArray3.length);
      
      int[][] intArray4 = new int[1][9];
      intArray4[0] = intArray0;
      int[][] intArray5 = IntegerArray.deleteColumns(intArray4, intArray2);
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray5, intArray4);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray5);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(1, intArray4.length);
      assertEquals(1, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      int[][] intArray2 = IntegerArray.insertColumns(intArray0, 1, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      
      int[] intArray3 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray3.length);
      
      int[][] intArray4 = new int[5][7];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = intArray1;
      intArray4[1] = intArray1;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 1;
      intArray5[1] = 1;
      intArray5[2] = 1;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = (-534);
      intArray5[6] = 1;
      intArray4[2] = intArray5;
      intArray4[3] = intArray1;
      intArray4[4] = intArray1;
      int[] intArray6 = IntegerArray.getRowCopy(intArray4, 1);
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {0}, intArray6);
      assertNotNull(intArray6);
      assertEquals(1, intArray6.length);
      assertEquals(5, intArray4.length);
      
      int[][] intArray7 = IntegerArray.getRowsCopy(intArray4, intArray6);
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray0));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray7, intArray4);
      assertNotSame(intArray7, intArray0);
      assertNotSame(intArray7, intArray2);
      assertNotSame(intArray4, intArray7);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {0}, intArray6);
      assertNotNull(intArray7);
      assertEquals(1, intArray6.length);
      assertEquals(1, intArray7.length);
      assertEquals(5, intArray4.length);
      
      int[][] intArray8 = IntegerArray.getColumnsCopy(intArray4, intArray1);
      assertFalse(intArray1.equals((Object)intArray6));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray0));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray7));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray1, intArray6);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray8, intArray7);
      assertNotSame(intArray8, intArray2);
      assertNotSame(intArray8, intArray0);
      assertNotSame(intArray8, intArray4);
      assertNotSame(intArray4, intArray8);
      assertNotSame(intArray4, intArray7);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray8);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray8.length);
      assertEquals(5, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = IntegerArray.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int int0 = IntegerArray.min(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int int1 = IntegerArray.max(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = IntegerArray.int2double(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray2 = IntegerArray.getColumnCopy(intArray0, 0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      
      int[] intArray3 = IntegerArray.min(intArray0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray3.length);
      
      int[] intArray4 = IntegerArray.floor(doubleArray0);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, intArray4.length);
      
      int[] intArray5 = IntegerArray.product(intArray0);
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray5);
      assertNotNull(intArray5);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[][] intArray0 = new int[22][8];
      int[][] intArray1 = IntegerArray.getSubMatrixRangeCopy(intArray0, 1, 1, 1, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(22, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(48, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray0, 25, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.minIndex((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension((int[][]) null, (-183));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(35, 35);
      assertNotNull(intArray0);
      assertEquals(35, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getCopy(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 35 out of bounds for length 35
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[][] intArray0 = new int[25][8];
      // Undeclared exception!
      try { 
        IntegerArray.toString("G?Bt0%J/<Ji", intArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'J'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumSum((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray0, 2144, 2144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][9];
      intArray1[1] = intArray1[0];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      int[][] intArray3 = IntegerArray.fill(0, 0, 0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(0, intArray3.length);
      
      int[][] intArray4 = IntegerArray.getColumnsRangeCopy(intArray3, 0, 2078);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotNull(intArray4);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray4.length);
      
      int[][] intArray5 = IntegerArray.diagonal(0, 677);
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray1);
      assertNotNull(intArray5);
      assertEquals(0, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][9];
      intArray1[1] = intArray1[0];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      int int0 = 0;
      int[][] intArray3 = IntegerArray.getRowsRangeCopy(intArray1, 0, 0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(3, intArray1.length);
      assertEquals(1, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsRangeCopy(intArray3, 0, 2078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[][] intArray1 = IntegerArray.getColumnsRangeCopy(intArray0, 1, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.product((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      int[][] intArray1 = IntegerArray.floor(doubleArray1);
      assertNotNull(intArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray2 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0", string0);
      assertEquals(5, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, doubleArray0.length);
      
      int[][] intArray1 = IntegerArray.diagonal(758, 758);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(758, intArray1.length);
      
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      
      int int0 = IntegerArray.minIndex(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      
      int[] intArray3 = IntegerArray.getDiagonal(intArray1, 758);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(758, intArray1.length);
      assertEquals(0, intArray3.length);
      
      int[] intArray4 = IntegerArray.merge(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotNull(intArray4);
      assertEquals(758, intArray1.length);
      assertEquals(574564, intArray4.length);
      
      int int1 = IntegerArray.product(intArray3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray4));
      assertFalse(int1 == int0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray4);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(1, int1);
      assertEquals(758, intArray1.length);
      assertEquals(0, intArray3.length);
      
      // Undeclared exception!
      IntegerArray.minIndex(intArray4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.sum((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0", string0);
      assertEquals(6, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, doubleArray0.length);
      
      int[][] intArray1 = IntegerArray.diagonal(758, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(758, intArray1.length);
      
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray2.length);
      
      int int0 = IntegerArray.minIndex(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray2.length);
      
      int[][] intArray3 = new int[0][8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray3, 749);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -749
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsCopy(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray2[3] = 1;
      intArray3[5] = 1;
      intArray3[6] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = IntegerArray.min(intArray0);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {1, 1, 1, 1, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray4.length);
      
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 0;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray5[8] = (-847);
      int[] intArray6 = IntegerArray.insert(intArray2, 1, intArray5);
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray5));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray4);
      assertNotSame(intArray2, intArray5);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray6);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray6);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray4);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray2);
      assertArrayEquals(new int[] {0, 1, 0, 1, 1, 0, 0, 0, (-847)}, intArray5);
      assertNotNull(intArray6);
      assertEquals(14, intArray6.length);
      assertEquals(5, intArray2.length);
      assertEquals(9, intArray5.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray0, intArray2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = IntegerArray.insert(intArray2, 0, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(9, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(10, intArray3.length);
      
      int[][] intArray4 = IntegerArray.deleteRows(intArray1, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray4, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray4);
      assertEquals(3, intArray1.length);
      assertEquals(1, intArray2.length);
      assertEquals(2, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      int int1 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      
      int[] intArray2 = IntegerArray.merge(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(48, intArray1.length);
      
      int[] intArray2 = IntegerArray.getDiagonal(intArray0, 0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      
      int[][] intArray3 = IntegerArray.copy(intArray0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 42 out of bounds for length 42
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0", string0);
      assertEquals(5, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, doubleArray0.length);
      
      int[][] intArray1 = IntegerArray.diagonal(758, 758);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(758, intArray1.length);
      
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      
      int int0 = IntegerArray.getColumnDimension(intArray0, 0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(7, int0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.deleteColumns(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[20];
      int[] intArray1 = IntegerArray.getCopy(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(20, intArray0.length);
      assertEquals(20, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.getDiagonal(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int[][] intArray2 = IntegerArray.deleteColumnsRange(intArray0, 0, 1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      
      int int1 = IntegerArray.product(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int[] intArray3 = IntegerArray.getCopy(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      int int0 = 0;
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = IntegerArray.sum(intArray0);
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertArrayEquals(new int[] {}, intArray4);
      assertNotNull(intArray4);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray4.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.min(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[3] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = IntegerArray.min(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      
      int[][] intArray3 = IntegerArray.getRowsCopy(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray3);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray1, 107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 107 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[][] intArray0 = new int[4][5];
      int[] intArray1 = new int[1];
      intArray1[0] = (-12);
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.max(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray2.length);
      
      int int0 = IntegerArray.min(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {(-12)}, intArray1);
      assertEquals((-12), int0);
      assertEquals(1, intArray1.length);
      
      int int1 = IntegerArray.max(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {(-12)}, intArray1);
      assertEquals((-12), int1);
      assertEquals(1, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, (-12));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[5][7];
      intArray1[2] = intArray0;
      int[] intArray2 = IntegerArray.fill(2, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.fill(146, 2, 2);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(146, intArray3.length);
      
      int[] intArray4 = IntegerArray.min(intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {2, 2}, intArray4);
      assertNotNull(intArray4);
      assertEquals(146, intArray3.length);
      assertEquals(2, intArray4.length);
      
      int[][] intArray5 = IntegerArray.getRowsCopy(intArray1, intArray4);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray5);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray1);
      assertArrayEquals(new int[] {2, 2}, intArray4);
      assertNotNull(intArray5);
      assertEquals(5, intArray1.length);
      assertEquals(146, intArray3.length);
      assertEquals(2, intArray4.length);
      assertEquals(2, intArray5.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray5);
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray5));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray5);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray1);
      assertArrayEquals(new int[] {2, 2}, intArray4);
      assertNotNull(doubleArray0);
      assertEquals(5, intArray1.length);
      assertEquals(146, intArray3.length);
      assertEquals(2, intArray4.length);
      assertEquals(2, intArray5.length);
      assertEquals(2, doubleArray0.length);
      
      int[][] intArray6 = IntegerArray.cumSum(intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray5);
      assertNotSame(intArray3, intArray6);
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray5);
      assertNotNull(intArray6);
      assertEquals(146, intArray3.length);
      assertEquals(146, intArray6.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0", string0);
      assertEquals(5, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, doubleArray0.length);
      
      int[][] intArray1 = IntegerArray.diagonal(758, 758);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(758, intArray1.length);
      
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      
      int[][] intArray3 = IntegerArray.insertRows(intArray1, 758, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(5, intArray0.length);
      assertEquals(758, intArray1.length);
      assertEquals(763, intArray3.length);
      
      // Undeclared exception!
      IntegerArray.transpose(intArray3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy((int[][][]) null, 2387, 2387);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2112;
      intArray2[1] = 2031;
      intArray2[2] = 1;
      intArray2[3] = (-2626);
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray3 = IntegerArray.min(intArray1);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray3.length);
      
      int[] intArray4 = IntegerArray.insert(intArray0, 0, intArray0);
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray4);
      assertArrayEquals(new int[] {}, intArray4);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray4);
      assertEquals(0, intArray4.length);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      // Undeclared exception!
      try { 
        IntegerArray.transpose(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[2] = intArray2;
      int[][][] intArray3 = new int[5][4][7];
      intArray3[0] = intArray1;
      intArray3[1] = intArray1;
      intArray3[2] = intArray1;
      intArray3[3] = intArray1;
      intArray3[4] = intArray1;
      int[] intArray4 = IntegerArray.getColumnCopy(intArray3, 0, 0);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(5, intArray3.length);
      assertEquals(5, intArray4.length);
      
      int int0 = IntegerArray.maxIndex(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray4));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray4);
      assertArrayEquals(new int[] {0}, intArray2);
      assertEquals(0, int0);
      assertEquals(1, intArray2.length);
      
      int[] intArray5 = IntegerArray.deleteRange(intArray2, 0, 0);
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray4));
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray2, intArray5);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray4);
      assertArrayEquals(new int[] {}, intArray5);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray5);
      assertEquals(0, intArray5.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      double[][] doubleArray0 = new double[0][7];
      int[][] intArray2 = IntegerArray.floor(doubleArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[9][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      int[] intArray2 = IntegerArray.product(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(9, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[5][7];
      intArray1[2] = intArray0;
      int[] intArray2 = IntegerArray.fill(2, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      
      int int0 = (-1);
      int int1 = (-3584);
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray1, (-1), (-3584));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3583 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.max((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[][] intArray0 = new int[1][0];
      // Undeclared exception!
      try { 
        IntegerArray.toString("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[][] intArray0 = new int[7][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 3;
      intArray1[1] = (-3661);
      intArray1[2] = (-840);
      intArray1[3] = 0;
      intArray1[4] = (-1);
      intArray1[5] = 384;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-3661);
      intArray2[1] = (-3661);
      intArray2[2] = (-1);
      intArray2[3] = 0;
      intArray2[4] = (-3661);
      intArray2[5] = (-840);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1;
      intArray4[1] = (-1);
      intArray4[2] = (-3661);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 3;
      intArray5[1] = 1;
      intArray5[2] = (-840);
      intArray5[3] = 384;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 3;
      intArray6[1] = (-1);
      intArray6[2] = (-1);
      intArray6[3] = (-840);
      intArray6[4] = 1;
      intArray6[5] = 3;
      intArray6[6] = (-1);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = 0;
      intArray7[1] = (-1);
      intArray7[2] = 3;
      intArray7[3] = (-3661);
      intArray7[4] = 1;
      intArray7[5] = (-840);
      intArray7[6] = 384;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        IntegerArray.toString("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 1755;
      int int0 = IntegerArray.maxIndex(intArray0);
      assertArrayEquals(new int[] {8, 1755}, intArray0);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3492);
      intArray0[1] = 1209;
      intArray0[2] = (-1838);
      intArray0[3] = 378;
      intArray0[4] = 446;
      intArray0[5] = 2749;
      intArray0[6] = 3848;
      int int0 = IntegerArray.maxIndex(intArray0);
      assertArrayEquals(new int[] {(-3492), 1209, (-1838), 378, 446, 2749, 3848}, intArray0);
      assertEquals(6, int0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3492), 1209, (-1838), 378, 446, 2749, 3848}, intArray0);
      assertArrayEquals(new int[] {(-3492), (-2283), (-4121), (-3743), (-3297), (-548), 3300}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[][] intArray2 = new int[4][4];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray2, (-1), (-1), 6, 446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[][] intArray0 = new int[41][5];
      int[][] intArray1 = IntegerArray.deleteColumnsRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(41, intArray0.length);
      assertEquals(41, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[5][7];
      int[] intArray2 = IntegerArray.fill(2, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.diagonal(12, 12);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(12, intArray3.length);
      
      int int0 = IntegerArray.maxIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray1, (-1752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1752 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      // Undeclared exception!
      try { 
        IntegerArray.min(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      int[][] intArray1 = new int[7][2];
      intArray1[3] = intArray0;
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[][] intArray2 = IntegerArray.diagonal(0, (-1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      
      int int0 = IntegerArray.maxIndex(intArray1[1]);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertEquals(0, int0);
      assertEquals(7, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 7
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      int[] intArray2 = IntegerArray.insert(intArray0, 0, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray1, intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[][] intArray2 = IntegerArray.insertRows(intArray0, 1, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.transpose(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int[][] intArray1 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[][] intArray2 = IntegerArray.deleteRowsRange(intArray1, 0, (-1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      
      int[] intArray3 = IntegerArray.deleteRange(intArray0, 0, 0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.cumSum(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[][][] intArray0 = new int[0][4][7];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 1, 1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray0, 0, (-2166));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2165
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.delete(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      // Undeclared exception!
      try { 
        IntegerArray.maxIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        IntegerArray.minIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 346;
      int[][] intArray0 = IntegerArray.diagonal(346, 346);
      assertNotNull(intArray0);
      assertEquals(346, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.maxIndex(intArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 336;
      intArray2[1] = 646;
      intArray2[2] = (-1);
      intArray2[3] = 787;
      intArray2[4] = 329;
      intArray2[5] = 337;
      intArray2[6] = (-1);
      intArray1[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 337;
      intArray3[1] = (-1);
      intArray3[2] = (-1);
      intArray3[3] = 331;
      intArray3[4] = 787;
      intArray3[5] = 337;
      intArray3[6] = (-1);
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      String string0 = IntegerArray.toString("q&DK>fR9p,W)", intArray1);
      assertNotNull(string0);
      assertEquals("q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W)\nq&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W)\nq&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W)\nq&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W) q&DK>fR9p,W)", string0);
      assertEquals(4, intArray1.length);
      
      int[] intArray4 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {2, 1, 0, 1}, intArray4);
      assertNotNull(intArray4);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray4.length);
      
      int[][] intArray5 = IntegerArray.mergeRows(intArray1);
      assertFalse(intArray5.equals((Object)intArray1));
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray5, intArray1);
      assertNotNull(intArray5);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray5.length);
      
      int[][] intArray6 = IntegerArray.cumProduct(intArray5);
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertNotSame(intArray1, intArray6);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray5, intArray6);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray1);
      assertNotNull(intArray6);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray5.length);
      assertEquals(4, intArray6.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray1, intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 337 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[0] = (-1353);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[6] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[4] = (-1353);
      intArray1[5] = 0;
      intArray1[6] = 0;
      int[][][] intArray2 = new int[6][6][7];
      int[] intArray3 = IntegerArray.fill(0, 0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(0, intArray3.length);
      
      int int0 = IntegerArray.minIndex(intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(0, int0);
      assertEquals(0, intArray3.length);
      
      int[][] intArray4 = IntegerArray.diagonal(369, (-1780));
      assertNotNull(intArray4);
      assertEquals(369, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      int[] intArray2 = IntegerArray.min(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(7, intArray2.length);
      
      int[] intArray3 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray3.length);
      
      int[] intArray4 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        IntegerArray.cumSum(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.min(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int[] intArray3 = IntegerArray.insert(intArray2, 0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(6, intArray3.length);
      
      int[][] intArray4 = IntegerArray.deleteRows(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray4, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray4);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray4.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.cumSum(intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      intArray1[0] = 723;
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.max(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {723}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      
      int int0 = IntegerArray.min(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {723}, intArray1);
      assertEquals(723, int0);
      assertEquals(1, intArray1.length);
      
      int int1 = (-1);
      int int2 = (-1874);
      // Undeclared exception!
      try { 
        IntegerArray.fill((-1), (-1874));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.insert((int[]) null, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1528;
      int[][] intArray1 = new int[6][8];
      intArray1[1] = intArray0;
      int int0 = IntegerArray.min(intArray1[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray1.length);
      
      int int1 = IntegerArray.max(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 1528, 0, 0}, intArray0);
      assertEquals(1528, int1);
      assertEquals(4, intArray0.length);
      
      int[] intArray2 = IntegerArray.merge(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(6, intArray1.length);
      assertEquals(44, intArray2.length);
      
      int[] intArray3 = IntegerArray.getDiagonal(intArray1, 0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0, 1528, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray3.length);
      
      int[][] intArray4 = IntegerArray.copy(intArray1);
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotNull(intArray4);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray4.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[][] intArray1 = IntegerArray.copy(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int0 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int int1 = IntegerArray.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(4, intArray0.length);
      
      int[] intArray2 = IntegerArray.merge(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(6, intArray1.length);
      assertEquals(36, intArray2.length);
      
      int[] intArray3 = IntegerArray.deleteRange(intArray0, 0, 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray3.length);
      
      int[][] intArray4 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotNull(intArray4);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray4.length);
      
      int[] intArray5 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray5);
      assertNotNull(intArray5);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[][] intArray0 = new int[22][8];
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertNotNull(intArray1);
      assertEquals(22, intArray0.length);
      assertEquals(176, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -168
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 1, 1642);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1634
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = IntegerArray.product(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(9, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray1, (-1729), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1720
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = IntegerArray.product(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int int0 = 1;
      int[] intArray1 = IntegerArray.product(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int int1 = 264;
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 264, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1921, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1921, 1921, 1921, 1921}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1921 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.cumProduct(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.insertRows((int[][]) null, (-1847), (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[][] intArray1 = new int[3][0];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 4;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 0;
      intArray3[1] = 3970;
      intArray1[1] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 4;
      intArray4[1] = 3970;
      intArray4[2] = 0;
      intArray4[3] = 4;
      intArray1[2] = intArray4;
      String string0 = IntegerArray.toString("lmzL#", intArray1);
      assertNotNull(string0);
      assertEquals("lmzL#\nlmzL# lmzL#\nlmzL# lmzL# lmzL# lmzL#", string0);
      assertEquals(3, intArray1.length);
      
      int[] intArray5 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray2);
      assertArrayEquals(new int[] {0}, intArray5);
      assertNotNull(intArray5);
      assertEquals(1, intArray5.length);
      assertEquals(3, intArray1.length);
      
      int[][] intArray6 = IntegerArray.mergeRows(intArray1);
      assertFalse(intArray6.equals((Object)intArray1));
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray1, intArray6);
      assertNotNull(intArray6);
      assertEquals(3, intArray6.length);
      assertEquals(3, intArray1.length);
      
      int[][] intArray7 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertNotSame(intArray1, intArray7);
      assertNotSame(intArray1, intArray6);
      assertNotSame(intArray7, intArray6);
      assertNotSame(intArray7, intArray1);
      assertNotNull(intArray7);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray7.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray7, intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      IntegerArray.fill(4157, 4157, 4157);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[][] intArray0 = new int[0][0];
      // Undeclared exception!
      try { 
        IntegerArray.max(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[1];
      int[][] intArray2 = IntegerArray.deleteRows(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[19];
      int[] intArray1 = IntegerArray.cumSum(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(19, intArray0.length);
      assertEquals(19, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0", string0);
      assertEquals(5, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, doubleArray0.length);
      
      int[][] intArray1 = IntegerArray.diagonal(758, 758);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(758, intArray1.length);
      
      int[] intArray2 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.insertRows(intArray0, (-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 10
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange((int[][]) null, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(48, intArray1.length);
      
      int[] intArray2 = IntegerArray.getDiagonal(intArray0, 0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      
      int[][] intArray3 = IntegerArray.copy(intArray0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray3.length);
      
      int[][] intArray4 = IntegerArray.deleteColumnsRange(intArray0, 0, 1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotNull(intArray4);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray4.length);
      
      int int1 = IntegerArray.product(intArray2);
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertTrue(int1 == int0);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1353);
      intArray1[3] = 129;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = (-1353);
      intArray2[5] = 0;
      int int0 = IntegerArray.product(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0, (-1353), 129}, intArray1);
      assertEquals(0, int0);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 3777, 214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.sum(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int int0 = IntegerArray.sum(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(0, int0);
      assertEquals(1, intArray1.length);
      
      int[] intArray3 = IntegerArray.minIndex(intArray0);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray3.length);
      
      IntegerArray integerArray0 = new IntegerArray();
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IntegerArray integerArray0 = new IntegerArray();
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 777;
      int int3 = 4862;
      int int4 = (-52);
      // Undeclared exception!
      IntegerArray.fill(777, 4862, (-52));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 777;
      intArray0[0] = intArray1;
      int[][] intArray2 = IntegerArray.fill(777, 0, 777);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(777, intArray2.length);
      
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      int int0 = IntegerArray.product(intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertEquals(0, int0);
      assertEquals(1, intArray3.length);
      
      int[] intArray4 = IntegerArray.minIndex(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertArrayEquals(new int[] {}, intArray4);
      assertNotNull(intArray4);
      assertEquals(777, intArray2.length);
      assertEquals(0, intArray4.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray0, 777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 777 out of bounds for length 1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      int[][] intArray1 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1528;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = IntegerArray.toString("", intArray1);
      assertNotNull(string0);
      assertEquals("   \n   \n   \n   \n   \n   ", string0);
      assertEquals(6, intArray1.length);
      
      int[] intArray2 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray1.length);
      assertEquals(4, intArray2.length);
      
      int[][] intArray3 = IntegerArray.mergeRows(intArray1);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray3.length);
      
      int[][] intArray4 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotNull(intArray4);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray4.length);
      
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 1528;
      intArray5[1] = 1528;
      intArray5[2] = 1528;
      intArray5[3] = 1528;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray4, intArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1528 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {1921, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.insert(intArray0, 1741, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1353);
      intArray1[3] = 129;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = (-1353);
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 129;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 -1353 129\n0 0 0 0 -1353 0 0 129\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0", string0);
      assertEquals(9, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, doubleArray0.length);
      
      int[][] intArray4 = IntegerArray.diagonal(6, (-1353));
      assertFalse(intArray4.equals((Object)intArray0));
      assertNotSame(intArray4, intArray0);
      assertNotNull(intArray4);
      assertEquals(6, intArray4.length);
      
      int[][] intArray5 = new int[1][4];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray0));
      
      intArray5[0] = intArray1;
      int[] intArray6 = IntegerArray.minIndex(intArray5);
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray6);
      assertNotNull(intArray6);
      assertEquals(1, intArray5.length);
      assertEquals(4, intArray6.length);
      
      int[][] intArray7 = IntegerArray.insertRows(intArray4, 3, intArray5);
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray5));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray7.equals((Object)intArray0));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray7);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray7);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray7, intArray0);
      assertNotSame(intArray7, intArray4);
      assertNotSame(intArray7, intArray5);
      assertNotNull(intArray7);
      assertEquals(6, intArray4.length);
      assertEquals(1, intArray5.length);
      assertEquals(7, intArray7.length);
      
      int int0 = IntegerArray.max(intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray6));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray6);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray3);
      assertEquals(0, int0);
      assertEquals(5, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[][] intArray0 = new int[4][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = (-2652);
      intArray1[2] = (-1);
      intArray1[3] = (-68);
      intArray1[4] = (-3544);
      intArray1[5] = (-68);
      intArray1[6] = 6234;
      intArray1[7] = (-623);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2652);
      intArray3[1] = 0;
      intArray3[2] = (-2652);
      intArray3[3] = 6234;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[1] = (-1);
      intArray4[2] = (-3544);
      intArray4[3] = (-623);
      intArray0[3] = intArray4;
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 -2652 -1 -68 -3544 -68 6234 -623\n0\n-2652 0 -2652 6234 0\n0 -1 -3544 -623", string0);
      assertEquals(4, intArray0.length);
      
      int[] intArray5 = IntegerArray.getRowCopy(intArray0, 1);
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray5);
      assertNotNull(intArray5);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray5.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray2, (-2652), 112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[7];
      int[] intArray2 = IntegerArray.max(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      
      int int0 = IntegerArray.min(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(7, intArray1.length);
      
      int int1 = (-1);
      int[] intArray3 = IntegerArray.fill(1, 0);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray3.length);
      
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("0 0 0 0\n0 0 0 0", string0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.fill((-2118), 1132, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2118
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      int int0 = (-1353);
      intArray1[2] = (-1353);
      intArray1[3] = 129;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = (-1353);
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 129;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      int int1 = 0;
      intArray3[0] = 0;
      intArray3[1] = 129;
      int[] intArray4 = IntegerArray.cumProduct(intArray2);
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray3));
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray4);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1353), 0, 0, 129}, intArray2);
      assertNotNull(intArray4);
      assertEquals(8, intArray4.length);
      assertEquals(8, intArray2.length);
      
      int[] intArray5 = IntegerArray.insert(intArray2, 0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray5);
      assertArrayEquals(new int[] {0, 0, (-1353), 129}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1353), 0, 0, 129}, intArray2);
      assertNotNull(intArray5);
      assertEquals(4, intArray1.length);
      assertEquals(12, intArray5.length);
      assertEquals(8, intArray2.length);
      
      int int2 = 1736;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension(intArray0, 1736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1736 out of bounds for length 9
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[][] intArray1 = IntegerArray.deleteRowsRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      int[] intArray2 = IntegerArray.sum(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int int0 = IntegerArray.sum(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(0, int0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(0, 0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string0 = IntegerArray.toString((String) null, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = IntegerArray.product(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(9, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[][] intArray0 = new int[22][8];
      int[][] intArray1 = IntegerArray.insertColumns(intArray0, 1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(22, intArray0.length);
      assertEquals(22, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[][] intArray0 = new int[3][5];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, (-1), 423);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -422
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = IntegerArray.product(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.minIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, 563, 1528);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 563 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = IntegerArray.int2double(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[3];
      double[] doubleArray0 = IntegerArray.int2double(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, 3, (-1766));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1768
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.insert(intArray1, 0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.deleteRows(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray3.length);
      
      int[] intArray4 = IntegerArray.product(intArray0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray4.length);
      
      int[][] intArray5 = IntegerArray.getSubMatrixRangeCopy(intArray0, 0, 0, 0, 0);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray3));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray3);
      assertNotNull(intArray5);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 2;
      int[][] intArray1 = new int[5][7];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = IntegerArray.fill(2, 2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray1, 11, 11, 2, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 11 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[][] intArray0 = new int[21][8];
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray0, 35, 35, 35, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 35 out of bounds for length 21
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[][] intArray2 = IntegerArray.getRowsRangeCopy(intArray1, 0, 1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(7, intArray1.length);
      assertEquals(2, intArray2.length);
      
      int int0 = IntegerArray.maxIndex(intArray0);
      assertArrayEquals(new int[] {1921, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray1, 1921);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1921 out of bounds for length 7
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = IntegerArray.maxIndex(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = IntegerArray.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int int0 = IntegerArray.maxIndex(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      // Undeclared exception!
      try { 
        IntegerArray.getRowCopy(intArray0, 258);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 258 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = IntegerArray.maxIndex(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[][] intArray1 = IntegerArray.mergeRows(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      intArray0[1] = 1528;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      String string0 = IntegerArray.toString("", intArray1);
      assertNotNull(string0);
      assertEquals("   \n   \n   \n   \n   \n   ", string0);
      assertEquals(6, intArray1.length);
      
      int[] intArray2 = IntegerArray.maxIndex(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray1.length);
      assertEquals(4, intArray2.length);
      
      int[][] intArray3 = IntegerArray.mergeRows(intArray1);
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray3);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      int[] intArray1 = IntegerArray.copy(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      int int1 = (-4535);
      intArray2[7] = (-4535);
      intArray2[8] = 0;
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.max(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray0, 0, 3774);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3774
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[][] intArray0 = new int[5][8];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 194, 194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(0, 0, 0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string0 = IntegerArray.toString((String) null, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = IntegerArray.product(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(9, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumnsRange(intArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = IntegerArray.product(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(324, 324);
      assertNotNull(intArray0);
      assertEquals(324, intArray0.length);
      
      // Undeclared exception!
      IntegerArray.minIndex(intArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      int[] intArray1 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(0, 0, 0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[3];
      intArray1[0] = (-2701);
      String string0 = IntegerArray.toString(intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray0.length);
      
      int[][] intArray2 = IntegerArray.diagonal(3069, (-4925));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(3069, intArray2.length);
      
      // Undeclared exception!
      IntegerArray.minIndex(intArray2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      double[][] doubleArray0 = IntegerArray.int2double(intArray0);
      assertNotNull(doubleArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal((int[][]) null, (-1835));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.toString("i=?M|3", (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[][] intArray0 = new int[2][7];
      // Undeclared exception!
      try { 
        IntegerArray.insertRows(intArray0, 1013, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[][] intArray2 = IntegerArray.insertRows(intArray1, 0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(8, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[][] intArray0 = IntegerArray.diagonal(18, 18);
      assertNotNull(intArray0);
      assertEquals(18, intArray0.length);
      
      int[][] intArray1 = IntegerArray.insertColumns(intArray0, 18, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(18, intArray0.length);
      assertEquals(18, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-910);
      intArray0[2] = (-404);
      intArray0[3] = 3069;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1063;
      intArray0[7] = (-3009);
      intArray0[8] = 0;
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {1, (-910), (-404), 3069, 0, 0, 1063, (-3009), 0}, intArray0);
      assertEquals(7, int0);
      assertEquals(9, intArray0.length);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.insertRows(intArray1, (-969), intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -969 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = IntegerArray.floor(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray0, 9992, 9992);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = IntegerArray.sum(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = IntegerArray.deleteRange(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[7];
      intArray1[0] = 563;
      intArray1[1] = 0;
      intArray1[2] = (-1);
      intArray1[3] = 1;
      intArray1[4] = 3602;
      intArray1[5] = (-1);
      intArray1[6] = 5265;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      int[] intArray3 = IntegerArray.getRangeCopy(intArray1, 0, 0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {563, 0, (-1), 1, 3602, (-1), 5265}, intArray1);
      assertArrayEquals(new int[] {563}, intArray3);
      assertNotNull(intArray3);
      assertEquals(7, intArray1.length);
      assertEquals(1, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray3, 237, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension(intArray0, (-1042));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1042 out of bounds for length 6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.min(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int[] intArray3 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray3.length);
      
      int[] intArray4 = IntegerArray.insert(intArray2, 0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(6, intArray4.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getColumnDimension(intArray0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 44 out of bounds for length 1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[11];
      int int0 = IntegerArray.product(intArray0);
      assertEquals(0, int0);
      assertEquals(11, intArray0.length);
      
      int[] intArray1 = IntegerArray.insert(intArray0, 0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(11, intArray0.length);
      assertEquals(22, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = IntegerArray.cumProduct(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.fill((-17), (-17), (-17));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -17
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int[][] intArray0 = new int[9][8];
      int int0 = IntegerArray.min(intArray0[0]);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 3069;
      intArray2[2] = 1063;
      intArray2[3] = 0;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray0, (-1980), (-1980), 2764, (-1980));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4743
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1);
      int int1 = IntegerArray.minIndex(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(1, int1);
      assertEquals(3, intArray0.length);
      
      int[][] intArray1 = new int[5][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.getSubMatrixRangeCopy(intArray1, 0, 1, 138, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -136
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[9];
      intArray1[0] = 148;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1220);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1;
      int[][] intArray4 = IntegerArray.getRowsRangeCopy(intArray0, 1, 0);
      assertFalse(intArray4.equals((Object)intArray0));
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray0, intArray4);
      assertNotNull(intArray4);
      assertEquals(0, intArray4.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-910);
      intArray0[2] = (-404);
      intArray0[3] = 3069;
      intArray0[4] = 0;
      int[][] intArray1 = new int[0][3];
      int[][] intArray2 = IntegerArray.getColumnsCopy(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {1, (-910), (-404), 3069, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[8];
      intArray1[0] = (-753);
      intArray1[1] = 0;
      intArray1[2] = (-421);
      intArray1[3] = 841;
      intArray1[4] = 1063;
      intArray1[5] = 4156;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-421);
      intArray2[1] = 1063;
      intArray2[2] = (-753);
      intArray2[3] = 0;
      intArray2[4] = (-753);
      int int0 = IntegerArray.minIndex(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {(-753), 0, (-421), 841, 1063, 4156, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertEquals(8, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, (-1859));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1852
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.cumSum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.cumSum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[15];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray0, intArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      String string0 = IntegerArray.toString("", intArray0);
      assertNotNull(string0);
      assertEquals("       \n       \n       \n       \n       \n       ", string0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1);
      intArray1[1] = 4717;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 4717;
      intArray2[1] = 4717;
      intArray2[2] = 4717;
      intArray2[3] = 0;
      intArray2[4] = 4717;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 4717;
      intArray3[1] = (-1934);
      intArray3[2] = 4717;
      intArray3[3] = (-1);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-1934);
      intArray4[1] = 0;
      intArray4[2] = 4717;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 4717;
      intArray5[1] = (-1);
      intArray5[2] = (-1934);
      intArray5[3] = 0;
      intArray5[4] = 0;
      intArray5[5] = 0;
      intArray5[6] = (-1934);
      intArray5[7] = (-1934);
      intArray5[8] = (-1934);
      intArray0[4] = intArray5;
      String string0 = IntegerArray.toString("t", intArray0);
      assertNotNull(string0);
      assertEquals("t t t\nt t t t t\nt t t t\nt t t\nt t t t t t t t t", string0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray0, (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      int[][] intArray2 = IntegerArray.mergeColumns(intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[][] intArray3 = IntegerArray.mergeRows(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray1, 0, 685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[][] intArray1 = IntegerArray.mergeColumns(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 1235;
      intArray1[1] = 3147;
      intArray1[2] = (-1513);
      intArray1[3] = 2006;
      intArray1[4] = (-1);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 3147;
      intArray2[1] = 1105;
      intArray2[2] = (-1513);
      intArray2[3] = 3147;
      intArray2[4] = 3147;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 3147;
      intArray4[1] = (-1);
      intArray4[2] = (-1);
      intArray4[3] = 2006;
      intArray4[4] = (-1513);
      intArray4[5] = 0;
      intArray4[6] = (-2737);
      intArray4[7] = (-1);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2006;
      intArray5[1] = (-1);
      intArray5[2] = (-1513);
      intArray5[3] = (-2737);
      intArray5[4] = 0;
      intArray5[5] = (-2737);
      intArray5[6] = 3147;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 1235;
      intArray6[1] = (-1513);
      intArray6[2] = 1105;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      
      intArray7[0] = (-1513);
      intArray7[1] = 2006;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        IntegerArray.mergeColumns(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[][] intArray0 = new int[9][8];
      int[] intArray1 = new int[7];
      intArray1[0] = (-1024);
      intArray1[1] = 970;
      intArray1[2] = (-1860);
      intArray1[3] = 0;
      intArray1[4] = 238;
      intArray1[5] = 256;
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 238;
      intArray3[1] = (-1024);
      intArray3[2] = (-2024);
      intArray3[3] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 0;
      intArray4[1] = (-2024);
      intArray4[2] = (-1024);
      intArray4[3] = (-1024);
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = (-1860);
      intArray4[8] = (-1860);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-2024);
      intArray5[1] = 238;
      intArray5[2] = (-2024);
      intArray5[3] = 238;
      intArray5[4] = 0;
      intArray5[5] = 970;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 0;
      intArray6[1] = 256;
      intArray6[2] = (-1024);
      intArray6[3] = (-1024);
      intArray6[4] = 256;
      intArray6[5] = (-1024);
      intArray6[6] = 970;
      intArray6[7] = 970;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = 970;
      intArray7[1] = 238;
      intArray7[2] = 238;
      intArray7[3] = (-2024);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray5));
      
      intArray8[0] = 970;
      intArray8[1] = (-1);
      intArray8[2] = 256;
      intArray8[3] = (-1937);
      intArray8[4] = (-2024);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[6];
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray3));
      
      intArray9[0] = 0;
      intArray9[1] = 256;
      intArray9[2] = 0;
      intArray9[3] = 256;
      intArray9[4] = (-1631);
      intArray9[5] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, 237);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -228
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.copy((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      intArray0[1] = 1528;
      int int0 = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      int[] intArray1 = IntegerArray.copy(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1921, 1528, 1, 0}, intArray0);
      assertArrayEquals(new int[] {1921, 1528, 1, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray1, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.int2double((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.int2double((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(5, 5, 5);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int[][] intArray0 = IntegerArray.fill(0, 0, 0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[3];
      intArray1[0] = (-2701);
      intArray1[1] = 0;
      intArray1[2] = 0;
      int int0 = IntegerArray.sum(intArray1);
      assertArrayEquals(new int[] {(-2701), 0, 0}, intArray1);
      assertEquals((-2701), int0);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      // Undeclared exception!
      try { 
        IntegerArray.insertColumns(intArray0, 2524, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.insertColumns((int[][]) null, 394, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int int0 = 1;
      // Undeclared exception!
      try { 
        IntegerArray.insertColumns(intArray0, 1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.min(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int[] intArray3 = IntegerArray.cumProduct(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray3.length);
      
      int[] intArray4 = IntegerArray.insert(intArray2, 0, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray4);
      assertNotNull(intArray4);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(6, intArray4.length);
      
      int[][] intArray5 = IntegerArray.deleteRows(intArray0, intArray3);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray4));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray0));
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray5, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray3);
      assertNotNull(intArray5);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray3.length);
      assertEquals(0, intArray5.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int[][] intArray0 = new int[22][8];
      int[] intArray1 = IntegerArray.min(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(22, intArray0.length);
      assertEquals(8, intArray1.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRows(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 14 out of bounds for length 14
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      int int0 = 0;
      intArray1[1] = 0;
      int int1 = 777;
      intArray1[2] = 777;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.fill((-205), (-205));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -205
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int int0 = 0;
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = IntegerArray.max(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      
      int int1 = IntegerArray.min(intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(0, int1);
      assertEquals(1, intArray1.length);
      
      int int2 = (-1);
      int int3 = (-1874);
      // Undeclared exception!
      try { 
        IntegerArray.fill((-1), (-1874));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 38;
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {38, 0}, intArray0);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      
      int int1 = IntegerArray.minIndex(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {38, 0}, intArray0);
      assertEquals(1, int1);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      // Undeclared exception!
      try { 
        IntegerArray.getDiagonal(intArray0, (-2024));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2023
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-910);
      intArray0[2] = (-404);
      intArray0[3] = 3069;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1063;
      intArray0[7] = (-3009);
      intArray0[8] = 0;
      int int0 = IntegerArray.minIndex(intArray0);
      assertArrayEquals(new int[] {1, (-910), (-404), 3069, 0, 0, 1063, (-3009), 0}, intArray0);
      assertEquals(7, int0);
      assertEquals(9, intArray0.length);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      int[] intArray2 = IntegerArray.getDiagonal(intArray1, 0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy((int[]) null, 77, 1855);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy((int[]) null, 0, 3103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray0, (-2080), (-2080));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int[][] intArray0 = new int[9][8];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = (-2546);
      intArray1[5] = 4297;
      intArray1[6] = (-80);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 4297;
      intArray2[1] = 0;
      intArray2[2] = (-1652);
      intArray2[3] = (-80);
      intArray2[4] = (-80);
      intArray2[5] = 0;
      intArray2[6] = 4297;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1);
      intArray3[1] = (-2546);
      intArray3[2] = (-80);
      intArray3[3] = (-1652);
      intArray3[4] = (-1652);
      intArray3[5] = (-1);
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 0;
      intArray4[1] = (-2546);
      intArray4[2] = 1908;
      intArray4[3] = (-80);
      intArray4[4] = 0;
      intArray4[5] = (-1652);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-1652);
      intArray5[1] = (-723);
      intArray5[2] = 0;
      intArray5[3] = (-2546);
      intArray5[4] = (-1652);
      intArray5[5] = (-1);
      intArray5[6] = 0;
      intArray5[7] = 1908;
      intArray5[8] = (-1);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 0;
      intArray6[1] = (-1652);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = (-723);
      intArray7[1] = (-1);
      intArray7[2] = 0;
      intArray7[3] = 4297;
      intArray7[4] = 1908;
      intArray7[5] = 4297;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray3));
      
      intArray9[0] = 2159;
      intArray9[1] = 4297;
      intArray9[2] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int[][][] intArray0 = new int[1][8][8];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray0, (-34), (-34));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -34 out of bounds for length 8
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = IntegerArray.fill(2, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      
      int[][][] intArray2 = new int[0][0][4];
      int[] intArray3 = IntegerArray.getColumnCopy(intArray2, 23, 11);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int[][][] intArray0 = new int[8][0][7];
      int[][] intArray1 = new int[5][2];
      int[] intArray2 = new int[1];
      intArray2[0] = 202;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 202;
      intArray3[1] = 202;
      intArray3[2] = 202;
      intArray3[3] = 202;
      intArray1[1] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 202;
      intArray4[1] = 202;
      intArray4[2] = 202;
      intArray1[2] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 202;
      intArray5[1] = 202;
      intArray5[2] = 202;
      intArray5[3] = 202;
      intArray5[4] = 202;
      intArray1[3] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 0;
      intArray6[1] = 202;
      intArray6[2] = 202;
      intArray6[3] = (-1);
      intArray6[4] = 202;
      intArray6[5] = 202;
      intArray6[6] = 202;
      intArray6[7] = 202;
      intArray1[4] = intArray6;
      intArray0[0] = intArray1;
      int[][] intArray7 = new int[1][1];
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = intArray2;
      intArray0[1] = intArray7;
      int[][] intArray8 = new int[8][4];
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray1));
      
      intArray8[0] = intArray6;
      intArray8[1] = intArray4;
      intArray8[2] = intArray3;
      intArray8[3] = intArray5;
      intArray8[4] = intArray5;
      intArray8[5] = intArray5;
      intArray8[6] = intArray2;
      intArray8[7] = intArray4;
      intArray0[2] = intArray8;
      int[][] intArray9 = new int[4][5];
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray7));
      
      intArray9[0] = intArray4;
      intArray9[1] = intArray4;
      intArray9[2] = intArray3;
      intArray9[3] = intArray3;
      intArray0[3] = intArray9;
      int[][] intArray10 = new int[1][0];
      assertFalse(intArray10.equals((Object)intArray9));
      assertFalse(intArray10.equals((Object)intArray1));
      assertFalse(intArray10.equals((Object)intArray8));
      assertFalse(intArray10.equals((Object)intArray7));
      
      intArray10[0] = intArray5;
      intArray0[4] = intArray10;
      int[][] intArray11 = new int[9][8];
      assertFalse(intArray11.equals((Object)intArray10));
      assertFalse(intArray11.equals((Object)intArray8));
      assertFalse(intArray11.equals((Object)intArray7));
      assertFalse(intArray11.equals((Object)intArray1));
      assertFalse(intArray11.equals((Object)intArray9));
      
      intArray11[0] = intArray2;
      intArray11[1] = intArray5;
      intArray11[2] = intArray3;
      intArray11[3] = intArray5;
      intArray11[4] = intArray3;
      intArray11[5] = intArray4;
      intArray11[6] = intArray5;
      intArray11[7] = intArray3;
      intArray11[8] = intArray3;
      intArray0[5] = intArray11;
      int[][] intArray12 = new int[1][9];
      assertFalse(intArray12.equals((Object)intArray9));
      assertFalse(intArray12.equals((Object)intArray11));
      assertFalse(intArray12.equals((Object)intArray10));
      assertFalse(intArray12.equals((Object)intArray1));
      assertFalse(intArray12.equals((Object)intArray7));
      assertFalse(intArray12.equals((Object)intArray8));
      
      intArray12[0] = intArray6;
      intArray0[6] = intArray12;
      int[][] intArray13 = new int[8][9];
      assertFalse(intArray13.equals((Object)intArray11));
      assertFalse(intArray13.equals((Object)intArray9));
      assertFalse(intArray13.equals((Object)intArray10));
      assertFalse(intArray13.equals((Object)intArray7));
      assertFalse(intArray13.equals((Object)intArray1));
      assertFalse(intArray13.equals((Object)intArray8));
      assertFalse(intArray13.equals((Object)intArray12));
      
      intArray13[0] = intArray4;
      intArray13[1] = intArray3;
      int[] intArray14 = new int[1];
      assertFalse(intArray14.equals((Object)intArray6));
      assertFalse(intArray14.equals((Object)intArray5));
      assertFalse(intArray14.equals((Object)intArray3));
      assertFalse(intArray14.equals((Object)intArray2));
      assertFalse(intArray14.equals((Object)intArray4));
      
      intArray14[0] = 202;
      intArray13[2] = intArray14;
      intArray13[3] = intArray3;
      intArray13[4] = intArray3;
      intArray13[5] = intArray4;
      intArray13[6] = intArray5;
      intArray13[7] = intArray4;
      intArray0[7] = intArray13;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray0, 202, (-73));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 202 out of bounds for length 5
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int[][][] intArray0 = new int[1][3][5];
      int[] intArray1 = IntegerArray.getColumnCopy(intArray0, 1, 1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.product((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.product((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, 118, 114);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[7];
      intArray1[0] = 563;
      intArray1[1] = 0;
      intArray1[2] = 563;
      intArray1[3] = 1;
      intArray1[4] = 3602;
      intArray1[5] = (-1);
      intArray0[0] = intArray1;
      int[][] intArray2 = IntegerArray.deleteRowsRange(intArray0, 1, (-1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray2.length);
      
      // Undeclared exception!
      try { 
        IntegerArray.deleteRange(intArray1, 0, 1429);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1423
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int[][] intArray0 = new int[2][5];
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, 1508, 1508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[9];
      intArray1[0] = 148;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1220);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = (-1220);
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = 1;
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 1;
      intArray5[3] = 1;
      intArray5[4] = 148;
      intArray5[5] = 1;
      intArray5[6] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 4975;
      intArray6[1] = 148;
      intArray6[2] = 1;
      intArray6[3] = 0;
      intArray6[4] = 1;
      intArray6[5] = 1;
      intArray6[6] = (-1220);
      intArray6[7] = 1;
      intArray6[8] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      intArray7[0] = 148;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 0;
      intArray8[1] = 1;
      intArray8[2] = (-1220);
      intArray8[3] = 1;
      intArray8[4] = 0;
      intArray8[5] = 1;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        IntegerArray.deleteRowsRange(intArray0, 1418, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int[][] intArray0 = new int[0][6];
      String string0 = IntegerArray.toString(intArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      String string0 = IntegerArray.toString(intArray0);
      assertEquals("0 0 0 0 0 0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int[][] intArray0 = new int[7][1];
      int[] intArray1 = new int[5];
      intArray1[0] = 2476;
      intArray1[1] = 4065;
      intArray1[2] = 0;
      intArray1[3] = 1387;
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 4065;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 4065;
      intArray3[2] = (-819);
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = (-1050);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = (-1);
      intArray4[1] = (-1050);
      intArray4[2] = 0;
      intArray4[3] = 1387;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = (-1);
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = (-819);
      intArray5[4] = (-1);
      intArray5[5] = 1387;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 1387;
      intArray6[1] = 0;
      intArray6[2] = (-819);
      intArray6[3] = (-1050);
      intArray6[4] = 0;
      intArray6[5] = (-1);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = (-1050);
      intArray7[1] = (-819);
      intArray7[2] = 2476;
      intArray7[3] = 2476;
      intArray7[4] = (-1050);
      intArray7[5] = (-1804);
      intArray7[6] = (-819);
      intArray7[7] = 0;
      intArray7[8] = 1387;
      intArray0[6] = intArray7;
      String string0 = IntegerArray.toString(intArray0);
      assertEquals("2476 4065 0 1387 0\n0 0 4065\n0 4065 -819 0 0 -1050\n-1 -1050 0 1387\n-1 0 0 -819 -1 1387\n1387 0 -819 -1050 0 -1\n-1050 -819 2476 2476 -1050 -1804 -819 0 1387", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[][] intArray0 = new int[0][5];
      // Undeclared exception!
      try { 
        IntegerArray.sum(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.diagonal((-2787), (-2787));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2787
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = (-1145);
      // Undeclared exception!
      try { 
        IntegerArray.diagonal((-1145), (-1145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1145
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = IntegerArray.sum(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int[][] intArray0 = new int[6][3];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-952);
      intArray1[2] = (-1);
      intArray1[3] = 2535;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = (-952);
      intArray2[1] = (-1);
      intArray2[2] = (-1);
      intArray2[3] = (-1);
      intArray2[4] = (-952);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-952);
      intArray3[1] = 0;
      intArray3[2] = (-952);
      intArray3[3] = 2535;
      intArray3[4] = 0;
      intArray3[5] = (-952);
      intArray3[6] = 2535;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = (-1);
      intArray4[2] = 0;
      intArray4[3] = (-1);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = (-1);
      intArray5[1] = 1137;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 0;
      intArray5[5] = (-1);
      intArray5[6] = 2535;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 1;
      intArray6[1] = 2535;
      intArray6[2] = 2535;
      intArray6[3] = 1137;
      intArray6[4] = 430;
      intArray6[5] = 0;
      intArray6[6] = 1137;
      intArray6[7] = (-1);
      intArray6[8] = 2535;
      intArray0[5] = intArray6;
      int[] intArray7 = IntegerArray.sum(intArray0);
      assertArrayEquals(new int[] {(-1904), 2718, 1581, 6205}, intArray7);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[][] intArray0 = new int[22][7];
      int[] intArray1 = IntegerArray.min(intArray0);
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns((int[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        IntegerArray.deleteColumns(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.floor((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = IntegerArray.merge(intArray0);
      assertEquals(48, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = new int[3];
      int int0 = 1;
      intArray1[0] = 1;
      intArray1[1] = 602;
      int int1 = 0;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 602;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 602;
      intArray3[1] = 602;
      intArray3[2] = (-3356);
      intArray3[3] = 602;
      intArray3[4] = 0;
      intArray3[5] = 1942;
      intArray0[2] = intArray3;
      IntegerArray.merge(intArray0);
      // Undeclared exception!
      try { 
        IntegerArray.floor((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1541);
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-450);
      intArray0[3] = 0;
      intArray0[4] = 0;
      IntegerArray.sum(intArray0);
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy(intArray0, (-9), (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -9 out of bounds for length 1
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int[][] intArray0 = new int[9][4];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2484;
      intArray1[3] = 1;
      intArray1[4] = (-4489);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2484;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 2484;
      intArray4[3] = (-1);
      intArray4[4] = 0;
      intArray4[5] = 1;
      intArray4[6] = 1;
      intArray4[7] = 0;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = (-1);
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 1;
      intArray7[1] = 2484;
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = (-1);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = (-1);
      intArray8[1] = 1;
      intArray8[2] = 0;
      intArray8[3] = 1;
      intArray8[4] = (-1);
      intArray8[5] = (-4489);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      intArray9[0] = 0;
      intArray9[1] = 1;
      intArray9[2] = (-1);
      intArray9[3] = 0;
      intArray9[4] = 0;
      intArray9[5] = 1;
      intArray9[6] = 1;
      intArray0[8] = intArray9;
      int[][] intArray10 = IntegerArray.getRowsRangeCopy(intArray0, 0, 1);
      assertEquals(2, intArray10.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[][] doubleArray0 = new double[12][5];
      int[][] intArray0 = IntegerArray.floor(doubleArray0);
      assertEquals(12, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1910.2256);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-83.304736247);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 2201.5;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-83.304736247);
      doubleArray8[3] = (-207.0);
      doubleArray8[4] = (-83.304736247);
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      int[][] intArray0 = IntegerArray.floor(doubleArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy((int[][]) null, 75, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int[][] intArrayArray0 = null;
      int int0 = (-2002);
      // Undeclared exception!
      try { 
        IntegerArray.getRowsRangeCopy((int[][]) null, (-2002), (-2002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.copy((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      IntegerArray.max(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.copy((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.toString((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.toString((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        IntegerArray.max(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.max((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        IntegerArray.max((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int[][] intArray0 = new int[0][2];
      // Undeclared exception!
      try { 
        IntegerArray.copy(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 0;
      IntegerArray.fill(0, 0);
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        IntegerArray.copy(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      int[] intArray2 = IntegerArray.min(intArray0);
      int[] intArray3 = IntegerArray.delete(intArray1, intArray1);
      IntegerArray.deleteRows(intArray0, intArray1);
      IntegerArray.cumSum(intArray3);
      // Undeclared exception!
      try { 
        IntegerArray.getRangeCopy(intArray2, 755, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -754
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int[] intArray0 = new int[24];
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3187;
      int int0 = (-2058);
      intArray0[1] = (-2058);
      intArray0[2] = (-1535);
      intArray0[3] = 0;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        IntegerArray.delete(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int[] intArray0 = IntegerArray.fill(2, 2);
      int[][] intArray1 = new int[1][2];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[14];
      intArray1[0] = 0;
      int[] intArray2 = IntegerArray.cumSum(intArray1);
      int[][] intArray3 = IntegerArray.getColumnsCopy(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertEquals(14, intArray2.length);
      assertNotSame(intArray3, intArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      intArray1[1] = 5111;
      intArray1[2] = 0;
      intArray1[3] = (-2133);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = (-2133);
      intArray2[2] = 5111;
      intArray2[3] = (-1);
      intArray2[4] = (-1);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = (-1);
      intArray3[1] = 0;
      intArray3[2] = 4213;
      intArray3[3] = (-2133);
      intArray3[4] = 5111;
      intArray3[5] = (-1);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = (-1);
      intArray4[1] = 5111;
      intArray4[2] = 4213;
      intArray4[3] = 1820;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-1);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 0;
      intArray7[1] = 1820;
      intArray7[2] = (-90);
      intArray7[3] = 0;
      intArray7[4] = (-1);
      intArray7[5] = 0;
      intArray7[6] = 4213;
      intArray7[7] = (-1);
      intArray7[8] = 5111;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      intArray8[0] = (-90);
      intArray8[1] = 1820;
      intArray8[2] = 6242;
      intArray8[3] = 4213;
      intArray8[4] = 1820;
      intArray8[5] = 0;
      intArray8[6] = 5111;
      intArray8[7] = 0;
      intArray8[8] = (-2133);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[6];
      intArray9[0] = (-1);
      intArray9[1] = 0;
      intArray9[2] = 0;
      intArray9[3] = 4213;
      intArray9[4] = 0;
      intArray9[5] = (-2133);
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnsCopy(intArray0, intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      int[][] intArray1 = IntegerArray.getColumnsCopy(intArray0, intArray0[3]);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntegerArray.min((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[][] intArray1 = new int[0][7];
      // Undeclared exception!
      try { 
        IntegerArray.getRowsCopy(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      int[][] intArray2 = IntegerArray.getRowsCopy(intArray0, intArray1);
      // Undeclared exception!
      try { 
        IntegerArray.insertRows(intArray2, 1261, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1353);
      intArray1[3] = 129;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = (-1353);
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 129;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 129;
      intArray3[2] = (-1353);
      intArray3[3] = 129;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 129;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 129;
      intArray4[4] = (-1353);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 129;
      intArray5[1] = 129;
      intArray5[2] = (-1353);
      intArray5[3] = (-1353);
      intArray5[4] = (-320);
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray5[8] = 2243;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = (-1353);
      intArray6[1] = 129;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 129;
      intArray6[6] = 2243;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = (-320);
      intArray7[1] = (-1353);
      intArray7[2] = (-1353);
      intArray7[3] = (-1);
      intArray7[4] = 0;
      intArray7[5] = 2243;
      intArray7[6] = 0;
      intArray7[7] = 0;
      intArray7[8] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      intArray9[0] = 0;
      intArray9[1] = 129;
      intArray9[2] = 129;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        IntegerArray.getRowsCopy(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1353 out of bounds for length 9
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int[][] intArray0 = new int[5][8];
      int[][] intArray1 = IntegerArray.getRowsCopy(intArray0, intArray0[2]);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = IntegerArray.max(intArray0);
      IntegerArray.min(intArray1);
      IntegerArray.max(intArray1);
      IntegerArray.getRangeCopy(intArray1, 0, 0);
      IntegerArray.int2double(intArray1);
      int[] intArray2 = IntegerArray.getColumnCopy(intArray0, 0);
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = IntegerArray.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int[][] intArray0 = new int[4][7];
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray0, 399);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 399 out of bounds for length 7
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2166;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 3970;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      intArray0[8] = 1;
      IntegerArray.min(intArray0);
      IntegerArray.max(intArray0);
      IntegerArray.sum(intArray0);
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        IntegerArray.getColumnCopy(intArray1, 3970);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3970 out of bounds for length 9
         //
         verifyException("org.math.array.IntegerArray", e);
      }
  }
}
