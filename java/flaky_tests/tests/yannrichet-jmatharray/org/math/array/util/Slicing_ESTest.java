/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:16:21 GMT 2022
 */

package org.math.array.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.math.array.util.Slicing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slicing_ESTest extends Slicing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 15.559165385202633;
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[][] doubleArray1 = new double[2][4];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-353.2364927436);
      doubleArray2[2] = 85.6418667;
      doubleArray2[3] = 0.2;
      doubleArray2[4] = 1791.0;
      doubleArray2[5] = (-363.443);
      doubleArray1[0] = doubleArray2;
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The element = 0.0 0.0
         // 0.0 0.0 is in 0 slices :
         // slice[0]  contains 0 elements
         //   min = 0.5 0.0  max = 1.5 0.0
         //   elements indices : 
         // 
         // slice[1]  contains 0 elements
         //   min = -176.6182463718 0.0  max = -529.8547391154 0.0
         //   elements indices : 
         // 
         // slice[2]  contains 0 elements
         //   min = 42.82093335 0.0  max = 128.46280005 0.0
         //   elements indices : 
         // 
         // slice[3]  contains 0 elements
         //   min = 0.1 0.0  max = 0.30000000000000004 0.0
         //   elements indices : 
         // 
         // slice[4]  contains 0 elements
         //   min = 895.5 0.0  max = 2686.5 0.0
         //   elements indices : 
         // 
         // slice[5]  contains 0 elements
         //   min = -181.7215 0.0  max = -545.1645 0.0
         //   elements indices : 
         // 
         // slice[6]  contains 0 elements
         //   min = 0.5 0.0  max = 1.5 0.0
         //   elements indices : 
         // 
         // slice[7]  contains 0 elements
         //   min = -176.6182463718 0.0  max = -529.8547391154 0.0
         //   elements indices : 
         // 
         // slice[8]  contains 0 elements
         //   min = 42.82093335 0.0  max = 128.46280005 0.0
         //   elements indices : 
         // 
         // slice[9]  contains 0 elements
         //   min = 0.1 0.0  max = 0.30000000000000004 0.0
         //   elements indices : 
         // 
         // slice[10]  contains 0 elements
         //   min = 895.5 0.0  max = 2686.5 0.0
         //   elements indices : 
         // 
         // slice[11]  contains 0 elements
         //   min = -181.7215 0.0  max = -545.1645 0.0
         //   elements indices : 
         // 
         // slice[12]  contains 0 elements
         //   min = 0.5 0.0  max = 1.5 0.0
         //   elements indices : 
         // 
         // slice[13]  contains 0 elements
         //   min = -176.6182463718 0.0  max = -529.8547391154 0.0
         //   elements indices : 
         // 
         // slice[14]  contains 0 elements
         //   min = 42.82093335 0.0  max = 128.46280005 0.0
         //   elements indices : 
         // 
         // slice[15]  contains 0 elements
         //   min = 0.1 0.0  max = 0.30000000000000004 0.0
         //   elements indices : 
         // 
         // slice[16]  contains 0 elements
         //   min = 895.5 0.0  max = 2686.5 0.0
         //   elements indices : 
         // 
         // slice[17]  contains 0 elements
         //   min = -181.7215 0.0  max = -545.1645 0.0
         //   elements indices : 
         // 
         // slice[18]  contains 0 elements
         //   min = 0.5 0.0  max = 1.5 0.0
         //   elements indices : 
         // 
         // slice[19]  contains 0 elements
         //   min = -176.6182463718 0.0  max = -529.8547391154 0.0
         //   elements indices : 
         // 
         // slice[20]  contains 0 elements
         //   min = 42.82093335 0.0  max = 128.46280005 0.0
         //   elements indices : 
         // 
         // slice[21]  contains 0 elements
         //   min = 0.1 0.0  max = 0.30000000000000004 0.0
         //   elements indices : 
         // 
         // slice[22]  contains 0 elements
         //   min = 895.5 0.0  max = 2686.5 0.0
         //   elements indices : 
         // 
         // slice[23]  contains 0 elements
         //   min = -181.7215 0.0  max = -545.1645 0.0
         //   elements indices : 
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[][] doubleArray1 = new double[2][5];
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1834.48;
      doubleArray1[0] = doubleArray2;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      slicing0.getSlicingMatrix();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[][] doubleArray1 = new double[7][7];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      slicing0.findSlice(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        slicing0.findSlice((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        slicing0.findSlice(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 0 elements instead of 2 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing((double[][]) null, (double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row 0 have 7 columns instead of 1 columns expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, (int[]) null, "OLC=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      int[] intArray0 = new int[1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
      slicing0.toString("i_ UZWF");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      int[] intArray0 = new int[7];
      intArray0[0] = 1236;
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too much slices defined for the values to slice... you should try to reduce the nyumber of slices !
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2864.051;
      slicing0.findSlice(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      slicing0.findSlice(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      slicing0.getSlicesCenters();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      slicing0.getSlicesWidths();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray0);
      slicing0.getSlicesCardinals();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      int[] intArray0 = new int[7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "AUTO");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      int[] intArray0 = new int[7];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, intArray0, "|[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The bounds type : |[is unknown. You must specify AUTO or UNIFORM.
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Slicing.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      double[][] doubleArray1 = new double[4][1];
      Slicing slicing0 = null;
      try {
        slicing0 = new Slicing(doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Slicing", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
      slicing0.getSlicesIndexes();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Slicing slicing0 = new Slicing(doubleArray0, doubleArray0);
  }
}
