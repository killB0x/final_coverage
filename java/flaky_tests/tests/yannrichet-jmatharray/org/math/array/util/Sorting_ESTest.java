/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:18:59 GMT 2022
 */

package org.math.array.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.math.array.util.Sorting;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sorting_ESTest extends Sorting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Sorting sorting0 = new Sorting(doubleArray0, true);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      Sorting sorting0 = new Sorting(doubleArray0, false);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(5, doubleArray0.length);
      
      int int0 = sorting0.getIndex(0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Sorting sorting0 = new Sorting(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = sorting0.getIndex();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {3, 4, 2, 0, 1}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sorting.invertIndex((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Sorting", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-365);
      // Undeclared exception!
      try { 
        Sorting.invertIndex(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -365 out of bounds for length 2
         //
         verifyException("org.math.array.util.Sorting", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Sorting sorting0 = new Sorting(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        sorting0.getIndex(1354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1354 out of bounds for length 4
         //
         verifyException("org.math.array.util.Sorting", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sorting sorting0 = null;
      try {
        sorting0 = new Sorting((double[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Sorting", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 3564.0;
      Sorting sorting0 = new Sorting(doubleArray0, true);
      assertArrayEquals(new double[] {0.0, 3564.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = Sorting.invertIndex(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Sorting sorting0 = new Sorting(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sorting0);
      assertEquals(5, doubleArray0.length);
      
      int int0 = sorting0.getIndex(0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Sorting.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Sorting sorting0 = new Sorting(doubleArray0, true);
      int[] intArray0 = sorting0.getIndex();
      int[] intArray1 = Sorting.invertIndex(intArray0);
      assertNotSame(intArray1, intArray0);
  }
}
