/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:22:46 GMT 2022
 */

package org.math.array.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.math.array.util.Function;
import org.math.array.util.Random;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Random_ESTest extends Random_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.cauchy(0.0, 0.0);
      Random random0 = new Random();
      Random.logNormal((-3407.721473283306), (-2.0));
      Random.triangular(0.0, 0.0);
      Random.beta(0.723676860332489, 0.0);
      Random.raw();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Random.cauchy(2656.19541049167, (-3270.3439559118));
      Random.raw();
      Random.weibull((-472.18487686605), (-2947.34226));
      Random.triangular(1.000090498940547, 0.45623308420181274);
      Random.logNormal((-0.002119613639192301), 3236.572954081906);
      Random.normal(1.000090498940547, 0.8042950954458471);
      Random.triangular((-472.18487686605), 813.0306598975, 3252.0580676278837);
      Random.cauchy(899.9581464042316, (-472.18487686605));
      Random.dirac(doubleArray0, doubleArray0);
      Random.exponential(Double.POSITIVE_INFINITY);
      Random.exponential((-0.002119613639192301));
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Random.dirac(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 9.007199254740992E15;
      doubleArray0[1] = 0.9999998211860657;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 720.4734;
      doubleArray0[4] = (-2942.2);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.9999998211860657;
      doubleArray1[1] = (-2942.2);
      doubleArray1[2] = 0.9999998211860657;
      doubleArray1[3] = 9.007199254740992E15;
      doubleArray1[4] = 9.007199254740992E15;
      doubleArray1[5] = 9.007199254740992E15;
      doubleArray1[6] = 9.007199254740992E15;
      Random.dirac(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2946.3477213131187);
      doubleArray0[2] = 2656.19541049167;
      doubleArray0[3] = 1253.852857982626;
      doubleArray0[4] = (-520.0);
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      Random.randInt(0, 0);
      double double0 = 0.0;
      double double1 = 0.021602869033813477;
      Random.normal(0.0, 0.021602869033813477);
      Random.raw();
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double double2 = 0.9999998211860657;
      double double3 = (-2.0);
      // Undeclared exception!
      Random.rejection(function0, 0.9999998211860657, 0.9999998211860657, (-2.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.chi2((-21));
      Random.triangular(0.0, 0.0, 0.0);
      Random random0 = new Random();
      Random.normal(3915.980278044903, 0.0);
      // Undeclared exception!
      try { 
        Random.rejection((Function) null, 840.6649954, 3.1885489432859027, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.uniform(0.0, 0.0);
      Random.raw();
      Random.triangular(0.0, 0.0, 0.0);
      Random.raw();
      Random.weibull((-4796.42), 0.0);
      double double0 = 3116.379;
      // Undeclared exception!
      Random.beta(3116.379, 3116.379);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      Random.chi2(13859749);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.beta(0.021602869033813477, 0.021602869033813477);
      Random.weibull(0.021602869033813477, (-130.10475829));
      Random.exponential(6.283185307179586);
      Random.exponential(0.0);
      Random.beta(0.0, Double.POSITIVE_INFINITY);
      Random.beta(0.0, 0.0);
      Random.cauchy(Double.NaN, 0.0);
      Random.chi2((-319));
      Random.exponential((-3118.0));
      Random.beta(0.0, 0.0);
      Random.normal(0.03533391423052908, 0.0);
      Random.uniform(1.0, (-1193.09887283099));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      Random.rejection(function0, 0.0, 0.0, 0.0);
      Random.weibull(0.0, 0.0);
      Random.uniform((-3654.672531), (-2010.5888));
      Random.logNormal(0.0, 0.0);
      Random random0 = new Random();
      Random.cauchy(0.45623308420181274, 0.0);
      Random.raw();
      Random.weibull(1.0, 617.2050310009073);
      Random.triangular((-3274.0044798458625), Double.NaN, 0.0);
      Random.triangular((-3274.0044798458625), (-2010.5888));
      Random.raw();
      Random.logNormal(Double.NaN, 0.0);
      Random.raw();
      Random.triangular(0.0, 0.0, (-1581.356897));
      Random.cauchy(1386.195, 1571.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-3654.672531);
      doubleArray0[2] = 0.9996397261582772;
      doubleArray0[3] = 0.7700356245040894;
      doubleArray0[4] = 0.45623308420181274;
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.chi2((-2190));
      Random.normal(0.0, 0.0);
      Random.normal(0.0, 0.0);
      Random.normal(0.0, 0.0);
      Random.chi2((-2190));
      Random.triangular(458.0, (-2.0), 0.0);
      Random.normal(0.0, 0.0);
      Random.exponential(0.0);
      Random.uniform(0.0, 0.0);
      Random.cauchy(207.5, 0.0);
      Random.triangular(0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.triangular(0.021602869033813477, 0.0, 0.0);
      Random.uniform(0.0, 0.0);
      Random.cauchy(0.021602869033813477, 0.021602869033813477);
      Random.triangular(0.021602869033813477, 0.0, 1.0);
      Random random0 = new Random();
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      Random.rejection(function0, (-1272.2772), 383.4, 0.021602869033813477);
      Random.weibull(0.021602869033813477, 0.9999998211860657);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.021602869033813477;
      doubleArray0[3] = 0.021602869033813477;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      Random.dirac(doubleArray0, doubleArray0);
      Function function1 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function1).f(anyDouble());
      Random.rejection(function1, 0.0, 0.1474141950779323, 0.02939593390897717);
      Random.uniform(6.283185307179586, 364.7959048);
      Function function2 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function2).f(anyDouble());
      // Undeclared exception!
      Random.rejection(function2, 3998.5993772277093, (-1.0), 1.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Random.raw();
      assertEquals(0.2860679030418396, double0, 0.01);
      
      Random.triangular(0.9978994727134705, (-2.0), (-2.0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.triangular(1.0, 0.0, (-365.6662292));
      Random.raw();
      Random.triangular((-828.05716), (-828.05716), (-643.63449));
      Random.randInt(480, (-1856));
      Random.weibull((-1.0), (-365.6662292));
      Random.cauchy((-1.0), 1.0);
      Random.weibull((-1669.4094610054933), 480);
      Random.normal((-1271), 0.021602869033813477);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-650.0386557566761);
      doubleArray0[2] = (-793.335074769312);
      doubleArray0[3] = (-643.63449);
      doubleArray0[4] = (-793.335074769312);
      doubleArray0[5] = (-1669.4094610054933);
      doubleArray0[6] = 0.021602869033813477;
      doubleArray0[7] = (-793.335074769312);
      Random.dirac(doubleArray0, doubleArray0);
      Random.dirac(doubleArray0, doubleArray0);
      Random.exponential((-1.0));
      Random.beta(0.0, 4.656613E-10);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      Random.rejection(function0, (-1669.4094610054933), (-828.05716), (-643.63449));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3377.14717701);
      Random.cauchy(0.0, (-3377.14717701));
      double double2 = 0.0;
      Random.weibull(0.0, (-3377.14717701));
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      Random.rejection(function0, 3525.444378030866, 0.0, 2668.751037);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Random.weibull((-1778.5), 1009.60077);
      Random.logNormal((-1778.5), 1009.60077);
      Random.logNormal(3.141592653589793, 0.0);
      Random random0 = new Random();
      Random.normal(0.0, (-3219.8143038041));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random random0 = new Random();
      assertNotNull(random0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1900.75449574);
      doubleArray0[1] = (-786.515055522);
      doubleArray0[2] = 0.5;
      doubleArray0[3] = 1082.52;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2321.47001645609);
      doubleArray0[6] = 909.196289;
      doubleArray0[7] = 0.0;
      Random.dirac(doubleArray0, doubleArray0);
      Random.RandEngine = random0.RandEngine;
      double double0 = (-2246.72);
      // Undeclared exception!
      Random.beta((-2246.72), (-2246.72));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.chi2(1);
      Random.logNormal(3.8552626896916675, 0.0);
      Random.cauchy((-926.514004), (-5103.5));
      Random.chi2((-3010));
      Random random0 = new Random();
      Random.uniform(1, 1.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 948.024451;
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2656.19541049167;
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.logNormal(0.5, 0.5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.weibull((-2067.7), 1843.8926722538379);
      Random.chi2(2550);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Random.dirac(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.uniform(1823.2294505590062, 1823.2294505590062);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-93.38);
      doubleArray0[3] = 2645.5288386;
      doubleArray0[4] = (-2216.3871519932372);
      doubleArray0[5] = 2047.49004737;
      double double0 = Random.dirac(doubleArray0, doubleArray0);
      assertEquals((-93.38), double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-93.38), 2645.5288386, (-2216.3871519932372), 2047.49004737}, doubleArray0, 0.01);
      
      double double1 = Random.weibull(0.0, (-93.38));
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Random.exponential(2366.6557658562);
      assertEquals(6.902615769205128E-5, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Random.exponential(2041.50590724916);
      assertEquals(1.4354203591772165E-4, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = Random.beta(0.5, 2645.5288386);
      assertEquals(5.746176611609109E-5, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = Random.logNormal((-1427.6953), 0.0);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      
      double double6 = Random.uniform(0.0, 2645.5288386);
      assertEquals(1372.8835914629085, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      
      double double7 = Random.exponential((-2216.3871519932372));
      assertEquals((-1.0806304068282356E-4), double7, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      Random random0 = new Random();
      assertNotNull(random0);
      
      double double8 = Random.triangular(2041.50590724916, 2041.50590724916);
      assertEquals(2041.50590724916, double8, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      
      double double9 = Random.uniform(245.59863991543256, 0.0);
      assertEquals(151.08592588251514, double9, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      
      double double10 = Random.raw();
      assertEquals(0.415302038192749, double10, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      
      double double11 = Random.weibull(0.45623308420181274, 2366.6557658562);
      assertEquals(2.1899016349912914, double11, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      Random.rejection(function0, 2041.50590724916, 1.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Random.exponential((-2297.652968265951));
      assertEquals((-1.9028798041011754E-5), double0, 0.01);
      
      double double1 = Random.exponential(1095.0);
      assertEquals(0.0013520336413275166, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Random.normal((-910.906688628312), 1.4442046322789105E-4);
      assertEquals((-910.9068701638805), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Random random0 = new Random();
      assertNotNull(random0);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      double double3 = Random.rejection(function0, (-2297.652968265951), (-3.929698952176086E-4), 0.0);
      assertEquals((-1.1059176326728238E-4), double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = Random.weibull((-2585.8859), (-3.929698952176086E-4));
      assertEquals(-0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = Random.triangular(1933.5, (-910.9065818954708), 1095.0);
      assertEquals(3294.5783025149394, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = Random.exponential(1987.73895873762);
      assertEquals(2.0660135715683275E-4, double6, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random random0 = new Random();
      assertNotNull(random0);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      Random.rejection(function0, 2.0, 2.0, 0.45623308420181274);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 990.977128715053;
      double double1 = Random.triangular(990.977128715053, 990.977128715053, 990.977128715053);
      assertEquals(990.977128715053, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = Random.raw();
      assertEquals(0.5613018870353699, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int0 = 300;
      double double3 = Random.chi2(300);
      assertEquals(295.77587893260335, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double double4 = 0.0;
      double double5 = 1.0;
      // Undeclared exception!
      Random.rejection(function0, 0.24804502725601196, 0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Random.dirac((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Random random0 = new Random();
      assertNotNull(random0);
      
      double double0 = Random.cauchy(0.021602869033813477, 0.5);
      assertEquals(1.0354874139989463, double0, 0.01);
      
      double double1 = Random.exponential(0.9999998211860657);
      assertEquals(1.1967746673661364, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = Random.randInt(0, 492);
      assertEquals(152, int0);
      
      double double2 = Random.exponential(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      double double0 = Random.rejection(function0, (-2085.01329117), 2390.014476573763, (-2085.01329117));
      assertEquals(1338.7331068325125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      double double0 = Random.rejection(function0, 0.0, 1321.27, 0.0);
      assertEquals(1159.1419336014985, double0, 0.01);
      
      double double1 = Random.triangular(1362.691885921, 0.0);
      assertEquals(409.62151535692124, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = Random.randInt(32, 32);
      assertEquals(32, int0);
      
      double double2 = Random.triangular(0.0, 0.0, (-2523.748254509733));
      assertEquals((-4304.29370172463), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = Random.exponential(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Random.beta(1.0, 1.0);
      assertEquals(0.07953072416801694, double0, 0.01);
      
      int int0 = Random.randInt(4193, 4193);
      assertEquals(4193, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = Random.cauchy(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Random.exponential(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Random.triangular(0.0, 1.0, (-1.0));
      assertEquals((-1.8488235522663587), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Random.raw();
      assertEquals(0.44409865140914917, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      int int0 = Random.randInt(67890, 27);
      assertEquals(23208, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      Random.beta((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = Random.beta(1.0, 1.0);
      assertEquals(0.8157283203757626, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Random.dirac((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = Random.triangular(1823.58479, 1823.58479);
      assertEquals(1823.58479, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = Random.beta(3.141592653589793, 3.141592653589793);
      assertEquals(0.7616467054320183, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 911.7499606;
      double double1 = Random.triangular(911.7499606, (-2.0));
      assertEquals(598.4897130635676, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      Random.beta(425.1604341855558, 114.5226014);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = Random.triangular(1823.5847897442, 1823.5847897442, 1823.5847897442);
      assertEquals(1823.5847897442, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = Random.triangular(2844.62, 2844.62, 0.45623308420181274);
      assertEquals((-1352.2133665337954), double0, 0.01);
      
      double double1 = Random.cauchy(0.45623308420181274, (-913.9105702523726));
      assertEquals(24548.962313309865, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Random.raw();
      assertEquals(0.8829547762870789, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = Random.chi2(2579);
      assertEquals(2477.9592092080393, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Random.normal(0.0, 0.0);
      double double0 = Random.normal((-3575.950044), 0.0);
      assertEquals((-3575.950044), double0, 0.01);
  }
}
