/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:07:42 GMT 2022
 */

package org.math.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatFlagsException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.math.array.DoubleArray;
import org.math.array.util.Function;
import org.math.array.util.IndexFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleArray_ESTest extends DoubleArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      DoubleArray.maxIndex(doubleArray0);
      double[][] doubleArray1 = DoubleArray.resize(doubleArray0, 541, 541);
      // Undeclared exception!
      DoubleArray.max(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.toString("x:-%<n|!V", doubleArray1);
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '<'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[][] doubleArray1 = DoubleArray.getSubMatrixRangeCopy(doubleArray0, 0, 0, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      DoubleArray.insert(doubleArray2, 0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1352;
      double double0 = (-4509.232792665828);
      DoubleArray.increment(1352, (double) 1352, (-4509.232792665828));
      DoubleArray.one(1352, (-4509.232792665828));
      double[][] doubleArray0 = DoubleArray.identity(1352);
      // Undeclared exception!
      DoubleArray.toString(" yD>r5]{<", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 3295;
      double[] doubleArray0 = DoubleArray.one(3295);
      // Undeclared exception!
      DoubleArray.sort(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 553.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      double[][] doubleArray1 = DoubleArray.columnVector(doubleArray0);
      double[] doubleArray2 = DoubleArray.random(1824);
      DoubleArray.cumSum(doubleArray1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1824;
      intArray0[1] = 1824;
      intArray0[2] = 1824;
      intArray0[3] = 1824;
      intArray0[4] = 1824;
      intArray0[5] = 1814;
      intArray0[6] = 1824;
      // Undeclared exception!
      DoubleArray.delete(doubleArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.increment(30082, (double) 30082, (double) 30082);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DoubleArray.max(doubleArray0);
      // Undeclared exception!
      DoubleArray.one(30082, (double) 30082);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.toString((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleArray.increment(5033, (double) 5033, (double) 5033);
      DoubleArray.diagonal(5033, (double) 5033);
      // Undeclared exception!
      DoubleArray.diagonal(5033, (double) 5033);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.checkColumnDimension((double[][]) null, 3136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 30082;
      IndexFunction indexFunction0 = mock(IndexFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(indexFunction0).fi(anyInt());
      // Undeclared exception!
      DoubleArray.findex(30082, indexFunction0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      int[] intArray0 = new int[0];
      double[] doubleArray1 = DoubleArray.getCopy(doubleArray0, intArray0);
      DoubleArray.minIndex(doubleArray1);
      double[] doubleArray2 = DoubleArray.insert(doubleArray1, 0, doubleArray0);
      double[][] doubleArray3 = DoubleArray.increment(0, 0, (double) 0, (-3747.99938704));
      double[][] doubleArray4 = new double[9][2];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray1;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray0;
      doubleArray4[5] = doubleArray2;
      doubleArray4[6] = doubleArray2;
      doubleArray4[7] = doubleArray1;
      doubleArray4[8] = doubleArray2;
      DoubleArray.add(doubleArray3, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[15][3];
      // Undeclared exception!
      try { 
        DoubleArray.deleteRange((double[]) null, (-4274), (-4274));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 873;
      double[][] doubleArray0 = DoubleArray.identity(873);
      // Undeclared exception!
      DoubleArray.add(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 30082;
      // Undeclared exception!
      DoubleArray.random(30082, 30082, 1.0, (double) 30082);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy((double[][]) null, 6, 6, 6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DoubleArray.sum(doubleArray0);
      double[][] doubleArray1 = new double[0][8];
      DoubleArray.getColumnCopy(doubleArray1, 2866);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.sum((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 164;
      DoubleArray.increment(164, (double) 164, (double) 164);
      // Undeclared exception!
      try { 
        DoubleArray.insertRows((double[][]) null, 164, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.product((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 30082;
      double double0 = 0.9999998211860657;
      // Undeclared exception!
      DoubleArray.increment(30082, 30082, (double) 30082, 0.9999998211860657);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DoubleArray.toString("6w", doubleArray0);
      DoubleArray.mergeRows(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleArray.random(96, (-2746.9863734), (-2746.9863734));
      // Undeclared exception!
      try { 
        DoubleArray.checkRowDimension((double[][]) null, 177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[][] doubleArray1 = DoubleArray.sort(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.resize((double[][]) null, 1535, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1021.02239742382;
      DoubleArray.maxIndex(doubleArray0);
      double[] doubleArray1 = DoubleArray.deleteRange(doubleArray0, 0, 0);
      DoubleArray.sum(doubleArray0);
      double[][] doubleArray2 = new double[2][5];
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1021.02239742382;
      doubleArray3[1] = 1021.02239742382;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 1021.02239742382;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-2430.5447);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = 1021.02239742382;
      doubleArray3[8] = 1021.02239742382;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      // Undeclared exception!
      try { 
        DoubleArray.add((double[][]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(3035);
      // Undeclared exception!
      DoubleArray.min(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsRangeCopy((double[][]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DoubleArray.deleteRowsRange(doubleArray0, 6, 6);
      // Undeclared exception!
      try { 
        DoubleArray.insert((double[]) null, 6, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 74.97745895385742;
      doubleArray0[1] = 9.123202323913574;
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      double[][] doubleArray2 = new double[9][7];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 74.97745895385742;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray0;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 74.97745895385742;
      doubleArray4[1] = 74.97745895385742;
      doubleArray4[2] = 74.97745895385742;
      doubleArray4[3] = 9.123202323913574;
      doubleArray4[4] = 74.97745895385742;
      doubleArray4[5] = 9.123202323913574;
      doubleArray4[6] = 1723.613172823;
      doubleArray2[8] = doubleArray4;
      DoubleArray.getRowsRangeCopy(doubleArray2, 179, 178);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = DoubleArray.f(doubleArray0, function0);
      double[][] doubleArray2 = new double[6][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      DoubleArray.min(doubleArray2);
      // Undeclared exception!
      try { 
        DoubleArray.getRangeCopy(doubleArray0, 4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.cumSum((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.add((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.random(42, 24, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.mergeColumns((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[][] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.sort((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.deleteRowsRange((double[][]) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(2047, (double) 2047);
      // Undeclared exception!
      DoubleArray.cumSum(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.increment(97, 97, (double) 97, (double) 97);
      // Undeclared exception!
      DoubleArray.insertColumns(doubleArray0, 97, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(6);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.random(6, 6, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[0][0];
      DoubleArray.getColumnsRangeCopy(doubleArray2, 6, 190);
      DoubleArray.sum(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.add((double[][]) null, (-1306.6176833678248));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (-39.50401439491758);
      doubleArray2[4] = (-39.50401439491758);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DoubleArray.minIndex(doubleArray0);
      DoubleArray.add(doubleArray0, 32.92482258902);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = DoubleArray.increment(0, (double) 0, (double) 0);
      DoubleArray.fill(0, (double) 0);
      DoubleArray.insertColumns(doubleArray0, 0, doubleArray0);
      DoubleArray.copy(doubleArray1);
      DoubleArray.random(0, 348.6967626492, 0.0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      DoubleArray.minIndex(doubleArray0);
      DoubleArray.deleteColumnsRange(doubleArray1, 0, 0);
      DoubleArray.minIndex(doubleArray0);
      DoubleArray.resize(doubleArray1, 0, 0);
      DoubleArray.product(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DoubleArray.getColumnsRangeCopy(doubleArray0, 0, 0);
      double[] doubleArray1 = DoubleArray.one(0);
      DoubleArray.random(0, 0, doubleArray1, doubleArray1);
      DoubleArray.cumProduct(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 262.23319152;
      doubleArray0[2] = 0.0;
      DoubleArray.min(doubleArray0);
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 262.23319152;
      doubleArray2[1] = 2599.5994680781914;
      doubleArray2[2] = 262.23319152;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      DoubleArray.minIndex(doubleArray0);
      DoubleArray.maxIndex(doubleArray1);
      // Undeclared exception!
      try { 
        DoubleArray.checkRowDimension(doubleArray1, 5191);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns have 4 rows instead of 5191 rows expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2272.55;
      DoubleArray.minIndex(doubleArray0);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = DoubleArray.delete(doubleArray0, intArray0);
      double[][] doubleArray2 = new double[4][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      DoubleArray.cumSum(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-416.27883198079815);
      doubleArray0[1] = (-416.27883198079815);
      DoubleArray.cumSum(doubleArray0);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[1];
      double[][] doubleArray2 = DoubleArray.getColumnsCopy(doubleArray1, intArray0);
      DoubleArray.deleteRowsRange(doubleArray2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(1441.483, 1441.483, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.increment((-2442.5645397), 0.05, 1683.2077853330497);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(0, 428, 2028.51443016828);
      // Undeclared exception!
      try { 
        DoubleArray.mergeColumns(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.cumProduct((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1571.41594);
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 3988.703945100842;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 2272.55;
      doubleArray3[2] = (-1571.41594);
      doubleArray3[3] = (-1571.41594);
      doubleArray3[4] = 2.0;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-801.11);
      doubleArray3[7] = 3988.703945100842;
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.deleteRowsRange(doubleArray1, (-5956), (-5956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -5955 out of bounds for length 8
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 1387;
      double[] doubleArray0 = DoubleArray.one(1387);
      // Undeclared exception!
      DoubleArray.increment(1387, 1387, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[17][3];
      double[] doubleArray1 = DoubleArray.max(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.deleteRange(doubleArray1, (-3097), (-3097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal((double[][]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment(1, (double) 1, 0.22692155838012695);
      DoubleArray.product(doubleArray0);
      int int0 = (-452);
      // Undeclared exception!
      try { 
        DoubleArray.increment((-452), 1, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -452
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1143.2015);
      doubleArray2[1] = (-2187.259241748659);
      doubleArray2[2] = (-153.68033221648);
      doubleArray2[3] = 179.0;
      doubleArray2[4] = 2097.801778848156;
      doubleArray2[5] = 6134.91;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-153.68033221648);
      doubleArray3[1] = (-153.68033221648);
      doubleArray3[2] = 179.0;
      doubleArray3[3] = (-153.68033221648);
      doubleArray3[4] = 179.0;
      doubleArray3[5] = 2097.801778848156;
      doubleArray3[6] = 6134.91;
      doubleArray3[7] = 6134.91;
      doubleArray3[8] = 179.0;
      doubleArray0[2] = doubleArray3;
      DoubleArray.transpose(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = DoubleArray.cumSum(doubleArray1);
      double[][] doubleArray3 = new double[8][6];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray0;
      doubleArray3[7] = doubleArray2;
      int[] intArray0 = new int[6];
      intArray0[0] = 27;
      intArray0[1] = 682;
      intArray0[2] = 110;
      intArray0[3] = 131;
      intArray0[4] = (-659);
      intArray0[5] = 976;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsCopy(doubleArray3, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 27 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.increment(8, 4, (double) 8, 4933.861821759696);
      DoubleArray.product(doubleArray0);
      DoubleArray.fill(8, 0.5);
      double[] doubleArray1 = new double[0];
      DoubleArray.columnVector(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      try { 
        DoubleArray.transpose(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = DoubleArray.product(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[][] doubleArray2 = DoubleArray.mergeColumns(doubleArray1);
      // Undeclared exception!
      try { 
        DoubleArray.max(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.copy((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        DoubleArray.sum(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nDUbAz+5gB4$K";
      stringArray0[1] = " columns expected.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "edu.cornell.lassp.houle.RngPack.RandomSeedable";
      stringArray0[5] = " rows instead of ";
      stringArray0[6] = "org.math.array.DoubleArray";
      DoubleArray.main(stringArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.45623308420181274;
      doubleArray0[1] = 432.3625;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[][] doubleArray2 = DoubleArray.cumProduct(doubleArray1);
      // Undeclared exception!
      DoubleArray.resize(doubleArray2, 30082, 30082);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      // Undeclared exception!
      try { 
        DoubleArray.deleteRowsRange(doubleArray0, (-1745), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1746
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DoubleArray.one(94, 6, (double) 94);
      // Undeclared exception!
      DoubleArray.fill(30082, (double) 30082);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.mergeRows((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-39.50401439491758);
      double[][] doubleArray1 = DoubleArray.increment(115, 6, 2786.3082071, (double) 6);
      assertEquals(115, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray1, 6);
      assertTrue(boolean0);
      assertEquals(115, doubleArray1.length);
      
      double[][] doubleArray2 = DoubleArray.add(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(115, doubleArray1.length);
      assertEquals(115, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = DoubleArray.isRowDimension(doubleArray2, 115);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(115, doubleArray1.length);
      assertEquals(115, doubleArray2.length);
      
      double[][][] doubleArray3 = new double[0][6][4];
      double[] doubleArray4 = DoubleArray.getColumnCopy(doubleArray3, 115, 6);
      int[] intArray0 = new int[0];
      DoubleArray.delete(doubleArray4, intArray0);
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 115;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 6;
      doubleArray5[3] = (double) 115;
      doubleArray5[4] = (double) 115;
      doubleArray5[5] = 2786.3082071;
      DoubleArray.copy(doubleArray5);
      DoubleArray.deleteRowsRange(doubleArray2, 115, 8);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.increment((-854), 4084, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.random(30082, (-1.0), 1.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      DoubleArray.f(doubleArray0, function0);
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray1, 0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      DoubleArray.isLength(doubleArray0, 8);
      DoubleArray.diagonal(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.increment(4, (-1), 4.0, 0.7665573954582214);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      // Undeclared exception!
      try { 
        DoubleArray.toString("0k|%@ABJ&5wq1#:=G0", doubleArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[0][0];
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      DoubleArray.f(doubleArray1, function0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleArray.random(1102);
      double[][] doubleArray0 = DoubleArray.diagonal(1102, (double) 1102);
      // Undeclared exception!
      DoubleArray.sum(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns((double[][]) null, 1105, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.max((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      // Undeclared exception!
      try { 
        DoubleArray.getRowsCopy(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleArray.product(doubleArray0);
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray1[5] = doubleArray2;
      DoubleArray.add(doubleArray1, 1.0);
      DoubleArray.sort(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.findex((-1207), (IndexFunction) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1207
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.sum((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.isRowDimension((double[][]) null, (-1400));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleArray.diagonal(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-39.50401439491758);
      doubleArray1[1] = 0.4798622727394104;
      doubleArray1[2] = (-39.50401439491758);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(function0).f(anyDouble());
      DoubleArray.f(doubleArray1, function0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      DoubleArray.minIndex(doubleArray0);
      DoubleArray.product(doubleArray1);
      DoubleArray.fill(0, (double) 0);
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns(doubleArray1, 307, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.delete((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DoubleArray.getColumnsRangeCopy(doubleArray0, 0, 0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-39.50401439491758);
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      double[] doubleArray3 = DoubleArray.copy(doubleArray2);
      DoubleArray.minIndex(doubleArray1);
      double[][] doubleArray4 = DoubleArray.rowVector(doubleArray3);
      double[][] doubleArray5 = new double[0][4];
      DoubleArray.insertRows(doubleArray0, 0, doubleArray5);
      DoubleArray.copy(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      double[][] doubleArray1 = DoubleArray.random(2, 2, doubleArray0, doubleArray0);
      DoubleArray.product(doubleArray1);
      int[] intArray0 = new int[0];
      DoubleArray.deleteRows(doubleArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        DoubleArray.merge(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.checkColumnDimension(doubleArray1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row 0 have 7 columns instead of 2 columns expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1655.6615954159415;
      doubleArray0[1] = (-2565.99661);
      doubleArray0[2] = (-1653.289);
      doubleArray0[3] = (-1636.609996065587);
      DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[][] doubleArray2 = DoubleArray.getRowsRangeCopy(doubleArray1, 1, 1);
      DoubleArray.isColumnDimension(doubleArray2, 2716);
      DoubleArray.product(doubleArray2);
      double[][] doubleArray3 = DoubleArray.cumSum(doubleArray1);
      // Undeclared exception!
      try { 
        DoubleArray.insertRows(doubleArray3, 2368, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[12][4];
      // Undeclared exception!
      try { 
        DoubleArray.resize(doubleArray0, (-2542), (-2542));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2542
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.max((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[][] doubleArray0 = DoubleArray.diagonal(2725, (double) 2725);
      // Undeclared exception!
      DoubleArray.transpose(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = DoubleArray.increment(115, 6, 2786.3082071, (double) 6);
      DoubleArray.isColumnDimension(doubleArray1, 6);
      double[][] doubleArray2 = DoubleArray.add(doubleArray1, doubleArray1);
      DoubleArray.isRowDimension(doubleArray2, 115);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[17];
      // Undeclared exception!
      try { 
        DoubleArray.delete(doubleArray0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -16
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DoubleArray.increment(7, 7, doubleArray0, doubleArray0);
      DoubleArray.copy(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DoubleArray.increment(0, 7, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 179;
      doubleArray0[1] = 0.15331321954727173;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 179;
      doubleArray0[4] = (double) 6;
      doubleArray0[6] = (double) 179;
      DoubleArray.increment(7, 7, doubleArray0, doubleArray0);
      DoubleArray.minIndex(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DoubleArray.mergeRows(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.minIndex((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[6];
      DoubleArray.random(0, 0);
      DoubleArray.sum(doubleArray1);
      DoubleArray.min(doubleArray1);
      DoubleArray.isRowDimension(doubleArray0, 0);
      DoubleArray.copy(doubleArray1);
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy(doubleArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.min((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        DoubleArray.delete(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(133, 3909.62926, 3909.62926);
      int[] intArray0 = new int[5];
      intArray0[0] = 133;
      intArray0[1] = 133;
      intArray0[2] = 133;
      intArray0[3] = 133;
      // Undeclared exception!
      try { 
        DoubleArray.delete(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 128 out of bounds for length 128
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(133, (double) 2755, 3909.62926);
      int[] intArray0 = new int[6];
      intArray0[0] = 133;
      intArray0[1] = 133;
      intArray0[2] = 133;
      intArray0[3] = 2755;
      intArray0[4] = 133;
      intArray0[5] = 133;
      // Undeclared exception!
      try { 
        DoubleArray.delete(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 127 out of bounds for length 127
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[1];
      DoubleArray.delete(doubleArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        DoubleArray.cumProduct(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        DoubleArray.minIndex(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(498);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      DoubleArray.f(doubleArray0, function0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[1] = (-3605.1726);
      doubleArray0[0] = (-39.50401439491758);
      DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DoubleArray.insertColumns(doubleArray1, 1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3594.179493929344);
      DoubleArray.buildXY(doubleArray0, doubleArray0);
      DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = DoubleArray.random(5, 0, (-1526.1), (-3594.179493929344));
      DoubleArray.diagonal(doubleArray0);
      DoubleArray.sum(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleArray.increment((-1491.7733282174188), (-1491.7733282174188), (-1491.7733282174188));
      // Undeclared exception!
      try { 
        DoubleArray.getRowCopy((double[][]) null, (-296));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DoubleArray.sum(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy((double[][]) null, 1934);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.fill(3, 3, (-39.50401439491758));
      DoubleArray.isColumnDimension(doubleArray0, 20);
      double[] doubleArray1 = DoubleArray.fill(3, (-39.50401439491758));
      DoubleArray.rowVector(doubleArray1);
      DoubleArray.minIndex(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(124);
      // Undeclared exception!
      DoubleArray.random(124, 124, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.626149594783783;
      doubleArray0[1] = (-39.50401439491758);
      doubleArray0[2] = (-39.50401439491758);
      DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = DoubleArray.diagonal(1, 0.626149594783783);
      DoubleArray.getDiagonal(doubleArray1, 1);
      DoubleArray.mergeColumns(doubleArray1);
      // Undeclared exception!
      try { 
        DoubleArray.insertRows(doubleArray1, (-1683), doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1683 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[1];
      DoubleArray.minIndex(doubleArray1);
      DoubleArray.getRowsRangeCopy(doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-270.67315569659536);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-836.5003);
      doubleArray1[1] = (-867.1);
      doubleArray1[2] = (-270.67315569659536);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-867.1);
      doubleArray2[1] = (-867.1);
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      DoubleArray.increment(0, 3, (-2570.0), 0.9999998211860657);
      DoubleArray.product(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleArray.maxIndex(doubleArray0);
      double[][] doubleArray1 = new double[3][0];
      double[][] doubleArray2 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      DoubleArray.isRowDimension(doubleArray2, 2);
      double[][] doubleArray3 = DoubleArray.add(doubleArray1, doubleArray2);
      DoubleArray.cumSum(doubleArray3);
      double[][] doubleArray4 = DoubleArray.add(doubleArray3, 333.90485);
      DoubleArray.merge(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 30082;
      // Undeclared exception!
      DoubleArray.identity(30082);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsRangeCopy(doubleArray0, (-1214), (-1346));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -131
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.cumProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray1, 0, 1463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = DoubleArray.isLength(doubleArray1, 535);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray1.length);
      
      String string0 = DoubleArray.toString(doubleArray0);
      assertEquals("0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0\n0.0 0.0 0.0 0.0", string0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(string0);
      
      int int0 = (-1747);
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray0, (-1747));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1747 out of bounds for length 7
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = DoubleArray.product(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[2] = doubleArray2;
      // Undeclared exception!
      try { 
        DoubleArray.toString(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 2515);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][6];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.5;
      doubleArray2[5] = (double) 2515;
      doubleArray2[6] = (double) 2515;
      doubleArray2[7] = (double) 2515;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.toString(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.random(2755, (double) 2755, (double) 2755);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2755, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.one(0, 0);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        DoubleArray.add(doubleArray2, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange((double[][]) null, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = DoubleArray.product(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.toString("", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1953.3159966;
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1953.3159966, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.insert(doubleArray0, 2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1953.3159966, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1953.3159966, 0.0, 1953.3159966, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension((double[][]) null, 1092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.cumSum((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DoubleArray.max(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy(doubleArray0, 1278);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1278 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2515;
      doubleArray1[1] = (double) 574;
      doubleArray1[2] = (double) 574;
      doubleArray1[3] = (double) 2515;
      doubleArray1[4] = (double) 2515;
      doubleArray1[5] = (double) 2515;
      int int0 = 3890;
      boolean boolean0 = DoubleArray.isLength(doubleArray1, 3890);
      assertArrayEquals(new double[] {2515.0, 574.0, 574.0, 2515.0, 2515.0, 2515.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      
      String string0 = DoubleArray.toString(doubleArray0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(47);
      assertEquals(47, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      DoubleArray.checkColumnDimension(doubleArray0, 47);
      assertEquals(47, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.one(3468, 3468);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.random(541, 541, (double) 541, (double) 541);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.transpose((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      int[] intArray0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[][] doubleArray2 = DoubleArray.buildXY(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-270.67315569659536), (-867.1)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = DoubleArray.isRowDimension(doubleArray0, 2);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray3 = DoubleArray.getRowsCopy(doubleArray2, intArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-270.67315569659536), (-867.1)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.copy(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-270.67315569659536), (-867.1)}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = new double[8][0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = doubleArray1;
      doubleArray6[1] = doubleArray1;
      doubleArray6[2] = doubleArray1;
      doubleArray6[3] = doubleArray1;
      doubleArray6[4] = doubleArray1;
      doubleArray6[5] = doubleArray1;
      doubleArray6[6] = doubleArray1;
      doubleArray6[7] = doubleArray1;
      int[] intArray1 = DoubleArray.minIndex(doubleArray6);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(8, doubleArray6.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsCopy((double[][]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = DoubleArray.f(doubleArray0, (Function) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 64;
      intArray0[2] = 53;
      intArray0[3] = 28;
      intArray0[4] = (-3167);
      intArray0[5] = (-3426);
      intArray0[6] = 3;
      intArray0[7] = (-1608);
      intArray0[8] = 1549;
      // Undeclared exception!
      try { 
        DoubleArray.getCopy(doubleArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        DoubleArray.f(doubleArray0, (Function) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-39.50401439491758);
      doubleArray1[1] = (-3605.1726);
      doubleArray1[0] = 2272.55;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray1, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray1.length);
      
      double[][] doubleArray2 = DoubleArray.deleteColumnsRange(doubleArray0, 1, 1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int1 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray1, 0.01);
      assertEquals(1, int1);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = DoubleArray.random(1);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.13405460119247437}, doubleArray3, 0.01);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(function0).f(anyDouble());
      double[] doubleArray4 = DoubleArray.f(doubleArray3, function0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.13405460119247437}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3646.326371958212);
      doubleArray1[1] = 863.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 863.1;
      doubleArray2[1] = (-3646.326371958212);
      doubleArray2[2] = (-3646.326371958212);
      doubleArray2[3] = (-3646.326371958212);
      doubleArray2[4] = 863.1;
      doubleArray2[5] = (-3646.326371958212);
      doubleArray2[6] = (-3646.326371958212);
      doubleArray2[7] = 863.1;
      doubleArray2[8] = (-3646.326371958212);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 863.1;
      doubleArray3[1] = 863.1;
      doubleArray3[2] = (-3646.326371958212);
      doubleArray3[3] = (-3646.326371958212);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = DoubleArray.mergeRows(doubleArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      int int0 = 2809;
      // Undeclared exception!
      try { 
        DoubleArray.checkColumnDimension(doubleArray1, 2809);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row 0 have 2 columns instead of 2809 columns expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      // Undeclared exception!
      try { 
        DoubleArray.checkColumnDimension(doubleArray0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row 0 have 4 columns instead of 7 columns expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.getRangeCopy(doubleArray0, 3, (-981));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -983
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[0] = (-3605.1726);
      double[] doubleArray1 = DoubleArray.random(2755, 0.0, (-39.50401439491758));
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2755, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.random(2755);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2755, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[5][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-39.50401439491758);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1267.5446761535;
      doubleArray4[3] = 0.0;
      doubleArray3[3] = doubleArray4;
      doubleArray3[4] = doubleArray2;
      double[][] doubleArray5 = DoubleArray.resize(doubleArray3, 2755, 2755);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray3, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(2755, doubleArray5.length);
      assertEquals(5, doubleArray3.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      int int1 = DoubleArray.minIndex(doubleArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray1, (-2076), (-2076), (-2076), 3588);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2076 out of bounds for length 9
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy((double[][]) null, 613, 613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = (-425.735252);
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.one(0, (double) 0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsCopy(doubleArray3, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.random((-63), (-63));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -63
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.isColumnDimension((double[][]) null, (-2562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(6, 185);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 185;
      doubleArray1[1] = (double) 185;
      doubleArray1[2] = (double) 2416;
      doubleArray1[3] = (double) 185;
      doubleArray1[4] = 2407.783;
      doubleArray1[5] = (double) 705;
      doubleArray1[6] = 1798.520323;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 2407.783;
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(2407.783, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      double[][] doubleArray2 = DoubleArray.increment(3, 3, doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.0, 3.0, 3.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.add(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.0, 3.0, 3.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.random((-1646), (-1646), (double) (-1646), (double) (-1646));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1646
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(177, 6, (double) 705);
      assertEquals(177, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 6);
      assertTrue(boolean0);
      assertEquals(177, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.fill(6, (double) 6);
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, 6.0, 6.0, 6.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.random(0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[6][5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = doubleArray1;
      double[] doubleArray4 = DoubleArray.max(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 165;
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      boolean boolean0 = DoubleArray.isLength(doubleArray1, 2515);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      DoubleArray.toString(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 201;
      double[][] doubleArray0 = DoubleArray.identity(201);
      assertEquals(201, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 201);
      assertTrue(boolean0);
      assertEquals(201, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.fill(201, (double) 201);
      assertEquals(201, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.random(0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = DoubleArray.sum(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean1 = DoubleArray.isLength(doubleArray2, 201);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      DoubleArray.toString(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = DoubleArray.increment(59.12042, 1833.038308342545, 59.12042);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.buildXY(59.12042, 59.12042, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[0][8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[0];
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal(doubleArray4, 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -15
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = DoubleArray.random(165);
      assertEquals(165, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      DoubleArray.cumProduct(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.random(29, 29, (double) 29, (double) 29);
      assertEquals(29, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      DoubleArray.checkRowDimension(doubleArray0, 29);
      assertEquals(29, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      int[] intArray0 = new int[15];
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumns(doubleArray0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -12
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 165;
      // Undeclared exception!
      DoubleArray.deleteColumns(doubleArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        DoubleArray.copy(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.one((-1780), 0.021602869033813477);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1780
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      double[] doubleArray2 = DoubleArray.min(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int0 = DoubleArray.maxIndex(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray1.length);
      
      int int1 = (-254);
      double double0 = (-1521.210242138);
      // Undeclared exception!
      try { 
        DoubleArray.one((-254), (-1521.210242138));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -254
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DoubleArray.minIndex((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int0 = (-1805);
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      double double0 = DoubleArray.max(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-270.67315569659536), (-867.1)}, doubleArray1, 0.01);
      assertEquals((-270.67315569659536), double0, 0.01);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = DoubleArray.cumProduct(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.buildXY(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-270.67315569659536), (-867.1)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      // Undeclared exception!
      try { 
        DoubleArray.add(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.min((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      DoubleArray.checkColumnDimension(doubleArray0, 165);
      assertEquals(165, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DoubleArray.one(2549, (-517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -517
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      int int0 = 574;
      DoubleArray.checkColumnDimension(doubleArray0, 574);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 574;
      doubleArray1[0] = doubleArray2;
      int int1 = (-254);
      // Undeclared exception!
      try { 
        DoubleArray.checkRowDimension(doubleArray1, (-254));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns have 1 rows instead of -254 rows expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DoubleArray.checkColumnDimension(doubleArray0, 138);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[1] = (-3605.1726);
      doubleArray0[0] = (-39.50401439491758);
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {(-39.50401439491758), (-3605.1726)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      int[] intArray0 = DoubleArray.maxIndex(doubleArray1);
      assertArrayEquals(new int[] {4, 4}, intArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray2 = DoubleArray.sum(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-197.52007197458792), (-18025.862999999998)}, doubleArray2, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = DoubleArray.min(doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-39.50401439491758), (-3605.1726)}, doubleArray3, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-39.50401439491758);
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = 1541.7457609;
      doubleArray4[3] = (-39.50401439491758);
      doubleArray4[4] = (-3605.1726);
      doubleArray4[5] = (-39.50401439491758);
      int int1 = DoubleArray.maxIndex(doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(int1 == int0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {(-39.50401439491758), 1.0, 1541.7457609, (-39.50401439491758), (-3605.1726), (-39.50401439491758)}, doubleArray4, 0.01);
      assertEquals(2, int1);
      assertEquals(6, doubleArray4.length);
      
      double[] doubleArray5 = DoubleArray.one(3, (-1186.5));
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1186.5), (-1186.5), (-1186.5)}, doubleArray5, 0.01);
      assertEquals(3, doubleArray5.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment(35, (double) 7, (double) 7);
      assertEquals(35, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertEquals(34, int0);
      assertEquals(35, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2755;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2755;
      intArray0[4] = 2755;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray1, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      // Undeclared exception!
      try { 
        DoubleArray.insertRows(doubleArray0, 159, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = (-425.735252);
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.735252)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.deleteRowsRange(doubleArray4, 0, 0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = DoubleArray.random(0, 0, 0.0, 0.05);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertEquals(0, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      double[][] doubleArray7 = new double[0][6];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      // Undeclared exception!
      try { 
        DoubleArray.insertRows(doubleArray7, 0, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[][] doubleArray1 = DoubleArray.insertRows(doubleArray0, 0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-270.67315569659536);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-836.5003);
      doubleArray1[1] = (-867.1);
      doubleArray1[2] = (-270.67315569659536);
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-867.1);
      doubleArray2[1] = (-867.1);
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      double double0 = DoubleArray.sum(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray2, 0.01);
      assertEquals((-1734.2), double0, 0.01);
      assertEquals(2, doubleArray2.length);
      
      double double1 = DoubleArray.min(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray2, 0.01);
      assertEquals((-867.1), double1, 0.01);
      assertEquals(2, doubleArray2.length);
      
      double[][] doubleArray4 = new double[5][1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      doubleArray4[4] = doubleArray1;
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-270.67315569659536), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray5 = new double[6][3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = doubleArray2;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-867.1);
      doubleArray6[1] = (-836.5003);
      doubleArray6[2] = (-867.1);
      doubleArray6[3] = (-270.67315569659536);
      doubleArray6[4] = (-1734.2);
      doubleArray6[5] = (-836.5003);
      doubleArray6[6] = (-1734.2);
      doubleArray5[1] = doubleArray6;
      doubleArray5[2] = doubleArray1;
      doubleArray5[3] = doubleArray2;
      doubleArray5[4] = doubleArray1;
      doubleArray5[5] = doubleArray0;
      double[][] doubleArray7 = DoubleArray.insertColumns(doubleArray3, 0, doubleArray5);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray5, doubleArray7);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray7);
      assertNotSame(doubleArray3, doubleArray4);
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertEquals(8, doubleArray7.length);
      assertEquals(6, doubleArray5.length);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray7);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[1] = (-3605.1726);
      doubleArray0[0] = (-39.50401439491758);
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertEquals(1, int0);
      assertEquals(17, doubleArray0.length);
      
      double[][] doubleArray1 = new double[19][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[][] doubleArray2 = DoubleArray.getSubMatrixRangeCopy(doubleArray1, 1, 1, 1, 1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(19, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = DoubleArray.min(doubleArray0);
      assertEquals((-3605.1726), double0, 0.01);
      assertEquals(17, doubleArray0.length);
      
      double[][] doubleArray3 = new double[6][0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray0;
      double[][] doubleArray4 = DoubleArray.add(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(19, doubleArray1.length);
      assertEquals(6, doubleArray4.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1953.3159966;
      doubleArray0[2] = 1953.3159966;
      doubleArray0[2] = (-1072.4625808807582);
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {1953.3159966, 0.0, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.random(0, (-1072.4625808807582), (double) 0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int0 = DoubleArray.getColumnDimension(doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1953.3159966, 0.0, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      int int1 = DoubleArray.minIndex(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0, int1);
      assertEquals(8, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray1, (-3953), (-3953));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal(doubleArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.buildXY((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-270.67315569659536);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-836.5003);
      doubleArray1[1] = (-867.1);
      doubleArray1[2] = (-270.67315569659536);
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-867.1);
      doubleArray2[1] = (-867.1);
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DoubleArray.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      int[] intArray0 = DoubleArray.minIndex(doubleArray3);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(8, doubleArray3.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      double[][] doubleArray4 = DoubleArray.add(doubleArray3, (-1202.68));
      assertSame(doubleArray3, doubleArray4);
      assertSame(doubleArray4, doubleArray3);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(43);
      assertEquals(43, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.random(43, 43, doubleArray0, doubleArray0);
      assertEquals(43, doubleArray0.length);
      assertEquals(43, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.insertColumns(doubleArray1, 43, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(43, doubleArray0.length);
      assertEquals(43, doubleArray1.length);
      assertEquals(43, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = DoubleArray.minIndex(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(43, doubleArray0.length);
      assertEquals(43, doubleArray1.length);
      assertEquals(43, doubleArray2.length);
      assertEquals(86, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.increment((-1.0), (-1.0), 1.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.fill((-2054), (double) (-2054));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2054
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(177, 6, (double) 705);
      assertEquals(177, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 6);
      assertTrue(boolean0);
      assertEquals(177, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.fill(6, (double) 6);
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, 6.0, 6.0, 6.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.random(0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = DoubleArray.sum(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean1 = DoubleArray.isLength(doubleArray2, 177);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = DoubleArray.increment(177, (double) 6, (double) 705);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(177, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns(doubleArray0, (-3262), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3262 out of bounds for length 183
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      int[] intArray0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[][] doubleArray1 = DoubleArray.getColumnsCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 59.12042;
      double double0 = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 59.12042;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {59.12042, 0.5, 59.12042, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-45);
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.random((-1767), (double) (-1767), (double) (-1767));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1767
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1953.3159966;
      doubleArray0[1] = 1953.3159966;
      doubleArray0[2] = (-1072.4625808807582);
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.insert(doubleArray0, 0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582), 1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int0 = DoubleArray.getColumnDimension(doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 448;
      doubleArray3[1] = (double) 3;
      int int1 = DoubleArray.minIndex(doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582), 1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray2, 0.01);
      assertEquals(2, int1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      int[] intArray0 = DoubleArray.maxIndex(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray4 = DoubleArray.sum(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = DoubleArray.min(doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.3159966, 1953.3159966, (-1072.4625808807582)}, doubleArray5, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, doubleArray5.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[][] doubleArray1 = DoubleArray.copy(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-836.5003);
      doubleArray2[1] = (-867.1);
      doubleArray2[2] = (-836.5003);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray2[1] = (-867.1);
      doubleArray3[1] = (-867.1);
      doubleArray0[2] = doubleArray3;
      int[] intArray0 = new int[0];
      double[][] doubleArray4 = DoubleArray.getRowsCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertEquals(3, doubleArray5.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = DoubleArray.copy(doubleArray5);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertEquals(3, doubleArray5.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray6.length);
      assertNotNull(doubleArray6);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[][] doubleArray1 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      doubleArray0[2] = (double) 96;
      doubleArray0[3] = 3.141592653589793;
      double[][] doubleArray1 = new double[0][2];
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal(doubleArray1, (-342));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -342
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.random(2755, (double) 2755, 0.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2755, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.increment(0, 0.0, 0.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = (-425.735252);
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.735252)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.deleteRowsRange(doubleArray4, 0, 0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = DoubleArray.random(0, 0, 0.0, 0.05);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertEquals(0, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), 181250.5047955035}, doubleArray7, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      double[] doubleArray8 = DoubleArray.getDiagonal(doubleArray6, 0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray0);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray1);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray8, 0.01);
      assertEquals(0, doubleArray6.length);
      assertEquals(0, doubleArray8.length);
      assertNotNull(doubleArray8);
      
      double[] doubleArray9 = new double[9];
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray0));
      
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (-1159.25511);
      doubleArray9[2] = (-1202.68);
      doubleArray9[3] = (-425.735252);
      double[][] doubleArray10 = DoubleArray.deleteColumnsRange(doubleArray3, 1, 0);
      assertNotSame(doubleArray10, doubleArray6);
      assertNotSame(doubleArray10, doubleArray3);
      assertNotSame(doubleArray10, doubleArray5);
      assertNotSame(doubleArray10, doubleArray4);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray10);
      assertNotSame(doubleArray3, doubleArray6);
      assertFalse(doubleArray10.equals((Object)doubleArray6));
      assertFalse(doubleArray10.equals((Object)doubleArray3));
      assertFalse(doubleArray10.equals((Object)doubleArray5));
      assertFalse(doubleArray10.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertEquals(2, doubleArray10.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray10);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      double[][] doubleArray2 = new double[6][5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = DoubleArray.maxIndex(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(6, doubleArray2.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray3 = DoubleArray.sum(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.random(165, 0, doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(165, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[] doubleArray5 = DoubleArray.cumSum(doubleArray1);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray5, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      // Undeclared exception!
      DoubleArray.random(1530, 579);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.one(1439, 1439, (double) 1439);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.throwError("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.sort((double[][]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray0, 1, (-1079), 1, (-1079));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1079
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(2006);
      assertEquals(2006, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      DoubleArray.add(doubleArray0, (double) 2006);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 262.23319152;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2272.4043);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 262.23319152;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 262.23319152;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = DoubleArray.merge(doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 262.23319152, 0.0, (-2272.4043), 0.0, 262.23319152, 1.0, 262.23319152}, doubleArray4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.buildXY(0.0, 0.0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray5.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = DoubleArray.diagonal(doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 262.23319152, 0.0, (-2272.4043)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray6.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray6);
      
      boolean boolean0 = DoubleArray.isRowDimension(doubleArray0, 519);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray7 = DoubleArray.add(doubleArray6, (-2382.242132857746));
      assertNotSame(doubleArray6, doubleArray5);
      assertSame(doubleArray6, doubleArray7);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray7, doubleArray0);
      assertSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray5);
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertArrayEquals(new double[] {0.0, 262.23319152, 0.0, (-2272.4043)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray6.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray7.length);
      assertNotNull(doubleArray7);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-836.5003);
      doubleArray2[2] = (-270.67315569659536);
      doubleArray0[0] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-867.1);
      doubleArray3[1] = (-867.1);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = DoubleArray.sort(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = new double[8][2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = doubleArray1;
      doubleArray5[1] = doubleArray3;
      doubleArray5[2] = doubleArray1;
      doubleArray5[3] = doubleArray1;
      doubleArray5[4] = doubleArray1;
      doubleArray5[5] = doubleArray3;
      doubleArray5[6] = doubleArray3;
      double double0 = DoubleArray.sum(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray3, 0.01);
      assertEquals((-1734.2), double0, 0.01);
      assertEquals(2, doubleArray3.length);
      
      double double1 = DoubleArray.min(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray3, 0.01);
      assertEquals((-867.1), double1, 0.01);
      assertEquals(2, doubleArray3.length);
      
      double[][] doubleArray6 = new double[5][1];
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = doubleArray3;
      double[][] doubleArray7 = DoubleArray.fill(0, 5, (-270.67315569659536));
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray5);
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertEquals(0, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      double[] doubleArray8 = DoubleArray.product(doubleArray5);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray7);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray6);
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray7));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray6));
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray8, 0.01);
      assertEquals(2, doubleArray8.length);
      assertEquals(8, doubleArray5.length);
      assertNotNull(doubleArray8);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment((double) 115, (double) 115, 798.698273721481);
      assertArrayEquals(new double[] {115.0, 230.0, 345.0, 460.0, 575.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3605.1726);
      doubleArray1[0] = 2272.547;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {2272.547, (-3605.1726), 0.0}, doubleArray1, 0.01);
      assertEquals(1, int0);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray2 = DoubleArray.sum(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.random(1, 1, doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2272.547, (-3605.1726), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = DoubleArray.cumSum(doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2272.547, (-3605.1726), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2272.547, (-1332.6255999999998), (-1332.6255999999998)}, doubleArray4, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.random(227, 0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertEquals(227, doubleArray5.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = DoubleArray.increment(59.12042, 1833.038308342545, 3.141592653589793);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.buildXY(0.4, 3965.8097238070914, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[0];
      double[][] doubleArray3 = DoubleArray.getColumnsCopy(doubleArray2, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      double[] doubleArray2 = DoubleArray.max(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      String string0 = DoubleArray.toString("#b&!W,M],", doubleArray1);
      assertEquals("#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],\n#b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M], #b&!W,M],", string0);
      assertEquals(9, doubleArray1.length);
      assertNotNull(string0);
      
      double[] doubleArray3 = DoubleArray.copy(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.copy((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        DoubleArray.cumSum(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 867.759;
      doubleArray1[1] = 0.45623308420181274;
      doubleArray1[2] = 0.0;
      double[][] doubleArray2 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray2, 85, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 262.23319152;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2272.4043);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 262.23319152;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 262.23319152;
      doubleArray3[1] = (-2272.4043);
      doubleArray3[2] = 262.23319152;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 262.23319152;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 1.0;
      doubleArray3[8] = 0.0;
      int[] intArray0 = new int[0];
      double[] doubleArray4 = DoubleArray.getCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {262.23319152, (-2272.4043), 262.23319152, 0.0, 0.0, 262.23319152, 0.0, 1.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = new double[9][8];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 682.92372624;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 0.0;
      doubleArray5[0] = doubleArray6;
      doubleArray5[1] = doubleArray3;
      doubleArray5[2] = doubleArray4;
      doubleArray5[3] = doubleArray2;
      doubleArray5[4] = doubleArray2;
      doubleArray5[5] = doubleArray1;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 262.23319152;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 682.92372624;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 262.23319152;
      doubleArray7[5] = 0.0;
      doubleArray5[6] = doubleArray7;
      doubleArray5[7] = doubleArray1;
      doubleArray5[8] = doubleArray3;
      // Undeclared exception!
      try { 
        DoubleArray.cumSum(doubleArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = DoubleArray.getDiagonal(doubleArray0, 1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = DoubleArray.getDiagonal(doubleArray0, (-1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = (-425.735252);
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-851.470504)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.735252)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.deleteRowsRange(doubleArray4, 0, 0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertEquals(1, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[][] doubleArray6 = DoubleArray.random(0, 0, 0.0, 0.05);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertEquals(0, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray7);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-425.735252), (-425.735252)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), 181250.5047955035}, doubleArray7, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      double[] doubleArray8 = DoubleArray.getDiagonal(doubleArray6, 0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray0);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray8, 0.01);
      assertEquals(0, doubleArray6.length);
      assertEquals(0, doubleArray8.length);
      assertNotNull(doubleArray8);
      
      double[] doubleArray9 = new double[9];
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray0));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (-1159.25511);
      doubleArray9[2] = (-1202.68);
      doubleArray9[3] = (-425.735252);
      doubleArray9[4] = 0.05;
      doubleArray9[5] = 404.9463660916;
      doubleArray9[6] = 0.0;
      doubleArray9[7] = 0.0;
      doubleArray9[8] = (-2.0);
      // Undeclared exception!
      try { 
        DoubleArray.buildXY((double) 0, (-1202.68), doubleArray9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[1] = (-3605.1726);
      doubleArray0[0] = 2272.55;
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double[] doubleArray1 = DoubleArray.getCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.buildXY(0.0, (double) 0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.diagonal(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.fill(439, 0, (-1.0));
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertEquals(439, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[] doubleArray6 = DoubleArray.product(doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray4.length);
      assertEquals(9, doubleArray6.length);
      assertNotNull(doubleArray6);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1476;
      intArray0[1] = 3216;
      intArray0[2] = (-527);
      intArray0[3] = 786;
      intArray0[4] = (-1879);
      intArray0[5] = 6;
      intArray0[6] = 519;
      intArray0[7] = 3182;
      intArray0[8] = 2822;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 519;
      doubleArray1[1] = (double) 519;
      doubleArray1[2] = (double) 3216;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 786;
      doubleArray2[1] = (double) 3182;
      doubleArray2[2] = (double) 1476;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-21.415636);
      doubleArray3[1] = (-250.773497866);
      doubleArray3[2] = (double) 2822;
      doubleArray3[3] = (double) 2822;
      doubleArray3[4] = (double) (-1879);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = DoubleArray.transpose(doubleArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 2703.854292927561;
      double double0 = 86.867821384816;
      doubleArray1[2] = 86.867821384816;
      doubleArray0[0] = doubleArray1;
      int int0 = (-1784);
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double double1 = DoubleArray.min(doubleArray1);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 2703.854292927561, 86.867821384816}, doubleArray1, 0.01);
      assertEquals(6.283185307179586, double1, 0.01);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.283185307179586, 2703.854292927561, 86.867821384816}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 16988.8175660769, 1475781.5698691928}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.buildXY(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586, 2703.854292927561, 86.867821384816}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 16988.8175660769, 1475781.5698691928}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.add(doubleArray3, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586, 2703.854292927561, 86.867821384816}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 16988.8175660769, 1475781.5698691928}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      int int1 = 3466;
      // Undeclared exception!
      try { 
        DoubleArray.sort(doubleArray0, 3466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3466 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[] intArray0 = DoubleArray.maxIndex(doubleArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      double double0 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(96.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.add(doubleArray1, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.sort(doubleArray1, 0);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[] doubleArray6 = DoubleArray.getCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray6);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, intArray0.length);
      assertEquals(9, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      // Undeclared exception!
      DoubleArray.random(30082, 30082, doubleArray6, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      int[] intArray0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[][] doubleArray2 = DoubleArray.add(doubleArray0, (-270.67315569659536));
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.random(6, 6, (-867.1), 0.0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(6, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.random(79, 79, (double) 79, (double) 79);
      assertEquals(79, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = DoubleArray.increment(4, 1007, 733.37138813, (-72.4276));
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.product(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(1007, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = DoubleArray.getColumnCopy(doubleArray1, 4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {733.37138813, 660.94378813, 588.51618813, 516.0885881300001}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = DoubleArray.merge(doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(4, doubleArray1.length);
      assertEquals(4028, doubleArray4.length);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment((-1491.7733282174188), (-1491.7733282174188), (-1491.7733282174188));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.identity(957);
      assertEquals(957, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      DoubleArray.mergeColumns(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      int[] intArray0 = new int[1];
      intArray0[0] = 1368;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsCopy(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1368 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2926.735);
      doubleArray0[0] = (-2926.735);
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[] intArray0 = DoubleArray.maxIndex(doubleArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      double double0 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {(-2926.735), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2926.735), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2926.735), -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2926.735), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.add(doubleArray1, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertSame(doubleArray4, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {(-2926.735), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      // Undeclared exception!
      try { 
        DoubleArray.sort(doubleArray3, (-1632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1632 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      int int0 = (-4751);
      // Undeclared exception!
      try { 
        DoubleArray.deleteRange(doubleArray0, (-4751), 96);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4839
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-270.67315569659536);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-836.5003);
      doubleArray1[1] = (-867.1);
      doubleArray1[2] = (-270.67315569659536);
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-867.1);
      doubleArray2[1] = (-867.1);
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      double double0 = DoubleArray.sum(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray2, 0.01);
      assertEquals((-1734.2), double0, 0.01);
      assertEquals(2, doubleArray2.length);
      
      double double1 = DoubleArray.min(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray2, 0.01);
      assertEquals((-867.1), double1, 0.01);
      assertEquals(2, doubleArray2.length);
      
      double[][] doubleArray4 = new double[5][1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray0;
      doubleArray4[4] = doubleArray1;
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-270.67315569659536), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      int[] intArray0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[][] doubleArray1 = DoubleArray.getColumnsCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 59.12042;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 11.22;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray3 = DoubleArray.deleteRows(doubleArray1, intArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = DoubleArray.min(doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DoubleArray.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray1 = DoubleArray.minIndex(doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertEquals(4, intArray1.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(intArray1);
      
      double[][] doubleArray5 = DoubleArray.add(doubleArray3, 0.5);
      assertNotSame(doubleArray0, doubleArray4);
      assertSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {59.12042, 0.5, 11.22, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray5.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.increment(97, 97, (double) 97, (double) 97);
      assertEquals(97, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.add(doubleArray0, (double) 97);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(97, doubleArray0.length);
      assertEquals(97, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[9];
      double[] doubleArray2 = DoubleArray.increment((-1601.817), 2.0, 0.4);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(801, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double double0 = (-1674.64499178);
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(3965.8097238070914, (-1674.64499178), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment(2.0, 2.0, 2.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = 0.2;
      double double1 = (-72.4276);
      double double2 = 0.4;
      double[] doubleArray0 = DoubleArray.increment(0.2, (-72.4276), 0.4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double double3 = (-2.0);
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(0.4, (-2.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3605.1726);
      doubleArray1[0] = 2272.547;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {2272.547, (-3605.1726), 0.0}, doubleArray1, 0.01);
      assertEquals(1, int0);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray2 = DoubleArray.sum(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = DoubleArray.getRowCopy(doubleArray0, 1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[][] doubleArray1 = DoubleArray.add(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy((double[][][]) null, 52, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-836.5003);
      doubleArray2[1] = (-867.1);
      doubleArray2[2] = (-270.67315569659536);
      doubleArray0[0] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-867.1);
      doubleArray3[1] = (-867.1);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = DoubleArray.sort(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = new double[8][2];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = doubleArray1;
      doubleArray5[1] = doubleArray3;
      doubleArray5[2] = doubleArray1;
      doubleArray5[3] = doubleArray1;
      doubleArray5[4] = doubleArray1;
      doubleArray5[5] = doubleArray3;
      doubleArray5[6] = doubleArray3;
      double double0 = DoubleArray.sum(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray3, 0.01);
      assertEquals((-1734.2), double0, 0.01);
      assertEquals(2, doubleArray3.length);
      
      double double1 = DoubleArray.min(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-867.1), (-867.1)}, doubleArray3, 0.01);
      assertEquals((-867.1), double1, 0.01);
      assertEquals(2, doubleArray3.length);
      
      double[][] doubleArray6 = new double[5][1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      
      doubleArray6[0] = doubleArray3;
      doubleArray6[1] = doubleArray3;
      doubleArray6[2] = doubleArray3;
      doubleArray6[3] = doubleArray1;
      doubleArray6[4] = doubleArray2;
      boolean boolean0 = DoubleArray.isRowDimension(doubleArray6, 0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(5, doubleArray6.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        DoubleArray.product(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      int int0 = 510;
      // Undeclared exception!
      try { 
        DoubleArray.getRowCopy(doubleArray0, 510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 510 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      double[] doubleArray1 = DoubleArray.getCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[][] doubleArray0 = new double[18][3];
      int[] intArray0 = new int[2];
      double[][] doubleArray1 = DoubleArray.getRowsCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.add(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(3096, (double) 3096);
      assertEquals(3096, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        DoubleArray.getCopy(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.one((-574), (-574));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -574
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      int[] intArray0 = new int[6];
      intArray0[0] = 2746;
      intArray0[1] = (-1);
      intArray0[2] = 2852;
      intArray0[3] = 1007;
      intArray0[4] = 3;
      intArray0[5] = 2742;
      // Undeclared exception!
      try { 
        DoubleArray.one((-1), 2742);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-96.8484492324);
      doubleArray0[1] = (-1448.025);
      doubleArray0[2] = (-641.3442);
      doubleArray0[3] = 0.9999998211860657;
      doubleArray0[4] = 693.4;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = (-563.3586234314573);
      doubleArray0[7] = 2980.5999009647776;
      double[] doubleArray1 = DoubleArray.sort(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-96.8484492324), (-1448.025), (-641.3442), 0.9999998211860657, 693.4, 0.5, (-563.3586234314573), 2980.5999009647776}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1448.025), (-641.3442), (-563.3586234314573), (-96.8484492324), 0.5, 0.9999998211860657, 693.4, 2980.5999009647776}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-96.8484492324), (-1448.025), (-641.3442), 0.9999998211860657, 693.4, 0.5, (-563.3586234314573), 2980.5999009647776}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-96.8484492324), 140238.97569974602, (-8.994145367897305E7), (-8.994143759618786E7), (-6.236539282919666E10), (-3.118269641459833E10), 1.7567040927009156E13, 5.2360320447287688E16}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[3][3];
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-563.3586234314573);
      doubleArray4[1] = (-641.3442);
      doubleArray4[2] = (-1448.025);
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray0;
      double[][] doubleArray5 = DoubleArray.mergeColumns(doubleArray3);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray3, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(3, doubleArray5.length);
      assertEquals(3, doubleArray3.length);
      assertNotNull(doubleArray5);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[17][3];
      double[] doubleArray1 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(17, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.sort(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(17, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = DoubleArray.sum(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        DoubleArray.min(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 867.759;
      doubleArray1[1] = 867.759;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray1[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 867.759;
      double[][] doubleArray3 = DoubleArray.diagonal(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 867.759, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.rowVector(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 867.759, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      int int0 = 198;
      // Undeclared exception!
      try { 
        DoubleArray.checkLength(doubleArray1, 198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 3 elements instead of 198 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DoubleArray.min(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = DoubleArray.sum(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = DoubleArray.random(2755, (double) 2755, 0.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2755, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[3][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 2755;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1735.0412);
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = (double) 2755;
      double double0 = DoubleArray.sum(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 2755.0, 0.0, (-1735.0412), 0.0, 2755.0}, doubleArray3, 0.01);
      assertEquals(3774.9588000000003, double0, 0.01);
      assertEquals(9, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        DoubleArray.min(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[][] doubleArray1 = DoubleArray.deleteRowsRange(doubleArray0, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = DoubleArray.diagonal(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-867.1)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2997.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 815.3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-714.205189);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-372.2693196);
      doubleArray0[8] = (-513.8679826505204);
      double[] doubleArray1 = DoubleArray.deleteRange(doubleArray0, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2997.0), 0.0, 815.3, 0.0, 0.0, (-714.205189), (-1.0), (-372.2693196), (-513.8679826505204)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 815.3, 0.0, 0.0, (-714.205189), (-1.0), (-372.2693196), (-513.8679826505204)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray1;
      boolean boolean0 = DoubleArray.isRowDimension(doubleArray2, 179);
      assertFalse(boolean0);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = DoubleArray.max(doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 815.3, 0.0, 0.0, (-714.205189), (-1.0), (-372.2693196), (-513.8679826505204)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(4932.4595, 815.3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        DoubleArray.buildXY(1017.543, (-1.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be less than second
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1953.3159966;
      doubleArray0[0] = 1953.3159966;
      double double1 = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1072.4625808807582);
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {1953.3159966, 6.283185307179586, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = (-368);
      int int1 = 93;
      int int2 = 448;
      int int3 = 4;
      double[] doubleArray2 = DoubleArray.insert(doubleArray0, 0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1953.3159966, 6.283185307179586, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1953.3159966, 6.283185307179586, (-1072.4625808807582), 1953.3159966, 6.283185307179586, (-1072.4625808807582)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int4 = 637;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray1, 637);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 637 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.random((-126));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -126
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.diagonal((-1), (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be > 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.random(557, 557);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = 3.1415926536;
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), 3.1415926536}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-422.5936593464)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), 3.1415926536}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-422.5936593464)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.735252)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5+HRxp`DT8V9p$G@";
      stringArray0[1] = "5+HRxp`DT8V9p$G@";
      stringArray0[2] = "5+HRxp`DT8V9p$G@";
      stringArray0[3] = "t]O\"99!";
      stringArray0[4] = "";
      stringArray0[5] = "5+HRxp`DT8V9p$G@";
      stringArray0[6] = "";
      stringArray0[7] = "5+HRxp`DT8V9p$G@";
      stringArray0[8] = "";
      DoubleArray.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DoubleArray.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.fill(3, (-1), (double) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray0, (-1218), (-1218));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-39.50401439491758);
      doubleArray1[1] = (-3605.1726);
      doubleArray1[0] = 2272.55;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray1, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray1.length);
      
      double[][] doubleArray2 = DoubleArray.getRowsRangeCopy(doubleArray0, 1, 1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(177, (-826.848));
      assertEquals(177, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-826.848);
      doubleArray1[1] = (-826.848);
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray0, (-526), 177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -526 out of bounds for length 177
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.merge((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 262.23319152;
      doubleArray0[2] = 0.0;
      double double0 = DoubleArray.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 262.23319152, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 262.23319152;
      doubleArray2[1] = 2599.5994680781914;
      doubleArray2[2] = 262.23319152;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int int0 = 1413;
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray1, 1413, (-218));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1630
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = DoubleArray.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = 6;
      IndexFunction indexFunction0 = mock(IndexFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(indexFunction0).fi(anyInt());
      double[] doubleArray0 = DoubleArray.findex(6, indexFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsRangeCopy(doubleArray1, 6, 1088);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 3217;
      double[][] doubleArray0 = DoubleArray.identity(3217);
      assertEquals(3217, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int int1 = 3;
      double[] doubleArray1 = new double[6];
      double[][] doubleArray2 = new double[7][4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-540.685241);
      doubleArray3[1] = (double) 3;
      doubleArray3[2] = (double) 3;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = 4932.4595;
      doubleArray3[5] = (double) 3;
      doubleArray2[6] = doubleArray3;
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns(doubleArray2, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2272.547;
      doubleArray1[3] = (-3605.1726);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3605.1726);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-3605.1726);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray2[1] = (-3605.1726);
      doubleArray4[2] = 3.141592653589793;
      doubleArray4[3] = (-3605.1726);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 2272.547;
      doubleArray4[7] = 2272.547;
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {0.0, 0.0, 2272.547, (-3605.1726)}, doubleArray1, 0.01);
      assertEquals(3, int0);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1177.1200755);
      doubleArray1[1] = (-254.608);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.45623308420181274;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 808.8023572;
      doubleArray1[7] = 2215.5;
      doubleArray1[8] = (-1542.64403);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        DoubleArray.random(448, 448, doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.increment(0, 0, (double) 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.increment(150, 150, (double) 150, (double) 150);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      DoubleArray.fill(2677, 69, (double) 2677);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(177, (-826.848));
      assertEquals(177, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-826.848);
      doubleArray1[1] = (-826.848);
      double double0 = DoubleArray.product(doubleArray1);
      assertArrayEquals(new double[] {(-826.848), (-826.848)}, doubleArray1, 0.01);
      assertEquals(683677.615104, double0, 0.01);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      DoubleArray.fill(3187, 3187, 0.0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DoubleArray.toString((String) null, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[0][6];
      String string0 = DoubleArray.toString("", doubleArray1);
      assertEquals("", string0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      double[][] doubleArray2 = new double[6][5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      String string0 = DoubleArray.toString("", doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(" \n \n \n \n \n ", string0);
      assertEquals(6, doubleArray2.length);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      double[][] doubleArray3 = DoubleArray.deleteColumns(doubleArray2, intArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(6, doubleArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray2, 165, 165, 3, 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 165 out of bounds for length 6
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      String string0 = DoubleArray.toString("a(", doubleArray0);
      assertEquals("a( a( a(\na( a( a(\na( a( a(\na( a( a(", string0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-605.21);
      doubleArray1[1] = (-1153.4478);
      doubleArray1[2] = 0.021602869033813477;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-336.406202);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-336.406202);
      doubleArray2[2] = (-605.21);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1153.4478);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-605.21);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (-1153.4478);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 2.0;
      doubleArray5[1] = (-1153.4478);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (-336.406202);
      doubleArray5[5] = 2.0;
      doubleArray5[6] = 215.6709346856;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DoubleArray.toString("HZiZ^Oe", doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.identity((-1123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be > 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        DoubleArray.random(32, 32, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(3217);
      assertEquals(3217, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3217;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3217;
      double[][] doubleArray2 = DoubleArray.random(3, 3, doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.0, 3.0, 3217.0, 3.0, 3.0, 3217.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      int int0 = 510;
      // Undeclared exception!
      try { 
        DoubleArray.getRowCopy(doubleArray0, 510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      try { 
        DoubleArray.getRowCopy(doubleArray0, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 96;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      int[] intArray0 = DoubleArray.maxIndex(doubleArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      double double0 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(96.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][] doubleArray4 = DoubleArray.add(doubleArray1, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = DoubleArray.sort(doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray5.length);
      assertNotNull(doubleArray5);
      
      double[] doubleArray6 = DoubleArray.getCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray5);
      assertSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 96.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(9, intArray0.length);
      assertEquals(9, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      double[] doubleArray7 = DoubleArray.one(1999, 1885.0);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray6);
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertEquals(1999, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      // Undeclared exception!
      try { 
        DoubleArray.increment((-2440), 96, 0.4, (double) 96);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2440
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      // Undeclared exception!
      try { 
        DoubleArray.sort(doubleArray0, (-3822));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3822 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-836.5003);
      doubleArray2[1] = (-867.1);
      doubleArray2[2] = (-270.67315569659536);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-867.1);
      doubleArray3[1] = (-867.1);
      doubleArray0[2] = doubleArray3;
      int int0 = 0;
      // Undeclared exception!
      try { 
        DoubleArray.sort(doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      double double0 = (-270.67315569659536);
      doubleArray1[0] = (-270.67315569659536);
      doubleArray0[0] = doubleArray1;
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, (-727));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DoubleArray.fill((-727), (-2926.735));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -727
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1079.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4932.4595;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.9999998211860657;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2861.349740763535);
      doubleArray0[7] = (-72.4276);
      doubleArray0[8] = (-3413.34566608803);
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {1079.0, 0.0, 4932.4595, 0.0, 0.9999998211860657, 0.0, (-2861.349740763535), (-72.4276), (-3413.34566608803)}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray2 = DoubleArray.sum(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7553.0, 0.0, 34527.2165, 0.0, 6.99999874830246, 0.0, (-20029.448185344743), (-506.99319999999994), (-23893.41966261621)}, doubleArray2, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = DoubleArray.random(8);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.3293473720550537, 0.16158640384674072, 0.06976139545440674, 0.12464642524719238, 0.3707202672958374, 0.4900133013725281, 0.3890259265899658, 0.5995862483978271}, doubleArray3, 0.01);
      assertEquals(8, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.findex(179, (IndexFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.columnVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(2, 2);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.insertRows(doubleArray0, 2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.increment(97, 97, (double) 97, (double) 97);
      assertEquals(97, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 97);
      assertTrue(boolean0);
      assertEquals(97, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.one((-3123), (-3123), (double) (-3123));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3123
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(96);
      assertEquals(96, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(705);
      assertEquals(705, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = DoubleArray.one(177, 6, (double) 705);
      assertEquals(177, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = DoubleArray.columnVector(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(705, doubleArray0.length);
      assertEquals(705, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray1, 6);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(boolean0);
      assertEquals(177, doubleArray1.length);
      
      double[] doubleArray3 = DoubleArray.fill(6, (double) 6);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, 6.0, 6.0, 6.0}, doubleArray3, 0.01);
      assertEquals(6, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = DoubleArray.random(0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      double[][] doubleArray5 = new double[1][0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = doubleArray0;
      double[][] doubleArray6 = DoubleArray.mergeColumns(doubleArray5);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray1);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertEquals(1, doubleArray5.length);
      assertEquals(705, doubleArray6.length);
      assertNotNull(doubleArray6);
      
      IndexFunction indexFunction0 = mock(IndexFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(indexFunction0).fi(anyInt());
      double[] doubleArray7 = DoubleArray.findex(177, indexFunction0);
      assertNotSame(doubleArray7, doubleArray0);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray4);
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertEquals(177, doubleArray7.length);
      assertNotNull(doubleArray7);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 177;
      double[][] doubleArray8 = DoubleArray.deleteColumns(doubleArray5, intArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray8);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertArrayEquals(new int[] {177}, intArray0);
      assertEquals(1, doubleArray5.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray8.length);
      assertNotNull(doubleArray8);
      
      double[] doubleArray9 = DoubleArray.merge(doubleArray8);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray8);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray5);
      assertNotSame(doubleArray9, doubleArray0);
      assertNotSame(doubleArray9, doubleArray3);
      assertNotSame(doubleArray9, doubleArray4);
      assertNotSame(doubleArray9, doubleArray7);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray6));
      assertFalse(doubleArray5.equals((Object)doubleArray8));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray0));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertArrayEquals(new int[] {177}, intArray0);
      assertEquals(1, doubleArray5.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray8.length);
      assertEquals(704, doubleArray9.length);
      assertNotNull(doubleArray9);
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray2, 0, 0, 0, 30082);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment(4, (double) 4, (double) 4);
      assertArrayEquals(new double[] {4.0, 8.0, 12.0, 16.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.increment(0, (double) 0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = DoubleArray.increment(2565, 0.0, 0.0);
      assertEquals(2565, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = new double[0][0];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.one((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = 165;
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int int1 = (-254);
      DoubleArray.checkRowDimension(doubleArray0, 165);
      assertEquals(165, doubleArray0.length);
      
      int int2 = 159;
      boolean boolean0 = DoubleArray.isColumnDimension(doubleArray0, 159);
      assertFalse(boolean0);
      assertEquals(165, doubleArray0.length);
      
      // Undeclared exception!
      DoubleArray.cumProduct(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(3217);
      assertEquals(3217, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        DoubleArray.checkRowDimension(doubleArray0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns have 3217 rows instead of 3 rows expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1177.1200755);
      doubleArray1[1] = (-254.608);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.45623308420181274;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 808.8023572;
      doubleArray1[7] = 2215.5;
      doubleArray1[8] = (-1542.64403);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1651.23686995712;
      doubleArray2[1] = 808.8023572;
      doubleArray2[2] = 0.45623308420181274;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 808.8023572;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 808.8023572;
      doubleArray2[7] = (-254.608);
      doubleArray2[8] = 808.8023572;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.45623308420181274;
      doubleArray3[1] = (-1542.64403);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1542.64403);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 808.8023572;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.45623308420181274;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-254.608);
      doubleArray6[2] = (-254.608);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 1651.23686995712;
      doubleArray7[1] = 0.45623308420181274;
      doubleArray7[2] = 808.8023572;
      doubleArray7[3] = (-1542.64403);
      doubleArray7[4] = 808.8023572;
      doubleArray7[5] = 0.45623308420181274;
      doubleArray7[6] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 0.45623308420181274;
      doubleArray8[1] = (-1542.64403);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = 1651.23686995712;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 808.8023572;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DoubleArray.checkRowDimension(doubleArray0, 803);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns have 9 rows instead of 803 rows expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[][][] doubleArray0 = new double[0][2][8];
      double[] doubleArray1 = DoubleArray.getColumnCopy(doubleArray0, (-3), (-3));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[][][] doubleArray0 = new double[9][7][6];
      double[][] doubleArray1 = new double[9][8];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 543.89711;
      doubleArray2[1] = 0.9999998211860657;
      doubleArray2[2] = 1135.82805933347;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2.0);
      doubleArray3[1] = 0.9999998211860657;
      doubleArray3[2] = 543.89711;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.9999998211860657;
      doubleArray4[1] = 0.9999998211860657;
      doubleArray4[2] = 0.45623308420181274;
      doubleArray4[3] = 0.9999998211860657;
      doubleArray4[4] = 0.9999998211860657;
      doubleArray4[5] = 1135.82805933347;
      doubleArray4[6] = 0.9999998211860657;
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 543.89711;
      doubleArray5[1] = (-801.98319799);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.9999998211860657;
      doubleArray5[4] = 869.93697;
      doubleArray5[5] = 0.45623308420181274;
      doubleArray5[6] = 1135.82805933347;
      doubleArray5[7] = 0.9999998211860657;
      doubleArray1[3] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 0.45623308420181274;
      doubleArray1[4] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 1135.82805933347;
      doubleArray1[5] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 0.9999998211860657;
      doubleArray8[1] = (-2.0);
      doubleArray8[2] = (-2.0);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.45623308420181274;
      doubleArray8[5] = (-2.0);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = 1135.82805933347;
      doubleArray1[6] = doubleArray8;
      double[] doubleArray9 = new double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = 791.199;
      doubleArray1[7] = doubleArray9;
      double[] doubleArray10 = new double[6];
      assertFalse(doubleArray10.equals((Object)doubleArray7));
      assertFalse(doubleArray10.equals((Object)doubleArray4));
      assertFalse(doubleArray10.equals((Object)doubleArray9));
      assertFalse(doubleArray10.equals((Object)doubleArray2));
      assertFalse(doubleArray10.equals((Object)doubleArray8));
      assertFalse(doubleArray10.equals((Object)doubleArray3));
      assertFalse(doubleArray10.equals((Object)doubleArray5));
      assertFalse(doubleArray10.equals((Object)doubleArray6));
      
      doubleArray10[0] = 0.45623308420181274;
      doubleArray10[1] = 1135.82805933347;
      doubleArray10[2] = 0.9999998211860657;
      doubleArray10[3] = (-2.0);
      doubleArray10[4] = 0.0;
      doubleArray10[5] = (-2.0);
      doubleArray1[8] = doubleArray10;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray11 = new double[3][6];
      assertFalse(doubleArray11.equals((Object)doubleArray1));
      
      doubleArray11[0] = doubleArray5;
      doubleArray11[1] = doubleArray9;
      doubleArray11[2] = doubleArray2;
      doubleArray0[1] = doubleArray11;
      double[][] doubleArray12 = new double[8][2];
      assertFalse(doubleArray12.equals((Object)doubleArray1));
      assertFalse(doubleArray12.equals((Object)doubleArray11));
      
      doubleArray12[0] = doubleArray4;
      doubleArray12[1] = doubleArray7;
      doubleArray12[2] = doubleArray6;
      doubleArray12[3] = doubleArray7;
      doubleArray12[4] = doubleArray3;
      doubleArray12[5] = doubleArray4;
      doubleArray12[6] = doubleArray6;
      double[] doubleArray13 = new double[2];
      assertFalse(doubleArray13.equals((Object)doubleArray8));
      assertFalse(doubleArray13.equals((Object)doubleArray10));
      assertFalse(doubleArray13.equals((Object)doubleArray9));
      assertFalse(doubleArray13.equals((Object)doubleArray5));
      assertFalse(doubleArray13.equals((Object)doubleArray7));
      assertFalse(doubleArray13.equals((Object)doubleArray6));
      assertFalse(doubleArray13.equals((Object)doubleArray3));
      assertFalse(doubleArray13.equals((Object)doubleArray2));
      assertFalse(doubleArray13.equals((Object)doubleArray4));
      
      doubleArray13[0] = 765.35125514722;
      doubleArray13[1] = 0.0;
      doubleArray12[7] = doubleArray13;
      doubleArray0[2] = doubleArray12;
      double[][] doubleArray14 = new double[9][3];
      assertFalse(doubleArray14.equals((Object)doubleArray11));
      assertFalse(doubleArray14.equals((Object)doubleArray12));
      assertFalse(doubleArray14.equals((Object)doubleArray1));
      
      doubleArray14[0] = doubleArray2;
      doubleArray14[1] = doubleArray5;
      double[] doubleArray15 = new double[7];
      assertFalse(doubleArray15.equals((Object)doubleArray6));
      assertFalse(doubleArray15.equals((Object)doubleArray7));
      assertFalse(doubleArray15.equals((Object)doubleArray4));
      assertFalse(doubleArray15.equals((Object)doubleArray2));
      assertFalse(doubleArray15.equals((Object)doubleArray3));
      assertFalse(doubleArray15.equals((Object)doubleArray8));
      assertFalse(doubleArray15.equals((Object)doubleArray9));
      assertFalse(doubleArray15.equals((Object)doubleArray5));
      assertFalse(doubleArray15.equals((Object)doubleArray10));
      assertFalse(doubleArray15.equals((Object)doubleArray13));
      
      doubleArray15[0] = (-2.0);
      doubleArray15[1] = (-801.98319799);
      doubleArray15[2] = (-2.0);
      doubleArray15[3] = 893.927935;
      doubleArray15[4] = 37.241309;
      doubleArray15[5] = 869.93697;
      doubleArray15[6] = 765.35125514722;
      doubleArray14[2] = doubleArray15;
      double[] doubleArray16 = new double[4];
      assertFalse(doubleArray16.equals((Object)doubleArray10));
      assertFalse(doubleArray16.equals((Object)doubleArray4));
      assertFalse(doubleArray16.equals((Object)doubleArray13));
      assertFalse(doubleArray16.equals((Object)doubleArray15));
      assertFalse(doubleArray16.equals((Object)doubleArray6));
      assertFalse(doubleArray16.equals((Object)doubleArray2));
      assertFalse(doubleArray16.equals((Object)doubleArray7));
      assertFalse(doubleArray16.equals((Object)doubleArray3));
      assertFalse(doubleArray16.equals((Object)doubleArray9));
      assertFalse(doubleArray16.equals((Object)doubleArray8));
      assertFalse(doubleArray16.equals((Object)doubleArray5));
      
      doubleArray16[0] = 37.241309;
      doubleArray16[1] = (-2.0);
      doubleArray16[2] = 0.9999998211860657;
      doubleArray16[3] = 893.927935;
      doubleArray14[3] = doubleArray16;
      doubleArray14[4] = doubleArray3;
      doubleArray14[5] = doubleArray10;
      doubleArray14[6] = doubleArray9;
      doubleArray14[7] = doubleArray3;
      doubleArray14[8] = doubleArray9;
      doubleArray0[3] = doubleArray14;
      double[][] doubleArray17 = new double[3][3];
      assertFalse(doubleArray17.equals((Object)doubleArray1));
      assertFalse(doubleArray17.equals((Object)doubleArray12));
      assertFalse(doubleArray17.equals((Object)doubleArray11));
      assertFalse(doubleArray17.equals((Object)doubleArray14));
      
      doubleArray17[0] = doubleArray8;
      doubleArray17[1] = doubleArray6;
      double[] doubleArray18 = new double[7];
      assertFalse(doubleArray18.equals((Object)doubleArray4));
      assertFalse(doubleArray18.equals((Object)doubleArray10));
      assertFalse(doubleArray18.equals((Object)doubleArray16));
      assertFalse(doubleArray18.equals((Object)doubleArray7));
      assertFalse(doubleArray18.equals((Object)doubleArray3));
      assertFalse(doubleArray18.equals((Object)doubleArray5));
      assertFalse(doubleArray18.equals((Object)doubleArray9));
      assertFalse(doubleArray18.equals((Object)doubleArray2));
      assertFalse(doubleArray18.equals((Object)doubleArray8));
      assertFalse(doubleArray18.equals((Object)doubleArray13));
      assertFalse(doubleArray18.equals((Object)doubleArray6));
      assertFalse(doubleArray18.equals((Object)doubleArray15));
      
      doubleArray18[0] = 0.0;
      doubleArray18[1] = 0.0;
      doubleArray18[2] = 893.927935;
      doubleArray18[3] = 765.35125514722;
      doubleArray18[4] = 0.45623308420181274;
      doubleArray18[5] = (-801.98319799);
      doubleArray18[6] = (-2.0);
      doubleArray17[2] = doubleArray18;
      doubleArray0[4] = doubleArray17;
      double[][] doubleArray19 = new double[9][4];
      assertFalse(doubleArray19.equals((Object)doubleArray12));
      assertFalse(doubleArray19.equals((Object)doubleArray11));
      assertFalse(doubleArray19.equals((Object)doubleArray17));
      assertFalse(doubleArray19.equals((Object)doubleArray1));
      assertFalse(doubleArray19.equals((Object)doubleArray14));
      
      doubleArray19[0] = doubleArray9;
      doubleArray19[1] = doubleArray10;
      doubleArray19[2] = doubleArray8;
      doubleArray19[3] = doubleArray8;
      doubleArray19[4] = doubleArray2;
      doubleArray19[5] = doubleArray18;
      doubleArray19[6] = doubleArray16;
      doubleArray19[7] = doubleArray10;
      doubleArray19[8] = doubleArray18;
      doubleArray0[5] = doubleArray19;
      double[][] doubleArray20 = new double[4][9];
      assertFalse(doubleArray20.equals((Object)doubleArray11));
      assertFalse(doubleArray20.equals((Object)doubleArray12));
      assertFalse(doubleArray20.equals((Object)doubleArray1));
      assertFalse(doubleArray20.equals((Object)doubleArray14));
      assertFalse(doubleArray20.equals((Object)doubleArray19));
      assertFalse(doubleArray20.equals((Object)doubleArray17));
      
      doubleArray20[0] = doubleArray6;
      doubleArray20[1] = doubleArray16;
      doubleArray20[2] = doubleArray4;
      doubleArray20[3] = doubleArray2;
      doubleArray0[6] = doubleArray20;
      double[][] doubleArray21 = new double[2][2];
      assertFalse(doubleArray21.equals((Object)doubleArray11));
      assertFalse(doubleArray21.equals((Object)doubleArray20));
      assertFalse(doubleArray21.equals((Object)doubleArray17));
      assertFalse(doubleArray21.equals((Object)doubleArray12));
      assertFalse(doubleArray21.equals((Object)doubleArray19));
      assertFalse(doubleArray21.equals((Object)doubleArray1));
      assertFalse(doubleArray21.equals((Object)doubleArray14));
      
      doubleArray21[0] = doubleArray9;
      doubleArray21[1] = doubleArray16;
      doubleArray0[7] = doubleArray21;
      double[][] doubleArray22 = new double[4][2];
      assertFalse(doubleArray22.equals((Object)doubleArray14));
      assertFalse(doubleArray22.equals((Object)doubleArray21));
      assertFalse(doubleArray22.equals((Object)doubleArray19));
      assertFalse(doubleArray22.equals((Object)doubleArray17));
      assertFalse(doubleArray22.equals((Object)doubleArray11));
      assertFalse(doubleArray22.equals((Object)doubleArray12));
      assertFalse(doubleArray22.equals((Object)doubleArray1));
      assertFalse(doubleArray22.equals((Object)doubleArray20));
      
      doubleArray22[0] = doubleArray9;
      doubleArray22[1] = doubleArray18;
      doubleArray22[2] = doubleArray7;
      doubleArray22[3] = doubleArray3;
      doubleArray0[8] = doubleArray22;
      double[] doubleArray23 = DoubleArray.getColumnCopy(doubleArray0, 0, 0);
      assertNotSame(doubleArray23, doubleArray18);
      assertNotSame(doubleArray23, doubleArray5);
      assertNotSame(doubleArray23, doubleArray8);
      assertNotSame(doubleArray23, doubleArray3);
      assertNotSame(doubleArray23, doubleArray16);
      assertNotSame(doubleArray23, doubleArray9);
      assertNotSame(doubleArray23, doubleArray15);
      assertNotSame(doubleArray23, doubleArray13);
      assertNotSame(doubleArray23, doubleArray10);
      assertNotSame(doubleArray23, doubleArray6);
      assertNotSame(doubleArray23, doubleArray7);
      assertNotSame(doubleArray23, doubleArray4);
      assertNotSame(doubleArray23, doubleArray2);
      assertFalse(doubleArray23.equals((Object)doubleArray18));
      assertFalse(doubleArray23.equals((Object)doubleArray5));
      assertFalse(doubleArray23.equals((Object)doubleArray8));
      assertFalse(doubleArray23.equals((Object)doubleArray3));
      assertFalse(doubleArray23.equals((Object)doubleArray16));
      assertFalse(doubleArray23.equals((Object)doubleArray9));
      assertFalse(doubleArray23.equals((Object)doubleArray15));
      assertFalse(doubleArray23.equals((Object)doubleArray13));
      assertFalse(doubleArray23.equals((Object)doubleArray10));
      assertFalse(doubleArray23.equals((Object)doubleArray6));
      assertFalse(doubleArray23.equals((Object)doubleArray7));
      assertFalse(doubleArray23.equals((Object)doubleArray4));
      assertFalse(doubleArray23.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {543.89711, 543.89711, 0.9999998211860657, 543.89711, 0.9999998211860657, 791.199, 0.45623308420181274, 791.199, 791.199}, doubleArray23, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray23.length);
      assertNotNull(doubleArray23);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      int[] intArray0 = new int[0];
      double[] doubleArray2 = DoubleArray.getDiagonal(doubleArray0, 5);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(165, doubleArray0.length);
      assertEquals(160, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal(doubleArray0, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 4331.99413686372;
      doubleArray1[1] = (-1574.962879);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2708.069432231587;
      doubleArray1[5] = (-2408.7448);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 4331.99413686372;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2708.069432231587;
      doubleArray2[5] = 2708.069432231587;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2708.069432231587;
      doubleArray2[8] = 2708.069432231587;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1574.962879);
      doubleArray3[1] = (-1574.962879);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-2408.7448);
      doubleArray4[1] = 2708.069432231587;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-2408.7448);
      doubleArray5[2] = (-2408.7448);
      doubleArray5[3] = 4331.99413686372;
      doubleArray5[4] = 2708.069432231587;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = 2708.069432231587;
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-2408.7448);
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DoubleArray.getDiagonal(doubleArray0, 978);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -972
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 8);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.increment(4, (-1), 4.0, 0.7665573954582214);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 4);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = DoubleArray.diagonal(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 733.37138813;
      doubleArray0[0] = 733.37138813;
      doubleArray0[1] = 0.0;
      double double1 = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = 34;
      boolean boolean0 = DoubleArray.isLength(doubleArray0, 34);
      assertArrayEquals(new double[] {733.37138813, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        DoubleArray.checkLength(doubleArray0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 3 elements instead of 2 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(20);
      assertEquals(20, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteRange(doubleArray0, 20, 2402);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2363
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      boolean boolean0 = DoubleArray.isRowDimension(doubleArray0, 510);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnDimension(doubleArray0, 559);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 559 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-390.807809644749);
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-832.9);
      doubleArray2[7] = 1326.601873835;
      doubleArray2[8] = 2113.6763610569888;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1326.601873835;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2113.6763610569888;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-832.9);
      doubleArray4[1] = 2113.6763610569888;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-832.9);
      doubleArray5[1] = 719.1881273;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-832.9);
      doubleArray5[4] = 2113.6763610569888;
      doubleArray5[5] = (-390.807809644749);
      doubleArray5[6] = 1326.601873835;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 1606.9518737300923;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 2113.6763610569888;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray0[6] = doubleArray7;
      int int0 = DoubleArray.getColumnDimension(doubleArray0, 0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns(doubleArray0, 2178, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumns(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 2703.854292927561;
      doubleArray1[2] = 86.867821384816;
      doubleArray0[0] = doubleArray1;
      int int0 = (-1784);
      // Undeclared exception!
      try { 
        DoubleArray.insertColumns(doubleArray0, (-1784), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1784 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray0, 3028, (-730));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3757
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(79, (double) 79, (double) 79);
      assertEquals(79, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(0, (double) 0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = 0.0;
      double[] doubleArray1 = DoubleArray.random(2755, (double) 2755, 0.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2755, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[][] doubleArray2 = new double[3][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      // Undeclared exception!
      try { 
        DoubleArray.getRowsRangeCopy(doubleArray2, 2755, (-787));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3541
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.diagonal((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        DoubleArray.diagonal((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray0, (-32), (-32), (-32), (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -32 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-39.50401439491758);
      doubleArray0[1] = (-3605.1726);
      doubleArray0[0] = 2272.55;
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertArrayEquals(new double[] {2272.55, (-3605.1726)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[][] doubleArray2 = DoubleArray.getSubMatrixRangeCopy(doubleArray1, 1, 1, 1, 1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (-1911.1129729721704);
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-1911.1129729721704);
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-1587.3);
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 1.0;
      doubleArray5[8] = 288.4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1587.3);
      doubleArray6[1] = (-1911.1129729721704);
      doubleArray6[2] = 288.4;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-1587.3);
      doubleArray6[7] = (-1911.1129729721704);
      doubleArray6[8] = 1428.23300408;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 1.0;
      doubleArray7[1] = 1428.23300408;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-1587.3);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-1911.1129729721704);
      doubleArray8[3] = 598.592;
      doubleArray8[4] = 0.021602869033813477;
      doubleArray8[5] = (-1587.3);
      doubleArray8[6] = (-1911.1129729721704);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DoubleArray.getSubMatrixRangeCopy(doubleArray0, 64, 64, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 64 out of bounds for length 8
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1552);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        DoubleArray.increment(0, (-1552), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of 3rd and 4th arguments must = second argument
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(165, (-826.848));
      assertEquals(165, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = null;
      int int0 = (-684);
      // Undeclared exception!
      try { 
        DoubleArray.getRangeCopy((double[]) null, (-684), 1111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-334.309132869);
      doubleArray0[3] = (-1671.84);
      doubleArray0[4] = (-541.5408893336245);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-334.309132869), (-1671.84), (-541.5408893336245), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-334.309132869), (-2006.149132869), (-2547.6900222026243), (-2547.6900222026243), (-2548.6900222026243)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = 2918;
      // Undeclared exception!
      try { 
        DoubleArray.getRangeCopy(doubleArray1, 2918, 2918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.increment((-3134), (-4524), (double) (-3134), (double) (-3134));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3134
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      DoubleArray doubleArray0 = new DoubleArray();
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        DoubleArray.increment(0, (-1929), 0.0, 0.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1929
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = 177;
      int int1 = (-2327);
      // Undeclared exception!
      try { 
        DoubleArray.diagonal((-2327), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // First argument must be > 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.identity(2);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(96, 1.0);
      assertEquals(96, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 96;
      doubleArray1[2] = (double) 96;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 96;
      doubleArray1[5] = 1.0;
      double double0 = DoubleArray.product(doubleArray1);
      assertArrayEquals(new double[] {1.0, 96.0, 96.0, 0.0, 96.0, 1.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        DoubleArray.getCopy(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[4];
      double[] doubleArray1 = DoubleArray.getCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1953.3159966;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-1072.4625808807582);
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      assertArrayEquals(new double[] {1953.3159966, 6.283185307179586, (-1072.4625808807582)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-368);
      intArray0[1] = 93;
      intArray0[2] = 448;
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = (-1625);
      // Undeclared exception!
      try { 
        DoubleArray.getCopy(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -368 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = DoubleArray.product(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      double[][][] doubleArray0 = new double[1][19][6];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy(doubleArray0, 1650, 1650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1650 out of bounds for length 19
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray1[6] = doubleArray2;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      double[] doubleArray3 = DoubleArray.product(doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      
      double[][][] doubleArray4 = new double[6][5][9];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray1;
      double[][] doubleArray5 = new double[2][6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = doubleArray0;
      doubleArray5[1] = doubleArray2;
      doubleArray4[2] = doubleArray5;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray1;
      doubleArray4[5] = doubleArray1;
      int int0 = 505;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnCopy(doubleArray4, 505, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 505 out of bounds for length 9
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.increment((-141), (double) (-141), (double) (-141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -141
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = (-3426);
      double double0 = 2019.723;
      // Undeclared exception!
      try { 
        DoubleArray.increment((-3426), (double) (-3426), 2019.723);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3426
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        DoubleArray.mergeColumns(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2035.5;
      doubleArray1[1] = 1083.6094;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1083.6094;
      doubleArray3[1] = 1083.6094;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-571.2782571);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-571.2782571);
      doubleArray4[1] = 2035.5;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-571.2782571);
      doubleArray4[6] = (-571.2782571);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1083.6094;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 1083.6094;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-571.2782571);
      doubleArray6[5] = 2035.5;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 1083.6094;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DoubleArray.mergeColumns(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-963.2);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 444.7339185642809;
      double double0 = DoubleArray.product(doubleArray0);
      assertArrayEquals(new double[] {(-963.2), 2.0, 444.7339185642809}, doubleArray0, 0.01);
      assertEquals((-856735.4207222307), double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = DoubleArray.merge(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DoubleArray.getRangeCopy(doubleArray1, 1321, 1321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      // Undeclared exception!
      try { 
        DoubleArray.deleteRowsRange(doubleArray0, 17, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-425.735252);
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-425.735252), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-422.5936593464102)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = DoubleArray.getRangeCopy(doubleArray1, 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-425.735252), 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.735252), (-422.5936593464102)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.735252)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[2][4];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[][] doubleArray4 = DoubleArray.getColumnsCopy(doubleArray3, intArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteRowsRange(doubleArray4, 898, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = DoubleArray.cumSum(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray0, 14, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 331.25207;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 331.25207;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 331.25207;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray0, (-990), (-990));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[][] doubleArray1 = DoubleArray.deleteColumnsRange(doubleArray0, 2, 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      DoubleArray.diagonal(99, 1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 99;
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = DoubleArray.increment(5, 99, 568.221685803099, (double) 99);
      int[] intArray0 = new int[8];
      intArray0[0] = 99;
      intArray0[1] = 5;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 899999963;
      intArray0[6] = 99;
      intArray0[7] = 2748;
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumns(doubleArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 91 out of bounds for length 91
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = DoubleArray.min(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      int[] intArray0 = new int[1];
      double[][] doubleArray1 = DoubleArray.deleteColumns(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 59.12042;
      doubleArray0[0] = 59.12042;
      double double1 = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 11.22;
      double double2 = 0.0;
      doubleArray0[3] = 0.0;
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      double[][] doubleArray2 = DoubleArray.buildXY(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      double[][] doubleArray3 = DoubleArray.deleteRows(doubleArray1, intArray0);
      DoubleArray.min(doubleArray2);
      DoubleArray.one(0);
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex(doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      int[] intArray0 = DoubleArray.maxIndex(doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumns(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.product((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        DoubleArray.product((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        DoubleArray.random((-1787), (-1787), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1787
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = (-2108);
      // Undeclared exception!
      try { 
        DoubleArray.random((-2108), (-2108), (double[]) null, (double[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2108
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        DoubleArray.increment((-2147048358), (-2147048358), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of 3rd and 4th arguments must = second argument
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) 96;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 96;
      // Undeclared exception!
      try { 
        DoubleArray.increment(0, 96, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length of 3rd and 4th arguments must = second argument
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DoubleArray.diagonal(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.insert(doubleArray0, 1374, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3784.73;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 1225.3888403454;
      doubleArray0[6] = (-541.55);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1363.572;
      // Undeclared exception!
      try { 
        DoubleArray.insert(doubleArray0, 720, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(169, (double) 169, (double) 169);
      double[] doubleArray1 = DoubleArray.insert(doubleArray0, 169, doubleArray0);
      assertEquals(169, doubleArray0.length);
      assertEquals(338, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 262.23319152;
      doubleArray0[2] = 0.0;
      DoubleArray.min(doubleArray0);
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 262.23319152;
      doubleArray2[1] = 2599.5994680781914;
      doubleArray2[2] = 262.23319152;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray1[1] = doubleArray2;
      DoubleArray.minIndex(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.5;
      doubleArray7[6] = (-1.0);
      doubleArray7[7] = 0.5;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        DoubleArray.maxIndex(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        DoubleArray.add(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-39.50401439491758);
      doubleArray1[1] = (-3605.1726);
      doubleArray1[0] = 2272.55;
      DoubleArray.minIndex(doubleArray1);
      double[][] doubleArray2 = DoubleArray.deleteColumnsRange(doubleArray0, 1, 1);
      int int0 = DoubleArray.minIndex(doubleArray1);
      assertEquals(1, int0);
      
      double[][] doubleArray3 = DoubleArray.add(doubleArray2, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 2703.854292927561;
      doubleArray1[2] = 86.867821384816;
      doubleArray0[0] = doubleArray1;
      DoubleArray.maxIndex(doubleArray0);
      DoubleArray.max(doubleArray1);
      double[] doubleArray2 = DoubleArray.cumProduct(doubleArray1);
      DoubleArray.buildXY(doubleArray2, doubleArray1);
      double[][] doubleArray3 = new double[1][5];
      doubleArray3[0] = doubleArray1;
      double[][] doubleArray4 = DoubleArray.add(doubleArray0, doubleArray3);
      // Undeclared exception!
      try { 
        DoubleArray.sort(doubleArray4, (-1784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1784 out of bounds for length 3
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3451.720026933;
      doubleArray1[1] = 0.021602869033813477;
      doubleArray1[2] = 2391.643674;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2391.643674;
      doubleArray2[1] = 0.021602869033813477;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2391.643674;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.021602869033813477;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 3451.720026933;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.021602869033813477;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3451.720026933;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 2391.643674;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.021602869033813477;
      doubleArray5[8] = 3451.720026933;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 2391.643674;
      doubleArray6[1] = 0.021602869033813477;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DoubleArray.add(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[][] doubleArray1 = DoubleArray.add(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.one(0);
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DoubleArray.rowVector(doubleArray0);
      DoubleArray.checkLength(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DoubleArray.increment(3.141592653589793, 0.4, 3.141592653589793);
      double[][] doubleArray1 = DoubleArray.buildXY((-425.735252), 3965.8097238070914, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsCopy(doubleArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 2
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DoubleArray.diagonal(99, 1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      DoubleArray.isLength(doubleArray0, 99);
      // Undeclared exception!
      try { 
        DoubleArray.checkLength(doubleArray0, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 6 elements instead of 22 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = DoubleArray.merge(doubleArray0);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.throwError("TRya.YXXw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TRya.YXXw
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = DoubleArray.buildXY(3254.4375, 3254.4375, doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 262.23319152;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2272.4043);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 262.23319152;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 262.23319152;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DoubleArray.merge(doubleArray0);
      DoubleArray.buildXY(0.0, 0.0, doubleArray3);
      // Undeclared exception!
      try { 
        DoubleArray.checkLength(doubleArray1, 1928);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row have 4 elements instead of 1928 elements expected.
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(2743);
      int int0 = DoubleArray.minIndex(doubleArray0);
      assertEquals(769, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        DoubleArray.getRowsCopy(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-270.67315569659536);
      doubleArray1[1] = (-867.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-836.5003);
      doubleArray2[1] = (-867.1);
      doubleArray2[2] = (-270.67315569659536);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-867.1);
      doubleArray3[1] = (-867.1);
      doubleArray0[2] = doubleArray3;
      int[] intArray0 = new int[0];
      double[][] doubleArray4 = DoubleArray.getRowsCopy(doubleArray0, intArray0);
      assertEquals(0, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2272.547;
      doubleArray1[3] = (-3605.1726);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3605.1726);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-3605.1726);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-3605.1726);
      doubleArray4[2] = 3.141592653589793;
      doubleArray4[3] = (-3605.1726);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 2272.547;
      doubleArray4[7] = 2272.547;
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 3.141592653589793;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 2272.547;
      doubleArray5[3] = 3.141592653589793;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 2272.547;
      doubleArray5[6] = 2272.547;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 3.141592653589793;
      doubleArray6[2] = 2272.547;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 2272.547;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 6.283185307179586;
      doubleArray7[2] = 3.141592653589793;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 6.283185307179586;
      doubleArray8[1] = 6.283185307179586;
      doubleArray8[2] = 6.283185307179586;
      doubleArray8[3] = (-2314.3343);
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = (-2314.3343);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-3605.1726);
      doubleArray9[3] = 3.141592653589793;
      doubleArray0[8] = doubleArray9;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1253);
      // Undeclared exception!
      try { 
        DoubleArray.getRowsCopy(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1253 out of bounds for length 9
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      int[] intArray0 = DoubleArray.minIndex(doubleArray0);
      double[][] doubleArray1 = DoubleArray.getRowsCopy(doubleArray0, intArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1261);
      intArray0[1] = (-1261);
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 668.93770368;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (-475);
      intArray0[2] = 4;
      intArray0[3] = 1491;
      intArray0[4] = 290;
      intArray0[5] = 179;
      intArray0[6] = 502;
      intArray0[7] = (-2535);
      intArray0[8] = (-2271);
      // Undeclared exception!
      try { 
        DoubleArray.deleteRows(doubleArray0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsRangeCopy(doubleArray0, 2939, 2939);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[][] doubleArray1 = DoubleArray.getColumnsRangeCopy(doubleArray0, 0, 0);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-39.50401439491758);
      double[] doubleArray3 = DoubleArray.getRangeCopy(doubleArray2, 0, 0);
      DoubleArray.copy(doubleArray3);
      double[] doubleArray4 = DoubleArray.increment(3922, 0.0, 2272.55);
      double[][] doubleArray5 = new double[0][0];
      DoubleArray.diagonal(doubleArray4);
      double[] doubleArray6 = DoubleArray.cumProduct(doubleArray2);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray6, 0.01);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.findex(0, (IndexFunction) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleArray.rowVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[][] doubleArray1 = DoubleArray.getColumnsRangeCopy(doubleArray0, 2, 2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      double[][] doubleArray3 = DoubleArray.rowVector(doubleArray2);
      double[][] doubleArray4 = DoubleArray.f(doubleArray3, (Function) null);
      assertNotSame(doubleArray3, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[][] doubleArray1 = DoubleArray.mergeRows(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = 0;
      IndexFunction indexFunction0 = mock(IndexFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = DoubleArray.findex(0, indexFunction0);
      double[][] doubleArray1 = DoubleArray.rowVector(doubleArray0);
      // Undeclared exception!
      try { 
        DoubleArray.getColumnsRangeCopy(doubleArray1, 0, 1062);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        DoubleArray.max(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1936.231577396801;
      doubleArray1[1] = 1418.6;
      doubleArray1[2] = 1387.2;
      doubleArray1[3] = 4932.4595;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1936.231577396801;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 4932.4595;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1418.6;
      doubleArray2[5] = 1079.0;
      doubleArray2[6] = 1936.231577396801;
      doubleArray2[7] = 1936.231577396801;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = DoubleArray.max(doubleArray0);
      assertArrayEquals(new double[] {1936.231577396801, 1418.6, 4932.4595, 4932.4595, 1418.6}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = DoubleArray.max(doubleArray0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-255.661854545);
      doubleArray1[1] = (-1278.033839270836);
      doubleArray1[2] = 109.671;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-63.379636);
      doubleArray2[1] = (-1278.033839270836);
      doubleArray2[2] = (-255.661854545);
      doubleArray2[3] = 1400.0;
      doubleArray2[4] = (-1278.033839270836);
      doubleArray2[5] = (-790.2909);
      doubleArray2[6] = (-1278.033839270836);
      doubleArray2[7] = (-1278.033839270836);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-255.661854545);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-790.2909);
      doubleArray4[1] = (-1278.033839270836);
      doubleArray4[2] = (-790.2909);
      doubleArray4[3] = (-1278.033839270836);
      doubleArray4[4] = (-63.379636);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1278.033839270836);
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DoubleArray.max(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray0, (-1541), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1539
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 553.9911551705464;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 553.9911551705464;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 553.9911551705464;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 553.9911551705464;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DoubleArray.deleteColumnsRange(doubleArray0, (-2268), 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2270
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      // Undeclared exception!
      try { 
        DoubleArray.f(doubleArray0, (Function) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      double[][] doubleArray1 = DoubleArray.f(doubleArray0, (Function) null);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-635.18813);
      doubleArray1[2] = (-1313.6317347340187);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1770.8272286266636;
      doubleArray1[5] = 1232.88128802163;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1770.8272286266636;
      doubleArray2[1] = 1770.8272286266636;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-306.18211513365);
      doubleArray3[2] = (-635.18813);
      doubleArray3[3] = 1232.88128802163;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-306.18211513365);
      doubleArray4[1] = (-1313.6317347340187);
      doubleArray4[2] = (-306.18211513365);
      doubleArray4[3] = (-635.18813);
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-821.879496032363);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1313.6317347340187);
      doubleArray5[5] = (-635.18813);
      doubleArray5[6] = (-635.18813);
      doubleArray5[7] = 1770.8272286266636;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 1232.88128802163;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-306.18211513365);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 1232.88128802163;
      doubleArray8[1] = (-1313.6317347340187);
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = (-306.18211513365);
      doubleArray8[7] = 2094.821;
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double[][] doubleArray9 = DoubleArray.f(doubleArray0, function0);
      assertNotSame(doubleArray9, doubleArray0);
  }
}
