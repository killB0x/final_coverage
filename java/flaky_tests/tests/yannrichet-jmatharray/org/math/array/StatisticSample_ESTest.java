/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:14:27 GMT 2022
 */

package org.math.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.math.array.DoubleArray;
import org.math.array.StatisticSample;
import org.math.array.util.Function;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatisticSample_ESTest extends StatisticSample_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StatisticSample.randomTriangular(2, 1829, (-1597.80879175594), 4.46901848225094E12);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-505.8);
      doubleArray1[1] = 2080.593320365164;
      doubleArray1[2] = (-1597.80879175594);
      doubleArray1[3] = (double) 2;
      // Undeclared exception!
      try { 
        StatisticSample.covariance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1727.64303717216);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-2527.89465);
      doubleArray0[4] = (double) 1;
      StatisticSample.histogram_classes(doubleArray0, (-2527.89465), (-1727.64303717216), 1);
      // Undeclared exception!
      try { 
        StatisticSample.mean((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      double double0 = 5.859778233313909E12;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      StatisticSample.randomLogNormal(0, 5.859778233313909E12, (double) 0);
      // Undeclared exception!
      try { 
        StatisticSample.variance((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(0, (double) 0, (-241.8104866217138));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-241.8104866217138);
      doubleArray1[2] = (-241.8104866217138);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-241.8104866217138);
      StatisticSample.histogram_classes(doubleArray0, doubleArray1);
      StatisticSample.randomNormal(0, 0, 21.3, 0.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        StatisticSample.stddeviation((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(1);
      double double0 = StatisticSample.mean(doubleArray0);
      assertArrayEquals(new double[] {0.4204868674278259}, doubleArray0, 0.01);
      assertEquals(0.4204868674278259, double0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomBeta(1, (double) 1, (double) 1);
      StatisticSample.histogram(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomWeibull(4, 0, 0.021602869033813477, (-2.024364333333781));
      StatisticSample.correlation(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StatisticSample.randomChi2(5, 5);
      double[][] doubleArray0 = DoubleArray.identity(421);
      // Undeclared exception!
      StatisticSample.covariance(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 101.26233333333329;
      StatisticSample.histogram(doubleArray0, doubleArray0);
      StatisticSample.variance(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 1;
      StatisticSample.randomChi2(1, 1);
      StatisticSample.randomCauchy(1, (double) 1, (double) 1);
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 1037, (-788));
      // Undeclared exception!
      StatisticSample.correlation(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomWeibull(1, 0, (double) 1, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      StatisticSample.covariance(doubleArray0, doubleArray0);
      StatisticSample.randomTriangular(1, 0, 1.0, (-1896.0), (-4918.2));
      DoubleArray.one(1, (-1896.0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(480, 2813.63509252, (double) 480);
      // Undeclared exception!
      StatisticSample.histogram_classes(doubleArray0, (-564.608), (double) 480, 2619);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StatisticSample.randomTriangular(0, 0, (-1331.3356829), 0.0, 1327.6124105976);
      DoubleArray.one(33, (double) 33);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = StatisticSample.histogram(doubleArray0, doubleArray0);
      DoubleArray.product(doubleArray1);
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleArray.random(1);
      int int0 = 1041;
      // Undeclared exception!
      StatisticSample.randomTriangular(211, 1041, (double) 211, (double) 211, (double) 1041);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomChi2(6, 6);
      StatisticSample.randomInt(1297, 1297, (-1833));
      double[] doubleArray1 = StatisticSample.randomDirac(1561, doubleArray0, doubleArray0);
      StatisticSample.correlation(doubleArray0, doubleArray1);
      // Undeclared exception!
      StatisticSample.randomTriangular(3578, 1025, 171208.652063, 4351.7738888792765, 2.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatisticSample.variance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomLogNormal(1, 0.5, (-2.0));
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.08515672256372861}, doubleArray0, 0.01);
      
      StatisticSample.histogram_classes(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (-1040.886));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StatisticSample.correlation(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      StatisticSample.stddeviation(doubleArray1);
      StatisticSample.randomNormal(3837, (double) 3837, (-186.9064));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(64, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomLogNormal((-1768), 64, (double) 0, (double) (-1768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1768
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 5;
      double[][] doubleArray0 = StatisticSample.randomChi2(5, 5, 5);
      StatisticSample.covariance(doubleArray0);
      double[] doubleArray1 = null;
      double double0 = 1351.274411;
      int int1 = 1545;
      // Undeclared exception!
      try { 
        StatisticSample.histogram((double[]) null, 1351.274411, (-5050.630371291), 1545);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1597.80879175594);
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = 3588.505790039064;
      doubleArray2[3] = 857.6287102050786;
      doubleArray2[4] = (double) 32;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      StatisticSample.correlation(doubleArray1, doubleArray1);
      StatisticSample.randomCauchy(32, (-668.723059765), 1.0);
      double double0 = 1.4341350417495944E11;
      // Undeclared exception!
      StatisticSample.randomBeta(713, 32, 1.4341350417495944E11, 1.4491628078918167E11);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 3136;
      double[] doubleArray0 = StatisticSample.randomWeibull(3136, (double) 3136, (-1040.886));
      // Undeclared exception!
      StatisticSample.histogram(doubleArray0, 338.8044371827597, 2.0, 3136);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.mean((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomChi2(1, 1);
      StatisticSample.mean(doubleArray0);
      StatisticSample.randomTriangular(1, 5, 1.964173141490065, (double) 1, 1798.588573);
      StatisticSample.mean(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (-1040.886));
      StatisticSample.histogram(doubleArray0, 338.8044371827597, 2.0, 0);
      StatisticSample.randomTriangular(0, 0, (-1093.9), (-1040.886), (-1040.886));
      StatisticSample.randomChi2(0, 178);
      StatisticSample.randomUniform(0, 178, (-1093.9), (double) 0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(1, 1, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-131.83);
      double[][] doubleArray1 = DoubleArray.increment(64, 64, (-131.83), (-131.83));
      assertNotNull(doubleArray1);
      assertEquals(64, doubleArray1.length);
      
      // Undeclared exception!
      StatisticSample.correlation(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomUniform((-439), (double) 1, (-3094.8002));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -439
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomCauchy(0, (-1.0), 1150.22619637);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = StatisticSample.covariance(doubleArray0, (double[]) null);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = StatisticSample.randomDirac(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[3][0];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      double[] doubleArray3 = StatisticSample.mean(doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 5106.111580261481;
      double[][] doubleArray5 = StatisticSample.randomDirac(174, 0, doubleArray0, doubleArray4);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(7, doubleArray0.length);
      assertEquals(174, doubleArray5.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5106.111580261481}, doubleArray4, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular((-1), 1, (double) (-1), (double) 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(97, (double) 97, 0.9999998211860657);
      assertNotNull(doubleArray0);
      assertEquals(97, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomUniform(0, 97, 0.9999998211860657, 1103.3702747);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = StatisticSample.randomTriangular(97, 2.0, 68441.12243230837);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(97, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomChi2(0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = StatisticSample.stddeviation(doubleArray0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomBeta(2, (double) 0, 1.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomBeta(217, (double) 2, (double) 2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(217, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = 1176;
      double[][] doubleArray3 = new double[4][1];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 1176;
      doubleArray4[1] = (double) 217;
      doubleArray4[2] = 97.8;
      doubleArray4[3] = -0.0;
      doubleArray4[4] = 1246.8282;
      doubleArray4[5] = 97.8;
      doubleArray4[6] = (double) 217;
      doubleArray4[7] = 1.0;
      doubleArray4[8] = 1.0;
      doubleArray3[1] = doubleArray4;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      // Undeclared exception!
      try { 
        StatisticSample.mean(doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomRejection((-4862), (Function) null, 5.859778233313909E12, 5.859778233313909E12, (double) (-4862));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4862
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(0, 1);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes((double[]) null, (-2035));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomLogNormal(170, 170, (-3522.566799932512), (double) 170);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomTriangular(0, 0, 0.0, 2.772464272838904);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = StatisticSample.randomBeta(0, (-428.38602239645), (-3067.1927193087677));
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomBeta(0, (-1826.714186), (double) 0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      int[] intArray0 = StatisticSample.randomInt(0, 519, 169);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomLogNormal(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomLogNormal(0, 0, (-1041.1711339227875), (-1041.1711339227875));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = DoubleArray.one(178, (double) 178);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(178, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular((-2420), (double) 178, (-2726.56693848693), (double) 178);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2420
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomUniform(0, 1290, 77203.38326150952, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.stddeviation(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomChi2(0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = 2;
      double[][] doubleArray1 = StatisticSample.randomExponential(2, 2975, (double) 2);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      
      int int2 = 269;
      double[][] doubleArray2 = StatisticSample.randomUniform(269, 0, 0.0, 4168.42);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(269, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      StatisticSample.randomTriangular(2975, 0.0, 4168.42);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2251.481850536627;
      doubleArray0[2] = 2251.481850536627;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2251.481850536627;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-1864.275028);
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2251.481850536627, 2251.481850536627, (-1.0), 2251.481850536627, 0.0, (-1864.275028)}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[9][6];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1864.275028);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 2251.481850536627;
      doubleArray2[4] = 2251.481850536627;
      doubleArray2[5] = 2251.481850536627;
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (double) 0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      double[] doubleArray3 = StatisticSample.randomLogNormal(0, 1.0, 2251.481850536627);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      double[] doubleArray4 = StatisticSample.randomNormal(3837, 2251.481850536627, 7.111120281582977E12);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(3837, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      
      double[][] doubleArray5 = StatisticSample.randomDirac(0, 0, doubleArray4, doubleArray0);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertEquals(3837, doubleArray4.length);
      assertEquals(0, doubleArray5.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2251.481850536627, 2251.481850536627, (-1.0), 2251.481850536627, 0.0, (-1864.275028)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      StatisticSample.randomTriangular(3837, 628.892723592629, (double) 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 666.09796740926;
      doubleArray0[0] = 666.09796740926;
      double double1 = (-1866.2069924695202);
      doubleArray0[1] = (-1866.2069924695202);
      doubleArray0[2] = 2666068.63220599;
      double double2 = 1572.4527027027027;
      doubleArray0[3] = 1572.4527027027027;
      doubleArray0[4] = 1330.8445945945946;
      double[] doubleArray1 = StatisticSample.histogram(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {666.09796740926, (-1866.2069924695202), 2666068.63220599, 1572.4527027027027, 1330.8445945945946}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 3.0, 1.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomCauchy(1, 1330.8445945945946, (double) 1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1330.7148183767201}, doubleArray2, 0.01);
      
      int int0 = (-1654);
      // Undeclared exception!
      try { 
        StatisticSample.randomChi2((-1654), 19, (-1654));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1654
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomExponential(0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomExponential(0, 0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double double0 = StatisticSample.stddeviation(doubleArray0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomBeta(0, 0.0, -0.0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomBeta(0, (double) 0, 97.8);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.mean(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3540.3;
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(407, doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = StatisticSample.randomInt(97, 97, 97);
      assertNotNull(intArray0);
      assertEquals(97, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(1, 799.3067567567568, 0.9999998211860657);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.5292748439743185E-4}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomUniform(1, 2, (double) 1, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      
      int[][] intArray0 = StatisticSample.randomInt(372, 2, 2, 372);
      assertNotNull(intArray0);
      assertEquals(372, intArray0.length);
      
      double[] doubleArray2 = StatisticSample.randomTriangular(800, (-545.8505524768138), 429.64254251289486);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(800, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[][] doubleArray3 = StatisticSample.correlation(doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      
      int[] intArray1 = StatisticSample.randomInt(2, 1, 2);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular((-8), 2813.63509252, 2813.63509252);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomChi2(42, 5, 42);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomWeibull(1, 0, (double) 1, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = StatisticSample.covariance(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[][] doubleArray3 = StatisticSample.randomExponential(0, 1, (double) 1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes((double[]) null, 2.0, 2.0, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        StatisticSample.variance(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomWeibull(0, 1457.661896, (-1.216021803144037E43));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = StatisticSample.randomCauchy(962, 0, (-176.418161), (-2671.216682829138));
      assertNotNull(doubleArray2);
      assertEquals(962, doubleArray2.length);
      
      double[] doubleArray3 = StatisticSample.randomCauchy(962, (-1.216021803144037E43), (-1.216021803144037E43));
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(962, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double[] doubleArray4 = StatisticSample.randomRejection(179, function0, (-1950.303801), (-1.0), (-1.1566074831022644E82));
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertEquals(179, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-131.83);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1984.551744436765;
      doubleArray0[4] = (double) 0;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, (-3309.5590034972324), (-1906.70892), 64);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      assertArrayEquals(new double[] {(-131.83), 0.0, 0.0, 1984.551744436765, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = StatisticSample.correlation(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-131.83), 0.0, 0.0, 1984.551744436765, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomCauchy(2013, 1984.551744436765, 0.0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2013, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      
      double double0 = StatisticSample.stddeviation(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(5.549296216724028E-11, double0, 0.01);
      assertEquals(2013, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      
      double[] doubleArray4 = StatisticSample.randomLogNormal(45, (double) 45, (double) 45);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(45, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      double[][] doubleArray5 = StatisticSample.histogram_classes(doubleArray4, 64);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertEquals(45, doubleArray4.length);
      assertEquals(64, doubleArray5.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      
      double[] doubleArray6 = StatisticSample.variance(doubleArray2);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray6.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertArrayEquals(new double[] {(-131.83), 0.0, 0.0, 1984.551744436765, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray6, 0.01);
      
      int[][] intArray0 = StatisticSample.randomInt(6, 1296, 1296, (-3110));
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      
      double[][] doubleArray7 = StatisticSample.covariance(doubleArray1, doubleArray5);
      assertNotNull(doubleArray7);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray6));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      assertEquals(45, doubleArray4.length);
      assertEquals(64, doubleArray5.length);
      assertEquals(2, doubleArray7.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray7);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray2);
      assertArrayEquals(new double[] {(-131.83), 0.0, 0.0, 1984.551744436765, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray0));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 64;
      doubleArray8[2] = (-3309.5590034972324);
      doubleArray8[3] = (double) 45;
      doubleArray8[4] = (-131.83);
      doubleArray8[5] = (double) 0;
      doubleArray8[6] = (-3309.5590034972324);
      doubleArray8[7] = (-1906.70892);
      // Undeclared exception!
      StatisticSample.histogram_classes(doubleArray8, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomTriangular(0, 0, (double) 0, 1625.667);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = 72.21324151089378;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1625.667;
      doubleArray1[1] = 72.21324151089378;
      doubleArray1[2] = 85.48639548254619;
      doubleArray1[3] = 72.21324151089378;
      doubleArray1[4] = (double) (-1948);
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = StatisticSample.randomDirac(0, doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1625.667, 72.21324151089378, 85.48639548254619, 72.21324151089378, (-1948.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = 2013;
      int int1 = 2626;
      double[] doubleArray3 = StatisticSample.randomCauchy(2626, (-602.9778), 2.772464272838904);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2626, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[] doubleArray4 = null;
      // Undeclared exception!
      try { 
        StatisticSample.stddeviation((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1011.168048;
      int int0 = 2;
      // Undeclared exception!
      try { 
        StatisticSample.covariance((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double double0 = 3540.3;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray2 = StatisticSample.randomRejection(0, 0, function0, 2813.0, 2813.0, (double) 0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = null;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-113.331);
      doubleArray4[2] = 2813.0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1.0);
      double double1 = (-1597.80879175594);
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double[][] doubleArray1 = StatisticSample.randomRejection(32, 32, function0, (-1597.80879175594), (double) 32, (-1597.80879175594));
      assertNotNull(doubleArray1);
      assertEquals(32, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomRejection(27, 0, (Function) null, (-1597.80879175594), (-1597.80879175594), (double) 27);
      assertNotNull(doubleArray0);
      assertEquals(27, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomLogNormal(32, 27, 812.9529739161198, (double) 27);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(32, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = StatisticSample.variance(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      double double2 = StatisticSample.mean(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5347.692953567931);
      doubleArray0[1] = 1011.168048;
      doubleArray0[2] = (-5347.692953567931);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1011.168048;
      doubleArray0[5] = (double) 2588;
      doubleArray0[6] = (-5347.692953567931);
      doubleArray0[7] = (-5347.692953567931);
      doubleArray0[8] = (double) 2;
      double[][] doubleArray1 = StatisticSample.randomDirac(1, 0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-5347.692953567931), 1011.168048, (-5347.692953567931), 0.0, 1011.168048, 2588.0, (-5347.692953567931), (-5347.692953567931), 2.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      StatisticSample.randomExponential(2588, 973, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      int int0 = (-444);
      // Undeclared exception!
      StatisticSample.randomNormal(30082, 1789.9, 1.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1789.9;
      doubleArray0[0] = 1011.168048;
      // Undeclared exception!
      StatisticSample.randomCauchy(30082, 2558.894798202, 2.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomBeta(0, (double) 0, 80.96783629);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(0, 1);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomDirac(1, 0, (double[]) null, (double[]) null);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = (-5347.692953567931);
      double double1 = 2.772464272838904;
      double[][] doubleArray0 = StatisticSample.randomTriangular(1, 1, (double) 1, 2.772464272838904);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5347.692953567931);
      doubleArray1[2] = (-5347.692953567931);
      doubleArray1[3] = 72.21324151089378;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) (-1948);
      doubleArray1[6] = (double) (-1948);
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac((-1948), doubleArray1, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1948
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomTriangular(0, 0, (double) 1, 200775.1848510275);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomTriangular(97, 1140, (double) 97, 0.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomNormal(6, 64, (double) 6, (double) 64);
      assertNotNull(doubleArray0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = StatisticSample.variance(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      
      double[] doubleArray2 = StatisticSample.randomTriangular(2592, 0.0, 1607.0, 2.0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2592, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = StatisticSample.randomNormal(183, 2.0, (-1700.210114033));
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(183, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3540.3;
      double[] doubleArray3 = DoubleArray.increment(648, 3540.3, 3540.3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(648, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = StatisticSample.variance(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      StatisticSample.randomDirac(3986, doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 1140;
      int int1 = (-1115);
      // Undeclared exception!
      try { 
        StatisticSample.randomRejection((-1115), (-1115), (Function) null, (double) 97, (double) 97, (double) (-1115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1115
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (-1040.886));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.histogram(doubleArray0, 338.8044371827597, 2.0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomBeta(0, 0.0, 1003.4701634901958);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomNormal(0, (-1211.28012272437), 1376801.447645847);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomExponential(53, (double) 53);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(53, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 53;
      doubleArray2[1] = (-1211.28012272437);
      doubleArray2[2] = (-1211.28012272437);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 1376801.447645847;
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomBeta(196, (double) 196, (double) 196);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomBeta(4151, 0, (double) 4151, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(4151, doubleArray0.length);
      
      // Undeclared exception!
      StatisticSample.randomUniform(4151, 895, 2259.4144576448, (double) 4151);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomCauchy(74, (double) 74, (double) 74);
      assertNotNull(doubleArray0);
      assertEquals(74, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomUniform(74, 74, 429.5464358632, 1227.43);
      assertNotNull(doubleArray1);
      assertEquals(74, doubleArray1.length);
      
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(74, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(234, (-1041.1711339227875), (double) 234);
      assertNotNull(doubleArray0);
      assertEquals(234, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomLogNormal(1, 0.5, (double) 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.627083954512812}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2.627083954512812}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 533.5378378378379;
      doubleArray0[0] = 533.5378378378379;
      double double1 = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      double double2 = (-4057.703968825);
      doubleArray0[2] = (-4057.703968825);
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {533.5378378378379, 3.141592653589793, (-4057.703968825)}, doubleArray0, 0.01);
      
      int int0 = 402;
      // Undeclared exception!
      StatisticSample.randomBeta(402, 402, (double) 402, 533.5378378378379);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 6;
      double double0 = 168.85099999999994;
      // Undeclared exception!
      try { 
        StatisticSample.randomWeibull((-3008), (-1040.886), 168.85099999999994);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3008
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomExponential((-3225), (double) (-3225));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3225
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1915.73998945795);
      doubleArray1[1] = 1011.168048;
      doubleArray1[2] = (-1915.73998945795);
      doubleArray1[3] = (-2658.0758889);
      doubleArray1[4] = 1011.168048;
      doubleArray1[5] = 1789.9;
      doubleArray0[7] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1011.168048;
      doubleArray2[1] = (-2658.0758889);
      doubleArray2[2] = (-1915.73998945795);
      doubleArray2[3] = 498.1132793;
      doubleArray2[4] = (-2658.0758889);
      doubleArray0[8] = doubleArray2;
      double[][] doubleArray3 = StatisticSample.covariance(doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray3.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      
      double[][] doubleArray4 = StatisticSample.randomChi2(1, 0, 0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      
      double[][] doubleArray5 = StatisticSample.randomLogNormal(508, 0, 1011.168048, (-1749.3423439));
      assertNotNull(doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertEquals(508, doubleArray5.length);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 5;
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 5, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.stddeviation((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomExponential(1050, (-1191.3675052));
      assertNotNull(doubleArray0);
      assertEquals(1050, doubleArray0.length);
      
      // Undeclared exception!
      StatisticSample.randomExponential(1050, 1050, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomRejection(0, (Function) null, 750.9851351351351, 750.9851351351351, 1150.22619637);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = StatisticSample.randomBeta(0, 24, (double) 0, (-4046.354));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      double[][] doubleArray3 = StatisticSample.randomLogNormal(3, 3, (double) 24, 1150.22619637);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      
      // Undeclared exception!
      StatisticSample.randomBeta(31, (double) 3, 2081.9125848669);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomCauchy(2259, 1586, 368.71, 368.71);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      double double0 = StatisticSample.correlation(doubleArray1, doubleArray1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = StatisticSample.stddeviation(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomNormal(3837, (-1.0), 2251.481850536627);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(3837, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 87721.32810671841;
      doubleArray2[1] = (-183.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1361.85987;
      doubleArray2[4] = 289332.75206004496;
      doubleArray2[5] = 6.283185307179586;
      doubleArray2[6] = 1456.51713107;
      doubleArray2[7] = 1361.85987;
      doubleArray2[8] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[][] doubleArray3 = StatisticSample.covariance(doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomLogNormal(0, 0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = StatisticSample.randomWeibull(0, (-1517.017086802837), 533.5378378378379);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = StatisticSample.randomCauchy(0, 40, (double) 0, (-1517.017086802837));
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.correlation((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomCauchy((-213), 217.234, 217.234);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -213
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2700);
      int int0 = 1;
      int int1 = 1185;
      int int2 = 1451;
      int int3 = 3;
      double[][] doubleArray1 = StatisticSample.randomWeibull(1451, 3, (double) 1451, (double) 1);
      assertNotNull(doubleArray1);
      assertEquals(1451, doubleArray1.length);
      
      int int4 = 177;
      double[] doubleArray2 = StatisticSample.randomNormal(0, (double) (-2700), (double) 177);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomCauchy((-2700), (double) 1185, 385.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2700
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 2251.481850536627;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 2675.909689536054;
      doubleArray1[5] = 1361.85987;
      doubleArray1[6] = 2755.2998509031;
      doubleArray1[7] = 2167.6581956197;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1361.85987;
      doubleArray2[2] = 2755.2998509031;
      doubleArray2[4] = 1456.51713107;
      int[][] intArray0 = StatisticSample.randomInt(1515, 3, 1515, 3);
      assertNotNull(intArray0);
      assertEquals(1515, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.9584993720054626}, doubleArray0, 0.01);
      
      double double0 = StatisticSample.mean(doubleArray0);
      assertEquals(0.9584993720054626, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.9584993720054626}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomTriangular(1, 173, 2818.6186908354653, 0.529857337474823);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(189, 189, doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1011.168048;
      // Undeclared exception!
      StatisticSample.randomDirac(2, 2588, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.021602869033813477;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 4502.151068425174;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-2.0);
      doubleArray1[6] = 708.4491522392;
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = StatisticSample.stddeviation(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-2.0);
      doubleArray3[2] = 3889.75935;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.45623308420181274;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 2.0;
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(2244, 1184, doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      StatisticSample.randomDirac(2588, 2588, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.14336693286895752}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.5956858992576599}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomCauchy(1, 1, (double) 1, (double) 1);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      
      double[][] doubleArray2 = StatisticSample.correlation(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (-1040.886));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomCauchy(1467, 1, (double) 1467, (double) 0);
      assertNotNull(doubleArray1);
      assertEquals(1467, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomInt((-26), (-26), 4, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -26
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 309;
      doubleArray0[1] = (double) 309;
      doubleArray0[2] = (double) 309;
      doubleArray0[3] = (double) 309;
      double[] doubleArray1 = StatisticSample.randomDirac(309, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(309, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomCauchy(2013, 606.0202702702703, 173933.42060748686);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2013, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = StatisticSample.stddeviation(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(309, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomLogNormal(0, 0.0, 606.0202702702703);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      double[][] doubleArray4 = StatisticSample.histogram_classes(doubleArray0, 0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomInt((-1), 871, 56, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, (-1727.64303717216), 42.0, 74);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(74, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.mean(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(74, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-842.82151858608), 0.0945945945945946}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1789.9;
      doubleArray0[1] = 1011.168048;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, 2.0, 1789.9, 74);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(74, doubleArray1.length);
      assertArrayEquals(new double[] {1789.9, 1011.168048}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.mean(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(74, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1789.9, 1011.168048}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {895.95, 0.013513513513513514}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomExponential(2016, 2016, (double) 2016);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomChi2(196, 196);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 309;
      doubleArray0[1] = (double) 309;
      doubleArray0[2] = (double) 309;
      doubleArray0[3] = (double) 309;
      double[] doubleArray1 = StatisticSample.randomDirac(309, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(309, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      double[][] doubleArray2 = StatisticSample.randomExponential(0, 12, 0.45623308420181274);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      double double0 = StatisticSample.covariance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomChi2(12, 12);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(12, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = StatisticSample.randomWeibull(0, 309.0, (-1599.736));
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      
      double[] doubleArray5 = StatisticSample.randomTriangular(0, (-1599.736), (-167.132), (-2726.2264570042807));
      assertNotNull(doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertEquals(0, doubleArray5.length);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      
      double[][] doubleArray6 = StatisticSample.randomChi2(0, 1544, (-1602));
      assertNotNull(doubleArray6);
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertEquals(0, doubleArray6.length);
      assertNotSame(doubleArray6, doubleArray2);
      
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray0));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 1544;
      doubleArray7[2] = (double) (-91);
      doubleArray7[3] = (-2804.613285711067);
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) (-1602);
      doubleArray7[6] = (-1599.736);
      doubleArray7[7] = 0.45623308420181274;
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac((-91), (-91), doubleArray7, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -91
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.one(1, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.covariance(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = StatisticSample.randomUniform(1, (double) 5, (double) 5);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {5.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomDirac(0, (double[]) null, (double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1863.4048);
      doubleArray0[1] = 0.0;
      int int0 = 169;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, 169);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(169, doubleArray1.length);
      assertArrayEquals(new double[] {(-1863.4048), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      StatisticSample.randomNormal(169, 177, (-5128.744), (-5128.744));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 5261.8179436662;
      doubleArray1[1] = 2953.8899157;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1353.1697110001237;
      doubleArray1[6] = (-19.21514330683142);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 5261.8179436662;
      doubleArray3[3] = (-19.21514330683142);
      doubleArray3[4] = (-19.21514330683142);
      doubleArray3[5] = 1353.1697110001237;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      double[] doubleArray4 = StatisticSample.histogram(doubleArray1, 1548.4555239, (-19.21514330683142), 2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertEquals(7, doubleArray1.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {5261.8179436662, 2953.8899157, 0.0, 0.0, 0.0, 1353.1697110001237, (-19.21514330683142)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 3.0}, doubleArray4, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray2, (-121200));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomWeibull(1, 0, (double) 1, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.covariance(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = StatisticSample.randomExponential(0, 1, (double) 1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomNormal(3837, 0.0, 2251.481850536627);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3837, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      StatisticSample.histogram_classes(doubleArray0, 3837);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.021602869033813477;
      doubleArray1[1] = 0.0;
      int int0 = 6124;
      // Undeclared exception!
      StatisticSample.histogram_classes(doubleArray1, 6124);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomNormal((-213), 74, (double) 74, 42.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -213
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = (-663.0223278954041);
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular((-8), (-8), (-663.0223278954041), (-663.0223278954041), (double) (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-838.091949866);
      doubleArray1[2] = 1884.317;
      doubleArray1[3] = (-2197.030101);
      doubleArray1[4] = 0.0;
      double double0 = 2675.219219;
      doubleArray1[5] = 2675.219219;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = StatisticSample.variance(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      double double1 = StatisticSample.stddeviation(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1628.1060664153808, double1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.0, (-838.091949866), 1884.317, (-2197.030101), 0.0, 2675.219219, 0.0}, doubleArray1, 0.01);
      
      int int0 = 2766;
      int int1 = (-1);
      double double2 = 628.927114219;
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular(2766, (-1), 0.0, 628.927114219, 1884.317);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1108.3534533120203);
      doubleArray0[1] = (-437.8707681);
      doubleArray0[2] = 368.7676607642898;
      doubleArray0[3] = 3914.3448519486537;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-618.5296829124);
      doubleArray0[6] = 0.5;
      doubleArray0[7] = (-1.0);
      double double0 = StatisticSample.covariance(doubleArray0, doubleArray0);
      assertEquals(2385664.1982826577, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.3534533120203), (-437.8707681), 368.7676607642898, 3914.3448519486537, 1.0, (-618.5296829124), 0.5, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1863.4048);
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      int int0 = 0;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, 0.0, 1984.551744436765, 0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1863.4048), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StatisticSample statisticSample0 = new StatisticSample();
      assertNotNull(statisticSample0);
      
      // Undeclared exception!
      StatisticSample.randomBeta(21, 21, (-1300.2), (-1300.2));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(1541, (double) 1541, (-1181.30816));
      assertNotNull(doubleArray0);
      assertEquals(1541, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(294, (double) 294, 0.0);
      assertNotNull(doubleArray0);
      assertEquals(294, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][5];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray3 = StatisticSample.variance(doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(8, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray1, 2.772464272838904, 1.0, (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -10
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StatisticSample statisticSample0 = new StatisticSample();
      assertNotNull(statisticSample0);
      
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 1, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-257.84034);
      doubleArray1[4] = (-1004.86503);
      doubleArray1[5] = 6.283185307179586;
      doubleArray1[6] = (-702.9955327108);
      doubleArray1[7] = 3193.68;
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray1, (-2188.9549228), 0.0, (-527));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -526
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(0, 2813.63509252, 2813.63509252);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomUniform(2801, (-3200), (-744.6865), 2813.63509252);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3200
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomChi2(0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = 2967;
      double double0 = 0.0;
      double[][] doubleArray1 = StatisticSample.randomExponential(2, 2967, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      
      double[][] doubleArray2 = StatisticSample.histogram_classes(doubleArray0, (double) 2967, (double) 2, 2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = StatisticSample.variance(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(-0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = 53;
      int int2 = (-370);
      // Undeclared exception!
      try { 
        StatisticSample.randomUniform(53, (-370), -0.0, (double) 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -370
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular((-3193), (-1802), 6.283185307179586, (double) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3193
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 1, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      int[][] intArray0 = StatisticSample.randomInt(1, 1, 1, 1);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = StatisticSample.stddeviation(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 64;
      double[][] doubleArray0 = StatisticSample.randomNormal(6, 64, (double) 6, (double) 64);
      assertNotNull(doubleArray0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = StatisticSample.variance(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, doubleArray1.length);
      
      int int1 = (-1248);
      // Undeclared exception!
      try { 
        StatisticSample.randomTriangular(6, (-1248), 49.6182492069188, (double) 64);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1248
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomNormal(1541, 1541, 0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomNormal(32, 32, 1.0, (double) 1);
      assertNotNull(doubleArray0);
      assertEquals(32, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = (-8);
      // Undeclared exception!
      try { 
        StatisticSample.randomChi2((-8), (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -8
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomChi2(0, 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = (-976);
      // Undeclared exception!
      try { 
        StatisticSample.randomChi2((-976), 4204);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -976
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomBeta((-1), (double) 37, (double) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomBeta(1541, 1541, (double) 1541, (double) 1541);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomBeta(1, 1, (double) 1, (double) 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 5, 0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomBeta(5, 0, 611.15352649, (double) 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 611.15352649;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-713.800232);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = 611.15352649;
      doubleArray2[8] = (double) 1;
      double[] doubleArray3 = StatisticSample.histogram(doubleArray2, 0.0, (-713.800232), 0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(9, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1.0, 611.15352649, 0.0, 0.0, (-713.800232), 0.0, 1.0, 611.15352649, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomInt((-992), 1, (-2095));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -992
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomExponential(196, (double) 196);
      assertNotNull(doubleArray0);
      assertEquals(196, doubleArray0.length);
      
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(196, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomBeta(2, (double) 2, (double) 2);
      assertNotNull(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.47611599024815887, 0.2725284871517948}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomExponential(0, (-1191.3675052));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomExponential(0, 0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double double0 = StatisticSample.stddeviation(doubleArray0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomBeta(0, 0.0, -0.0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = StatisticSample.randomBeta(0, (double) 0, 97.8);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomInt((-2679), 3568, 97);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2679
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomBeta((-1465), 1, (-484.11009213226384), (-484.11009213226384));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1465
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        StatisticSample.randomBeta((-1931), 3, (double) (-1931), 452.131869);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1931
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomExponential((-193), (-193), (double) (-193));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -193
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomRejection(0, (Function) null, 750.9851351351351, 750.9851351351351, 1150.22619637);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = StatisticSample.randomBeta(0, 24, (double) 0, 1150.22619637);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(1, 799.3067567567568, 0.9999998211860657);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0022196763848161315}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = StatisticSample.randomUniform(1, 2, (double) 1, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.9999998211860657;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 799.3067567567568;
      doubleArray2[4] = 799.3067567567568;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = 0.9999998211860657;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (-196.8);
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0022196763848161315}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.9999998211860657, 2.0, 1.0, 799.3067567567568, 799.3067567567568, 2.0, 0.9999998211860657, 1.0, (-196.8)}, doubleArray2, 0.01);
      
      double double1 = StatisticSample.variance(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(136960.40643420437, double1, 0.01);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.9999998211860657, 2.0, 1.0, 799.3067567567568, 799.3067567567568, 2.0, 0.9999998211860657, 1.0, (-196.8)}, doubleArray2, 0.01);
      
      double[][] doubleArray3 = StatisticSample.covariance(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      
      double double2 = StatisticSample.mean(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0022196763848161315, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0022196763848161315}, doubleArray0, 0.01);
      
      // Undeclared exception!
      StatisticSample.randomBeta(2, 118652.04134432794, 2869.2159536756913);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 5, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.randomBeta(5, 0, 611.15352649, (double) 5);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 611.15352649;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      double[][] doubleArray3 = StatisticSample.covariance(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 5261.8179436662;
      doubleArray1[1] = 2953.8899157;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1353.1697110001237;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 5261.8179436662;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1353.1697110001237;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 3.141592653589793;
      doubleArray4[2] = 1353.1697110001237;
      doubleArray4[3] = 5261.8179436662;
      doubleArray4[4] = 2420.074807;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3.141592653589793;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1353.1697110001237;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-351.2698836);
      // Undeclared exception!
      try { 
        StatisticSample.histogram(doubleArray0, 179.80159, 0.0, (-713));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -712
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomExponential(0, 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram((double[]) null, (double) 0, (double) 0, (-1252));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1251
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = DoubleArray.increment(0, (double) 0, (-1040.886));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = 2.0;
      int int1 = 1436;
      double[][] doubleArray1 = StatisticSample.randomDirac(0, 1436, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomChi2(1, 5, 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = StatisticSample.covariance(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 2251.481850536627;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1456.51713107;
      doubleArray1[4] = 2675.909689536054;
      doubleArray1[5] = 1361.85987;
      doubleArray1[6] = 2755.2998509031;
      doubleArray1[7] = 2167.6581956197;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1361.85987;
      doubleArray2[2] = 2755.2998509031;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1456.51713107;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2251.481850536627;
      doubleArray3[1] = 2755.2998509031;
      doubleArray3[2] = 2251.481850536627;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1915.73998945795);
      doubleArray4[1] = 2251.481850536627;
      doubleArray4[2] = 2675.909689536054;
      doubleArray4[3] = 2755.2998509031;
      doubleArray4[4] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2251.481850536627;
      doubleArray5[1] = 1456.51713107;
      doubleArray5[2] = (-1915.73998945795);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2167.6581956197;
      doubleArray6[1] = 2167.6581956197;
      doubleArray6[2] = 2251.481850536627;
      doubleArray6[3] = 2755.2998509031;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 2251.481850536627;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomCauchy(1806, (double) 1806, (double) 1806);
      assertNotNull(doubleArray0);
      assertEquals(1806, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomNormal(97, 687.823, 5328464.078674636);
      assertNotNull(doubleArray0);
      assertEquals(97, doubleArray0.length);
      
      double[] doubleArray1 = StatisticSample.randomDirac(97, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(97, doubleArray0.length);
      assertEquals(97, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomLogNormal(37, 37, (double) 37, (double) 37);
      assertNotNull(doubleArray0);
      assertEquals(37, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = DoubleArray.diagonal(1541, (-2017.108854665));
      assertNotNull(doubleArray0);
      assertEquals(1541, doubleArray0.length);
      
      // Undeclared exception!
      StatisticSample.randomWeibull(1541, 1541, (-2017.108854665), (double) 1541);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      double[][] doubleArray0 = StatisticSample.randomLogNormal(0, 0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int1 = 1;
      int int2 = 1185;
      double double0 = 1.0;
      double[][] doubleArray1 = StatisticSample.randomWeibull(1, 1185, 1.0, (double) 1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = StatisticSample.randomNormal(177, (double) 0, (double) 0);
      assertNotNull(doubleArray2);
      assertEquals(177, doubleArray2.length);
      
      double[] doubleArray3 = StatisticSample.randomCauchy(1185, (-136.9), (double) 1185);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(1185, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomBeta(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.histogram(doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StatisticSample.histogram(doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomLogNormal((-1266), (-2249.3717701715), (-2249.3717701715));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1266
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = (-204);
      // Undeclared exception!
      try { 
        StatisticSample.randomLogNormal((-204), 0.0, 265.9210666);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -204
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomCauchy(1541, (-2148), 1213.553235150179, 3.3565);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2148
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = StatisticSample.randomDirac(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = StatisticSample.randomDirac(179, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(179, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(179, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomExponential(1, 1, (double) 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 309;
      doubleArray0[1] = (double) 309;
      doubleArray0[2] = (double) 309;
      doubleArray0[3] = (double) 309;
      double[] doubleArray1 = StatisticSample.randomDirac(309, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(309, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = 12;
      double double0 = 0.45623308420181274;
      double[][] doubleArray2 = StatisticSample.randomExponential(0, 12, 0.45623308420181274);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      double double1 = StatisticSample.covariance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {309.0, 309.0, 309.0, 309.0}, doubleArray0, 0.01);
      
      int int2 = (-1602);
      double double2 = (-2804.613285711067);
      // Undeclared exception!
      try { 
        StatisticSample.randomCauchy((-1602), 12, (double) 309, (-2804.613285711067));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1602
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = StatisticSample.histogram(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomNormal((-4924), 2983.5174044024593, 0.45623308420181274);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4924
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(1, (double) 1, (double) 1, (double) 1);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 1;
      double double0 = (-5347.692953567931);
      double[] doubleArray0 = StatisticSample.randomTriangular(1, (double) 1, (-5347.692953567931), 3614.0);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1729.0642297177474)}, doubleArray0, 0.01);
      
      int int1 = (-444);
      // Undeclared exception!
      try { 
        StatisticSample.randomNormal((-444), (-5347.692953567931), 1.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -444
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(1, (double) 1, (-5347.692953567931), 3615.202112523253);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1257.543063483079}, doubleArray0, 0.01);
      
      double double0 = StatisticSample.variance(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1257.543063483079}, doubleArray0, 0.01);
      
      double double1 = StatisticSample.mean(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1257.543063483079, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1257.543063483079}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        StatisticSample.covariance((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1789.8861159614987;
      doubleArray0[1] = 1011.168048;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, 2.0, 1789.8861159614987, 2253);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2253, doubleArray1.length);
      assertArrayEquals(new double[] {1789.8861159614987, 1011.168048}, doubleArray0, 0.01);
      
      double[] doubleArray2 = StatisticSample.randomUniform(2253, 1011.168048, 37201.670084762096);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2253, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double[] doubleArray0 = StatisticSample.randomUniform(0, 0.0, 2.0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        StatisticSample.covariance((double[][]) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      StatisticSample.randomRejection(57, function0, (double) 57, (double) 57, (double) 1664);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 0;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = StatisticSample.randomRejection(0, function0, (double) 0, 5708.60991331, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        StatisticSample.randomExponential(0, (-1), 5708.60991331);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 69;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      double double0 = 1364.41959315;
      // Undeclared exception!
      StatisticSample.randomRejection(69, function0, 1364.41959315, (-1654.205), (double) 69);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomRejection(1, (Function) null, 2.0, 6.283185307179586, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1011.168048;
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac((-49), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -49
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1789.8861159614987;
      doubleArray0[0] = 1789.8861159614987;
      doubleArray0[1] = 1011.168048;
      int int0 = 2253;
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, 2.0, 1789.8861159614987, 2253);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2253, doubleArray1.length);
      assertArrayEquals(new double[] {1789.8861159614987, 1011.168048}, doubleArray0, 0.01);
      
      int int1 = (-937);
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac((-937), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -937
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomUniform(0, 0.0, (double) 0);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      StatisticSample statisticSample0 = new StatisticSample();
      assertNotNull(statisticSample0);
      
      double[] doubleArray1 = DoubleArray.random(0, (double) 0, 0.0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[][] intArray0 = StatisticSample.randomInt(0, 0, 0, (-6178));
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-6178);
      doubleArray2[2] = (double) (-6178);
      doubleArray2[3] = (double) (-6178);
      doubleArray2[4] = (double) (-6178);
      // Undeclared exception!
      try { 
        StatisticSample.randomNormal((-1), 581.8594594594596, 2.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      StatisticSample.randomInt(179, 179, 1515, 1515);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 951;
      // Undeclared exception!
      StatisticSample.randomInt(951, 951, 951, 951);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      StatisticSample.randomRejection(882, 1700, function0, (double) 882, 857.6287102050786, (double) 1700);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomTriangular(1541, 1.0, 8543.013628722218);
      assertNotNull(doubleArray0);
      assertEquals(1541, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        StatisticSample.randomRejection(1541, 1541, (Function) null, 1.0, 8543.013628722218, (double) 1541);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = 3242;
      Function function0 = mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(function0).f(anyDouble());
      // Undeclared exception!
      StatisticSample.randomRejection(3242, 96, function0, (double) 96, (double) 96, (-1597.80879175594));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        StatisticSample.randomWeibull((-1), 178, 0.9999998211860657, 0.9999998211860657);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomCauchy(1, (double) 1, (double) 1);
      StatisticSample.randomExponential(1, 1, 358759.74350994505);
      double double0 = StatisticSample.stddeviation(doubleArray0);
      assertArrayEquals(new double[] {3.477891274008434}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2258.3312638986);
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2302.7894044846325;
      double double0 = StatisticSample.stddeviation(doubleArray0);
      assertEquals(1219.0507997669713, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        StatisticSample.randomChi2((-1422), (-1422), (-1422));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1422
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 480.93302452291096;
      doubleArray0[1] = (-106.2823545461);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1779.819623991;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1620.379544561272;
      double double0 = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1483.12496008757);
      StatisticSample.variance(doubleArray0);
      int int0 = (-2302);
      int int1 = 1;
      // Undeclared exception!
      try { 
        StatisticSample.randomChi2((-2302), 4, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2302
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomExponential(196, (double) 196);
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      // Undeclared exception!
      try { 
        StatisticSample.correlation(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = StatisticSample.randomWeibull(0, 0, (double) 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      
      StatisticSample.randomTriangular(0, 2813.63509252, 2813.63509252);
      // Undeclared exception!
      try { 
        StatisticSample.covariance(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = StatisticSample.randomWeibull(0, (double) 0, (-1040.886));
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac(0, (-779), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -779
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = (-2700);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2700);
      doubleArray0[1] = 0.9999998211860657;
      doubleArray0[2] = (double) (-2700);
      doubleArray0[3] = (double) (-2700);
      // Undeclared exception!
      try { 
        StatisticSample.randomDirac((-2700), (-2700), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2700
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 53;
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray0, (-4319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4318
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double double0 = StatisticSample.correlation(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = DoubleArray.random(0);
      double double0 = StatisticSample.mean(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1119.115715556;
      doubleArray0[1] = (-927.4990764353216);
      doubleArray0[2] = 1.0;
      StatisticSample.variance(doubleArray0);
      StatisticSample.mean(doubleArray0);
      StatisticSample.mean(doubleArray0);
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray0, (-1727));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1726
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, (-1727.64303717216), (-1727.64303717216), 74);
      StatisticSample.correlation(doubleArray1);
      assertEquals(74, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1416.0122;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3540.3;
      doubleArray2[1] = 1416.0122;
      doubleArray2[2] = 1416.0122;
      doubleArray2[3] = 1416.0122;
      doubleArray2[4] = 1416.0122;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1416.0122;
      doubleArray3[1] = 3540.3;
      doubleArray3[2] = 1416.0122;
      doubleArray3[3] = 1416.0122;
      doubleArray3[4] = 3540.3;
      doubleArray3[5] = 3540.3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1416.0122;
      doubleArray4[1] = 3540.3;
      doubleArray4[2] = 1416.0122;
      doubleArray4[3] = 1416.0122;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 3540.3;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[][] doubleArray5 = StatisticSample.correlation(doubleArray0);
      assertEquals(1, doubleArray5.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        StatisticSample.histogram((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.math.array.StatisticSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = StatisticSample.randomUniform(0, (double) 0, (double) 0);
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      StatisticSample.covariance(doubleArray1);
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray0, 54217137);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = StatisticSample.histogram_classes(doubleArray0, (double) 64, (double) 64, 64);
      assertEquals(64, doubleArray1.length);
      
      double[][] doubleArray2 = StatisticSample.histogram_classes(doubleArray0, 64);
      assertEquals(64, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-1);
      // Undeclared exception!
      try { 
        StatisticSample.histogram_classes(doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.math.array.DoubleArray", e);
      }
  }
}
