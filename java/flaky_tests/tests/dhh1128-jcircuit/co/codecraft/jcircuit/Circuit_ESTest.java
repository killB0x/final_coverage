/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 07:04:05 GMT 2022
 */

package co.codecraft.jcircuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import co.codecraft.jcircuit.Circuit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Circuit_ESTest extends Circuit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Circuit.stringToState("p\"8lu,g]6&_Spn");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Circuit.stringToState("E5x_`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized state E5x_`.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition(1, 1219);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      circuit0.unsafeTransition(1);
      circuit0.unsafeTransition((-1682));
      assertEquals((-1682), circuit0.getStateSnapshot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      boolean boolean0 = circuit0.transition(0, (-2437));
      assertEquals((-2433), circuit0.getStateSnapshot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      circuit0.unsafeTransition(4215);
      boolean boolean0 = circuit0.transition(4215, 3912);
      assertEquals(8056, circuit0.getStateSnapshot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      circuit0.shouldValidate = true;
      // Undeclared exception!
      try { 
        circuit0.transition((-1281), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't transition from state 3 to 0.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      assertFalse(circuit0.shouldValidate);
      
      circuit0.shouldValidate = true;
      boolean boolean0 = circuit0.transition(1757, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      circuit0.unsafeTransition((-2072));
      int int0 = circuit0.getStateSnapshot();
      assertEquals((-2068), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition(1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition(1960, (-1222));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Circuit.stringToState("Y_r^n{Xrj3Mt");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = Circuit.stringToState("RESETTING");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Circuit.stringToState("FnM1e9BO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized state FnM1e9BO.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Circuit.stringToState(" %D/k>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized state  %D/k>.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = Circuit.stringToState("CLOSED");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Circuit.stringToState("OPEN");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Circuit.stringToState((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // State name cannot be null.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Circuit.stringToState("FAILED");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Circuit.stateToString(2195);
      assertEquals("FAILED", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Circuit.stateToString(4577);
      assertEquals("OPEN", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = Circuit.stateToString(2);
      assertEquals("RESETTING", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = Circuit.stateToString((-444));
      assertEquals("CLOSED", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-4254), (-3386));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-2470), (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-3306), 4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-385), (-24));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-601), (-6));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-831), 10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition(0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition(2712, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-1), (-1305));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = Circuit.isValidTransition((-778), 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      circuit0.unsafeTransition(1);
      int int0 = circuit0.getStateSnapshot();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      circuit0.unsafeTransition(0);
      assertFalse(circuit0.shouldValidate);
      assertEquals(0, circuit0.getStateSnapshot());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      boolean boolean0 = circuit0.transition(2, 0);
      assertTrue(boolean0);
      assertEquals(0, circuit0.getStateSnapshot());
      assertFalse(circuit0.shouldValidate);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      boolean boolean0 = circuit0.transition(0, 0);
      assertEquals(4, circuit0.getStateSnapshot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      boolean boolean0 = circuit0.transition(0, (-504));
      assertEquals((-500), circuit0.getStateSnapshot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      assertFalse(circuit0.shouldValidate);
      
      circuit0.shouldValidate = true;
      boolean boolean0 = circuit0.transition(1, (-1135));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Circuit circuit0 = new Circuit((Circuit.Listener) null);
      circuit0.shouldValidate = true;
      // Undeclared exception!
      try { 
        circuit0.transition(0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't transition from state 0 to 3.
         //
         verifyException("co.codecraft.jcircuit.Circuit", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Circuit.Listener circuit_Listener0 = mock(Circuit.Listener.class, new ViolatedAssumptionAnswer());
      Circuit circuit0 = new Circuit(circuit_Listener0);
      int int0 = circuit0.getStateSnapshot();
      assertEquals(0, int0);
      assertFalse(circuit0.shouldValidate);
  }
}
