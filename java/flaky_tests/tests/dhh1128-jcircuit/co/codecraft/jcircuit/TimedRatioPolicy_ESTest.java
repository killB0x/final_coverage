/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 07:06:04 GMT 2022
 */

package co.codecraft.jcircuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import co.codecraft.jcircuit.TimedRatioPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimedRatioPolicy_ESTest extends TimedRatioPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy timedRatioPolicy0 = timedRatioPolicy_Builder0.build();
      timedRatioPolicy0.afterDirectTransition((-845), true);
      assertEquals(10, timedRatioPolicy0.minSliceCount);
      assertEquals(0.75F, timedRatioPolicy0.closeAtGoodRatio, 0.01F);
      assertEquals(100, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(0, timedRatioPolicy0.failAfterNBadResets);
      assertEquals(0.5F, timedRatioPolicy0.openAtGoodRatio, 0.01F);
      assertEquals(99, timedRatioPolicy0.resetAfterNMillis);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(1.0, 1.0, (-4), 497, (-4), 497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minSliceCount must be >= 1
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = new TimedRatioPolicy.Builder();
      TimedRatioPolicy timedRatioPolicy0 = timedRatioPolicy_Builder0.build();
      timedRatioPolicy0.onBadPulse((Throwable) null);
      assertEquals(0.75F, timedRatioPolicy0.closeAtGoodRatio, 0.01F);
      assertEquals(99, timedRatioPolicy0.resetAfterNMillis);
      assertEquals(100, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(0, timedRatioPolicy0.failAfterNBadResets);
      assertEquals(0.5F, timedRatioPolicy0.openAtGoodRatio, 0.01F);
      assertEquals(10, timedRatioPolicy0.minSliceCount);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy timedRatioPolicy0 = timedRatioPolicy_Builder0.build();
      timedRatioPolicy0.afterDirectTransition(0, true);
      assertEquals(99, timedRatioPolicy0.resetAfterNMillis);
      assertEquals(10, timedRatioPolicy0.minSliceCount);
      assertEquals(100, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(0.5F, timedRatioPolicy0.openAtGoodRatio, 0.01F);
      assertEquals(0, timedRatioPolicy0.failAfterNBadResets);
      assertEquals(0.75F, timedRatioPolicy0.closeAtGoodRatio, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = new TimedRatioPolicy(0.5, 0.5, 821, 4632, 821, 821);
      timedRatioPolicy0.afterDirectTransition(4632, false);
      assertEquals(4632, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(821, timedRatioPolicy0.minSliceCount);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(0.5, 0.5, 3043, 996, (-1), (-1563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // resetAfterNMillis must be >= 1
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(0.5, 0.5, 195, (-4), 195, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // evalEveryNMillis must be >= 1
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(0.0, 0.0, (-2592), (-2592), (-2592), (-2592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minSliceCount must be >= 1
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(0.0, 1086.561625, 2861, 2861, 2861, 2861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // closeAtGoodRatio must be >= 0.0 and <= 1.0
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(0L, (-1.0), 3, 3, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // closeAtGoodRatio must be >= 0.0 and <= 1.0
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy(1243.0, 1243.0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // openAtGoodRatio must be >= 0.0 and <= 1.0
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimedRatioPolicy timedRatioPolicy0 = null;
      try {
        timedRatioPolicy0 = new TimedRatioPolicy((-4860.796), (-4860.796), 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // openAtGoodRatio must be >= 0.0 and <= 1.0
         //
         verifyException("co.codecraft.jcircuit.TimedRatioPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setFailAfterNBadResets(4023);
      assertSame(timedRatioPolicy_Builder0, timedRatioPolicy_Builder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setEvalEveryNMillis((-2643));
      assertSame(timedRatioPolicy_Builder0, timedRatioPolicy_Builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setMinSliceCount(0);
      assertSame(timedRatioPolicy_Builder1, timedRatioPolicy_Builder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setOpenAtGoodRatio(0);
      assertSame(timedRatioPolicy_Builder0, timedRatioPolicy_Builder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setCloseAtGoodRatio(0.0);
      assertSame(timedRatioPolicy_Builder1, timedRatioPolicy_Builder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = TimedRatioPolicy.builder();
      TimedRatioPolicy.Builder timedRatioPolicy_Builder1 = timedRatioPolicy_Builder0.setResetAfterNMillis(506);
      assertSame(timedRatioPolicy_Builder0, timedRatioPolicy_Builder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = new TimedRatioPolicy.Builder();
      TimedRatioPolicy timedRatioPolicy0 = timedRatioPolicy_Builder0.build();
      timedRatioPolicy0.onAltPulse();
      assertEquals(0.75F, timedRatioPolicy0.closeAtGoodRatio, 0.01F);
      assertEquals(10, timedRatioPolicy0.minSliceCount);
      assertEquals(99, timedRatioPolicy0.resetAfterNMillis);
      assertEquals(100, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(0, timedRatioPolicy0.failAfterNBadResets);
      assertEquals(0.5F, timedRatioPolicy0.openAtGoodRatio, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimedRatioPolicy.Builder timedRatioPolicy_Builder0 = new TimedRatioPolicy.Builder();
      TimedRatioPolicy timedRatioPolicy0 = timedRatioPolicy_Builder0.build();
      timedRatioPolicy0.onGoodPulse();
      assertEquals(0, timedRatioPolicy0.failAfterNBadResets);
      assertEquals(0.5F, timedRatioPolicy0.openAtGoodRatio, 0.01F);
      assertEquals(100, timedRatioPolicy0.evalEveryNMillis);
      assertEquals(99, timedRatioPolicy0.resetAfterNMillis);
      assertEquals(10, timedRatioPolicy0.minSliceCount);
      assertEquals(0.75F, timedRatioPolicy0.closeAtGoodRatio, 0.01F);
  }
}
