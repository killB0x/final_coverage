/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:42:09 GMT 2022
 */

package org.nlab.xml.stream.context;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.UserContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserContext_ESTest extends UserContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      userContext0.push();
      Map<String, Object> map0 = userContext0.flatten();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      userContext0.pop();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      UserContext userContext1 = userContext0.setProperty("F%fK}AMU~/VqQ\"/}7#", "F%fK}AMU~/VqQ\"/}7#");
      Map<String, Object> map0 = userContext1.flatten();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      // Undeclared exception!
      try { 
        userContext0.findProperty("", (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      Object object0 = new Object();
      userContext0.setProperty(">", object0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        userContext0.findProperty(">", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      UserContext userContext1 = userContext0.setProperty((String) null, (Object) null);
      // Undeclared exception!
      try { 
        userContext1.findProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      userContext0.setRootProperty("org.nlab.xml.stream.context.UserContext", "org.nlab.xml.stream.context.UserContext");
      Class<String> class0 = String.class;
      Optional<String> optional0 = userContext0.findProperty("org.nlab.xml.stream.context.UserContext", class0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      Class<String> class0 = String.class;
      Optional<String> optional0 = userContext0.findProperty("&\"}wyq2go>Kl", class0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      Object object0 = new Object();
      userContext0.setRootProperty("", object0);
      Optional<String> optional0 = userContext0.findProperty("");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      // Undeclared exception!
      try { 
        userContext0.flatten();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.Optional", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      // Undeclared exception!
      try { 
        userContext0.setProperty("F%fK}AMU~/VqQ\"/}7#", "F%fK}AMU~/VqQ\"/}7#");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        userContext0.setRootProperty("", object0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      // Undeclared exception!
      try { 
        userContext0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserContext userContext0 = new UserContext();
      userContext0.push();
      Optional<String> optional0 = userContext0.findProperty("");
      assertNotNull(optional0);
  }
}
