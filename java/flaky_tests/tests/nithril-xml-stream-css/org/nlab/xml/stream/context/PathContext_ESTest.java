/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:29:27 GMT 2022
 */

package org.nlab.xml.stream.context;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Set;
import javax.xml.stream.util.StreamReaderDelegate;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.PathContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathContext_ESTest extends PathContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document();
      Document document1 = document0.clone();
      PathContext pathContext0 = new PathContext(document1);
      document0.addChild((Node) document1);
      pathContext0.endElem();
      // Undeclared exception!
      try { 
        pathContext0.endElem();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.requireSibbling();
      boolean boolean0 = pathContext0.isRecordSibbling();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PathContext pathContext0 = new PathContext((Document) null);
      pathContext0.getDocument();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getDocument();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-415L));
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getDocument();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document();
      document0.addChild((Node) document0);
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getDocument();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PathContext pathContext0 = new PathContext((Document) null);
      pathContext0.getCurrentNode();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document();
      document0.addChild((Node) document0);
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getCurrentNode();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document();
      Document document1 = document0.clone();
      PathContext pathContext0 = new PathContext(document1);
      document0.addChild((Node) document1);
      pathContext0.endElem();
      pathContext0.getAncestors();
      assertEquals(0, document0.getChildNodesCount());
      assertFalse(document0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PathContext pathContext0 = new PathContext((Document) null);
      pathContext0.requireSibbling();
      Set<Node> set0 = pathContext0.findAncestorsAndSiblings();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PathContext pathContext0 = new PathContext((Document) null);
      pathContext0.findAncestors();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      // Undeclared exception!
      try { 
        pathContext0.startElem(streamReaderDelegate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        pathContext0.startElem(streamReaderDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      boolean boolean0 = pathContext0.isRecordSibbling();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getCurrentNode();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.requireSibbling();
      // Undeclared exception!
      try { 
        pathContext0.endElem();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.findAncestors();
      assertEquals(1, list0.size());
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      // Undeclared exception!
      try { 
        pathContext0.endElem();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.nlab.xml.stream.context.PathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.findAncestorOrSelfAttribute("");
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getAncestors();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      assertFalse(pathContext0.isRecordSibbling());
      
      pathContext0.requireSibbling();
      assertTrue(pathContext0.isRecordSibbling());
      
      Set<Node> set0 = pathContext0.findAncestorsAndSiblings();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      Set<Node> set0 = pathContext0.getAncestorsAndSiblingsAsSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      pathContext0.getAncestorsAsSet();
      assertFalse(pathContext0.isRecordSibbling());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      // Undeclared exception!
      try { 
        pathContext0.findAncestorsAndSiblings();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Sibbling are not recorded
         //
         verifyException("org.nlab.xml.stream.context.PathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.getAncestorsAndSiblings();
      assertEquals(0, list0.size());
  }
}
