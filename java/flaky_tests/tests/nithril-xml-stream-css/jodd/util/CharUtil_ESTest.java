/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:17:35 GMT 2022
 */

package jodd.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import jodd.util.CharUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharUtil_ESTest extends CharUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = CharUtil.isWordChar('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char char0 = CharUtil.toLowerAscii('Z');
      assertEquals('z', char0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = CharUtil.isLowercaseAlpha('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = CharUtil.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      int int0 = CharUtil.findFirstDiff(charArray0, 0, '%');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = CharUtil.findFirstDiff(charArray0, 0, '\u0000');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      int int0 = CharUtil.findFirstDiff(charUtil0.HEX_CHARS, 1766, charUtil0.HEX_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      int int0 = CharUtil.findFirstEqual(charArray0, 0, '\u0000');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = CharUtil.findFirstEqual(charArray0, 0, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      byte[] byteArray1 = CharUtil.toRawByteArray(charArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-1);
      char[] charArray0 = CharUtil.toSimpleCharArray(byteArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      byte[] byteArray1 = CharUtil.toAsciiByteArray((CharSequence) charBuffer0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      char[] charArray0 = CharUtil.toSimpleCharArray(byteArray0);
      byte[] byteArray1 = CharUtil.toAsciiByteArray(charArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char char0 = CharUtil.toUpperAscii('\'');
      assertEquals('\'', char0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = CharUtil.toSimpleCharArray(byteArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = CharUtil.toSimpleByteArray(charArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = CharUtil.toSimpleByteArray((CharSequence) "");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = CharUtil.toRawByteArray(charArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char char0 = CharUtil.toLowerAscii('8');
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char char0 = CharUtil.toChar((byte)52);
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char char0 = CharUtil.toChar((byte)104);
      assertEquals('h', char0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = CharUtil.toAsciiByteArray(charArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = CharUtil.toAsciiByteArray((CharSequence) "");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = CharUtil.toAscii('\u0000');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = CharUtil.isUnreserved('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      int int0 = CharUtil.findFirstEqual(charArray0, 0, 'i');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      char[] charArray1 = new char[5];
      charArray1[0] = 'X';
      charArray1[1] = 'X';
      charArray1[2] = 'X';
      charArray1[3] = 'X';
      charArray1[4] = 'X';
      int int0 = CharUtil.findFirstDiff(charArray0, 0, charArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toSimpleCharArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toSimpleByteArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(17664);
      // Undeclared exception!
      CharUtil.toSimpleByteArray((CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toSimpleByteArray((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        CharUtil.toSimpleByteArray((CharSequence) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toRawCharArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toRawByteArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toCharArray((byte[]) null, "a!AJG&?~!~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        CharUtil.toCharArray(byteArray0, "a72\"'\u0007>p#+\"l}5/T");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toAsciiByteArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65306);
      // Undeclared exception!
      CharUtil.toAsciiByteArray((CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.toAsciiByteArray((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        CharUtil.toAsciiByteArray((CharSequence) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.int2hex(79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 79 out of bounds for length 16
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.findFirstEqual((char[]) null, (int) (byte)64, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharUtil.findFirstEqual(charArray0, (-6), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -6 out of bounds for length 0
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.findFirstEqual((char[]) null, 351, '8');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      // Undeclared exception!
      try { 
        CharUtil.findFirstEqual(charUtil0.HEX_CHARS, (-2965), 'E');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2965 out of bounds for length 16
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.findFirstDiff((char[]) null, 1220, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      // Undeclared exception!
      try { 
        CharUtil.findFirstDiff(charUtil0.HEX_CHARS, (-1423), charUtil0.HEX_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1423 out of bounds for length 16
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.findFirstDiff((char[]) null, (-1), '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      // Undeclared exception!
      try { 
        CharUtil.findFirstDiff(charUtil0.HEX_CHARS, (-3154), 'n');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3154 out of bounds for length 16
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.equalsOne('7', (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(93);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = CharUtil.isDigit('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = CharUtil.isDigit('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = CharUtil.isDigit('K');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlpha('G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlpha('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlpha('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlpha('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = CharUtil.isUppercaseAlpha('f');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = CharUtil.isUppercaseAlpha('6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = CharUtil.isUppercaseAlpha('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = CharUtil.isLowercaseAlpha(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 's';
      int int0 = CharUtil.findFirstEqual(charArray0, 0, 's');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      boolean boolean0 = CharUtil.equalsOne('}', charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('\u0109');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: \u0109
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = CharUtil.hex2int('f');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = CharUtil.hex2int('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = CharUtil.hex2int('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = CharUtil.hex2int('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = CharUtil.hex2int('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: `
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: _
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: ^
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: ]
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: \\
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: [
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: Z
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: Y
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: X
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: W
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: V
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: U
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: T
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: S
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('R');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: R
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: Q
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: P
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: O
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('N');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: N
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: M
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: L
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: K
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('J');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: J
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('I');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: I
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: H
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: G
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = CharUtil.hex2int('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = CharUtil.hex2int('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = CharUtil.hex2int('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = CharUtil.hex2int('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = CharUtil.hex2int('B');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = CharUtil.hex2int('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: @
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: ?
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('>');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: >
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: =
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int('<');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: <
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: ;
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtil.hex2int(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a hex: :
         //
         verifyException("jodd.util.CharUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = CharUtil.hex2int('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = CharUtil.hex2int('8');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = CharUtil.hex2int('7');
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = CharUtil.hex2int('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = CharUtil.hex2int('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = CharUtil.hex2int('4');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = CharUtil.hex2int('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = CharUtil.hex2int('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = CharUtil.hex2int('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = CharUtil.hex2int('c');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = CharUtil.hex2int('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char char0 = CharUtil.toUpperAscii('v');
      assertEquals('V', char0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('@');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = CharUtil.isUnreserved('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = CharUtil.isUnreserved('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = CharUtil.isUnreserved('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('<');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(59);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar(':');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('8');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('5');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('-');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(44);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(42);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar(')');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('(');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(39);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('&');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('$');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = CharUtil.isSubDelimiter(35);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved('=');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('!');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = CharUtil.isReserved(']');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(91);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(64);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(63);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(58);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(47);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = CharUtil.isGenericDelimiter(35);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('o');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = CharUtil.isHexDigit(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = CharUtil.isPchar('~');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar(']');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('[');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = CharUtil.isPropertyNameChar('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = CharUtil.isWordChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = CharUtil.isWordChar('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = CharUtil.isWordChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = CharUtil.isWordChar('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlphaOrDigit('\u001E');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlphaOrDigit('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = CharUtil.isAlphaOrDigit('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char char0 = CharUtil.toLowerAscii(')');
      assertEquals(')', char0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = CharUtil.isLowercaseAlpha('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = CharUtil.isLowercaseAlpha('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char char0 = CharUtil.toUpperAscii('2');
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = CharUtil.isWhitespace('\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = CharUtil.isWhitespace('q');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      int int0 = CharUtil.findFirstDiff(charArray0, 0, '<');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      int int0 = CharUtil.findFirstDiff(charArray0, 12, 'c');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      char[] charArray0 = new char[0];
      int int0 = CharUtil.findFirstDiff(charUtil0.HEX_CHARS, 0, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      int int0 = CharUtil.findFirstEqual(charUtil0.HEX_CHARS, 14, 'E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = CharUtil.findFirstEqual(charArray0, 721, 'P');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = '/';
      int int0 = CharUtil.findFirstEqual(charArray1, (int) (byte)0, charArray0);
      assertEquals(1, int0);
      assertEquals(10, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      int int0 = CharUtil.findFirstEqual(charUtil0.HEX_CHARS, 0, charUtil0.HEX_CHARS);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      int int0 = CharUtil.findFirstEqual(charArray0, 205, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      int int0 = CharUtil.findFirstDiff(charUtil0.HEX_CHARS, 0, charUtil0.HEX_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = CharUtil.toRawByteArray(charArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0103';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      byte[] byteArray0 = CharUtil.toAsciiByteArray((CharSequence) charBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)63}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = CharUtil.toAsciiByteArray(charArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = CharUtil.toAscii('\u00FF');
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = CharUtil.toAscii('\u0109');
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = CharUtil.toSimpleByteArray((CharSequence) "l5U@UdPCIBkrgW<jO");
      char[] charArray0 = CharUtil.toRawCharArray(byteArray0);
      byte[] byteArray1 = CharUtil.toAsciiByteArray(charArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)63, (byte)63, (byte)63, (byte)63, (byte)63, (byte)63, (byte)63}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new char[] {'\u6C35', '\u5540', '\u5564', '\u5043', '\u4942', '\u6B72', '\u6757', '\u3C6A', '\u4F00'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = CharUtil.toSimpleCharArray(byteArray0);
      byte[] byteArray1 = CharUtil.toSimpleByteArray(charArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char char0 = CharUtil.toChar((byte)45);
      assertEquals('-', char0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CharUtil charUtil0 = new CharUtil();
      boolean boolean0 = CharUtil.equalsOne(':', charUtil0.HEX_CHARS);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = CharUtil.toCharArray(byteArray0, "l1");
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char char0 = CharUtil.int2hex(0);
      assertEquals('0', char0);
  }
}
