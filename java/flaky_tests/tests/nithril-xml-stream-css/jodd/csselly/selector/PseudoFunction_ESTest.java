/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 10:00:25 GMT 2022
 */

package jodd.csselly.selector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import jodd.csselly.selector.PseudoFunction;
import jodd.csselly.selector.PseudoFunctionExpression;
import jodd.lagarto.dom.Comment;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.DocumentType;
import jodd.lagarto.dom.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.PathContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PseudoFunction_ESTest extends PseudoFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      Set<Node> set0 = pathContext0.getAncestorsAsSet();
      Integer integer0 = new Integer(0);
      boolean boolean0 = pseudoFunction_LT0.match((Collection<Node>) set0, (Node) document0, 240, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "jodd.csselly.selector.PseudoFunction$NTH_CHILD", (String) null, "");
      List<Node> list0 = documentType0.getChildNodesAsList();
      Integer integer0 = Integer.getInteger("jodd.csselly.selector.PseudoFunction$CONTAINS", 125);
      PseudoFunction.GT pseudoFunction_GT0 = new PseudoFunction.GT();
      boolean boolean0 = pseudoFunction_GT0.match((Collection<Node>) list0, (Node) documentType0, (-2027), integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      PathContext pathContext0 = new PathContext((Document) null);
      Set<Node> set0 = pathContext0.getAncestorsAsSet();
      Integer integer0 = new Integer((-522));
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) set0, (Node) null, (-2083), integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.getAncestorsAndSiblings();
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      Integer integer0 = new Integer(4570);
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) list0, (Node) document0, 95, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PseudoFunction.NTH_OF_TYPE pseudoFunction_NTH_OF_TYPE0 = new PseudoFunction.NTH_OF_TYPE();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_OF_TYPE0.parseExpression("Y C]nQ^Ub%*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"YC]\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      String string0 = pseudoFunction_CONTAINS0.parseExpression("<");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      Document document0 = new Document();
      boolean boolean0 = pseudoFunction_CONTAINS0.match((Node) document0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChild(nodeArray0);
      PseudoFunction.NTH_LAST_CHILD pseudoFunction_NTH_LAST_CHILD0 = new PseudoFunction.NTH_LAST_CHILD();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_LAST_CHILD0.match((Node) document0, (PseudoFunctionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$NTH_LAST_CHILD", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document();
      PseudoFunction.NTH_CHILD pseudoFunction_NTH_CHILD0 = new PseudoFunction.NTH_CHILD();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_CHILD0.match((Node) document0, (PseudoFunctionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$NTH_CHILD", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      Document document0 = new Document();
      Integer integer0 = new Integer(0);
      boolean boolean0 = pseudoFunction_LT0.match((Node) document0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, "<");
      boolean boolean0 = pseudoFunction_CONTAINS0.match((Node) comment0, "<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      // Undeclared exception!
      try { 
        pseudoFunction_CONTAINS0.parseExpression("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      // Undeclared exception!
      try { 
        pseudoFunction_CONTAINS0.parseExpression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document();
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      DocumentType documentType0 = new DocumentType(document0, (String) null, "]]R$uc09s", (String) null);
      List<Node> list0 = documentType0.getChildNodesAsList();
      // Undeclared exception!
      try { 
        pseudoFunction_LT0.match((Collection<Node>) list0, (Node) document0, (-2013), (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$LT", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      String string0 = pseudoFunction_CONTAINS0.parseExpression("\"qVaNqVqe$NQ(");
      assertEquals("qVaNqVqe$NQ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      String string0 = pseudoFunction_CONTAINS0.parseExpression("'ZkUQz");
      assertEquals("ZkUQ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document();
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.getAncestorsAndSiblings();
      Integer integer0 = new Integer(898);
      boolean boolean0 = pseudoFunction_LT0.match((Collection<Node>) list0, (Node) document0, 95, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.getAncestorsAndSiblings();
      Integer integer0 = new Integer(10);
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      boolean boolean0 = pseudoFunction_LT0.match((Collection<Node>) list0, (Node) document0, 10, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PseudoFunction.GT pseudoFunction_GT0 = new PseudoFunction.GT();
      Integer integer0 = new Integer((-1744));
      boolean boolean0 = pseudoFunction_GT0.match((Collection<Node>) null, (Node) null, 62, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PseudoFunction.GT pseudoFunction_GT0 = new PseudoFunction.GT();
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "", "]Lfi;9Yr+ p(z`G4", "]Lfi;9Yr+ p(z`G4");
      List<Node> list0 = documentType0.getChildNodesAsList();
      Integer integer0 = Integer.getInteger("]Lfi;9Yr+ p(z`G4", 125);
      boolean boolean0 = pseudoFunction_GT0.match((Collection<Node>) list0, (Node) documentType0, 125, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document();
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Integer integer0 = new Integer((-1759));
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) linkedList0, (Node) document0, 801, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document();
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Integer integer0 = new Integer(34);
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) linkedList0, (Node) document0, 34, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "jodd.csselly.selector.PseudoFunction$LT", "jodd.csselly.selector.PseudoFunction$LT", "jodd.csselly.selector.PseudoFunction$LT");
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) linkedList0, (Node) documentType0, 1081, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document();
      Integer integer0 = new Integer((-662));
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.getAncestorsAndSiblings();
      boolean boolean0 = pseudoFunction_EQ0.match((Collection<Node>) list0, (Node) null, (-662), integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PseudoFunction.NTH_LAST_OF_TYPE pseudoFunction_NTH_LAST_OF_TYPE0 = new PseudoFunction.NTH_LAST_OF_TYPE();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_LAST_OF_TYPE0.match((Node) null, (PseudoFunctionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PseudoFunction.NTH_LAST_OF_TYPE pseudoFunction_NTH_LAST_OF_TYPE0 = new PseudoFunction.NTH_LAST_OF_TYPE();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_LAST_OF_TYPE0.parseExpression("nth-last-of-type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"th-last-of-type\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PseudoFunction.NTH_LAST_CHILD pseudoFunction_NTH_LAST_CHILD0 = new PseudoFunction.NTH_LAST_CHILD();
      PseudoFunctionExpression pseudoFunctionExpression0 = pseudoFunction_NTH_LAST_CHILD0.parseExpression("even");
      assertEquals(2, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PseudoFunction.NTH_LAST_OF_TYPE pseudoFunction_NTH_LAST_OF_TYPE0 = new PseudoFunction.NTH_LAST_OF_TYPE();
      String string0 = pseudoFunction_NTH_LAST_OF_TYPE0.getPseudoFunctionName();
      assertEquals("nth-last-of-type", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PseudoFunction.NTH_LAST_OF_TYPE pseudoFunction_NTH_LAST_OF_TYPE0 = new PseudoFunction.NTH_LAST_OF_TYPE();
      boolean boolean0 = pseudoFunction_NTH_LAST_OF_TYPE0.match((Collection<Node>) null, (Node) null, (-2398), (PseudoFunctionExpression) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PseudoFunction.NTH_CHILD pseudoFunction_NTH_CHILD0 = new PseudoFunction.NTH_CHILD();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_CHILD0.parseExpression("nth-last-of-type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"th-last-of-type\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PseudoFunction.NTH_OF_TYPE pseudoFunction_NTH_OF_TYPE0 = new PseudoFunction.NTH_OF_TYPE();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_OF_TYPE0.match((Node) null, (PseudoFunctionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$NTH_OF_TYPE", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PseudoFunction.NTH_OF_TYPE pseudoFunction_NTH_OF_TYPE0 = new PseudoFunction.NTH_OF_TYPE();
      // Undeclared exception!
      try { 
        pseudoFunction_NTH_OF_TYPE0.parseExpression(",B3*kQ0#*~Qg-9]ccd3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \",B3*kQ0#*~Qg-9]ccd3\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "START", "START", "START");
      PseudoFunction.GT pseudoFunction_GT0 = new PseudoFunction.GT();
      Integer integer0 = new Integer(1117);
      boolean boolean0 = pseudoFunction_GT0.match((Node) documentType0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PseudoFunction.GT pseudoFunction_GT0 = new PseudoFunction.GT();
      // Undeclared exception!
      try { 
        pseudoFunction_GT0.parseExpression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$GT", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "*pVZt", "org.nlab.xml.stream.predicate.CssPredicate", "org.nlab.xml.stream.XmlStream");
      Integer integer0 = new Integer(0);
      boolean boolean0 = pseudoFunction_EQ0.match((Node) documentType0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PseudoFunction.EQ pseudoFunction_EQ0 = new PseudoFunction.EQ();
      // Undeclared exception!
      try { 
        pseudoFunction_EQ0.parseExpression("jodd.csselly.selector.PseudoFunction$LT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jodd.csselly.selector.PseudoFunction$LT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PseudoFunction.CONTAINS pseudoFunction_CONTAINS0 = new PseudoFunction.CONTAINS();
      // Undeclared exception!
      try { 
        pseudoFunction_CONTAINS0.match((Node) null, "org.nlab.xml.stream.context.PathContext");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoFunction$CONTAINS", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      // Undeclared exception!
      try { 
        pseudoFunction_LT0.parseExpression("$<6fIUcLI?ou");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$<6fIUcLI?ou\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PseudoFunction.LT pseudoFunction_LT0 = new PseudoFunction.LT();
      Integer integer0 = new Integer((-147));
      boolean boolean0 = pseudoFunction_LT0.match((Node) null, integer0);
      assertTrue(boolean0);
  }
}
