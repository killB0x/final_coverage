/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:47:11 GMT 2022
 */

package jodd.csselly.selector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jodd.csselly.selector.PseudoClass;
import jodd.csselly.selector.PseudoClassSelector;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PseudoClassSelector_ESTest extends PseudoClassSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        PseudoClassSelector.registerPseudoClass((Class<? extends PseudoClass>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("jodd.csselly.selector.PseudoClassSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = new PseudoClassSelector("button");
      // Undeclared exception!
      try { 
        pseudoClassSelector0.accept((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoClass$BUTTON", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = null;
      try {
        pseudoClassSelector0 = new PseudoClassSelector((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.PseudoClassSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        PseudoClassSelector.lookupPseudoClass("Unsupported pseudo class: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported pseudo class: Unsupported pseudo class: 
         //
         verifyException("jodd.csselly.selector.PseudoClassSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PseudoClass pseudoClass0 = PseudoClassSelector.lookupPseudoClass("radio");
      assertNotNull(pseudoClass0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = null;
      try {
        pseudoClassSelector0 = new PseudoClassSelector("J]6z[yOvp$F*RxQRoN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported pseudo class: J]6z[yOvp$F*RxQRoN
         //
         verifyException("jodd.csselly.selector.PseudoClassSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = new PseudoClassSelector("password");
      PseudoClass pseudoClass0 = pseudoClassSelector0.getPseudoClass();
      assertNotNull(pseudoClass0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = new PseudoClassSelector("image");
      boolean boolean0 = pseudoClassSelector0.accept((List<Node>) null, (Node) null, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PseudoClassSelector pseudoClassSelector0 = new PseudoClassSelector("image");
      Document document0 = new Document();
      boolean boolean0 = pseudoClassSelector0.accept((Node) document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<PseudoClass.HEADER> class0 = PseudoClass.HEADER.class;
      PseudoClassSelector.registerPseudoClass(class0);
  }
}
