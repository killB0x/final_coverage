/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:28:14 GMT 2022
 */

package jodd.csselly.selector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jodd.csselly.selector.PseudoFunctionExpression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PseudoFunctionExpression_ESTest extends PseudoFunctionExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-n");
      boolean boolean0 = pseudoFunctionExpression0.match((-1));
      assertTrue(boolean0);
      assertEquals(0, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("3");
      boolean boolean0 = pseudoFunctionExpression0.match((-1882699752));
      assertFalse(boolean0);
      assertEquals(0, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("0");
      pseudoFunctionExpression0.parseInt("0");
      assertEquals(0, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("3");
      pseudoFunctionExpression0.parseInt("3");
      assertEquals(0, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-5");
      pseudoFunctionExpression0.parseInt("-5");
      assertEquals(0, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("odd");
      int int0 = pseudoFunctionExpression0.getValueB();
      assertEquals(2, pseudoFunctionExpression0.getValueA());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("539");
      int int0 = pseudoFunctionExpression0.getValueA();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("odd");
      int int0 = pseudoFunctionExpression0.getValueA();
      assertEquals(2, int0);
      assertEquals(1, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = null;
      try {
        pseudoFunctionExpression0 = new PseudoFunctionExpression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-n");
      boolean boolean0 = pseudoFunctionExpression0.match(110);
      assertEquals((-1), pseudoFunctionExpression0.getValueA());
      assertFalse(boolean0);
      assertEquals(0, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("odd");
      boolean boolean0 = pseudoFunctionExpression0.match(4294);
      assertEquals(2, pseudoFunctionExpression0.getValueA());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("odd");
      boolean boolean0 = pseudoFunctionExpression0.match((-1));
      assertFalse(boolean0);
      assertEquals(2, pseudoFunctionExpression0.getValueA());
      assertEquals(1, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("3");
      boolean boolean0 = pseudoFunctionExpression0.match(98);
      assertEquals(3, pseudoFunctionExpression0.getValueB());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-5");
      boolean boolean0 = pseudoFunctionExpression0.match((-5));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-n");
      boolean boolean0 = pseudoFunctionExpression0.match(0);
      assertEquals(0, pseudoFunctionExpression0.getValueB());
      assertTrue(boolean0);
      assertEquals((-1), pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = null;
      try {
        pseudoFunctionExpression0 = new PseudoFunctionExpression("59n*}d:&RM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"*}d:&RM\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("n");
      assertEquals(1, pseudoFunctionExpression0.getValueA());
      assertEquals(0, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("even");
      int int0 = pseudoFunctionExpression0.getValueB();
      assertEquals(2, pseudoFunctionExpression0.getValueA());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("odd");
      boolean boolean0 = pseudoFunctionExpression0.match(1);
      assertTrue(boolean0);
      assertEquals(2, pseudoFunctionExpression0.getValueA());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-n");
      int int0 = pseudoFunctionExpression0.getValueA();
      assertEquals((-1), int0);
      assertEquals(0, pseudoFunctionExpression0.getValueB());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-5");
      int int0 = pseudoFunctionExpression0.getValueB();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PseudoFunctionExpression pseudoFunctionExpression0 = new PseudoFunctionExpression("-n");
      // Undeclared exception!
      try { 
        pseudoFunctionExpression0.parseInt("0U8riV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"0U8riV\"
         //
         verifyException("jodd.csselly.selector.PseudoFunctionExpression", e);
      }
  }
}
