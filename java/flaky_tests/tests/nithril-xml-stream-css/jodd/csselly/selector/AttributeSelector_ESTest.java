/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:35:17 GMT 2022
 */

package jodd.csselly.selector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jodd.csselly.selector.AttributeSelector;
import jodd.csselly.selector.Match;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.DocumentType;
import jodd.lagarto.dom.Text;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeSelector_ESTest extends AttributeSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("SELF_CLOSING", "DASH", "org.nlab.xml.stream.predicate.AllElementPredicate");
      assertEquals("org.nlab.xml.stream.predicate.AllElementPredicate", attributeSelector0.getValue());
      assertEquals("SELF_CLOSING", attributeSelector0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("g{qQ\"?2&d");
      String string0 = attributeSelector0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Match match0 = Match.EQUALS;
      AttributeSelector attributeSelector0 = new AttributeSelector(" }1O", match0, " }1O");
      String string0 = attributeSelector0.getValue();
      assertEquals("}1O", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("jodd.cssely.selectrAttributeSelector");
      attributeSelector0.quoteChar = '3';
      char char0 = attributeSelector0.getQuoteChar();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("");
      attributeSelector0.quoteChar = 'e';
      char char0 = attributeSelector0.getQuoteChar();
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("");
      String string0 = attributeSelector0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Match match0 = Match.DASH;
      AttributeSelector attributeSelector0 = new AttributeSelector("", match0, "-k/RvCiYOqiAvDWR");
      attributeSelector0.getMatch();
      assertEquals("-k/RvCiYOqiAvDWR", attributeSelector0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Match match0 = Match.PREFIX;
      AttributeSelector attributeSelector0 = new AttributeSelector("YouB-JmC", match0, " ");
      String string0 = attributeSelector0.extractValue("YouB-JmC");
      assertEquals("YouB-JmC", string0);
      assertEquals("", attributeSelector0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("gP>+");
      attributeSelector0.extractValue("\"t");
      assertEquals('\"', attributeSelector0.getQuoteChar());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("_cO,8n= %b?8#\"~u0E.");
      // Undeclared exception!
      try { 
        attributeSelector0.extractValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.AttributeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Match match0 = Match.INCLUDES;
      AttributeSelector attributeSelector0 = new AttributeSelector("<}~B|", match0, "<}~B|");
      Document document0 = new Document();
      Text text0 = new Text(document0, "<}~B|");
      text0.setAttribute("<}~B|");
      // Undeclared exception!
      try { 
        attributeSelector0.accept(text0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Match match0 = Match.EQUALS;
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector("", match0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Match match0 = Match.SUBSTRING;
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector((String) null, match0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.AttributeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.AttributeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector("$=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.csselly.selector.AttributeSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "jodd.csselly.selector.AttributeSelector", "jodd.csselly.selector.AttributeSelector", "jodd.csselly.selector.AttributeSelector");
      documentType0.setAttribute(".>tt");
      AttributeSelector attributeSelector0 = new AttributeSelector(".>tt");
      boolean boolean0 = attributeSelector0.accept(documentType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Match match0 = Match.PREFIX;
      AttributeSelector attributeSelector0 = new AttributeSelector("YouB-JmC", match0, " ");
      Document document0 = new Document();
      boolean boolean0 = attributeSelector0.accept(document0);
      assertEquals("", attributeSelector0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Match match0 = Match.EQUALS;
      AttributeSelector attributeSelector0 = new AttributeSelector(" }1O", match0, " }1O");
      Document document0 = new Document();
      Text text0 = new Text(document0, "}1O");
      text0.setAttribute("}1O");
      boolean boolean0 = attributeSelector0.accept(text0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector("'Y", "'Y", "'Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant jodd.csselly.selector.Match.'Y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("[l9|d@Ms=1)@E;x");
      // Undeclared exception!
      try { 
        attributeSelector0.extractValue("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Match match0 = Match.PREFIX;
      AttributeSelector attributeSelector0 = new AttributeSelector("YouB-JmC", match0, " ");
      String string0 = attributeSelector0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttributeSelector attributeSelector0 = null;
      try {
        attributeSelector0 = new AttributeSelector("\"", "\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("g{qQ\"?2&d");
      attributeSelector0.getMatch();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AttributeSelector attributeSelector0 = new AttributeSelector("T[jNdC1HG9");
      char char0 = attributeSelector0.getQuoteChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Match match0 = Match.PREFIX;
      AttributeSelector attributeSelector0 = new AttributeSelector("YouB-JmC", match0, " ");
      String string0 = attributeSelector0.getName();
      assertEquals("", attributeSelector0.getValue());
      assertEquals("YouB-JmC", string0);
  }
}
