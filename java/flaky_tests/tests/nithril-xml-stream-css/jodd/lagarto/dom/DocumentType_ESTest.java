/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:56:33 GMT 2022
 */

package jodd.lagarto.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.DocumentType;
import jodd.lagarto.dom.Node;
import jodd.lagarto.dom.NodeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.PathContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "", "( amsv0TJF.l4X@Ax", "");
      documentType0.getPublicIdentifier();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "", "( amsv0TJF.l4X@Ax", "");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      documentType0.visitNode(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "jodd.lagarto.dom.Text", (String) null, (String) null);
      documentType0.getSystemIdentifier();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "tYky]6!", "tYky]6!", "tYky]6!");
      documentType0.getSystemIdentifier();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, (String) null, "<=zkI/", "jodd.lagarto.dom.DocumentType");
      documentType0.getRootName();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "", "( amsv0TJF.l4X@Ax", "");
      documentType0.getRootName();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "jodd.lagarto.dom.Text", (String) null, (String) null);
      documentType0.getPublicIdentifier();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((Document) null, "", "", "");
      documentType0.getPublicIdentifier();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "TEXT", "TEXT", "TEXT");
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.findAncestors();
      documentType0.childNodes = list0;
      documentType0.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "", "( amsv0TJF.l4X@Ax", "");
      documentType0.setAttribute("END", "");
      documentType0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "'@JI~E{}Fn", "y&aMJz]49 nze'!9", "'@JI~E{}Fn");
      // Undeclared exception!
      try { 
        documentType0.visitNode((NodeVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.DocumentType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((Document) null, "", "y", "y");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      documentType0.childNodes = (List<Node>) linkedList0;
      linkedList0.addLast(documentType0);
      // Undeclared exception!
      try { 
        documentType0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((Document) null, "jodd.csselly.CssSelector", "jodd.csselly.CssSelector", "jodd.csselly.CssSelector");
      PathContext pathContext0 = new PathContext((Document) null);
      List<Node> list0 = pathContext0.getAncestors();
      documentType0.childNodes = list0;
      // Undeclared exception!
      try { 
        documentType0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "class", "", "");
      String string0 = documentType0.getSystemIdentifier();
      assertEquals("", documentType0.getPublicIdentifier());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document();
      DocumentType documentType0 = new DocumentType(document0, "s_0M5+XYj", "s_0M5+XYj", "s_0M5+XYj");
      String string0 = documentType0.getRootName();
      assertEquals("s_0M5+XYj", string0);
  }
}
