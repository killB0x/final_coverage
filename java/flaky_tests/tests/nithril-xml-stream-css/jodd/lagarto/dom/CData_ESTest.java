/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:54:39 GMT 2022
 */

package jodd.lagarto.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jodd.lagarto.dom.CData;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Node;
import jodd.lagarto.dom.NodeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CData_ESTest extends CData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = new Document();
      CData cData0 = new CData(document0, "Xws8Nu");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) cData0;
      nodeArray0[1] = (Node) document0;
      cData0.addChild(nodeArray0);
      CData cData1 = cData0.clone();
      cData1.clone();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = new Document();
      document0.removeAllChilds();
      Document document1 = document0.clone();
      CData cData0 = new CData(document1, "");
      cData0.addChild((Node) document0);
      CData cData1 = cData0.clone();
      CData cData2 = cData1.clone();
      assertEquals(0, cData2.getChildElementsCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CData cData0 = new CData((Document) null, "hwS;");
      CData cData1 = cData0.clone();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData0.getFirstChildElement();
      cData1.visit(nodeVisitor0);
      cData1.getFirstChildElement("mcA99B{m&&8!^DXRv");
      cData1.changeOwnerDocument(cData0, (Document) null);
      cData1.setAttribute("TEXT", "");
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      CData cData2 = new CData((Document) null, "");
      cData2.clone();
      CData cData3 = cData1.clone();
      assertEquals("hwS;", cData3.getNodeValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = new Document();
      Document document1 = document0.clone();
      CData cData0 = new CData(document1, "*");
      // Undeclared exception!
      try { 
        cData0.visitNode((NodeVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.CData", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = new Document();
      Document document1 = document0.clone();
      CData cData0 = new CData(document1, "7`*CfCW'");
      CData cData1 = cData0.clone();
      CData cData2 = cData0.clone();
      CData cData3 = cData2.clone();
      cData0.getLastChildElement();
      cData2.removeAllChilds();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData2.visitNode(nodeVisitor0);
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData2.visitNode(nodeVisitor1);
      CData cData4 = cData3.clone();
      cData4.getChildElement((-406));
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData1.visitNode(nodeVisitor2);
      NodeVisitor nodeVisitor3 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData0.visitNode(nodeVisitor3);
      NodeVisitor nodeVisitor4 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      cData4.visitNode(nodeVisitor4);
      assertNotSame(cData0, cData4);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = new Document();
      CData cData0 = new CData(document0, "qcQ");
      assertFalse(cData0.hasChildNodes());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = new Document();
      CData cData0 = new CData(document0, "");
      CData cData1 = cData0.clone();
      assertEquals(0, cData1.getChildElementsCount());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = new Document();
      String string0 = ",oZ3Olw";
      CData cData0 = new CData(document0, ",oZ3Olw");
      List<Node> list0 = cData0.getChildNodesAsList();
      cData0.childNodes = list0;
      CData cData1 = cData0.clone();
      CData cData2 = cData1.clone();
      CData cData3 = cData0.clone();
      document0.reindexChildrenOnAdd(0);
      cData1.initAttributes();
      Node[] nodeArray0 = new Node[8];
      CData cData4 = new CData(document0, ",oZ3Olw");
      nodeArray0[0] = (Node) cData4;
      nodeArray0[1] = (Node) cData0;
      nodeArray0[2] = (Node) cData2;
      nodeArray0[3] = (Node) cData3;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) cData3;
      nodeArray0[6] = (Node) cData0;
      nodeArray0[7] = (Node) cData3;
      // Undeclared exception!
      try { 
        cData3.insertBefore(nodeArray0, nodeArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Node", e);
      }
  }
}
