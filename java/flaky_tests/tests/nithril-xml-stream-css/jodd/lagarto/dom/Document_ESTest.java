/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:57:20 GMT 2022
 */

package jodd.lagarto.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import jodd.lagarto.dom.CData;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Node;
import jodd.lagarto.dom.NodeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document();
      document0.end();
      document0.end();
      assertEquals(1392409281320L, document0.getElapsedTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.visitNode(nodeVisitor0);
      assertEquals(0, document0.getSiblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      document0.errors = list0;
      List<String> list1 = document0.getErrors();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document();
      document0.end();
      long long0 = document0.getElapsedTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document();
      document0.elapsedTime = (-1395L);
      long long0 = document0.getElapsedTime();
      assertEquals((-1395L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-4742L));
      Document document0 = new Document();
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals((-4742L), document1.getElapsedTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document();
      CData cData0 = new CData(document0, (String) null);
      document0.addChild((Node) cData0);
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(1392409281320L, document1.getElapsedTime());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document();
      document0.setAttribute("r", "");
      assertNull(document0.getNodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document();
      List<String> list0 = document0.getErrors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document();
      long long0 = document0.getElapsedTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document();
      document0.end();
      document0.clone();
      assertEquals(0L, document0.getElapsedTime());
  }
}
