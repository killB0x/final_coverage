/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:55:44 GMT 2022
 */

package jodd.lagarto.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import jodd.lagarto.dom.Comment;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Element;
import jodd.lagarto.dom.Node;
import jodd.lagarto.dom.NodeVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.PathContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, "<VmQk(C&:OPO}D");
      comment0.setAttribute("<VmQk(C&:OPO}D", "<VmQk(C&:OPO}D");
      System.setCurrentTimeMillis(3659L);
      comment0.clone();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1839L));
      Document document0 = new Document();
      Document document1 = document0.clone();
      String string0 = "xml";
      document1.getFirstChildElement("xml");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) null;
      nodeArray0[1] = (Node) null;
      Comment comment0 = new Comment(document0, "xml");
      PathContext pathContext0 = new PathContext(document0);
      List<Node> list0 = pathContext0.findAncestors();
      comment0.childNodes = list0;
      Comment comment1 = comment0.clone();
      // Undeclared exception!
      try { 
        comment1.getNextSiblingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, (String) null);
      document0.setAttribute("jodd.lagarto.TagType");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      System.setCurrentTimeMillis((-3115L));
      nodeArray0[1] = (Node) comment0;
      comment0.addChild(nodeArray0);
      // Undeclared exception!
      try { 
        comment0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comment comment0 = new Comment((Document) null, "$[XkZx'TM7");
      Comment comment1 = comment0.clone();
      assertEquals("$[XkZx'TM7", comment1.getNodeValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = new Document();
      Document document1 = document0.clone();
      Comment comment0 = new Comment(document1, "e");
      Comment comment1 = comment0.clone();
      assertEquals((-1), comment1.getSiblingElementIndex());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, "qa");
      assertNull(comment0.getNodeRawName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, ".y/v[BV%0|~p$w");
      // Undeclared exception!
      try { 
        comment0.visitNode((NodeVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = new Document();
      Comment comment0 = new Comment(document0, "");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      comment0.visitNode(nodeVisitor0);
      assertEquals(0, comment0.getChildElementsCount());
  }
}
