/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 12 09:45:26 GMT 2022
 */

package jodd.lagarto.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.List;
import jodd.lagarto.dom.Document;
import jodd.lagarto.dom.Node;
import jodd.lagarto.dom.NodeVisitor;
import jodd.lagarto.dom.Text;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.nlab.xml.stream.context.PathContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Text_ESTest extends Text_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "");
      text0.encodedText = "H2}GOmf{*#";
      String string0 = text0.getTextContent();
      assertNotNull(string0);
      assertEquals("H2}GOmf{*#", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, ".}");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      text0.visitNode(nodeVisitor0);
      assertEquals(Node.NodeType.TEXT, text0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "%6;}OJMd");
      File file0 = MockFile.createTempFile("5r\"%<s%%3r'6(`I4`", "%6;}OJMd");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      text0.appendTextContent(mockPrintWriter0);
      assertEquals(0, text0.getChildElementsCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Text text0 = new Text((Document) null, "");
      boolean boolean0 = text0.isBlank();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, (String) null);
      String string0 = text0.getTextContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "nAen\"KqLs*/!\"\"");
      text0.insertChild((Node) document0, 0);
      Text text1 = text0.clone();
      assertNotSame(text0, text1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "n9f!XNQ6_Pq");
      text0.setAttribute("~'p Gu$9jy_g");
      Text text1 = text0.clone();
      assertEquals(0, text1.getChildElementsCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "");
      // Undeclared exception!
      try { 
        text0.visitNode((NodeVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Text text0 = new Text((Document) null, "!VcZO43kGp_A>s+{[");
      PathContext pathContext0 = new PathContext((Document) null);
      List<Node> list0 = pathContext0.getAncestors();
      text0.childNodes = list0;
      // Undeclared exception!
      try { 
        text0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Text text0 = new Text((Document) null, "");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        text0.appendTextContent(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("jodd.lagarto.dom.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Text text0 = new Text((Document) null, "Hl");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        text0.appendTextContent(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Text text0 = new Text((Document) null, (String) null);
      // Undeclared exception!
      try { 
        text0.appendTextContent((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jodd.lagarto.dom.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Text text0 = new Text((Document) null, "");
      String string0 = text0.getTextContent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "iN;o");
      text0.setTextContent("iN;o");
      String string0 = text0.getTextContent();
      assertEquals("iN;o", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, "5n((7i8rlm?a");
      text0.isBlank();
      boolean boolean0 = text0.isBlank();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Text text0 = new Text((Document) null, "M");
      text0.setNodeValue("M");
      assertEquals("M", text0.getNodeValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document();
      Text text0 = new Text(document0, ":oj,~{?");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":oj,~{?");
      // Undeclared exception!
      try { 
        text0.appendTextContent(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
