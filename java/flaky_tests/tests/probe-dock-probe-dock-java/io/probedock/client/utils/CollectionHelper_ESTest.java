/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:31:05 GMT 2022
 */

package io.probedock.client.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.annotations.ProbeTest;
import io.probedock.client.annotations.ProbeTestClass;
import io.probedock.client.utils.CollectionHelper;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionHelper_ESTest extends CollectionHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("+@-O.AA");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+@-O.AA";
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(probeTestClass0).contributors();
      // Undeclared exception!
      try { 
        CollectionHelper.getContributors(linkedHashSet0, (ProbeTest) null, probeTestClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).tickets();
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTestClass0).tickets();
      linkedHashSet0.add("");
      Set<String> set0 = CollectionHelper.getTickets(linkedHashSet0, probeTest0, probeTestClass0);
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("+@-.AA");
      Set<String> set0 = CollectionHelper.getContributors(linkedHashSet0, (ProbeTest) null, (ProbeTestClass) null);
      assertTrue(set0.contains("+@-.AA"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<String> set0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = " is already present in the collection and is ingored";
      stringArray0[1] = "7r<,D/";
      stringArray0[2] = "+@-.AA";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "4G";
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(probeTestClass0).tickets();
      // Undeclared exception!
      try { 
        CollectionHelper.getTickets((Set<String>) null, probeTest0, probeTestClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Set<String> set0 = CollectionHelper.getTickets(linkedHashSet0, (ProbeTest) null, (ProbeTestClass) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Dj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Dj";
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).tags();
      CollectionHelper.getTags(linkedHashSet0, probeTest0, (ProbeTestClass) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("$]e?pW%NL8F");
      // Undeclared exception!
      try { 
        CollectionHelper.getTags(linkedHashSet0, (ProbeTest) null, (ProbeTestClass) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).tags();
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTestClass0).tags();
      Set<String> set0 = CollectionHelper.getTags(linkedHashSet0, probeTest0, probeTestClass0);
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String[] stringArray0 = new String[0];
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(probeTestClass0).tags();
      // Undeclared exception!
      try { 
        CollectionHelper.getTags(linkedHashSet0, (ProbeTest) null, probeTestClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).tags();
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTestClass0).tags();
      Set<String> set0 = CollectionHelper.getTags((Set<String>) null, probeTest0, probeTestClass0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("+@-.AA");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+@-.AA";
      stringArray0[1] = "+@-.AA";
      stringArray0[2] = "+@-.AA";
      stringArray0[3] = "+@-.AA";
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).contributors();
      CollectionHelper.getContributors(linkedHashSet0, probeTest0, (ProbeTestClass) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g/FR");
      // Undeclared exception!
      try { 
        CollectionHelper.getContributors(linkedHashSet0, (ProbeTest) null, (ProbeTestClass) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Set<String> set0 = CollectionHelper.getContributors(linkedHashSet0, (ProbeTest) null, (ProbeTestClass) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTest0).contributors();
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTestClass0).contributors();
      Set<String> set0 = CollectionHelper.getContributors((Set<String>) null, probeTest0, probeTestClass0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollectionHelper collectionHelper0 = new CollectionHelper();
  }
}
