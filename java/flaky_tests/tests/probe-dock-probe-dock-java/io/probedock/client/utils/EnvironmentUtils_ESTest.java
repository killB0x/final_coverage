/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:46:33 GMT 2022
 */

package io.probedock.client.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.utils.EnvironmentUtils;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EnvironmentUtils_ESTest extends EnvironmentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      String string0 = EnvironmentUtils.getEnvironmentString("PROBEDOCK_", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      String string0 = EnvironmentUtils.getEnvironmentString("PROBEDOCK_", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = EnvironmentUtils.getEnvironmentInteger("", integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Integer integer0 = new Integer(1327);
      Integer integer1 = EnvironmentUtils.getEnvironmentInteger("", integer0);
      assertEquals(1327, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Integer integer0 = EnvironmentUtils.getEnvironmentInteger("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Boolean boolean0 = Boolean.valueOf("A1Z");
      Boolean boolean1 = EnvironmentUtils.getEnvironmentBoolean("PROBEDOCK_", boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      hashMap0.put("PROBEDOCK_", "PROBEDOCK_");
      String string0 = EnvironmentUtils.getEnvironmentString("", "(XK:gw]ldgUzW");
      assertEquals("PROBEDOCK_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnvironmentUtils.getEnvironmentString("io.probedock.client.utils.EnvironmentUtils", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The environment vars must be provided before calling getEnvironmentString.
         //
         verifyException("io.probedock.client.utils.EnvironmentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Integer integer0 = new Integer(1327);
      hashMap0.put("PROBEDOCK_", "");
      // Undeclared exception!
      try { 
        EnvironmentUtils.getEnvironmentInteger("", integer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-676));
      // Undeclared exception!
      try { 
        EnvironmentUtils.getEnvironmentInteger("<T&;$", integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The environment vars must be provided before calling getEnvironmentInteger.
         //
         verifyException("io.probedock.client.utils.EnvironmentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Integer integer0 = new Integer((-3056));
      Integer integer1 = EnvironmentUtils.getEnvironmentInteger("A1Z", integer0);
      assertEquals((-3056), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      hashMap0.put("PROBEDOCK_", "");
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = EnvironmentUtils.getEnvironmentBoolean("", boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("PROBEDOCK_");
      // Undeclared exception!
      try { 
        EnvironmentUtils.getEnvironmentBoolean("PROBEDOCK_", boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The environment vars must be provided before calling getEnvironmentBoolean.
         //
         verifyException("io.probedock.client.utils.EnvironmentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EnvironmentUtils.setEnvVars(hashMap0);
      Boolean boolean0 = EnvironmentUtils.getEnvironmentBoolean("x&O~5Z", (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnvironmentUtils environmentUtils0 = new EnvironmentUtils();
  }
}
