/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:28:33 GMT 2022
 */

package io.probedock.client.common.model.v1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.common.config.Configuration;
import io.probedock.client.common.model.v1.Context;
import io.probedock.client.common.model.v1.ModelFactory;
import io.probedock.client.common.model.v1.Probe;
import io.probedock.client.common.model.v1.TestReport;
import io.probedock.client.common.model.v1.TestResult;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModelFactory_ESTest extends ModelFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelFactory.enrichTestResult((Configuration) null, (TestResult) null, (String) null, (String) null, "tE|=tx+#i", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = new Long(1325L);
      TestResult testResult0 = new TestResult("]]", "i.7k'pX mC/W-'6Lzq;", "probedock.payload.print", long0, true, "]]", "lE40/HK1K;L>", boolean0);
      // Undeclared exception!
      try { 
        ModelFactory.enrichTestResult((Configuration) null, testResult0, "se1O%xuAcnn_", "]]", "{YUgB @A", 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Probe probe0 = ModelFactory.createProbe("Tags: [", (String) null);
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, "GpCf", ", Category: ", "]O", (String) null, linkedList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelFactory.enrichContext((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelFactory.createContext((Configuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(0L);
      TestResult testResult0 = new TestResult("os.architecture", "", "", long0, false, "os.architecture", "Pb=a^");
      // Undeclared exception!
      try { 
        ModelFactory.enrichTestResult((Configuration) null, testResult0, "probedock.report.uid", "probedock.report.uid", "N![.6Bp", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TestResult testResult0 = ModelFactory.createTestResult("", "$", "$", "", 4300L, "$", false, (Boolean) null, linkedHashSet0, linkedHashSet0, linkedHashSet0, hashMap0);
      assertEquals(4300L, testResult0.getDuration());
      assertFalse(testResult0.isPassed());
      assertEquals("$", testResult0.getMessage());
      assertEquals("$", testResult0.getFingerprint());
      assertEquals("$", testResult0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TestResult testResult0 = ModelFactory.createTestResult("[", "[", "[", (String) null, 2224L, "[", true, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, hashMap0);
      assertTrue(testResult0.isPassed());
      assertEquals(2224L, testResult0.getDuration());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TestResult testResult0 = ModelFactory.createTestResult("@V2]: e", "@V2]: e", "@V2]: e", "@V2]: e", 339L, (String) null, true, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, (Map<String, String>) null);
      assertTrue(testResult0.isPassed());
      assertEquals(339L, testResult0.getDuration());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.FALSE;
      TestResult testResult0 = ModelFactory.createTestResult((String) null, "x", (String) null, "x", 444L, "x", true, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, hashMap0);
      assertTrue(testResult0.isPassed());
      assertEquals(444L, testResult0.getDuration());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TestResult testResult0 = ModelFactory.createTestResult("No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", "No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", "No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", "No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", 1L, "", false, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, (Map<String, String>) null);
      assertFalse(testResult0.isPassed());
      assertEquals("No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", testResult0.getName());
      assertEquals("No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", testResult0.getKey());
      assertEquals("Failing message was empty.", testResult0.getMessage());
      assertEquals("No known server is selected in the Probe DockHconfiguration files; set the \"server\" property to the name of one of the configured servers.", testResult0.getFingerprint());
      assertEquals(1L, testResult0.getDuration());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TestResult testResult0 = ModelFactory.createTestResult("'^-}JB~", "'^-}JB~", "'^-}JB~", "'^-}JB~", 0L, (String) null, false, boolean0, (Set<String>) null, (Set<String>) null, (Set<String>) null, hashMap0);
      assertEquals("No message available.", testResult0.getMessage());
      assertFalse(testResult0.isPassed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TestResult testResult0 = ModelFactory.createTestResult("H/YZ[qs*n", "pre.", "fp", "8d[@@|Bn()p>PC", 0L, "oveKP42I1t_", true, boolean0, (Set<String>) null, (Set<String>) null, (Set<String>) null, hashMap0);
      assertEquals("fp", testResult0.getName());
      assertTrue(testResult0.isPassed());
      assertEquals("pre.", testResult0.getFingerprint());
      assertEquals("H/YZ[qs*n", testResult0.getKey());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestResult("", "", "", "", 327L, "", true, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, (Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fingerprint is mandatory.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.FALSE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestResult((String) null, (String) null, (String) null, (String) null, 426L, (String) null, false, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fingerprint is mandatory.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestResult("8", "8", "8", "8", (-15L), "8", false, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The duration cannot be negative.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Context context0 = new Context();
      Probe probe0 = new Probe();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, "[", "[", "", "", linkedList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Context context0 = new Context();
      Probe probe0 = new Probe();
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, "io.proedock.client.common.modZl.v1.Probe", "io.proedock.client.common.modZl.v1.Probe", (String) null, "io.proedock.client.common.modZl.v1.Probe", linkedList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      Probe probe0 = ModelFactory.createProbe("", "");
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, "", "No message available.", "", "No message available.", linkedList0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The project ID must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Context context0 = new Context();
      Probe probe0 = new Probe();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, (String) null, "os.version", (String) null, "os.version", linkedList0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The project ID must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      Probe probe0 = new Probe();
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, "", "", "", "", linkedList0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The project version must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Context context0 = new Context();
      Probe probe0 = new Probe();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, probe0, (String) null, (String) null, (String) null, (String) null, linkedList0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The project version must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = new Context();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, context0, (Probe) null, "memory.free", "memory.free", "memory.free", "memory.free", (List<TestReport>) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probe info must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Probe probe0 = ModelFactory.createProbe("5'v8", "5'v8");
      Boolean boolean0 = Boolean.valueOf("gA#}0#D{=}");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      TestResult testResult0 = ModelFactory.createTestResult("", "scm.remote.ahead", "5'v8", "gA#}0#D{=}", 0L, "gA#}0#D{=}", false, boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0, (Map<String, String>) null);
      Map<String, String> map0 = testResult0.getData();
      LinkedList<TestReport> linkedList0 = new LinkedList<TestReport>();
      // Undeclared exception!
      try { 
        ModelFactory.createTestRun((Configuration) null, (Context) null, probe0, "", "", "`GNbqU@2@H", "gA#}0#D{=}", linkedList0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Execution context must be present.
         //
         verifyException("io.probedock.client.common.model.v1.ModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = new Context();
      ModelFactory.enrichContext(context0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestReport testReport0 = ModelFactory.createTestReport("O,%n}usW");
      assertEquals("O,%n}usW", testReport0.getUid());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModelFactory modelFactory0 = new ModelFactory();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ModelFactory.createFingerprint(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.FingerprintGenerator", e);
      }
  }
}
