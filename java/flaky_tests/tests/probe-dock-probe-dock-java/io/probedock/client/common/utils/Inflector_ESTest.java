/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:40:26 GMT 2022
 */

package io.probedock.client.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.annotations.ProbeTest;
import io.probedock.client.common.utils.Inflector;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Inflector_ESTest extends Inflector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = Inflector.getHumanName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(probeTest0).name();
      String string0 = Inflector.forgeName(class0, "WO<im7D)", probeTest0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Inflector.getHumanName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.Inflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Inflector.forgeName((Class) null, "\"0o", (ProbeTest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.Inflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = Inflector.getHumanName("Z+XT`2i#G34Iy<}");
      assertEquals("Z+ x t` 2 i#g  34 iy<}", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(probeTest0).name();
      String string0 = Inflector.forgeName(class0, "Xk9KkT", probeTest0);
      assertEquals("Object:  xk 9 kkt", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn("Object: ", "").when(probeTest0).name();
      String string0 = Inflector.forgeName(class0, "", probeTest0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Inflector.forgeName(class0, (Method) null, probeTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.Inflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        Inflector.getHumanName((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.Inflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Inflector inflector0 = new Inflector();
  }
}
