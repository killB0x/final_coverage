/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:41:46 GMT 2022
 */

package io.probedock.client.common.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.common.config.ProxyConfiguration;
import io.probedock.client.common.config.ServerConfiguration;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerConfiguration_ESTest extends ServerConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("projectApiId");
      Object object0 = new Object();
      hashMap0.put("projectApiId", object0);
      serverConfiguration0.configureWith(hashMap0);
      String string0 = serverConfiguration0.getProjectApiId();
      assertFalse(serverConfiguration0.isValid());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration((String) null);
      String string0 = serverConfiguration0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("");
      String string0 = serverConfiguration0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("apiUrl", object0);
      serverConfiguration0.configureWith(hashMap0);
      serverConfiguration0.getBaseUrlFootprint();
      assertFalse(serverConfiguration0.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("apiUrl", object0);
      serverConfiguration0.configureWith(hashMap0);
      String string0 = serverConfiguration0.getApiUrl();
      assertFalse(serverConfiguration0.isValid());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("apiToken", object0);
      serverConfiguration0.configureWith(hashMap0);
      String string0 = serverConfiguration0.getApiToken();
      assertNotNull(string0);
      assertFalse(serverConfiguration0.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("Unable to parse the proxy configuration for server: ");
      // Undeclared exception!
      try { 
        serverConfiguration0.configureWith((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.config.ServerConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      String string0 = serverConfiguration0.toString();
      assertEquals("name: \"4Gt\", apiUrl: \"null\", apiToken: \"null\", projectApiId: \"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      boolean boolean0 = serverConfiguration0.hasProxyConfiguration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("apiToken", object0);
      hashMap0.put("apiUrl", object0);
      serverConfiguration0.configureWith(hashMap0);
      boolean boolean0 = serverConfiguration0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("apiUrl", object0);
      serverConfiguration0.configureWith(hashMap0);
      boolean boolean0 = serverConfiguration0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration((String) null);
      boolean boolean0 = serverConfiguration0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("proxy");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object0 = hashMap0.compute("proxy", biFunction0);
      hashMap0.put("proxy", object0);
      // Undeclared exception!
      try { 
        serverConfiguration0.configureWith(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse the proxy configuration for server: proxy
         //
         verifyException("io.probedock.client.common.config.ServerConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("proxy");
      hashMap0.put("proxy", hashMap0);
      // Undeclared exception!
      try { 
        serverConfiguration0.configureWith(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The port[null] is not an integer.
         //
         verifyException("io.probedock.client.common.config.ProxyConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      String string0 = serverConfiguration0.getName();
      assertEquals("4Gt", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      ProxyConfiguration proxyConfiguration0 = serverConfiguration0.getProxyConfiguration();
      assertNull(proxyConfiguration0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      // Undeclared exception!
      try { 
        serverConfiguration0.getBaseUrlFootprint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.utils.FingerprintGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration((String) null);
      String string0 = serverConfiguration0.getApiUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration("4Gt");
      String string0 = serverConfiguration0.getApiToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration((String) null);
      String string0 = serverConfiguration0.getProjectApiId();
      assertNull(string0);
  }
}
