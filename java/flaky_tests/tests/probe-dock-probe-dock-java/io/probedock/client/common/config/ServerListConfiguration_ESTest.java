/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:49:37 GMT 2022
 */

package io.probedock.client.common.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.common.config.ServerConfiguration;
import io.probedock.client.common.config.ServerListConfiguration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerListConfiguration_ESTest extends ServerListConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      serverListConfiguration0.configureServer("", hashMap0);
      ServerConfiguration serverConfiguration0 = serverListConfiguration0.get("");
      assertEquals("", serverConfiguration0.getName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      // Undeclared exception!
      try { 
        serverListConfiguration0.configureServer((String) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.common.config.ServerConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("proxy", "proxy");
      // Undeclared exception!
      try { 
        serverListConfiguration0.configureServer("b", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse the proxy configuration for server: b
         //
         verifyException("io.probedock.client.common.config.ServerConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      serverListConfiguration0.configureServer("~8Nc1q&1", hashMap0);
      String string0 = serverListConfiguration0.toString();
      assertEquals("Server list:\n- name: \"~8Nc1q&1\", apiUrl: \"null\", apiToken: \"null\", projectApiId: \"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      boolean boolean0 = serverListConfiguration0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      assertTrue(serverListConfiguration0.isEmpty());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      serverListConfiguration0.configureServer("~8Nc1q&1", hashMap0);
      boolean boolean0 = serverListConfiguration0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      serverListConfiguration0.configureServer("~8Nc1q&1", hashMap0);
      serverListConfiguration0.configureServer("~8Nc1q&1", hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      Set<String> set0 = serverListConfiguration0.getServerNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ServerListConfiguration serverListConfiguration0 = new ServerListConfiguration();
      ServerConfiguration serverConfiguration0 = serverListConfiguration0.get("");
      assertNull(serverConfiguration0);
  }
}
