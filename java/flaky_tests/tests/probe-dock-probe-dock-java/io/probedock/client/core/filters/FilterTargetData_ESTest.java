/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 04:38:45 GMT 2022
 */

package io.probedock.client.core.filters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.probedock.client.annotations.ProbeTest;
import io.probedock.client.annotations.ProbeTestClass;
import io.probedock.client.core.filters.FilterTargetData;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilterTargetData_ESTest extends FilterTargetData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("l", "l", "l", "l", "l", "l");
      boolean boolean0 = filterTargetData0.ticketMatch("l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", "");
      boolean boolean0 = filterTargetData0.ticketMatch("XsjP+?[XK3>UW,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("o", "o", "o", "o", "o", "o");
      boolean boolean0 = filterTargetData0.tagMatch("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData(", tickets: ", ", tickets: ", ", tickets: ", ", tickets: ", ", tickets: ", "!1Z'aH[)H. pG");
      filterTargetData0.tagMatch("key: !1Z'aH[)H. pG, name: , tickets: , technicalName: , tickets: , fingerprint: , tickets: , tags: , tickets: , tickets: , tickets: ");
      assertEquals("!1Z'aH[)H. pG", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("g", "g", "g", "g", "g", "g");
      boolean boolean0 = filterTargetData0.nameMatch("g");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "@&@QLP@m9\u0007", "70oO]ZRwJ ");
      boolean boolean0 = filterTargetData0.nameMatch("LW.\"GlRh+S");
      assertEquals("70oO]ZRwJ ", filterTargetData0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", ")>A");
      filterTargetData0.keyMatch("");
      assertEquals(")>A", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("W]d`\":X7]{DS?Th)", "", "", ", fingerprint: ", "W]d`\":X7]{DS?Th)", "*~8{d{o31");
      filterTargetData0.keyMatch("hgfri|'");
      assertEquals("*~8{d{o31", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", (String) null, "", "6zR", (String) null);
      String string0 = filterTargetData0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", ")>A");
      String string0 = filterTargetData0.getKey();
      assertEquals(")>A", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("o", "o", "o", "o", "o", "o");
      boolean boolean0 = filterTargetData0.fingerpringMatch("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", "");
      boolean boolean0 = filterTargetData0.fingerpringMatch(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.ticketMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.tagMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.nameMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.keyMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.fingerpringMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        filterTargetData0.anyMatch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ProbeTestClass probeTestClass0 = mock(ProbeTestClass.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(probeTestClass0).tags();
      FilterTargetData filterTargetData0 = null;
      try {
        filterTargetData0 = new FilterTargetData("v19f'9W\"8ae+C&F<c", (Method) null, (ProbeTest) null, probeTestClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ProbeTest probeTest0 = mock(ProbeTest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(probeTest0).tags();
      doReturn((String[]) null).when(probeTest0).tickets();
      FilterTargetData filterTargetData0 = null;
      try {
        filterTargetData0 = new FilterTargetData((String) null, (Method) null, probeTest0, (ProbeTestClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FilterTargetData filterTargetData0 = null;
      try {
        filterTargetData0 = new FilterTargetData("m>j", (Method) null, (ProbeTest) null, (ProbeTestClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "[\"Uo'?*zXo", "", "[\"Uo'?*zXo", "");
      boolean boolean0 = filterTargetData0.anyMatch("[\"Uo'?*zXo");
      assertEquals("", filterTargetData0.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", "");
      boolean boolean0 = filterTargetData0.anyMatch("key: , name: , technicalName: , fingerprint: , tags: , tickets: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("a", "a", "{5]OK?", "a", "a", "a");
      boolean boolean0 = filterTargetData0.anyMatch("{5]OK?");
      assertTrue(boolean0);
      assertEquals("a", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("%:9g|umd:iWj>_Ibg", ".", "Mc2t%", "H;T+c0f6GF]hb2-2Gt", "R\"", "R\"");
      boolean boolean0 = filterTargetData0.anyMatch(".");
      assertEquals("R\"", filterTargetData0.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("j*giN", "j*giN", "Z", "Z", "j*giN", "j*giN");
      boolean boolean0 = filterTargetData0.anyMatch("Z");
      assertTrue(boolean0);
      assertEquals("j*giN", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("Ot@mxQR]E,e#yJK6{", "Ot@mxQR]E,e#yJK6{", "Ot@mxQR]E,e#yJK6{", "Ot@mxQR]E,e#yJK6{", "1", "1");
      boolean boolean0 = filterTargetData0.anyMatch("Ot@mxQR]E,e#yJK6{");
      assertTrue(boolean0);
      assertEquals("1", filterTargetData0.getKey());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("p3S]:`}%tJp", "p3S]:`}%tJp", "p3S]:`}%tJp", "p3S]:`}%tJp", "p3S]:`}%tJp", "p3S]:`}%tJp");
      boolean boolean0 = filterTargetData0.anyMatch("p3S]:`}%tJp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FilterTargetData filterTargetData0 = null;
      try {
        filterTargetData0 = new FilterTargetData(" `7CM#^ !H;8sJ", (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.probedock.client.core.filters.FilterTargetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("%:9g|umd:iWj>_Ibg", ".", "Mc2t%", "H;T+c0f6GF]hb2-2Gt", "R\"", "R\"");
      String string0 = filterTargetData0.toString();
      assertEquals("key: R\", name: R\", technicalName: H;T+c0f6GF]hb2-2Gt, fingerprint: %:9g|umd:iWj>_Ibg, tags: ., tickets: Mc2t%", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FilterTargetData filterTargetData0 = new FilterTargetData("", "", "", "", "", "");
      String string0 = filterTargetData0.getKey();
      assertEquals("", string0);
  }
}
