/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 18:35:41 GMT 2022
 */

package javatools.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.CharBuffer;
import java.util.LinkedList;
import java.util.List;
import javatools.parsers.Char;
import javatools.parsers.PositionTracker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Char_ESTest extends Char_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Char.encodeURIPathComponentXML("kkHrJ{2\"wmDH4t ");
      assertEquals("kkHrJ%7B2%22wmDH4t%20", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Char.encodeURIPathComponentXML("\u00C2\u0080");
      assertEquals("%C3%82%C2%80", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Char.encodePercentage('\u0010');
      assertEquals("%10", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Char.encodeAmpersandToAlphanumeric("&-g A9|J");
      assertEquals("&#38;&#45;g&#32;A9&#124;J", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Char.toHTML("&s UTF8: ");
      assertEquals("&amp;s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII("\u00E0\u00BB\u0080");
      assertEquals("\\u00e0\\u00bb\\u0080", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII("&s UTF8: ");
      assertEquals("&s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Char.encodeBackslash('\u0000');
      assertEquals("\\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Char.encodeUTF8(2047);
      assertEquals("\u00DF\u00BF", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Char.encodeUTF8("iN\";!v:");
      assertEquals("iN\";!v:", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      Char.Legal char_Legal0 = mock(Char.Legal.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(char_Legal0).isLegal(anyChar());
      // Undeclared exception!
      Char.encodeBackslash((CharSequence) charBuffer0, char_Legal0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Char.decodeUTF8("\u00C4\u00A8");
      assertEquals("\u0128", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Char.normalize(229);
      assertEquals("a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Char.normalize((-622));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Char.decode("( i}9~Y 8I-U");
      assertEquals("( i}9~Y 8I-U", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[19];
      char char0 = Char.eatBackslash("\n", intArray0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Char.decode("&z");
      assertEquals("&z", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Char.decodeBackslash("&quot;");
      assertEquals("&quot;", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("5&#91;p&#92;aZ");
      assertEquals("5[p\\aZ", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharSequence charSequence0 = Char.truncate("%3E", 0);
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Char.toHTML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Char.normalize("b");
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Char.normalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = Char.isUnreserved('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = Char.isUnreserved('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = Char.isSubDelim('$');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = Char.isSubDelim('N');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = Char.isPchar('X');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = Char.isPchar(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = Char.isGenDelim('?');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Char.isEscaped("T`|,{_O;E!6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Char.isAlphanumeric('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Char.isAlphanumeric('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Char.in('y', "y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Char.in('q', "S#2t 0_!#X{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Char.in('W', 'W', 'W');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Char.in('4', 'B', '4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Char.hexAll("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Char.encodeUTF8("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Char.encodeURIPathComponentXML("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Char.encodeURIPathComponent("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Char.encodePercentage("Etj<TcAMO+");
      assertEquals("Etj%3CT%7FcAMO%7F%2B", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Char.encodePercentage("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Char.encodeBackslashToAlphanumeric("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Char.encodeBackslashToAlphanumeric('q');
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Char.encodeBackslash("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Char.encodeBackslash('@');
      assertEquals("\\u0040", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Char.encodeAmpersandToAlphanumeric("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Char.encodeAmpersand("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Char.encodeAmpersand('\u0003');
      assertEquals("&#3;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[6];
      char char0 = Char.eatUtf8("0B&rOT`%y", intArray0);
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[5];
      char char0 = Char.eatUtf8("kzu{", intArray0);
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[4];
      char char0 = Char.eatPercentage("3M.%Q3uZ'r", intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[5];
      char char0 = Char.eatPercentage("%fbn!", intArray0);
      assertEquals('\u00FB', char0);
      assertArrayEquals(new int[] {3, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[4];
      char char0 = Char.eatAmpersand("0ZXd", intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[6];
      char char0 = Char.eatAmpersand("&TAu", intArray0);
      assertEquals('\u03C4', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Char.decodeUTF8("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Char.decodeURIPathComponent("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Char.decodePercentage("A*sr!rC}Ov%+Q");
      assertEquals("A*sr!rC}Ov%+Q", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Char.decodePercentage("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Char.decodeBackslash("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand("", positionTracker0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Char.decodeAmpersand("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Char.decode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)Char.truncate("a", 102);
      Char.cutLast(stringBuilder0);
      assertEquals("a                                                                                                    ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Char.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = Char.Utf8Length('6');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = Char.Utf8Length('\u0083');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      Char.truncate("??", 64258);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.truncate("5[paZ", (-449));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.truncate((CharSequence) null, 438);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "![6?Vpe% +.&Hq_s");
      // Undeclared exception!
      try { 
        Char.truncate(charBuffer0, (-6254807));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.toHTML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.normalize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.last((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.isEscaped((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.in('S', (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.hexAll((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.endsWith("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeURIPathComponentXML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeURIPathComponent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodePercentage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeHex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeBackslashToAlphanumeric((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeBackslashToASCII((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeBackslash((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeBackslash((CharSequence) "'2\u0000.zf8xv!D1P}b*}", (Char.Legal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeAmpersandToAlphanumeric((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.encodeAmpersand((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.eatUtf8("Tw,!$hBLE}D$%D", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Char.eatUtf8("javatools.datatypes.FinalMap", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.eatPercentage("')o|M}:dfVdK$w~<", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Char.eatPercentage("jUJ,n.JM5:3+N\"p'", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.eatBackslash("]hU$W3FVPKSZmL=", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Char.eatBackslash(" GWL~)AI", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      // Undeclared exception!
      try { 
        Char.eatAmpersand((List<Character>) linkedList0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        Char.eatAmpersand((List<Character>) linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Char.eatAmpersand((List<Character>) linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.eatAmpersand("')o|M}:dfVdK$w~<", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Char.eatAmpersand("EUR", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decodeUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decodeURIPathComponent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decodePercentage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decodeAndNormalize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decodeAmpersand("", (PositionTracker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.cutLast((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.cutLast((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Char.capitalize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII("\\u0000");
      assertEquals("\\u005cu0000", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("%28TM%29");
      assertEquals("(TM)", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Char.decodeBackslash("\\\u0000.zf8xv!D1P}b*}");
      assertEquals("\\\u0000.zf8xv!D1P}b*}", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Char.endsWith("A51[mI", "N&)r78");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Char.endsWith("b", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Char.endsWith("a", "c{Em{vkgi#=L`4K`t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Char.capitalize("\f\u0001(x&gt;TAu");
      assertEquals("\f\u0001(X&Gt;Tau", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharSequence charSequence0 = Char.truncate("Z", 1);
      assertEquals("Z", charSequence0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Char.lowCaseFirst("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Char.lowCaseFirst("Duplicate key in FinalMap: ");
      assertEquals("duplicate key in FinalMap: ", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Char.lowCaseFirst((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Char.upCaseFirst("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Char.upCaseFirst("{=[x5Z\"JrC*@maR\"");
      assertEquals("{=[x5Z\"JrC*@maR\"", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Char.upCaseFirst((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Char.encodeHex("javatools.datatypes.FinalMap");
      assertEquals("javatools2Edatatypes2EFinalMap", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Char.encodeHex("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Char.hexAll("javatools.datatypes.FinalMap");
      assertEquals("6A 61 76 61 74 6F 6F 6C 73 2E 64 61 74 61 74 79 70 65 73 2E 46 69 6E 61 6C 4D 61 70 ", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Char.cutLast("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Char.cutLast("~nC+~WmO&NRHv");
      assertEquals("~nC+~WmO&NRH", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char char0 = Char.last("");
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char char0 = Char.last("Dc@lv#*&M`La6.v");
      assertEquals('v', char0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Char.encodeURIPathComponentXML("dRU(V\"");
      assertEquals("d%7FRU(V%22", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Char.encodeURIPathComponentXML("&Go(;");
      assertEquals("%26Go(%3B", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Char.encodeURIPathComponent("{=[x5Z\"JrC*@maR\"");
      assertEquals("%7B=%5Bx5Z%22JrC*@maR%22", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Char.isReserved('?');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Char.isReserved('e');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Char.isReserved(')');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute("&");
      assertEquals("&amp;", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute("cly'g|w,,g!N8n");
      assertEquals("cly&apos;g|w,,g!N8n", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute("ZA !_v>vAm6It\"+6sl");
      assertEquals("ZA !_v&gt;vAm6It&quot;+6sl", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute("svk<X9j2 a[h:");
      assertEquals("svk&lt;X9j2 a[h:", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Char.encodeXmlAttribute((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Char.encodeURIPathComponent('\uFFFF');
      assertEquals("%EF%BF%BF", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = Char.encodeURIPathComponent('\u0000');
      assertEquals("%00", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Char.encodeAmpersandToAlphanumeric('_');
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Char.encodeAmpersand("\tth$\\tsqotSl_q");
      assertEquals("&#9;th$\\tsqotSl_q", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Char.toHTML("\u00E0\u00BB\u0080");
      assertEquals("&#224;&#187;&#128;", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII('\"');
      assertEquals("\\u0022", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Char.encodeBackslashToASCII("\u000B");
      assertEquals("\\u000b", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Char.encodeBackslashToAlphanumeric("a`7t_?JC");
      assertEquals("a\\u00607t_\\u003fJC", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Char.encodeBackslash("4!O ");
      assertEquals("4\\u0021O ", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Char.encodeUTF8(2147483645);
      assertEquals("2147483645", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Char.encodeUTF8(8282);
      assertEquals("\u00E2\u0081\u009A", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SystemInUtil.addInputLine("B5tjp\".qR");
      String[] stringArray0 = new String[3];
      try { 
        Char.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException("org.evosuite.runtime.util.SystemInUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Char.decode("\\z");
      assertEquals("\\z", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("\ns\"/SE_q");
      assertEquals("\ns\"/SE_q", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Char.decode("\b\t\ts&quot;@SE_q");
      assertEquals("\b\t\ts\"@SE_q", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(",\"9Y0FT]F6cYSTc6je");
      Char.Legal char_Legal0 = mock(Char.Legal.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(char_Legal0).isLegal(anyChar());
      String string0 = Char.encodeBackslash((CharSequence) stringBuilder0, char_Legal0);
      assertEquals("\\u002c\\u0022\\u0039\\u0059\\u0030\\u0046\\u0054\\u005d\\u0046\\u0036\\u0063\\u0059\\u0053\\u0054\\u0063\\u0036\\u006a\\u0065", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Char.Legal char_Legal0 = mock(Char.Legal.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, true, true).when(char_Legal0).isLegal(anyChar());
      String string0 = Char.encodeBackslash((CharSequence) "%28TM%29", char_Legal0);
      assertEquals("\\u00252\\u0038TM%29", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Char.encodeBackslash((CharSequence) "", (Char.Legal) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Char.decodeBackslash((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Char.decodeAmpersand("a");
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Char.decodeAmpersand((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand("&s UTF8: ", positionTracker0);
      assertEquals("&s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand("\b\t\ts&quot;@SE_q", positionTracker0);
      assertEquals("\b\t\ts\"@SE_q", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand("b&}(f5S!-G; ", positionTracker0);
      assertEquals("b&}(f5S!-G; ", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand("&_", positionTracker0);
      assertEquals("&_", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PositionTracker positionTracker0 = new PositionTracker();
      String string0 = Char.decodeAmpersand((String) null, positionTracker0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("&#yXe{");
      assertEquals("#yXe{", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("\b\t\ts&quot;@SE_q");
      assertEquals("\b\t\ts\"@SE_q", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("&s UTF8: ");
      assertEquals("&s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("b&}(f5S!-G; ");
      assertEquals("b&}(f5S!-G; ", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN("Dc@lv#*&M`La6.v");
      assertEquals("Dc@lv#*&M`La6.v", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Char.decodeAmpersand_UNKNOWN((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Char.decodeURIPathComponent("%ded: ");
      assertEquals("\u00DEd: ", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "\\ut\\T\u0080";
      String string1 = Char.decodeAndNormalize(string0);
      assertEquals("\\ut\\T\u0080", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Char.decodeUTF8("\uFFF5");
      assertEquals("\uFFF5", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[1];
      char char0 = Char.eatUtf8("", intArray0);
      assertEquals('\u0000', char0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Char.decode("&#yXe{");
      assertEquals("&#yXe{", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("&#x");
      assertEquals("&#x", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("#&");
      assertEquals("#&", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("&s UTF8: ");
      assertEquals("&s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Char.decodeAmpersand("&TAu");
      assertEquals("\u03C4", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Char.decodeAmpersand("&#ynX3{");
      assertEquals("&#ynX3{", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = Char.decodeAmpersand(";*S!'TW[1OW&");
      assertEquals(";*S!'TW[1OW&", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Char.decodeAmpersand("&&gt;");
      assertEquals("&>", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Char.decodeAmpersand("&s UTF8: ");
      assertEquals("&s UTF8: ", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      int[] intArray0 = new int[8];
      Character character0 = Character.valueOf('d');
      linkedList0.add(character0);
      char char0 = Char.eatAmpersand((List<Character>) linkedList0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Char.decode("&T%C2%80");
      assertEquals("&T\u0080", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Char.decode("492i}r2|kSdUU~fB^%");
      assertEquals("492i}r2|kSdUU~fB^%", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Char.normalize(8969);
      assertEquals("[?]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Char.normalize(8254);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Char.normalize(8238);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Char.normalize(8220);
      assertNotNull(string0);
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Char.normalize(8218);
      assertNotNull(string0);
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Char.normalize(8213);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Char.normalize(8207);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Char.normalize(8202);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Char.normalize(382);
      assertEquals("z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Char.normalize(379);
      assertNotNull(string0);
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Char.normalize(374);
      assertNotNull(string0);
      assertEquals("Y", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("_FxWRB4%fFo0c&/%O1");
      assertEquals("_FxWRB4yo0c&/%O1", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Char.normalize(359);
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Char.normalize(354);
      assertNotNull(string0);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Char.normalize(350);
      assertEquals("S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Char.normalize(353);
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Char.normalize(345);
      assertEquals("r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Char.normalize(344);
      assertNotNull(string0);
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Char.normalize(336);
      assertNotNull(string0);
      assertEquals("Oe", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Char.normalize(339);
      assertNotNull(string0);
      assertEquals("oe", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Char.normalize(333);
      assertEquals("o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Char.normalize(332);
      assertNotNull(string0);
      assertEquals("O", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Char.normalize(323);
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Char.normalize(328);
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Char.normalize(313);
      assertEquals("L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Char.normalize(316);
      assertNotNull(string0);
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Char.normalize(311);
      assertEquals("k", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Char.normalize(310);
      assertNotNull(string0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Char.normalize(296);
      assertEquals("I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Char.normalize(299);
      assertNotNull(string0);
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Char.normalize(295);
      assertEquals("h", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Char.normalize(292);
      assertNotNull(string0);
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Char.normalize(289);
      assertEquals("g", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Char.normalize(284);
      assertEquals("G", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Char.normalize(277);
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Char.normalize(278);
      assertEquals("E", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Char.normalize(271);
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Char.normalize(272);
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Char.normalize(269);
      assertNotNull(string0);
      assertEquals("c", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Char.normalize(262);
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Char.normalize(258);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Char.normalize(261);
      assertEquals("a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Char.normalize(305);
      assertEquals("[?]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Char.normalize(210);
      assertEquals("O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Char.normalize(245);
      assertNotNull(string0);
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Char.normalize(207);
      assertEquals("I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Char.normalize(236);
      assertEquals("i", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Char.normalize(232);
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = Char.normalize(203);
      assertEquals("E", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Char.normalize(194);
      assertEquals("A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Char.normalize(224);
      assertEquals("a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Char.normalize(130);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Char.normalize(931);
      assertEquals("S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Char.normalize((-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        Char.cutLast(stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Char.decodeAndNormalize("\u00E2\u0081\u009A");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = Char.isGenDelim('W');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Char char0 = new Char();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        Char.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javatools.parsers.Char", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = Char.isEscaped("%26");
      assertTrue(boolean0);
  }
}
