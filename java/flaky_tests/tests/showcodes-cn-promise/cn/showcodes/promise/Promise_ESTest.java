/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:40:53 GMT 2022
 */

package cn.showcodes.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.showcodes.promise.DefaultPromise;
import cn.showcodes.promise.Promise;
import cn.showcodes.promise.PromiseStatus;
import java.lang.reflect.Array;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Promise_ESTest extends Promise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Promise> supplier0 = (Supplier<Promise>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Promise promise0 = Promise.retry(supplier0, 0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Promise promise0 = Promise.timeout(2637L);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPromise<Promise<Integer, Integer>, Promise<Integer, Integer>> defaultPromise0 = new DefaultPromise<Promise<Integer, Integer>, Promise<Integer, Integer>>();
      Supplier<Promise> supplier0 = (Supplier<Promise>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPromise0).when(supplier0).get();
      Promise promise0 = Promise.retry(supplier0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      DefaultPromise<Object, Integer> defaultPromise0 = new DefaultPromise<Object, Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      AtomicReference<PromiseStatus> atomicReference0 = new AtomicReference<PromiseStatus>();
      defaultPromise0.status = atomicReference0;
      // Undeclared exception!
      try { 
        defaultPromise0.then(consumer0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.retry((Supplier<Promise>) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Consumer<Integer>, Consumer<Promise<Integer, Integer>>> biConsumer0 = (BiConsumer<Consumer<Integer>, Consumer<Promise<Integer, Integer>>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Promise<Integer, Promise<Integer, Integer>> promise0 = Promise.create(biConsumer0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Promise<Integer, Integer>> consumer1 = (Consumer<Promise<Integer, Integer>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise promise1 = promise0.then(consumer0, consumer1);
      assertNotNull(promise1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.create((BiConsumer<Consumer<Integer>, Consumer<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Promise promise0 = Promise.retry((Supplier<Promise>) null, (-2801));
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Promise<Integer, Object>[] promiseArray0 = (Promise<Integer, Object>[]) Array.newInstance(Promise.class, 4);
      DefaultPromise<Integer, Object> defaultPromise0 = new DefaultPromise<Integer, Object>();
      promiseArray0[0] = (Promise<Integer, Object>) defaultPromise0;
      promiseArray0[1] = (Promise<Integer, Object>) defaultPromise0;
      promiseArray0[2] = promiseArray0[0];
      promiseArray0[3] = promiseArray0[2];
      Promise promise0 = Promise.race(promiseArray0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Promise<Object, Integer>[] promiseArray0 = (Promise<Object, Integer>[]) Array.newInstance(Promise.class, 5);
      Integer integer0 = new Integer((-2147483638));
      Promise<Object, Integer> promise0 = Promise.reject(integer0);
      promiseArray0[0] = promise0;
      // Undeclared exception!
      try { 
        Promise.allSettled(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPromise<Integer, Integer> defaultPromise0 = new DefaultPromise<Integer, Integer>();
      Integer integer0 = new Integer(1);
      defaultPromise0.$resolve(integer0);
      Promise<Integer, Integer>[] promiseArray0 = (Promise<Integer, Integer>[]) Array.newInstance(Promise.class, 1);
      promiseArray0[0] = (Promise<Integer, Integer>) defaultPromise0;
      Promise promise0 = Promise.allSettled(promiseArray0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPromise<Integer, Integer> defaultPromise0 = new DefaultPromise<Integer, Integer>();
      Integer integer0 = new Integer(1);
      defaultPromise0.$resolve(integer0);
      Promise<Integer, Integer>[] promiseArray0 = (Promise<Integer, Integer>[]) Array.newInstance(Promise.class, 16);
      promiseArray0[0] = (Promise<Integer, Integer>) defaultPromise0;
      // Undeclared exception!
      try { 
        Promise.allSettled(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-467));
      Promise<Object, Integer> promise0 = Promise.reject(integer0);
      Promise<Object, Integer>[] promiseArray0 = (Promise<Object, Integer>[]) Array.newInstance(Promise.class, 1);
      promiseArray0[0] = promise0;
      Promise promise1 = Promise.allSettled(promiseArray0);
      assertNotNull(promise1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BiConsumer<Consumer<Integer>, Consumer<Integer>> biConsumer0 = (BiConsumer<Consumer<Integer>, Consumer<Integer>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<Integer, Integer> defaultPromise0 = new DefaultPromise<Integer, Integer>(biConsumer0);
      Promise<Integer, Integer>[] promiseArray0 = (Promise<Integer, Integer>[]) Array.newInstance(Promise.class, 6);
      promiseArray0[0] = (Promise<Integer, Integer>) defaultPromise0;
      promiseArray0[1] = (Promise<Integer, Integer>) defaultPromise0;
      promiseArray0[2] = (Promise<Integer, Integer>) defaultPromise0;
      promiseArray0[3] = (Promise<Integer, Integer>) defaultPromise0;
      promiseArray0[4] = (Promise<Integer, Integer>) defaultPromise0;
      promiseArray0[5] = (Promise<Integer, Integer>) defaultPromise0;
      Integer integer0 = new Integer(6);
      defaultPromise0.$resolve(integer0);
      Promise promise0 = Promise.all(promiseArray0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPromise<Integer, Integer> defaultPromise0 = new DefaultPromise<Integer, Integer>();
      Integer integer0 = new Integer(1);
      defaultPromise0.$resolve(integer0);
      Promise<Integer, Integer>[] promiseArray0 = (Promise<Integer, Integer>[]) Array.newInstance(Promise.class, 2);
      promiseArray0[0] = (Promise<Integer, Integer>) defaultPromise0;
      // Undeclared exception!
      try { 
        Promise.all(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Promise<Object, Integer>[] promiseArray0 = (Promise<Object, Integer>[]) Array.newInstance(Promise.class, 5);
      Integer integer0 = new Integer(2147483638);
      Promise<Object, Integer> promise0 = Promise.reject(integer0);
      promiseArray0[0] = promise0;
      // Undeclared exception!
      try { 
        Promise.any(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPromise<Integer, Integer> defaultPromise0 = new DefaultPromise<Integer, Integer>();
      Promise promise0 = defaultPromise0.then((Consumer<Integer>) null, (Consumer<Integer>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPromise<Promise<Object, Object>, Object> defaultPromise0 = new DefaultPromise<Promise<Object, Object>, Object>();
      Promise<Integer, Object> promise0 = defaultPromise0.then((Function<Promise<Object, Object>, Integer>) null, (Consumer<Object>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Promise<Integer, Promise<Object, Object>>[] promiseArray0 = (Promise<Integer, Promise<Object, Object>>[]) Array.newInstance(Promise.class, 8);
      DefaultPromise<Integer, Promise<Object, Object>> defaultPromise0 = new DefaultPromise<Integer, Promise<Object, Object>>();
      promiseArray0[0] = (Promise<Integer, Promise<Object, Object>>) defaultPromise0;
      Function<Integer, Integer> function0 = Function.identity();
      Consumer<Promise<Object, Object>> consumer0 = (Consumer<Promise<Object, Object>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Promise<Integer, Promise<Object, Object>> promise0 = promiseArray0[0].then(function0, consumer0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPromise<Integer, Promise<Object, Object>> defaultPromise0 = new DefaultPromise<Integer, Promise<Object, Object>>();
      UnaryOperator<Promise<Object, Object>> unaryOperator0 = UnaryOperator.identity();
      Promise<Integer, Promise<Object, Object>> promise0 = defaultPromise0.then((Consumer<Integer>) null, (Function<Promise<Object, Object>, Promise<Object, Object>>) unaryOperator0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Promise promise0 = Promise.resolve((Integer) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.timeout((-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.allSettled((List<Promise>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.any((List<Promise>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.retry((Supplier<Promise>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-467));
      Promise<Object, Integer> promise0 = Promise.reject(integer0);
      Promise<Object, Integer>[] promiseArray0 = (Promise<Object, Integer>[]) Array.newInstance(Promise.class, 1);
      promiseArray0[0] = promise0;
      Promise promise1 = Promise.any(promiseArray0);
      assertNotNull(promise1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Promise.all((List<Promise>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Promise<Integer, Object>[] promiseArray0 = (Promise<Integer, Object>[]) Array.newInstance(Promise.class, 4);
      // Undeclared exception!
      try { 
        Promise.race(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }
}
