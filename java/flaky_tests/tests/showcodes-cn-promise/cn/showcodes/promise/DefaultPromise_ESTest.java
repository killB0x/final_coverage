/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:39:17 GMT 2022
 */

package cn.showcodes.promise;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cn.showcodes.promise.AbstractPromise;
import cn.showcodes.promise.DefaultPromise;
import cn.showcodes.promise.Promise;
import cn.showcodes.promise.PromiseStatus;
import java.lang.reflect.Array;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPromise_ESTest extends DefaultPromise_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> defaultPromise0 = new DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>(biConsumer0);
      BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>> biConsumer1 = (BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise1 = new DefaultPromise<PromiseStatus, PromiseStatus>(biConsumer1);
      Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>[] promiseArray0 = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>[]) Array.newInstance(Promise.class, 5);
      promiseArray0[0] = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>) defaultPromise0;
      promiseArray0[1] = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>) defaultPromise0;
      promiseArray0[2] = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>) defaultPromise0;
      promiseArray0[3] = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>) defaultPromise0;
      promiseArray0[4] = (Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>) defaultPromise0;
      Promise.any(promiseArray0);
      defaultPromise0.$reject(defaultPromise1);
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      Function<DefaultPromise<PromiseStatus, PromiseStatus>, DefaultPromise<PromiseStatus, PromiseStatus>> function0 = (Function<DefaultPromise<PromiseStatus, PromiseStatus>, DefaultPromise<PromiseStatus, PromiseStatus>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> promise0 = defaultPromise0.then((Function<PromiseStatus, PromiseStatus>) unaryOperator0, function0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> defaultPromise1 = new DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>(biConsumer0);
      PromiseStatus promiseStatus0 = PromiseStatus.fulfilled;
      defaultPromise1.result = promiseStatus0;
      defaultPromise1.$reject(defaultPromise0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>(biConsumer0);
      BiConsumer<Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>, Consumer<PromiseStatus>> biConsumer1 = (BiConsumer<Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<DefaultPromise<PromiseStatus, PromiseStatus>, PromiseStatus> defaultPromise1 = new DefaultPromise<DefaultPromise<PromiseStatus, PromiseStatus>, PromiseStatus>(biConsumer1);
      Consumer<DefaultPromise<PromiseStatus, PromiseStatus>> consumer0 = (Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      defaultPromise1.then(consumer0, (Function<PromiseStatus, PromiseStatus>) unaryOperator0);
      defaultPromise1.$resolve(defaultPromise0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> defaultPromise0 = new DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>();
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      AtomicReference<PromiseStatus> atomicReference0 = new AtomicReference<PromiseStatus>();
      defaultPromise0.status = atomicReference0;
      Function<DefaultPromise<PromiseStatus, PromiseStatus>, PromiseStatus> function0 = (Function<DefaultPromise<PromiseStatus, PromiseStatus>, PromiseStatus>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultPromise0.then((Function<PromiseStatus, PromiseStatus>) unaryOperator0, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      AtomicReference<PromiseStatus> atomicReference0 = new AtomicReference<PromiseStatus>();
      defaultPromise0.status = atomicReference0;
      // Undeclared exception!
      try { 
        defaultPromise0.andThen(defaultPromise0, defaultPromise0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>(biConsumer0);
      // Undeclared exception!
      try { 
        defaultPromise0.andThen((AbstractPromise) null, defaultPromise0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = null;
      try {
        defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>((BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      defaultPromise0.onThenResolve = (Function) unaryOperator0;
      PromiseStatus promiseStatus0 = PromiseStatus.fulfilled;
      // Undeclared exception!
      try { 
        defaultPromise0.$resolve(promiseStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      PromiseStatus promiseStatus0 = PromiseStatus.rejected;
      UnaryOperator<DefaultPromise<PromiseStatus, PromiseStatus>> unaryOperator0 = UnaryOperator.identity();
      defaultPromise0.onThenFail = (Function) unaryOperator0;
      // Undeclared exception!
      try { 
        defaultPromise0.$reject(promiseStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<DefaultPromise<PromiseStatus, PromiseStatus>>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> defaultPromise1 = new DefaultPromise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>>(biConsumer0);
      Consumer<PromiseStatus> consumer0 = (Consumer<PromiseStatus>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UnaryOperator<DefaultPromise<PromiseStatus, PromiseStatus>> unaryOperator0 = UnaryOperator.identity();
      defaultPromise1.$reject(defaultPromise0);
      Promise<PromiseStatus, DefaultPromise<PromiseStatus, PromiseStatus>> promise0 = defaultPromise1.then(consumer0, (Function<DefaultPromise<PromiseStatus, PromiseStatus>, DefaultPromise<PromiseStatus, PromiseStatus>>) unaryOperator0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      Promise<PromiseStatus, PromiseStatus>[] promiseArray0 = (Promise<PromiseStatus, PromiseStatus>[]) Array.newInstance(Promise.class, 4);
      PromiseStatus promiseStatus0 = PromiseStatus.fulfilled;
      defaultPromise0.$reject(promiseStatus0);
      promiseArray0[0] = (Promise<PromiseStatus, PromiseStatus>) defaultPromise0;
      // Undeclared exception!
      try { 
        Promise.allSettled(promiseArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.Promise", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      PromiseStatus promiseStatus0 = PromiseStatus.fulfilled;
      defaultPromise0.$resolve(promiseStatus0);
      Promise<PromiseStatus, PromiseStatus> promise0 = defaultPromise0.then((Function<PromiseStatus, PromiseStatus>) null, (Function<PromiseStatus, PromiseStatus>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      PromiseStatus promiseStatus0 = PromiseStatus.pending;
      defaultPromise0.$reject(promiseStatus0);
      Function<PromiseStatus, PromiseStatus> function0 = Function.identity();
      Promise<PromiseStatus, PromiseStatus> promise0 = defaultPromise0.then(function0, (Consumer<PromiseStatus>) null);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>(biConsumer0);
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      PromiseStatus promiseStatus0 = PromiseStatus.rejected;
      defaultPromise0.$resolve(promiseStatus0);
      Promise<PromiseStatus, PromiseStatus> promise0 = defaultPromise0.then((Function<PromiseStatus, PromiseStatus>) unaryOperator0, (Function<PromiseStatus, PromiseStatus>) unaryOperator0);
      assertNotNull(promise0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      PromiseStatus promiseStatus0 = PromiseStatus.rejected;
      defaultPromise0.$reject(promiseStatus0);
      defaultPromise0.andThen(defaultPromise0, defaultPromise0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>> biConsumer0 = (BiConsumer<Consumer<PromiseStatus>, Consumer<PromiseStatus>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>(biConsumer0);
      DefaultPromise<DefaultPromise<PromiseStatus, PromiseStatus>, DefaultPromise<PromiseStatus, PromiseStatus>> defaultPromise1 = new DefaultPromise<DefaultPromise<PromiseStatus, PromiseStatus>, DefaultPromise<PromiseStatus, PromiseStatus>>();
      UnaryOperator<PromiseStatus> unaryOperator0 = UnaryOperator.identity();
      defaultPromise1.onThenResolve = (Function) unaryOperator0;
      // Undeclared exception!
      try { 
        defaultPromise1.$resolve(defaultPromise0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cn.showcodes.promise.DefaultPromise", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPromise<PromiseStatus, PromiseStatus> defaultPromise0 = new DefaultPromise<PromiseStatus, PromiseStatus>();
      PromiseStatus promiseStatus0 = PromiseStatus.fulfilled;
      defaultPromise0.$resolve(promiseStatus0);
      defaultPromise0.andThen(defaultPromise0, defaultPromise0);
  }
}
