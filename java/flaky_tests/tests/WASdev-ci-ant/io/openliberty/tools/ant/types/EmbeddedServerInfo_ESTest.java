/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 13:08:04 GMT 2022
 */

package io.openliberty.tools.ant.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.openliberty.tools.ant.types.EmbeddedServerInfo;
import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmbeddedServerInfo_ESTest extends EmbeddedServerInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/home/user/io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", "");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo((String) null, mockFile0, mockFile0);
      Object object0 = EmbeddedServerInfo.EmbeddedServers.get(embeddedServerInfo0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers");
      File file0 = MockFile.createTempFile("g(0uWKq*W}N]D", "g(0uWKq*W}N]D", (File) mockFile0);
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("g(0uWKq*W}N]D", mockFile0, file0);
      EmbeddedServerInfo embeddedServerInfo1 = new EmbeddedServerInfo("g(0uWKq*W}N]D", file0, file0);
      boolean boolean0 = embeddedServerInfo0.equals(embeddedServerInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo((String) null, (File) null, (File) null);
      File file0 = embeddedServerInfo0.getUserDir();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/.OqeYu;w");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("", ".OqeYu;w");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", mockFile0, mockFile0);
      File file0 = embeddedServerInfo0.getUserDir();
      assertEquals(1L, file0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T(@");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("T(@", mockFile0, mockFile0);
      File file0 = embeddedServerInfo0.getUserDir();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", mockFile0, mockFile0);
      File file0 = embeddedServerInfo0.getUserDir();
      assertEquals("", file0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo((String) null, (File) null, (File) null);
      String string0 = embeddedServerInfo0.getServerName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", mockFile0, mockFile0);
      String string0 = embeddedServerInfo0.getServerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("Y3\":O{UW&mUWq-", (File) null, (File) null);
      File file0 = embeddedServerInfo0.getOutputDir();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers");
      File file0 = MockFile.createTempFile("g(0uWKq*W}N]D", "g(0uWKq*W}N]D", (File) mockFile0);
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", file0, mockFile0);
      File file1 = embeddedServerInfo0.getOutputDir();
      assertEquals("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", file1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", mockFile0, mockFile0);
      File file0 = embeddedServerInfo0.getOutputDir();
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/.OqeYu;w");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("", ".OqeYu;w");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", mockFile0, mockFile0);
      File file0 = embeddedServerInfo0.getOutputDir();
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo((String) null, (File) null, (File) null);
      // Undeclared exception!
      try { 
        embeddedServerInfo0.equals(embeddedServerInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers");
      URL uRL0 = mockFile0.toURL();
      URLClassLoader uRLClassLoader0 = EmbeddedServerInfo.EmbeddedServerClassLoaders.get(uRL0);
      assertNull(uRLClassLoader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLClassLoader uRLClassLoader0 = EmbeddedServerInfo.EmbeddedServerClassLoaders.get(uRL0);
      assertNull(uRLClassLoader0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("T(@", "T(@");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("T(@", mockFile0, mockFile0);
      EmbeddedServerInfo embeddedServerInfo1 = new EmbeddedServerInfo("T(@", mockFile0, (File) null);
      boolean boolean0 = embeddedServerInfo0.equals(embeddedServerInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", (File) null, (File) null);
      MockFile mockFile0 = new MockFile((File) null, "");
      EmbeddedServerInfo embeddedServerInfo1 = new EmbeddedServerInfo("", (File) null, mockFile0);
      boolean boolean0 = embeddedServerInfo0.equals(embeddedServerInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R^ri.<CQO(F|f");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("R^ri.<CQO(F|f", mockFile0, mockFile0);
      boolean boolean0 = embeddedServerInfo0.equals(embeddedServerInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", ".OqeYu;w");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", mockFile0, mockFile0);
      EmbeddedServerInfo embeddedServerInfo1 = new EmbeddedServerInfo("xd\"V~S]Y0a", mockFile0, mockFile0);
      boolean boolean0 = embeddedServerInfo0.equals(embeddedServerInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmbeddedServerInfo.EmbeddedServers embeddedServerInfo_EmbeddedServers0 = new EmbeddedServerInfo.EmbeddedServers();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("", (File) null, (File) null);
      EmbeddedServerInfo.EmbeddedServers.put(embeddedServerInfo0, "");
      assertEquals("", embeddedServerInfo0.getServerName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EmbeddedServerInfo.EmbeddedServerClassLoaders.put(uRL0, (URLClassLoader) null);
      assertNull(uRL0.getQuery());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmbeddedServerInfo.EmbeddedServerClassLoaders embeddedServerInfo_EmbeddedServerClassLoaders0 = new EmbeddedServerInfo.EmbeddedServerClassLoaders();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers");
      EmbeddedServerInfo embeddedServerInfo0 = new EmbeddedServerInfo("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", mockFile0, mockFile0);
      String string0 = embeddedServerInfo0.getServerName();
      assertEquals("io.openliberty.tools.ant.types.EmbeddedServerInfo$EmbeddedServers", string0);
  }
}
