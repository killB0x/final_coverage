/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 13:05:31 GMT 2022
 */

package io.openliberty.tools.ant.install;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.openliberty.tools.ant.install.Version;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Version_ESTest extends Version_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Version version0 = Version.parseVersion("4_x");
      Version version1 = Version.parseVersion("4_x");
      boolean boolean0 = version0.match(version1);
      assertTrue(boolean0);
      assertEquals(4, version1.getMajor());
      assertEquals("x", version1.getQualifier());
      assertEquals(0, version1.getMicro());
      assertEquals(0, version1.getMinor());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Version version0 = Version.parseVersion("1", true);
      Version version1 = Version.parseVersion("5");
      boolean boolean0 = version0.match(version1);
      assertEquals(0, version1.getMinor());
      assertEquals(0, version1.getMicro());
      assertFalse(boolean0);
      assertEquals(5, version1.getMajor());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      Version version1 = Version.parseVersion("0", false);
      boolean boolean0 = version0.equals(version1);
      assertFalse(version1.equals((Object)version0));
      assertEquals(0, version0.getMinor());
      assertEquals(0, version0.getMicro());
      assertEquals(3, version0.getMajor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Version version0 = Version.parseVersion("443.7.0", false);
      assertEquals(0, version0.getMicro());
      assertEquals(7, version0.getMinor());
      assertEquals(443, version0.getMajor());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      String string0 = version0.getQualifier();
      assertEquals(3, version0.getMajor());
      assertNull(string0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Version version0 = Version.parseVersion("4_");
      String string0 = version0.getQualifier();
      assertEquals(4, version0.getMajor());
      assertEquals("", string0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      int int0 = version0.getMajor();
      assertEquals(3, int0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Version version0 = Version.parseVersion("+", true);
      int int0 = version0.getMajor();
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      Version version1 = Version.parseVersion("0");
      int int0 = version1.compareTo(version0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version1.getMajor());
      assertEquals((-3), int0);
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Version.parseVersion("2+", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Version.parseVersion((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Version.parseVersion((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Version.parseVersion("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid version: 
         //
         verifyException("io.openliberty.tools.ant.install.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      // Undeclared exception!
      try { 
        version0.match((Version) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.openliberty.tools.ant.install.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = Version.parseVersion("3");
      Version version1 = Version.parseVersion("3");
      // Undeclared exception!
      try { 
        version1.equals(version0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.openliberty.tools.ant.install.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Version version0 = Version.parseVersion("3", false);
      Version version1 = Version.parseVersion("0");
      int int0 = version0.compareTo(version1);
      assertEquals(0, version1.getMajor());
      assertEquals(3, int0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Version version0 = Version.parseVersion("3", false);
      Version version1 = Version.parseVersion("3", false);
      // Undeclared exception!
      try { 
        version0.compareTo(version1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.openliberty.tools.ant.install.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Version version0 = Version.parseVersion("4_x");
      String string0 = version0.toString();
      assertEquals("4.0.0_x", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Version version0 = Version.parseVersion("+", true);
      String string0 = version0.toString();
      assertEquals(0, version0.getMicro());
      assertEquals("+", string0);
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Version version0 = Version.parseVersion("443.7");
      String string0 = version0.toString();
      assertEquals("443.7.0", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Version version0 = Version.parseVersion("043");
      Version version1 = Version.parseVersion("043_.");
      boolean boolean0 = version0.match(version1);
      assertEquals(0, version1.getMicro());
      assertEquals(0, version1.getMinor());
      assertEquals(".", version1.getQualifier());
      assertEquals(43, version1.getMajor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Version version0 = Version.parseVersion("0");
      Version version1 = Version.parseVersion("3");
      boolean boolean0 = version1.match(version0);
      assertEquals(3, version1.getMajor());
      assertFalse(boolean0);
      assertEquals(0, version1.getMinor());
      assertEquals(0, version1.getMicro());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Version version0 = Version.parseVersion("443.7");
      boolean boolean0 = version0.match(version0);
      assertEquals(443, version0.getMajor());
      assertEquals(7, version0.getMinor());
      assertEquals(0, version0.getMicro());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Version version0 = Version.parseVersion("0");
      int int0 = version0.compareTo(version0);
      assertEquals(0, version0.getMajor());
      assertEquals(0, version0.getMicro());
      assertEquals(0, int0);
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Version version0 = Version.parseVersion("2");
      Version version1 = Version.parseVersion("0", true);
      boolean boolean0 = version1.equals(version0);
      assertEquals(0, version0.getMinor());
      assertEquals(0, version0.getMicro());
      assertFalse(version0.equals((Object)version1));
      assertEquals(2, version0.getMajor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Version version0 = Version.parseVersion("4_");
      Object object0 = new Object();
      boolean boolean0 = version0.equals(object0);
      assertEquals(4, version0.getMajor());
      assertEquals(0, version0.getMinor());
      assertEquals("", version0.getQualifier());
      assertEquals(0, version0.getMicro());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Version version0 = Version.parseVersion("83");
      boolean boolean0 = version0.equals(version0);
      assertEquals(83, version0.getMajor());
      assertTrue(boolean0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Version version0 = Version.parseVersion("4_-");
      Version version1 = Version.parseVersion("4_-");
      boolean boolean0 = version1.equals(version0);
      assertEquals(4, version1.getMajor());
      assertEquals(0, version1.getMinor());
      assertTrue(boolean0);
      assertEquals("-", version1.getQualifier());
      assertEquals(0, version1.getMicro());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Version version0 = Version.parseVersion("+", true);
      boolean boolean0 = version0.match(version0);
      assertTrue(boolean0);
      assertEquals(0, version0.getMicro());
      assertEquals(0, version0.getMinor());
      assertEquals((-1), version0.getMajor());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Version.parseVersion("SnM\"xqQk$t|mCS2hm", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid version: SnM\"xqQk$t|mCS2hm
         //
         verifyException("io.openliberty.tools.ant.install.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Version version0 = Version.parseVersion("0", false);
      int int0 = version0.getMicro();
      assertEquals(0, version0.getMajor());
      assertEquals(0, version0.getMinor());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Version version0 = Version.parseVersion("3", false);
      int int0 = version0.getMinor();
      assertEquals(0, version0.getMicro());
      assertEquals(0, int0);
      assertEquals(3, version0.getMajor());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Version version0 = Version.parseVersion("0");
      int int0 = version0.getMajor();
      assertEquals(0, version0.getMinor());
      assertEquals(0, int0);
      assertEquals(0, version0.getMicro());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Version version0 = Version.parseVersion("4_x");
      String string0 = version0.getQualifier();
      assertEquals(4, version0.getMajor());
      assertEquals("x", string0);
      assertNotNull(string0);
      assertEquals(0, version0.getMinor());
      assertEquals(0, version0.getMicro());
  }
}
