/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:53:58 GMT 2022
 */

package io.vlingo.xoom.lattice.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.util.WeakQueue;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WeakQueue_ESTest extends WeakQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean[] booleanArray1 = weakQueue0.toArray(booleanArray0);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = weakQueue0.toArray(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      weakQueue0.offer(arrayList0);
      int int0 = weakQueue0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      WeakQueue<ArrayList<Boolean>> weakQueue1 = new WeakQueue<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      weakQueue1.offer(arrayList0);
      boolean boolean0 = weakQueue1.retainAll(weakQueue0);
      assertFalse(weakQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      boolean boolean0 = weakQueue0.retainAll(priorityQueue0);
      assertFalse(priorityQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      boolean boolean0 = weakQueue0.offer(arrayList0);
      ArrayList<Boolean> arrayList1 = weakQueue0.remove();
      assertFalse(arrayList1.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      weakQueue0.offer(arrayList0);
      ArrayList<Boolean> arrayList1 = weakQueue0.poll();
      assertSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      boolean boolean0 = weakQueue0.offer(arrayList0);
      ArrayList<Boolean> arrayList1 = weakQueue0.peek();
      assertFalse(arrayList1.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Iterator<Boolean> iterator0 = weakQueue0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      boolean boolean0 = weakQueue0.equals(arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      weakQueue0.add(arrayList0);
      ArrayList<Boolean> arrayList1 = weakQueue0.element();
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      LinkedList<ArrayList<Boolean>> linkedList0 = new LinkedList<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>(1);
      linkedList0.add(arrayList0);
      boolean boolean0 = weakQueue0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      boolean boolean0 = weakQueue0.addAll(weakQueue0);
      assertFalse(weakQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      weakQueue0.offer(arrayList0);
      Boolean[] booleanArray0 = new Boolean[10];
      // Undeclared exception!
      try { 
        weakQueue0.toArray(booleanArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // arraycopy: element type mismatch: can not cast one of the elements of java.lang.Object[] to the type of the destination array, java.lang.Boolean
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      weakQueue0.offer(arrayList0);
      // Undeclared exception!
      try { 
        weakQueue0.retainAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.ref.WeakReference cannot be cast to class java.lang.Comparable (java.lang.ref.WeakReference and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.valueOf(false);
      weakQueue0.offer(boolean0);
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.removeAll(treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.ref.WeakReference cannot be cast to class java.lang.Comparable (java.lang.ref.WeakReference and java.lang.Comparable are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      weakQueue0.offer(boolean0);
      // Undeclared exception!
      try { 
        weakQueue0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.util.WeakQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.offer((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null entries not allowed
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.add((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null entries not allowed
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      int int0 = weakQueue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      weakQueue0.add(boolean0);
      boolean boolean1 = weakQueue0.containsAll(weakQueue0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      weakQueue0.add(boolean0);
      Boolean boolean1 = Boolean.FALSE;
      weakQueue0.remove((Object) boolean1);
      assertTrue(weakQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      weakQueue0.add(boolean0);
      weakQueue0.remove((Object) boolean0);
      assertFalse(weakQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      Boolean boolean0 = Boolean.valueOf((String) null);
      weakQueue0.offer(boolean0);
      boolean boolean1 = weakQueue0.contains(arrayList0);
      assertTrue(weakQueue0.contains(boolean0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.valueOf("io.vlingo.xoom.lattice.util.WeakQueue$ExpungingIterator");
      boolean boolean1 = weakQueue0.add(boolean0);
      boolean boolean2 = weakQueue0.contains(boolean0);
      assertFalse(weakQueue0.contains(boolean1));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.valueOf("");
      weakQueue0.add(boolean0);
      boolean boolean1 = weakQueue0.isEmpty();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.valueOf((String) null);
      weakQueue0.offer(boolean0);
      Object[] objectArray0 = weakQueue0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.toArray((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      boolean boolean0 = weakQueue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      weakQueue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Object[] objectArray0 = weakQueue0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      // Undeclared exception!
      try { 
        weakQueue0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = weakQueue0.peek();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      boolean boolean0 = weakQueue0.equals(weakQueue0);
      assertFalse(weakQueue0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WeakQueue<ArrayList<Boolean>> weakQueue0 = new WeakQueue<ArrayList<Boolean>>();
      // Undeclared exception!
      try { 
        weakQueue0.addAll((Collection<? extends ArrayList<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.util.WeakQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = weakQueue0.poll();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      // Undeclared exception!
      try { 
        weakQueue0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      boolean boolean0 = weakQueue0.removeAll(treeSet0);
      assertFalse(treeSet0.contains(boolean0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      boolean boolean0 = weakQueue0.containsAll(weakQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      weakQueue0.clear();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WeakQueue<Boolean> weakQueue0 = new WeakQueue<Boolean>();
      Boolean boolean0 = Boolean.valueOf("");
      weakQueue0.add(boolean0);
      Predicate<Boolean> predicate0 = Predicate.isEqual((Object) boolean0);
      boolean boolean1 = weakQueue0.removeIf(predicate0);
      assertFalse(weakQueue0.contains(boolean0));
      assertTrue(boolean1);
  }
}
