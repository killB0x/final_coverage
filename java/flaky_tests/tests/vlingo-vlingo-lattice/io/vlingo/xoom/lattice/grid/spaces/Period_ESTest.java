/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 12:01:25 GMT 2022
 */

package io.vlingo.xoom.lattice.grid.spaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.grid.spaces.Period;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Period period0 = Period.Forever;
      Duration duration0 = period0.duration.plusHours(6);
      Period period1 = Period.of(duration0);
      Instant instant0 = period1.toFutureInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = Period.of(2964L);
      long long0 = period0.None.toMilliseconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = Period.of((-574L));
      long long0 = period0.toMilliseconds();
      assertEquals((-574L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = new Period((Duration) null);
      // Undeclared exception!
      try { 
        period0.toMilliseconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.grid.spaces.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      Period period0 = new Period(duration0);
      // Undeclared exception!
      try { 
        period0.toMilliseconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      Period period0 = Period.of(duration0);
      // Undeclared exception!
      try { 
        period0.toFutureInstant();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = Period.of((Duration) null);
      // Undeclared exception!
      try { 
        period0.isForever();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.grid.spaces.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(31556889864403199L, 31556889864403199L);
      Period period0 = new Period(duration0);
      // Undeclared exception!
      try { 
        period0.isForever();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.Forever;
      boolean boolean0 = period0.isForever();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = Period.of((-574L));
      boolean boolean0 = period0.isForever();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.Forever;
      long long0 = period0.toMilliseconds();
      assertEquals(31556889864403199L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.Forever;
      Instant instant0 = period0.toFutureInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.of((Duration) null);
      // Undeclared exception!
      try { 
        period0.toFutureInstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.grid.spaces.Period", e);
      }
  }
}
