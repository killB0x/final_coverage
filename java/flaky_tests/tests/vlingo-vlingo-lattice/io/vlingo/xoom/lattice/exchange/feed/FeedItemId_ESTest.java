/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:50:28 GMT 2022
 */

package io.vlingo.xoom.lattice.exchange.feed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.exchange.feed.FeedItemId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FeedItemId_ESTest extends FeedItemId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with((-2772L));
      boolean boolean0 = feedItemId0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(0L);
      long long0 = feedItemId0.toLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId((-2493L));
      long long0 = feedItemId0.toLong();
      assertEquals((-2493L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      FeedItemId feedItemId1 = feedItemId0.previous();
      assertEquals(886L, feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId((-1L));
      FeedItemId feedItemId1 = feedItemId0.next();
      assertEquals(0L, feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId((-1632L));
      FeedItemId feedItemId1 = feedItemId0.next();
      assertEquals((-1631L), feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      boolean boolean0 = feedItemId0.isUnknown();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(0L);
      FeedItemId feedItemId1 = feedItemId0.copy();
      assertTrue(feedItemId1.equals((Object)feedItemId0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      FeedItemId feedItemId1 = feedItemId0.copy();
      assertNotSame(feedItemId0, feedItemId1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with((-2772L));
      FeedItemId feedItemId1 = feedItemId0.copy();
      assertFalse(feedItemId1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      // Undeclared exception!
      try { 
        feedItemId0.toLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      // Undeclared exception!
      try { 
        feedItemId0.previous();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      // Undeclared exception!
      try { 
        feedItemId0.next();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      // Undeclared exception!
      try { 
        feedItemId0.hasPrevious();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId((-2493L));
      FeedItemId feedItemId1 = feedItemId0.previous();
      boolean boolean0 = feedItemId0.equals(feedItemId1);
      assertFalse(boolean0);
      assertEquals((-2494L), feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      long long0 = feedItemId0.toLong();
      assertEquals(887L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId((-2493L));
      boolean boolean0 = feedItemId0.equals("FeedItemId[value=-2494]");
      assertFalse(boolean0);
      assertFalse(feedItemId0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId("/q8bi6f");
      boolean boolean0 = feedItemId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      boolean boolean0 = feedItemId0.equals(feedItemId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId("0");
      // Undeclared exception!
      try { 
        feedItemId0.previous();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No previous identity.
         //
         verifyException("io.vlingo.xoom.lattice.exchange.feed.FeedItemId", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      boolean boolean0 = feedItemId0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(0L);
      boolean boolean0 = feedItemId0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FeedItemId feedItemId0 = null;
      try {
        feedItemId0 = new FeedItemId((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      boolean boolean0 = feedItemId0.isUnknown();
      assertFalse(boolean0);
      assertEquals(887L, feedItemId0.toLong());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId("1");
      FeedItemId feedItemId1 = feedItemId0.next();
      assertEquals(2L, feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      String string0 = feedItemId0.toString();
      assertEquals("FeedItemId[value=887]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(887L);
      feedItemId0.hashCode();
      assertTrue(feedItemId0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId("1");
      FeedItemId feedItemId1 = feedItemId0.copy();
      assertEquals(1L, feedItemId1.toLong());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FeedItemId feedItemId0 = new FeedItemId("1");
      FeedItemId feedItemId1 = feedItemId0.previous();
      assertEquals(0L, feedItemId1.toLong());
  }
}
