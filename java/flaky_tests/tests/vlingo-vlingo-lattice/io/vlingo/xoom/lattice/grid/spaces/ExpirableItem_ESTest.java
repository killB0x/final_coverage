/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 12:05:17 GMT 2022
 */

package io.vlingo.xoom.lattice.grid.spaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.grid.spaces.ExpirableItem;
import io.vlingo.xoom.lattice.grid.spaces.Key;
import io.vlingo.xoom.lattice.grid.spaces.Lease;
import java.time.Instant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpirableItem_ESTest extends ExpirableItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(key0).compare(any(io.vlingo.xoom.lattice.grid.spaces.Key.class) , any(io.vlingo.xoom.lattice.grid.spaces.Key.class));
      Object object0 = new Object();
      Instant instant0 = MockInstant.ofEpochSecond(31556889864403199L);
      Lease lease0 = Lease.of(2219L);
      ExpirableItem<Object> expirableItem0 = new ExpirableItem<Object>(key0, object0, instant0, lease0);
      Key key1 = expirableItem0.key;
      ExpirableItem<ExpirableItem<Object>> expirableItem1 = new ExpirableItem<ExpirableItem<Object>>(key1, (ExpirableItem<Object>) null, instant0, lease0);
      ExpirableItem<ExpirableItem<Object>> expirableItem2 = new ExpirableItem<ExpirableItem<Object>>(key1, expirableItem0, instant0, lease0);
      int int0 = expirableItem2.compareTo(expirableItem1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Key key0 = mock(Key.class, new ViolatedAssumptionAnswer());
      doReturn((-2207), 1).when(key0).compare(any(io.vlingo.xoom.lattice.grid.spaces.Key.class) , any(io.vlingo.xoom.lattice.grid.spaces.Key.class));
      Object object0 = new Object();
      ExpirableItem<Object> expirableItem0 = new ExpirableItem<Object>(key0, object0, (Instant) null, (Lease) null);
      Key key1 = expirableItem0.key;
      expirableItem0.compareTo(expirableItem0);
      Integer integer0 = new Integer((-2906));
      ExpirableItem<Integer> expirableItem1 = new ExpirableItem<Integer>(key1, integer0, (Instant) null, (Lease) null);
      int int0 = expirableItem1.compareTo(expirableItem1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExpirableItem<ExpirableItem<Integer>> expirableItem0 = new ExpirableItem<ExpirableItem<Integer>>((Key) null, (ExpirableItem<Integer>) null, (Instant) null, (Lease) null);
      // Undeclared exception!
      try { 
        expirableItem0.isMaximumExpiration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExpirableItem<ExpirableItem<Integer>> expirableItem0 = new ExpirableItem<ExpirableItem<Integer>>((Key) null, (ExpirableItem<Integer>) null, (Instant) null, (Lease) null);
      // Undeclared exception!
      try { 
        expirableItem0.compareTo(expirableItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.lattice.grid.spaces.ExpirableItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(31556889864403199L);
      Lease lease0 = Lease.None;
      ExpirableItem<Object> expirableItem0 = new ExpirableItem<Object>((Key) null, (Object) null, instant0, lease0);
      boolean boolean0 = expirableItem0.isMaximumExpiration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3042L));
      Lease lease0 = Lease.Forever;
      ExpirableItem<Object> expirableItem0 = new ExpirableItem<Object>((Key) null, (Object) null, instant0, lease0);
      boolean boolean0 = expirableItem0.isMaximumExpiration();
      assertFalse(boolean0);
  }
}
