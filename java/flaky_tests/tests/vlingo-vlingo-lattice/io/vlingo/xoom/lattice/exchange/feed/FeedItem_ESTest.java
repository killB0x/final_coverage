/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:43:10 GMT 2022
 */

package io.vlingo.xoom.lattice.exchange.feed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.exchange.feed.FeedItem;
import io.vlingo.xoom.lattice.exchange.feed.FeedItemId;
import io.vlingo.xoom.lattice.exchange.feed.FeedMessage;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FeedItem_ESTest extends FeedItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(0L);
      FeedItemId feedItemId1 = feedItemId0.next();
      LinkedList<FeedMessage> linkedList0 = new LinkedList<FeedMessage>();
      FeedItem feedItem0 = FeedItem.currentFeedWith(feedItemId0, feedItemId1, linkedList0);
      FeedItem feedItem1 = FeedItem.archivedFeedItemWith(feedItemId0, feedItem0.previousId, feedItemId0, linkedList0);
      assertTrue(feedItem1.archived);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      LinkedList<FeedMessage> linkedList0 = new LinkedList<FeedMessage>();
      // Undeclared exception!
      try { 
        FeedItem.archivedFeedItemWith(feedItemId0, (FeedItemId) null, (FeedItemId) null, linkedList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<FeedMessage> linkedList0 = new LinkedList<FeedMessage>();
      // Undeclared exception!
      try { 
        FeedItem.archivedFeedItemWith((FeedItemId) null, (FeedItemId) null, (FeedItemId) null, linkedList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.with(0L);
      LinkedList<FeedMessage> linkedList0 = new LinkedList<FeedMessage>();
      FeedItem feedItem0 = FeedItem.currentFeedWith(feedItemId0, feedItemId0, linkedList0);
      // Undeclared exception!
      try { 
        FeedItem.currentFeedWith(feedItem0.previousId, (FeedItemId) null, feedItem0.messages);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FeedItemId feedItemId0 = FeedItemId.Unknown;
      // Undeclared exception!
      try { 
        FeedItem.archivedFeedItemWith(feedItemId0, feedItemId0, feedItemId0, (List<FeedMessage>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
