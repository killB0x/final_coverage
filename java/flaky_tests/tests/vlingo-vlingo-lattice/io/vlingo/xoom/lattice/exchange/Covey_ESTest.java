/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:39:17 GMT 2022
 */

package io.vlingo.xoom.lattice.exchange;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.lattice.exchange.Covey;
import io.vlingo.xoom.lattice.exchange.ExchangeAdapter;
import io.vlingo.xoom.lattice.exchange.ExchangeReceiver;
import io.vlingo.xoom.lattice.exchange.ExchangeSender;
import io.vlingo.xoom.lattice.exchange.NoOpSender;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Covey_ESTest extends Covey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Covey.of((ExchangeSender<Object>) noOpSender0, exchangeReceiver0, exchangeAdapter0, (Class<Object>) null, class0, (Class<Object>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Covey.of((ExchangeSender<Object>) noOpSender0, exchangeReceiver0, exchangeAdapter0, class0, class0, (Class<Object>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>(noOpSender0, exchangeReceiver0, exchangeAdapter0, (Class<Object>) null, class0, class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>(noOpSender0, exchangeReceiver0, (ExchangeAdapter<Object, Object, Object>) null, class0, class0, class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>(noOpSender0, (ExchangeReceiver<Object>) null, exchangeAdapter0, class0, class0, class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      NoOpSender noOpSender0 = new NoOpSender();
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>(noOpSender0, exchangeReceiver0, exchangeAdapter0, class0, class0, (Class<Object>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>(noOpSender0, exchangeReceiver0, exchangeAdapter0, class0, (Class<Object>) null, class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Covey<Object, Object, Object> covey0 = null;
      try {
        covey0 = new Covey<Object, Object, Object>((ExchangeSender<Object>) null, (ExchangeReceiver<Object>) null, exchangeAdapter0, class0, class0, class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NoOpSender noOpSender0 = new NoOpSender();
      ExchangeReceiver<Object> exchangeReceiver0 = (ExchangeReceiver<Object>) mock(ExchangeReceiver.class, new ViolatedAssumptionAnswer());
      ExchangeAdapter<Object, Object, Object> exchangeAdapter0 = (ExchangeAdapter<Object, Object, Object>) mock(ExchangeAdapter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Covey<Object, Object, Object> covey0 = Covey.of((ExchangeSender<Object>) noOpSender0, exchangeReceiver0, exchangeAdapter0, class0, class0, class0);
      Covey<Object, Object, Object> covey1 = new Covey<Object, Object, Object>(noOpSender0, exchangeReceiver0, covey0.adapter, covey0.localClass, covey0.localClass, covey0.externalClass);
      assertFalse(covey1.equals((Object)covey0));
  }
}
