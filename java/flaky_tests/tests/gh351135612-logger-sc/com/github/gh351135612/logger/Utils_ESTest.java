/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 23:00:49 GMT 2022
 */

package com.github.gh351135612.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.gh351135612.logger.Utils;
import java.net.UnknownHostException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "S`");
      boolean boolean0 = Utils.equals((CharSequence) charBuffer0, (CharSequence) "K:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Utils.equals((CharSequence) "", (CharSequence) "java.lang.String@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      mockThrowable0.initCause(mockThrowable1);
      // Undeclared exception!
      Utils.getStackTraceString(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        Utils.getStackTraceString(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10000);
      CharBuffer charBuffer1 = CharBuffer.allocate(10000);
      // Undeclared exception!
      Utils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Utils.toString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnknownHostException unknownHostException0 = new UnknownHostException();
      String string0 = Utils.toString((Object) unknownHostException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Utils.logLevel(40000);
      assertEquals("ERROR", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Utils.logLevel(30000);
      assertEquals("WARN", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Utils.logLevel(20000);
      assertEquals("INFO", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Utils.logLevel(10000);
      assertEquals("DEBUG", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Utils.logLevel((-988));
      assertEquals("UNKNOWN", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Utils.logLevel(Integer.MIN_VALUE);
      assertEquals("VERBOSE", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnknownHostException unknownHostException0 = new UnknownHostException();
      MockThrowable mockThrowable0 = new MockThrowable("", unknownHostException0);
      String string0 = Utils.getStackTraceString(mockThrowable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Utils.getStackTraceString((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = Utils.getStackTraceString(mockThrowable0);
      //  // Unstable assertion: assertEquals("java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.net.UnknownHostException@0000000001");
      boolean boolean0 = Utils.equals((CharSequence) charBuffer0, (CharSequence) "java.net.UnknownHostException@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Utils.equals((CharSequence) "java.lang.Object@0000000001", (CharSequence) "java.lang.Object@0000000001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.net.UnknownHostException@0000000001");
      boolean boolean0 = Utils.equals((CharSequence) charBuffer0, (CharSequence) "java.net.UnknownHostException@0000000001");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = Utils.equals((CharSequence) "java.net.UnknownHostException@0000000002", (CharSequence) "UNKNOWN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Utils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Utils.equals((CharSequence) null, (CharSequence) "UNKNOWN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.net.UnknownHostException@0000000001");
      boolean boolean0 = Utils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.net.UnknownHostException@0000000001");
      boolean boolean0 = Utils.equals((CharSequence) "java.net.UnknownHostException@0000000001", (CharSequence) charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Utils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.net.UnknownHostException@0000000001");
      boolean boolean0 = Utils.isEmpty(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = Utils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }
}
