/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 03:34:03 GMT 2022
 */

package io.teknek.plan;

import org.junit.Test;
import static org.junit.Assert.*;
import io.teknek.plan.OffsetStorageDesc;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OffsetStorageDesc_ESTest extends OffsetStorageDesc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc();
      Map<String, Object> map0 = offsetStorageDesc0.getParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      hashMap0.put("rbh7'hf", (Object) null);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      Map<String, Object> map0 = offsetStorageDesc0.getParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc();
      String string0 = offsetStorageDesc0.getOperatorClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      offsetStorageDesc0.setOperatorClass("");
      String string0 = offsetStorageDesc0.getOperatorClass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      offsetStorageDesc0.setParameters(hashMap0);
      assertEquals("rbh7'hf", offsetStorageDesc0.getOperatorClass());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      OffsetStorageDesc offsetStorageDesc1 = offsetStorageDesc0.withParameters(hashMap0);
      assertSame(offsetStorageDesc0, offsetStorageDesc1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      Map<String, Object> map0 = offsetStorageDesc0.getParameters();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc();
      OffsetStorageDesc offsetStorageDesc1 = offsetStorageDesc0.withOperatorClass("23$;#m/");
      assertEquals("23$;#m/", offsetStorageDesc1.getOperatorClass());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(3601, 3601);
      OffsetStorageDesc offsetStorageDesc0 = new OffsetStorageDesc("rbh7'hf", hashMap0);
      String string0 = offsetStorageDesc0.getOperatorClass();
      assertEquals("rbh7'hf", string0);
  }
}
