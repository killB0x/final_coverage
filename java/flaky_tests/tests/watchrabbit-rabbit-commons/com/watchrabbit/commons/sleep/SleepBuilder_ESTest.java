/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 03:54:53 GMT 2022
 */

package com.watchrabbit.commons.sleep;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.watchrabbit.commons.callback.ArgumentCallback;
import com.watchrabbit.commons.sleep.SleepBuilder;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SleepBuilder_ESTest extends SleepBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      Boolean boolean0 = Boolean.TRUE;
      ArgumentCallback<Boolean, Object> argumentCallback0 = (ArgumentCallback<Boolean, Object>) mock(ArgumentCallback.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(argumentCallback0).call(any());
      SleepBuilder<Object> sleepBuilder1 = sleepBuilder0.withComparer(argumentCallback0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      sleepBuilder1.withStatement(callable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      sleepBuilder0.withTimeout((-1411L), timeUnit0);
      Object object0 = sleepBuilder1.build();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      sleepBuilder0.withTimeout((-1411L), timeUnit0);
      // Undeclared exception!
      try { 
        sleepBuilder0.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      Boolean boolean0 = Boolean.TRUE;
      ArgumentCallback<Boolean, Object> argumentCallback0 = (ArgumentCallback<Boolean, Object>) mock(ArgumentCallback.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(argumentCallback0).call(any());
      sleepBuilder0.withComparer(argumentCallback0);
      Object object0 = new Object();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      SleepBuilder<Object> sleepBuilder1 = sleepBuilder0.withStatement(callable0);
      Object object1 = sleepBuilder1.build();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SleepBuilder<SleepBuilder<Object>> sleepBuilder0 = SleepBuilder.sleep();
      // Undeclared exception!
      try { 
        sleepBuilder0.withTimeout((-8L), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf("e]-");
      ArgumentCallback<Boolean, Object> argumentCallback0 = (ArgumentCallback<Boolean, Object>) mock(ArgumentCallback.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(argumentCallback0).call(any());
      SleepBuilder<Object> sleepBuilder1 = sleepBuilder0.withComparer(argumentCallback0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      SleepBuilder<Object> sleepBuilder2 = sleepBuilder1.withStatement(callable0);
      sleepBuilder2.build();
      Object object0 = sleepBuilder2.build();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SleepBuilder<SleepBuilder<Object>> sleepBuilder0 = SleepBuilder.sleep();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SleepBuilder<SleepBuilder<Object>> sleepBuilder1 = sleepBuilder0.withTimeout(36L, timeUnit0);
      SleepBuilder<Object> sleepBuilder2 = SleepBuilder.sleep();
      Callable<SleepBuilder<Object>> callable0 = (Callable<SleepBuilder<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(sleepBuilder2, (Object) null).when(callable0).call();
      SleepBuilder<SleepBuilder<Object>> sleepBuilder3 = sleepBuilder1.withStatement(callable0);
      Boolean boolean0 = Boolean.TRUE;
      ArgumentCallback<Boolean, SleepBuilder<Object>> argumentCallback0 = (ArgumentCallback<Boolean, SleepBuilder<Object>>) mock(ArgumentCallback.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, (Object) null).when(argumentCallback0).call(any(com.watchrabbit.commons.sleep.SleepBuilder.class));
      sleepBuilder0.withComparer(argumentCallback0);
      // Undeclared exception!
      try { 
        sleepBuilder3.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SleepBuilder<Object> sleepBuilder1 = sleepBuilder0.withInterval(872L, timeUnit0);
      assertSame(sleepBuilder0, sleepBuilder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SleepBuilder<Object> sleepBuilder0 = SleepBuilder.sleep();
      SleepBuilder<Object> sleepBuilder1 = sleepBuilder0.withName("");
      assertSame(sleepBuilder1, sleepBuilder0);
  }
}
