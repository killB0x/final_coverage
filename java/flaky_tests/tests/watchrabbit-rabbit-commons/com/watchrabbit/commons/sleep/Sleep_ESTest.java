/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 03:50:39 GMT 2022
 */

package com.watchrabbit.commons.sleep;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.watchrabbit.commons.sleep.Sleep;
import java.util.LinkedList;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sleep_ESTest extends Sleep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Callable<Boolean> callable0 = (Callable<Boolean>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Boolean boolean1 = Sleep.untilTrue(callable0, 0L, timeUnit0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      try { 
        Sleep.untilTrue((Callable<Boolean>) null, 4429L, timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        Sleep.untilNull((Callable<Boolean>) null, 1405L, timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Callable<LinkedList<Object>> callable0 = (Callable<LinkedList<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(callable0).call();
      LinkedList<Object> linkedList1 = Sleep.untilNotNull(callable0, 0L, timeUnit0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(callable0).call();
      Object object0 = Sleep.untilNotNull(callable0, 0L, timeUnit0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Callable<LinkedList<Object>> callable0 = (Callable<LinkedList<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedList<Object> linkedList0 = Sleep.untilNull(callable0, 0L, timeUnit0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(">?14");
      Callable<Boolean> callable0 = (Callable<Boolean>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Boolean boolean1 = Sleep.untilFalse(callable0, (-1927L), timeUnit0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Callable<Boolean> callable0 = (Callable<Boolean>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Boolean boolean1 = Sleep.untilFalse(callable0, (-1927L), timeUnit0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Callable<LinkedList<Object>> callable0 = (Callable<LinkedList<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedList<Object> linkedList1 = Sleep.untilNull(callable0, 0L, timeUnit0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Callable<Boolean> callable0 = (Callable<Boolean>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      // Undeclared exception!
      try { 
        Sleep.untilFalse(callable0, 1178L, timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Boolean boolean0 = Boolean.FALSE;
      Callable<Boolean> callable0 = (Callable<Boolean>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(callable0).call();
      Boolean boolean1 = Sleep.untilTrue(callable0, (-186L), timeUnit0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        Sleep.untilNotNull((Callable<LinkedList<Boolean>>) null, (-1L), timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Callable on sleeper: sleeper throwed exception!
         //
         verifyException("com.watchrabbit.commons.sleep.SleepBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Sleep.sleep(0L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sleep sleep0 = new Sleep();
  }
}
