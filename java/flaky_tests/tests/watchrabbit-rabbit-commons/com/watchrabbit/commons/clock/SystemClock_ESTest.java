/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 03:56:38 GMT 2022
 */

package com.watchrabbit.commons.clock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.watchrabbit.commons.callback.UncheckedCallable;
import com.watchrabbit.commons.clock.SystemClock;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SystemClock_ESTest extends SystemClock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      MockDate mockDate0 = new MockDate(0L);
      UncheckedCallable<Date> uncheckedCallable0 = (UncheckedCallable<Date>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockDate0).when(uncheckedCallable0).call();
      SystemClock systemClock1 = systemClock0.withDateProducer(uncheckedCallable0);
      long long0 = systemClock1.getTimestamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      UncheckedCallable<Date> uncheckedCallable0 = (UncheckedCallable<Date>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(uncheckedCallable0).call();
      systemClock0.withDateProducer(uncheckedCallable0);
      long long0 = systemClock0.getTimestamp();
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      UncheckedCallable<Instant> uncheckedCallable0 = (UncheckedCallable<Instant>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(uncheckedCallable0).call();
      systemClock0.withInstantProducer(uncheckedCallable0);
      Instant instant0 = systemClock0.getInstant();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      UncheckedCallable<Date> uncheckedCallable0 = (UncheckedCallable<Date>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(uncheckedCallable0).call();
      systemClock0.withDateProducer(uncheckedCallable0);
      Date date0 = systemClock0.getDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      UncheckedCallable<Calendar> uncheckedCallable0 = (UncheckedCallable<Calendar>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(uncheckedCallable0).call();
      systemClock0.withCalendarProducer(uncheckedCallable0);
      Calendar calendar0 = systemClock0.getCalendar();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1918, (-1), 1);
      mockGregorianCalendar0.setLenient(false);
      UncheckedCallable<Calendar> uncheckedCallable0 = (UncheckedCallable<Calendar>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn(mockGregorianCalendar0).when(uncheckedCallable0).call();
      systemClock0.withCalendarProducer(uncheckedCallable0);
      Calendar calendar0 = systemClock0.getCalendar();
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      UncheckedCallable<Date> uncheckedCallable0 = (UncheckedCallable<Date>) mock(UncheckedCallable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(uncheckedCallable0).call();
      systemClock0.withDateProducer(uncheckedCallable0);
      // Undeclared exception!
      try { 
        systemClock0.getTimestamp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.clock.SystemClock", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      SystemClock systemClock1 = systemClock0.withInstantProducer((UncheckedCallable<Instant>) null);
      // Undeclared exception!
      try { 
        systemClock1.getInstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.clock.SystemClock", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      systemClock0.withDateProducer((UncheckedCallable<Date>) null);
      // Undeclared exception!
      try { 
        systemClock0.getDate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.clock.SystemClock", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      systemClock0.withCalendarProducer((UncheckedCallable<Calendar>) null);
      // Undeclared exception!
      try { 
        systemClock0.getCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.clock.SystemClock", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      Date date0 = systemClock0.getDate();
      assertEquals("Tue Nov 08 03:56:36 GMT 2022", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      Instant instant0 = systemClock0.getInstant();
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      Calendar calendar0 = systemClock0.getCalendar();
      assertTrue(calendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemClock systemClock0 = SystemClock.getInstance();
      long long0 = systemClock0.getTimestamp();
      assertEquals(1667879795912L, long0);
  }
}
