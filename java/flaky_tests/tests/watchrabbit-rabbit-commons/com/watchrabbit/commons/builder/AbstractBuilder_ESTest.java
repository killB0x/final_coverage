/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 03:57:44 GMT 2022
 */

package com.watchrabbit.commons.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.watchrabbit.commons.builder.AbstractBuilder;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBuilder_ESTest extends AbstractBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AbstractBuilder<Object> abstractBuilder0 = new AbstractBuilder<Object>();
      Object object0 = new Object();
      abstractBuilder0.data = (Object) integer0;
      abstractBuilder0.data = object0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = abstractBuilder0.build(consumer0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractBuilder<Integer> abstractBuilder0 = new AbstractBuilder<Integer>();
      AbstractBuilder<Object> abstractBuilder1 = new AbstractBuilder<Object>();
      Object object0 = new Object();
      abstractBuilder1.data = (Object) abstractBuilder0.data;
      abstractBuilder1.data = object0;
      Object object1 = abstractBuilder1.build();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractBuilder<Object> abstractBuilder0 = new AbstractBuilder<Object>();
      // Undeclared exception!
      try { 
        abstractBuilder0.build((Consumer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.watchrabbit.commons.builder.AbstractBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractBuilder<Integer> abstractBuilder0 = new AbstractBuilder<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = abstractBuilder0.build(consumer0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractBuilder<Object> abstractBuilder0 = new AbstractBuilder<Object>();
      Object object0 = abstractBuilder0.build();
      assertNull(object0);
  }
}
