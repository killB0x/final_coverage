/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 17:26:33 GMT 2022
 */

package ca.ma99us.jab.headers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ca.ma99us.jab.headers.CompressHeader;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompressHeader_ESTest extends CompressHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = compressHeader0.deobfuscate(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressHeader<Integer> compressHeader0 = new CompressHeader<Integer>();
      CompressHeader<Object> compressHeader1 = new CompressHeader<Object>();
      boolean boolean0 = compressHeader0.canEqual(compressHeader1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      Object object0 = new Object();
      boolean boolean0 = compressHeader0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      // Undeclared exception!
      try { 
        compressHeader0.deobfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      Object object0 = new Object();
      boolean boolean0 = compressHeader0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      boolean boolean0 = compressHeader0.equals(compressHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      compressHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressHeader<Integer> compressHeader0 = new CompressHeader<Integer>();
      String string0 = compressHeader0.toString();
      assertEquals("CompressHeader()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressHeader<CompressHeader<Object>> compressHeader0 = new CompressHeader<CompressHeader<Object>>();
      CompressHeader<Object> compressHeader1 = new CompressHeader<Object>();
      boolean boolean0 = compressHeader1.equals(compressHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressHeader<CompressHeader<Object>> compressHeader0 = new CompressHeader<CompressHeader<Object>>();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        compressHeader0.obfuscate(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("ca.ma99us.jab.headers.CompressHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      CompressHeader<Object> compressHeader0 = new CompressHeader<Object>();
      try { 
        compressHeader0.deobfuscate(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // unknown compression method
         //
         verifyException("java.util.zip.InflaterOutputStream", e);
      }
  }
}
