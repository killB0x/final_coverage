/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 17:25:27 GMT 2022
 */

package ca.ma99us.jab.headers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ca.ma99us.jab.JabToString;
import ca.ma99us.jab.headers.ToStringHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToStringHeader_ESTest extends ToStringHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = toStringHeader0.obfuscate(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      byte[] byteArray0 = new byte[6];
      JabToString jabToString0 = mock(JabToString.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(jabToString0).stringToBytes(anyString());
      JabToString.setGlobalToString(jabToString0);
      byte[] byteArray1 = toStringHeader0.deobfuscate(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      byte[] byteArray0 = new byte[6];
      JabToString jabToString0 = mock(JabToString.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(jabToString0).stringToBytes(anyString());
      JabToString.setGlobalToString(jabToString0);
      byte[] byteArray1 = toStringHeader0.deobfuscate(byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = toStringHeader0.deobfuscate(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      boolean boolean0 = toStringHeader0.canEqual(toStringHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToStringHeader<ToStringHeader<Object>> toStringHeader0 = new ToStringHeader<ToStringHeader<Object>>();
      Object object0 = new Object();
      boolean boolean0 = toStringHeader0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      // Undeclared exception!
      try { 
        toStringHeader0.deobfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      boolean boolean0 = toStringHeader0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      boolean boolean0 = toStringHeader0.equals(toStringHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      String string0 = toStringHeader0.toString();
      assertEquals("ToStringHeader()", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      toStringHeader0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        toStringHeader0.deobfuscate(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 0
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = toStringHeader0.obfuscate(byteArray0);
      JabToString jabToString0 = mock(JabToString.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jabToString0).bytesToString(any(byte[].class));
      JabToString.setGlobalToString(jabToString0);
      // Undeclared exception!
      try { 
        toStringHeader0.obfuscate(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ca.ma99us.jab.headers.ToStringHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      ToStringHeader<Integer> toStringHeader1 = new ToStringHeader<Integer>();
      boolean boolean0 = toStringHeader1.equals(toStringHeader0);
      assertTrue(boolean0);
  }
}
