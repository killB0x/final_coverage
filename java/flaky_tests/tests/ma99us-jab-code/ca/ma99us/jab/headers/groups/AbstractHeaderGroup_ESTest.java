/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 17:24:19 GMT 2022
 */

package ca.ma99us.jab.headers.groups;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ca.ma99us.jab.headers.groups.CompressHeaderGroup;
import ca.ma99us.jab.headers.groups.CryptoHeaderGroup;
import java.io.IOException;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractHeaderGroup_ESTest extends AbstractHeaderGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      // Undeclared exception!
      try { 
        cryptoHeaderGroup0.obfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CompressHeaderGroup<Object> compressHeaderGroup0 = new CompressHeaderGroup<Object>();
      // Undeclared exception!
      try { 
        compressHeaderGroup0.obfuscate(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("ca.ma99us.jab.headers.CompressHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      // Undeclared exception!
      try { 
        cryptoHeaderGroup0.deobfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        cryptoHeaderGroup0.deobfuscate(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      byte[] byteArray0 = new byte[0];
      try { 
        cryptoHeaderGroup0.deobfuscate(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not registered key id: null
         //
         verifyException("ca.ma99us.jab.headers.CryptoHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CompressHeaderGroup<Object> compressHeaderGroup0 = new CompressHeaderGroup<Object>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = compressHeaderGroup0.deobfuscate(byteArray0);
      try { 
        compressHeaderGroup0.deobfuscate(byteArray1);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // incorrect header check
         //
         verifyException("java.util.zip.InflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      byte[] byteArray0 = new byte[2];
      try { 
        cryptoHeaderGroup0.obfuscate(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Encryption Crypto has to be specified. Set CryptoHeader.setEncrypt(...) first
         //
         verifyException("ca.ma99us.jab.headers.CryptoHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CompressHeaderGroup<Object> compressHeaderGroup0 = new CompressHeaderGroup<Object>();
      // Undeclared exception!
      try { 
        compressHeaderGroup0.populate(compressHeaderGroup0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/ObjectMapper
         //
         verifyException("ca.ma99us.jab.JabParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CryptoHeaderGroup<Object> cryptoHeaderGroup0 = new CryptoHeaderGroup<Object>();
      // Undeclared exception!
      try { 
        cryptoHeaderGroup0.validate(cryptoHeaderGroup0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/ObjectMapper
         //
         verifyException("ca.ma99us.jab.JabParser", e);
      }
  }
}
