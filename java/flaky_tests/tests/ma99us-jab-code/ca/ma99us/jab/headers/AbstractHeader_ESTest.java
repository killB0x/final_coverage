/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 17:28:50 GMT 2022
 */

package ca.ma99us.jab.headers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ca.ma99us.jab.JabCrypto;
import ca.ma99us.jab.JabSigner;
import ca.ma99us.jab.headers.ChecksumHeader;
import ca.ma99us.jab.headers.CompressHeader;
import ca.ma99us.jab.headers.CryptoHeader;
import ca.ma99us.jab.headers.NoNullsHeader;
import ca.ma99us.jab.headers.SignatureHeader;
import ca.ma99us.jab.headers.ToStringHeader;
import java.io.IOException;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractHeader_ESTest extends AbstractHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = checksumHeader0.obfuscate(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = toStringHeader0.obfuscate(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      byte[] byteArray0 = checksumHeader0.deobfuscate((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = checksumHeader0.deobfuscate(byteArray0);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChecksumHeader<Object> checksumHeader0 = new ChecksumHeader<Object>();
      // Undeclared exception!
      try { 
        checksumHeader0.validate(checksumHeader0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/ObjectMapper
         //
         verifyException("ca.ma99us.jab.JabParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignatureHeader<Object> signatureHeader0 = new SignatureHeader<Object>();
      Object object0 = new Object();
      try { 
        signatureHeader0.validate(object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not registered key id: null
         //
         verifyException("ca.ma99us.jab.headers.SignatureHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChecksumHeader<Object> checksumHeader0 = new ChecksumHeader<Object>();
      JabSigner jabSigner0 = new JabSigner();
      // Undeclared exception!
      try { 
        checksumHeader0.populate(jabSigner0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/ObjectMapper
         //
         verifyException("ca.ma99us.jab.JabParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CryptoHeader<Object> cryptoHeader0 = new CryptoHeader<Object>();
      JabCrypto jabCrypto0 = new JabCrypto("TO~VTko\u0007cq", "TO~VTko\u0007cq", (byte) (-66), (byte)96);
      cryptoHeader0.setEncrypt(jabCrypto0);
      // Undeclared exception!
      try { 
        cryptoHeader0.populate(jabCrypto0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Private key has to be set first
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignatureHeader<Object> signatureHeader0 = new SignatureHeader<Object>();
      try { 
        signatureHeader0.populate(signatureHeader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Signature Crypto has to be specified. Set SignatureHeader.setSigner(...) first
         //
         verifyException("ca.ma99us.jab.headers.SignatureHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ToStringHeader<Integer> toStringHeader0 = new ToStringHeader<Integer>();
      // Undeclared exception!
      try { 
        toStringHeader0.obfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CryptoHeader<Object> cryptoHeader0 = new CryptoHeader<Object>();
      byte[] byteArray0 = new byte[7];
      JabCrypto jabCrypto0 = new JabCrypto("tX~(c-V-U8g7,", "a]J4FQjBT8!", 0, 0);
      cryptoHeader0.setEncrypt(jabCrypto0);
      // Undeclared exception!
      try { 
        cryptoHeader0.obfuscate(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Crypto key has to be set first
         //
         verifyException("ca.ma99us.jab.JabCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressHeader<JabSigner> compressHeader0 = new CompressHeader<JabSigner>();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        compressHeader0.obfuscate(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("ca.ma99us.jab.headers.CompressHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CryptoHeader<JabSigner> cryptoHeader0 = new CryptoHeader<JabSigner>();
      byte[] byteArray0 = new byte[0];
      try { 
        cryptoHeader0.obfuscate(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Encryption Crypto has to be specified. Set CryptoHeader.setEncrypt(...) first
         //
         verifyException("ca.ma99us.jab.headers.CryptoHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CompressHeader<JabSigner> compressHeader0 = new CompressHeader<JabSigner>();
      try { 
        compressHeader0.deobfuscate(byteArray0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // unknown compression method
         //
         verifyException("java.util.zip.InflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoNullsHeader<Object> noNullsHeader0 = new NoNullsHeader<Object>();
      // Undeclared exception!
      try { 
        noNullsHeader0.deobfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressHeader<JabSigner> compressHeader0 = new CompressHeader<JabSigner>();
      // Undeclared exception!
      try { 
        compressHeader0.deobfuscate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        toStringHeader0.deobfuscate(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CryptoHeader<Object> cryptoHeader0 = new CryptoHeader<Object>();
      byte[] byteArray0 = new byte[0];
      try { 
        cryptoHeader0.deobfuscate(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not registered key id: null
         //
         verifyException("ca.ma99us.jab.headers.CryptoHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      ToStringHeader<Object> toStringHeader0 = new ToStringHeader<Object>();
      toStringHeader0.populate(checksumHeader0);
      assertEquals("ToStringHeader()", toStringHeader0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChecksumHeader<Object> checksumHeader0 = new ChecksumHeader<Object>();
      byte[] byteArray0 = checksumHeader0.obfuscate((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      NoNullsHeader<Object> noNullsHeader0 = new NoNullsHeader<Object>();
      noNullsHeader0.validate(checksumHeader0);
      assertEquals("NoNullsHeader()", noNullsHeader0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChecksumHeader<Integer> checksumHeader0 = new ChecksumHeader<Integer>();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = checksumHeader0.deobfuscate(byteArray0);
      assertSame(byteArray0, byteArray1);
  }
}
