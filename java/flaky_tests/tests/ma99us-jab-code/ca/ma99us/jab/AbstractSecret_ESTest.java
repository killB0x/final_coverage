/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 17:20:19 GMT 2022
 */

package ca.ma99us.jab;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ca.ma99us.jab.AbstractSecret;
import ca.ma99us.jab.JabAsyncCrypto;
import ca.ma99us.jab.JabAsyncSigner;
import ca.ma99us.jab.JabCrypto;
import ca.ma99us.jab.JabSigner;
import javax.crypto.spec.SecretKeySpec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSecret_ESTest extends AbstractSecret_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      jabCrypto0.wrapBytes(byteArray0, 65536);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner();
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setRandomKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key
         //
         verifyException("ca.ma99us.jab.JabAsyncSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      String string0 = "Private key has to be set first";
      int int0 = 0;
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto("Private key has to be set first", "Private key has to be set first", 0, 0);
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.wrapBytes("ca.ma99us.jab.JabAsyncCrypto", 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        jabCrypto0.setPrivateKeyBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting key from bytes
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      JabCrypto jabCrypto1 = jabCrypto0.setRandomKey();
      assertSame(jabCrypto0, jabCrypto1);
      
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      JabAsyncCrypto jabAsyncCrypto1 = jabAsyncCrypto0.setRandomKey();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        jabAsyncCrypto1.setPrivateKeyBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting private key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-58);
      jabCrypto0.setRandomKey();
      byteArray0[0] = (byte) (-58);
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      String string0 = "NPra";
      jabCrypto0.wrapBytes(byteArray0, 2005);
      int int0 = 1;
      JabAsyncCrypto jabAsyncCrypto1 = new JabAsyncCrypto("NPra", "NPra", 1, 1);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-58);
      byte byte1 = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte) (-58);
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.setPrivateKeyBytes(byteArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting private key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[0];
      jabCrypto0.wrapBytes(byteArray0, 0);
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte) (-58);
      jabCrypto0.setRandomKey();
      byteArray1[0] = (byte) (-58);
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      JabAsyncCrypto jabAsyncCrypto1 = new JabAsyncCrypto("NPra", "NPra", (byte) (-58), 2005);
      // Undeclared exception!
      try { 
        jabAsyncCrypto1.setPrivateKeyBytes(byteArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting private key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte byte0 = (byte) (-58);
      jabCrypto0.setRandomKey();
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      JabAsyncCrypto jabAsyncCrypto1 = jabAsyncCrypto0.setRandomKey();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      jabCrypto0.setPrivateKeyBytes(byteArray0);
      byteArray0[6] = (byte) (-58);
      // Undeclared exception!
      try { 
        jabAsyncCrypto1.setPublicKeyBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting public key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      jabCrypto0.setRandomKey();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)31;
      jabCrypto0.setPrivateKeyBytes(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-56);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      jabCrypto0.setRandomKey();
      Long long0 = jabCrypto0.getKeyId();
      assertEquals(1739842122659177L, (long)long0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = jabCrypto0.decrypt(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        jabCrypto0.wrapBytes((byte[]) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      byte byte0 = (byte)0;
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner("Lxa", "@j!tFf7W :&wdw;*-5", 676);
      jabAsyncSigner0.setSecretKey("7`hB[`,#bJ[", (String) null);
      jabAsyncSigner0.setSecretKey("P@?v<$", (String) null);
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setRandomKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key
         //
         verifyException("ca.ma99us.jab.JabAsyncSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[6];
      jabCrypto0.setRandomKey();
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      Long long0 = jabCrypto0.getKeyId();
      assertEquals(6368365837300643L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      // Undeclared exception!
      try { 
        jabCrypto0.getKeyId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Private key has to be set first
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-23);
      // Undeclared exception!
      try { 
        jabCrypto0.getKeyId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Private key has to be set first
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      jabAsyncCrypto0.wrapBytes("", 0);
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.setSecretKey("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not use passwords for asymmetric encryption! Generate random key pair by calling 'setRandomKey()' instead.
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JabSigner jabSigner0 = new JabSigner();
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner("", "ca.ma99us.jab.AbstractSecret$CryptoConfig", (-1919));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-9);
      // Undeclared exception!
      try { 
        jabAsyncSigner0.wrapBytes("ca.ma99us.jab.AbstractSecret$CryptoConfig", (-1429));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1429
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jabCrypto0.wrapBytes(byteArray0, (byte)0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      abstractSecret_CryptoConfig0.getSecureRandom();
      abstractSecret_CryptoConfig0.getSecureRandom();
      int int0 = (-1);
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner();
      jabAsyncSigner0.setSecretKey("", "q(E#x,!~#");
      String string0 = "Error generating key";
      jabAsyncSigner0.setSecretKey("Error generating key", "Error generating key");
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setRandomKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key
         //
         verifyException("ca.ma99us.jab.JabAsyncSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JabSigner jabSigner0 = new JabSigner("Error generating key from secrets", 0);
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)119;
      jabAsyncCrypto0.wrapBytes("8?Or^L.mcf?H 7t", (byte)2);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.decrypt(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Private key has to be set first
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        jabCrypto0.wrapBytes(byteArray0, (byte) (-64));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -64
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      abstractSecret_CryptoConfig0.getSecureRandom();
      abstractSecret_CryptoConfig0.getSecureRandom();
      String string0 = "Error generating key";
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto("", "ca.ma99us.jab.JabCrypto", (-1), (-1));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.wrapBytes(byteArray0, (-5394));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5394
         //
         verifyException("ca.ma99us.jab.JabHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      byte[] byteArray0 = new byte[2];
      jabAsyncCrypto0.setRandomKey();
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-10);
      jabAsyncCrypto0.encrypt(byteArray0);
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      abstractSecret_CryptoConfig0.getSecurityProvider();
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner("Crypto key has to be set first", "Crypto key has to be set first", 1);
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setRandomKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key
         //
         verifyException("ca.ma99us.jab.JabAsyncSigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)39;
      // Undeclared exception!
      try { 
        jabAsyncSigner0.wrapBytes((String) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner();
      // Undeclared exception!
      try { 
        jabAsyncSigner0.wrapBytes((String) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      // Undeclared exception!
      try { 
        jabCrypto0.setSecretKey("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key from secrets
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      abstractSecret_CryptoConfig0.getSecureRandom();
      abstractSecret_CryptoConfig0.getSecureRandom();
      int int0 = (-1);
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner("q(E#x,!~#", "q(E#x,!~#", (-1));
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setSecretKey("", "q(E#x,!~#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Error generating key from secrets
         //
         verifyException("ca.ma99us.jab.AbstractSecret", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JabCrypto jabCrypto0 = new JabCrypto();
      jabCrypto0.setRandomKey();
      jabCrypto0.setSecretKey("ca.ma99us.jab.AbstractSecret", "ca.ma99us.jab.AbstractSecret");
      jabCrypto0.setSecretKey("ca.ma99us.jab.AbstractSecret", "ca.ma99us.jab.AbstractSecret");
      jabCrypto0.setRandomKey();
      Long long0 = jabCrypto0.getKeyId();
      assertEquals(613722391356110L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      abstractSecret_CryptoConfig0.getSecureRandom();
      JabAsyncCrypto jabAsyncCrypto0 = new JabAsyncCrypto();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        jabAsyncCrypto0.setPublicKeyBytes((byte[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting public key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncCrypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractSecret.CryptoConfig abstractSecret_CryptoConfig0 = new AbstractSecret.CryptoConfig();
      AbstractSecret.setCryptoConfig(abstractSecret_CryptoConfig0);
      JabAsyncSigner jabAsyncSigner0 = new JabAsyncSigner();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        jabAsyncSigner0.setPublicKeyBytes(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error setting public key from bytes
         //
         verifyException("ca.ma99us.jab.JabAsyncSigner", e);
      }
  }
}
