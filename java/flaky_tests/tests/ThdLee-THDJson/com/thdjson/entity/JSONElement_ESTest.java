/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 15:36:58 GMT 2022
 */

package com.thdjson.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thdjson.JSONToken;
import com.thdjson.entity.JSONElement;
import com.thdjson.entity.JSONValueType;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSONElement_ESTest extends JSONElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      String string0 = jSONElement0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.ARRAY;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      String string0 = jSONElement0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.BOOL;
      JSONElement jSONElement0 = new JSONElement("(Q#*q%T*&Yr_GlPa>9f", jSONValueType0);
      String string0 = jSONElement0.getString();
      assertEquals("(Q#*q%T*&Yr_GlPa>9f", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      long long0 = jSONElement0.getLongValue();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      float float0 = jSONElement0.getFloatValue();
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      Float float0 = jSONElement0.getFloat();
      assertEquals(4.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.OBJECT;
      JSONElement jSONElement0 = new JSONElement("1", jSONValueType0);
      byte byte0 = jSONElement0.getByteValue();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FALSE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Boolean boolean0 = jSONElement0.getBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("LBRACE", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getShortValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getShortValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("!6Y9-k", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getShort();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getLongValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getLong();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("ITe5@@Mn1`VeB0!`", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getIntValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getIntValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("/|<OOys2U/", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getInt();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getFloatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("Q[dPFll;", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getFloat();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4l&4yrmGj|~Wq:Pe", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getDoubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement(",m-gO-.m!!zT]Md&$ev", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getByteValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("'MCQ^tiuAYX\"]%s ", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getByte();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement(",m-gO-.m!zT]Md&$ev", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getByte();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",m-gO-.m!zT]Md&$ev\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("AHzfRN78|[1U*<IH%[D", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getBigInteger();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("com.thdjson.entity.JSONElement$1", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getBigInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("Ds|b|]~7Cw$tx{=/}Z", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getBigDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character D is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONElement jSONElement0 = null;
      try {
        jSONElement0 = new JSONElement((JSONToken) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.STRING;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      String string0 = jSONElement0.toString();
      assertNotNull(string0);
      assertEquals("\"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      String string0 = jSONElement0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      String string0 = jSONElement0.getString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.BOOL;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      String string0 = jSONElement0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      BigInteger bigInteger0 = jSONElement0.getBigInteger();
      assertEquals((byte)4, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getBigInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      BigInteger bigInteger0 = jSONElement0.getBigInteger();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      BigDecimal bigDecimal0 = jSONElement0.getBigDecimal();
      assertEquals((short)4, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      BigDecimal bigDecimal0 = jSONElement0.getBigDecimal();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getBigDecimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      double double0 = jSONElement0.getDoubleValue();
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      double double0 = jSONElement0.getDoubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      Double double0 = jSONElement0.getDouble();
      assertEquals(4.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Double double0 = jSONElement0.getDouble();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getFloatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      float float0 = jSONElement0.getFloatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FALSE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Float float0 = jSONElement0.getFloat();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      boolean boolean0 = jSONElement0.getBooleanValue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      boolean boolean0 = jSONElement0.getBooleanValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Boolean boolean0 = jSONElement0.getBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getLongValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getLongValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      long long0 = jSONElement0.getLongValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      Long long0 = jSONElement0.getLong();
      assertEquals(4L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Long long0 = jSONElement0.getLong();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      int int0 = jSONElement0.getIntValue();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      int int0 = jSONElement0.getIntValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      Integer integer0 = jSONElement0.getInt();
      assertEquals(4, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Integer integer0 = jSONElement0.getInt();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getShortValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      short short0 = jSONElement0.getShortValue();
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getShort();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FALSE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Short short0 = jSONElement0.getShort();
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      byte byte0 = jSONElement0.getByteValue();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      // Undeclared exception!
      try { 
        jSONElement0.getByteValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("4", jSONValueType0);
      Byte byte0 = jSONElement0.getByte();
      assertEquals((byte)4, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.COLON;
      JSONElement jSONElement0 = null;
      try {
        jSONElement0 = new JSONElement(jSONToken0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Byte byte0 = jSONElement0.getByte();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FALSE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      // Undeclared exception!
      try { 
        jSONElement0.getByteValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Byte byte0 = jSONElement0.getByte();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      short short0 = jSONElement0.getShortValue();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.STRING;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      Boolean boolean0 = jSONElement0.getBoolean();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONValueType jSONValueType0 = JSONValueType.INT;
      JSONElement jSONElement0 = new JSONElement("854", jSONValueType0);
      Short short0 = jSONElement0.getShort();
      assertEquals((short)854, (short)short0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      JSONValueType jSONValueType0 = jSONElement0.getType();
      assertEquals("float", jSONValueType0.getType());
  }
}
