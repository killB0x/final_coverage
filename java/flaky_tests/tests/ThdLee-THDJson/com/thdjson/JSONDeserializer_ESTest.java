/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 15:31:26 GMT 2022
 */

package com.thdjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thdjson.JSONDeserializer;
import com.thdjson.JSONDeserializerFeature;
import com.thdjson.JSONToken;
import com.thdjson.entity.JSONArray;
import com.thdjson.entity.JSONElement;
import com.thdjson.entity.JSONObject;
import com.thdjson.entity.JSONValue;
import com.thdjson.entity.JSONValueType;
import java.lang.reflect.Array;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSONDeserializer_ESTest extends JSONDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = jSONDeserializer0.deserializeToObject("", class0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String> class0 = String.class;
      Map<String, String> map0 = jSONDeserializer0.deserializeToMap("{\n}", class0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 0);
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONDeserializer0.deserializeToList("[\n]", class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[0];
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject("[\n", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject("[\n]", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.thdjson.entity.JSONArray cannot be cast to class com.thdjson.entity.JSONObject (com.thdjson.entity.JSONArray and com.thdjson.entity.JSONObject are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6301df0b)
         //
         verifyException("com.thdjson.JSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject("{\n", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect string type
         //
         verifyException("com.thdjson.JSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject(jSONObject0, (Class<JSONArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap("[", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap("error string : ", classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to recognize: e
         //
         verifyException("com.thdjson.JSONLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap("[\n", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap("[\n]", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.thdjson.entity.JSONArray cannot be cast to class com.thdjson.entity.JSONObject (com.thdjson.entity.JSONArray and com.thdjson.entity.JSONObject are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6301df0b)
         //
         verifyException("com.thdjson.JSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap("N:4TaH", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to recognize: N
         //
         verifyException("com.thdjson.JSONLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashMap<String, JSONValue> linkedHashMap0 = new LinkedHashMap<String, JSONValue>(65, 65, true);
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      JSONValueType jSONValueType0 = JSONValueType.NULL;
      JSONElement jSONElement0 = new JSONElement("7F&'kIcrEl{aP", jSONValueType0);
      jSONObject0.put("*i@P5C^`g?qw.(uEr", (JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      linkedHashMap0.put("7F&'kIcrEl{aP", (JSONValue) null);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("float (v>rflow: ", jSONValueType0);
      jSONObject0.put("float (v>rflow: ", (JSONValue) jSONElement0);
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      LinkedHashMap<String, JSONValue> linkedHashMap0 = new LinkedHashMap<String, JSONValue>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      jSONObject0.put("", (JSONValue) jSONObject0);
      Class<JSONValue>[] classArray0 = (Class<JSONValue>[]) Array.newInstance(Class.class, 2);
      Class<JSONValue> class0 = JSONValue.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("string", (JSONValue) jSONObject0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String> class0 = String.class;
      // Undeclared exception!
      jSONDeserializer0.deserializeToMap(jSONObject0, class0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONValueType jSONValueType0 = JSONValueType.FLOAT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      jSONObject0.put("", (JSONValue) jSONElement0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONValueType jSONValueType0 = JSONValueType.OBJECT;
      JSONElement jSONElement0 = new JSONElement("", jSONValueType0);
      jSONObject0.put("", (JSONValue) jSONElement0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown type: class com.thdjson.entity.JSONArray
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToList("[\n", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToList("V~Hy0-Bk`10Ip", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to recognize: V
         //
         verifyException("com.thdjson.JSONLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((JSONValue) jSONArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      jSONDeserializer0.deserializeToList(jSONArray0, class0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToArray("[\n", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.entity.JSONElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToArray("{\n}", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.thdjson.entity.JSONObject cannot be cast to class com.thdjson.entity.JSONArray (com.thdjson.entity.JSONObject and com.thdjson.entity.JSONArray are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6301df0b)
         //
         verifyException("com.thdjson.JSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToArray("^2Q[*`sty", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to recognize: ^
         //
         verifyException("com.thdjson.JSONLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToArray(jSONArray0, (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = null;
      try {
        jSONDeserializer0 = new JSONDeserializer((JSONDeserializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONDeserializer0.deserializeToList((JSONArray) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = jSONDeserializer0.deserializeToArray((JSONArray) null, class0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[8];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.AllowNonPublic;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[1] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[2] = jSONDeserializerFeatureArray0[1];
      jSONDeserializerFeatureArray0[3] = jSONDeserializerFeatureArray0[0];
      jSONDeserializerFeatureArray0[4] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[5] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[6] = jSONDeserializerFeatureArray0[1];
      jSONDeserializerFeatureArray0[7] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 7);
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap((JSONObject) null, classArray0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[9];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[1] = jSONDeserializerFeatureArray0[0];
      jSONDeserializerFeatureArray0[2] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[3] = jSONDeserializerFeatureArray0[1];
      jSONDeserializerFeatureArray0[4] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[5] = jSONDeserializerFeature0;
      jSONDeserializerFeatureArray0[6] = jSONDeserializerFeatureArray0[2];
      jSONDeserializerFeatureArray0[7] = jSONDeserializerFeatureArray0[5];
      jSONDeserializerFeatureArray0[8] = jSONDeserializerFeatureArray0[6];
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      Class<String> class0 = String.class;
      Map<String, String> map0 = jSONDeserializer0.deserializeToMap((JSONObject) null, class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((JSONValue) jSONArray0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToList(jSONArray0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.NULL;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToList(jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown type: class com.thdjson.entity.JSONArray
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONValueType jSONValueType0 = JSONValueType.STRING;
      JSONElement jSONElement0 = new JSONElement("float overflow: ", jSONValueType0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("float overflow: ", (JSONValue) jSONElement0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashMap<String, JSONValue> linkedHashMap0 = new LinkedHashMap<String, JSONValue>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      JSONValueType jSONValueType0 = JSONValueType.ARRAY;
      JSONElement jSONElement0 = new JSONElement("@W<", jSONValueType0);
      jSONObject0.put("5=m~aiGB3f0zP&=Ho<+", (JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown type: null
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      jSONObject0.put("TjT>0f", (JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONValueType jSONValueType0 = JSONValueType.STRING;
      JSONElement jSONElement0 = new JSONElement("float overflow: ", jSONValueType0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("float overflow: ", (JSONValue) jSONElement0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown type: null
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      jSONObject0.put("", (JSONValue) jSONElement0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 15);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONToken jSONToken0 = JSONToken.FLOAT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      jSONObject0.put("", (JSONValue) jSONElement0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 15);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONToken jSONToken0 = JSONToken.INT;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N*Z]nt]bXh", (JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unknown type: null
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONToken jSONToken0 = JSONToken.TRUE;
      JSONElement jSONElement0 = new JSONElement(jSONToken0);
      jSONObject0.put("TjT>0f", (JSONValue) jSONElement0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown type: null
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[1];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 7);
      jSONObject0.put("\"5tcFP", (JSONValue) null);
      Map<String, JSONArray> map0 = jSONDeserializer0.deserializeToMap(jSONObject0, classArray0[3]);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.IgnoreNotMatch;
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[1];
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Class<String> class0 = String.class;
      String string0 = jSONDeserializer0.deserializeToObject(jSONObject0, class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[2];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.AllowNonPublic;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializerFeature jSONDeserializerFeature1 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[1] = jSONDeserializerFeature1;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      LinkedHashMap<String, JSONValue> linkedHashMap0 = new LinkedHashMap<String, JSONValue>();
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject(jSONObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // field \"type\" cannot match
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((JSONValue) jSONObject0);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONDeserializer0.deserializeToList(jSONArray0, class0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONDeserializer0.deserializeToList((String) null, class0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONDeserializer0.deserializeToList(jSONArray0, class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToArray(jSONArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // wrong type: class java.lang.String
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jv", (JSONValue) jSONObject0);
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[1];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 7);
      jSONObject0.put("\"5tcFP", (JSONValue) jSONObject0);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 0);
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap("", classArray0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[1];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 7);
      jSONObject0.put("\"5tcFP", (JSONValue) jSONObject0);
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToMap(jSONObject0, classArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONValue> class0 = JSONValue.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToObject(jSONObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // wrong type: interface com.thdjson.entity.JSONValue
         //
         verifyException("com.thdjson.JSONDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = jSONDeserializer0.deserializeToObject((JSONObject) null, class0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONDeserializerFeature[] jSONDeserializerFeatureArray0 = new JSONDeserializerFeature[1];
      JSONDeserializerFeature jSONDeserializerFeature0 = JSONDeserializerFeature.CaseInsensitive;
      jSONDeserializerFeatureArray0[0] = jSONDeserializerFeature0;
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer(jSONDeserializerFeatureArray0);
      JSONObject jSONObject0 = new JSONObject();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 7);
      Map<String, JSONArray> map0 = jSONDeserializer0.deserializeToMap(jSONObject0, classArray0[6]);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 0);
      Map<String, Object> map0 = jSONDeserializer0.deserializeToMap("{\n}", classArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      Map<String, JSONArray> map0 = jSONDeserializer0.deserializeToMap("8", class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = jSONDeserializer0.deserializeToObject("{\n}", class0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONDeserializer0.deserializeToList("{\n}", class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.thdjson.entity.JSONObject cannot be cast to class com.thdjson.entity.JSONArray (com.thdjson.entity.JSONObject and com.thdjson.entity.JSONArray are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6301df0b)
         //
         verifyException("com.thdjson.JSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONDeserializer jSONDeserializer0 = new JSONDeserializer();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = jSONDeserializer0.deserializeToArray("", class0);
      assertNull(jSONArray0);
  }
}
