/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 18:00:01 GMT 2022
 */

package lich.tool.encryptionAndDecryption;

import org.junit.Test;
import static org.junit.Assert.*;
import lich.tool.encryptionAndDecryption.ProviderMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProviderMode_ESTest extends ProviderMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ProviderMode.Check.contains(class0, "RSA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ProviderMode.Check.contains(class0, " ?>$;(r6I]g{k1VN\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProviderMode.Asymmetric.GM.KeyPairGenerator providerMode_Asymmetric_GM_KeyPairGenerator0 = new ProviderMode.Asymmetric.GM.KeyPairGenerator();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProviderMode.MessageDigest providerMode_MessageDigest0 = new ProviderMode.MessageDigest();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProviderMode.Asymmetric.KeyStore providerMode_Asymmetric_KeyStore0 = new ProviderMode.Asymmetric.KeyStore();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProviderMode.Asymmetric.GM.Cipher providerMode_Asymmetric_GM_Cipher0 = new ProviderMode.Asymmetric.GM.Cipher();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProviderMode.Symmetric.Cipher providerMode_Symmetric_Cipher0 = ProviderMode.Symmetric.Cipher.DESede_ECB_PKCS5Padding;
      String string0 = providerMode_Symmetric_Cipher0.getAlgorithm();
      assertEquals("DESede/ECB/PKCS5Padding", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProviderMode.Symmetric.Cipher providerMode_Symmetric_Cipher0 = ProviderMode.Symmetric.Cipher.SM4_ECB_PKCS5Padding;
      String string0 = providerMode_Symmetric_Cipher0.getKeyType();
      assertEquals("SM4", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProviderMode.Asymmetric.RSA.KeyPairGenerator providerMode_Asymmetric_RSA_KeyPairGenerator0 = new ProviderMode.Asymmetric.RSA.KeyPairGenerator();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProviderMode.Asymmetric providerMode_Asymmetric0 = new ProviderMode.Asymmetric();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProviderMode.Asymmetric.RSA.Cipher providerMode_Asymmetric_RSA_Cipher0 = new ProviderMode.Asymmetric.RSA.Cipher();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProviderMode.Asymmetric.GM providerMode_Asymmetric_GM0 = new ProviderMode.Asymmetric.GM();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProviderMode.Symmetric providerMode_Symmetric0 = new ProviderMode.Symmetric();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProviderMode.Asymmetric.RSA.Signature providerMode_Asymmetric_RSA_Signature0 = new ProviderMode.Asymmetric.RSA.Signature();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProviderMode.Asymmetric.GM.Signature providerMode_Asymmetric_GM_Signature0 = new ProviderMode.Asymmetric.GM.Signature();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProviderMode.Asymmetric.RSA providerMode_Asymmetric_RSA0 = new ProviderMode.Asymmetric.RSA();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProviderMode providerMode0 = new ProviderMode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProviderMode.Check providerMode_Check0 = new ProviderMode.Check();
  }
}
