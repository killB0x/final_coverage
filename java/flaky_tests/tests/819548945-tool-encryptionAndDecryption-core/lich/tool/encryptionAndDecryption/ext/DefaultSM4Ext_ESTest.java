/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 17:59:21 GMT 2022
 */

package lich.tool.encryptionAndDecryption.ext;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSM4Ext_ESTest extends DefaultSM4Ext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      // Undeclared exception!
      try { 
        defaultSM4Ext0.decrypt(byteArray0, byteArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/bouncycastle/jce/provider/BouncyCastleProvider
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byte[] byteArray1 = new byte[7];
      // Undeclared exception!
      try { 
        defaultSM4Ext0.encrypt(byteArray0, byteArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/bouncycastle/jce/provider/BouncyCastleProvider
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        defaultSM4Ext0.encrypt(byteArray0, byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/bouncycastle/jce/provider/BouncyCastleProvider
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[7];
      // Undeclared exception!
      try { 
        defaultSM4Ext0.encrypt(byteArray0, byteArray1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/bouncycastle/jce/provider/BouncyCastleProvider
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      try { 
        defaultSM4Ext0.encrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultSM4Ext defaultSM4Ext0 = new DefaultSM4Ext();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultSM4Ext0.encrypt(byteArray0, byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/bouncycastle/jce/provider/BouncyCastleProvider
         //
         verifyException("lich.tool.encryptionAndDecryption.ext.DefaultSM4Ext", e);
      }
  }
}
