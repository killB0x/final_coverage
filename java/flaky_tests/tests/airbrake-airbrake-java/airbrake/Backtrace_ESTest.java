/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 16:07:58 GMT 2022
 */

package airbrake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import airbrake.Backtrace;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Backtrace_ESTest extends Backtrace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      backtrace0.filter();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignore();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      String string0 = backtrace0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      String string0 = backtrace0.toBacktrace("Caused by org.evosuite.runtime.mock.java.lang.MockThrowable\nat jdk.internal.reflect.GeneratedConstructorAccessor47.newInstance(null-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nCaused by org.evosuite.runtime.mock.java.lang.MockThrowable\nat jdk.internal.reflect.GeneratedConstructorAccessor43.newInstance(null-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\n", "2@)tva<T'08n{", 3281, "");
      assertEquals("at Caused by org.evosuite.runtime.mock.java.lang.MockThrowable\nat jdk.internal.reflect.GeneratedConstructorAccessor47.newInstance(null-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nCaused by org.evosuite.runtime.mock.java.lang.MockThrowable\nat jdk.internal.reflect.GeneratedConstructorAccessor43.newInstance(null-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\n.(2@)tva<T'08n{:3,281)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Backtrace.isValidBacktrace("at null.(null:-1,498)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Backtrace.notValidBacktrace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      // Undeclared exception!
      try { 
        backtrace0.newBacktrace((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("airbrake.Backtrace", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      MockThrowable mockThrowable0 = new MockThrowable("dSF`(2i");
      // Undeclared exception!
      try { 
        backtrace0.newBacktrace(mockThrowable0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Backtrace.isValidBacktrace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      backtrace0.ignore((String) null);
      // Undeclared exception!
      try { 
        backtrace0.filter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("{9g|50^", mockThrowable0);
      Backtrace backtrace0 = null;
      try {
        backtrace0 = new Backtrace(mockThrowable1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Backtrace backtrace0 = null;
      try {
        backtrace0 = new Backtrace((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("airbrake.Backtrace", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = Backtrace.notValidBacktrace("2@)tva<T'08n{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Backtrace.isValidBacktrace("at .*org.apache.commons.jexl.util.introspection.*. Tk*0VQ_X^`^w^btM_(.*org.apache.commons.jexl.util.introspection.*:2)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      String string0 = backtrace0.toString();
      //  // Unstable assertion: assertEquals("Caused by org.evosuite.runtime.mock.java.lang.MockThrowable\nat jdk.internal.reflect.GeneratedConstructorAccessor43.newInstance(null-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\nat <evosuite>.<evosuite>(<evosuite>-1)\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      Iterator<String> iterator0 = backtrace0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("Rw.");
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      Spliterator<String> spliterator0 = backtrace0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      MockThrowable mockThrowable0 = new MockThrowable(":4~=GbKP$E:10>");
      Backtrace backtrace1 = backtrace0.newBacktrace(mockThrowable0);
      assertNotSame(backtrace0, backtrace1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = Backtrace.notValidBacktrace("at :0.eF(8!,d;{Z>Qa]IQ]`F:-2)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreJetty();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreNoise();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreJunit();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Backtrace backtrace0 = new Backtrace(linkedList0);
      backtrace0.ignoreMozilla();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backtrace backtrace0 = null;
      try {
        backtrace0 = new Backtrace((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      backtrace0.ignoreMortbayJetty();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreSpringSecurity();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreEclipse();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      backtrace0.ignoreCocoon();
  }
}
