/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 16:09:43 GMT 2022
 */

package airbrake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import airbrake.AirbrakeNotice;
import airbrake.AirbrakeNoticeBuilder;
import airbrake.Backtrace;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AirbrakeNoticeBuilder_ESTest extends AirbrakeNoticeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("EC2_PRIVATE_KEY", backtrace0, mockThrowable0, ".*org.mortbay.thread.*");
      Properties properties0 = new Properties();
      airbrakeNoticeBuilder0.environment(properties0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder(".*sun.reflect.*", mockThrowable0, ".*sun.reflect.*", (String) null);
      airbrakeNoticeBuilder0.standardEnvironmentFilters();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("EC2_PRIVATE_KEY", backtrace0, mockThrowable0, ".*org.mortbay.thread.*");
      airbrakeNoticeBuilder0.projectRoot(".*inv1.invoke.*");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backtrace backtrace0 = new Backtrace();
      MockThrowable mockThrowable0 = new MockThrowable("The API key for the project this error is from (required). Get this from the project's page in airbrake.");
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("iiz.;%jHt}6", backtrace0, mockThrowable0, "BEDO00m/N");
      airbrakeNoticeBuilder0.ec2EnvironmentFilters();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("1", mockThrowable0, "1");
      Backtrace backtrace0 = new Backtrace();
      airbrakeNoticeBuilder0.backtrace(backtrace0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder(".*org.mozilla.javascript.ScriptRuntime.*", mockThrowable0, ".*org.mozilla.javascript.ScriptRuntime.*", ".*org.mozilla.javascript.ScriptRuntime.*");
      airbrakeNoticeBuilder0.setRequest("java.class.path", ".*org.mozilla.javascript.FunctionObject.*");
      AirbrakeNotice airbrakeNotice0 = airbrakeNoticeBuilder0.newNotice();
      assertEquals(".*org.mozilla.javascript.FunctionObject.*", airbrakeNotice0.component());
      assertEquals("java.class.path", airbrakeNotice0.url());
      assertEquals("[class org.evosuite.runtime.mock.java.lang.MockThrowable]", airbrakeNotice0.errorMessage());
      assertTrue(airbrakeNotice0.hasRequest());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("1", mockThrowable0, "1");
      boolean boolean0 = airbrakeNoticeBuilder0.errorClassIs("org.evosuite.runtime.mock.java.lang.MockThrowable");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("l", "AWS_SECRET");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, "l");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.session(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("*2s&wykjn59EW", mockThrowable0);
      airbrakeNoticeBuilder0.filteredSystemProperties();
      airbrakeNoticeBuilder0.environmentFilter("*2s&wykjn59EW");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.newNotice();
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *2s&wykjn59EW
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("5h", " a!W,.@m@e/<wh", " a!W,.@m@e/<wh");
      airbrakeNoticeBuilder0.filteredSystemProperties();
      airbrakeNoticeBuilder0.environmentFilter((String) null);
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.newNotice();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("(.*", "(.*");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.errorClassIs("(.*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("}Y}", "}Y}", "}Y}");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.environment((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("!", "!");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.environment((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("mun48ubtYcGdigHA", "mun48ubtYcGdigHA");
      // Undeclared exception!
      try { 
        airbrakeNoticeBuilder0.addSessionKey((String) null, "mun48ubtYcGdigHA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("(Mrqp|Rz+F0HT{M<c", mockThrowable0);
      mockThrowable0.initCause(mockThrowable1);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("(Mrqp|Rz+F0HT{M<c", mockThrowable0, "(Mrqp|Rz+F0HT{M<c", "(Mrqp|Rz+F0HT{M<c");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, mockThrowable0, (String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("", mockThrowable0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("caV-u.}e+j(}AM", mockThrowable0, "caV-u.}e+j(}AM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, mockThrowable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(";>O3WV|X4");
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder(";>O3WV|X4", mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, (String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, backtrace0, mockThrowable0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("u+Y<X,X", (Backtrace) null, mockThrowable0, "u+Y<X,X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("1", mockThrowable0, "1");
      boolean boolean0 = airbrakeNoticeBuilder0.errorClassIs("<p--T?Ejq:o^V2v8M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("EC2_PRIVATE_KEY", backtrace0, mockThrowable0, ".*org.mortbay.thread.*");
      AirbrakeNotice airbrakeNotice0 = airbrakeNoticeBuilder0.newNotice();
      assertFalse(airbrakeNotice0.hasRequest());
      assertEquals("EC2_PRIVATE_KEY", airbrakeNotice0.apiKey());
      assertEquals(".*org.mortbay.thread.*", airbrakeNotice0.env());
      assertEquals("[class org.evosuite.runtime.mock.java.lang.MockThrowable]", airbrakeNotice0.errorMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = null;
      try {
        airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder((String) null, mockThrowable0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The API key for the project this error is from (required). Get this from the project's page in airbrake.
         //
         verifyException("airbrake.AirbrakeNoticeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("EC2_PRIVATE_KEY", backtrace0, mockThrowable0, ".*org.mortbay.thread.*");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      airbrakeNoticeBuilder0.session(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("*2s&wykjn59EW", mockThrowable0);
      airbrakeNoticeBuilder0.addSessionKey("/#hh8\"'Ka", "w~^MRm{q}_A");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("c8XCT#9Pd", "c8XCT#9Pd");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      airbrakeNoticeBuilder0.request(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("java.class.path");
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("java.class.path", mockThrowable0, "+", ".*sun.reflect.*");
      airbrakeNoticeBuilder0.filteredSystemProperties();
      airbrakeNoticeBuilder0.filteredSystemProperties();
      airbrakeNoticeBuilder0.newNotice();
      airbrakeNoticeBuilder0.newNotice();
      airbrakeNoticeBuilder0.newNotice();
      airbrakeNoticeBuilder0.newNotice();
      airbrakeNoticeBuilder0.newNotice();
      // Undeclared exception!
      airbrakeNoticeBuilder0.newNotice();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Backtrace backtrace0 = new Backtrace(mockThrowable0);
      AirbrakeNoticeBuilder airbrakeNoticeBuilder0 = new AirbrakeNoticeBuilder("EC2_PRIVATE_KEY", backtrace0, mockThrowable0, ".*org.mortbay.thread.*");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      airbrakeNoticeBuilder0.environment(hashMap0);
      assertEquals(0, hashMap0.size());
  }
}
