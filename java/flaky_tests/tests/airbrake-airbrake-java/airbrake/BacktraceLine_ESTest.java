/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 16:14:19 GMT 2022
 */

package airbrake;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import airbrake.BacktraceLine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BacktraceLine_ESTest extends BacktraceLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("at .(:-1)", "", 168, "");
      assertEquals("", backtraceLine0.methodName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("28,.s_J5x9z(~/");
      assertEquals("s_J5x9z", backtraceLine0.methodName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("at .(:-1)");
      String string0 = backtraceLine0.toString();
      assertEquals("at ..(:-1)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine((String) null, (String) null, 0, (String) null);
      String string0 = backtraceLine0.methodName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("");
      String string0 = backtraceLine0.methodName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("`]~xbjqHQc*FVe", "`]~xbjqHQc*FVe", 1, "`]~xbjqHQc*FVe");
      int int0 = backtraceLine0.lineNumber();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("");
      int int0 = backtraceLine0.lineNumber();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine((String) null, (String) null, 0, (String) null);
      String string0 = backtraceLine0.fileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("");
      String string0 = backtraceLine0.fileName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine((String) null, (String) null, 0, (String) null);
      String string0 = backtraceLine0.className();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("");
      String string0 = backtraceLine0.className();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BacktraceLine backtraceLine0 = null;
      try {
        backtraceLine0 = new BacktraceLine((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("airbrake.BacktraceLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("s.A?V?");
      backtraceLine0.fileName();
      assertEquals("A?V?", backtraceLine0.methodName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("");
      String string0 = backtraceLine0.toXml();
      assertEquals("<line method=\".\" file=\"\" number=\"-1\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("Sr`D$m_^mN\"^+Gt", "yX<s)}0w?R9pn4~", (-4034), "yX<s)}0w?R9pn4~");
      String string0 = backtraceLine0.className();
      assertEquals("Sr`D$m_^mN\"^+Gt", string0);
      assertEquals("yX<s)}0w?R9pn4~", backtraceLine0.methodName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("^at ");
      String string0 = backtraceLine0.methodName();
      assertEquals("^at ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BacktraceLine backtraceLine0 = new BacktraceLine("m!5wrMWxU|q+4Qyk", "m!5wrMWxU|q+4Qyk", 0, "m!5wrMWxU|q+4Qyk");
      int int0 = backtraceLine0.lineNumber();
      assertEquals(0, int0);
  }
}
