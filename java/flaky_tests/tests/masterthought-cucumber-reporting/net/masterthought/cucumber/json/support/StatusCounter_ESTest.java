/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 00:02:18 GMT 2022
 */

package net.masterthought.cucumber.json.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import net.masterthought.cucumber.json.Step;
import net.masterthought.cucumber.json.support.Resultsable;
import net.masterthought.cucumber.json.support.Status;
import net.masterthought.cucumber.json.support.StatusCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatusCounter_ESTest extends StatusCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatusCounter statusCounter0 = new StatusCounter();
      int int0 = statusCounter0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      Status status0 = Status.PASSED;
      Status status1 = Status.UNDEFINED;
      linkedHashSet0.add(status1);
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      int int0 = statusCounter0.getValueFor(status0);
      assertEquals(1, statusCounter0.size());
      assertEquals(1, int0);
      assertEquals(Status.PASSED, statusCounter0.getFinalStatus());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatusCounter statusCounter0 = new StatusCounter();
      statusCounter0.getFinalStatus();
      assertEquals(0, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatusCounter statusCounter0 = new StatusCounter();
      // Undeclared exception!
      try { 
        statusCounter0.incrementFor((Status) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.masterthought.cucumber.json.support.StatusCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatusCounter statusCounter0 = new StatusCounter();
      Status status0 = Status.PASSED;
      statusCounter0.incrementFor(status0);
      assertEquals(1, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[0];
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0);
      assertEquals(0, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      Status status0 = Status.PASSED;
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      int int0 = statusCounter0.getValueFor(status0);
      assertEquals(0, int0);
      assertEquals(Status.FAILED, statusCounter0.getFinalStatus());
      assertEquals(1, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      Status status0 = Status.PASSED;
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      statusCounter0.incrementFor(status0);
      assertEquals(2, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      Status status0 = Status.UNDEFINED;
      linkedHashSet0.add(status0);
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      statusCounter0.incrementFor(status0);
      assertEquals(2, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Step step0 = new Step();
      Resultsable[] resultsableArray0 = new Resultsable[2];
      resultsableArray0[0] = (Resultsable) step0;
      StatusCounter statusCounter0 = null;
      try {
        statusCounter0 = new StatusCounter(resultsableArray0, (Set<Status>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.masterthought.cucumber.json.support.StatusCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[2];
      StatusCounter statusCounter0 = null;
      try {
        statusCounter0 = new StatusCounter(resultsableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.masterthought.cucumber.json.support.StatusCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      Status status0 = statusCounter0.getFinalStatus();
      assertEquals(Status.FAILED, status0);
      assertEquals(1, statusCounter0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Resultsable[] resultsableArray0 = new Resultsable[1];
      Step step0 = new Step();
      resultsableArray0[0] = (Resultsable) step0;
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      StatusCounter statusCounter0 = new StatusCounter(resultsableArray0, linkedHashSet0);
      int int0 = statusCounter0.size();
      assertEquals(Status.FAILED, statusCounter0.getFinalStatus());
      assertEquals(1, int0);
  }
}
