/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 23:55:32 GMT 2022
 */

package net.masterthought.cucumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.json.support.Status;
import net.masterthought.cucumber.presentation.PresentationMode;
import net.masterthought.cucumber.reducers.ReducingMethod;
import net.masterthought.cucumber.sorting.SortingMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K", "K");
      Configuration configuration0 = new Configuration(mockFile0, "K");
      configuration0.setTrends(mockFile0, (-2516));
      boolean boolean0 = configuration0.isTrendsAvailable();
      assertEquals((-2516), configuration0.getTrendsLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile(".xFq Fn-uF]", ".xFq Fn-uF]");
      Configuration configuration0 = new Configuration(file0, "PXUvaxse%#drY`Ls^");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.xFq Fn-uF]0.xFq Fn-uF]");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      configuration0.setTrends(file0, 2499);
      configuration0.getTrendsStatsFile();
      assertTrue(configuration0.isTrendsAvailable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Configuration configuration0 = new Configuration(mockFile0, "Ie6,~t/b,aHRj]G}a");
      configuration0.setTrendsStatsFile(mockFile0);
      configuration0.getTrendsStatsFile();
      assertTrue(configuration0.isTrendsAvailable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cucumber-html-reports", "cucumber-html-reports");
      Configuration configuration0 = new Configuration(mockFile0, (String) null);
      MockFile mockFile1 = new MockFile("l3A@:");
      configuration0.setTrendsStatsFile(mockFile1);
      configuration0.getTrendsStatsFile();
      assertTrue(configuration0.isTrendsAvailable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Oq27ZVorj3@", "Oq27ZVorj3@");
      Configuration configuration0 = new Configuration(mockFile0, (String) null);
      configuration0.setTrends(mockFile0, 8);
      int int0 = configuration0.getTrendsLimit();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      configuration0.setTrends(file0, (-1));
      int int0 = configuration0.getTrendsLimit();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("PASSED", "PASSED");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/PASSED0PASSED");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "PASSED");
      Configuration configuration0 = new Configuration(file0, "EXPAND_ALL_STEPS");
      File file1 = configuration0.getReportDirectory();
      assertFalse(file1.isHidden());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_", "_");
      Configuration configuration0 = new Configuration(mockFile0, "_");
      mockFile0.mkdirs();
      File file0 = configuration0.getReportDirectory();
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_");
      Configuration configuration0 = new Configuration(mockFile0, "_");
      File file0 = configuration0.getReportDirectory();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Configuration configuration0 = new Configuration(mockFile0, "");
      ReducingMethod reducingMethod0 = ReducingMethod.MERGE_FEATURES_BY_ID;
      configuration0.addReducingMethod(reducingMethod0);
      List<ReducingMethod> list0 = configuration0.getReducingMethods();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")$iRf-VdVha", ")$iRf-VdVha");
      Configuration configuration0 = new Configuration(mockFile0, "jXS");
      configuration0.setQualifier(")$iRf-VdVha", ")m1T)iy+D0P0`Qhv%9");
      String string0 = configuration0.getQualifier(")$iRf-VdVha");
      assertEquals(")m1T)iy+D0P0`Qhv%9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_", "_");
      Configuration configuration0 = new Configuration(mockFile0, "_");
      String string0 = configuration0.getProjectName();
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Configuration configuration0 = new Configuration(mockFile0, "");
      String string0 = configuration0.getProjectName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "net.masterthought.cucumber.reducers.ReducingMethod");
      LinkedHashSet<Status> linkedHashSet0 = new LinkedHashSet<Status>();
      configuration0.setNotFailingStatuses(linkedHashSet0);
      Set<Status> set0 = configuration0.getNotFailingStatuses();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EXPAND_ALL_STEPS");
      Configuration configuration0 = new Configuration(mockFile0, "EXPAND_ALL_STEPS");
      configuration0.addCustomJsFiles((List<String>) null);
      List<String> list0 = configuration0.getCustomJsFiles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("te9OY`5l(9");
      configuration0.addCustomJsFiles(linkedList0);
      List<String> list0 = configuration0.getCustomJsFiles();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "FAILED");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("xu");
      configuration0.addCustomCssFiles(linkedList0);
      List<String> list0 = configuration0.getCustomCssFiles();
      assertTrue(list0.contains("xu"));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]9lUZir~-2sBNP");
      Configuration configuration0 = new Configuration(mockFile0, "cucumber-html-reports");
      configuration0.addClassifications("M[[SU}-VcTieel", "F8;3M");
      List<Map.Entry<String, String>> list0 = (List<Map.Entry<String, String>>)configuration0.getClassifications();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile(".xFq Fn-uF]", ".xFq Fn-uF]");
      Configuration configuration0 = new Configuration(file0, "PXUvaxse%#drY`Ls^");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      configuration0.addClassificationFiles(linkedList0);
      linkedList0.add(".xFq Fn-uF]");
      List<String> list0 = configuration0.getClassificationFiles();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EXPAND_ALL_STEPS");
      Configuration configuration0 = new Configuration(mockFile0, "EXPAND_ALL_STEPS");
      List<String> list0 = configuration0.getCustomJsFiles();
      configuration0.addClassificationFiles(list0);
      List<String> list1 = configuration0.getClassificationFiles();
      assertFalse(list1.contains("EXPAND_ALL_STEPS"));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("6j]pKArM/G\"\"5UO1q", "r");
      Configuration configuration0 = new Configuration(file0, "MERGE_FEATURES_BY_ID");
      configuration0.setBuildNumber(",Q9r");
      String string0 = configuration0.getBuildNumber();
      assertEquals(",Q9r", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "NATURAL");
      configuration0.setBuildNumber("");
      String string0 = configuration0.getBuildNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8[6h", "8[6h");
      Configuration configuration0 = new Configuration(mockFile0, "8[6h");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8[6h";
      // Undeclared exception!
      try { 
        configuration0.setTagsToExcludeFromChart(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.regex.PatternSyntaxException: Unclosed character class near index 3
         // 8[6h
         //    ^
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("83^6h", "83^6h");
      Configuration configuration0 = new Configuration(mockFile0, "83^6h");
      // Undeclared exception!
      try { 
        configuration0.setTagsToExcludeFromChart((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ce^2WM((6Lnzi");
      Configuration configuration0 = new Configuration(mockFile0, "Ce^2WM((6Lnzi");
      // Undeclared exception!
      try { 
        configuration0.getEmbeddingDirectory();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "net.masterthought.cucumber.json.support.Status");
      // Undeclared exception!
      try { 
        configuration0.getDirectorySuffixWithSeparator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EXPAND_ALL_STEPS");
      Configuration configuration0 = new Configuration(mockFile0, "EXPAND_ALL_STEPS");
      boolean boolean0 = configuration0.isTrendsStatsFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/9 `Y=E3VCrG9g @sL", "/9 `Y=E3VCrG9g @sL");
      Configuration configuration0 = new Configuration(mockFile0, "/9 `Y=E3VCrG9g @sL");
      configuration0.setTrends(mockFile0, (-1));
      boolean boolean0 = configuration0.isTrendsStatsFile();
      assertEquals((-1), configuration0.getTrendsLimit());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "PENDING");
      File file0 = configuration0.getReportDirectory();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "N6_");
      configuration0.setQualifier("N6_", "N6_");
      boolean boolean0 = configuration0.containsQualifier("N6_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      boolean boolean0 = configuration0.containsQualifier("net.masterthought.cucumber.reducers.ReportFeatureAppendableMerger");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_", "_");
      Configuration configuration0 = new Configuration(mockFile0, "_");
      configuration0.setNotFailingStatuses((Set<Status>) null);
      assertEquals("_", configuration0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      PresentationMode presentationMode0 = PresentationMode.RUN_WITH_JENKINS;
      boolean boolean0 = configuration0.containsPresentationMode(presentationMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      ReducingMethod reducingMethod0 = ReducingMethod.MERGE_FEATURES_WITH_RETEST;
      boolean boolean0 = configuration0.containsReducingMethod(reducingMethod0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5&C3!ftbVn@Z+}";
      stringArray0[1] = "ug3lT=4Q'wwf";
      stringArray0[2] = "_";
      configuration0.setTagsToExcludeFromChart(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      boolean boolean0 = configuration0.isTrendsAvailable();
      assertEquals(0, configuration0.getTrendsLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ReducingMethod reducingMethod0 = ReducingMethod.MERGE_FEATURES_BY_ID;
      Configuration configuration0 = new Configuration((File) null, "SKIP_EMPTY_JSON_FILES");
      configuration0.addReducingMethod(reducingMethod0);
      boolean boolean0 = configuration0.containsReducingMethod(reducingMethod0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("u5umbe-html-repodrts");
      Configuration configuration0 = new Configuration(mockFile0, "u5umbe-html-repodrts");
      List<Map.Entry<String, String>> list0 = (List<Map.Entry<String, String>>)configuration0.getClassifications();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Oq27ZVorj3@", "Oq27ZVorj3@");
      Configuration configuration0 = new Configuration(mockFile0, (String) null);
      Collection<Pattern> collection0 = configuration0.getTagsToExcludeFromChart();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      List<String> list0 = configuration0.getCustomCssFiles();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      // Undeclared exception!
      try { 
        configuration0.getDirectorySuffix();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      String string0 = configuration0.getBuildNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "N6_");
      SortingMethod sortingMethod0 = SortingMethod.NATURAL;
      configuration0.setSortingMethod(sortingMethod0);
      assertEquals(0, configuration0.getTrendsLimit());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      SortingMethod sortingMethod0 = configuration0.getSortingMethod();
      assertEquals(SortingMethod.NATURAL, sortingMethod0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_");
      Configuration configuration0 = new Configuration(mockFile0, "_");
      PresentationMode presentationMode0 = PresentationMode.EXPAND_ALL_STEPS;
      configuration0.addPresentationModes(presentationMode0);
      boolean boolean0 = configuration0.containsPresentationMode(presentationMode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zfkr'MvzJ{4XxC6'", "zfkr'MvzJ{4XxC6'");
      Configuration configuration0 = new Configuration(mockFile0, "zfkr'MvzJ{4XxC6'");
      configuration0.setTrendsStatsFile(mockFile0);
      boolean boolean0 = configuration0.isTrendsAvailable();
      assertTrue(configuration0.isTrendsStatsFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      String string0 = configuration0.getQualifier(")m1T)iy+D0P0`Qhv%9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      configuration0.addCustomCssFiles((List<String>) null);
      List<String> list0 = configuration0.getCustomCssFiles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      configuration0.setTrends(file0, (-1));
      boolean boolean0 = configuration0.isTrendsAvailable();
      assertEquals((-1), configuration0.getTrendsLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "e+ uC%/Gc");
      configuration0.removeQualifier("e+ uC%/Gc");
      assertFalse(configuration0.isTrendsStatsFile());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      configuration0.setDirectorySuffix("J/o5|PSVPPA");
      assertNull(configuration0.getBuildNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "4[");
      configuration0.setQualifier("4[", "");
      String string0 = configuration0.getQualifier("4[");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Configuration configuration0 = new Configuration(mockFile0, "G&");
      File file0 = configuration0.getTrendsStatsFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PENDING");
      Configuration configuration0 = new Configuration(mockFile0, (String) null);
      String string0 = configuration0.getProjectName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Configuration configuration0 = new Configuration((File) null, "L");
      // Undeclared exception!
      try { 
        configuration0.getEmbeddingDirectory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.masterthought.cucumber.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")$iRf-VdVha", ")$iRf-VdVha");
      Configuration configuration0 = new Configuration(mockFile0, "jXS");
      List<String> list0 = configuration0.getClassificationFiles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      File file0 = MockFile.createTempFile("5&C3!ftbVn@Z+}", "XzI_UqMugfO1 ^w");
      Configuration configuration0 = new Configuration(file0, "ug3lT=4Q'wwf");
      int int0 = configuration0.getTrendsLimit();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      File file0 = MockFile.createTempFile("J/o5|PSVPPA", "J/o5|PSVPPA");
      Configuration configuration0 = new Configuration(file0, "J/o5|PSVPPA");
      List<ReducingMethod> list0 = configuration0.getReducingMethods();
      assertTrue(list0.isEmpty());
  }
}
