/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:04:55 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.ChNone;
import jaskell.parsec.Many;
import jaskell.parsec.ParsecException;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChNone_ESTest extends ChNone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      ChNone<Character, LinkedHashSet<Character>> chNone0 = new ChNone<Character, LinkedHashSet<Character>>("jaskell.parsec.Many1");
      State<Character, Character, LinkedHashSet<Character>> state0 = (State<Character, Character, LinkedHashSet<Character>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = chNone0.parse(state0);
      assertEquals('9', (char)character1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChNone<Character, LinkedHashSet<Character>> chNone0 = new ChNone<Character, LinkedHashSet<Character>>("p.", true);
      Character character0 = Character.valueOf('N');
      State<Character, Character, LinkedHashSet<Character>> state0 = (State<Character, Character, LinkedHashSet<Character>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = chNone0.parse(state0);
      assertEquals('N', (char)character1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChNone<Character, Character> chNone0 = new ChNone<Character, Character>("jaskell.parsec.Ahead");
      Character character0 = Character.valueOf('J');
      SimpleState<Character> simpleState0 = new SimpleState<Character>((List<Character>) null);
      ParsecException parsecException0 = simpleState0.trap("jaskell.parsec.Ahead");
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn(parsecException0).when(state0).trap(anyString());
      try { 
        chNone0.parse(state0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // jaskell.parsec.Ahead
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChNone<Character, LinkedHashSet<Character>> chNone0 = new ChNone<Character, LinkedHashSet<Character>>("");
      ChNone<LinkedHashSet<Character>, LinkedHashSet<Character>> chNone1 = new ChNone<LinkedHashSet<Character>, LinkedHashSet<Character>>("YNK");
      Many<Character, Character, Character, LinkedHashSet<Character>> many0 = new Many<Character, Character, Character, LinkedHashSet<Character>>(chNone0);
      State<Character, Character, LinkedHashSet<Character>> state0 = (State<Character, Character, LinkedHashSet<Character>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedHashSet<Character>) null).when(state0).begin();
      doReturn((Character) null).when(state0).next();
      many0.parse(state0);
      // Undeclared exception!
      try { 
        chNone1.parse((State<Character, LinkedHashSet<Character>, LinkedHashSet<Character>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChNone<Character, Character> chNone0 = null;
      try {
        chNone0 = new ChNone<Character, Character>((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChNone<Character, Character> chNone0 = null;
      try {
        chNone0 = new ChNone<Character, Character>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChNone<Character, Character> chNone0 = new ChNone<Character, Character>("");
      Character character0 = Character.valueOf('^');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = chNone0.parse(state0);
      assertEquals('^', (char)character1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChNone<Character, Character> chNone0 = new ChNone<Character, Character>("\n", true);
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).next();
      Character character0 = chNone0.parse(state0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Character character0 = Character.valueOf('^');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      ChNone<Character, Character> chNone0 = new ChNone<Character, Character>("[Z]^wm", true);
      // Undeclared exception!
      try { 
        chNone0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
