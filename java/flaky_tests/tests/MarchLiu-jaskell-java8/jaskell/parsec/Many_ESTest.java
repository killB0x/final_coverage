/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:24:51 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import jaskell.parsec.Attempt;
import jaskell.parsec.Eq;
import jaskell.parsec.Many;
import jaskell.parsec.NoneOf;
import jaskell.parsec.One;
import jaskell.parsec.ParsecException;
import jaskell.parsec.State;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Many_ESTest extends Many_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<LinkedList<Object>> linkedHashSet0 = new LinkedHashSet<LinkedList<Object>>();
      NoneOf<LinkedList<Object>, Object, Object> noneOf0 = new NoneOf<LinkedList<Object>, Object, Object>(linkedHashSet0);
      Many<LinkedList<Object>, LinkedList<Object>, Object, Object> many0 = new Many<LinkedList<Object>, LinkedList<Object>, Object, Object>(noneOf0);
      Eq<Object, LinkedList<Object>, Object> eq0 = new Eq<Object, LinkedList<Object>, Object>(many0);
      Attempt<Object, Object, LinkedList<Object>, Object> attempt0 = new Attempt<Object, Object, LinkedList<Object>, Object>(eq0);
      Many<Object, Object, LinkedList<Object>, Object> many1 = new Many<Object, Object, LinkedList<Object>, Object>(attempt0);
      State<Object, LinkedList<Object>, Object> state0 = (State<Object, LinkedList<Object>, Object>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      List<Object> list0 = many1.parse(state0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      One<Object, LinkedList<Object>, LinkedList<Object>> one0 = new One<Object, LinkedList<Object>, LinkedList<Object>>();
      Many<Object, Object, LinkedList<Object>, LinkedList<Object>> many0 = new Many<Object, Object, LinkedList<Object>, LinkedList<Object>>(one0);
      State<Object, LinkedList<Object>, LinkedList<Object>> state0 = (State<Object, LinkedList<Object>, LinkedList<Object>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).next();
      List<Object> list0 = many0.parse(state0);
      assertFalse(list0.isEmpty());
  }
}
