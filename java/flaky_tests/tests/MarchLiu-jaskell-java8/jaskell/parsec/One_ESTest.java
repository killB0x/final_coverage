/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:53:58 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Many;
import jaskell.parsec.ManyTill;
import jaskell.parsec.One;
import jaskell.parsec.SepBy1;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.io.EOFException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class One_ESTest extends One_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      Many<Integer, Integer, Integer, Integer> many0 = new Many<Integer, Integer, Integer, Integer>(one0);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).next();
      List<Integer> list0 = many0.parse(state0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(list0);
      one0.parse(simpleState0);
      many0.parse(simpleState0);
      Integer integer0 = new Integer((-1267));
      simpleState0.rollback(integer0);
      // Undeclared exception!
      try { 
        one0.parse(simpleState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      Many<Integer, Integer, Integer, Integer> many0 = new Many<Integer, Integer, Integer, Integer>(one0);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).next();
      List<Integer> list0 = many0.parse(state0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(list0);
      one0.exec(simpleState0);
      one0.parse(simpleState0);
      one0.exec(simpleState0);
      // Undeclared exception!
      try { 
        simpleState0.rollback((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      try { 
        one0.parse(simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      ManyTill<Integer, Integer, Integer, Integer, Integer> manyTill0 = new ManyTill<Integer, Integer, Integer, Integer, Integer>(one0, one0);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      List<Integer> list0 = manyTill0.parse(state0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(list0);
      try { 
        one0.parse(simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      // Undeclared exception!
      try { 
        one0.parse((State<Integer, Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.One", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      SepBy1<Integer, Integer, Integer, Integer, Integer> sepBy1_0 = new SepBy1<Integer, Integer, Integer, Integer, Integer>(one0, one0);
      State<Integer, Integer, Integer> state0 = null;
      // Undeclared exception!
      try { 
        sepBy1_0.parse((State<Integer, Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.One", e);
      }
  }
}
