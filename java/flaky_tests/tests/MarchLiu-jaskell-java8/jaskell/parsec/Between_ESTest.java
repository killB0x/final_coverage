/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:57:48 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Ahead;
import jaskell.parsec.Attempt;
import jaskell.parsec.Between;
import jaskell.parsec.Choice;
import jaskell.parsec.Eof;
import jaskell.parsec.Eq;
import jaskell.parsec.Find;
import jaskell.parsec.ManyTill;
import jaskell.parsec.Ne;
import jaskell.parsec.NoneOf;
import jaskell.parsec.One;
import jaskell.parsec.OneOf;
import jaskell.parsec.Parsec;
import jaskell.parsec.ParsecException;
import jaskell.parsec.Return;
import jaskell.parsec.SepBy;
import jaskell.parsec.SimpleState;
import jaskell.parsec.Skip;
import jaskell.parsec.Skip1;
import jaskell.parsec.State;
import java.io.EOFException;
import java.lang.reflect.Array;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Between_ESTest extends Between_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Eof<Integer, Integer, Integer> eof0 = new Eof<Integer, Integer, Integer>();
      Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer> between_In0 = new Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer>(eof0, eof0);
      Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> return0 = new Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(eof0);
      Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> find0 = new Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(return0);
      Ahead<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> ahead0 = new Ahead<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(find0);
      Skip1<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> skip1_0 = new Skip1<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(ahead0);
      Eof<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> eof1 = new Eof<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>();
      Skip<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> skip0 = new Skip<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(eof1);
      Between<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> between0 = new Between<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(skip1_0, skip0, skip1_0);
      State<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> state0 = (State<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).status();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      between0.parse(state0);
      Integer integer0 = new Integer(0);
      Ne<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> ne0 = new Ne<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>(integer0);
      Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> return1 = new Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>(eof0);
      Between<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> between1 = new Between<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>(ne0, ne0, return1);
      State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> state1 = (State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(state1).next();
      Parsec<Integer, Integer, Integer, Integer> parsec0 = between1.parse(state1);
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-856));
      Eq<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> eq0 = new Eq<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(integer0);
      Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> between_In0 = new Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(eq0, eq0);
      Parsec<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> parsec0 = new Return<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(integer0);
      LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>> linkedList0 = new LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>>();
      Choice<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> choice0 = new Choice<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(linkedList0);
      Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer>(choice0, choice0, choice0);
      LinkedList<Parsec<Integer, Integer, Integer, Integer>> linkedList1 = new LinkedList<Parsec<Integer, Integer, Integer, Integer>>();
      SimpleState<Parsec<Integer, Integer, Integer, Integer>> simpleState0 = new SimpleState<Parsec<Integer, Integer, Integer, Integer>>(linkedList1);
      try { 
        between0.parse(simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Choice Error : All parsec parser failed.
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      NoneOf<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> noneOf0 = new NoneOf<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>(linkedHashSet0);
      Between<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> between0 = new Between<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>(noneOf0, noneOf0, noneOf0);
      State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> state0 = (State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(state0).next();
      between0.exec(state0);
      State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>> state1 = (State<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(state1).next();
      between0.parse(state1);
      Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>[] parsecArray0 = (Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>[]) Array.newInstance(Parsec.class, 0);
      Choice<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>> choice0 = new Choice<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>(parsecArray0);
      LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>> linkedList0 = new LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>>();
      Choice<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> choice1 = new Choice<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(linkedList0);
      Between.In<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> between_In0 = new Between.In<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(choice0, choice1);
      Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>> parsec0 = between_In0.pack(choice0);
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> return0 = new Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(integer0);
      Find<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> find0 = new Find<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(return0);
      Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> between0 = new Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>((Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>) null, find0, find0);
      Ahead<Integer, Integer, Integer, Integer> ahead0 = new Ahead<Integer, Integer, Integer, Integer>((Parsec<Integer, Integer, Integer, Integer>) null);
      Attempt<Integer, Integer, Integer, Integer> attempt0 = new Attempt<Integer, Integer, Integer, Integer>(ahead0);
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between1 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>(attempt0, (Parsec<Integer, Integer, Integer, Integer>) null, ahead0);
      Eof<Integer, Integer, Integer> eof0 = new Eof<Integer, Integer, Integer>();
      Parsec<Integer, Integer, Integer, Integer> parsec0 = between1.then((Parsec<Integer, Integer, Integer, Integer>) eof0);
      Return<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> return1 = new Return<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(parsec0);
      Between.In<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> between_In0 = new Between.In<Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(return1, return1);
      between_In0.pack(return1);
      Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer> between2 = new Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer>((Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null, (Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null, (Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      Attempt<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> attempt1 = new Attempt<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(between2);
      Between.In<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer> between_In1 = new Between.In<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer, Integer>(attempt1, (Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>) null);
      between_In1.pack(between2);
      Return<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> return2 = new Return<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(integer0);
      Skip<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> skip0 = new Skip<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(return2);
      Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> between_In2 = new Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(skip0, skip0);
      between_In2.pack(return2);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>((List<Integer>) null);
      // Undeclared exception!
      try { 
        between1.parse(simpleState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer> attempt0 = new Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer>((Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer>) null);
      Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer> find0 = new Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer>(attempt0);
      Skip<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer> skip0 = new Skip<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer>(find0);
      Integer integer0 = new Integer((-1606));
      Ne<Integer, Integer, Integer> ne0 = new Ne<Integer, Integer, Integer>(integer0);
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>(ne0, ne0, ne0);
      Parsec<Integer, Integer, Integer, Integer> parsec0 = between0.over((Parsec<Integer, Integer, Integer, Integer>) ne0);
      Between.In<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> between_In0 = new Between.In<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(skip0, parsec0);
      between_In0.pack(ne0);
      Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>[] parsecArray0 = (Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>[]) Array.newInstance(Parsec.class, 4);
      Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> return0 = new Return<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(parsec0);
      Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> find1 = new Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(return0);
      Ahead<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> ahead0 = new Ahead<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(find1);
      Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> attempt1 = new Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(ahead0);
      parsecArray0[0] = (Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>) attempt1;
      Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> attempt2 = new Attempt<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(find1);
      parsecArray0[1] = (Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>) attempt2;
      Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> find2 = new Find<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(parsecArray0[0]);
      parsecArray0[2] = (Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>) find2;
      Skip1<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> skip1_0 = new Skip1<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(attempt2);
      parsecArray0[3] = (Parsec<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>) skip1_0;
      Choice<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer> choice0 = new Choice<Integer, Parsec<Integer, Integer, Integer, Integer>, Parsec<Integer, Integer, Integer, Integer>, Integer>(parsecArray0);
      LinkedList<Parsec<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>> linkedList0 = new LinkedList<Parsec<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>>();
      Choice<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> choice1 = new Choice<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(linkedList0);
      Find<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> find3 = new Find<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(choice1);
      Between<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> between1 = new Between<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(choice0, find3, find3);
      State<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> state0 = (State<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(state0).status();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        between1.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Choice", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Eof<Integer, Integer, Integer> eof0 = new Eof<Integer, Integer, Integer>();
      Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer> between_In0 = new Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer>(eof0, eof0);
      One<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>> one0 = new One<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>();
      Attempt<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> attempt0 = new Attempt<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>((Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>) null);
      Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> between0 = new Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(one0, attempt0, attempt0);
      // Undeclared exception!
      try { 
        between0.parse((State<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.One", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-854));
      Eq<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> eq0 = new Eq<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(integer0);
      Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> between_In0 = new Between.In<Integer, Integer, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer>(eq0, eq0);
      Parsec<Integer, Integer, Parsec<Integer, Integer, Integer, Integer>, Integer> parsec0 = between_In0.pack(eq0);
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>((Parsec<Integer, Integer, Integer, Integer>) null, (Parsec<Integer, Integer, Integer, Integer>) null, (Parsec<Integer, Integer, Integer, Integer>) null);
      Between.In<Integer, Integer, Integer, Integer, Integer, Integer> between_In0 = new Between.In<Integer, Integer, Integer, Integer, Integer, Integer>((Parsec<Integer, Integer, Integer, Integer>) null, between0);
      between_In0.pack((Parsec<Integer, Integer, Integer, Integer>) null);
      Parsec<Integer, Integer, Integer, Integer> parsec0 = between_In0.pack((Parsec<Integer, Integer, Integer, Integer>) null);
      between_In0.pack(between0);
      Attempt<Integer, Integer, Integer, Integer> attempt0 = new Attempt<Integer, Integer, Integer, Integer>((Parsec<Integer, Integer, Integer, Integer>) null);
      Ahead<Integer, Integer, Integer, Integer> ahead0 = new Ahead<Integer, Integer, Integer, Integer>(attempt0);
      SepBy<Integer, Integer, Integer, Integer, Integer> sepBy0 = new SepBy<Integer, Integer, Integer, Integer, Integer>(ahead0, parsec0);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(state0).begin();
      // Undeclared exception!
      try { 
        sepBy0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Attempt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Parsec<Integer, Integer, Integer, Integer>> linkedList0 = new LinkedList<Parsec<Integer, Integer, Integer, Integer>>();
      OneOf<Integer, Integer, Integer> oneOf0 = new OneOf<Integer, Integer, Integer>((Set<Integer>) null);
      Skip1<Integer, Integer, Integer, Integer> skip1_0 = new Skip1<Integer, Integer, Integer, Integer>(oneOf0);
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>(oneOf0, skip1_0, skip1_0);
      Parsec<Integer, Integer, Integer, Integer> parsec0 = between0.then((Parsec<Integer, Integer, Integer, Integer>) skip1_0);
      linkedList0.offerLast(between0);
      linkedList0.add(parsec0);
      Choice<Integer, Integer, Integer, Integer> choice0 = new Choice<Integer, Integer, Integer, Integer>(linkedList0);
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between1 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>(choice0, choice0, choice0);
      ManyTill<Integer, Integer, Integer, Integer, Integer> manyTill0 = new ManyTill<Integer, Integer, Integer, Integer, Integer>(parsec0, between0);
      Choice<Integer, Integer, Integer, Integer> choice1 = new Choice<Integer, Integer, Integer, Integer>(linkedList0);
      linkedList0.offerLast(choice1);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      // Undeclared exception!
      try { 
        manyTill0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.OneOf", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>((Parsec<Integer, Integer, Integer, Integer>) null, (Parsec<Integer, Integer, Integer, Integer>) null, (Parsec<Integer, Integer, Integer, Integer>) null);
      Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer> between_In0 = new Between.In<Integer, Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer, Integer>(between0, between0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      One<Integer, Integer, Integer> one0 = new One<Integer, Integer, Integer>();
      Between<Integer, Integer, Integer, Integer, Integer, Integer> between0 = new Between<Integer, Integer, Integer, Integer, Integer, Integer>(one0, one0, one0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      try { 
        between0.parse(simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }
}
