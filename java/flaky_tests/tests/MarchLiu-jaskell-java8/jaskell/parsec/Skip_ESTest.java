/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:31:55 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Between;
import jaskell.parsec.Choice;
import jaskell.parsec.Parsec;
import jaskell.parsec.Return;
import jaskell.parsec.SimpleState;
import jaskell.parsec.Skip;
import jaskell.parsec.State;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Skip_ESTest extends Skip_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(2232);
      Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> return0 = new Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(integer0);
      LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>>> linkedList0 = new LinkedList<Parsec<Parsec<Integer, Integer, Integer, Integer>, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>>>();
      Choice<Parsec<Integer, Integer, Integer, Integer>, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>> choice0 = new Choice<Parsec<Integer, Integer, Integer, Integer>, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>>(linkedList0);
      Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>> between0 = new Between<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>, Integer, Parsec<Integer, Integer, Integer, Integer>>(return0, choice0, return0);
      Skip<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>> skip0 = new Skip<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Parsec<Integer, Integer, Integer, Integer>>(between0);
      // Undeclared exception!
      try { 
        skip0.parse((State<Parsec<Integer, Integer, Integer, Integer>, Integer, Parsec<Integer, Integer, Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Skip", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> return0 = new Return<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(integer0);
      Skip<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer> skip0 = new Skip<Parsec<Integer, Integer, Integer, Integer>, Integer, Integer, Integer>(return0);
      LinkedList<Parsec<Integer, Integer, Integer, Integer>> linkedList0 = new LinkedList<Parsec<Integer, Integer, Integer, Integer>>();
      SimpleState<Parsec<Integer, Integer, Integer, Integer>> simpleState0 = new SimpleState<Parsec<Integer, Integer, Integer, Integer>>(linkedList0);
      Integer integer1 = skip0.parse(simpleState0);
      assertNull(integer1);
  }
}
