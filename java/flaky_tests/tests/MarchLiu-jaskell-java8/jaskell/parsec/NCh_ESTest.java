/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:22:27 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.NCh;
import jaskell.parsec.ParsecException;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import jaskell.util.Try;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NCh_ESTest extends NCh_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
      Character character1 = Character.valueOf(':');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character1).when(state0).next();
      Character character2 = nCh0.parse(state0);
      assertEquals(':', (char)character2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
      Character character1 = Character.valueOf('3');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character1).when(state0).next();
      Character character2 = nCh0.parse(state0);
      assertFalse(character2.equals((Object)character0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
      Character character1 = Character.valueOf('F');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character1).when(state0).next();
      Character character2 = nCh0.parse(state0);
      assertEquals('F', (char)character2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).next();
      // Undeclared exception!
      try { 
        nCh0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.NCh", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = null;
      try {
        nCh0 = new NCh<Character, Character>((Character) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.NCh", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0);
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).next();
      Character character1 = nCh0.parse(state0);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Character character0 = Character.valueOf('3');
      Boolean boolean0 = Boolean.TRUE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      Boolean boolean0 = Boolean.FALSE;
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0, boolean0);
      SimpleState<Character> simpleState0 = new SimpleState<Character>((List<Character>) null);
      ParsecException parsecException0 = simpleState0.trap("");
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn(character0).when(state0).status();
      doReturn(parsecException0).when(state0).trap(anyString());
      Try<Character> try0 = nCh0.exec(state0);
      assertFalse(try0.isOk());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Character character0 = Character.valueOf('?');
      NCh<Character, Character> nCh0 = new NCh<Character, Character>(character0);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      SimpleState<Character> simpleState0 = new SimpleState<Character>(linkedList0);
      ParsecException parsecException0 = simpleState0.trap("");
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn(character0).when(state0).status();
      doReturn(parsecException0).when(state0).trap(anyString());
      try { 
        nCh0.parse(state0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }
}
