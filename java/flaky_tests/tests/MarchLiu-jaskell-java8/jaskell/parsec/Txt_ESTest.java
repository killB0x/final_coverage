/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:55:16 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Ch;
import jaskell.parsec.ChIn;
import jaskell.parsec.ChNone;
import jaskell.parsec.Crlf;
import jaskell.parsec.Decimal;
import jaskell.parsec.Digit;
import jaskell.parsec.EndOfLine;
import jaskell.parsec.Int;
import jaskell.parsec.JoinCharacters;
import jaskell.parsec.JoinText;
import jaskell.parsec.NCh;
import jaskell.parsec.Newline;
import jaskell.parsec.NoWhitespace;
import jaskell.parsec.SkipSpaces;
import jaskell.parsec.SkipWhitespaces;
import jaskell.parsec.Space;
import jaskell.parsec.Text;
import jaskell.parsec.Txt;
import jaskell.parsec.UDecimal;
import jaskell.parsec.UInt;
import jaskell.parsec.Whitespace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Txt_ESTest extends Txt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChNone<Integer, Integer> chNone0 = Txt.chNone("");
      assertNotNull(chNone0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.text((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chNone((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chIn((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chIn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SkipWhitespaces<Integer, Integer> skipWhitespaces0 = Txt.skipWhiteSpaces();
      assertNotNull(skipWhitespaces0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UInt<Integer, Integer> uInt0 = Txt.uinteger();
      assertNotNull(uInt0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ch<Integer, Integer> ch0 = Txt.ch('!');
      assertNotNull(ch0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chNone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChIn<Integer, Integer> chIn0 = Txt.chIn("JOBZpP8");
      assertNotNull(chIn0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Int<Integer, Integer> int0 = Txt.integer();
      assertNotNull(int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UDecimal<Integer, Integer> uDecimal0 = Txt.udecimal();
      assertNotNull(uDecimal0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crlf<Integer, Integer> crlf0 = Txt.crlf();
      assertNotNull(crlf0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Text<Integer, Integer> text0 = Txt.text("X%6sX7W^*/Zd", false);
      assertNotNull(text0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Digit<Integer, Integer> digit0 = Txt.digit();
      assertNotNull(digit0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Text<Integer, Integer> text0 = Txt.text("");
      assertNotNull(text0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SkipSpaces<Integer, Integer> skipSpaces0 = Txt.skipSpaces();
      assertNotNull(skipSpaces0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JoinCharacters<Integer, Integer> joinCharacters0 = Txt.joinChars();
      assertNotNull(joinCharacters0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JoinText<Integer, Integer> joinText0 = Txt.joining();
      assertNotNull(joinText0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChIn<Integer, Integer> chIn0 = Txt.chIn("\"\"&7IQpRR_So([v", true);
      assertNotNull(chIn0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NCh<Integer, Integer> nCh0 = Txt.nCh('\\', false);
      assertNotNull(nCh0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoWhitespace<Integer, Integer> noWhitespace0 = Txt.noWhitespace();
      assertNotNull(noWhitespace0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EndOfLine<Integer, Integer> endOfLine0 = Txt.eol();
      assertNotNull(endOfLine0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Space<Integer, Integer> space0 = Txt.space();
      assertNotNull(space0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChNone<Integer, Integer> chNone0 = Txt.chNone("UgVUCH", true);
      assertNotNull(chNone0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitespace<Integer, Integer> whitespace0 = Txt.whitespace();
      assertNotNull(whitespace0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Decimal<Integer, Integer> decimal0 = Txt.decimal();
      assertNotNull(decimal0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Newline<Integer, Integer> newline0 = Txt.newline();
      assertNotNull(newline0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NCh<Integer, Integer> nCh0 = Txt.nCh('q');
      assertNotNull(nCh0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ch<Integer, Integer> ch0 = Txt.ch('', false);
      assertNotNull(ch0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Txt txt0 = new Txt();
  }
}
