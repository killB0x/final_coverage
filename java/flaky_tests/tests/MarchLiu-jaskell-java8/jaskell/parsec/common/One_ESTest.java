/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:30:59 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.One;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import java.io.EOFException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class One_ESTest extends One_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      One<Object> one0 = new One<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList0);
      Object object1 = one0.parse((State<Object>) simpleState0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      One<Object> one0 = new One<Object>();
      // Undeclared exception!
      try { 
        one0.parse((State<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.One", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      One<LinkedList<Integer>> one0 = new One<LinkedList<Integer>>();
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      SimpleState<LinkedList<Integer>> simpleState0 = new SimpleState<LinkedList<Integer>>(linkedList0);
      Integer integer0 = Integer.valueOf((-837));
      simpleState0.rollback(integer0);
      // Undeclared exception!
      try { 
        one0.parse((State<LinkedList<Integer>>) simpleState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -837, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      One<Object> one0 = new One<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList0);
      try { 
        one0.parse((State<Object>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }
}
