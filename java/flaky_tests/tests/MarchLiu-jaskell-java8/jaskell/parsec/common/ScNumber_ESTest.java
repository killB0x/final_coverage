/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:26:59 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Newline;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.ScNumber;
import jaskell.parsec.common.SepBy;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.Skip1;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import java.io.EOFException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScNumber_ESTest extends ScNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScNumber scNumber0 = new ScNumber();
      TxtState txtState0 = new TxtState("SV{", "SV{");
      try { 
        scNumber0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expect 
         //  is digit.
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScNumber scNumber0 = new ScNumber();
      try { 
        scNumber0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Digit", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScNumber scNumber0 = new ScNumber();
      TxtState txtState0 = new TxtState("");
      Integer integer0 = new Integer((-4174));
      txtState0.rollback(integer0);
      try { 
        scNumber0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScNumber scNumber0 = new ScNumber();
      Newline newline0 = new Newline();
      Skip1<Character, Object> skip1_0 = new Skip1<Character, Object>((Parsec<Character, Object>) null);
      SepBy<Character, Character, Object> sepBy0 = new SepBy<Character, Character, Object>(newline0, skip1_0);
      TxtState txtState0 = new TxtState(")lrK>z<QJfq8l", "3!#5,H,zr'");
      List<Character> list0 = sepBy0.parse((State<Character>) txtState0);
      SimpleState<Character> simpleState0 = new SimpleState<Character>(list0);
      try { 
        scNumber0.parse((State<Character>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScNumber scNumber0 = new ScNumber();
      TxtState txtState0 = new TxtState("38G8<+4s pwF(o]qdf(");
      String string0 = scNumber0.parse((State<Character>) txtState0);
      assertEquals("38", string0);
  }
}
