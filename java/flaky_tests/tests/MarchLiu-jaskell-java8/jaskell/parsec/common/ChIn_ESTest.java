/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 09:53:30 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.ChIn;
import jaskell.parsec.common.Many;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.SkipSpaces;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import jaskell.util.Try;
import java.io.EOFException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChIn_ESTest extends ChIn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChIn chIn0 = new ChIn(")A9Ckf");
      TxtState txtState0 = new TxtState(")A9Ckf");
      chIn0.parse((State<Character>) txtState0);
      chIn0.parse((State<Character>) txtState0);
      Character character0 = chIn0.parse((State<Character>) txtState0);
      assertEquals('9', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChIn chIn0 = new ChIn("U+b6j=('e]Jk");
      TxtState txtState0 = new TxtState("U+b6j=('e]Jk", "U+b6j=('e]Jk");
      try { 
        chIn0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect any char in [b, u, e, 6, ', (, j, +, k, =, ], ] (case sensitive false) but get 
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChIn chIn0 = new ChIn("aMtQRIB{*FO!f:]v");
      // Undeclared exception!
      try { 
        chIn0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChIn chIn0 = new ChIn("^n~hX(U6gVG$\"kG");
      SkipSpaces skipSpaces0 = new SkipSpaces();
      Many<Character, Character> many0 = new Many<Character, Character>(skipSpaces0);
      TxtState txtState0 = new TxtState("^n~hX(U6gVG$\"kG");
      List<Character> list0 = many0.parse((State<Character>) txtState0);
      SimpleState<Character> simpleState0 = new SimpleState<Character>(list0);
      // Undeclared exception!
      try { 
        chIn0.parse((State<Character>) simpleState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChIn chIn0 = new ChIn("~u-..");
      TxtState txtState0 = new TxtState("~u-..");
      Integer integer0 = new Integer((-1));
      txtState0.rollback(integer0);
      // Undeclared exception!
      try { 
        chIn0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChIn chIn0 = new ChIn("");
      TxtState txtState0 = new TxtState("");
      try { 
        chIn0.parse((State<Character>) txtState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChIn chIn0 = null;
      try {
        chIn0 = new ChIn((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChIn chIn0 = null;
      try {
        chIn0 = new ChIn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChIn chIn0 = new ChIn("jaskell.parsec.ParsecException", true);
      Try<Character> try0 = chIn0.exec("jaskell.parsec.ParsecException");
      assertFalse(try0.isErr());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ChIn chIn0 = new ChIn("", true);
      Try<Character> try0 = chIn0.exec(", ");
      assertFalse(try0.isOk());
  }
}
