/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:13:09 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Ahead;
import jaskell.parsec.common.Choice;
import jaskell.parsec.common.Eof;
import jaskell.parsec.common.Many1;
import jaskell.parsec.common.NoneOf;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.Return;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.Skip1;
import jaskell.parsec.common.State;
import java.io.EOFException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Many1_ESTest extends Many1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Parsec<Object, Object>> linkedList0 = new LinkedList<Parsec<Object, Object>>();
      Choice<Object, Object> choice0 = new Choice<Object, Object>(linkedList0);
      Many1<Object, Object> many1_0 = new Many1<Object, Object>(choice0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList1);
      try { 
        many1_0.parse((State<Object>) simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Choice Error : All parsec parser failed.
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Eof<Object> eof0 = new Eof<Object>();
      Many1<Object, Object> many1_0 = new Many1<Object, Object>(eof0);
      SimpleState<Object> simpleState0 = new SimpleState<Object>((List<Object>) null);
      try { 
        many1_0.parse((State<Object>) simpleState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(linkedList0);
      NoneOf<Object> noneOf0 = new NoneOf<Object>(linkedHashSet0);
      Skip1<Object, Object> skip1_0 = new Skip1<Object, Object>(noneOf0);
      Many1<Object, Object> many1_0 = new Many1<Object, Object>(skip1_0);
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList0);
      try { 
        many1_0.parse((State<Object>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Return<LinkedList<Object>, Object> return0 = new Return<LinkedList<Object>, Object>((Object) null);
      Ahead<LinkedList<Object>, Object> ahead0 = new Ahead<LinkedList<Object>, Object>(return0);
      Many1<LinkedList<Object>, Object> many1_0 = new Many1<LinkedList<Object>, Object>(ahead0);
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SimpleState<LinkedList<Object>> simpleState0 = new SimpleState<LinkedList<Object>>(linkedList0);
      List<Object> list0 = many1_0.parse((State<LinkedList<Object>>) simpleState0);
      assertFalse(list0.isEmpty());
  }
}
