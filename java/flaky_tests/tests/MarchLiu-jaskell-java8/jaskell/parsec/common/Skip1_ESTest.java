/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:51:52 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Choice;
import jaskell.parsec.common.Eq;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.Skip;
import jaskell.parsec.common.Skip1;
import jaskell.parsec.common.State;
import java.io.EOFException;
import java.lang.reflect.Array;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Skip1_ESTest extends Skip1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Parsec<LinkedList<Integer>, Integer>> linkedList0 = new LinkedList<Parsec<LinkedList<Integer>, Integer>>();
      Choice<LinkedList<Integer>, Integer> choice0 = new Choice<LinkedList<Integer>, Integer>(linkedList0);
      Skip1<LinkedList<Integer>, Integer> skip1_0 = new Skip1<LinkedList<Integer>, Integer>(choice0);
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      SimpleState<LinkedList<Integer>> simpleState0 = new SimpleState<LinkedList<Integer>>(linkedList1);
      try { 
        skip1_0.parse((State<LinkedList<Integer>>) simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Choice Error : All parsec parser failed.
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Skip1<Integer, Integer> skip1_0 = new Skip1<Integer, Integer>((Parsec<Integer, Integer>) null);
      try { 
        skip1_0.parse((State<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Skip1", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      Eq<Integer> eq0 = new Eq<Integer>(integer0);
      Skip1<Integer, Integer> skip1_0 = new Skip1<Integer, Integer>(eq0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      try { 
        skip1_0.parse((State<Integer>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parsec<Integer, LinkedList<Integer>>[] parsecArray0 = (Parsec<Integer, LinkedList<Integer>>[]) Array.newInstance(Parsec.class, 0);
      Choice<Integer, LinkedList<Integer>> choice0 = new Choice<Integer, LinkedList<Integer>>(parsecArray0);
      Skip<Integer, LinkedList<Integer>> skip0 = new Skip<Integer, LinkedList<Integer>>(choice0);
      Skip1<Integer, LinkedList<Integer>> skip1_0 = new Skip1<Integer, LinkedList<Integer>>(skip0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      LinkedList<Integer> linkedList1 = skip1_0.parse((State<Integer>) simpleState0);
      assertNull(linkedList1);
  }
}
