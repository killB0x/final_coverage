/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:18:51 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Attempt;
import jaskell.parsec.common.Choice;
import jaskell.parsec.common.Find;
import jaskell.parsec.common.NoneOf;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.Return;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.Skip1;
import jaskell.parsec.common.State;
import java.io.EOFException;
import java.lang.reflect.Array;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attempt_ESTest extends Attempt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parsec<Parsec<Integer, Integer>, LinkedList<Integer>>[] parsecArray0 = (Parsec<Parsec<Integer, Integer>, LinkedList<Integer>>[]) Array.newInstance(Parsec.class, 6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Return<Parsec<Integer, Integer>, LinkedList<Integer>> return0 = new Return<Parsec<Integer, Integer>, LinkedList<Integer>>(linkedList0);
      Skip1<Parsec<Integer, Integer>, LinkedList<Integer>> skip1_0 = new Skip1<Parsec<Integer, Integer>, LinkedList<Integer>>(return0);
      Find<Parsec<Integer, Integer>, LinkedList<Integer>> find0 = new Find<Parsec<Integer, Integer>, LinkedList<Integer>>(skip1_0);
      parsecArray0[0] = (Parsec<Parsec<Integer, Integer>, LinkedList<Integer>>) find0;
      Choice<Parsec<Integer, Integer>, LinkedList<Integer>> choice0 = new Choice<Parsec<Integer, Integer>, LinkedList<Integer>>(parsecArray0);
      Attempt<Parsec<Integer, Integer>, LinkedList<Integer>> attempt0 = new Attempt<Parsec<Integer, Integer>, LinkedList<Integer>>(choice0);
      LinkedList<Parsec<Integer, Integer>> linkedList1 = new LinkedList<Parsec<Integer, Integer>>();
      SimpleState<Parsec<Integer, Integer>> simpleState0 = new SimpleState<Parsec<Integer, Integer>>(linkedList1);
      LinkedList<Integer> linkedList2 = attempt0.parse((State<Parsec<Integer, Integer>>) simpleState0);
      assertNull(linkedList2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      NoneOf<Integer> noneOf0 = new NoneOf<Integer>(linkedHashSet0);
      Return<LinkedList<Integer>, Parsec<Integer, Integer>> return0 = new Return<LinkedList<Integer>, Parsec<Integer, Integer>>(noneOf0);
      Attempt<LinkedList<Integer>, Parsec<Integer, Integer>> attempt0 = new Attempt<LinkedList<Integer>, Parsec<Integer, Integer>>(return0);
      SimpleState<LinkedList<Integer>> simpleState0 = new SimpleState<LinkedList<Integer>>((List<LinkedList<Integer>>) null);
      Parsec<Integer, Integer> parsec0 = attempt0.parse((State<LinkedList<Integer>>) simpleState0);
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleState<LinkedList<Integer>> simpleState0 = new SimpleState<LinkedList<Integer>>((List<LinkedList<Integer>>) null);
      LinkedList<Parsec<LinkedList<Integer>, Integer>> linkedList0 = new LinkedList<Parsec<LinkedList<Integer>, Integer>>();
      Choice<LinkedList<Integer>, Integer> choice0 = new Choice<LinkedList<Integer>, Integer>(linkedList0);
      Attempt<LinkedList<Integer>, Integer> attempt0 = new Attempt<LinkedList<Integer>, Integer>(choice0);
      try { 
        attempt0.parse((State<LinkedList<Integer>>) simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Choice Error : All parsec parser failed.
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Return<Integer, LinkedList<Integer>> return0 = new Return<Integer, LinkedList<Integer>>(linkedList0);
      Attempt<Integer, LinkedList<Integer>> attempt0 = new Attempt<Integer, LinkedList<Integer>>(return0);
      try { 
        attempt0.parse((State<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Attempt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      NoneOf<Integer> noneOf0 = new NoneOf<Integer>(linkedHashSet0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Attempt<Integer, Integer> attempt0 = new Attempt<Integer, Integer>(noneOf0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      try { 
        attempt0.parse((State<Integer>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }
}
