/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:24:47 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Ch;
import jaskell.parsec.common.ChIn;
import jaskell.parsec.common.Digit;
import jaskell.parsec.common.Many1;
import jaskell.parsec.common.Newline;
import jaskell.parsec.common.SkipSpaces;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import java.io.EOFException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ch_ESTest extends Ch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TxtState txtState0 = new TxtState("CiHI");
      Character character0 = txtState0.next();
      Boolean boolean0 = Boolean.valueOf(false);
      Ch ch0 = new Ch(character0, boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TxtState txtState0 = new TxtState("jaskell.parsec.common.EndOfLine", "jaskell.parsec.common.EndOfLine");
      Newline newline0 = new Newline();
      Character character0 = newline0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("jaskell.parsec.common.EndOfLine");
      Ch ch0 = new Ch(character0, boolean0);
      TxtState txtState1 = new TxtState("jaskell.parsec.common.EndOfLine", "jaskell.parsec.common.EndOfLine");
      Character character1 = ch0.parse((State<Character>) txtState1);
      assertEquals('\n', (char)character1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Digit digit0 = new Digit();
      TxtState txtState0 = new TxtState("00Jh)gv]CtJ5");
      Character character0 = digit0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("00Jh)gv]CtJ5");
      Ch ch0 = new Ch(character0, boolean0);
      Character character1 = ch0.parse((State<Character>) txtState0);
      assertEquals('0', (char)character1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Ch ch0 = new Ch((Character) null);
      try { 
        ch0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Ch", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Ch ch0 = new Ch((Character) null);
      TxtState txtState0 = new TxtState("jaskell.parsec.common.Ch");
      Integer integer0 = new Integer((-1851));
      txtState0.rollback(integer0);
      try { 
        ch0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Ch ch0 = null;
      try {
        ch0 = new Ch((Character) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Ch", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SkipSpaces skipSpaces0 = new SkipSpaces();
      Many1<Character, Character> many1_0 = new Many1<Character, Character>(skipSpaces0);
      TxtState txtState0 = new TxtState("w'W' 2vkmYX?SH", "w'W' 2vkmYX?SH");
      many1_0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("w'W' 2vkmYX?SH");
      Ch ch0 = null;
      try {
        ch0 = new Ch((Character) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Ch", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChIn chIn0 = new ChIn("yYPpxrzeof#|J`Ms3");
      TxtState txtState0 = new TxtState("yYPpxrzeof#|J`Ms3");
      Character character0 = chIn0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("yYPpxrzeof#|J`Ms3");
      Ch ch0 = new Ch(character0, boolean0);
      ch0.parse((State<Character>) txtState0);
      try { 
        ch0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect char y (case sensitive false) at 3 but P
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Ch ch0 = new Ch((Character) null);
      TxtState txtState0 = new TxtState("]h$FswYnctHF&k");
      try { 
        ch0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect char null (case sensitive true) at 1 but ]
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TxtState txtState0 = new TxtState("jaskell.parsec.common.EndOfLine", "jaskell.parsec.common.EndOfLine");
      Newline newline0 = new Newline();
      Character character0 = newline0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("jaskell.parsec.common.EndOfLine");
      Ch ch0 = new Ch(character0, boolean0);
      try { 
        ch0.parse((State<Character>) txtState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }
}
