/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 09:49:45 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.ChNone;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import java.io.EOFException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChNone_ESTest extends ChNone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChNone chNone0 = new ChNone("jaskell.parsc.Neghborhod");
      TxtState txtState0 = new TxtState("jaskell.parsc.Neghborhod", "jaskell.parsc.Neghborhod");
      Character character0 = chNone0.parse((State<Character>) txtState0);
      assertEquals('\n', (char)character0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChNone chNone0 = new ChNone("Eh=c -YpRk-kf~", true);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      SimpleState<Character> simpleState0 = new SimpleState<Character>(linkedList0);
      linkedList0.add((Character) null);
      Character character0 = chNone0.parse((State<Character>) simpleState0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChNone chNone0 = new ChNone("-[");
      TxtState txtState0 = new TxtState("Parsec try from %s to end but failed");
      Character character0 = chNone0.parse((State<Character>) txtState0);
      assertEquals('P', (char)character0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChNone chNone0 = new ChNone("jaskell.parsec.Neghborhood");
      TxtState txtState0 = new TxtState("jaskell.parsec.Neghborhood");
      try { 
        chNone0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect any char none of [a, b, c, d, e, g, h, j, k, l, ., n, o, p, r, s] (case sensitive false) but get j
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChNone chNone0 = new ChNone("jaskell.parsec.common.Letter", true);
      // Undeclared exception!
      try { 
        chNone0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChNone chNone0 = new ChNone("Xc'>+_>v", false);
      TxtState txtState0 = new TxtState("Xc'>+_>v", "Xc'>+_>v");
      Integer integer0 = new Integer((-8));
      txtState0.rollback(integer0);
      // Undeclared exception!
      try { 
        chNone0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChNone chNone0 = new ChNone("Eh=c -YpRk-kf~", true);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      SimpleState<Character> simpleState0 = new SimpleState<Character>(linkedList0);
      try { 
        chNone0.parse((State<Character>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChNone chNone0 = null;
      try {
        chNone0 = new ChNone((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChNone chNone0 = null;
      try {
        chNone0 = new ChNone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChNone chNone0 = new ChNone("");
      TxtState txtState0 = new TxtState("0=X+C3{j5}F<Zfv", "0y?");
      Character character0 = chNone0.parse((State<Character>) txtState0);
      assertEquals('0', (char)character0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChNone chNone0 = new ChNone("jaskell.pars.commo.ChNone", true);
      try { 
        chNone0.parse("jaskell.pars.commo.ChNone");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect any char none of [a, c, C, e, h, j, k, l, m, ., N, n, o, p, r, s] (case sensitive true) but get j
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }
}
