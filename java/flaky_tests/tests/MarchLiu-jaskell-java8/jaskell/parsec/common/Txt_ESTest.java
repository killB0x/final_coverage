/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:35:49 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Ch;
import jaskell.parsec.common.ChIn;
import jaskell.parsec.common.ChNone;
import jaskell.parsec.common.Crlf;
import jaskell.parsec.common.Decimal;
import jaskell.parsec.common.Digit;
import jaskell.parsec.common.EndOfLine;
import jaskell.parsec.common.Int;
import jaskell.parsec.common.JoinCharacters;
import jaskell.parsec.common.JoinText;
import jaskell.parsec.common.Letter;
import jaskell.parsec.common.NCh;
import jaskell.parsec.common.Newline;
import jaskell.parsec.common.NoWhitespace;
import jaskell.parsec.common.Skip1Spaces;
import jaskell.parsec.common.Skip1Whitespaces;
import jaskell.parsec.common.SkipSpaces;
import jaskell.parsec.common.SkipWhitespaces;
import jaskell.parsec.common.Space;
import jaskell.parsec.common.Text;
import jaskell.parsec.common.Txt;
import jaskell.parsec.common.UDecimal;
import jaskell.parsec.common.UInt;
import jaskell.parsec.common.Whitespace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Txt_ESTest extends Txt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Text text0 = Txt.text("", true);
      assertNotNull(text0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chNone((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chNone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChNone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chIn((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.chIn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UInt uInt0 = Txt.uinteger();
      assertNotNull(uInt0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EndOfLine endOfLine0 = Txt.eol();
      assertNotNull(endOfLine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NCh nCh0 = Txt.nCh('E');
      assertNotNull(nCh0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ch ch0 = Txt.ch('i');
      assertNotNull(ch0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ch ch0 = Txt.ch(']', true);
      assertNotNull(ch0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Skip1Spaces skip1Spaces0 = Txt.skip1Spaces();
      assertNotNull(skip1Spaces0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitespace whitespace0 = Txt.whitespace();
      assertNotNull(whitespace0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Space space0 = Txt.space();
      assertNotNull(space0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Decimal decimal0 = Txt.decimal();
      assertNotNull(decimal0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Txt txt0 = new Txt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Letter letter0 = Txt.letter();
      assertNotNull(letter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ChNone chNone0 = Txt.chNone(";|]*4,6M1p61nU?\u0005", true);
      assertNotNull(chNone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Txt.text((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Newline newline0 = Txt.newline();
      assertNotNull(newline0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Digit digit0 = Txt.digit();
      assertNotNull(digit0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Crlf crlf0 = Txt.crlf();
      assertNotNull(crlf0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SkipWhitespaces skipWhitespaces0 = Txt.skipWhiteSpaces();
      assertNotNull(skipWhitespaces0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UDecimal uDecimal0 = Txt.udecimal();
      assertNotNull(uDecimal0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SkipSpaces skipSpaces0 = Txt.skipSpaces();
      assertNotNull(skipSpaces0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JoinCharacters joinCharacters0 = Txt.joinChars();
      assertNotNull(joinCharacters0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Skip1Whitespaces skip1Whitespaces0 = Txt.skip1WhiteSpaces();
      assertNotNull(skip1Whitespaces0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JoinText joinText0 = Txt.joining();
      assertNotNull(joinText0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ChIn chIn0 = Txt.chIn("");
      assertNotNull(chIn0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NCh nCh0 = Txt.nCh('3', false);
      assertNotNull(nCh0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Int int0 = Txt.integer();
      assertNotNull(int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoWhitespace noWhitespace0 = Txt.noWhitespace();
      assertNotNull(noWhitespace0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ChNone chNone0 = Txt.chNone("812nk,[LP");
      assertNotNull(chNone0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ChIn chIn0 = Txt.chIn("ZjP2uh5#0\"0H gC%", true);
      assertNotNull(chIn0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Text text0 = Txt.text("");
      assertNotNull(text0);
  }
}
