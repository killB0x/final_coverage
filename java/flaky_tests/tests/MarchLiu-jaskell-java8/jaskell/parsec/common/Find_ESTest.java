/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:36:07 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Eof;
import jaskell.parsec.common.Eq;
import jaskell.parsec.common.Find;
import jaskell.parsec.common.Many;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.Return;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Find_ESTest extends Find_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Eof<Integer> eof0 = new Eof<Integer>();
      Find<Integer, Integer> find0 = new Find<Integer, Integer>(eof0);
      Integer integer0 = find0.parse("jaskell.parsec.common.Find");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Eof<Integer> eof0 = new Eof<Integer>();
      Find<Integer, Integer> find0 = new Find<Integer, Integer>(eof0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      Integer integer0 = find0.parse((State<Integer>) simpleState0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Return<LinkedList<Object>, LinkedList<Object>> return0 = new Return<LinkedList<Object>, LinkedList<Object>>(linkedList0);
      Find<LinkedList<Object>, LinkedList<Object>> find0 = new Find<LinkedList<Object>, LinkedList<Object>>(return0);
      LinkedList<LinkedList<Object>> linkedList1 = new LinkedList<LinkedList<Object>>();
      SimpleState<LinkedList<Object>> simpleState0 = new SimpleState<LinkedList<Object>>(linkedList1);
      LinkedList<Object> linkedList2 = find0.parse((State<LinkedList<Object>>) simpleState0);
      assertSame(linkedList2, linkedList0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Many<Integer, Integer> many0 = new Many<Integer, Integer>((Parsec<Integer, Integer>) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Eq<Object> eq0 = new Eq<Object>(many0);
      Find<Object, Object> find0 = new Find<Object, Object>(eq0);
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList0);
      try { 
        find0.parse((State<Object>) simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parsec try from 0 to end but failed
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Find<Integer, Integer> find0 = new Find<Integer, Integer>((Parsec<Integer, Integer>) null);
      try { 
        find0.parse((State<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Find", e);
      }
  }
}
