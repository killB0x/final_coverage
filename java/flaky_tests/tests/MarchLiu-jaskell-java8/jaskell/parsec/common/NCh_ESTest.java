/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:19:09 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.ChIn;
import jaskell.parsec.common.NCh;
import jaskell.parsec.common.NoWhitespace;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import jaskell.util.Try;
import java.io.EOFException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NCh_ESTest extends NCh_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChIn chIn0 = new ChIn("wIug#\"BDL#[~BYItp", false);
      TxtState txtState0 = new TxtState("wIug#\"BDL#[~BYItp");
      Character character0 = chIn0.parse((State<Character>) txtState0);
      Boolean boolean0 = Boolean.valueOf("zuT'zwO<uM`Qo");
      NCh nCh0 = new NCh(character0, boolean0);
      Character character1 = nCh0.parse((State<Character>) txtState0);
      assertEquals('I', (char)character1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TxtState txtState0 = new TxtState(",0frXqk&?Q>", "Expect %s in [%s]");
      NoWhitespace noWhitespace0 = new NoWhitespace();
      Character character0 = noWhitespace0.parse((State<Character>) txtState0);
      NCh nCh0 = new NCh(character0);
      TxtState txtState1 = new TxtState("??2blG");
      Character character1 = nCh0.parse((State<Character>) txtState1);
      assertFalse(character1.equals((Object)character0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Character character0 = Character.valueOf('\u0080');
      NCh nCh0 = new NCh(character0);
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      linkedList0.add((Character) null);
      SimpleState<Character> simpleState0 = new SimpleState<Character>(linkedList0);
      Character character1 = nCh0.parse((State<Character>) simpleState0);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TxtState txtState0 = new TxtState(",0frXqk&?Q>", "Expect %s in [%s]");
      NoWhitespace noWhitespace0 = new NoWhitespace();
      Character character0 = noWhitespace0.parse((State<Character>) txtState0);
      NCh nCh0 = new NCh(character0);
      Character character1 = nCh0.parse((State<Character>) txtState0);
      assertFalse(character1.equals((Object)character0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NCh nCh0 = new NCh((Character) null);
      // Undeclared exception!
      try { 
        nCh0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.NCh", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NCh nCh0 = new NCh((Character) null);
      TxtState txtState0 = new TxtState("");
      Integer integer0 = new Integer((-1201));
      txtState0.rollback(integer0);
      // Undeclared exception!
      try { 
        nCh0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NCh nCh0 = new NCh((Character) null);
      TxtState txtState0 = new TxtState("");
      try { 
        nCh0.parse((State<Character>) txtState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TxtState txtState0 = new TxtState("jaskell.parsec.common.UInt");
      Character character0 = txtState0.next();
      Boolean boolean0 = Boolean.FALSE;
      NCh nCh0 = new NCh(character0, boolean0);
      Try<Character> try0 = nCh0.exec("jaskell.parsec.common.UInt");
      assertFalse(try0.isOk());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TxtState txtState0 = new TxtState("9", "9");
      Character character0 = txtState0.next();
      NCh nCh0 = new NCh(character0);
      TxtState txtState1 = new TxtState("9", "9");
      try { 
        nCh0.parse((State<Character>) txtState1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect any char is not 
         //  (case sensitive true) at 1 but 
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      NCh nCh0 = new NCh((Character) null, boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      NCh nCh0 = null;
      try {
        nCh0 = new NCh((Character) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.NCh", e);
      }
  }
}
