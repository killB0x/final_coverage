/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:17:03 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Atom;
import jaskell.parsec.common.Eof;
import jaskell.parsec.common.Eq;
import jaskell.parsec.common.Fail;
import jaskell.parsec.common.Is;
import jaskell.parsec.common.Ne;
import jaskell.parsec.common.NoneOf;
import jaskell.parsec.common.One;
import jaskell.parsec.common.OneOf;
import jaskell.parsec.common.Return;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatWidthException;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Atom_ESTest extends Atom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Atom.fail("V{l;*_[bnC>yc]%~W", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '~'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Atom.fail(")vk %-o", (Object[]) null);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-o
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Atom.fail("expect anything pass the predicate check but %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Atom.fail("%2n5{~OiOwzPPU", objectArray0);
        fail("Expecting exception: IllegalFormatWidthException");
      
      } catch(IllegalFormatWidthException e) {
         //
         // 2
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        Atom.fail("m0X1#XsM]^uV=[>$+%g", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Atom.fail("UXag5+syn2%#bT", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = b, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Atom.fail((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoneOf<Integer> noneOf0 = Atom.noneOf((Set<Integer>) null);
      assertNotNull(noneOf0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Return<Integer, Integer> return0 = Atom.pack(integer0);
      assertNotNull(return0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Eof<Integer> eof0 = Atom.eof();
      assertNotNull(eof0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Atom atom0 = new Atom();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ne<Integer> ne0 = Atom.ne((Integer) null);
      assertNotNull(ne0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      One<Integer> one0 = Atom.one();
      assertNotNull(one0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Is<Integer> is0 = Atom.is((Predicate<Integer>) null);
      assertNotNull(is0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Fail<Integer> fail0 = Atom.fail("jaskell.parsec.common.Eq", objectArray0);
      assertNotNull(fail0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OneOf<Integer> oneOf0 = Atom.oneOf((Set<Integer>) null);
      assertNotNull(oneOf0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Eq<Integer> eq0 = Atom.eq((Integer) null);
      assertNotNull(eq0);
  }
}
