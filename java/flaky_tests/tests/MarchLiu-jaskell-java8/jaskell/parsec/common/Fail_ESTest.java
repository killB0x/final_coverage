/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:06:15 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.Fail;
import jaskell.parsec.common.Parsec;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fail_ESTest extends Fail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Fail<Object> fail0 = new Fail<Object>("TVt;4,F4~\"|nWGz?", objectArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SimpleState<Object> simpleState0 = new SimpleState<Object>(linkedList0);
      try { 
        fail0.parse((State<Object>) simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TVt;4,F4~\"|nWGz?
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Fail<Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer>("r-{6<kr*5Se%y`", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'y'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Fail<Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer>("Expect %c at %d but %c", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%c'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "5 YG?.Pf|n%Gva.K`*?";
      Fail<Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer>("5 YG?.Pf|n%Gva.K`*?", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Fail<Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer>((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Fail<Parsec<Object, Integer>> fail0 = new Fail<Parsec<Object, Integer>>("jaskell.parsec.common.Text", objectArray0);
      // Undeclared exception!
      try { 
        fail0.parse((State<Parsec<Object, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Fail", e);
      }
  }
}
