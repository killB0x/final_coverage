/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:13:56 GMT 2022
 */

package jaskell.parsec.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.common.SimpleState;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import jaskell.parsec.common.UDecimal;
import java.io.EOFException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UDecimal_ESTest extends UDecimal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UDecimal uDecimal0 = new UDecimal();
      try { 
        uDecimal0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Digit", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TxtState txtState0 = new TxtState("3=pL$5P2.xH,g");
      Integer integer0 = new Integer((-1));
      txtState0.rollback(integer0);
      UDecimal uDecimal0 = new UDecimal();
      try { 
        uDecimal0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UDecimal uDecimal0 = new UDecimal();
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      SimpleState<Character> simpleState0 = new SimpleState<Character>(linkedList0);
      try { 
        uDecimal0.parse((State<Character>) simpleState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TxtState txtState0 = new TxtState("3.=;>$2.xg");
      UDecimal uDecimal0 = new UDecimal();
      try { 
        uDecimal0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expect = is digit.
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UDecimal uDecimal0 = new UDecimal();
      TxtState txtState0 = new TxtState("73=pL$5P2.xHg");
      String string0 = uDecimal0.parse((State<Character>) txtState0);
      assertEquals("73", string0);
  }
}
