/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:59:27 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Digit;
import jaskell.parsec.Many;
import jaskell.parsec.ParsecException;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Digit_ESTest extends Digit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Digit<Character, Character> digit0 = new Digit<Character, Character>();
      Character character0 = Character.valueOf('}');
      SimpleState<Character> simpleState0 = new SimpleState<Character>((List<Character>) null);
      simpleState0.trap("\"~UkgfNuhd@lv8u@");
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        digit0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Digit", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Digit<Character, Character> digit0 = new Digit<Character, Character>();
      Character character0 = Character.valueOf('<');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).begin();
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      Many<Character, Character, Character, Character> many0 = new Many<Character, Character, Character, Character>(digit0);
      many0.parse(state0);
      State<Character, Character, Character> state1 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state1).next();
      // Undeclared exception!
      try { 
        digit0.parse(state1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Digit", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Digit<Character, Character> digit0 = new Digit<Character, Character>();
      Character character0 = Character.valueOf('7');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = digit0.parse(state0);
      assertEquals('7', (char)character1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Digit<Character, Character> digit0 = new Digit<Character, Character>();
      Character character0 = Character.valueOf('}');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        digit0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Digit", e);
      }
  }
}
