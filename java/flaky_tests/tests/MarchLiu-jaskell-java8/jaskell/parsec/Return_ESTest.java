/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:59:51 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import jaskell.parsec.Many;
import jaskell.parsec.Return;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Return_ESTest extends Return_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Return<Integer, Integer, Integer, Integer> return0 = new Return<Integer, Integer, Integer, Integer>((Integer) null);
      Many<Integer, Integer, Integer, Integer> many0 = new Many<Integer, Integer, Integer, Integer>(return0);
      State<Integer, Integer, Integer> state0 = (State<Integer, Integer, Integer>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(state0).begin();
      List<Integer> list0 = many0.parse(state0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(list0);
      Integer integer0 = return0.parse(simpleState0);
      assertNull(integer0);
  }
}
