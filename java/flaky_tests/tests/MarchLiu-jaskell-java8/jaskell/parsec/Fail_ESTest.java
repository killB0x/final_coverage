/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:40:55 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Fail;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fail_ESTest extends Fail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Fail<Integer, Integer, Integer> fail0 = new Fail<Integer, Integer, Integer>("#.q[> 01PfsZnxYm", objectArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>(linkedList0);
      try { 
        fail0.parse(simpleState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // #.q[> 01PfsZnxYm
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Fail<Integer, Integer, Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer, Integer, Integer>("U9s}?rvL*JBpc%", (Object[]) null);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Fail<Integer, Integer, Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer, Integer, Integer>("Expect %s is equal to %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Fail<Integer, Integer, Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer, Integer, Integer>("Expect one char is not whitespace but get %c.", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Fail<Integer, Integer, Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer, Integer, Integer>("Expect %c at% but %c", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = b, Flags =  
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Fail<Integer, Integer, Integer> fail0 = new Fail<Integer, Integer, Integer>("", (Object[]) null);
      // Undeclared exception!
      try { 
        fail0.parse((State<Integer, Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Fail", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Fail<Integer, Integer, Integer> fail0 = null;
      try {
        fail0 = new Fail<Integer, Integer, Integer>((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
