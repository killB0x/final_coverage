/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:42:02 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Between;
import jaskell.parsec.Binder;
import jaskell.parsec.Choice;
import jaskell.parsec.Eof;
import jaskell.parsec.Fail;
import jaskell.parsec.Ne;
import jaskell.parsec.One;
import jaskell.parsec.Parsec;
import jaskell.parsec.ParsecException;
import jaskell.parsec.Return;
import jaskell.parsec.SepBy1;
import jaskell.parsec.SimpleState;
import jaskell.parsec.Skip;
import jaskell.parsec.Skip1;
import jaskell.parsec.State;
import jaskell.util.Try;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parsec_ESTest extends Parsec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Ne<Integer, Integer, Integer> ne0 = new Ne<Integer, Integer, Integer>(integer0);
      Skip<Integer, Integer, Integer, Integer> skip0 = new Skip<Integer, Integer, Integer, Integer>(ne0);
      Parsec<Integer, Integer, Integer, Integer> parsec0 = skip0.over((Parsec<Integer, Integer, Integer, Integer>) ne0);
      Parsec<Integer, Integer, Integer, Integer>[] parsecArray0 = (Parsec<Integer, Integer, Integer, Integer>[]) Array.newInstance(Parsec.class, 2);
      parsecArray0[0] = parsec0;
      Choice<Integer, Integer, Integer, Integer> choice0 = new Choice<Integer, Integer, Integer, Integer>(parsecArray0);
      SepBy1<Integer, Integer, Integer, Integer, Integer> sepBy1_0 = new SepBy1<Integer, Integer, Integer, Integer, Integer>(choice0, skip0);
      SimpleState<Integer> simpleState0 = new SimpleState<Integer>((List<Integer>) null);
      // Undeclared exception!
      try { 
        sepBy1_0.parse(simpleState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parsec<Integer, Character, Character, Character>[] parsecArray0 = (Parsec<Integer, Character, Character, Character>[]) Array.newInstance(Parsec.class, 3);
      One<Integer, Character, Character> one0 = new One<Integer, Character, Character>();
      LinkedList<Parsec<Integer, Integer, Character, Character>> linkedList0 = new LinkedList<Parsec<Integer, Integer, Character, Character>>();
      Choice<Integer, Integer, Character, Character> choice0 = new Choice<Integer, Integer, Character, Character>(linkedList0);
      Parsec<Integer, Integer, Character, Character> parsec0 = one0.then((Parsec<Integer, Integer, Character, Character>) choice0);
      Character character0 = Character.valueOf('4');
      Return<Integer, Character, Character, Character> return0 = new Return<Integer, Character, Character, Character>(character0);
      Between<Integer, Character, Integer, Integer, Character, Character> between0 = new Between<Integer, Character, Integer, Integer, Character, Character>(parsec0, choice0, return0);
      Skip1<Integer, Character, Character, Character> skip1_0 = new Skip1<Integer, Character, Character, Character>(between0);
      parsecArray0[0] = (Parsec<Integer, Character, Character, Character>) skip1_0;
      Choice<Integer, Character, Character, Character> choice1 = new Choice<Integer, Character, Character, Character>(parsecArray0);
      State<Integer, Character, Character> state0 = (State<Integer, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).next();
      doReturn((Object) null, (Object) null).when(state0).status();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        choice1.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Choice", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Character character0 = Character.valueOf('8');
      Return<Integer, Character, Integer, Character> return0 = new Return<Integer, Character, Integer, Character>(character0);
      Try<Character> try0 = return0.exec((State<Integer, Integer, Character>) null);
      assertTrue(try0.isOk());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Fail<Integer, Integer, Integer> fail0 = new Fail<Integer, Integer, Integer>("", objectArray0);
      Parsec<Integer, Integer, Integer, Integer> parsec0 = fail0.bind((Binder<Integer, Integer, Integer, Integer, Integer>) null);
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Eof<Integer, Integer, Character> eof0 = new Eof<Integer, Integer, Character>();
      Try<Integer> try0 = eof0.exec((State<Integer, Integer, Character>) null);
      assertTrue(try0.isErr());
  }
}
