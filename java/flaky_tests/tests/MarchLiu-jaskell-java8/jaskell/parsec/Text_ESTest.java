/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:17:54 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Many;
import jaskell.parsec.NoWhitespace;
import jaskell.parsec.ParsecException;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import jaskell.parsec.Text;
import jaskell.util.Try;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Text_ESTest extends Text_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>("(dK 2|Hx<wXL{4O", false);
      Character character0 = Character.valueOf('.');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        text0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>("(dK 2|Hx<wXL{4O", false);
      NoWhitespace<Character, Character> noWhitespace0 = new NoWhitespace<Character, Character>();
      Many<Character, Character, Character, Character> many0 = new Many<Character, Character, Character, Character>(noWhitespace0);
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      many0.parse(state0);
      State<Character, Character, Character> state1 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state1).next();
      // Undeclared exception!
      try { 
        text0.parse(state1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Text<Character, Character> text0 = null;
      try {
        text0 = new Text<Character, Character>((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>("(dK 2|Hx<wXL{4O", false);
      Character character0 = Character.valueOf('(');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0, (Object) null).when(state0).next();
      Try<String> try0 = text0.exec(state0);
      assertTrue(try0.isErr());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>("(dK 2|Hx<wXL{4O", true);
      Character character0 = Character.valueOf('(');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0, (Object) null).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      Try<String> try0 = text0.exec(state0);
      assertTrue(try0.isErr());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>(";b<vpWO#}r;ZV%b");
      SimpleState<Character> simpleState0 = new SimpleState<Character>((List<Character>) null);
      simpleState0.trap(";b<vpWO#}r;ZV%b");
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Character) null).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        text0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.Text", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Text<Character, Character> text0 = new Text<Character, Character>("");
      String string0 = text0.parse((State<Character, Character, Character>) null);
      assertEquals("", string0);
  }
}
