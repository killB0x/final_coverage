/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 09:57:11 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.ChIn;
import jaskell.parsec.Many;
import jaskell.parsec.ParsecException;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import jaskell.parsec.Whitespace;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChIn_ESTest extends ChIn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChIn<Character, LinkedHashSet<Character>> chIn0 = new ChIn<Character, LinkedHashSet<Character>>("=y#o6Dh7>[Fv<7(", false);
      Character character0 = Character.valueOf('>');
      State<Character, Character, LinkedHashSet<Character>> state0 = (State<Character, Character, LinkedHashSet<Character>>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = chIn0.parse(state0);
      assertEquals('>', (char)character1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChIn<LinkedHashSet<Character>, Character> chIn0 = new ChIn<LinkedHashSet<Character>, Character>("", true);
      SimpleState<Character> simpleState0 = new SimpleState<Character>((List<Character>) null);
      ParsecException parsecException0 = simpleState0.trap("");
      State<Character, LinkedHashSet<Character>, Character> state0 = (State<Character, LinkedHashSet<Character>, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Character) null).when(state0).next();
      doReturn(parsecException0).when(state0).trap(anyString());
      try { 
        chIn0.parse(state0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("jaskell.parsec.SimpleState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChIn<LinkedHashSet<Character>, Character> chIn0 = new ChIn<LinkedHashSet<Character>, Character>("", false);
      Many<Character, Character, LinkedHashSet<Character>, Character> many0 = new Many<Character, Character, LinkedHashSet<Character>, Character>(chIn0);
      State<Character, LinkedHashSet<Character>, Character> state0 = (State<Character, LinkedHashSet<Character>, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      many0.parse(state0);
      State<Character, LinkedHashSet<Character>, Character> state1 = (State<Character, LinkedHashSet<Character>, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Character) null).when(state1).next();
      // Undeclared exception!
      try { 
        chIn0.parse(state1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChIn<LinkedHashSet<Character>, Character> chIn0 = null;
      try {
        chIn0 = new ChIn<LinkedHashSet<Character>, Character>((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChIn<LinkedHashSet<Character>, Character> chIn0 = null;
      try {
        chIn0 = new ChIn<LinkedHashSet<Character>, Character>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitespace<Character, Character> whitespace0 = new Whitespace<Character, Character>();
      Many<Character, Character, Character, Character> many0 = new Many<Character, Character, Character, Character>(whitespace0);
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(state0).begin();
      doReturn((Object) null).when(state0).next();
      many0.parse(state0);
      ChIn<LinkedHashSet<Character>, Character> chIn0 = null;
      try {
        chIn0 = new ChIn<LinkedHashSet<Character>, Character>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Character character0 = Character.valueOf('x');
      ChIn<LinkedHashSet<Character>, Character> chIn0 = new ChIn<LinkedHashSet<Character>, Character>("");
      State<Character, LinkedHashSet<Character>, Character> state0 = (State<Character, LinkedHashSet<Character>, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      doReturn((ParsecException) null).when(state0).trap(anyString());
      // Undeclared exception!
      try { 
        chIn0.parse(state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.ChIn", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Character character0 = Character.valueOf('n');
      State<Character, LinkedHashSet<Character>, Character> state0 = (State<Character, LinkedHashSet<Character>, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      ChIn<LinkedHashSet<Character>, Character> chIn0 = new ChIn<LinkedHashSet<Character>, Character>("jaskell.parsec.ChIn", true);
      Character character1 = chIn0.parse(state0);
      assertEquals('n', (char)character1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChIn<Character, Character> chIn0 = new ChIn<Character, Character>("U\"5`u2}18tu7K%");
      Character character0 = Character.valueOf('5');
      State<Character, Character, Character> state0 = (State<Character, Character, Character>) mock(State.class, new ViolatedAssumptionAnswer());
      doReturn(character0).when(state0).next();
      Character character1 = chIn0.parse(state0);
      assertEquals('5', (char)character1);
  }
}
