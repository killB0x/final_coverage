/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:42:42 GMT 2022
 */

package jaskell.parsec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.parsec.Atom;
import jaskell.parsec.Eq;
import jaskell.parsec.Fail;
import jaskell.parsec.Ne;
import jaskell.parsec.NoneOf;
import jaskell.parsec.OneOf;
import jaskell.parsec.Parsec;
import jaskell.parsec.Return;
import jaskell.parsec.SimpleState;
import jaskell.parsec.State;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.MissingFormatWidthException;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Atom_ESTest extends Atom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Atom.fail("Hd1Ki;@&$%$PWk<K11)", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '$'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Atom.fail("s,pgKeDND%0o[e(6V", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0o
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "`lsHV\"%o]:K[cgQ*";
      // Undeclared exception!
      try { 
        Atom.fail("`lsHV\"%o]:K[cgQ*", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // o != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Atom.fail((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      NoneOf<Integer, Integer, SimpleState<Integer>> noneOf0 = Atom.noneOf((Set<Integer>) linkedHashSet0);
      assertNotNull(noneOf0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Eq<Integer, Integer, SimpleState<Integer>> eq0 = Atom.eq(integer0);
      assertNotNull(eq0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parsec<Integer, Integer, Integer, Integer> parsec0 = Atom.eof();
      assertNotNull(parsec0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      OneOf<Integer, Integer, Integer> oneOf0 = Atom.oneOf((Set<Integer>) linkedHashSet0);
      assertNotNull(oneOf0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Ne<Integer, Integer, Integer> ne0 = Atom.ne(integer0);
      assertNotNull(ne0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Fail<State<SimpleState, Integer, State>, Integer, Integer> fail0 = Atom.fail("`lsHV\"%o]:K[cgQ*", objectArray0);
      assertNotNull(fail0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Return<Integer, Integer, Integer, SimpleState<SimpleState>> return0 = Atom.pack((Integer) null);
      assertNotNull(return0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Atom atom0 = new Atom();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parsec<State<State, Integer, State>, State<State, Integer, State>, SimpleState<Integer>, Integer> parsec0 = Atom.one();
      assertNotNull(parsec0);
  }
}
