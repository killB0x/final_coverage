/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:28:46 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Env;
import jaskell.expression.Expression;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Env_ESTest extends Env_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Env env0 = new Env();
      Optional<Expression> optional0 = env0.get("Sl36w!NWJN2J n");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Env env0 = new Env();
      env0.put("jaskell.expression.Env", (Double) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Env env0 = new Env();
      env0.put("Sl36w!NWJN2J n", (Expression) null);
      // Undeclared exception!
      try { 
        env0.get("Sl36w!NWJN2J n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
