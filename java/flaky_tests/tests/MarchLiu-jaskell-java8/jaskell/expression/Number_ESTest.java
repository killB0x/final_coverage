/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:50:28 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Env;
import jaskell.expression.Expression;
import jaskell.expression.Number;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Number_ESTest extends Number_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Short short0 = Short.valueOf((short)0);
      Number number0 = new Number(short0);
      Env env0 = new Env();
      double double0 = number0.eval(env0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Long long0 = Long.valueOf((-5201L));
      Number number0 = new Number(long0);
      Env env0 = new Env();
      double double0 = number0.eval(env0);
      assertEquals((-5201.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Number number0 = new Number((java.lang.Number) null);
      Env env0 = new Env();
      // Undeclared exception!
      try { 
        number0.eval(env0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Number", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Long long0 = Long.valueOf(1L);
      Number number0 = new Number(long0);
      Env env0 = new Env();
      double double0 = number0.eval(env0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Number number0 = new Number((java.lang.Number) null);
      Expression expression0 = number0.makeAst();
      assertSame(expression0, number0);
  }
}
