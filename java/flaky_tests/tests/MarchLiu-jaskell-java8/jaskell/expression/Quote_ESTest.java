/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:28:26 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Add;
import jaskell.expression.Env;
import jaskell.expression.Expression;
import jaskell.expression.Number;
import jaskell.expression.Parameter;
import jaskell.expression.Product;
import jaskell.expression.Quote;
import jaskell.expression.Sub;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quote_ESTest extends Quote_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Number number0 = new Number(double0);
      Quote quote0 = new Quote(number0);
      Expression expression0 = quote0.makeAst();
      assertNotSame(quote0, expression0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double double0 = new Double(0.0);
      Number number0 = new Number(double0);
      Quote quote0 = new Quote(number0);
      Env env0 = new Env();
      double double1 = quote0.eval(env0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Number number0 = new Number(double0);
      Quote quote0 = new Quote(number0);
      Env env0 = new Env();
      double double1 = quote0.eval(env0);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter("");
      Add add0 = new Add(parameter0, parameter0);
      Product product0 = new Product(add0, add0);
      Sub sub0 = new Sub(product0, parameter0);
      sub0.right = (Expression) add0;
      Quote quote0 = new Quote(sub0);
      // Undeclared exception!
      try { 
        quote0.makeAst();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter(";,?u]Y,BHPv0J");
      Quote quote0 = new Quote(parameter0);
      Env env0 = new Env();
      try { 
        quote0.eval(env0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ;,?u]Y,BHPv0J not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Parameter parameter0 = new Parameter("jaskell.expression.Add");
      Add add0 = new Add(parameter0, parameter0);
      Quote quote0 = new Quote(add0);
      Env env0 = new Env();
      env0.put("jaskell.expression.Add", (Expression) parameter0);
      // Undeclared exception!
      try { 
        quote0.eval(env0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Quote quote0 = new Quote((Expression) null);
      Env env0 = new Env();
      // Undeclared exception!
      try { 
        quote0.eval(env0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Quote", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Double double0 = new Double(2917.0503695494813);
      Number number0 = new Number(double0);
      Quote quote0 = new Quote(number0);
      Env env0 = new Env();
      double double1 = quote0.eval(env0);
      assertEquals(2917.0503695494813, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Quote quote0 = new Quote((Expression) null);
      // Undeclared exception!
      try { 
        quote0.makeAst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Quote", e);
      }
  }
}
