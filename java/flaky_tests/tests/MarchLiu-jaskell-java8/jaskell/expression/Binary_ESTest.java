/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:51:07 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Add;
import jaskell.expression.Divide;
import jaskell.expression.Expression;
import jaskell.expression.Number;
import jaskell.expression.Parameter;
import jaskell.expression.Product;
import jaskell.expression.Sub;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Short short0 = Short.valueOf((short)2);
      Number number0 = new Number(short0);
      Add add0 = new Add(number0, number0);
      Divide divide0 = new Divide(add0, number0);
      Product product0 = new Product(number0, divide0);
      Expression expression0 = product0.makeAst();
      assertSame(expression0, divide0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parameter parameter0 = new Parameter("X");
      Divide divide0 = new Divide(parameter0, parameter0);
      int int0 = divide0.getPriority();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Divide divide0 = new Divide((Expression) null, (Expression) null);
      Sub sub0 = new Sub((Expression) null, divide0);
      // Undeclared exception!
      try { 
        sub0.makeAst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter("");
      Sub sub0 = new Sub(parameter0, parameter0);
      Divide divide0 = new Divide(parameter0, sub0);
      Sub sub1 = (Sub)divide0.makeAst();
      assertEquals(1, sub1.getPriority());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter("X");
      Divide divide0 = new Divide(parameter0, parameter0);
      Add add0 = new Add(divide0, divide0);
      Add add1 = (Add)add0.makeAst();
      assertEquals(1, add1.getPriority());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Parameter parameter0 = new Parameter("S");
      Divide divide0 = new Divide(parameter0, parameter0);
      Expression expression0 = divide0.makeAst();
      assertSame(divide0, expression0);
  }
}
