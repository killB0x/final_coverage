/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:48:14 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Add;
import jaskell.expression.Divide;
import jaskell.expression.Env;
import jaskell.expression.Expression;
import jaskell.expression.Number;
import jaskell.expression.Parameter;
import jaskell.expression.Quote;
import jaskell.expression.Sub;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Divide_ESTest extends Divide_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-65));
      Number number0 = new Number(byte0);
      Add add0 = new Add(number0, number0);
      Sub sub0 = new Sub(add0, add0);
      Divide divide0 = new Divide(sub0, add0);
      Env env0 = new Env();
      double double0 = divide0.eval(env0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-65));
      Number number0 = new Number(byte0);
      Add add0 = new Add(number0, number0);
      Env env0 = new Env();
      Divide divide0 = new Divide(add0, add0);
      double double0 = divide0.eval(env0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)105);
      Number number0 = new Number(byte0);
      Add add0 = new Add(number0, number0);
      Sub sub0 = new Sub(number0, add0);
      Divide divide0 = new Divide(add0, sub0);
      Env env0 = new Env();
      double double0 = divide0.eval(env0);
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter("#o^ea[QJxp");
      Divide divide0 = new Divide(parameter0, parameter0);
      Env env0 = new Env();
      env0.put("#o^ea[QJxp", (Expression) parameter0);
      // Undeclared exception!
      try { 
        divide0.eval(env0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter("");
      Quote quote0 = new Quote(parameter0);
      Divide divide0 = new Divide(quote0, parameter0);
      Env env0 = new Env();
      env0.put("", (Expression) quote0);
      // Undeclared exception!
      try { 
        divide0.eval(env0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Divide divide0 = new Divide((Expression) null, (Expression) null);
      Env env0 = new Env();
      // Undeclared exception!
      try { 
        divide0.eval(env0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Divide", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Parameter parameter0 = new Parameter("#o^ea[QJxp");
      Divide divide0 = new Divide(parameter0, parameter0);
      int int0 = divide0.getPriority();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Parameter parameter0 = new Parameter("#o^ea[QJxp");
      Divide divide0 = new Divide(parameter0, parameter0);
      Env env0 = new Env();
      try { 
        divide0.eval(env0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // #o^ea[QJxp not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }
}
