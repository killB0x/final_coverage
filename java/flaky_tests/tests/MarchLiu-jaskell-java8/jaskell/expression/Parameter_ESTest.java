/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:02:24 GMT 2022
 */

package jaskell.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Env;
import jaskell.expression.Expression;
import jaskell.expression.Parameter;
import jaskell.expression.Product;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parameter_ESTest extends Parameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parameter parameter0 = new Parameter("jaskell.expression.Env");
      Env env0 = new Env();
      String string0 = "R}t+Y^Ge8N\"";
      Double double0 = new Double(0.0);
      Double double1 = new Double(224.8537200953906);
      env0.put("jaskell.expression.Env", double1);
      Double double2 = new Double(1.0);
      env0.put("n;8IZr5<Qn}N", double0);
      parameter0.eval(env0);
      Env env1 = new Env();
      env1.put("", (Expression) parameter0);
      env0.put(" not found", (Expression) parameter0);
      try { 
        parameter0.eval(env1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // jaskell.expression.Env not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parameter parameter0 = new Parameter("L0hEyFa|Kt!)<#rYvI");
      Env env0 = null;
      // Undeclared exception!
      try { 
        parameter0.eval((Env) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parameter parameter0 = new Parameter("jaskell.expression.Parameter");
      Env env0 = new Env();
      Double double0 = new Double((-1.0));
      env0.put("jaskell.expression.Parameter", double0);
      parameter0.eval(env0);
      parameter0.eval(env0);
      Env env1 = new Env();
      try { 
        parameter0.eval(env1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // jaskell.expression.Parameter not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter("");
      parameter0.makeAst();
      Env env0 = new Env();
      String string0 = "V/Ajw|NH";
      try { 
        parameter0.eval(env0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter("");
      Expression expression0 = parameter0.makeAst();
      assertSame(expression0, parameter0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "jaskell.expression.Env";
      Parameter parameter0 = new Parameter("jaskell.expression.Env");
      Env env0 = new Env();
      env0.put("jaskell.expression.Env", (Expression) parameter0);
      parameter0.eval(env0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Env env0 = new Env();
      Product product0 = new Product((Expression) null, (Expression) null);
      env0.put(")#y)'9", (Expression) product0);
      Parameter parameter0 = new Parameter(")#y)'9");
      // Undeclared exception!
      try { 
        parameter0.eval(env0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.expression.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Parameter parameter0 = new Parameter(" not found");
      Env env0 = new Env();
      Double double0 = new Double(0.0);
      env0.put("R}t+Y^Ge8N\"", double0);
      Double double1 = new Double(0.0);
      env0.put(" not found", double1);
      parameter0.eval(env0);
      Env env1 = new Env();
      env1.put("", (Expression) parameter0);
      env1.put("-qg;ba!#$'.", (Expression) parameter0);
      try { 
        parameter0.eval(env1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  not found not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Parameter parameter0 = new Parameter("L0hEyFa|Kt!)<#rYvI");
      Env env0 = new Env();
      try { 
        parameter0.eval(env0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // L0hEyFa|Kt!)<#rYvI not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = "jaskell.expression.Env";
      Parameter parameter0 = new Parameter("jaskell.expression.Env");
      Env env0 = new Env();
      try { 
        parameter0.eval(env0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // jaskell.expression.Env not found
         //
         verifyException("jaskell.expression.Parameter", e);
      }
  }
}
