/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:35:29 GMT 2022
 */

package jaskell.expression.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.Expression;
import jaskell.expression.Parameter;
import jaskell.expression.parser.A;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import jaskell.util.Try;
import java.io.EOFException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class A_ESTest extends A_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parameter parameter0 = new Parameter("jaskell.expression.parser.A");
      A a0 = new A(parameter0);
      TxtState txtState0 = new TxtState("jaskell.expression.parser.A");
      try { 
        a0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect char + (case sensitive true) at 1 but j
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      jaskell.expression.Number number0 = new jaskell.expression.Number((Number) null);
      A a0 = new A(number0);
      try { 
        a0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Skip", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      jaskell.expression.Number number0 = new jaskell.expression.Number((Number) null);
      A a0 = new A(number0);
      TxtState txtState0 = new TxtState("f9=(c ");
      Integer integer0 = new Integer((-1));
      txtState0.rollback(integer0);
      try { 
        a0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      A a0 = new A((Expression) null);
      TxtState txtState0 = new TxtState("");
      try { 
        a0.parse((State<Character>) txtState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      jaskell.expression.Number number0 = new jaskell.expression.Number((Number) null);
      A a0 = new A(number0);
      Try<Expression> try0 = a0.exec("+F");
      assertFalse(try0.isErr());
  }
}
