/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:00:46 GMT 2022
 */

package jaskell.expression.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.expression.parser.Parser;
import jaskell.parsec.common.State;
import jaskell.parsec.common.TxtState;
import java.io.EOFException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parser parser0 = new Parser();
      try { 
        parser0.parse((State<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.Choice", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parser parser0 = new Parser();
      TxtState txtState0 = new TxtState("e", "e");
      Integer integer0 = new Integer((-518));
      txtState0.rollback(integer0);
      try { 
        parser0.parse((State<Character>) txtState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = new Parser();
      TxtState txtState0 = new TxtState("nt");
      parser0.parse((State<Character>) txtState0);
      try { 
        parser0.parse((State<Character>) txtState0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parser parser0 = new Parser();
      TxtState txtState0 = new TxtState("Choice Error %s, stop at %s");
      try { 
        parser0.parse((State<Character>) txtState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Choice Error org.evosuite.runtime.mock.java.lang.MockThrowable: expect char / (case sensitive true) at 8 but E, stop at 7
         //
         verifyException("jaskell.parsec.common.TxtState", e);
      }
  }
}
