/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 09:41:49 GMT 2022
 */

package jaskell.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.util.Try;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Try_ESTest extends Try_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Try<Object> try0 = new Try<Object>((Throwable) mockThrowable0);
      Function<Throwable, Try<Object>> function0 = (Function<Throwable, Try<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(java.lang.Throwable.class));
      Try<Object> try1 = try0.recoverToTry(function0);
      assertNull(try1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Object> try1 = try0.recover((Function<Throwable, Object>) null);
      assertNotSame(try1, try0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Try<Object> try0 = Try.failure("!<xC");
      Try<Object> try1 = Try.success((Object) "!<xC");
      Object object0 = try1.orElseGet(try0);
      assertEquals("!<xC", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Try<Object> try0 = Try.failure("");
      Object object0 = try0.orElse((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Try<Throwable> try0 = Try.failure((Throwable) null);
      Try<Throwable> try1 = try0.or((Try<Throwable>) null);
      assertNull(try1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Try<Object> try0 = Try.failure("");
      boolean boolean0 = try0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Try<Object> try0 = new Try<Object>((Object) null);
      Object object0 = try0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Object> try1 = Try.success((Object) try0);
      Try<Try<Object>> try2 = new Try<Try<Object>>(try1);
      UnaryOperator<Try<Object>> unaryOperator0 = UnaryOperator.identity();
      Try<Object> try3 = try2.flatMap((Function<? super Try<Object>, Try<Object>>) unaryOperator0);
      assertNotSame(try3, try0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Try<Throwable> try0 = Try.failure((String) null);
      // Undeclared exception!
      try { 
        try0.recoverToTry((Function<Throwable, Try<Throwable>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Try<Throwable> try0 = Try.failure((Throwable) mockThrowable0);
      try { 
        try0.orElseGet(try0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Try<Object> try0 = Try.failure("<xC");
      try { 
        try0.orElseGet((Try<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      try { 
        try0.get();
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Try<Throwable> try0 = Try.failure((Throwable) null);
      try { 
        try0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Try<Object> try0 = Try.success((Object) "<S {%SNkkyAt2");
      // Undeclared exception!
      try { 
        try0.flatMap((Function<? super Object, Try<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Try<Object>> try1 = new Try<Try<Object>>(try0);
      UnaryOperator<Try<Object>> unaryOperator0 = UnaryOperator.identity();
      Try<Object> try2 = try1.flatMap((Function<? super Try<Object>, Try<Object>>) unaryOperator0);
      assertTrue(try2.isErr());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Try<Try<Object>> try0 = Try.failure("");
      Try<Throwable> try1 = try0.flatMap((Function<? super Try<Object>, Try<Throwable>>) null);
      assertTrue(try1.isErr());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      Try<Throwable> try0 = Try.success((Throwable) mockThrowable0);
      boolean boolean0 = try0.isErr();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Try<Try<Object>> try0 = Try.success((Try<Object>) null);
      Try<Object> try1 = try0.orElseGet(try0);
      assertNull(try1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Try<Throwable> try0 = Try.failure("QN");
      Try<Object> try1 = Try.failure("c[H$*d");
      try { 
        try1.orElseGet(try0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // QN
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Try<Throwable> try0 = Try.success((Throwable) mockThrowable0);
      Throwable throwable0 = try0.get();
      assertSame(mockThrowable0, throwable0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Try<Object> try0 = Try.failure("");
      try { 
        try0.get();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("jaskell.util.Try", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Try<Object>> try1 = new Try<Try<Object>>(try0);
      Function<Throwable, Try<Try<Object>>> function0 = (Function<Throwable, Try<Try<Object>>>) mock(Function.class, new ViolatedAssumptionAnswer());
      try1.recoverToTry(function0);
      assertTrue(try0.isErr());
      assertFalse(try0.isOk());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Try<Object> try0 = new Try<Object>((Throwable) mockThrowable0);
      Function<Throwable, Try<Object>> function0 = (Function<Throwable, Try<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(try0).when(function0).apply(any(java.lang.Throwable.class));
      Try<Object> try1 = try0.recoverToTry(function0);
      assertTrue(try1.isErr());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      Try<Throwable> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Throwable> try1 = try0.recover(unaryOperator0);
      try1.map((Function<Throwable, Throwable>) null);
      assertNotSame(try1, try0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      Try<Object> try0 = Try.failure((Throwable) mockThrowable0);
      Try<Try<Object>> try1 = new Try<Try<Object>>(try0);
      try1.or(try1);
      assertTrue(try0.isErr());
      assertFalse(try0.isOk());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Try<Object> try0 = new Try<Object>((Throwable) mockThrowable0);
      Try<Object> try1 = try0.or(try0);
      assertFalse(try1.isOk());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Try<Object> try0 = new Try<Object>((Throwable) mockThrowable0);
      Function<Object, Object> function0 = Function.identity();
      Try<Object> try1 = try0.map(function0);
      assertFalse(try1.isOk());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Try<Object> try0 = new Try<Object>("Gy2O|*VE4qv");
      boolean boolean0 = try0.isOk();
      assertTrue(boolean0);
  }
}
