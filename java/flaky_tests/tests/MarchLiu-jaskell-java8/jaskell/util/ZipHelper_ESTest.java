/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:36:47 GMT 2022
 */

package jaskell.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.util.ZipHelper;
import java.util.zip.DataFormatException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipHelper_ESTest extends ZipHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      try { 
        ZipHelper.decompressByteArray(byteArray0, 1141);
        fail("Expecting exception: DataFormatException");
      
      } catch(DataFormatException e) {
         //
         // unknown compression method
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipHelper.decompressByteArray((byte[]) null, 2035);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ZipHelper.decompressByteArray(byteArray0, (-3321));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3321
         //
         verifyException("jaskell.util.ZipHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      ZipHelper.decompressByteArray(byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipHelper.decompressByteArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        ZipHelper.compressByteArray(byteArray0, (-791));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("jaskell.util.ZipHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      ZipHelper.decompressByteArray(byteArray0, 2040);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      try { 
        ZipHelper.decompressByteArray(byteArray0);
        fail("Expecting exception: DataFormatException");
      
      } catch(DataFormatException e) {
         //
         // unknown compression method
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZipHelper.compressByteArray((byte[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("jaskell.util.ZipHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ZipHelper zipHelper0 = new ZipHelper();
  }
}
