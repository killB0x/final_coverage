/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:34:08 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Brackets;
import jaskell.sql.Count;
import jaskell.sql.Func;
import jaskell.sql.Great;
import jaskell.sql.Name;
import jaskell.sql.NotEqual;
import jaskell.sql.Predicate;
import jaskell.sql.Quot;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Brackets_ESTest extends Brackets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Func func0 = Func.max(brackets0);
      func0.isNotNull();
      brackets0._segment = (Directive) func0;
      // Undeclared exception!
      try { 
        brackets0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      NotEqual notEqual0 = new NotEqual();
      Predicate predicate0 = brackets0.ls(notEqual0);
      brackets0._segment = (Directive) predicate0;
      // Undeclared exception!
      try { 
        brackets0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Name name0 = new Name("jaskell.sql.LessOrEqual");
      Count count0 = new Count(name0);
      Predicate predicate0 = count0.isNotNull();
      Object object0 = new Object();
      count0.ne(object0);
      brackets0._segment = (Directive) count0;
      name0.op("jaskell.sql.LessOrEqual", (Object) predicate0);
      count0.left();
      name0.name("(%s)");
      brackets0.isNotNull();
      brackets0.gte((Directive) count0);
      brackets0.parameters();
      brackets0.parameters();
      brackets0.parameters();
      brackets0.eq((Object) count0);
      brackets0.script();
      brackets0.script();
      String string0 = brackets0.script();
      assertEquals("(COUNT((%s)))", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(0);
      Quot quot0 = new Quot("%s EXISTS(%s)", "SUM(*)", (String) null);
      brackets0.ls(quot0);
      brackets0.gt(integer0);
      Parameter<Object> parameter0 = new Parameter<Object>((String) null, brackets0, class0);
      Object object0 = new Object();
      parameter0.value(object0);
      brackets0._segment = (Directive) parameter0;
      parameter0.order(2008);
      parameter0.value((Object) class0);
      brackets0.like((Object) parameter0);
      brackets0.script();
      List<Parameter<?>> list0 = brackets0.parameters();
      List<Parameter<?>> list1 = brackets0.parameters();
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Great great0 = new Great();
      great0.or((Predicate) brackets0);
      brackets0.isNotNull();
      Predicate predicate0 = great0.ne((Directive) brackets0);
      great0.ls(predicate0);
      Directive directive0 = great0._left;
      // Undeclared exception!
      try { 
        brackets0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Brackets", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      // Undeclared exception!
      try { 
        brackets0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Brackets", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      // Undeclared exception!
      try { 
        brackets0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Brackets", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Integer.getInteger("");
      brackets0.gt((Integer) null);
      // Undeclared exception!
      try { 
        brackets0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Brackets", e);
      }
  }
}
