/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:03:58 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.sql.Name;
import jaskell.sql.Quot;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Name_ESTest extends Name_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quot quot0 = new Quot("MAX", "MAX", (String) null);
      quot0.name("MAX");
      assertEquals("MAX", quot0.name());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name name0 = new Name("");
      String string0 = name0.quotedName();
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quot quot0 = new Quot("MAX", "MAX", (String) null);
      String string0 = quot0.name();
      assertEquals("MAX", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Name name0 = new Name("");
      String string0 = name0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quot quot0 = new Quot("MAX", "MAX", (String) null);
      Character character0 = Character.valueOf('T');
      String string0 = quot0.escaped(character0);
      assertEquals("MAX", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quot quot0 = new Quot("MAX", "MAX", (String) null);
      String string0 = quot0.escaped();
      assertEquals("MAX", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Name name0 = new Name("");
      String string0 = name0.escaped();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.escaped((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Name name0 = new Name("");
      Character character0 = Character.valueOf('~');
      String string0 = name0.escaped(character0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.escaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.quotedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Name name0 = new Name();
      String string0 = name0.name();
      assertNull(string0);
  }
}
