/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:49:48 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.sql.On;
import jaskell.sql.Returning;
import jaskell.sql.Statement;
import jaskell.sql.Values;
import java.sql.Connection;
import java.sql.PreparedStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Values_ESTest extends Values_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Values values0 = new Values("/..");
      Returning returning0 = values0.returning("");
      values0._insert = (Directive) returning0;
      // Undeclared exception!
      try { 
        values0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Values values0 = new Values("*Xoe'!HKlnbk?z");
      String[] stringArray0 = new String[0];
      Returning returning0 = values0.returning(stringArray0);
      values0._insert = (Directive) returning0;
      values0.script();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Values values0 = null;
      try {
        values0 = new Values((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "/J}sMc(ha2 jx";
      Values values0 = new Values("/J}sMc(ha2 jx");
      // Undeclared exception!
      try { 
        values0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Values values0 = new Values("jaskell.sql.Conflict");
      On on0 = values0.on();
      assertNotNull(on0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "jaskell.sql.Conflict";
      stringArray0[1] = "H72";
      stringArray0[2] = ", ";
      stringArray0[3] = "";
      stringArray0[4] = "%s VALUES(%s)";
      stringArray0[5] = "%s ON";
      stringArray0[6] = "$Jb0Q>dx}M{0V$";
      stringArray0[7] = "_vm=&4#IEk^K/3";
      stringArray0[8] = "k";
      Values values0 = new Values(stringArray0);
      On on0 = values0.on();
      assertNotNull(on0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Values values0 = null;
      try {
        values0 = new Values((Directive[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[3];
      Values values0 = new Values(directiveArray0);
      Returning returning0 = values0.returning((Directive) null);
      directiveArray0[0] = (Directive) returning0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        values0.setParameter((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Values values0 = null;
      try {
        values0 = new Values(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Values values0 = new Values(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Values values0 = new Values("jaskell.sql.Conflict");
      // Undeclared exception!
      try { 
        values0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[3];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5.p6=}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "jmP_M]MSu)wLg/5[J";
      stringArray0[4] = "";
      stringArray0[5] = "la2RYxS_g?%2sc=u2";
      stringArray0[6] = "";
      stringArray0[7] = "X*";
      stringArray0[8] = "'_h$";
      Values values0 = new Values(stringArray0);
      // Undeclared exception!
      try { 
        values0.cache();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Values values0 = new Values("");
      // Undeclared exception!
      try { 
        values0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Values", e);
      }
  }
}
