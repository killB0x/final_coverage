/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:47:48 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Count;
import jaskell.sql.Func;
import jaskell.sql.Group;
import jaskell.sql.Join;
import jaskell.sql.Name;
import jaskell.sql.Order;
import jaskell.sql.Quot;
import jaskell.sql.Returning;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Join_ESTest extends Join_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Quot quot0 = new Quot("");
      Count count0 = new Count(quot0);
      Join join0 = count0.join(quot0);
      String string0 = join0.script();
      assertEquals("COUNT(\"\") JOIN \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Quot quot0 = new Quot("");
      Count count0 = new Count(quot0);
      Join join0 = count0.join(quot0);
      List<Parameter<?>> list0 = join0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Join join0 = new Join();
      Func func0 = Func.min(join0);
      join0._prefix = (Directive) func0;
      // Undeclared exception!
      try { 
        join0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Join.On join_On0 = new Join.On();
      Returning returning0 = new Returning();
      Join join0 = join_On0.join(returning0);
      // Undeclared exception!
      try { 
        join0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Join$On", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Name name0 = new Name("/+#8$l p8d*m^zN");
      Count count0 = new Count(name0);
      Join join0 = count0.join(name0);
      Join.On join_On0 = join0.on(name0);
      Order order0 = join_On0.order();
      assertNotNull(order0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Name name0 = new Name("/+#8$l p8d*m^zN");
      Count count0 = new Count(name0);
      Join join0 = count0.join(name0);
      Join.On join_On0 = join0.on(name0);
      Group group0 = join_On0.group();
      Join join1 = join_On0.join(group0);
      assertNotSame(join1, join0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Name name0 = new Name("/+#8$l p8d*m^zN");
      Count count0 = new Count(name0);
      Join join0 = count0.join(name0);
      Join.On join_On0 = join0.on(name0);
      String string0 = join_On0.script();
      assertEquals("COUNT(/+#8$l p8d*m^zN) JOIN /+#8$l p8d*m^zN ON /+#8$l p8d*m^zN", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Name name0 = new Name("/+#8$l p8d*m^zN");
      Count count0 = new Count(name0);
      Join join0 = count0.join(name0);
      Join.On join_On0 = join0.on(name0);
      Join.On join_On1 = join_On0.on(count0);
      assertSame(join_On1, join_On0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Name name0 = new Name("/+#8$l p8d*m^zN");
      Count count0 = new Count(name0);
      Join join0 = count0.join(name0);
      Join.On join_On0 = join0.on(name0);
      List<Parameter<?>> list0 = join_On0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Join join0 = new Join();
      // Undeclared exception!
      try { 
        join0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Join", e);
      }
  }
}
