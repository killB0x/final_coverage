/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:02:16 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Count;
import jaskell.sql.Delete;
import jaskell.sql.Exists;
import jaskell.sql.GreateOrEqual;
import jaskell.sql.Group;
import jaskell.sql.Like;
import jaskell.sql.Literal;
import jaskell.sql.Not;
import jaskell.sql.Order;
import jaskell.sql.Predicate;
import jaskell.sql.Quot;
import jaskell.sql.Select;
import jaskell.sql.Where;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Where_ESTest extends Where_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Literal literal0 = new Literal(integer0);
      Delete.Where delete_Where0 = new Delete.Where(literal0, literal0);
      List<Parameter<?>> list0 = delete_Where0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Select select0 = new Select();
      Directive[] directiveArray0 = new Directive[2];
      directiveArray0[0] = (Directive) select0;
      Select select1 = select0.select(directiveArray0);
      Not not0 = new Not(directiveArray0[0]);
      Exists exists0 = not0.exists(directiveArray0[1]);
      Where where0 = select1.where(exists0);
      // Undeclared exception!
      try { 
        where0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Like like0 = new Like();
      Where where0 = new Where(like0);
      // Undeclared exception!
      try { 
        where0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Select select0 = new Select(stringArray0);
      Directive[] directiveArray0 = new Directive[8];
      directiveArray0[0] = (Directive) select0;
      select0.select("WO_(\"efdt.0jS");
      Count count0 = new Count();
      Select select1 = select0.select(directiveArray0);
      Where where0 = select1.where(count0);
      // Undeclared exception!
      try { 
        where0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Select select0 = new Select(stringArray0);
      Directive[] directiveArray0 = new Directive[8];
      directiveArray0[0] = (Directive) select0;
      Count count0 = new Count();
      Select select1 = select0.select(directiveArray0);
      Where where0 = select1.where(count0);
      // Undeclared exception!
      try { 
        where0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Like like0 = new Like();
      Where where0 = new Where(like0);
      // Undeclared exception!
      try { 
        where0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Select select0 = new Select();
      Quot quot0 = new Quot("");
      Count count0 = new Count(quot0);
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", quot0, class0);
      Predicate predicate0 = count0.gt(parameter0);
      Where where0 = select0.where(predicate0);
      String string0 = where0.script();
      assertEquals("SELECT  WHERE COUNT(\"\") > ", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Select select0 = new Select();
      Quot quot0 = new Quot("");
      Count count0 = new Count(quot0);
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", quot0, class0);
      Predicate predicate0 = count0.gt(parameter0);
      Where where0 = select0.where(predicate0);
      List<Parameter<?>> list0 = where0.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Like like0 = new Like();
      Where where0 = new Where(like0);
      Group group0 = where0.group();
      assertNotNull(group0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GreateOrEqual greateOrEqual0 = new GreateOrEqual();
      Where where0 = new Where(greateOrEqual0);
      Order order0 = where0.order();
      assertNotNull(order0);
  }
}
