/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 09:36:25 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Conflict;
import jaskell.sql.Delete;
import jaskell.sql.Func;
import jaskell.sql.Literal;
import jaskell.sql.Name;
import jaskell.sql.Nothing;
import jaskell.sql.Offset;
import jaskell.sql.Quot;
import jaskell.sql.Returning;
import jaskell.sql.Select;
import jaskell.sql.Statement;
import jaskell.sql.ThenSelect;
import jaskell.sql.Using;
import jaskell.sql.Values;
import jaskell.sql.With;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Statement_ESTest extends Statement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("-=aKJZ<=", "-=aKJZ<=");
      List<Parameter<?>> list0 = with_Recursive0.parameters();
      with_Recursive0.setOrder(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Conflict.Where conflict_Where0 = new Conflict.Where("4tmbsAn.iQa_&Uko");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4tmbsAn.iQa_&Uko";
      Returning returning0 = conflict_Where0.returning(stringArray0);
      assertNotNull(returning0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      Returning returning0 = thenSelect_Select0.returning("&0/]-");
      assertNotNull(returning0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Literal literal0 = new Literal((String) null);
      Using.Where using_Where0 = new Using.Where(literal0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement0 = using_Where0.prepare(connection0);
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("$M:=[[S", "$M:=[[S");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(preparedStatement0).execute();
      boolean boolean0 = with_Recursive0.execute(preparedStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("jaskell.sql.Text", "");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      boolean boolean0 = with_Recursive0.execute(preparedStatement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quot quot0 = new Quot("jaskell.sql.Exists", "jaskell.sql.Exists", "&zBdKP>");
      Name[] nameArray0 = new Name[6];
      nameArray0[0] = (Name) quot0;
      nameArray0[1] = (Name) quot0;
      nameArray0[2] = (Name) quot0;
      nameArray0[3] = (Name) quot0;
      nameArray0[4] = (Name) quot0;
      nameArray0[5] = (Name) quot0;
      With.Recursive with_Recursive0 = new With.Recursive(quot0, nameArray0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(preparedStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      boolean boolean0 = with_Recursive0.execute(connection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Select select0 = new Select();
      Directive[] directiveArray0 = new Directive[4];
      directiveArray0[0] = (Directive) select0;
      Values values0 = new Values(directiveArray0);
      List<Directive> list0 = values0._fields;
      select0.select(list0);
      // Undeclared exception!
      try { 
        select0.syncParameters((PreparedStatement) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      // Undeclared exception!
      try { 
        nothing0.syncParameters((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Nothing", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      Delete.From delete_From0 = new Delete.From(nothing0);
      nothing0._prefix = (Directive) delete_From0;
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        delete_From0.setParameter((Object) nothing0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      With.Delete with_Delete0 = new With.Delete();
      Delete.From delete_From0 = with_Delete0.from("4vUhxY|CG%?]7z9");
      Offset offset0 = delete_From0.offset(3);
      Func func0 = Func.max(delete_From0);
      delete_From0._from = (Directive) func0;
      Directive[] directiveArray0 = new Directive[7];
      directiveArray0[0] = (Directive) offset0;
      String[] stringArray0 = new String[2];
      Select select0 = new Select(stringArray0);
      select0.select(directiveArray0);
      // Undeclared exception!
      try { 
        select0.prepare((Connection) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      // Undeclared exception!
      try { 
        thenSelect_Select0.prepare((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.ThenSelect$Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Select select0 = new Select();
      Directive[] directiveArray0 = new Directive[6];
      directiveArray0[0] = (Directive) select0;
      select0.select(directiveArray0);
      // Undeclared exception!
      try { 
        select0.execute((PreparedStatement) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", "", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      try { 
        delete_From0.execute((PreparedStatement) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parameter  has not value
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Select select0 = new Select();
      Directive[] directiveArray0 = new Directive[1];
      directiveArray0[0] = (Directive) select0;
      Select select1 = select0.select(directiveArray0);
      // Undeclared exception!
      try { 
        select1.execute((Connection) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      // Undeclared exception!
      try { 
        thenSelect_Select0.execute((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.ThenSelect$Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      // Undeclared exception!
      try { 
        nothing0.clear((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      Delete.From delete_From0 = new Delete.From(nothing0);
      nothing0._prefix = (Directive) delete_From0;
      // Undeclared exception!
      try { 
        nothing0.cache();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("2 V8", "2 V8", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      Statement statement0 = delete_From0.setParameter((Object) "2 V8", (Object) "2 V8");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("eD~fvl").when(preparedStatement0).toString();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = statement0.prepare(connection0);
      statement0.syncParameters(preparedStatement1);
      assertEquals(1, parameter0.order());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("2 V8", "2 V8", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("eD~fvl").when(preparedStatement0).toString();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = delete_From0.prepare(connection0);
      delete_From0.clear(preparedStatement1);
      assertEquals(0, preparedStatement1.getMaxFieldSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>((String) null, nothing0, class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      // Undeclared exception!
      try { 
        delete_From0.setParameter((Object) nothing0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("f<c>@a0q/JOZ<", "f<c>@a0q/JOZ<", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      try { 
        delete_From0.setParameter((Object) parameter0, (Object) "f<c>@a0q/JOZ<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameter named jaskell.script.Parameter@1 not found
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(0);
      Parameter<Object> parameter0 = new Parameter<Object>("H", integer0, class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      delete_From0.setParameter((Object) integer0, (Object) "H");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      delete_From0.execute(connection0);
      assertEquals(1, parameter0.order());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("f<c>@aq/JOZ<", "f<c>@aq/JOZ<", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      try { 
        delete_From0.execute(connection0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parameter f<c>@aq/JOZ< has not value
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Select select0 = new Select();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      // Undeclared exception!
      try { 
        select0.execute(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      Name name0 = new Name();
      nothing0._prefix = (Directive) name0;
      Statement statement0 = nothing0.cache();
      With.Delete with_Delete0 = new With.Delete();
      Delete.From delete_From0 = with_Delete0.from((Directive) statement0);
      Delete.Where delete_Where0 = delete_From0.where(name0);
      List<Parameter<?>> list0 = delete_Where0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Nothing nothing0 = new Nothing();
      Literal literal0 = new Literal((-1));
      nothing0._prefix = (Directive) literal0;
      Statement statement0 = nothing0.cache();
      Delete.From delete_From0 = new Delete.From(statement0);
      String string0 = delete_From0.script();
      assertEquals("DELETE FROM -1 NOTHING", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      // Undeclared exception!
      try { 
        thenSelect_Select0.returning((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Returning", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      Returning returning0 = thenSelect_Select0.returning((Directive) thenSelect_Select0);
      assertNotNull(returning0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Select select0 = new Select();
      // Undeclared exception!
      try { 
        select0.execute((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quot quot0 = new Quot("2 V8");
      Conflict.Where conflict_Where0 = new Conflict.Where(quot0);
      // Undeclared exception!
      try { 
        conflict_Where0.cache();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict$Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("2 V8", "2 V8", class0);
      Delete.From delete_From0 = new Delete.From(parameter0);
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("eD~fvl").when(preparedStatement0).toString();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PreparedStatement preparedStatement1 = delete_From0.prepare(connection0);
      // Undeclared exception!
      try { 
        delete_From0.syncParameters(preparedStatement1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parameter 2 V8 has not value
         //
         verifyException("jaskell.sql.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      // Undeclared exception!
      try { 
        thenSelect_Select0.returning((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
