/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:50:20 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.sql.Do;
import jaskell.sql.Nothing;
import jaskell.sql.Update;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Do_ESTest extends Do_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Do.Update do_Update0 = new Do.Update();
      Do do0 = new Do();
      Update.Set update_Set0 = do_Update0.set((Directive) do0, (Directive) do0);
      assertNotNull(update_Set0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Do do0 = new Do();
      Do.Update do_Update0 = do0.update();
      Update.Set update_Set0 = do_Update0.set((Directive) do0, (Directive) do0);
      Update.Set update_Set1 = do_Update0.set((Directive) do0, (Directive) update_Set0);
      assertNotSame(update_Set0, update_Set1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Do do0 = new Do();
      // Undeclared exception!
      try { 
        do0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Do", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Do do0 = new Do();
      Nothing nothing0 = do0.nothing();
      assertNotNull(nothing0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Do do0 = new Do();
      // Undeclared exception!
      try { 
        do0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Do", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Do.Update do_Update0 = new Do.Update();
      // Undeclared exception!
      try { 
        do_Update0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Do$Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Do do0 = new Do();
      Do.Update do_Update0 = do0.update();
      // Undeclared exception!
      try { 
        do_Update0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Do", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Do do0 = new Do();
      Do.Update do_Update0 = do0.update();
      Update.Set update_Set0 = do_Update0.set((Directive) do0, (Directive) do0);
      Update.Set update_Set1 = do_Update0.set("", (Directive) update_Set0);
      assertNotSame(update_Set0, update_Set1);
  }
}
