/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:42:44 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Conflict;
import jaskell.sql.Do;
import jaskell.sql.Func;
import jaskell.sql.Literal;
import jaskell.sql.Name;
import jaskell.sql.Quot;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Conflict_ESTest extends Conflict_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Conflict conflict0 = new Conflict("]");
      Quot quot0 = new Quot("q]L,UJ", "", "");
      Conflict.Where conflict_Where0 = conflict0.where((Name) quot0);
      conflict_Where0._prefix = (Directive) quot0;
      String string0 = conflict_Where0.script();
      assertEquals("q]L,UJ WHERE q]L,UJ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Conflict conflict0 = new Conflict("");
      Quot quot0 = new Quot("%s ON");
      conflict0._prefix = (Directive) quot0;
      Conflict.On conflict_On0 = conflict0.on();
      Conflict.Constraint conflict_Constraint0 = conflict_On0.constraint("");
      String string0 = conflict_Constraint0.script();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Conflict.On conflict_On0 = new Conflict.On();
      // Undeclared exception!
      try { 
        conflict_On0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict$On", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Conflict conflict0 = new Conflict("");
      Quot quot0 = new Quot("%s ON");
      conflict0._prefix = (Directive) quot0;
      String string0 = conflict0.script();
      assertEquals("\"%s ON\" CONFLICT ()", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Conflict conflict0 = new Conflict("");
      Quot quot0 = new Quot("%s ON");
      conflict0._prefix = (Directive) quot0;
      List<Parameter<?>> list0 = conflict0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Conflict conflict0 = new Conflict(stringArray0);
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("jaskell.sql.NotEqual", "jaskell.sql.NotEqual", class0);
      conflict0._prefix = (Directive) parameter0;
      List<Parameter<?>> list0 = conflict0.parameters();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Conflict conflict0 = new Conflict("]");
      Func func0 = Func.max(conflict0);
      conflict0._prefix = (Directive) func0;
      // Undeclared exception!
      try { 
        conflict0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Conflict conflict0 = null;
      try {
        conflict0 = new Conflict((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Conflict conflict0 = null;
      try {
        conflict0 = new Conflict((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Conflict conflict0 = new Conflict();
      // Undeclared exception!
      try { 
        conflict0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Conflict conflict0 = new Conflict("]");
      Conflict.On conflict_On0 = conflict0.on();
      Conflict.Constraint conflict_Constraint0 = conflict_On0.constraint("%s%s%s");
      Do do0 = conflict_Constraint0.do_();
      assertNotNull(do0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Conflict.Constraint conflict_Constraint0 = new Conflict.Constraint("");
      // Undeclared exception!
      try { 
        conflict_Constraint0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict$Constraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Conflict.On conflict_On0 = new Conflict.On();
      Func func0 = Func.avg((Directive) null);
      Conflict.Constraint conflict_Constraint0 = conflict_On0.constraint((Literal) func0);
      assertNotNull(conflict_Constraint0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Conflict.On conflict_On0 = new Conflict.On();
      // Undeclared exception!
      try { 
        conflict_On0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict$On", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Conflict.Where conflict_Where0 = new Conflict.Where("jaskell.sql.Conflict$On");
      // Undeclared exception!
      try { 
        conflict_Where0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict$Where", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Conflict conflict0 = new Conflict("");
      Conflict.Where conflict_Where0 = conflict0.where("jaskell.sql.Returning");
      assertNotNull(conflict_Where0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Conflict conflict0 = new Conflict();
      Name name0 = new Name();
      Conflict.Where conflict_Where0 = conflict0.where(name0);
      Do do0 = conflict_Where0.do_();
      assertNotNull(do0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Conflict conflict0 = new Conflict(stringArray0);
      Do do0 = conflict0.do_();
      assertNotNull(do0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Conflict conflict0 = new Conflict("");
      // Undeclared exception!
      try { 
        conflict0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Conflict", e);
      }
  }
}
