/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:43:51 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Name;
import jaskell.sql.Quot;
import jaskell.sql.Select;
import jaskell.sql.ThenSelect;
import jaskell.sql.Union;
import jaskell.sql.With;
import java.sql.Connection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThenSelect_ESTest extends ThenSelect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      With with0 = new With("%s %s");
      Directive[] directiveArray0 = new Directive[8];
      ThenSelect.Select thenSelect_Select0 = with0.select(directiveArray0);
      // Undeclared exception!
      try { 
        thenSelect_Select0.prepare((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quot quot0 = new Quot("##Y/k", "jaskell.sql.Limit", "##Y/k");
      String[] stringArray0 = new String[2];
      With.Recursive with_Recursive0 = new With.Recursive(quot0, stringArray0);
      ThenSelect.Select thenSelect_Select0 = with_Recursive0.select(stringArray0);
      Select.From select_From0 = thenSelect_Select0.from((Directive) quot0);
      assertNotNull(select_From0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[1];
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select(directiveArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select("jaskell.sql.ThenSelect$Select");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quot quot0 = new Quot("h[]}+QXM^");
      Name[] nameArray0 = new Name[3];
      With.Recursive with_Recursive0 = new With.Recursive(quot0, nameArray0);
      String[] stringArray0 = new String[9];
      ThenSelect.Select thenSelect_Select0 = with_Recursive0.select(stringArray0);
      List<Parameter<?>> list0 = thenSelect_Select0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Union.All union_All0 = new Union.All();
      // Undeclared exception!
      try { 
        union_All0.select((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Union.All union_All0 = new Union.All();
      // Undeclared exception!
      try { 
        union_All0.select((Directive[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      With with0 = new With();
      // Undeclared exception!
      try { 
        with0.select((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThenSelect.Select thenSelect_Select0 = new ThenSelect.Select();
      Union union0 = thenSelect_Select0.union();
      // Undeclared exception!
      try { 
        union0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.ThenSelect$Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      With with0 = new With();
      String[] stringArray0 = new String[6];
      ThenSelect.Select thenSelect_Select0 = with0.select(stringArray0);
      Select.From select_From0 = thenSelect_Select0.from("Pp%.eKaOL<2.");
      assertNotNull(select_From0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Union.All union_All0 = new Union.All();
      ThenSelect.Select thenSelect_Select0 = union_All0.select("6\"V?");
      assertNotNull(thenSelect_Select0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Union.All union_All0 = new Union.All();
      ThenSelect.Select thenSelect_Select0 = union_All0.select();
      Select.From select_From0 = thenSelect_Select0.from((Directive) union_All0);
      assertNotNull(select_From0);
  }
}
