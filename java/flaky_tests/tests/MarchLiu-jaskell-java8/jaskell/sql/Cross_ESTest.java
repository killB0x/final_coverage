/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:43:39 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Cross;
import jaskell.sql.Join;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cross_ESTest extends Cross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Cross cross0 = new Cross();
      Directive directive0 = cross0._prefix;
      Join join0 = cross0.join((Directive) null);
      cross0._prefix = (Directive) join0;
      // Undeclared exception!
      try { 
        cross0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Cross cross0 = new Cross();
      Cross cross1 = new Cross();
      cross0._prefix = (Directive) cross1;
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("RsSkdCC![", object0, class0);
      Class<Integer> class1 = Integer.class;
      Parameter<Integer> parameter1 = new Parameter<Integer>("RsSkdCC![", parameter0, class1);
      cross0._prefix = (Directive) parameter1;
      cross1._prefix = cross0._prefix;
      cross0.join((Directive) null);
      cross1.script();
      String string0 = cross0.script();
      assertEquals("RsSkdCC![ CROSS", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Cross cross0 = new Cross();
      Cross cross1 = new Cross();
      Class<Integer> class0 = Integer.class;
      Parameter<Integer> parameter0 = new Parameter<Integer>("jaskell.sql.Cross", cross0, class0);
      cross1._prefix = (Directive) parameter0;
      cross1.parameters();
      cross0.join(cross1);
      // Undeclared exception!
      try { 
        cross0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Cross", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Cross cross0 = new Cross();
      // Undeclared exception!
      try { 
        cross0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Cross", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Cross cross0 = new Cross();
      Cross cross1 = new Cross();
      Join join0 = cross0.join(cross1);
      assertNotNull(join0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Cross cross0 = new Cross();
      // Undeclared exception!
      try { 
        cross0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Cross", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Cross cross0 = new Cross();
      Directive directive0 = cross0._prefix;
      cross0._prefix = null;
      Cross cross1 = new Cross();
      Join join0 = cross0.join(cross1);
      cross0.join(join0);
      // Undeclared exception!
      try { 
        cross0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Cross", e);
      }
  }
}
