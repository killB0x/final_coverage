/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:49:09 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Exists;
import jaskell.sql.Func;
import jaskell.sql.IsNotNull;
import jaskell.sql.Like;
import jaskell.sql.Not;
import jaskell.sql.Predicate;
import jaskell.sql.Sum;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Not_ESTest extends Not_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IsNotNull isNotNull0 = new IsNotNull();
      Not not0 = new Not(isNotNull0);
      // Undeclared exception!
      try { 
        not0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.IsNotNull", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Not not0 = new Not();
      Exists exists0 = new Exists(not0);
      Predicate predicate0 = not0.ls(exists0);
      Func func0 = Func.avg(predicate0);
      Directive[] directiveArray0 = new Directive[6];
      directiveArray0[0] = (Directive) predicate0;
      directiveArray0[1] = (Directive) predicate0;
      directiveArray0[2] = (Directive) predicate0;
      directiveArray0[3] = (Directive) func0;
      Func func1 = func0.args(directiveArray0);
      Not not1 = new Not(func1);
      // Undeclared exception!
      not1.parameters();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Sum sum0 = new Sum("");
      Func func0 = Func.avg(sum0);
      Directive[] directiveArray0 = new Directive[3];
      directiveArray0[0] = (Directive) func0;
      Func func1 = func0.args(directiveArray0);
      Not not0 = new Not(func1);
      // Undeclared exception!
      try { 
        not0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Not not0 = null;
      try {
        not0 = new Not((Directive) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", "NOT ", class0);
      Not not0 = new Not(parameter0);
      List<Parameter<?>> list0 = not0.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Not not0 = new Not();
      List<Parameter<?>> list0 = not0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", "NOT ", class0);
      Not not0 = new Not(parameter0);
      String string0 = not0.script();
      assertEquals("NOT()", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Not not0 = new Not();
      String string0 = not0.script();
      assertEquals("NOT ", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Not not0 = new Not();
      Predicate predicate0 = not0.isNull();
      Exists exists0 = not0.exists(predicate0);
      assertNotNull(exists0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Like like0 = new Like();
      Not not0 = new Not(like0);
      // Undeclared exception!
      try { 
        not0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Binary", e);
      }
  }
}
