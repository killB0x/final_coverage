/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:38:43 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Delete;
import jaskell.sql.Limit;
import jaskell.sql.Name;
import jaskell.sql.Order;
import jaskell.sql.Query;
import jaskell.sql.Quot;
import jaskell.sql.Select;
import jaskell.sql.ThenSelect;
import jaskell.sql.With;
import java.sql.Connection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class With_ESTest extends With_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("%s WHERE %s", "%s BY %s");
      Name name0 = new Name("qKx5(v(");
      Delete.Where delete_Where0 = new Delete.Where(with_Recursive0, name0);
      Limit limit0 = delete_Where0.limit((-2089));
      With.As with_As0 = with_Recursive0.as(limit0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte("%s LIMIT %s", "%s BY %s");
      With.As with_As1 = with_CommonTableExpression0.as(with_Recursive0);
      With.CommonTableQuery with_CommonTableQuery0 = with_As1.query(limit0);
      String string0 = with_CommonTableQuery0.script();
      assertEquals("WITH RECURSIVE %s WHERE %s(%s BY %s) AS (WITH RECURSIVE %s WHERE %s(%s BY %s) where qKx5(v( LIMIT -2089), %s LIMIT %s AS (WITH RECURSIVE %s WHERE %s(%s BY %s)) WITH RECURSIVE %s WHERE %s(%s BY %s) where qKx5(v( LIMIT -2089", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quot quot0 = new Quot("", "bN_.R@uJ", " < ");
      Name[] nameArray0 = new Name[1];
      nameArray0[0] = (Name) quot0;
      With.Recursive with_Recursive0 = new With.Recursive(quot0, nameArray0);
      With.As with_As0 = with_Recursive0.as(with_Recursive0);
      With.Delete with_Delete0 = with_As0.delete();
      String string0 = with_Delete0.script();
      assertEquals("WITH RECURSIVE bN_.R@uJ < (bN_.R@uJ < ) AS (WITH RECURSIVE bN_.R@uJ < (bN_.R@uJ < )) DELETE", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Quot quot0 = new Quot(">8giD.&Bg11fe`", "nH8Snz_df03%$", "1.");
      Name[] nameArray0 = new Name[2];
      With with0 = new With(quot0, nameArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      With.Update with_Update0 = new With.Update("=y`");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("%s BY %s", "%s BY %s");
      String string0 = with_Recursive0.script();
      assertEquals("WITH RECURSIVE %s BY %s(%s BY %s)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      With with0 = new With("53yB-J");
      With.Recursive with_Recursive0 = new With.Recursive();
      With.As with_As0 = with0.as(with_Recursive0);
      With.CommonTableQuery with_CommonTableQuery0 = with_As0.query(with_Recursive0);
      // Undeclared exception!
      try { 
        with_CommonTableQuery0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$Recursive", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      With with0 = new With((Name) null, stringArray0);
      With.As with_As0 = new With.As(with0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte((Name) null, "d]h");
      // Undeclared exception!
      try { 
        with_CommonTableExpression0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$As", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression("=y`", stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      With.CommonTableExpression with_CommonTableExpression0 = null;
      try {
        with_CommonTableExpression0 = new With.CommonTableExpression("", (Name[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression("=y`", "=y`");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quot quot0 = new Quot("&_pPFa%r [WCf bA=f", "GppHmA>ZldU[Z4", "GppHmA>ZldU[Z4");
      String[] stringArray0 = new String[4];
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression(quot0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quot quot0 = new Quot("");
      Name[] nameArray0 = new Name[3];
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression(quot0, nameArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Limit limit0 = new Limit(0);
      With.As with_As0 = new With.As(limit0);
      // Undeclared exception!
      try { 
        with_As0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$As", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quot quot0 = new Quot("", "bN_.R@uJ", "");
      Name[] nameArray0 = new Name[1];
      nameArray0[0] = (Name) quot0;
      With.Recursive with_Recursive0 = new With.Recursive(quot0, nameArray0);
      ThenSelect.Select thenSelect_Select0 = with_Recursive0.select();
      With.As with_As0 = with_Recursive0.as(thenSelect_Select0);
      With.Update with_Update0 = with_As0.update(nameArray0[0]);
      List<Parameter<?>> list0 = with_Update0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("%s WHERE %s", "%s BY %s");
      Name name0 = new Name("qKx5(v(");
      Delete.Where delete_Where0 = new Delete.Where(with_Recursive0, name0);
      Limit limit0 = delete_Where0.limit((-2089));
      With.As with_As0 = with_Recursive0.as(limit0);
      With.Insert with_Insert0 = with_As0.insert();
      List<Parameter<?>> list0 = with_Insert0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quot quot0 = new Quot("", "bN_.R@uJ", "");
      With with0 = new With(quot0);
      With.As with_As0 = with0.as(with0);
      With.Delete with_Delete0 = with_As0.delete();
      List<Parameter<?>> list0 = with_Delete0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[5];
      String[] stringArray0 = new String[4];
      Select select0 = new Select(directiveArray0);
      With.As with_As0 = new With.As(select0);
      ThenSelect.Select thenSelect_Select0 = with_As0.select(stringArray0);
      assertNotNull(thenSelect_Select0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Name name0 = new Name("");
      With with0 = new With(name0, stringArray0);
      With.Recursive with_Recursive0 = with0.recursive();
      With.As with_As0 = new With.As(with_Recursive0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte("=y`", stringArray0);
      assertNotNull(with_CommonTableExpression0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Name name0 = new Name("");
      With with0 = new With(name0, stringArray0);
      With.Recursive with_Recursive0 = with0.recursive();
      With.As with_As0 = new With.As(with_Recursive0);
      Name[] nameArray0 = new Name[0];
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte("=y`", nameArray0);
      assertNotNull(with_CommonTableExpression0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      With with0 = new With();
      Name name0 = with0.name();
      assertNull(name0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      With with0 = null;
      try {
        with0 = new With((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Name name0 = new Name();
      With with0 = null;
      try {
        with0 = new With(name0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      With with0 = null;
      try {
        with0 = new With((Name) null, (Name[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      With with0 = new With();
      // Undeclared exception!
      try { 
        with0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      With with0 = new With("%s UNION", "%s UNION");
      String string0 = with0.script();
      assertEquals("WITH %s UNION(%s UNION)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Name name0 = new Name("");
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression(name0, "");
      // Undeclared exception!
      try { 
        with_CommonTableExpression0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$CommonTableExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      With with0 = new With("%s UNION", "%s UNION");
      With.Recursive with_Recursive0 = new With.Recursive("%s UNION", "%s UNION");
      With.As with_As0 = with0.as(with_Recursive0);
      Quot quot0 = new Quot("%s UNION", "%s UNION", "a\"X;6,HJ_$3'tg");
      Name[] nameArray0 = new Name[0];
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte((Name) quot0, nameArray0);
      assertNotNull(with_CommonTableExpression0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      With with0 = new With("Y`|A", "Y`|A");
      With.As with_As0 = new With.As(with0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte("Hq_^qETvF", "Y`|A");
      With.As with_As1 = with_CommonTableExpression0.as(with0);
      // Undeclared exception!
      try { 
        with_As1.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$As", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      With with0 = new With("i", "i");
      With.As with_As0 = new With.As(with0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte("i");
      assertNotNull(with_CommonTableExpression0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      With with0 = new With();
      With.As with_As0 = new With.As(with0);
      Directive[] directiveArray0 = new Directive[1];
      ThenSelect.Select thenSelect_Select0 = with_As0.select(directiveArray0);
      assertNotNull(thenSelect_Select0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive();
      With.As with_As0 = with_Recursive0.as((Query) null);
      Name name0 = new Name("");
      // Undeclared exception!
      try { 
        with_As0.cte(name0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      With with0 = new With();
      Quot quot0 = new Quot("");
      With.CommonTableExpression with_CommonTableExpression0 = new With.CommonTableExpression(quot0);
      With.As with_As0 = with_CommonTableExpression0.as(with0);
      ThenSelect.Select thenSelect_Select0 = with_As0.select("");
      assertNotNull(thenSelect_Select0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      With with0 = new With();
      With.As with_As0 = new With.As(with0);
      Name name0 = new Name();
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte(name0);
      assertNotNull(with_CommonTableExpression0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      With.Delete with_Delete0 = new With.Delete();
      // Undeclared exception!
      try { 
        with_Delete0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$Delete", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      With.CommonTableQuery with_CommonTableQuery0 = new With.CommonTableQuery();
      // Undeclared exception!
      try { 
        with_CommonTableQuery0.scalar((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$CommonTableQuery", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Name name0 = new Name();
      With.Update with_Update0 = new With.Update(name0);
      // Undeclared exception!
      try { 
        with_Update0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive();
      With.As with_As0 = with_Recursive0.as(with_Recursive0);
      With.Update with_Update0 = with_As0.update((String) null);
      assertNotNull(with_Update0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      With.Insert with_Insert0 = new With.Insert();
      // Undeclared exception!
      try { 
        with_Insert0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.With$Insert", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      With with0 = new With("%s BY %s");
      With.Recursive with_Recursive0 = new With.Recursive("%s BY %s", "%s BY %s");
      With.As with_As0 = with0.as(with_Recursive0);
      With.Insert with_Insert0 = with_As0.insert();
      String string0 = with_Insert0.script();
      assertEquals("WITH %s BY %s AS (WITH RECURSIVE %s BY %s(%s BY %s)) INSERT", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quot quot0 = new Quot("");
      Name[] nameArray0 = new Name[1];
      With.Recursive with_Recursive0 = new With.Recursive(quot0, nameArray0);
      ThenSelect.Select thenSelect_Select0 = with_Recursive0.select();
      With.As with_As0 = with_Recursive0.as(thenSelect_Select0);
      With.CommonTableQuery with_CommonTableQuery0 = with_As0.query(thenSelect_Select0);
      List<Parameter<?>> list0 = with_CommonTableQuery0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      With with0 = new With("%s UNION", "%s UNION");
      With.Recursive with_Recursive0 = new With.Recursive("%s UNION", "%s UNION");
      With.As with_As0 = with0.as(with_Recursive0);
      With.Update with_Update0 = with_As0.update((Name) null);
      // Undeclared exception!
      try { 
        with_Update0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Update", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      With with0 = new With("%s BY %s");
      Name name0 = with0.name();
      assertEquals("%s BY %s", name0.name());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      With with0 = new With();
      Name name0 = new Name();
      With with1 = with0.name(name0);
      assertSame(with0, with1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      With.Recursive with_Recursive0 = new With.Recursive((Name) null, stringArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      With.Recursive with_Recursive0 = new With.Recursive("&I1{", "&I1{");
      List<Parameter<?>> list0 = with_Recursive0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      With with0 = new With("%s UNION", "%s UNION");
      With with1 = with0.name("%s UNION");
      assertSame(with1, with0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Name name0 = new Name();
      With with0 = new With(name0);
      Directive[] directiveArray0 = new Directive[6];
      Order.By order_By0 = new Order.By(directiveArray0);
      String[] stringArray0 = new String[0];
      With.As with_As0 = with0.as(order_By0);
      With.CommonTableExpression with_CommonTableExpression0 = with_As0.cte(name0, stringArray0);
      assertNotNull(with_CommonTableExpression0);
  }
}
