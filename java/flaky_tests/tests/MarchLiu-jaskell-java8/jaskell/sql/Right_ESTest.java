/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:41:54 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.sql.Join;
import jaskell.sql.Right;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Right_ESTest extends Right_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Right right0 = new Right();
      Directive directive0 = right0._prefix;
      Join join0 = right0.join((Directive) null);
      right0._prefix = (Directive) join0;
      right0.script();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Right right0 = new Right();
      Join join0 = right0.join(right0);
      assertNotNull(join0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Right right0 = new Right();
      Right right1 = new Right();
      Join join0 = right0.join(right1);
      Join join1 = right0.join(right1);
      assertFalse(join1.equals((Object)join0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Right right0 = new Right();
      // Undeclared exception!
      try { 
        right0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Right", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Right right0 = new Right();
      // Undeclared exception!
      try { 
        right0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Right", e);
      }
  }
}
