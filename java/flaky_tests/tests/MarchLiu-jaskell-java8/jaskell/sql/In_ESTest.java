/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:29:11 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.In;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class In_ESTest extends In_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("n#(O-rq}6", object0, class0);
      In in0 = new In(parameter0);
      List<Parameter<?>> list0 = in0.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      In in0 = new In((Directive) null);
      // Undeclared exception!
      try { 
        in0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("n#(O-rq}6", object0, class0);
      In in0 = new In(parameter0);
      String string0 = in0.script();
      assertEquals("IN (n#(O-rq}6)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      In in0 = new In((Directive) null);
      // Undeclared exception!
      try { 
        in0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.In", e);
      }
  }
}
