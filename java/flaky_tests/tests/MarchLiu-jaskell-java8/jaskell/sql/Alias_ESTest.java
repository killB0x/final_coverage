/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:32:53 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Alias;
import jaskell.sql.Cross;
import jaskell.sql.Full;
import jaskell.sql.Inner;
import jaskell.sql.Join;
import jaskell.sql.Left;
import jaskell.sql.Right;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Alias_ESTest extends Alias_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Alias alias0 = new Alias(" |JR");
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>(" |JR", alias0, class0);
      Cross cross0 = alias0.cross();
      alias0.left();
      parameter0.parameters();
      alias0.right();
      alias0._query = (Directive) parameter0;
      Object object0 = new Object();
      alias0.inner();
      parameter0.value((Object) cross0);
      parameter0.value(object0);
      Inner inner0 = alias0.inner();
      parameter0.parameters();
      parameter0.value();
      alias0.full();
      alias0.full();
      alias0.right();
      alias0.right();
      alias0.full();
      alias0.right();
      Left left0 = alias0.left();
      alias0.join(inner0);
      alias0.inner();
      alias0.parameters();
      alias0.join(left0);
      alias0.script();
      alias0.parameters();
      alias0.right();
      alias0.full();
      alias0.inner();
      alias0.cross();
      alias0.left();
      alias0.cross();
      alias0.inner();
      alias0.left();
      alias0.parameters();
      alias0.right();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Alias alias0 = new Alias("s_:?{6PP");
      alias0.right();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Alias alias0 = new Alias("");
      // Undeclared exception!
      try { 
        alias0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Alias", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Alias alias0 = new Alias("<");
      Directive directive0 = alias0._query;
      alias0.join((Directive) null);
      alias0.full();
      alias0.right();
      alias0.cross();
      alias0._query = null;
      alias0.right();
      alias0.right();
      Cross cross0 = alias0.cross();
      alias0.join(cross0);
      Inner inner0 = alias0.inner();
      alias0.join(inner0);
      alias0.join((Directive) null);
      alias0.full();
      alias0.right();
      alias0.left();
      alias0.cross();
      alias0.cross();
      alias0.full();
      // Undeclared exception!
      try { 
        alias0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Alias", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Alias alias0 = new Alias("jaskell.sql.Or");
      alias0.left();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Alias alias0 = new Alias("y!M^)Py$!.,");
      alias0.cross();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Alias alias0 = new Alias("");
      Full full0 = alias0.full();
      alias0.join(full0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Alias alias0 = new Alias("s_:U{6PP");
      alias0.inner();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Alias alias0 = new Alias("");
      Cross cross0 = alias0.cross();
      alias0.left();
      alias0._query = (Directive) cross0;
      Inner inner0 = alias0.inner();
      alias0.full();
      alias0.left();
      Inner inner1 = alias0.inner();
      alias0.left();
      alias0.join(inner0);
      Cross cross1 = alias0.cross();
      alias0._query = (Directive) inner1;
      Cross cross2 = alias0.cross();
      alias0.join(cross2);
      alias0.cross();
      alias0.script();
      alias0.left();
      alias0.cross();
      alias0.full();
      alias0.full();
      alias0.inner();
      alias0.inner();
      alias0.full();
      alias0.inner();
      Cross cross3 = alias0.cross();
      alias0.full();
      alias0.join(cross1);
      alias0.parameters();
      alias0.join(cross3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Alias alias0 = new Alias("(82bvgIJylX h@m");
      Full full0 = alias0.full();
      assertNotNull(full0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Alias alias0 = new Alias("$\"`7");
      // Undeclared exception!
      try { 
        alias0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Alias", e);
      }
  }
}
