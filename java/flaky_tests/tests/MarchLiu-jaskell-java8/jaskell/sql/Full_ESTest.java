/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:03:16 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Full;
import jaskell.sql.Join;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Full_ESTest extends Full_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Full full0 = new Full();
      Class<Integer> class0 = Integer.class;
      Parameter<Integer> parameter0 = new Parameter<Integer>("^<&Plev|q1#~", full0, class0);
      Join join0 = full0.join(parameter0);
      full0._prefix = (Directive) join0;
      full0.script();
      Directive directive0 = null;
      int int0 = 4148;
      parameter0.order(int0);
      int int1 = 0;
      parameter0.order(int1);
      full0.join(directive0);
      full0.script();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Full full0 = new Full();
      Class<Integer> class0 = Integer.class;
      Parameter<Integer> parameter0 = new Parameter<Integer>("", full0, class0);
      full0._prefix = (Directive) parameter0;
      full0.parameters();
      Parameter parameter1 = (Parameter)full0._prefix;
      full0._prefix = (Directive) parameter1;
      Join join0 = full0.join(parameter1);
      Join join1 = full0.join(join0);
      full0.parameters();
      full0.parameters();
      full0.script();
      full0.parameters();
      full0.parameters();
      full0.script();
      full0.parameters();
      full0.script();
      full0.parameters();
      full0.parameters();
      full0._prefix = (Directive) parameter1;
      full0.parameters();
      full0.script();
      Join join2 = full0.join(parameter1);
      full0.parameters();
      full0.parameters();
      full0.parameters();
      full0.parameters();
      full0.parameters();
      full0.join(join1);
      Join join3 = full0.join(join2);
      assertNotSame(join3, join1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Full full0 = new Full();
      full0.join((Directive) null);
      Full full1 = new Full();
      Class<Integer> class0 = Integer.class;
      full0.join(full1);
      full1.join(full0);
      Parameter<Integer> parameter0 = new Parameter<Integer>("Wid0ecRV\"f4", "Wid0ecRV\"f4", class0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        full1.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Full", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Full full0 = new Full();
      Directive directive0 = full0._prefix;
      Join join0 = full0.join((Directive) null);
      assertNotNull(join0);
      
      // Undeclared exception!
      try { 
        full0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Full", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Full full0 = new Full();
      // Undeclared exception!
      try { 
        full0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Full", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Full full0 = new Full();
      // Undeclared exception!
      try { 
        full0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Full", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Full full0 = new Full();
      Full full1 = new Full();
      // Undeclared exception!
      try { 
        full1.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Full", e);
      }
  }
}
