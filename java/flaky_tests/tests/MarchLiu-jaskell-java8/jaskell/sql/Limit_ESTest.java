/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:26:59 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Delete;
import jaskell.sql.Exists;
import jaskell.sql.Limit;
import jaskell.sql.Literal;
import jaskell.sql.Not;
import jaskell.sql.Offset;
import jaskell.sql.Sum;
import jaskell.sql.Union;
import jaskell.sql.With;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Limit_ESTest extends Limit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Limit limit0 = new Limit((-342));
      Union union0 = limit0.union();
      Union.All union_All0 = union0.all(limit0);
      Offset offset0 = limit0.offset((Directive) union_All0);
      assertNotNull(offset0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Delete delete0 = new Delete();
      Integer integer0 = new Integer((-1));
      Literal literal0 = new Literal(integer0);
      Delete.Where delete_Where0 = new Delete.Where(delete0, literal0);
      Limit limit0 = delete_Where0.limit((Directive) literal0);
      Offset offset0 = limit0.offset((Directive) literal0);
      assertNotNull(offset0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Delete delete0 = new Delete();
      Integer integer0 = new Integer((-1));
      Literal literal0 = new Literal(integer0);
      Delete.Where delete_Where0 = new Delete.Where(delete0, literal0);
      Limit limit0 = delete_Where0.limit((Directive) literal0);
      List<Parameter<?>> list0 = limit0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Limit limit0 = new Limit((Directive) null);
      // Undeclared exception!
      try { 
        limit0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Limit", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sum sum0 = new Sum();
      Delete.Where delete_Where0 = new Delete.Where(sum0, sum0);
      Limit limit0 = delete_Where0.limit(2);
      // Undeclared exception!
      try { 
        limit0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Sum", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      With with0 = new With("tD;*9 <pTWZ,}", "gm&bJZrNfr4KC$!WQ");
      Not not0 = new Not();
      Integer integer0 = new Integer(0);
      Class<Integer> class0 = Integer.class;
      Parameter<Integer> parameter0 = new Parameter<Integer>("tD;*9 <pTWZ,}", integer0, class0);
      Class<Object> class1 = Object.class;
      Parameter<Object> parameter1 = new Parameter<Object>("gm&bJZrNfr4KC$!WQ", parameter0, class1);
      Exists exists0 = not0.exists(parameter1);
      Delete.Where delete_Where0 = new Delete.Where(with0, exists0);
      Limit limit0 = delete_Where0.limit((Directive) with0);
      List<Parameter<?>> list0 = limit0.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      With with0 = new With("tD;*9 <pTWZ,}", "gm&bJZrNfr4KC$!WQ");
      Not not0 = new Not();
      Integer integer0 = new Integer(0);
      Class<Integer> class0 = Integer.class;
      Parameter<Integer> parameter0 = new Parameter<Integer>("tD;*9 <pTWZ,}", integer0, class0);
      Class<Object> class1 = Object.class;
      Parameter<Object> parameter1 = new Parameter<Object>("gm&bJZrNfr4KC$!WQ", parameter0, class1);
      Exists exists0 = not0.exists(parameter1);
      Delete.Where delete_Where0 = new Delete.Where(with0, exists0);
      Limit limit0 = delete_Where0.limit((Directive) with0);
      String string0 = limit0.script();
      assertEquals("WITH tD;*9 <pTWZ,}(gm&bJZrNfr4KC$!WQ) where NOT  EXISTS(gm&bJZrNfr4KC$!WQ) LIMIT WITH tD;*9 <pTWZ,}(gm&bJZrNfr4KC$!WQ)", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Delete delete0 = new Delete();
      Integer integer0 = new Integer((-1));
      Literal literal0 = new Literal(integer0);
      Delete.Where delete_Where0 = new Delete.Where(delete0, literal0);
      Limit limit0 = delete_Where0.limit((Directive) literal0);
      Offset offset0 = limit0.offset(0);
      assertNotNull(offset0);
  }
}
