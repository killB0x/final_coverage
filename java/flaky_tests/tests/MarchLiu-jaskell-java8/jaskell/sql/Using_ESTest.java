/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:16:24 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Count;
import jaskell.sql.Predicate;
import jaskell.sql.Quot;
import jaskell.sql.Using;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Using_ESTest extends Using_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Count count0 = new Count("oQLd)by%d=)YES(,D");
      Predicate predicate0 = count0.or((Object) "oQLd)by%d=)YES(,D");
      Using.Where using_Where0 = new Using.Where(predicate0);
      List<Parameter<?>> list0 = using_Where0.parameters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Using using0 = new Using(stringArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Using using0 = new Using("-@qt(LWM");
      Quot quot0 = new Quot("jaskell.sql.Using$Where", "M[A{1S=YCfJN9{GvY", "/ReM!`nTH");
      using0._prefix = (Directive) quot0;
      String string0 = using0.script();
      assertEquals("jaskell.sql.Using$WhereM[A{1S=YCfJN9{GvY/ReM!`nTH USING(-@qt(LWM)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Using using0 = null;
      try {
        using0 = new Using((Directive[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Using using0 = null;
      try {
        using0 = new Using((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Using", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Using using0 = null;
      try {
        using0 = new Using((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Using using0 = new Using("-@qt(LWM");
      // Undeclared exception!
      try { 
        using0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Using", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Using using0 = new Using(".");
      List<Parameter<?>> list0 = using0.parameters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[3];
      Using using0 = new Using(directiveArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Using using0 = new Using("-@qt(LWM");
      Quot quot0 = new Quot("jaskell.sql.Using$Where", "M[A{1S=YCfJN9{GvY", "/ReM!`nTH");
      Count count0 = new Count(quot0);
      Predicate predicate0 = count0.gt((Directive) using0);
      Using.Where using_Where0 = using0.where(predicate0);
      String string0 = using_Where0.script();
      assertNull(string0);
  }
}
