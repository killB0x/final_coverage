/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 12:48:57 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Brackets;
import jaskell.sql.Count;
import jaskell.sql.Cross;
import jaskell.sql.Full;
import jaskell.sql.Func;
import jaskell.sql.Inner;
import jaskell.sql.Join;
import jaskell.sql.Left;
import jaskell.sql.Literal;
import jaskell.sql.Name;
import jaskell.sql.Predicate;
import jaskell.sql.Quot;
import jaskell.sql.Right;
import jaskell.sql.Sum;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Literal_ESTest extends Literal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Literal.Alias literal_Alias0 = new Literal.Alias("jaskell.sql.Literal$Alias");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Literal literal0 = new Literal(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Literal literal0 = new Literal();
      String string0 = literal0.script();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sum sum0 = new Sum("jaskell.sql.Literal$Alias");
      String string0 = sum0.script();
      assertEquals("SUM(jaskell.sql.Literal$Alias)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Literal literal0 = new Literal("");
      String string0 = literal0.script();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Quot quot0 = new Quot("jaskell.sql.Text", "(%s) AS %s", "");
      Func func0 = Func.min(quot0);
      Integer integer0 = new Integer(0);
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>("", integer0, class0);
      Predicate predicate0 = func0.gt(parameter0);
      Func func1 = Func.avg(predicate0);
      List<Parameter<?>> list0 = func1.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Func func0 = Func.min((Directive) null);
      // Undeclared exception!
      try { 
        func0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Directive[] directiveArray0 = new Directive[0];
      Func func0 = new Func("", directiveArray0);
      Func func1 = func0.arg(func0);
      // Undeclared exception!
      try { 
        func1.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sum sum0 = new Sum();
      // Undeclared exception!
      try { 
        sum0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Sum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Count count0 = new Count();
      // Undeclared exception!
      try { 
        count0.as((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      List<Parameter<?>> list0 = literal_Alias0.parameters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      Left left0 = literal_Alias0.left();
      assertNotNull(left0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Literal literal0 = new Literal("");
      Brackets brackets0 = new Brackets();
      Predicate predicate0 = literal0.ne((Integer) null);
      Predicate predicate1 = brackets0.gt((Directive) predicate0);
      Literal.Alias literal_Alias0 = literal0.as("");
      Join join0 = literal_Alias0.join(predicate1);
      assertNotNull(join0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      String string0 = literal_Alias0.script();
      assertEquals(" AS \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-513));
      Literal literal0 = new Literal(integer0);
      Literal.Alias literal_Alias0 = new Literal.Alias(literal0);
      String string0 = literal_Alias0.alias();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      Full full0 = literal_Alias0.full();
      assertNotNull(full0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Literal literal0 = new Literal();
      Literal.Alias literal_Alias0 = new Literal.Alias(literal0);
      Inner inner0 = literal_Alias0.inner();
      assertNotNull(inner0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      Right right0 = literal_Alias0.right();
      assertNotNull(right0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Literal literal0 = new Literal("");
      Name name0 = new Name("l5,1,l");
      Literal.Alias literal_Alias0 = literal0.as(name0);
      assertNotNull(literal_Alias0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Literal literal0 = new Literal("");
      Inner inner0 = literal0.inner();
      assertNotNull(inner0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Literal literal0 = new Literal("");
      Literal.Alias literal_Alias0 = literal0.as("");
      Cross cross0 = literal_Alias0.cross();
      assertNotNull(cross0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Name name0 = new Name("l5,1,l");
      Right right0 = name0.right();
      assertNotNull(right0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Literal literal0 = null;
      try {
        literal0 = new Literal((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Literal literal0 = new Literal();
      Literal.Alias literal_Alias0 = new Literal.Alias(literal0);
      Join join0 = literal0.join(literal_Alias0);
      assertNotNull(join0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Literal literal0 = new Literal((-3486L));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Name name0 = new Name("l5,1,l");
      Left left0 = name0.left();
      assertNotNull(left0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Literal literal0 = new Literal("");
      Cross cross0 = literal0.cross();
      assertNotNull(cross0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Quot quot0 = new Quot("jaskell.sql.Text", "(%s) AS %s", "");
      Func func0 = Func.min(quot0);
      List<Parameter<?>> list0 = func0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Literal literal0 = new Literal(0);
      Full full0 = literal0.full();
      assertNotNull(full0);
  }
}
