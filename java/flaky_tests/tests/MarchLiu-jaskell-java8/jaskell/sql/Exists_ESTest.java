/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 10:40:40 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.script.Parameter;
import jaskell.sql.Equal;
import jaskell.sql.Exists;
import jaskell.sql.Func;
import jaskell.sql.Literal;
import jaskell.sql.Not;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Exists_ESTest extends Exists_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Not not0 = new Not();
      Optional<Directive> optional0 = Optional.ofNullable((Directive) not0);
      not0._predicate = optional0;
      Exists exists0 = new Exists(not0);
      // Undeclared exception!
      try { 
        exists0.script();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Equal equal0 = new Equal();
      Exists exists0 = new Exists(equal0);
      // Undeclared exception!
      try { 
        exists0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Not not0 = new Not();
      Func func0 = Func.avg(not0);
      Directive[] directiveArray0 = new Directive[2];
      directiveArray0[0] = (Directive) func0;
      Func func1 = func0.args(directiveArray0);
      Exists exists0 = new Exists(func1);
      // Undeclared exception!
      try { 
        exists0.parameters();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Equal equal0 = new Equal();
      Exists exists0 = new Exists(equal0);
      // Undeclared exception!
      try { 
        exists0.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Literal literal0 = new Literal("jaskell.sql.Exists");
      Not not0 = new Not(literal0);
      Exists exists0 = not0.exists(literal0);
      List<Parameter<?>> list0 = exists0.parameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Parameter<Object> parameter0 = new Parameter<Object>((String) null, object0, class0);
      Func func0 = Func.max(parameter0);
      Exists exists0 = new Exists(func0);
      List<Parameter<?>> list0 = exists0.parameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Not not0 = new Not();
      Exists exists0 = not0.exists(not0);
      String string0 = exists0.script();
      assertEquals("NOT  EXISTS(NOT )", string0);
  }
}
