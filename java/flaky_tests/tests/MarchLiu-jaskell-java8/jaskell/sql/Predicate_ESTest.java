/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 11:22:19 GMT 2022
 */

package jaskell.sql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jaskell.script.Directive;
import jaskell.sql.Brackets;
import jaskell.sql.Count;
import jaskell.sql.Cross;
import jaskell.sql.Func;
import jaskell.sql.IsNotNull;
import jaskell.sql.Left;
import jaskell.sql.Less;
import jaskell.sql.Name;
import jaskell.sql.Or;
import jaskell.sql.Predicate;
import jaskell.sql.Quot;
import jaskell.sql.Sum;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Predicate_ESTest extends Predicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quot quot0 = new Quot("", "", "");
      Func func0 = Func.min(quot0);
      List<Directive> list0 = func0._args;
      Predicate predicate0 = quot0.in(list0);
      String string0 = predicate0.script();
      assertEquals(" in ()", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Count count0 = new Count();
      Predicate predicate0 = count0.op((String) null, (Optional<Object>) null);
      Func func0 = Func.avg(predicate0);
      String string0 = func0.script();
      assertEquals("AVGs(COUNT(*)nullnull)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sum sum0 = new Sum();
      Predicate predicate0 = sum0.eq((Directive) sum0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Or or0 = new Or();
      Predicate predicate0 = or0.lte((Directive) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Predicate predicate0 = brackets0.gte((Directive) brackets0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Count count0 = new Count();
      Predicate predicate0 = count0.gt((Directive) count0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sum sum0 = new Sum();
      Predicate predicate0 = sum0.eq((Integer) null);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sum sum0 = new Sum();
      IsNotNull isNotNull0 = new IsNotNull();
      Predicate predicate0 = sum0.and(isNotNull0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Or or0 = new Or();
      Predicate predicate0 = or0.isNotNull();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sum sum0 = new Sum();
      Func func0 = Func.avg(sum0);
      Predicate predicate0 = sum0.ls(func0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sum sum0 = new Sum();
      Cross cross0 = sum0.cross();
      Predicate predicate0 = sum0.gt((Object) cross0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sum sum0 = new Sum();
      Object object0 = new Object();
      Predicate predicate0 = sum0.ne(object0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Or or0 = new Or();
      Func func0 = Func.max(or0);
      Predicate predicate0 = or0.isNull();
      Name name0 = new Name("*p[/Uc");
      Count count0 = new Count(name0);
      Left left0 = count0.left();
      Predicate predicate1 = predicate0.like((Directive) left0);
      List<Directive> list0 = func0._args;
      Predicate predicate2 = predicate1.in(list0);
      // Undeclared exception!
      try { 
        predicate2.parameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jaskell.sql.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Or or0 = new Or();
      Integer integer0 = new Integer(0);
      Predicate predicate0 = or0.like(integer0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sum sum0 = new Sum();
      Less less0 = new Less();
      Predicate predicate0 = sum0.ne((Directive) less0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sum sum0 = new Sum();
      Object object0 = new Object();
      Predicate predicate0 = sum0.lte(object0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sum sum0 = new Sum();
      Object object0 = new Object();
      Predicate predicate0 = sum0.lt(object0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Or or0 = new Or();
      Func func0 = Func.max(or0);
      Predicate predicate0 = or0.or((Predicate) func0);
      assertFalse(predicate0.equals((Object)or0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Count count0 = new Count();
      Object object0 = new Object();
      Predicate predicate0 = count0.gte(object0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Brackets brackets0 = new Brackets();
      Object object0 = new Object();
      Predicate predicate0 = brackets0.or(object0);
      assertNotNull(predicate0);
  }
}
