/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:33:03 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.labels.VectorElement;
import com.github.druidgreeneyes.rivet.core.util.Util;
import java.util.AbstractMap;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VectorElement_ESTest extends VectorElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      Integer integer0 = new Integer(348);
      Double double0 = new Double(2407.1);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement1 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      boolean boolean0 = vectorElement1.strictEquals(vectorElement0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(348, vectorElement1.index());
      assertFalse(boolean0);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.fromString("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Wrong number of partitions: 
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      double double0 = vectorElement0.value();
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1470, (double) 1470);
      VectorElement vectorElement1 = vectorElement0.add(1.0E-6);
      VectorElement vectorElement2 = vectorElement1.destructiveSet(0.0);
      VectorElement vectorElement3 = vectorElement0.subtract(vectorElement2);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertTrue(vectorElement3.equals((Object)vectorElement0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      VectorElement vectorElement1 = vectorElement0.subtract(vectorElement0);
      assertEquals(0, vectorElement1.index());
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(0, 0.0);
      vectorElement0.destructiveSet(2);
      vectorElement0.subtract(vectorElement0);
      assertEquals(2, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1470, (double) 1470);
      VectorElement vectorElement1 = VectorElement.elt((-2677), 1.0E-6);
      VectorElement vectorElement2 = vectorElement1.subtract(vectorElement0);
      assertEquals((-2677), vectorElement2.index());
      assertEquals(1.0E-6, vectorElement1.value(), 0.01);
      assertEquals((-2677), vectorElement1.index());
      assertEquals((-1469.999999), vectorElement2.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(0, 0.0);
      vectorElement0.destructiveSet(2);
      vectorElement0.subtract((double) 0);
      assertEquals(2, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex((-4594));
      VectorElement vectorElement1 = vectorElement0.subtract((-1.0));
      VectorElement vectorElement2 = vectorElement1.multiply(621.88999);
      assertEquals((-4594), vectorElement2.index());
      assertEquals(621.88999, vectorElement2.value(), 0.01);
      assertEquals((-4594), vectorElement1.index());
      assertEquals(1.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue(1.0);
      VectorElement vectorElement1 = vectorElement0.destructiveDiv((-197));
      VectorElement vectorElement2 = vectorElement1.multiply(2324.26860745343);
      assertEquals((-0.005076142131979695), vectorElement0.value(), 0.01);
      assertEquals((-11.79831780433213), vectorElement2.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      VectorElement vectorElement1 = vectorElement0.multiply(1.0E-6);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement1.index());
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement((-1), 1773.4955322894);
      vectorElement0.destructiveSet(2);
      int int0 = vectorElement0.index();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromString("7|9");
      assertEquals(9.0, vectorElement0.value(), 0.01);
      assertEquals(7, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromString("-3618|-3618.000000");
      assertEquals((-3618.0), vectorElement0.value(), 0.01);
      assertEquals((-3618), vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-8));
      Double double0 = new Double((-8));
      AbstractMap.SimpleImmutableEntry<Integer, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleImmutableEntry0);
      double double1 = vectorElement0.value();
      assertEquals((-8), vectorElement0.index());
      assertEquals((-8.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(0, 3516.3265991640938);
      assertEquals(3516.3265991640938, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      VectorElement vectorElement1 = vectorElement0.subtract(2407.1);
      VectorElement vectorElement2 = vectorElement1.divide(2407.1);
      assertEquals(0, vectorElement2.index());
      assertEquals((-2407.1), vectorElement1.value(), 0.01);
      assertEquals((-1.0), vectorElement2.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1470, (double) 1470);
      VectorElement vectorElement1 = vectorElement0.divide(1631.835384902394);
      assertEquals(1470, vectorElement1.index());
      assertEquals(0.9008261578344963, vectorElement1.value(), 0.01);
      assertEquals(1470.0, vectorElement0.value(), 0.01);
      assertEquals(1470, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1923));
      Double double0 = new Double(0.0);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      VectorElement vectorElement1 = vectorElement0.divide((-1923));
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(-0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1471, (double) 1471);
      VectorElement vectorElement1 = VectorElement.fromIndex(1471);
      VectorElement vectorElement2 = vectorElement0.destructiveSub(vectorElement1);
      assertEquals(1471, vectorElement2.index());
      assertEquals(1471, vectorElement1.index());
      assertEquals(1471.0, vectorElement2.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-1555), (double) (-1555));
      VectorElement vectorElement1 = VectorElement.zero();
      VectorElement vectorElement2 = vectorElement0.destructiveSub(vectorElement1);
      assertEquals((-1555.0), vectorElement2.value(), 0.01);
      assertEquals((-1555), vectorElement2.index());
      assertEquals(0, vectorElement1.index());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      VectorElement vectorElement1 = vectorElement0.destructiveSub(vectorElement0);
      assertEquals(0, vectorElement1.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-1555), (double) (-1555));
      vectorElement0.destructiveSub(vectorElement0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1471, (double) 1471);
      vectorElement0.destructiveSub((double) (-2677));
      assertEquals(4148.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-785), (double) (-785));
      vectorElement0.destructiveSub(239.91418);
      assertEquals((-1024.91418), vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      VectorElement vectorElement1 = vectorElement0.destructiveSet(0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      vectorElement0.destructiveSet((-88));
      assertEquals((-88), vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      vectorElement0.destructiveSet((-175.51610233));
      assertEquals((-175.51610233), vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-508), 0.0);
      VectorElement vectorElement1 = vectorElement0.destructiveSet(0.0);
      assertEquals((-508), vectorElement1.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1293, (-3105.750913884));
      vectorElement0.destructiveMult((-3105.750913884));
      assertEquals(9645688.739091301, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue((-592.0));
      vectorElement0.destructiveSet(522);
      vectorElement0.destructiveMult(1.0E-6);
      assertEquals(522, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex((-1453));
      vectorElement0.destructiveMult((-1146.3477938405576));
      assertEquals(-0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      vectorElement0.destructiveDiv((-5113.615720381123));
      assertEquals(-0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement((-1), 1773.4955322894);
      VectorElement vectorElement1 = vectorElement0.destructiveSet(2);
      vectorElement1.destructiveDiv(0.0);
      assertEquals(2, vectorElement0.index());
      assertEquals(Double.POSITIVE_INFINITY, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement((-5106), 0.0);
      vectorElement0.destructiveDiv(0.0);
      vectorElement0.destructiveAdd(vectorElement0);
      assertEquals(Double.NaN, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue(1.0);
      vectorElement0.destructiveDiv((-197));
      vectorElement0.destructiveAdd(vectorElement0);
      assertEquals((-0.01015228426395939), vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(1039);
      VectorElement vectorElement1 = vectorElement0.destructiveAdd(vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(1039, vectorElement1.index());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(469, (-711.4311126));
      vectorElement0.destructiveAdd((-711.4311126));
      assertEquals((-1422.8622252), vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-1923));
      Double double0 = new Double(0.0);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      vectorElement0.destructiveAdd(325.19151078);
      assertEquals(325.19151078, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(1470);
      vectorElement0.destructiveSet((double) 1470);
      vectorElement0.copy();
      assertEquals(1470.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue((-832));
      VectorElement vectorElement1 = vectorElement0.copy();
      assertTrue(vectorElement1.equals((Object)vectorElement0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      VectorElement vectorElement1 = vectorElement0.copy();
      assertEquals(0, vectorElement1.index());
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-197));
      Double double0 = new Double(0.0);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      VectorElement vectorElement1 = vectorElement0.copy();
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-1), 0.0);
      vectorElement0.contains(0.0);
      assertEquals((-1), vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      int int0 = vectorElement0.compareTo(vectorElement0);
      assertEquals(0, int0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      VectorElement vectorElement1 = VectorElement.elt((-120), (double) 0);
      int int0 = vectorElement0.compareTo(vectorElement1);
      assertEquals(1, int0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals((-120), vectorElement1.index());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      Integer integer0 = new Integer(2391);
      Double double0 = new Double(2391);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement1 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      int int0 = vectorElement0.compareTo(vectorElement1);
      assertEquals(0, vectorElement0.index());
      assertEquals((-1), int0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement((-3618), (-3618));
      VectorElement vectorElement1 = VectorElement.fromValue((-3618));
      int int0 = VectorElement.compare(vectorElement1, vectorElement0);
      assertEquals(0, vectorElement1.index());
      assertEquals((-3618.0), vectorElement1.value(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex((-1453));
      VectorElement vectorElement1 = VectorElement.fromValue((-1453));
      int int0 = VectorElement.compare(vectorElement0, vectorElement1);
      assertEquals((-1), int0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals((-1453), vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-1), 0.0);
      assertEquals((-1), vectorElement0.index());
      
      VectorElement vectorElement1 = vectorElement0.destructiveSet(1);
      VectorElement vectorElement2 = vectorElement0.add(vectorElement1);
      assertEquals(1, vectorElement2.index());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-785), (double) (-785));
      VectorElement vectorElement1 = vectorElement0.add(vectorElement0);
      assertEquals((-785), vectorElement1.index());
      assertEquals((-785.0), vectorElement0.value(), 0.01);
      assertEquals((-1570.0), vectorElement1.value(), 0.01);
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertEquals((-785), vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue(1.0);
      VectorElement vectorElement1 = vectorElement0.add((double) (-197));
      assertEquals((-196.0), vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement1.index());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(0, 0.0);
      VectorElement vectorElement1 = vectorElement0.add(0.0);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer((-832));
      Double double0 = new Double(0.0);
      AbstractMap.SimpleImmutableEntry<Integer, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleImmutableEntry0);
      VectorElement vectorElement1 = vectorElement0.add(0.0);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(3010, 3010);
      // Undeclared exception!
      try { 
        vectorElement0.strictEquals((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.fromString("|9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.engage((BiFunction<VectorElement, Integer, Integer>) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.elt((Map.Entry<Integer, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.destructiveSub((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.destructiveAdd((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.compare((VectorElement) null, (VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.add((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      vectorElement0.strictEquals(vectorElement0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      Util.roundingError = (-910.52);
      boolean boolean0 = vectorElement0.strictEquals(vectorElement0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      Integer integer0 = new Integer(2391);
      Double double0 = new Double(2391);
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement1 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      boolean boolean0 = vectorElement0.strictEquals(vectorElement1);
      assertEquals(2391, vectorElement1.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      boolean boolean0 = vectorElement0.equals(vectorElement0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.compareTo((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Double double0 = new Double(1.0);
      AbstractMap.SimpleImmutableEntry<Integer, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleImmutableEntry0);
      VectorElement vectorElement1 = VectorElement.fromValue(1.0);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      
      VectorElement vectorElement2 = vectorElement0.add(vectorElement1);
      assertEquals(1.0, vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement2.index());
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertEquals(2.0, vectorElement2.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1506, (double) 1506);
      VectorElement vectorElement1 = VectorElement.fromValue(0.0);
      boolean boolean0 = vectorElement1.equals(vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, vectorElement1.index());
      assertEquals(1506.0, vectorElement0.value(), 0.01);
      assertEquals(1506, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      Object object0 = new Object();
      boolean boolean0 = vectorElement0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1470, (double) 1470);
      VectorElement vectorElement1 = vectorElement0.add(1.0E-6);
      // Undeclared exception!
      try { 
        vectorElement1.add(vectorElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Point indices do not match! 1470|1470.000001 != 1470|1470.000000
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        VectorElement.fromString("|bh=tWh0f~_|qj/BfTv");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Wrong number of partitions: |bh=tWh0f~_|qj/BfTv
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromString("0|0.000000");
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromValue(0.0);
      int int0 = vectorElement0.index();
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Double double0 = new Double(1.0);
      AbstractMap.SimpleImmutableEntry<Integer, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Double>(integer0, double0);
      VectorElement vectorElement0 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleImmutableEntry0);
      double double1 = vectorElement0.value();
      assertEquals(1.0, double1, 0.01);
      assertEquals(0, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      // Undeclared exception!
      try { 
        vectorElement0.subtract((VectorElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt((-508), 0.0);
      int int0 = vectorElement0.index();
      assertEquals((-508), int0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      int int0 = VectorElement.compare(vectorElement0, vectorElement0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0, int0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.elt(1470, (double) 1470);
      Integer integer0 = new Integer((-2677));
      BiFunction<VectorElement, Integer, Integer> biFunction0 = (BiFunction<VectorElement, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(com.github.druidgreeneyes.rivet.core.labels.VectorElement.class) , anyInt());
      vectorElement0.engage(biFunction0, integer0);
      assertEquals(1470, vectorElement0.index());
      assertEquals(1470.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      VectorElement vectorElement1 = vectorElement0.destructiveSub(0.0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement1.index());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      vectorElement0.contains(5467);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      String string0 = vectorElement0.toString();
      assertEquals("0|0.000000", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VectorElement vectorElement0 = new VectorElement(469, (-711.4311126));
      // Undeclared exception!
      try { 
        vectorElement0.engage((Function<VectorElement, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.zero();
      VectorElement vectorElement1 = vectorElement0.destructiveMult(2622.094351);
      assertEquals(0, vectorElement1.index());
      assertEquals(0.0, vectorElement1.value(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(1470);
      VectorElement vectorElement1 = vectorElement0.multiply(0.0);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(1470, vectorElement0.index());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VectorElement vectorElement0 = VectorElement.fromIndex(0);
      VectorElement vectorElement1 = vectorElement0.destructiveAdd((double) 0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement1.index());
  }
}
