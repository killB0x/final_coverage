/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:37:45 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.extras.topicheirarchy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.NamedRIV;
import com.github.druidgreeneyes.rivet.core.labels.ArrayRIV;
import com.github.druidgreeneyes.rivet.core.labels.DenseRIV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedRIV_ESTest extends NamedRIV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-72));
      NamedRIV namedRIV0 = NamedRIV.make("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.NamedRIV", arrayRIV0);
      ArrayRIV arrayRIV1 = namedRIV0.riv();
      assertSame(arrayRIV1, arrayRIV0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3944);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      NamedRIV namedRIV0 = NamedRIV.make("(e4ZoX$C<", arrayRIV0);
      ArrayRIV arrayRIV1 = namedRIV0.riv();
      assertEquals(3944, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(3465);
      NamedRIV namedRIV0 = NamedRIV.make("ELi", arrayRIV0);
      String string0 = namedRIV0.name();
      assertEquals("ELi", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      String string0 = namedRIV0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-498.045485);
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      NamedRIV namedRIV0 = NamedRIV.make("}9", arrayRIV0);
      assertEquals(498.045485, namedRIV0.magnitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        NamedRIV.make("", (ArrayRIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.NamedRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      NamedRIV namedRIV0 = NamedRIV.make((String) null, arrayRIV0);
      ArrayRIV arrayRIV1 = namedRIV0.riv();
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-397));
      NamedRIV namedRIV0 = NamedRIV.make("Cannot make destructive modifications to ImmutableRIV.", arrayRIV0);
      double double0 = namedRIV0.magnitude();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      NamedRIV namedRIV0 = NamedRIV.make((String) null, arrayRIV0);
      String string0 = namedRIV0.name();
      assertNull(string0);
  }
}
