/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:27:00 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.labels.AbstractRIV;
import com.github.druidgreeneyes.rivet.core.labels.ArrayRIV;
import com.github.druidgreeneyes.rivet.core.labels.DenseRIV;
import com.github.druidgreeneyes.rivet.core.labels.RIV;
import com.github.druidgreeneyes.rivet.core.labels.RIVConstructor;
import com.github.druidgreeneyes.rivet.core.labels.VectorElement;
import com.github.druidgreeneyes.rivet.core.util.IntDoubleConsumer;
import com.github.druidgreeneyes.rivet.core.vectorpermutations.Permutations;
import java.nio.CharBuffer;
import java.util.AbstractMap;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DenseRIV_ESTest extends DenseRIV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(2);
      assertNotNull(denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 815.545223458;
      doubleArray0[1] = 497.400243248;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      DenseRIV denseRIV1 = new DenseRIV(intArray0, doubleArray0, 2);
      assertEquals(1, intArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {815.545223458, 497.400243248, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.size());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveMult(815.545223458);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      
      DenseRIV denseRIV3 = new DenseRIV(0);
      assertNotNull(denseRIV3);
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      DenseRIV denseRIV4 = denseRIV3.destructiveRemoveZeros();
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertSame(denseRIV4, denseRIV3);
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV4.count());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(0, denseRIV4.size());
      
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV4;
      rIVArray0[1] = (RIV) denseRIV3;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV2;
      DenseRIV denseRIV5 = denseRIV4.destructiveAdd((RIV[]) null);
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertSame(denseRIV5, denseRIV4);
      assertSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertSame(denseRIV3, denseRIV5);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertSame(denseRIV4, denseRIV3);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(0, denseRIV5.count());
      assertEquals(0, denseRIV5.size());
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV4.count());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(0, denseRIV4.size());
      
      rIVArray0[4] = (RIV) denseRIV5;
      rIVArray0[5] = (RIV) denseRIV3;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV2;
      // Undeclared exception!
      try { 
        denseRIV1.destructiveSub(rIVArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 3308;
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.removeZeros();
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(3308);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.size());
      
      // Undeclared exception!
      denseRIV2.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = (DenseRIV)denseRIV0.multiply(1.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      
      RIV[] rIVArray0 = new RIV[12];
      rIVArray0[0] = (RIV) denseRIV1;
      DenseRIV denseRIV2 = denseRIV1.destructiveMult(0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      assertEquals(1, denseRIV2.size());
      assertEquals(1, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      rIVArray0[1] = (RIV) denseRIV2;
      rIVArray0[2] = (RIV) denseRIV1;
      rIVArray0[3] = (RIV) denseRIV1;
      rIVArray0[4] = (RIV) denseRIV1;
      rIVArray0[5] = (RIV) denseRIV0;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV0;
      rIVArray0[8] = (RIV) denseRIV0;
      // Undeclared exception!
      try { 
        denseRIV0.destructiveAdd(rIVArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-562.8035062170983);
      doubleArray0[2] = (-2192.3);
      doubleArray0[3] = 815.7832850959738;
      DenseRIV denseRIV1 = new DenseRIV(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-562.8035062170983), (-2192.3), 815.7832850959738}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(0.0);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.count());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveSub((RIV) abstractRIV0);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      
      VectorElement[] vectorElementArray0 = denseRIV2.points();
      assertEquals(0, vectorElementArray0.length);
      assertNotNull(vectorElementArray0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
      
      DenseRIV denseRIV3 = new DenseRIV(0);
      assertNotNull(denseRIV3);
      assertEquals(0, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.count());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.size());
      
      DenseRIV denseRIV3 = (DenseRIV)denseRIV0.multiply(3308);
      assertNotNull(denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3308, denseRIV3.count());
      
      String string0 = denseRIV2.toString();
      assertNotNull(string0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.size());
      
      DenseRIV denseRIV4 = new DenseRIV(3308);
      assertNotNull(denseRIV4);
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      
      RIV[] rIVArray0 = new RIV[1];
      rIVArray0[0] = (RIV) denseRIV1;
      DenseRIV denseRIV5 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(1, rIVArray0.length);
      assertNotNull(denseRIV5);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      
      DenseRIV denseRIV6 = denseRIV5.copy();
      assertEquals(1, rIVArray0.length);
      assertNotNull(denseRIV6);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV6);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      assertEquals(3308, denseRIV6.count());
      assertEquals(3308, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV4);
      assertNotNull(arrayRIV0);
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      
      double double0 = denseRIV6.dot(arrayRIV0);
      assertEquals(1, rIVArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV6);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      assertEquals(3308, denseRIV6.count());
      assertEquals(3308, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      
      DenseRIV denseRIV7 = denseRIV2.copy();
      assertNotNull(denseRIV7);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV7);
      assertNotSame(denseRIV7, denseRIV5);
      assertNotSame(denseRIV7, denseRIV1);
      assertNotSame(denseRIV7, denseRIV3);
      assertNotSame(denseRIV7, denseRIV4);
      assertNotSame(denseRIV7, denseRIV2);
      assertNotSame(denseRIV7, denseRIV0);
      assertNotSame(denseRIV7, denseRIV6);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV7.saturation(), 0.01);
      assertEquals(3308, denseRIV7.size());
      assertEquals(3308, denseRIV7.count());
      
      DenseRIV denseRIV8 = (DenseRIV)denseRIV1.add((RIV) arrayRIV0);
      assertNotNull(denseRIV8);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV8, denseRIV0);
      assertNotSame(denseRIV8, denseRIV1);
      assertNotSame(denseRIV8, denseRIV5);
      assertNotSame(denseRIV8, denseRIV6);
      assertNotSame(denseRIV8, denseRIV4);
      assertNotSame(denseRIV8, denseRIV2);
      assertNotSame(denseRIV8, denseRIV7);
      assertNotSame(denseRIV8, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      assertEquals(3308, denseRIV8.count());
      assertEquals(3308, denseRIV8.size());
      assertEquals(1.0, denseRIV8.saturation(), 0.01);
      
      DenseRIV denseRIV9 = denseRIV3.destructiveAdd((RIV) denseRIV8);
      assertNotNull(denseRIV9);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV9);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV6);
      assertNotSame(denseRIV3, denseRIV7);
      assertSame(denseRIV3, denseRIV9);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV9);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV8, denseRIV0);
      assertNotSame(denseRIV8, denseRIV1);
      assertNotSame(denseRIV8, denseRIV5);
      assertNotSame(denseRIV8, denseRIV6);
      assertNotSame(denseRIV8, denseRIV4);
      assertNotSame(denseRIV8, denseRIV2);
      assertNotSame(denseRIV8, denseRIV7);
      assertNotSame(denseRIV8, denseRIV3);
      assertNotSame(denseRIV8, denseRIV9);
      assertNotSame(denseRIV9, denseRIV7);
      assertNotSame(denseRIV9, denseRIV0);
      assertNotSame(denseRIV9, denseRIV8);
      assertNotSame(denseRIV9, denseRIV1);
      assertNotSame(denseRIV9, denseRIV6);
      assertNotSame(denseRIV9, denseRIV5);
      assertNotSame(denseRIV9, denseRIV2);
      assertSame(denseRIV9, denseRIV3);
      assertNotSame(denseRIV9, denseRIV4);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3308, denseRIV3.count());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      assertEquals(3308, denseRIV8.count());
      assertEquals(3308, denseRIV8.size());
      assertEquals(1.0, denseRIV8.saturation(), 0.01);
      assertEquals(3308, denseRIV9.size());
      assertEquals(1.0, denseRIV9.saturation(), 0.01);
      assertEquals(3308, denseRIV9.count());
      
      double double1 = denseRIV9.magnitude();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV9);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV6);
      assertNotSame(denseRIV3, denseRIV7);
      assertSame(denseRIV3, denseRIV9);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV9);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV8, denseRIV0);
      assertNotSame(denseRIV8, denseRIV1);
      assertNotSame(denseRIV8, denseRIV5);
      assertNotSame(denseRIV8, denseRIV6);
      assertNotSame(denseRIV8, denseRIV4);
      assertNotSame(denseRIV8, denseRIV2);
      assertNotSame(denseRIV8, denseRIV7);
      assertNotSame(denseRIV8, denseRIV3);
      assertNotSame(denseRIV8, denseRIV9);
      assertNotSame(denseRIV9, denseRIV7);
      assertNotSame(denseRIV9, denseRIV0);
      assertNotSame(denseRIV9, denseRIV8);
      assertNotSame(denseRIV9, denseRIV1);
      assertNotSame(denseRIV9, denseRIV6);
      assertNotSame(denseRIV9, denseRIV5);
      assertNotSame(denseRIV9, denseRIV2);
      assertSame(denseRIV9, denseRIV3);
      assertNotSame(denseRIV9, denseRIV4);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3308, denseRIV3.count());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      assertEquals(3308, denseRIV8.count());
      assertEquals(3308, denseRIV8.size());
      assertEquals(1.0, denseRIV8.saturation(), 0.01);
      assertEquals(3308, denseRIV9.size());
      assertEquals(1.0, denseRIV9.saturation(), 0.01);
      assertEquals(3308, denseRIV9.count());
      
      DenseRIV denseRIV10 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV10);
      assertEquals(3308, denseRIV10.size());
      assertEquals(3308, denseRIV10.count());
      assertEquals(1.0, denseRIV10.saturation(), 0.01);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      
      boolean boolean0 = denseRIV3.equals((RIV) denseRIV6);
      assertEquals(1, rIVArray0.length);
      assertTrue(boolean0);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV10);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV6);
      assertNotSame(denseRIV3, denseRIV10);
      assertNotSame(denseRIV3, denseRIV7);
      assertSame(denseRIV3, denseRIV9);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV8);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV10);
      assertNotSame(denseRIV5, denseRIV9);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV6);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV8);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV9);
      assertNotSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV10);
      assertNotSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV6, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3308, denseRIV3.count());
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      assertEquals(3308, denseRIV6.count());
      assertEquals(3308, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      ArrayRIV arrayRIV1 = (ArrayRIV)arrayRIV0.normalize();
      assertNotNull(arrayRIV1);
      assertNotSame(arrayRIV1, arrayRIV0);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV9);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV10);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(arrayRIV0, arrayRIV1);
      assertEquals(3308, arrayRIV1.count());
      assertEquals(3308, arrayRIV1.size());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      
      DenseRIV denseRIV11 = denseRIV0.destructiveAdd(rIVArray0);
      assertEquals(1, rIVArray0.length);
      assertNotNull(denseRIV11);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertSame(denseRIV0, denseRIV11);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV10);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV11, denseRIV2);
      assertNotSame(denseRIV11, denseRIV9);
      assertNotSame(denseRIV11, denseRIV7);
      assertNotSame(denseRIV11, denseRIV10);
      assertNotSame(denseRIV11, denseRIV1);
      assertNotSame(denseRIV11, denseRIV6);
      assertNotSame(denseRIV11, denseRIV3);
      assertNotSame(denseRIV11, denseRIV8);
      assertNotSame(denseRIV11, denseRIV4);
      assertSame(denseRIV11, denseRIV0);
      assertSame(denseRIV11, denseRIV5);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV11.size());
      assertEquals(1.0, denseRIV11.saturation(), 0.01);
      assertEquals(3308, denseRIV11.count());
      
      boolean boolean1 = denseRIV9.equals(denseRIV2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertSame(denseRIV0, denseRIV11);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV10);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV10);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV9);
      assertNotSame(denseRIV1, denseRIV11);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV8);
      assertNotSame(denseRIV2, denseRIV11);
      assertNotSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV10);
      assertNotSame(denseRIV2, denseRIV7);
      assertNotSame(denseRIV2, denseRIV9);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV6);
      assertNotSame(denseRIV3, denseRIV10);
      assertNotSame(denseRIV3, denseRIV7);
      assertNotSame(denseRIV3, denseRIV11);
      assertSame(denseRIV3, denseRIV9);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV9);
      assertNotSame(denseRIV4, denseRIV11);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV10);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(arrayRIV0, arrayRIV1);
      assertNotSame(denseRIV8, denseRIV0);
      assertNotSame(denseRIV8, denseRIV1);
      assertNotSame(denseRIV8, denseRIV5);
      assertNotSame(denseRIV8, denseRIV10);
      assertNotSame(denseRIV8, denseRIV6);
      assertNotSame(denseRIV8, denseRIV4);
      assertNotSame(denseRIV8, denseRIV2);
      assertNotSame(denseRIV8, denseRIV7);
      assertNotSame(denseRIV8, denseRIV3);
      assertNotSame(denseRIV8, denseRIV9);
      assertNotSame(denseRIV8, denseRIV11);
      assertNotSame(denseRIV9, denseRIV7);
      assertNotSame(denseRIV9, denseRIV0);
      assertNotSame(denseRIV9, denseRIV10);
      assertNotSame(denseRIV9, denseRIV11);
      assertNotSame(denseRIV9, denseRIV8);
      assertNotSame(denseRIV9, denseRIV1);
      assertNotSame(denseRIV9, denseRIV6);
      assertNotSame(denseRIV9, denseRIV5);
      assertNotSame(denseRIV9, denseRIV2);
      assertSame(denseRIV9, denseRIV3);
      assertNotSame(denseRIV9, denseRIV4);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.size());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3308, denseRIV3.count());
      assertEquals(3308, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, arrayRIV0.count());
      assertEquals(3308, arrayRIV0.size());
      assertEquals(3308, denseRIV8.count());
      assertEquals(3308, denseRIV8.size());
      assertEquals(1.0, denseRIV8.saturation(), 0.01);
      assertEquals(3308, denseRIV9.size());
      assertEquals(1.0, denseRIV9.saturation(), 0.01);
      assertEquals(3308, denseRIV9.count());
      
      int[] intArray0 = denseRIV6.keyArr();
      assertEquals(3308, intArray0.length);
      assertEquals(1, rIVArray0.length);
      assertNotNull(intArray0);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertSame(denseRIV0, denseRIV11);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV10);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertSame(denseRIV5, denseRIV11);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV10);
      assertNotSame(denseRIV5, denseRIV9);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV6);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV8);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV9);
      assertNotSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV10);
      assertNotSame(denseRIV6, denseRIV11);
      assertNotSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV6, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      assertEquals(3308, denseRIV6.count());
      assertEquals(3308, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      DenseRIV denseRIV12 = denseRIV6.destructiveSub(rIVArray0);
      assertEquals(1, rIVArray0.length);
      assertNotNull(denseRIV12);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV12);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV8);
      assertSame(denseRIV0, denseRIV11);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV10);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV9);
      assertNotSame(denseRIV12, denseRIV3);
      assertNotSame(denseRIV12, denseRIV1);
      assertNotSame(denseRIV12, denseRIV4);
      assertNotSame(denseRIV12, denseRIV0);
      assertNotSame(denseRIV12, denseRIV8);
      assertNotSame(denseRIV12, denseRIV5);
      assertSame(denseRIV12, denseRIV6);
      assertNotSame(denseRIV12, denseRIV2);
      assertNotSame(denseRIV12, denseRIV10);
      assertNotSame(denseRIV12, denseRIV9);
      assertNotSame(denseRIV12, denseRIV11);
      assertNotSame(denseRIV12, denseRIV7);
      assertSame(denseRIV5, denseRIV11);
      assertNotSame(denseRIV5, denseRIV10);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV9);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV12);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV8);
      assertSame(denseRIV6, denseRIV12);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV10);
      assertNotSame(denseRIV6, denseRIV9);
      assertNotSame(denseRIV6, denseRIV11);
      assertNotSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV6, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV12.count());
      assertEquals(3308, denseRIV12.size());
      assertEquals(1.0, denseRIV12.saturation(), 0.01);
      assertEquals(3308, denseRIV5.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(3308, denseRIV5.count());
      assertEquals(3308, denseRIV6.count());
      assertEquals(3308, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      // Undeclared exception!
      try { 
        DenseRIV.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(2);
      assertNotNull(denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV0;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV0;
      DenseRIV denseRIV1 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveDiv(3655.407485596);
      assertEquals(8, rIVArray0.length);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV1, denseRIV0);
      assertSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      
      boolean boolean0 = denseRIV0.contains(2);
      assertFalse(boolean0);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      VectorElement vectorElement0 = VectorElement.elt(0, (double) 0);
      assertNotNull(vectorElement0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>(integer0, double0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      VectorElement vectorElement1 = VectorElement.elt((Map.Entry<Integer, Double>) abstractMap_SimpleEntry0);
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertNotNull(vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertEquals(2, vectorElement1.index());
      assertEquals(0.0, vectorElement1.value(), 0.01);
      
      VectorElement vectorElement2 = VectorElement.fromIndex(0);
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertTrue(vectorElement2.equals((Object)vectorElement0));
      assertNotNull(vectorElement2);
      assertNotSame(vectorElement2, vectorElement0);
      assertNotSame(vectorElement2, vectorElement1);
      assertEquals(0.0, vectorElement2.value(), 0.01);
      assertEquals(0, vectorElement2.index());
      
      VectorElement vectorElement3 = VectorElement.zero();
      assertTrue(vectorElement3.equals((Object)vectorElement0));
      assertFalse(vectorElement3.equals((Object)vectorElement1));
      assertTrue(vectorElement3.equals((Object)vectorElement2));
      assertNotNull(vectorElement3);
      assertNotSame(vectorElement3, vectorElement2);
      assertNotSame(vectorElement3, vectorElement0);
      assertNotSame(vectorElement3, vectorElement1);
      assertEquals(0.0, vectorElement3.value(), 0.01);
      assertEquals(0, vectorElement3.index());
      
      VectorElement vectorElement4 = vectorElement0.destructiveSub(vectorElement2);
      assertTrue(vectorElement2.equals((Object)vectorElement3));
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertTrue(vectorElement2.equals((Object)vectorElement0));
      assertTrue(vectorElement4.equals((Object)vectorElement2));
      assertTrue(vectorElement4.equals((Object)vectorElement3));
      assertFalse(vectorElement4.equals((Object)vectorElement1));
      assertFalse(vectorElement0.equals((Object)vectorElement1));
      assertTrue(vectorElement0.equals((Object)vectorElement2));
      assertTrue(vectorElement0.equals((Object)vectorElement3));
      assertNotNull(vectorElement4);
      assertNotSame(vectorElement2, vectorElement0);
      assertNotSame(vectorElement2, vectorElement4);
      assertNotSame(vectorElement2, vectorElement3);
      assertNotSame(vectorElement2, vectorElement1);
      assertNotSame(vectorElement4, vectorElement1);
      assertNotSame(vectorElement4, vectorElement2);
      assertNotSame(vectorElement4, vectorElement3);
      assertSame(vectorElement4, vectorElement0);
      assertSame(vectorElement0, vectorElement4);
      assertNotSame(vectorElement0, vectorElement1);
      assertNotSame(vectorElement0, vectorElement3);
      assertNotSame(vectorElement0, vectorElement2);
      assertEquals(0.0, vectorElement2.value(), 0.01);
      assertEquals(0, vectorElement2.index());
      assertEquals(0, vectorElement4.index());
      assertEquals(0.0, vectorElement4.value(), 0.01);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.subtract(rIVArray0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(2, abstractRIV0.count());
      assertEquals(2, abstractRIV0.size());
      
      // Undeclared exception!
      try { 
        DenseRIV.generate(0, (-2771), (CharSequence) null, 0, (-648));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.RIVs", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 497.400243248;
      doubleArray0[4] = (-1.0);
      doubleArray0[6] = 815.545223458;
      doubleArray0[7] = (double) 0;
      DenseRIV denseRIV1 = new DenseRIV(intArray0, doubleArray0, 6);
      assertEquals(2, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 497.400243248, (-1.0), 0.0, 815.545223458, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(6, denseRIV1.size());
      assertEquals(6, denseRIV1.count());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveMult(0.0);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      
      DenseRIV denseRIV3 = denseRIV0.destructiveRemoveZeros();
      assertNotNull(denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV2);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      DenseRIV denseRIV4 = denseRIV2.removeZeros();
      assertNotNull(denseRIV4);
      assertSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV4);
      assertSame(denseRIV2, denseRIV3);
      assertSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV1);
      assertSame(denseRIV4, denseRIV2);
      assertSame(denseRIV4, denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(0, denseRIV4.size());
      assertEquals(0, denseRIV4.count());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[5];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      DenseRIV denseRIV1 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(5, rIVArray0.length);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV1.size());
      assertEquals(0, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      DenseRIV denseRIV2 = denseRIV0.destructiveDiv(0);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      DenseRIV denseRIV3 = denseRIV2.destructiveDiv(1320.5);
      assertNotNull(denseRIV3);
      assertSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV3, denseRIV2);
      assertSame(denseRIV3, denseRIV0);
      assertSame(denseRIV3, denseRIV1);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.count());
      
      boolean boolean0 = denseRIV0.contains(0);
      assertFalse(boolean0);
      assertSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      VectorElement vectorElement0 = VectorElement.elt(0, 0.0);
      assertNotNull(vectorElement0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      
      VectorElement vectorElement1 = VectorElement.fromIndex(0);
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertNotNull(vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement1.index());
      
      VectorElement vectorElement2 = VectorElement.zero();
      assertTrue(vectorElement2.equals((Object)vectorElement0));
      assertTrue(vectorElement2.equals((Object)vectorElement1));
      assertNotNull(vectorElement2);
      assertNotSame(vectorElement2, vectorElement0);
      assertNotSame(vectorElement2, vectorElement1);
      assertEquals(0, vectorElement2.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      
      VectorElement vectorElement3 = vectorElement1.destructiveSub(vectorElement0);
      assertTrue(vectorElement0.equals((Object)vectorElement2));
      assertTrue(vectorElement0.equals((Object)vectorElement1));
      assertTrue(vectorElement1.equals((Object)vectorElement0));
      assertTrue(vectorElement1.equals((Object)vectorElement2));
      assertTrue(vectorElement3.equals((Object)vectorElement0));
      assertTrue(vectorElement3.equals((Object)vectorElement2));
      assertNotNull(vectorElement3);
      assertNotSame(vectorElement0, vectorElement1);
      assertNotSame(vectorElement0, vectorElement2);
      assertNotSame(vectorElement0, vectorElement3);
      assertNotSame(vectorElement1, vectorElement2);
      assertSame(vectorElement1, vectorElement3);
      assertNotSame(vectorElement1, vectorElement0);
      assertNotSame(vectorElement3, vectorElement2);
      assertSame(vectorElement3, vectorElement1);
      assertNotSame(vectorElement3, vectorElement0);
      assertEquals(0, vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(0, vectorElement1.index());
      assertEquals(0, vectorElement3.index());
      assertEquals(0.0, vectorElement3.value(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV3.subtract(rIVArray0);
      assertEquals(5, rIVArray0.length);
      assertNotNull(abstractRIV0);
      assertSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV3, denseRIV2);
      assertSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, abstractRIV0);
      assertSame(denseRIV3, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV3);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(0, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.count());
      assertEquals(0, abstractRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.size());
      
      VectorElement[] vectorElementArray0 = new VectorElement[3];
      vectorElementArray0[0] = vectorElement2;
      vectorElementArray0[1] = vectorElement2;
      vectorElementArray0[2] = vectorElement2;
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(vectorElementArray0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(1.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1, abstractRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.destructiveSub((RIV) abstractRIV0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(denseRIV1, abstractRIV0);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1, abstractRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      
      VectorElement[] vectorElementArray0 = denseRIV0.points();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, vectorElementArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(vectorElementArray0);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
      
      DenseRIV denseRIV2 = denseRIV0.destructiveDiv(0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, abstractRIV0);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      assertEquals(1, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      int int0 = 12;
      boolean boolean0 = ((DenseRIV) abstractRIV0).contains(12);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1, abstractRIV0.size());
      
      int int1 = 5541;
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      assertNotNull(charBuffer0);
      assertEquals(12, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(12, charBuffer0.limit());
      assertEquals(12, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(12, charBuffer0.capacity());
      
      int int2 = 2;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 2, Integer.MIN_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 776;
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV((VectorElement[]) null, 776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3308;
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(3308);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.count());
      assertEquals(3308, abstractRIV0.size());
      
      String string0 = denseRIV2.toString();
      assertNotNull(string0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      
      DenseRIV denseRIV3 = new DenseRIV(3308);
      assertNotNull(denseRIV3);
      assertEquals(3308, denseRIV3.count());
      assertEquals(3308, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV1;
      rIVArray0[1] = (RIV) denseRIV3;
      rIVArray0[2] = (RIV) denseRIV2;
      DenseRIV denseRIV4 = DenseRIV.fromString(string0);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, denseRIV4.size());
      
      // Undeclared exception!
      try { 
        denseRIV4.subtract(rIVArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(3308);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.count());
      assertEquals(3308, abstractRIV0.size());
      
      String string0 = denseRIV2.toString();
      assertNotNull(string0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      DenseRIV denseRIV3 = new DenseRIV(3308);
      assertNotNull(denseRIV3);
      assertEquals(3308, denseRIV3.size());
      assertEquals(3308, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[3];
      rIVArray0[0] = (RIV) denseRIV1;
      rIVArray0[1] = (RIV) denseRIV3;
      rIVArray0[2] = (RIV) denseRIV2;
      DenseRIV denseRIV4 = DenseRIV.fromString(string0);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(3308, denseRIV4.count());
      assertEquals(3308, denseRIV4.size());
      
      AbstractRIV abstractRIV1 = abstractRIV0.normalize();
      assertNotNull(abstractRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, abstractRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, abstractRIV1);
      assertNotSame(abstractRIV0, denseRIV3);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV4);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV1, denseRIV2);
      assertNotSame(abstractRIV1, denseRIV3);
      assertNotSame(abstractRIV1, denseRIV0);
      assertNotSame(abstractRIV1, abstractRIV0);
      assertNotSame(abstractRIV1, denseRIV4);
      assertNotSame(abstractRIV1, denseRIV1);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.count());
      assertEquals(3308, abstractRIV0.size());
      assertEquals(3308, abstractRIV1.size());
      assertEquals(1.0, abstractRIV1.saturation(), 0.01);
      assertEquals(3308, abstractRIV1.count());
      
      VectorElement[] vectorElementArray0 = new VectorElement[2];
      // Undeclared exception!
      try { 
        VectorElement.fromString("@QnbDl");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Wrong number of partitions: @QnbDl
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.VectorElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(3308);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.count());
      
      String string0 = denseRIV2.toString();
      assertNotNull(string0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(3308, denseRIV2.size());
      assertEquals(3308, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      DenseRIV denseRIV3 = new DenseRIV(3308);
      assertNotNull(denseRIV3);
      assertEquals(3308, denseRIV3.size());
      assertEquals(3308, denseRIV3.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV2;
      rIVArray0[1] = (RIV) denseRIV3;
      rIVArray0[2] = (RIV) denseRIV2;
      rIVArray0[3] = (RIV) denseRIV2;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV3;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV2;
      AbstractRIV abstractRIV1 = new DenseRIV(rIVArray0[6]);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 769;
      DenseRIV denseRIV0 = DenseRIV.empty(769);
      assertNotNull(denseRIV0);
      assertEquals(769, denseRIV0.size());
      assertEquals(769, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      // Undeclared exception!
      try { 
        denseRIV0.equals((RIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.AbstractRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.destructiveDiv(1.0E-6);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      IntDoubleConsumer intDoubleConsumer0 = mock(IntDoubleConsumer.class, new ViolatedAssumptionAnswer());
      denseRIV0.forEachNZ(intDoubleConsumer0);
      assertSame(denseRIV0, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-355.382769328311);
      doubleArray0[1] = (-4249.8);
      doubleArray0[2] = (-2512.2726670325);
      doubleArray0[3] = 231.987617078228;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(arrayRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(4, arrayRIV0.count());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveDiv(1.0E-6);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(4, denseRIV2.size());
      assertEquals(4, denseRIV2.count());
      
      DenseRIV denseRIV3 = denseRIV0.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV3);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.count());
      assertEquals(4, denseRIV3.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(0, denseRIV1.size());
      
      DenseRIV denseRIV2 = DenseRIV.empty(2);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      DenseRIV denseRIV3 = denseRIV0.destructiveDiv(0.0);
      assertNotNull(denseRIV3);
      assertSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.count());
      assertEquals(0, denseRIV3.size());
      
      DenseRIV denseRIV4 = DenseRIV.empty(44);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV3);
      assertEquals(44, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(44, denseRIV4.count());
      
      DenseRIV denseRIV5 = denseRIV4.copy();
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertEquals(44, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(44, denseRIV4.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(44, denseRIV5.count());
      assertEquals(44, denseRIV5.size());
      
      DenseRIV denseRIV6 = denseRIV0.destructiveMult(0.0);
      assertNotNull(denseRIV6);
      assertSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV5);
      assertSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV2);
      assertSame(denseRIV6, denseRIV0);
      assertSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertNotSame(denseRIV6, denseRIV1);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV6.count());
      assertEquals(0, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      
      // Undeclared exception!
      try { 
        denseRIV0.permute((Permutations) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      int int0 = 3271;
      // Undeclared exception!
      try { 
        denseRIV0.permute((Permutations) null, 3271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-355.382769328311);
      doubleArray0[1] = (-4249.8);
      doubleArray0[2] = (-2512.2726670325);
      doubleArray0[3] = 231.987617078228;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(arrayRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      
      double double0 = denseRIV0.dot(arrayRIV0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertEquals(2.455242916073169E7, double0, 0.01);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      
      DenseRIV denseRIV2 = denseRIV1.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(4, denseRIV2.size());
      assertEquals(4, denseRIV2.count());
      
      AbstractRIV abstractRIV0 = denseRIV2.add((RIV) denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(4, denseRIV2.size());
      assertEquals(4, denseRIV2.count());
      assertEquals(4, abstractRIV0.count());
      assertEquals(4, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      
      double double1 = denseRIV1.magnitude();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertEquals(4955.040782953425, double1, 0.01);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      
      DenseRIV denseRIV3 = new DenseRIV(arrayRIV0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV3);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      boolean boolean0 = denseRIV3.equals((RIV) denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      RIV rIV0 = arrayRIV0.normalize();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(rIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(rIV0, arrayRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(4, rIV0.size());
      assertEquals(4, rIV0.count());
      
      RIV[] rIVArray0 = new RIV[6];
      rIVArray0[0] = (RIV) abstractRIV0;
      rIVArray0[1] = (RIV) denseRIV1;
      rIVArray0[2] = (RIV) denseRIV2;
      rIVArray0[3] = (RIV) abstractRIV0;
      rIVArray0[4] = (RIV) denseRIV3;
      rIVArray0[5] = (RIV) denseRIV3;
      DenseRIV denseRIV4 = denseRIV3.destructiveAdd(rIVArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, rIVArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV1);
      assertSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertSame(denseRIV3, denseRIV4);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV4.count());
      assertEquals(4, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      boolean boolean1 = denseRIV3.equals(denseRIV0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertSame(denseRIV3, denseRIV4);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      int[] intArray0 = denseRIV3.keyArr();
      assertEquals(4, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1, 2, 3}, intArray0);
      assertNotNull(intArray0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertSame(denseRIV3, denseRIV4);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      DenseRIV denseRIV5 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, rIVArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, abstractRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV4);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(4, denseRIV5.size());
      assertEquals(4, denseRIV5.count());
      
      int int0 = (-2344);
      // Undeclared exception!
      try { 
        denseRIV4.put((-2344), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 497.400243248;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 815.545223458;
      doubleArray0[7] = (double) 0;
      DenseRIV denseRIV1 = new DenseRIV(intArray0, doubleArray0, 6);
      assertEquals(2, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 497.400243248, (-1.0), 0.0, 815.545223458, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(6, denseRIV1.count());
      assertEquals(6, denseRIV1.size());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveMult(0.0);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      DenseRIV denseRIV3 = denseRIV0.destructiveRemoveZeros();
      assertNotNull(denseRIV3);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV2);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      
      double[] doubleArray1 = denseRIV2.valArr();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(0, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.size());
      assertEquals(0, denseRIV2.count());
      assertEquals(0, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.destructiveDiv(1.0E-6);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      
      DenseRIV denseRIV2 = denseRIV1.copy();
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV2);
      assertSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      assertEquals(1, denseRIV2.count());
      
      // Undeclared exception!
      try { 
        DenseRIV.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DenseRIV denseRIV1 = new DenseRIV(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertEquals(3, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3, denseRIV1.size());
      
      DenseRIV denseRIV2 = DenseRIV.empty(1);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      assertEquals(1, denseRIV2.count());
      
      int[] intArray0 = new int[0];
      DenseRIV denseRIV3 = new DenseRIV(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(denseRIV3);
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(0, denseRIV3.size());
      assertEquals(0, denseRIV3.count());
      
      // Undeclared exception!
      try { 
        denseRIV3.destructiveAdd((RIV) denseRIV2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-931.1442075749);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 568.8588;
      doubleArray0[5] = 3254.973613851391;
      doubleArray0[6] = (-1173.42426692);
      int int0 = 1;
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      
      RIV rIV0 = denseRIV0.normalize();
      assertNotNull(rIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, rIV0);
      assertNotSame(rIV0, denseRIV1);
      assertNotSame(rIV0, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, rIV0.size());
      assertEquals(1, rIV0.count());
      assertEquals(1.0, rIV0.saturation(), 0.01);
      
      RIV rIV1 = denseRIV1.add(rIV0);
      assertNotNull(rIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, rIV1);
      assertNotSame(denseRIV0, rIV0);
      assertNotSame(denseRIV1, rIV0);
      assertNotSame(denseRIV1, rIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(rIV0, rIV1);
      assertNotSame(rIV0, denseRIV1);
      assertNotSame(rIV0, denseRIV0);
      assertNotSame(rIV1, rIV0);
      assertNotSame(rIV1, denseRIV1);
      assertNotSame(rIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1, rIV0.size());
      assertEquals(1, rIV0.count());
      assertEquals(1.0, rIV0.saturation(), 0.01);
      assertEquals(1, rIV1.size());
      assertEquals(1, rIV1.count());
      assertEquals(1.0, rIV1.saturation(), 0.01);
      
      RIV rIV2 = denseRIV0.multiply((-1.0));
      assertNotNull(rIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, rIV1);
      assertNotSame(denseRIV0, rIV0);
      assertNotSame(denseRIV0, rIV2);
      assertNotSame(rIV2, denseRIV1);
      assertNotSame(rIV2, rIV0);
      assertNotSame(rIV2, rIV1);
      assertNotSame(rIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, rIV2.saturation(), 0.01);
      assertEquals(1, rIV2.size());
      assertEquals(1, rIV2.count());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveAdd(rIV1);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, rIV1);
      assertNotSame(denseRIV0, rIV0);
      assertNotSame(denseRIV0, rIV2);
      assertNotSame(denseRIV1, rIV0);
      assertNotSame(denseRIV1, rIV1);
      assertNotSame(denseRIV1, rIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(rIV0, rIV1);
      assertNotSame(rIV0, denseRIV1);
      assertNotSame(rIV0, denseRIV2);
      assertNotSame(rIV0, denseRIV0);
      assertNotSame(rIV0, rIV2);
      assertNotSame(rIV1, rIV0);
      assertNotSame(rIV1, denseRIV1);
      assertNotSame(rIV1, denseRIV2);
      assertNotSame(rIV1, denseRIV0);
      assertNotSame(rIV1, rIV2);
      assertNotSame(denseRIV2, rIV1);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, rIV0);
      assertNotSame(denseRIV2, rIV2);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1, rIV0.size());
      assertEquals(1, rIV0.count());
      assertEquals(1.0, rIV0.saturation(), 0.01);
      assertEquals(1, rIV1.size());
      assertEquals(1, rIV1.count());
      assertEquals(1.0, rIV1.saturation(), 0.01);
      assertEquals(1, denseRIV2.count());
      assertEquals(1, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      // Undeclared exception!
      try { 
        denseRIV0.get((-746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(1);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(0.0);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveDiv(1);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      DenseRIV denseRIV3 = new DenseRIV(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV3);
      assertEquals(3, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3, denseRIV3.count());
      
      DenseRIV denseRIV4 = denseRIV1.copy();
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV2);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1, denseRIV4.size());
      assertEquals(1, denseRIV4.count());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(abstractRIV0);
      assertNotNull(arrayRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1, arrayRIV0.count());
      assertEquals(1, arrayRIV0.size());
      
      double double0 = denseRIV1.dot(denseRIV4);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV2);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1, denseRIV4.size());
      assertEquals(1, denseRIV4.count());
      
      DenseRIV denseRIV5 = denseRIV1.copy();
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV5, abstractRIV0);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV5.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(1, denseRIV5.size());
      
      AbstractRIV abstractRIV1 = denseRIV3.add((RIV) denseRIV5);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(abstractRIV1);
      assertNotSame(denseRIV0, abstractRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV1);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, abstractRIV1);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV5, abstractRIV0);
      assertNotSame(denseRIV5, abstractRIV1);
      assertNotSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(abstractRIV1, denseRIV5);
      assertNotSame(abstractRIV1, denseRIV0);
      assertNotSame(abstractRIV1, abstractRIV0);
      assertNotSame(abstractRIV1, denseRIV4);
      assertNotSame(abstractRIV1, denseRIV2);
      assertNotSame(abstractRIV1, denseRIV1);
      assertNotSame(abstractRIV1, denseRIV3);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(3, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3, denseRIV3.count());
      assertEquals(1, denseRIV5.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(1, denseRIV5.size());
      assertEquals(3, abstractRIV1.count());
      assertEquals(3, abstractRIV1.size());
      assertEquals(1.0, abstractRIV1.saturation(), 0.01);
      
      double double1 = denseRIV3.magnitude();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1.4142135623730951, double1, 0.01);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, abstractRIV1);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV2);
      assertEquals(3, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3, denseRIV3.count());
      
      DenseRIV denseRIV6 = new DenseRIV(denseRIV5);
      assertNotNull(denseRIV6);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV5.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(1, denseRIV5.size());
      assertEquals(1, denseRIV6.count());
      assertEquals(1, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      boolean boolean0 = denseRIV3.equals((RIV) abstractRIV0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(denseRIV0, abstractRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(abstractRIV0, denseRIV6);
      assertNotSame(abstractRIV0, denseRIV5);
      assertNotSame(abstractRIV0, abstractRIV1);
      assertNotSame(abstractRIV0, denseRIV3);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV4);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(denseRIV3, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV6);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, abstractRIV1);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV5);
      assertNotSame(denseRIV3, denseRIV2);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(3, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(3, denseRIV3.count());
      
      RIV rIV0 = arrayRIV0.normalize();
      assertNotNull(rIV0);
      assertNotSame(denseRIV0, abstractRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV6);
      assertNotSame(rIV0, arrayRIV0);
      assertNotSame(abstractRIV0, denseRIV6);
      assertNotSame(abstractRIV0, denseRIV5);
      assertNotSame(abstractRIV0, abstractRIV1);
      assertNotSame(abstractRIV0, denseRIV3);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV4);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(arrayRIV0, rIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, rIV0.count());
      assertEquals(1, rIV0.size());
      assertEquals(1, abstractRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1, arrayRIV0.count());
      assertEquals(1, arrayRIV0.size());
      
      RIV[] rIVArray0 = new RIV[9];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV4;
      rIVArray0[2] = rIV0;
      rIVArray0[3] = (RIV) denseRIV6;
      rIVArray0[4] = (RIV) denseRIV3;
      rIVArray0[5] = rIV0;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV2;
      rIVArray0[8] = (RIV) abstractRIV1;
      // Undeclared exception!
      try { 
        denseRIV3.destructiveAdd(rIVArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 1 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-931.1442075749);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'K';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 5, 0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'K', 'X'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        DenseRIV.generate(31, 620, (CharSequence) charBuffer0, 639, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      
      boolean boolean0 = denseRIV0.contains((-2378));
      assertFalse(boolean0);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      
      VectorElement vectorElement0 = VectorElement.elt((-124), 0.0);
      assertNotNull(vectorElement0);
      assertEquals((-124), vectorElement0.index());
      assertEquals(0.0, vectorElement0.value(), 0.01);
      
      DoubleStream doubleStream0 = denseRIV0.valStream();
      assertNotNull(doubleStream0);
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      
      int int1 = 31;
      // Undeclared exception!
      try { 
        Permutations.generate((-2378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[0];
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      
      double[] doubleArray0 = denseRIV0.valArr();
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      
      RIV[] rIVArray0 = new RIV[2];
      rIVArray0[0] = (RIV) denseRIV0;
      // Undeclared exception!
      try { 
        denseRIV0.destructiveSub(rIVArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 223;
      intArray0[1] = 31;
      intArray0[2] = 0;
      intArray0[3] = 78;
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {223, 31, 0, 78}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      
      double[] doubleArray0 = denseRIV0.valArr();
      assertEquals(4, intArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new int[] {223, 31, 0, 78}, intArray0);
      assertArrayEquals(new double[] {223.0, 31.0, 0.0, 78.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RIV[] rIVArray0 = new RIV[2];
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
      
      int int0 = (-855);
      char[] charArray0 = new char[2];
      char char0 = 'd';
      charArray0[0] = 'd';
      charArray0[1] = '<';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-855), (-855));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VectorElement[] vectorElementArray0 = new VectorElement[0];
      int int0 = (-1145);
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV(vectorElementArray0, (-1145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1145
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(1);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.divide(0.0);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.size());
      
      String string0 = denseRIV0.toString();
      assertEquals("0|0.000000 1", string0);
      assertNotNull(string0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.destructiveDiv(1.0E-6);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, abstractRIV0);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      DenseRIV denseRIV2 = denseRIV1.copy();
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.count());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 3308;
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      DenseRIV denseRIV2 = new DenseRIV(denseRIV1);
      assertNotNull(denseRIV2);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(3308);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(3308, abstractRIV0.size());
      assertEquals(3308, abstractRIV0.count());
      
      String string0 = denseRIV2.toString();
      assertNotNull(string0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(3308, denseRIV2.count());
      assertEquals(3308, denseRIV2.size());
      
      IntDoubleConsumer intDoubleConsumer0 = null;
      // Undeclared exception!
      try { 
        denseRIV2.forEachNZ((IntDoubleConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      double double0 = denseRIV0.magnitude();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      DenseRIV denseRIV1 = denseRIV0.destructiveSub((RIV) denseRIV0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      
      VectorElement[] vectorElementArray0 = denseRIV0.points();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, vectorElementArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(vectorElementArray0);
      assertSame(denseRIV0, denseRIV1);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
      
      double[] doubleArray1 = denseRIV0.valArr();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      Random.setNextRandom(29);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-355.382769328311);
      doubleArray0[1] = (-4249.8);
      doubleArray0[2] = (-2512.2726670325);
      doubleArray0[3] = 231.987617078228;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(arrayRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      
      double double0 = denseRIV0.dot(arrayRIV0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertEquals(2.455242916073169E7, double0, 0.01);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      
      DenseRIV denseRIV2 = denseRIV1.copy();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(4, denseRIV2.size());
      
      AbstractRIV abstractRIV0 = denseRIV2.add((RIV) denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(4, denseRIV2.size());
      assertEquals(4, abstractRIV0.size());
      assertEquals(4, abstractRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      
      double double1 = denseRIV1.magnitude();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertEquals(4955.040782953425, double1, 0.01);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, abstractRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      
      DenseRIV denseRIV3 = new DenseRIV(arrayRIV0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      boolean boolean0 = denseRIV3.equals((RIV) denseRIV1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, abstractRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      RIV rIV0 = arrayRIV0.normalize();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(rIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(rIV0, arrayRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(4, rIV0.size());
      assertEquals(4, rIV0.count());
      
      RIV[] rIVArray0 = new RIV[6];
      rIVArray0[0] = (RIV) abstractRIV0;
      rIVArray0[1] = (RIV) denseRIV1;
      rIVArray0[2] = (RIV) denseRIV2;
      rIVArray0[3] = (RIV) abstractRIV0;
      rIVArray0[4] = (RIV) denseRIV3;
      rIVArray0[5] = (RIV) denseRIV3;
      DenseRIV denseRIV4 = denseRIV3.destructiveAdd(rIVArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, rIVArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV2);
      assertSame(denseRIV4, denseRIV3);
      assertNotSame(denseRIV4, abstractRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, abstractRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(4, denseRIV4.count());
      assertEquals(4, denseRIV4.size());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      boolean boolean1 = denseRIV3.equals(denseRIV0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, abstractRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      int[] intArray0 = denseRIV3.keyArr();
      assertEquals(4, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1, 2, 3}, intArray0);
      assertNotNull(intArray0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV4);
      assertNotSame(arrayRIV0, rIV0);
      assertNotSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV4);
      assertNotSame(denseRIV3, denseRIV0);
      assertNotSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, abstractRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(4, denseRIV1.size());
      assertEquals(4, arrayRIV0.count());
      assertEquals(4, arrayRIV0.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(4, denseRIV3.size());
      assertEquals(4, denseRIV3.count());
      
      DenseRIV denseRIV5 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, rIVArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, abstractRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV5.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(4, denseRIV5.size());
      
      int[] intArray1 = denseRIV5.keyArr();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, rIVArray0.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1, 2, 3}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV5, denseRIV4);
      assertSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, abstractRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV3);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      assertEquals(4, denseRIV5.count());
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(4, denseRIV5.size());
      
      int[] intArray2 = denseRIV0.keyArr();
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new double[] {(-355.382769328311), (-4249.8), (-2512.2726670325), 231.987617078228}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 1, 2, 3}, intArray2);
      assertNotNull(intArray2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(4, denseRIV0.size());
      assertEquals(4, denseRIV0.count());
      
      // Undeclared exception!
      try { 
        DenseRIV.fromString("y%g|?yc}<R*F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y%g|?yc}<R*F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(2);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      DenseRIV denseRIV1 = new DenseRIV(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV1);
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      
      IntStream intStream0 = denseRIV1.keyStream();
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(intStream0);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveAdd((RIV) denseRIV0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      
      DenseRIV denseRIV3 = denseRIV2.destructiveMult(0.0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV0);
      assertSame(denseRIV3, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      assertEquals(2, denseRIV3.count());
      assertEquals(2, denseRIV3.size());
      
      DenseRIV denseRIV4 = (DenseRIV)denseRIV1.subtract((RIV) denseRIV2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV4);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[1];
      rIVArray0[0] = (RIV) denseRIV3;
      DenseRIV denseRIV5 = denseRIV4.destructiveDiv(2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV5);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      
      DenseRIV denseRIV6 = denseRIV0.destructiveAdd((RIV) denseRIV5);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV6);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      assertEquals(2, denseRIV6.count());
      assertEquals(2, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      DenseRIV denseRIV7 = denseRIV6.destructiveAdd(rIVArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, rIVArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV7);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV6);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV7);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV1);
      assertSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV7, denseRIV3);
      assertNotSame(denseRIV7, denseRIV5);
      assertNotSame(denseRIV7, denseRIV1);
      assertSame(denseRIV7, denseRIV6);
      assertNotSame(denseRIV7, denseRIV4);
      assertNotSame(denseRIV7, denseRIV2);
      assertSame(denseRIV7, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      assertEquals(2, denseRIV6.count());
      assertEquals(2, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      assertEquals(1.0, denseRIV7.saturation(), 0.01);
      assertEquals(2, denseRIV7.size());
      assertEquals(2, denseRIV7.count());
      
      DenseRIV denseRIV8 = denseRIV7.destructiveAdd(rIVArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, rIVArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV8);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV6);
      assertSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV7);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV8);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertSame(denseRIV6, denseRIV8);
      assertSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV1);
      assertSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV7, denseRIV3);
      assertNotSame(denseRIV7, denseRIV5);
      assertNotSame(denseRIV7, denseRIV1);
      assertSame(denseRIV7, denseRIV6);
      assertNotSame(denseRIV7, denseRIV4);
      assertNotSame(denseRIV7, denseRIV2);
      assertSame(denseRIV7, denseRIV0);
      assertSame(denseRIV7, denseRIV8);
      assertNotSame(denseRIV8, denseRIV1);
      assertSame(denseRIV8, denseRIV6);
      assertSame(denseRIV8, denseRIV7);
      assertNotSame(denseRIV8, denseRIV3);
      assertNotSame(denseRIV8, denseRIV5);
      assertNotSame(denseRIV8, denseRIV4);
      assertSame(denseRIV8, denseRIV0);
      assertNotSame(denseRIV8, denseRIV2);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      assertEquals(2, denseRIV6.count());
      assertEquals(2, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      assertEquals(1.0, denseRIV7.saturation(), 0.01);
      assertEquals(2, denseRIV7.size());
      assertEquals(2, denseRIV7.count());
      assertEquals(2, denseRIV8.count());
      assertEquals(1.0, denseRIV8.saturation(), 0.01);
      assertEquals(2, denseRIV8.size());
      
      boolean boolean0 = denseRIV0.equals(denseRIV7);
      assertEquals(2, intArray0.length);
      assertEquals(1, rIVArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertTrue(boolean0);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV6);
      assertSame(denseRIV0, denseRIV8);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV7);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV8);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertSame(denseRIV6, denseRIV8);
      assertSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV1);
      assertSame(denseRIV6, denseRIV7);
      assertNotSame(denseRIV7, denseRIV3);
      assertNotSame(denseRIV7, denseRIV5);
      assertNotSame(denseRIV7, denseRIV1);
      assertSame(denseRIV7, denseRIV6);
      assertNotSame(denseRIV7, denseRIV4);
      assertNotSame(denseRIV7, denseRIV2);
      assertSame(denseRIV7, denseRIV0);
      assertSame(denseRIV7, denseRIV8);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      assertEquals(2, denseRIV6.count());
      assertEquals(2, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      assertEquals(1.0, denseRIV7.saturation(), 0.01);
      assertEquals(2, denseRIV7.size());
      assertEquals(2, denseRIV7.count());
      
      int[] intArray1 = denseRIV6.keyArr();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV7);
      assertNotSame(denseRIV0, denseRIV5);
      assertNotSame(denseRIV0, denseRIV4);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV6);
      assertSame(denseRIV0, denseRIV8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV5);
      assertNotSame(denseRIV2, denseRIV7);
      assertSame(denseRIV2, denseRIV1);
      assertNotSame(denseRIV2, denseRIV4);
      assertNotSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV8);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV2, denseRIV6);
      assertNotSame(denseRIV4, denseRIV0);
      assertNotSame(denseRIV4, denseRIV8);
      assertNotSame(denseRIV4, denseRIV7);
      assertNotSame(denseRIV4, denseRIV1);
      assertNotSame(denseRIV4, denseRIV2);
      assertNotSame(denseRIV4, denseRIV3);
      assertSame(denseRIV4, denseRIV5);
      assertNotSame(denseRIV4, denseRIV6);
      assertNotSame(denseRIV5, denseRIV6);
      assertNotSame(denseRIV5, denseRIV3);
      assertSame(denseRIV5, denseRIV4);
      assertNotSame(denseRIV5, denseRIV0);
      assertNotSame(denseRIV5, denseRIV2);
      assertNotSame(denseRIV5, denseRIV8);
      assertNotSame(denseRIV5, denseRIV7);
      assertNotSame(denseRIV5, denseRIV1);
      assertNotSame(denseRIV6, denseRIV2);
      assertNotSame(denseRIV6, denseRIV3);
      assertNotSame(denseRIV6, denseRIV4);
      assertSame(denseRIV6, denseRIV8);
      assertSame(denseRIV6, denseRIV0);
      assertNotSame(denseRIV6, denseRIV5);
      assertNotSame(denseRIV6, denseRIV1);
      assertSame(denseRIV6, denseRIV7);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(2, denseRIV4.count());
      assertEquals(2, denseRIV4.size());
      assertEquals(1.0, denseRIV4.saturation(), 0.01);
      assertEquals(1.0, denseRIV5.saturation(), 0.01);
      assertEquals(2, denseRIV5.count());
      assertEquals(2, denseRIV5.size());
      assertEquals(2, denseRIV6.count());
      assertEquals(2, denseRIV6.size());
      assertEquals(1.0, denseRIV6.saturation(), 0.01);
      
      DenseRIV denseRIV9 = denseRIV1.destructiveSub(rIVArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertEquals(1, rIVArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(denseRIV9);
      assertNotSame(denseRIV9, denseRIV5);
      assertNotSame(denseRIV9, denseRIV4);
      assertSame(denseRIV9, denseRIV3);
      assertSame(denseRIV9, denseRIV2);
      assertNotSame(denseRIV9, denseRIV6);
      assertNotSame(denseRIV9, denseRIV8);
      assertNotSame(denseRIV9, denseRIV7);
      assertNotSame(denseRIV9, denseRIV0);
      assertSame(denseRIV9, denseRIV1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(denseRIV1, denseRIV4);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV5);
      assertNotSame(denseRIV1, denseRIV7);
      assertNotSame(denseRIV1, denseRIV8);
      assertNotSame(denseRIV1, denseRIV6);
      assertSame(denseRIV1, denseRIV9);
      assertSame(denseRIV1, denseRIV2);
      assertEquals(2, denseRIV9.size());
      assertEquals(1.0, denseRIV9.saturation(), 0.01);
      assertEquals(2, denseRIV9.count());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = " is outside the bounds of this RIV";
      // Undeclared exception!
      try { 
        DenseRIV.fromString(" is outside the bounds of this RIV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"RIV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(2);
      assertNotNull(denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      
      RIV[] rIVArray0 = new RIV[0];
      DenseRIV denseRIV1 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(0, rIVArray0.length);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(2, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      DenseRIV denseRIV2 = denseRIV0.destructiveDiv((-1808.804));
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      
      boolean boolean0 = denseRIV2.contains(1);
      assertTrue(boolean0);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      
      VectorElement vectorElement0 = VectorElement.elt(1, 1355.1);
      assertNotNull(vectorElement0);
      assertEquals(1, vectorElement0.index());
      assertEquals(1355.1, vectorElement0.value(), 0.01);
      
      VectorElement vectorElement1 = VectorElement.fromIndex(2);
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertNotNull(vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(2, vectorElement1.index());
      
      VectorElement vectorElement2 = VectorElement.zero();
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertNotNull(vectorElement2);
      assertNotSame(vectorElement2, vectorElement0);
      assertNotSame(vectorElement2, vectorElement1);
      assertEquals(0, vectorElement2.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      
      VectorElement vectorElement3 = vectorElement2.destructiveSub(vectorElement1);
      assertFalse(vectorElement1.equals((Object)vectorElement2));
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertFalse(vectorElement3.equals((Object)vectorElement1));
      assertFalse(vectorElement3.equals((Object)vectorElement0));
      assertNotNull(vectorElement3);
      assertNotSame(vectorElement1, vectorElement2);
      assertNotSame(vectorElement1, vectorElement3);
      assertNotSame(vectorElement1, vectorElement0);
      assertSame(vectorElement2, vectorElement3);
      assertNotSame(vectorElement2, vectorElement0);
      assertNotSame(vectorElement2, vectorElement1);
      assertNotSame(vectorElement3, vectorElement1);
      assertSame(vectorElement3, vectorElement2);
      assertNotSame(vectorElement3, vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(2, vectorElement1.index());
      assertEquals(0, vectorElement2.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      assertEquals(0, vectorElement3.index());
      assertEquals(0.0, vectorElement3.value(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV2.subtract(rIVArray0);
      assertEquals(0, rIVArray0.length);
      assertNotNull(abstractRIV0);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(2, abstractRIV0.count());
      assertEquals(2, abstractRIV0.size());
      
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV((VectorElement[]) null, 2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      boolean boolean0 = denseRIV0.contains((-1445));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(501);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(501, charBuffer0.capacity());
      assertEquals(501, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(501, charBuffer0.length());
      assertEquals(501, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 0, (-1450));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(2);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV0;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV0;
      DenseRIV denseRIV1 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveDiv(0.0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      
      boolean boolean0 = denseRIV2.contains(2);
      assertEquals(8, rIVArray0.length);
      assertFalse(boolean0);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV2);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(2, denseRIV1.count());
      assertEquals(2, denseRIV2.size());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(2, denseRIV2.count());
      
      VectorElement vectorElement0 = VectorElement.elt(0, 1355.1);
      assertNotNull(vectorElement0);
      assertEquals(1355.1, vectorElement0.value(), 0.01);
      assertEquals(0, vectorElement0.index());
      
      VectorElement vectorElement1 = VectorElement.fromIndex(567);
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertNotNull(vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(567, vectorElement1.index());
      
      VectorElement vectorElement2 = VectorElement.zero();
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertNotNull(vectorElement2);
      assertNotSame(vectorElement2, vectorElement1);
      assertNotSame(vectorElement2, vectorElement0);
      assertEquals(0, vectorElement2.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      
      VectorElement vectorElement3 = vectorElement2.destructiveSub(vectorElement1);
      assertFalse(vectorElement3.equals((Object)vectorElement0));
      assertFalse(vectorElement3.equals((Object)vectorElement1));
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertFalse(vectorElement1.equals((Object)vectorElement2));
      assertFalse(vectorElement2.equals((Object)vectorElement1));
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertNotNull(vectorElement3);
      assertSame(vectorElement3, vectorElement2);
      assertNotSame(vectorElement3, vectorElement0);
      assertNotSame(vectorElement3, vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertNotSame(vectorElement1, vectorElement2);
      assertNotSame(vectorElement1, vectorElement3);
      assertNotSame(vectorElement2, vectorElement1);
      assertSame(vectorElement2, vectorElement3);
      assertNotSame(vectorElement2, vectorElement0);
      assertEquals(0, vectorElement3.index());
      assertEquals(0.0, vectorElement3.value(), 0.01);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals(567, vectorElement1.index());
      assertEquals(0, vectorElement2.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.subtract(rIVArray0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertSame(denseRIV0, denseRIV2);
      assertSame(denseRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV2);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.count());
      assertEquals(2, denseRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(2, abstractRIV0.count());
      assertEquals(2, abstractRIV0.size());
      
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV((VectorElement[]) null, (-1398));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      
      boolean boolean0 = denseRIV0.contains((-2378));
      assertFalse(boolean0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      
      VectorElement[] vectorElementArray0 = new VectorElement[2];
      int int1 = (-124);
      VectorElement vectorElement0 = VectorElement.elt((-124), 0.0);
      assertNotNull(vectorElement0);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals((-124), vectorElement0.index());
      
      vectorElementArray0[0] = vectorElement0;
      VectorElement vectorElement1 = VectorElement.fromIndex((-2378));
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertNotNull(vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals((-2378), vectorElement1.index());
      
      VectorElement vectorElement2 = vectorElement1.destructiveSub(vectorElement0);
      assertFalse(vectorElement0.equals((Object)vectorElement1));
      assertFalse(vectorElement1.equals((Object)vectorElement0));
      assertFalse(vectorElement2.equals((Object)vectorElement0));
      assertNotNull(vectorElement2);
      assertNotSame(vectorElement0, vectorElement2);
      assertNotSame(vectorElement0, vectorElement1);
      assertNotSame(vectorElement1, vectorElement0);
      assertSame(vectorElement1, vectorElement2);
      assertNotSame(vectorElement2, vectorElement0);
      assertSame(vectorElement2, vectorElement1);
      assertEquals(0.0, vectorElement0.value(), 0.01);
      assertEquals((-124), vectorElement0.index());
      assertEquals(0.0, vectorElement1.value(), 0.01);
      assertEquals((-2378), vectorElement1.index());
      assertEquals(0.0, vectorElement2.value(), 0.01);
      assertEquals((-2378), vectorElement2.index());
      
      vectorElementArray0[1] = vectorElement1;
      RIV[] rIVArray0 = new RIV[8];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV0;
      rIVArray0[6] = (RIV) denseRIV0;
      rIVArray0[7] = (RIV) denseRIV0;
      AbstractRIV abstractRIV0 = denseRIV0.subtract(rIVArray0);
      assertEquals(8, rIVArray0.length);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(0, abstractRIV0.size());
      assertEquals(0, abstractRIV0.count());
      
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(vectorElementArray0, (-2378));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 354.48554817629;
      doubleArray0[1] = (-3123.0565504);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1633.1);
      doubleArray0[5] = (-606.545968);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {354.48554817629, (-3123.0565504), 0.0, (-1.0), (-1633.1), (-606.545968), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(8, denseRIV0.count());
      assertEquals(8, denseRIV0.size());
      
      DenseRIV denseRIV1 = DenseRIV.empty(1);
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      
      DenseRIV denseRIV2 = denseRIV0.destructiveAdd((RIV) denseRIV1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {354.48554817629, (-3123.0565504), 0.0, (-1.0), (-1633.1), (-606.545968), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(8, denseRIV0.count());
      assertEquals(8, denseRIV0.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.size());
      assertEquals(8, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(8, denseRIV2.size());
      
      RIV[] rIVArray0 = new RIV[3];
      rIVArray0[0] = (RIV) denseRIV1;
      rIVArray0[1] = (RIV) denseRIV2;
      rIVArray0[2] = (RIV) denseRIV0;
      // Undeclared exception!
      try { 
        denseRIV2.destructiveAdd(rIVArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = 675;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV(intArray0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      DenseRIV denseRIV0 = new DenseRIV(1);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      
      DenseRIV denseRIV1 = denseRIV0.copy();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      AbstractRIV abstractRIV0 = denseRIV0.multiply(0.0);
      assertNotNull(abstractRIV0);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(abstractRIV0, denseRIV1);
      assertNotSame(abstractRIV0, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1, abstractRIV0.count());
      assertEquals(1.0, abstractRIV0.saturation(), 0.01);
      assertEquals(1, abstractRIV0.size());
      
      DenseRIV denseRIV2 = denseRIV1.destructiveDiv(1);
      assertNotNull(denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      
      DenseRIV denseRIV3 = denseRIV2.destructiveSub((RIV) denseRIV0);
      assertNotNull(denseRIV3);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV0, denseRIV3);
      assertNotSame(denseRIV0, abstractRIV0);
      assertNotSame(denseRIV0, denseRIV2);
      assertSame(denseRIV1, denseRIV2);
      assertNotSame(denseRIV1, abstractRIV0);
      assertNotSame(denseRIV1, denseRIV0);
      assertSame(denseRIV1, denseRIV3);
      assertNotSame(denseRIV2, abstractRIV0);
      assertNotSame(denseRIV2, denseRIV0);
      assertSame(denseRIV2, denseRIV1);
      assertSame(denseRIV2, denseRIV3);
      assertNotSame(denseRIV3, abstractRIV0);
      assertSame(denseRIV3, denseRIV1);
      assertSame(denseRIV3, denseRIV2);
      assertNotSame(denseRIV3, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV1.size());
      assertEquals(1, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      assertEquals(1, denseRIV2.size());
      assertEquals(1, denseRIV3.count());
      assertEquals(1, denseRIV3.size());
      assertEquals(1.0, denseRIV3.saturation(), 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      int int1 = 2;
      int int2 = 1331;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2, 1331);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        DenseRIV.empty(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2;
      DenseRIV denseRIV0 = DenseRIV.empty(2);
      assertNotNull(denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV1.count());
      assertEquals(2, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      RIV[] rIVArray0 = new RIV[7];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV1;
      rIVArray0[2] = (RIV) denseRIV1;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV1;
      rIVArray0[6] = (RIV) denseRIV1;
      DenseRIV denseRIV2 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(7, rIVArray0.length);
      assertNotNull(denseRIV2);
      assertSame(denseRIV0, denseRIV2);
      assertNotSame(denseRIV0, denseRIV1);
      assertSame(denseRIV2, denseRIV0);
      assertNotSame(denseRIV2, denseRIV1);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, denseRIV2.size());
      assertEquals(2, denseRIV2.count());
      assertEquals(1.0, denseRIV2.saturation(), 0.01);
      
      // Undeclared exception!
      try { 
        denseRIV0.equals((AbstractRIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.AbstractRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      DenseRIV denseRIV0 = DenseRIV.empty(0);
      assertNotNull(denseRIV0);
      assertEquals(0, denseRIV0.count());
      assertEquals(0, denseRIV0.size());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      
      // Undeclared exception!
      try { 
        denseRIV0.toImmutable();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/NotImplementedException
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.AbstractRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      
      double[] doubleArray0 = denseRIV0.valArr();
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      
      RIV[] rIVArray0 = new RIV[2];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      DenseRIV denseRIV1 = denseRIV0.destructiveSub(rIVArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, rIVArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(denseRIV1);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      
      String string0 = denseRIV1.toString();
      assertEquals(1, intArray0.length);
      assertEquals(2, rIVArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("0|0.000000 1", string0);
      assertNotNull(string0);
      assertSame(denseRIV0, denseRIV1);
      assertSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(1, denseRIV0.count());
      assertEquals(1, denseRIV0.size());
      assertEquals(1, denseRIV1.size());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      assertEquals(1, denseRIV1.count());
      
      // Undeclared exception!
      try { 
        DenseRIV.generate(0, (-208), (CharSequence) "0|0.000000 1", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-3300);
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'J';
      charArray0[2] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'J', 'k'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("*Jk", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'J', 'k'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("*Jk", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(3, charBuffer1.limit());
      assertEquals("*Jk", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      
      CharBuffer charBuffer2 = charBuffer1.put(charArray0, 0, 0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'J', 'k'}, charArray0);
      assertNotNull(charBuffer2);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("*Jk", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(3, charBuffer1.limit());
      assertEquals("*Jk", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(3, charBuffer2.capacity());
      assertEquals(3, charBuffer2.remaining());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasArray());
      assertTrue(charBuffer2.isReadOnly());
      assertEquals(3, charBuffer2.length());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(3, charBuffer2.limit());
      assertEquals("*Jk", charBuffer2.toString());
      
      CharBuffer charBuffer3 = charBuffer1.put(charArray0, 0, 0);
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer3.equals((Object)charBuffer0));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'J', 'k'}, charArray0);
      assertNotNull(charBuffer3);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer1, charBuffer3);
      assertSame(charBuffer3, charBuffer1);
      assertSame(charBuffer3, charBuffer2);
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("*Jk", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(3, charBuffer1.limit());
      assertEquals("*Jk", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(3, charBuffer3.length());
      assertTrue(charBuffer3.hasRemaining());
      assertFalse(charBuffer3.hasArray());
      assertEquals(0, charBuffer3.position());
      assertFalse(charBuffer3.isDirect());
      assertEquals(3, charBuffer3.limit());
      assertEquals(3, charBuffer3.capacity());
      assertEquals(3, charBuffer3.remaining());
      assertEquals("*Jk", charBuffer3.toString());
      assertTrue(charBuffer3.isReadOnly());
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        DenseRIV.generate((-3300), 0, (CharSequence) charBuffer1, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(3308);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      
      DenseRIV denseRIV1 = denseRIV0.toDense();
      assertNotNull(denseRIV1);
      assertNotSame(denseRIV0, denseRIV1);
      assertNotSame(denseRIV1, denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3308, denseRIV0.count());
      assertEquals(3308, denseRIV0.size());
      assertEquals(3308, denseRIV1.size());
      assertEquals(3308, denseRIV1.count());
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
      
      double double0 = 1.0;
      int[] intArray0 = new int[4];
      intArray0[0] = 3308;
      intArray0[1] = 0;
      intArray0[2] = 3307;
      intArray0[3] = 0;
      DenseRIV denseRIV2 = null;
      try {
        denseRIV2 = new DenseRIV(intArray0, (double[]) null, 3307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1194;
      intArray0[1] = 5821;
      intArray0[2] = 3054;
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1194, 5821, 3054}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3, denseRIV0.size());
      assertEquals(3, denseRIV0.count());
      
      double[] doubleArray0 = denseRIV0.valArr();
      assertEquals(3, intArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new int[] {1194, 5821, 3054}, intArray0);
      assertArrayEquals(new double[] {1194.0, 5821.0, 3054.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(3, denseRIV0.size());
      assertEquals(3, denseRIV0.count());
      
      DenseRIV denseRIV1 = null;
      try {
        denseRIV1 = new DenseRIV(intArray0, doubleArray0, (-745));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -745
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseRIV.fromString("Point indices do not match! %s != %s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseRIV.fromString("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(2697);
      AbstractRIV abstractRIV0 = denseRIV0.divide(0.0);
      DenseRIV denseRIV1 = new DenseRIV(abstractRIV0);
      DenseRIV denseRIV2 = denseRIV0.removeZeros();
      denseRIV2.points();
      DenseRIV denseRIV3 = denseRIV2.destructiveSub((RIV) abstractRIV0);
      RIV[] rIVArray0 = new RIV[1];
      rIVArray0[0] = (RIV) denseRIV0;
      DenseRIV denseRIV4 = denseRIV0.destructiveAdd(rIVArray0);
      denseRIV2.subtract((RIV) denseRIV4);
      denseRIV3.pointStream();
      double double0 = 0.0;
      denseRIV4.divide(0.0);
      DenseRIV denseRIV5 = denseRIV1.destructiveRemoveZeros();
      denseRIV0.equals((RIV) denseRIV5);
      RIV rIV0 = null;
      // Undeclared exception!
      try { 
        denseRIV4.destructiveSub((RIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[1];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      denseRIV0.valArr();
      RIV[] rIVArray0 = new RIV[2];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      denseRIV0.valStream();
      DenseRIV denseRIV1 = denseRIV0.destructiveAdd(rIVArray0[0]);
      denseRIV1.keyStream();
      int int0 = denseRIV1.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DenseRIV denseRIV0 = DenseRIV.empty(2);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 815.545223458;
      doubleArray0[1] = 497.400243248;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.1439158642537943);
      DenseRIV denseRIV1 = new DenseRIV(intArray0, doubleArray0, 2);
      DenseRIV denseRIV2 = denseRIV0.destructiveMult(815.545223458);
      boolean boolean0 = denseRIV2.equals((RIV) denseRIV1);
      assertFalse(boolean0);
      assertEquals(2, denseRIV2.size());
      
      DenseRIV denseRIV3 = new DenseRIV(0);
      denseRIV3.destructiveRemoveZeros();
      assertEquals(0, denseRIV3.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 785;
      DenseRIV denseRIV0 = new DenseRIV(785);
      AbstractRIV abstractRIV0 = denseRIV0.divide(785);
      DenseRIV denseRIV1 = denseRIV0.destructiveSub((RIV) abstractRIV0);
      denseRIV1.removeZeros();
      // Undeclared exception!
      try { 
        DenseRIV.fromString("f7K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f7K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2697;
      DenseRIV denseRIV0 = DenseRIV.empty(2697);
      AbstractRIV abstractRIV0 = denseRIV0.divide(0.0);
      DenseRIV denseRIV1 = new DenseRIV(abstractRIV0);
      DenseRIV denseRIV2 = denseRIV0.removeZeros();
      denseRIV2.points();
      DenseRIV denseRIV3 = denseRIV2.destructiveSub((RIV) abstractRIV0);
      RIV[] rIVArray0 = new RIV[1];
      rIVArray0[0] = (RIV) denseRIV0;
      DenseRIV denseRIV4 = denseRIV0.destructiveAdd(rIVArray0);
      denseRIV2.subtract((RIV) denseRIV4);
      denseRIV3.pointStream();
      denseRIV4.divide(0.0);
      DenseRIV denseRIV5 = denseRIV1.destructiveRemoveZeros();
      denseRIV0.equals((RIV) denseRIV5);
      // Undeclared exception!
      try { 
        denseRIV4.destructiveSub((RIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[4];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      denseRIV0.saturation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseRIV denseRIV1 = null;
      try {
        denseRIV1 = new DenseRIV(intArray0, doubleArray0, 660);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-931.1442075749);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 568.8588;
      doubleArray0[5] = 3254.973613851391;
      doubleArray0[6] = (-1173.42426692);
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      denseRIV0.saturation();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      DenseRIV denseRIV1 = null;
      try {
        denseRIV1 = new DenseRIV(intArray0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 1735;
      DenseRIV denseRIV0 = new DenseRIV(1735);
      RIV[] rIVArray0 = new RIV[6];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV0;
      // Undeclared exception!
      denseRIV0.destructiveAdd(rIVArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[4];
      double double0 = 3618.79935787;
      double[] doubleArray0 = new double[0];
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV((-567));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -567
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[3];
      double double0 = 497.400243248;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 497.400243248;
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV(intArray0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1735;
      intArray0[1] = (-1481);
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      DenseRIV denseRIV0 = null;
      try {
        denseRIV0 = new DenseRIV(intArray0, doubleArray0, 1735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1735 out of bounds for length 1735
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(47);
      DenseRIV denseRIV1 = denseRIV0.destructiveRemoveZeros();
      RIV[] rIVArray0 = new RIV[0];
      DenseRIV denseRIV2 = denseRIV1.destructiveSub(rIVArray0);
      DenseRIV denseRIV3 = denseRIV2.destructiveAdd((RIV) denseRIV0);
      assertEquals(47, denseRIV3.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      denseRIV0.destructiveSub((RIV) denseRIV0);
      denseRIV0.points();
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-355.382769328311);
      doubleArray0[1] = (-4249.8);
      doubleArray0[2] = (-2512.2726670325);
      doubleArray0[3] = 231.987617078228;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      denseRIV0.dot(arrayRIV0);
      DenseRIV denseRIV1 = denseRIV0.copy();
      AbstractRIV abstractRIV0 = denseRIV0.multiply(603.828347);
      denseRIV1.destructiveSub((RIV) abstractRIV0);
      denseRIV0.points();
      // Undeclared exception!
      try { 
        DenseRIV.generate((-482), 2, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.RIVs", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[4];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      DenseRIV denseRIV1 = denseRIV0.destructiveMult(442.7493);
      assertEquals(1.0, denseRIV1.saturation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(47);
      DenseRIV denseRIV1 = denseRIV0.destructiveRemoveZeros();
      denseRIV0.destructiveSub((RIV) denseRIV1);
      RIVConstructor rIVConstructor0 = DenseRIV.getConstructor();
      assertNotNull(rIVConstructor0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-193.2);
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      DenseRIV denseRIV1 = denseRIV0.destructiveMult((-818.20921522));
      DenseRIV denseRIV2 = denseRIV1.copy();
      denseRIV1.add((RIV) denseRIV0);
      denseRIV2.destructiveAdd((RIV) denseRIV1);
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      // Undeclared exception!
      try { 
        DenseRIV.generate(1, 0, (CharSequence) charBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }
}
