/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:24:19 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.labels.ArrayRIV;
import com.github.druidgreeneyes.rivet.core.labels.DenseRIV;
import com.github.druidgreeneyes.rivet.core.labels.RIV;
import com.github.druidgreeneyes.rivet.core.labels.RIVConstructor;
import com.github.druidgreeneyes.rivet.core.labels.VectorElement;
import com.github.druidgreeneyes.rivet.core.util.IntDoubleConsumer;
import com.github.druidgreeneyes.rivet.core.vectorpermutations.Permutations;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayRIV_ESTest extends ArrayRIV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(544);
      // Undeclared exception!
      try { 
        arrayRIV0.put(544, 1610.98892992);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 544 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(7);
      ArrayRIV arrayRIV1 = ArrayRIV.empty(399);
      boolean boolean0 = arrayRIV1.equals(arrayRIV0);
      assertEquals(399, arrayRIV1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      // Undeclared exception!
      try { 
        arrayRIV0.add((RIV) denseRIV0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      double[] doubleArray0 = new double[6];
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, (-1894));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Different quantity keys than values!
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(2);
      IntDoubleConsumer intDoubleConsumer0 = mock(IntDoubleConsumer.class, new ViolatedAssumptionAnswer());
      arrayRIV0.forEachNZ(intDoubleConsumer0);
      assertEquals(2, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      int int0 = arrayRIV0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-6995));
      int int0 = arrayRIV0.size();
      assertEquals((-6995), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      ArrayRIV arrayRIV1 = arrayRIV0.removeZeros();
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-1));
      ArrayRIV arrayRIV1 = arrayRIV0.removeZeros();
      assertEquals((-1), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 495;
      doubleArray0[1] = (double) 2848;
      doubleArray0[2] = (double) (-2936);
      doubleArray0[3] = (double) 2848;
      doubleArray0[4] = (double) 495;
      doubleArray0[5] = (double) (-1818);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 495;
      ArrayRIV arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, 1597);
      ArrayRIV arrayRIV1 = arrayRIV0.removeZeros();
      assertEquals(8, arrayRIV1.count());
      assertEquals(1597, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      arrayRIV0.destructiveMult((-1.0));
      double double0 = arrayRIV0.put(1, 0.0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      VectorElement[] vectorElementArray0 = arrayRIV0.points();
      assertEquals(7, vectorElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(123);
      arrayRIV0.magnitude();
      assertEquals(123, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-545));
      RIV[] rIVArray0 = new RIV[6];
      arrayRIV0.destructiveSub(rIVArray0);
      assertEquals((-545), arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      RIV[] rIVArray0 = new RIV[0];
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveSub(rIVArray0);
      assertEquals(7, arrayRIV1.count());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveSub((RIV) arrayRIV0);
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-1965));
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveSub((RIV) arrayRIV0);
      assertEquals((-1965), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveSub((RIV) arrayRIV0);
      assertSame(arrayRIV1, arrayRIV0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveRemoveZeros();
      assertSame(arrayRIV0, arrayRIV1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-1982));
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveRemoveZeros();
      assertEquals((-1982), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 495;
      doubleArray0[1] = (double) 2848;
      doubleArray0[2] = (double) (-2936);
      doubleArray0[3] = (double) 2848;
      doubleArray0[4] = (double) 495;
      doubleArray0[5] = (double) (-1818);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 495;
      ArrayRIV arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, 1597);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveRemoveZeros();
      assertEquals(1597, arrayRIV1.size());
      assertEquals(8, arrayRIV1.count());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveMult((-2002.7706790771));
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-599));
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveMult((-599));
      assertEquals((-599), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveDiv(276.5091205256318);
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-599));
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveDiv((-599));
      assertEquals((-599), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveDiv(1.0);
      assertSame(arrayRIV1, arrayRIV0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(0);
      RIV[] rIVArray0 = new RIV[5];
      arrayRIV0.destructiveAdd(rIVArray0);
      assertEquals(0, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RIV[] rIVArray0 = new RIV[1];
      ArrayRIV arrayRIV0 = new ArrayRIV((-507));
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveAdd(rIVArray0);
      assertEquals((-507), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      RIV[] rIVArray0 = new RIV[3];
      rIVArray0[0] = (RIV) arrayRIV0;
      rIVArray0[1] = (RIV) denseRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveAdd(rIVArray0);
      assertEquals(7, arrayRIV1.count());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveAdd((RIV) denseRIV0);
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(3012);
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveAdd((RIV) arrayRIV0);
      assertEquals(3012, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(0);
      ArrayRIV arrayRIV1 = arrayRIV0.copy();
      assertEquals(0, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-599));
      ArrayRIV arrayRIV1 = arrayRIV0.copy();
      assertEquals((-599), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(9);
      ArrayRIV arrayRIV1 = arrayRIV0.copy();
      assertEquals(9, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = arrayRIV0.copy();
      assertEquals(6, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      try { 
        arrayRIV0.get(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 13 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.generate(0, (-2077), (CharSequence) "OuV1XzR=*:", 0, (-2077));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(24);
      // Undeclared exception!
      try { 
        ArrayRIV.generate(544, (-3733), (CharSequence) charBuffer0, 2750, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.generate((-3929), 9, (CharSequence) " 9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.fromString("OuV1XzR=*:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"OuV1XzR=*:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.fromString(" 9");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.fromString(" ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(3055);
      RIV[] rIVArray0 = new RIV[3];
      rIVArray0[0] = (RIV) arrayRIV0;
      rIVArray0[1] = (RIV) arrayRIV0;
      rIVArray0[2] = (RIV) arrayRIV0;
      // Undeclared exception!
      arrayRIV0.destructiveSub(rIVArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(348);
      double[] doubleArray0 = new double[8];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      RIV[] rIVArray0 = new RIV[6];
      rIVArray0[0] = (RIV) denseRIV0;
      rIVArray0[1] = (RIV) arrayRIV0;
      rIVArray0[2] = (RIV) denseRIV0;
      rIVArray0[3] = (RIV) denseRIV0;
      rIVArray0[4] = (RIV) denseRIV0;
      rIVArray0[5] = (RIV) denseRIV0;
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveSub(rIVArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(238);
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveSub((RIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-1910));
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveSub((RIV) denseRIV0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(92);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveRemoveZeros();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(1);
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveAdd((RIV[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(3055);
      RIV[] rIVArray0 = new RIV[4];
      rIVArray0[0] = (RIV) arrayRIV0;
      int[] intArray0 = new int[0];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      rIVArray0[1] = (RIV) denseRIV0;
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveAdd(rIVArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.DenseRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(3055);
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveAdd((RIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV((int[]) null, doubleArray0, 1352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RIV[] rIVArray0 = new RIV[1];
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(rIVArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      boolean boolean0 = arrayRIV0.equals(arrayRIV0);
      assertTrue(boolean0);
      assertEquals(9, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(31);
      arrayRIV0.keyStream();
      assertEquals(31, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      arrayRIV0.points();
      assertEquals(9, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      arrayRIV0.stream();
      assertEquals(9, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV((VectorElement[]) null, 1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      arrayRIV0.valStream();
      assertEquals(9, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(3012);
      arrayRIV0.count();
      assertEquals(3012, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(585);
      RIV[] rIVArray0 = new RIV[2];
      rIVArray0[0] = (RIV) arrayRIV0;
      ArrayRIV arrayRIV1 = new ArrayRIV((-932));
      rIVArray0[1] = (RIV) arrayRIV1;
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveSub(rIVArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      double[] doubleArray1 = arrayRIV0.valArr();
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(3055);
      arrayRIV0.valArr();
      assertEquals(3055, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      // Undeclared exception!
      try { 
        arrayRIV0.removeZeros();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(3055);
      // Undeclared exception!
      try { 
        arrayRIV0.permute((Permutations) null, (-816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(92);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      // Undeclared exception!
      try { 
        arrayRIV0.permute((Permutations) null, 854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      arrayRIV0.keyArr();
      assertEquals(9, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      arrayRIV0.toDense();
      assertEquals(7, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(92);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = ArrayRIV.empty(92);
      boolean boolean0 = arrayRIV0.equals(arrayRIV1);
      assertFalse(boolean0);
      assertEquals(92, arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(52);
      ArrayRIV arrayRIV1 = new ArrayRIV((-507));
      boolean boolean0 = arrayRIV1.equals(arrayRIV0);
      assertFalse(boolean0);
      assertEquals(52, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      boolean boolean0 = arrayRIV0.equals((RIV) arrayRIV0);
      assertEquals(0, arrayRIV0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-6995));
      arrayRIV0.equals((RIV) null);
      assertEquals((-6995), arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      ArrayRIV arrayRIV1 = new ArrayRIV(52);
      // Undeclared exception!
      try { 
        arrayRIV1.subtract((RIV) arrayRIV0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      // Undeclared exception!
      try { 
        arrayRIV0.normalize();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DenseRIV denseRIV0 = new DenseRIV(92);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      boolean boolean0 = arrayRIV0.contains(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[2];
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, 3679);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Different quantity keys than values!
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-599));
      assertEquals(0, arrayRIV0.count());
      
      ArrayRIV arrayRIV1 = arrayRIV0.destructiveAdd((RIV) arrayRIV0);
      assertEquals((-599), arrayRIV1.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DenseRIV denseRIV0 = new DenseRIV(doubleArray0);
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      String string0 = arrayRIV0.toString();
      assertEquals("0|0.000000 1|0.000000 2|0.000000 3|0.000000 4|0.000000 5|0.000000 6|0.000000 7", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      ArrayRIV arrayRIV0 = null;
      try {
        arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, 3055);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/ArrayUtils
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RIVConstructor rIVConstructor0 = ArrayRIV.getConstructor();
      assertNotNull(rIVConstructor0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(3055);
      RIV[] rIVArray0 = new RIV[3];
      // Undeclared exception!
      try { 
        arrayRIV0.destructiveSub(rIVArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.generate((-1), 902, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.RIVs", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayRIV.generate(0, 0, (CharSequence) "0|0.000000 1|0.000000 2|0.000000 3|0.000000 4|0.000000 5|0.000000 6|0.000000 7|0.000000 8|0.000000 9|0.000000 10|0.000000 11|0.000000 12", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty((-599));
      arrayRIV0.pointStream();
      assertEquals((-599), arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(9);
      // Undeclared exception!
      try { 
        arrayRIV0.put((-1278), 2770.5316);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -1278 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }
}
