/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:28:40 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.extras.topicheirarchy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.NamedRIV;
import com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.NamedRIVMap;
import com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy;
import com.github.druidgreeneyes.rivet.core.labels.ArrayRIV;
import com.github.druidgreeneyes.rivet.core.labels.DenseRIV;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RIVTopicHeirarchy_ESTest extends RIVTopicHeirarchy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV((-1));
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals((-1), arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("H\r`0MI]]I`baSw?", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals((-1), arrayRIV0.size());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-2138682485));
      assertEquals((-2138682485), namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals((-2138682485), namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-643.710264));
      assertEquals((-2138682485), namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals((-2138682485), namedRIVMap0.size());
      
      rIVTopicHeirarchy0.graftNew(namedRIV0);
      assertEquals((-2138682485), namedRIVMap0.size);
      assertEquals(0, arrayRIV0.count());
      assertEquals((-1), arrayRIV0.size());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(1, namedRIVMap0.count());
      assertEquals((-2138682485), namedRIVMap0.size());
      assertFalse(namedRIVMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(243);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("H\r`0MI]]I`baSw?", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243, namedRIV0);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(243, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(243, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      
      ArrayRIV arrayRIV1 = namedRIVMap0.put("_oLC`y$g", arrayRIV0);
      assertEquals(243, namedRIVMap0.size);
      assertNull(arrayRIV1);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(2, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
      assertFalse(namedRIVMap0.isEmpty());
      
      rIVTopicHeirarchy0.prune(namedRIV0);
      assertEquals(243, namedRIVMap0.size);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(243, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot((NamedRIVMap) null, 1180.0054555631);
      assertNotNull(rIVTopicHeirarchy0);
      
      NamedRIVMap namedRIVMap0 = rIVTopicHeirarchy0.topic();
      assertNull(namedRIVMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(1);
      assertEquals(1, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 84.86);
      assertEquals(1, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      NamedRIVMap namedRIVMap1 = rIVTopicHeirarchy0.topic();
      assertEquals(1, namedRIVMap0.size);
      assertEquals(1, namedRIVMap1.size);
      assertSame(namedRIVMap0, namedRIVMap1);
      assertSame(namedRIVMap1, namedRIVMap0);
      assertNotNull(namedRIVMap1);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap1.count());
      assertEquals(1, namedRIVMap1.size());
      assertTrue(namedRIVMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-174));
      assertEquals((-174), namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals((-174), namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 2632.45601789);
      assertEquals((-174), namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals((-174), namedRIVMap0.size());
      
      NamedRIVMap namedRIVMap1 = rIVTopicHeirarchy0.topic();
      assertEquals((-174), namedRIVMap0.size);
      assertEquals((-174), namedRIVMap1.size);
      assertSame(namedRIVMap0, namedRIVMap1);
      assertSame(namedRIVMap1, namedRIVMap0);
      assertNotNull(namedRIVMap1);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals((-174), namedRIVMap0.size());
      assertTrue(namedRIVMap1.isEmpty());
      assertEquals((-174), namedRIVMap1.size());
      assertEquals(0, namedRIVMap1.count());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      ArrayRIV arrayRIV1 = namedRIVMap0.put("", arrayRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertNull(arrayRIV1);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIVMap namedRIVMap1 = rIVTopicHeirarchy0.topic();
      assertEquals(0, namedRIVMap0.size);
      assertEquals(0, namedRIVMap1.size);
      assertSame(namedRIVMap0, namedRIVMap1);
      assertSame(namedRIVMap1, namedRIVMap0);
      assertNotNull(namedRIVMap1);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      assertFalse(namedRIVMap1.isEmpty());
      assertEquals(1, namedRIVMap1.count());
      assertEquals(0, namedRIVMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-264);
      doubleArray0[1] = (double) (-264);
      doubleArray0[2] = (double) (-264);
      doubleArray0[3] = (double) (-264);
      doubleArray0[4] = (double) (-264);
      doubleArray0[5] = (double) (-264);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (-264);
      ArrayRIV arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, (-264));
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRIV0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("Q", arrayRIV0);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(namedRIV0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-264), namedRIV0);
      assertEquals((-264), namedRIVMap0.size);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(namedRIVMap0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals((-264), namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-660.20799043366));
      assertEquals((-264), namedRIVMap0.size);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals((-264), namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      
      String string0 = rIVTopicHeirarchy0.name();
      assertEquals((-264), namedRIVMap0.size);
      assertEquals("Q", string0);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals((-264), namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(243);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("H\r`0MI]]I`baSw?", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243, namedRIV0);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(243, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(243, arrayRIV0.size());
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals(243, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.prune(namedRIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(namedRIVMap0);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size());
      //  // Unstable assertion: assertEquals(0, namedRIVMap0.count());
      //  // Unstable assertion: assertTrue(namedRIVMap0.isEmpty());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(rIVTopicHeirarchy0);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size());
      //  // Unstable assertion: assertEquals(0, namedRIVMap0.count());
      //  // Unstable assertion: assertTrue(namedRIVMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(27);
      assertEquals(27, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(27, namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.makeNode(namedRIVMap0, (RIVTopicHeirarchy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot((NamedRIVMap) null, 2722.2516806);
      assertNotNull(rIVTopicHeirarchy0);
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.magnitude();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-264);
      doubleArray0[1] = (double) (-264);
      doubleArray0[2] = (double) (-264);
      doubleArray0[3] = (double) (-264);
      doubleArray0[4] = (double) (-264);
      doubleArray0[5] = (double) (-264);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (-264);
      ArrayRIV arrayRIV0 = new ArrayRIV(intArray0, doubleArray0, (-264));
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(arrayRIV0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("Q", arrayRIV0);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(namedRIV0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-264), namedRIV0);
      assertEquals((-264), namedRIVMap0.size);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(namedRIVMap0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.count());
      assertEquals((-264), namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-660.20799043366));
      assertEquals((-264), namedRIVMap0.size);
      assertEquals(8, intArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-264.0), (-264.0), (-264.0), (-264.0), (-264.0), (-264.0), 0.1, (-264.0)}, doubleArray0, 0.01);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(8, arrayRIV0.count());
      assertEquals((-264), arrayRIV0.size());
      assertEquals("Q", namedRIV0.name());
      assertEquals(698.47835327947, namedRIV0.magnitude(), 0.01);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.count());
      assertEquals((-264), namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.magnitude();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(245);
      assertEquals(245, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(245, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-574.6415032637054));
      assertEquals(245, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(245, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.graftNew((NamedRIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      DenseRIV denseRIV0 = new DenseRIV(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(denseRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(denseRIV0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(arrayRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, arrayRIV0.count());
      assertEquals(2, arrayRIV0.size());
      
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(namedRIV0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, arrayRIV0.count());
      assertEquals(2, arrayRIV0.size());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-2146618076), namedRIV0);
      assertEquals((-2146618076), namedRIVMap0.size);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(namedRIVMap0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, arrayRIV0.count());
      assertEquals(2, arrayRIV0.size());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals((-2146618076), namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-3714.92364));
      assertEquals((-2146618076), namedRIVMap0.size);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(2, denseRIV0.count());
      assertEquals(1.0, denseRIV0.saturation(), 0.01);
      assertEquals(2, denseRIV0.size());
      assertEquals(2, arrayRIV0.count());
      assertEquals(2, arrayRIV0.size());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals((-2146618076), namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.graftNew(namedRIV0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is outside the bounds of this vector.
         //
         verifyException("com.github.druidgreeneyes.rivet.core.labels.ArrayRIV", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.findRoot((RIVTopicHeirarchy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.find((RIVTopicHeirarchy) null, (ArrayRIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(444);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.count());
      assertEquals(444, arrayRIV0.size());
      
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.assignTopics((RIVTopicHeirarchy) null, arrayRIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(243, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(243, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy1 = RIVTopicHeirarchy.findRoot(rIVTopicHeirarchy0);
      assertEquals(243, namedRIVMap0.size);
      assertSame(rIVTopicHeirarchy0, rIVTopicHeirarchy1);
      assertSame(rIVTopicHeirarchy1, rIVTopicHeirarchy0);
      assertNotNull(rIVTopicHeirarchy1);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(243, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      ArrayRIV arrayRIV0 = namedRIVMap0.meanVector();
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(arrayRIV0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0, arrayRIV0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy1 = RIVTopicHeirarchy.find(rIVTopicHeirarchy0, arrayRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertSame(rIVTopicHeirarchy0, rIVTopicHeirarchy1);
      assertSame(rIVTopicHeirarchy1, rIVTopicHeirarchy0);
      assertNotNull(rIVTopicHeirarchy1);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0, arrayRIV0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(1);
      assertNotNull(arrayRIV0);
      assertEquals(1, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIV namedRIV0 = NamedRIV.make("H\r`0MI]]I`baSw?", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(1, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("H\r`0MI]]I`baSw?", namedRIV0.name());
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.prune(namedRIV0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Tried to subtract but riv is not present in topic!
         // H\r`0MI]]I`baSw? : 
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0.0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
      
      String string0 = rIVTopicHeirarchy0.name();
      assertEquals(0, namedRIVMap0.size);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRIV arrayRIV0 = new ArrayRIV(1);
      assertNotNull(arrayRIV0);
      assertEquals(1, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      assertEquals(243, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy1 = rIVTopicHeirarchy0.find(arrayRIV0);
      assertEquals(243, namedRIVMap0.size);
      assertSame(rIVTopicHeirarchy0, rIVTopicHeirarchy1);
      assertSame(rIVTopicHeirarchy1, rIVTopicHeirarchy0);
      assertNotNull(rIVTopicHeirarchy1);
      assertEquals(1, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(243, namedRIVMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      ArrayRIV arrayRIV1 = namedRIVMap0.put("7<KY T~3<E", arrayRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertNull(arrayRIV1);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(1, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      
      namedRIVMap0.put(namedRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(2, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      
      rIVTopicHeirarchy0.reGraft(namedRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(2, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals("", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      
      namedRIVMap0.put(namedRIV0);
      assertEquals(0, namedRIVMap0.size);
      assertEquals(0, namedRIVMap0.size());
      assertEquals(1, namedRIVMap0.count());
      assertFalse(namedRIVMap0.isEmpty());
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals("", namedRIV0.name());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.reGraft(namedRIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(1711);
      //  // Unstable assertion: assertEquals(1711, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(namedRIVMap0);
      //  // Unstable assertion: assertTrue(namedRIVMap0.isEmpty());
      //  // Unstable assertion: assertEquals(0, namedRIVMap0.count());
      //  // Unstable assertion: assertEquals(1711, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 1711);
      //  // Unstable assertion: assertEquals(1711, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(rIVTopicHeirarchy0);
      //  // Unstable assertion: assertTrue(namedRIVMap0.isEmpty());
      //  // Unstable assertion: assertEquals(0, namedRIVMap0.count());
      //  // Unstable assertion: assertEquals(1711, namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        RIVTopicHeirarchy.makeNode(namedRIVMap0, rIVTopicHeirarchy0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayRIV arrayRIV0 = ArrayRIV.empty(243);
      //  // Unstable assertion: assertNotNull(arrayRIV0);
      //  // Unstable assertion: assertEquals(243, arrayRIV0.size());
      //  // Unstable assertion: assertEquals(0, arrayRIV0.count());
      
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      //  // Unstable assertion: assertNotNull(namedRIV0);
      //  // Unstable assertion: assertEquals(243, arrayRIV0.size());
      //  // Unstable assertion: assertEquals(0, arrayRIV0.count());
      //  // Unstable assertion: assertEquals("", namedRIV0.name());
      //  // Unstable assertion: assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(243, namedRIV0);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(namedRIVMap0);
      //  // Unstable assertion: assertEquals(243, arrayRIV0.size());
      //  // Unstable assertion: assertEquals(0, arrayRIV0.count());
      //  // Unstable assertion: assertEquals("", namedRIV0.name());
      //  // Unstable assertion: assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      //  // Unstable assertion: assertFalse(namedRIVMap0.isEmpty());
      //  // Unstable assertion: assertEquals(1, namedRIVMap0.count());
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 243);
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size);
      //  // Unstable assertion: assertNotNull(rIVTopicHeirarchy0);
      //  // Unstable assertion: assertEquals(243, arrayRIV0.size());
      //  // Unstable assertion: assertEquals(0, arrayRIV0.count());
      //  // Unstable assertion: assertEquals("", namedRIV0.name());
      //  // Unstable assertion: assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      //  // Unstable assertion: assertFalse(namedRIVMap0.isEmpty());
      //  // Unstable assertion: assertEquals(1, namedRIVMap0.count());
      //  // Unstable assertion: assertEquals(243, namedRIVMap0.size());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.graftNew(namedRIV0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap((-2138682485));
      assertEquals((-2138682485), namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals((-2138682485), namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-2138682485));
      assertEquals((-2138682485), namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals((-2138682485), namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      
      double double0 = rIVTopicHeirarchy0.magnitude();
      assertEquals((-2138682485), namedRIVMap0.size);
      assertEquals(0.0, double0, 0.01);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals((-2138682485), namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      
      ArrayList<RIVTopicHeirarchy> arrayList0 = rIVTopicHeirarchy0.children();
      assertEquals(0, namedRIVMap0.size);
      assertFalse(arrayList0.contains(rIVTopicHeirarchy0));
      assertNotNull(arrayList0);
      assertEquals(0, namedRIVMap0.size());
      assertEquals(0, namedRIVMap0.count());
      assertTrue(namedRIVMap0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(namedRIVMap0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      assertEquals(0, namedRIVMap0.size);
      assertNotNull(rIVTopicHeirarchy0);
      assertTrue(namedRIVMap0.isEmpty());
      assertEquals(0, namedRIVMap0.count());
      assertEquals(0, namedRIVMap0.size());
      
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      assertNotNull(arrayRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      
      NamedRIV namedRIV0 = NamedRIV.make("", arrayRIV0);
      assertNotNull(namedRIV0);
      assertEquals(0, arrayRIV0.size());
      assertEquals(0, arrayRIV0.count());
      assertEquals(0.0, namedRIV0.magnitude(), 0.01);
      assertEquals("", namedRIV0.name());
      
      // Undeclared exception!
      try { 
        rIVTopicHeirarchy0.reGraft(namedRIV0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Tried to subtract but riv is not present in topic!
         //  : 
         //
         verifyException("com.github.druidgreeneyes.rivet.core.extras.topicheirarchy.RIVTopicHeirarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(245);
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, (-574.6415032637054));
      RIVTopicHeirarchy rIVTopicHeirarchy1 = rIVTopicHeirarchy0.findRoot();
      assertSame(rIVTopicHeirarchy0, rIVTopicHeirarchy1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NamedRIVMap namedRIVMap0 = new NamedRIVMap(0);
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot(namedRIVMap0, 0);
      ArrayRIV arrayRIV0 = new ArrayRIV(0);
      String[] stringArray0 = RIVTopicHeirarchy.assignTopics(rIVTopicHeirarchy0, arrayRIV0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RIVTopicHeirarchy rIVTopicHeirarchy0 = RIVTopicHeirarchy.makeRoot((NamedRIVMap) null, 444);
      RIVTopicHeirarchy rIVTopicHeirarchy1 = rIVTopicHeirarchy0.parent();
      assertNull(rIVTopicHeirarchy1);
  }
}
