/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 10:39:41 GMT 2022
 */

package com.github.druidgreeneyes.rivet.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.druidgreeneyes.rivet.core.util.Triple;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Triple_ESTest extends Triple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(1793);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer0, integer1);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapRight(function0);
      assertFalse(triple1.equals((Object)triple0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer0);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapRight(function0);
      assertNotSame(triple0, triple1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer1);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapCenter(function0);
      assertFalse(triple1.equals((Object)triple0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer0);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapCenter(function0);
      assertNotSame(triple0, triple1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer1);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapLeft(function0);
      assertFalse(triple1.equals((Object)triple0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer0);
      Function<Integer, Integer> function0 = Function.identity();
      Triple<Integer, Integer, Integer> triple1 = triple0.mapLeft(function0);
      assertNotSame(triple0, triple1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer0);
      Integer integer2 = triple0.center();
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(1793);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer0, integer1);
      Integer integer2 = triple0.right();
      assertEquals(1793, (int)integer2);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(460);
      Integer integer1 = new Integer(460);
      Triple<Integer, Integer, Integer> triple0 = Triple.make(integer0, integer1, integer1);
      Integer integer2 = triple0.left();
      assertEquals(460, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        triple0.mapLeft((Function<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.util.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        triple0.mapCenter((Function<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.util.Triple", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = triple0.center();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = triple0.right();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      Integer integer0 = triple0.left();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triple<Integer, Integer, Integer> triple0 = Triple.make((Integer) null, (Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        triple0.mapRight((Function<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.druidgreeneyes.rivet.core.util.Triple", e);
      }
  }
}
