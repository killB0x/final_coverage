/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 22:14:49 GMT 2022
 */

package smartrics.rest.test.fitnesse.fixture;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import smartrics.rest.test.fitnesse.fixture.Resource;
import smartrics.rest.test.fitnesse.fixture.Resources;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Resources_ESTest extends Resources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      int int0 = resources0.size("smartrics.rest.test.fitnesse.fixture.Resource");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      Resource resource0 = new Resource("", (String) null);
      Resource resource1 = resources0.remove((String) null, "");
      assertNull(resource1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Resources resources0 = new Resources();
      Resource resource0 = new Resource("");
      resource0.setId("");
      resource0.setDeleted(true);
      resources0.add("", resource0);
      Resource resource1 = resources0.get("", "");
      assertTrue(resource1.isDeleted());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      List<String> list0 = resources0.contexts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Resources resources0 = new Resources();
      // Undeclared exception!
      try { 
        resources0.remove("", (Resource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smartrics.rest.test.fitnesse.fixture.Resources", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Resources resources0 = new Resources();
      // Undeclared exception!
      try { 
        resources0.add((String) null, (Resource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("smartrics.rest.test.fitnesse.fixture.Resources", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      Collection<Resource> collection0 = resources0.asCollection((String) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Resources resources0 = new Resources();
      resources0.remove("Resources:[\n]\n", "Resources:[\n]\n");
      resources0.clear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Resources resources0 = new Resources();
      Resource resource0 = new Resource("");
      resources0.add("", resource0);
      assertEquals("0", resource0.getId());
      
      String string0 = resources0.toString();
      assertEquals("Resources:[\n Context():[\n\n ]\n]\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Resources resources0 = new Resources();
      Resource resource0 = new Resource("");
      resources0.add("", resource0);
      // Undeclared exception!
      try { 
        resources0.reset();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("smartrics.rest.test.fitnesse.fixture.Resources", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Resources resources0 = new Resources();
      int int0 = resources0.size(" ]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Resources resources0 = new Resources();
      Resource resource0 = resources0.get("       <street>\n", "Ji)oJxG\"OA:MU }");
      assertNull(resource0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Resources resources0 = Resources.getInstance();
      Collection<Resource> collection0 = resources0.asCollection("I/iF^sHu;mbt.");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Resources resources0 = new Resources();
      List<String> list0 = resources0.contexts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Resources resources0 = new Resources();
      Resource resource0 = new Resource("Resources:[\n]\n");
      resources0.remove("Resources:[\n]\n", resource0);
      assertNull(resource0.getId());
  }
}
