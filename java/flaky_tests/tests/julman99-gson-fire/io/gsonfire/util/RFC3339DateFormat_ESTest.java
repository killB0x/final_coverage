/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 10:25:56 GMT 2022
 */

package io.gsonfire.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.gsonfire.util.RFC3339DateFormat;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RFC3339DateFormat_ESTest extends RFC3339DateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.parse("eyNLh/~2'yz", (ParsePosition) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"eyNLh/~2'y-0000\"
         //
         verifyException("io.gsonfire.util.RFC3339DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-18), "LynZ7sI.J-!*o0g");
      MockDate mockDate0 = new MockDate();
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(simpleTimeZone0);
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-14T20:21:21.32+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2090, ":W]if@ ?pD", 812, 0, 0, 0, 2090, 0, 793, (-41));
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(simpleTimeZone0, true, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-18));
      rFC3339DateFormat0.parse("1899-12-29T11:56:00Z", parsePosition0);
      assertEquals("java.text.ParsePosition[index=24,errorIndex=-1]", parsePosition0.toString());
      assertEquals(24, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(false, false);
      MockDate mockDate0 = new MockDate((-1184), 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      StringBuffer stringBuffer1 = rFC3339DateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(10, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.parse("jgj907", (ParsePosition) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.parse("xm.;/}wzEfM t", (ParsePosition) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.format((Date) null, (StringBuffer) null, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.parse("2014-02-14T20:21:21.32Z", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.gsonfire.util.RFC3339DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      // Undeclared exception!
      try { 
        rFC3339DateFormat0.parse(">X1 79T |+tHV7Vnc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \">X1 79T |+TV7Vnc-0000\"
         //
         verifyException("io.gsonfire.util.RFC3339DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      Date date0 = rFC3339DateFormat0.parse("0-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat();
      MockDate mockDate0 = new MockDate(0, 0, (-4), 60, (-4));
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("1899-12-29T11:56:00Z", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(true, true);
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(false);
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-8323580), "LynZ7sI.J-!*o0g");
      MockDate mockDate0 = new MockDate();
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(simpleTimeZone0);
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-14T18:02:37.32-02:18", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(timeZone0);
      String string0 = rFC3339DateFormat0.format((Date) mockDate0);
      assertEquals("2014-02-15T14:21:21.32+18:00", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      RFC3339DateFormat rFC3339DateFormat0 = new RFC3339DateFormat(timeZone0, true);
  }
}
