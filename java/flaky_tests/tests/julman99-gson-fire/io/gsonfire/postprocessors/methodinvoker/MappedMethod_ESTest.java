/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 10:37:19 GMT 2022
 */

package io.gsonfire.postprocessors.methodinvoker;

import org.junit.Test;
import static org.junit.Assert.*;
import io.gsonfire.annotations.ExposeMethodResult;
import io.gsonfire.postprocessors.methodinvoker.MappedMethod;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappedMethod_ESTest extends MappedMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExposeMethodResult.ConflictResolutionStrategy exposeMethodResult_ConflictResolutionStrategy0 = ExposeMethodResult.ConflictResolutionStrategy.OVERWRITE;
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, (String) null, exposeMethodResult_ConflictResolutionStrategy0);
      String string0 = mappedMethod0.getSerializedName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExposeMethodResult.ConflictResolutionStrategy exposeMethodResult_ConflictResolutionStrategy0 = ExposeMethodResult.ConflictResolutionStrategy.OVERWRITE;
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, "G:ldW*t*", exposeMethodResult_ConflictResolutionStrategy0);
      String string0 = mappedMethod0.getSerializedName();
      assertEquals("G:ldW*t*", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExposeMethodResult.ConflictResolutionStrategy exposeMethodResult_ConflictResolutionStrategy0 = ExposeMethodResult.ConflictResolutionStrategy.SKIP;
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, "", exposeMethodResult_ConflictResolutionStrategy0);
      ExposeMethodResult.ConflictResolutionStrategy exposeMethodResult_ConflictResolutionStrategy1 = mappedMethod0.getConflictResolutionStrategy();
      assertSame(exposeMethodResult_ConflictResolutionStrategy0, exposeMethodResult_ConflictResolutionStrategy1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExposeMethodResult.ConflictResolutionStrategy exposeMethodResult_ConflictResolutionStrategy0 = ExposeMethodResult.ConflictResolutionStrategy.SKIP;
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, "", exposeMethodResult_ConflictResolutionStrategy0);
      String string0 = mappedMethod0.getSerializedName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, "", (ExposeMethodResult.ConflictResolutionStrategy) null);
      mappedMethod0.getConflictResolutionStrategy();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MappedMethod mappedMethod0 = new MappedMethod((Method) null, "", (ExposeMethodResult.ConflictResolutionStrategy) null);
      Method method0 = mappedMethod0.getMethod();
      assertNull(method0);
  }
}
