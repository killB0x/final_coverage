/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:29:42 GMT 2022
 */

package com.aegisql.util.function;

import org.junit.Test;
import static org.junit.Assert.*;
import com.aegisql.util.function.Result;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Result_ESTest extends Result_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Result<Object> result0 = new Result<Object>((Throwable) null);
      Object object0 = result0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Result<Object> result0 = new Result<Object>((Throwable) null);
      Throwable throwable0 = result0.error();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      Result<Result<Object>> result1 = new Result<Result<Object>>(result0, mockThrowable0);
      boolean boolean0 = result1.hasError();
      assertTrue(boolean0);
      assertTrue(result1.isPresent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Result<Object> result0 = new Result<Object>((Object) null);
      boolean boolean0 = result0.hasError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Result<Object> result0 = new Result<Object>((Object) null);
      String string0 = result0.toString();
      assertEquals("Result [val=null; error=null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      String string0 = result0.toString();
      assertEquals("Result [val=null; error=null]", string0);
      assertTrue(result0.hasError());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1204);
      Result<Integer> result0 = new Result<Integer>(integer0, (Throwable) null);
      Result<Object> result1 = new Result<Object>((Throwable) null);
      boolean boolean0 = result0.equals(result1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(826);
      MockThrowable mockThrowable0 = new MockThrowable("");
      Result<Object> result0 = new Result<Object>(integer0, mockThrowable0);
      Result<Result<Object>> result1 = new Result<Result<Object>>(result0);
      Result<Object> result2 = new Result<Object>((Throwable) null);
      boolean boolean0 = result2.equals(result1);
      assertFalse(boolean0);
      assertTrue(result0.hasError());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Result<Object> result0 = new Result<Object>(integer0);
      MockThrowable mockThrowable0 = new MockThrowable(".#?9,7vkoS$)lbq,*>");
      Result<Integer> result1 = new Result<Integer>(integer0, mockThrowable0);
      boolean boolean0 = result1.equals(result0);
      assertTrue(result1.hasError());
      assertTrue(result1.isPresent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Result<Integer> result0 = new Result<Integer>((Throwable) mockThrowable0);
      Result<Result<Object>> result1 = new Result<Result<Object>>((Throwable) mockThrowable0);
      boolean boolean0 = result0.equals(result1);
      assertTrue(boolean0);
      assertTrue(result1.hasError());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      boolean boolean0 = result0.equals((Object) null);
      assertTrue(result0.hasError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      Result<Object> result1 = new Result<Object>(result0, mockThrowable0);
      Result result2 = (Result)result1.res;
      boolean boolean0 = result0.equals(result2);
      assertTrue(result2.hasError());
      assertTrue(boolean0);
      assertFalse(result1.equals((Object)result0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      boolean boolean0 = result0.equals(mockThrowable0);
      assertTrue(result0.hasError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Result<Object> result0 = new Result<Object>(object0);
      result0.hashCode();
      assertFalse(result0.hasError());
      assertTrue(result0.isPresent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      Result<Result<Object>> result1 = new Result<Result<Object>>(result0, mockThrowable0);
      boolean boolean0 = result1.isPresent();
      assertTrue(result1.hasError());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      boolean boolean0 = result0.isPresent();
      assertFalse(boolean0);
      assertTrue(result0.hasError());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Result<Integer> result0 = new Result<Integer>((Throwable) mockThrowable0);
      Result<Result<Integer>> result1 = new Result<Result<Integer>>(result0);
      Result<Integer> result2 = result1.get();
      assertTrue(result2.hasError());
      assertNotNull(result2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Result<Object> result0 = new Result<Object>((Object) null);
      result0.hashCode();
      assertFalse(result0.hasError());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Result<Result<Object>> result0 = new Result<Result<Object>>((Throwable) mockThrowable0);
      Throwable throwable0 = result0.error();
      assertNotNull(throwable0);
      assertTrue(result0.hasError());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Result<Object> result0 = new Result<Object>((Throwable) mockThrowable0);
      result0.hashCode();
      assertTrue(result0.hasError());
  }
}
