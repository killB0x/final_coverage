/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:34:44 GMT 2022
 */

package com.aegisql.util.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import com.aegisql.util.function.ExceptionBlock;
import com.aegisql.util.function.ExceptionHandler;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExceptionBlock_ESTest extends ExceptionBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionBlock<Throwable> exceptionBlock0 = (ExceptionBlock<Throwable>) mock(ExceptionBlock.class, CALLS_REAL_METHODS);
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, exceptionBlock0);
      ExceptionHandler<Throwable> exceptionHandler1 = new ExceptionHandler<Throwable>(class0, exceptionHandler0);
      ExceptionBlock<Throwable> exceptionBlock1 = exceptionHandler0.compose(exceptionHandler1);
      assertFalse(exceptionBlock1.equals((Object)exceptionBlock0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionBlock<Throwable> exceptionBlock0 = (ExceptionBlock<Throwable>) mock(ExceptionBlock.class, CALLS_REAL_METHODS);
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, exceptionBlock0);
      ExceptionBlock<Throwable> exceptionBlock1 = exceptionHandler0.printStackTrace();
      ExceptionBlock<Throwable> exceptionBlock2 = exceptionHandler0.identity(exceptionBlock1);
      assertSame(exceptionBlock2, exceptionBlock1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionBlock<Throwable> exceptionBlock0 = (ExceptionBlock<Throwable>) mock(ExceptionBlock.class, CALLS_REAL_METHODS);
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, exceptionBlock0);
      ExceptionBlock<Throwable> exceptionBlock1 = exceptionHandler0.andThen(exceptionHandler0);
      assertFalse(exceptionBlock1.equals((Object)exceptionBlock0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionBlock<Throwable> exceptionBlock0 = (ExceptionBlock<Throwable>) mock(ExceptionBlock.class, CALLS_REAL_METHODS);
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, exceptionBlock0);
      ExceptionBlock<Throwable> exceptionBlock1 = exceptionHandler0.printErrorMessage();
      assertFalse(exceptionBlock1.equals((Object)exceptionBlock0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      // Undeclared exception!
      try { 
        exceptionHandler0.andThen((ExceptionBlock<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.andDie();
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Object[] objectArray0 = new Object[4];
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.logWarn(exceptionHandler0.log, "", objectArray0);
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionBlock<Throwable> exceptionBlock0 = (ExceptionBlock<Throwable>) mock(ExceptionBlock.class, CALLS_REAL_METHODS);
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, exceptionBlock0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E1e.j,J-h_YOHR},OB");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ExceptionBlock<Throwable> exceptionBlock1 = exceptionHandler0.printStackTrace((PrintStream) mockPrintStream0);
      assertFalse(exceptionBlock1.equals((Object)exceptionBlock0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.andDieAs(class0, "tv.2ERk$pDw");
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Object[] objectArray0 = new Object[1];
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.logTrace(exceptionHandler0.log, "", objectArray0);
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Logger logger0 = (Logger)ExceptionHandler.log;
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.logError(logger0, "`q*==.I64)%CTvA", (Object[]) null);
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Logger logger0 = (Logger)ExceptionHandler.log;
      Object[] objectArray0 = new Object[0];
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.logDebug(logger0, "0lw!QTvt3%{?(An8", objectArray0);
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Logger logger0 = (Logger)ExceptionHandler.log;
      Object[] objectArray0 = new Object[0];
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.logInfo(logger0, "", objectArray0);
      assertNotNull(exceptionBlock0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      // Undeclared exception!
      try { 
        exceptionHandler0.compose((ExceptionBlock<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      // Undeclared exception!
      try { 
        exceptionHandler0.identity((ExceptionBlock<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
