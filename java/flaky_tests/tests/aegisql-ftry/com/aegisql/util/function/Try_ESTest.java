/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:33:18 GMT 2022
 */

package com.aegisql.util.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aegisql.util.function.CodeBlock;
import com.aegisql.util.function.Eval;
import com.aegisql.util.function.ExceptionBlock;
import com.aegisql.util.function.ExceptionHandler;
import com.aegisql.util.function.StatusSupplier;
import com.aegisql.util.function.ThrowingFunction;
import com.aegisql.util.function.Try;
import java.io.Closeable;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Try_ESTest extends Try_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Class<Throwable>[] classArray0 = (Class<Throwable>[]) Array.newInstance(Class.class, 0);
      Try try1 = try0.orCatchOneOf(exceptionHandler0, class0, classArray0);
      Set<Class<? extends Throwable>> set0 = try1.getRegisteredErrorTypes();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      Eval<Throwable> eval0 = try0.evaluator(class0);
      assertTrue(eval0.eval());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      StatusSupplier statusSupplier0 = try0.wrappedEvaluator();
      assertNotNull(statusSupplier0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      StringReader stringReader0 = new StringReader("dGUTr{OS8.A8F");
      Closeable[] closeableArray0 = new Closeable[1];
      Try try1 = try0.withFinal((Closeable) stringReader0, closeableArray0);
      assertSame(try1, try0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      CodeBlock codeBlock1 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try1 = try0.withFinal(codeBlock1);
      assertSame(try0, try1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        try0.orCatch(class0, (ExceptionBlock<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Try try0 = null;
      try {
        try0 = new Try((CodeBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Try try1 = try0.orCatch(class0, (ExceptionBlock<Throwable>) exceptionHandler0);
      assertSame(try1, try0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Class<Throwable>[] classArray0 = (Class<Throwable>[]) Array.newInstance(Class.class, 0);
      Try try1 = try0.orCatchOneOf(exceptionHandler0, class0, classArray0);
      // Undeclared exception!
      try { 
        try1.orCatch(class0, (ExceptionBlock<Throwable>) exceptionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class already registered: java.lang.Throwable
         //
         verifyException("com.aegisql.util.function.ExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThrowingFunction<CodeBlock, ThrowingFunction<ExceptionBlock, ThrowingFunction<CodeBlock, Eval<?>, Throwable>, Throwable>, Throwable> throwingFunction0 = Try.evaluatorBuilder();
      assertNotNull(throwingFunction0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Class<Throwable>[] classArray0 = (Class<Throwable>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        try0.orCatchOneOf(exceptionHandler0, class0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Try try1 = try0.orCatchOneOf(exceptionHandler0, class0, (Class<? extends Throwable>[]) null);
      assertSame(try0, try1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      ExceptionBlock<Throwable> exceptionBlock0 = exceptionHandler0.printStackTrace();
      Try try1 = try0.orCatch(class0, exceptionBlock0);
      assertSame(try1, try0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Class<Throwable>[] classArray0 = (Class<Throwable>[]) Array.newInstance(Class.class, 0);
      try0.orCatchOneOf(exceptionHandler0, class0, classArray0);
      // Undeclared exception!
      try { 
        try0.orCatchOneOf(exceptionHandler0, class0, classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class already registered: java.lang.Throwable
         //
         verifyException("com.aegisql.util.function.ExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      // Undeclared exception!
      try { 
        try0.withFinal((CodeBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Closeable[] closeableArray0 = new Closeable[0];
      // Undeclared exception!
      try { 
        try0.withFinal((Closeable) null, closeableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      Eval<RuntimeException> eval0 = try0.runtimeEvaluator();
      assertTrue(eval0.eval());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodeBlock codeBlock0 = mock(CodeBlock.class, new ViolatedAssumptionAnswer());
      Try try0 = new Try(codeBlock0);
      // Undeclared exception!
      try { 
        try0.getRegisteredErrorTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aegisql.util.function.Try", e);
      }
  }
}
