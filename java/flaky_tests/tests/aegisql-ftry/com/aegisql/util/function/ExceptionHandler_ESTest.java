/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:31:38 GMT 2022
 */

package com.aegisql.util.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aegisql.util.function.ExceptionBlock;
import com.aegisql.util.function.ExceptionHandler;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExceptionHandler_ESTest extends ExceptionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>((Class<Throwable>) null, (ExceptionBlock<Throwable>) null);
      Class<Throwable> class0 = exceptionHandler0.getExceptionClass();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionHandler.toString((Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      // Undeclared exception!
      try { 
        exceptionHandler0.orCatch(class0, (ExceptionBlock<Throwable>) exceptionHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class already registered: java.lang.Throwable
         //
         verifyException("com.aegisql.util.function.ExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>((Class<Throwable>) null, (ExceptionBlock<Throwable>) null);
      // Undeclared exception!
      try { 
        exceptionHandler0.orCatch(class0, (ExceptionBlock<Throwable>) exceptionHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aegisql.util.function.ExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Function<Class<Throwable>, Function<Throwable, Throwable>> function0 = ExceptionHandler.wrapThrowable();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Class<Throwable> class1 = exceptionHandler0.getExceptionClass();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      try { 
        exceptionHandler0.accept((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aegisql.util.function.ExceptionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("Mr{2FAr4w$");
      String string0 = ExceptionHandler.toString((Throwable) mockThrowable0);
      //  // Unstable assertion: assertEquals("jdk.internal.reflect.GeneratedConstructorAccessor41.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Function<Class<Throwable>, Function<String, Function<Throwable, Throwable>>> function0 = ExceptionHandler.wrapCommentedThrowable();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      ExceptionHandler<Throwable> exceptionHandler0 = new ExceptionHandler<Throwable>(class0, (ExceptionBlock<Throwable>) null);
      Set<Class<? extends Throwable>> set0 = exceptionHandler0.getRegisteredExceptionClasses();
      assertEquals(1, set0.size());
  }
}
