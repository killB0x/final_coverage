/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 13:44:08 GMT 2022
 */

package lzma.sdk.lzma;

import org.junit.Test;
import static org.junit.Assert.*;
import lzma.sdk.lzma.Base;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base_ESTest extends Base_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Base.getLenToPosState(6);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Base.stateIsCharState(7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Base.stateUpdateShortRep(16);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Base.stateUpdateRep(7);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Base.stateUpdateMatch(7);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Base.stateUpdateChar(10);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Base.stateUpdateChar(4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Base.getLenToPosState((-1));
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Base.getLenToPosState(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Base.getLenToPosState(7);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Base.stateIsCharState(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Base.stateIsCharState(11);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = Base.stateUpdateShortRep((-1512));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = Base.stateUpdateShortRep(7);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = Base.stateUpdateRep(0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = Base.stateUpdateRep(2410);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Base.stateUpdateMatch(0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = Base.stateUpdateMatch(15);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Base.stateUpdateChar(8);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = Base.stateUpdateChar((-2743));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = Base.stateUpdateChar(2410);
      assertEquals(2404, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base base0 = new Base();
      assertEquals(8, Base.kNumHighLenBits);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Base.stateInit();
      assertEquals(0, int0);
  }
}
