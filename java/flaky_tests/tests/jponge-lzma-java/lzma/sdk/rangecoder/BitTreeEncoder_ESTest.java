/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 13:45:12 GMT 2022
 */

package lzma.sdk.rangecoder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import lzma.sdk.rangecoder.BitTreeEncoder;
import lzma.sdk.rangecoder.Encoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitTreeEncoder_ESTest extends BitTreeEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Encoder encoder0 = new Encoder();
      BitTreeEncoder.reverseEncode(shortArray0, (int) (short) (-1), encoder0, 0, 2616);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitTreeEncoder.reverseGetPrice((short[]) null, (int) (short) (-636), 1459, (-3985));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lzma.sdk.rangecoder.BitTreeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder((-2840));
      // Undeclared exception!
      try { 
        bitTreeEncoder0.reverseGetPrice((-2840));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encoder encoder0 = new Encoder();
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder((-81));
      bitTreeEncoder0.reverseEncode(encoder0, 6);
      assertEquals(6, Encoder.kNumBitPriceShiftBits);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encoder encoder0 = new Encoder();
      encoder0.init();
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(260);
      // Undeclared exception!
      try { 
        bitTreeEncoder0.reverseEncode(encoder0, (int) (short) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encoder encoder0 = new Encoder();
      encoder0.init();
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder((-81));
      // Undeclared exception!
      try { 
        bitTreeEncoder0.encode(encoder0, (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      short[] shortArray0 = new short[15];
      shortArray0[2] = (short) (-1382);
      int int0 = BitTreeEncoder.reverseGetPrice(shortArray0, (int) (short)1, 1, (-82));
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(6);
      bitTreeEncoder0.init();
      int int0 = bitTreeEncoder0.reverseGetPrice(424);
      assertEquals(384, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BitTreeEncoder.reverseGetPrice((short[]) null, (-1), (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lzma.sdk.rangecoder.BitTreeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        BitTreeEncoder.reverseGetPrice(shortArray0, (-1), (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("lzma.sdk.rangecoder.BitTreeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[10];
      Encoder encoder0 = new Encoder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      encoder0.setStream(byteArrayOutputStream0);
      // Undeclared exception!
      BitTreeEncoder.reverseEncode(shortArray0, 6, encoder0, 6, 6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encoder encoder0 = new Encoder();
      encoder0.init();
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (-2243);
      // Undeclared exception!
      try { 
        BitTreeEncoder.reverseEncode(shortArray0, (-1), encoder0, 6, (int) (short) (-2243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[28];
      Encoder encoder0 = new Encoder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      encoder0.setStream(pipedOutputStream0);
      try { 
        BitTreeEncoder.reverseEncode(shortArray0, 1, encoder0, 2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(4);
      Encoder encoder0 = new Encoder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("lzma.sdk.rangecoder.BitTreeEncoder");
      encoder0.setStream(mockPrintStream0);
      // Undeclared exception!
      bitTreeEncoder0.reverseEncode(encoder0, 138);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(1197);
      Encoder encoder0 = new Encoder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      encoder0.setStream(pipedOutputStream0);
      try { 
        bitTreeEncoder0.reverseEncode(encoder0, (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder((-13));
      // Undeclared exception!
      bitTreeEncoder0.init();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder((-2782));
      // Undeclared exception!
      try { 
        bitTreeEncoder0.getPrice((-2782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 4
         //
         verifyException("lzma.sdk.rangecoder.BitTreeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(80);
      Encoder encoder0 = new Encoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lzma.sdk.rangecoder.BitTreeEncoder");
      encoder0.setStream(mockFileOutputStream0);
      // Undeclared exception!
      bitTreeEncoder0.encode(encoder0, 6);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(Integer.MIN_VALUE);
      Encoder encoder0 = new Encoder();
      // Undeclared exception!
      try { 
        bitTreeEncoder0.encode(encoder0, Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(80);
      Encoder encoder0 = new Encoder();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("lzma.sdk.rangecoder.BitTreeEncoder");
      encoder0.setStream(mockFileOutputStream0);
      try { 
        bitTreeEncoder0.encode(encoder0, 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = null;
      try {
        bitTreeEncoder0 = new BitTreeEncoder((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("lzma.sdk.rangecoder.BitTreeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short[] shortArray0 = new short[28];
      Encoder encoder0 = new Encoder();
      // Undeclared exception!
      try { 
        BitTreeEncoder.reverseEncode(shortArray0, 1, encoder0, 2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encoder encoder0 = new Encoder();
      short[] shortArray0 = new short[5];
      BitTreeEncoder.reverseEncode(shortArray0, (int) (short)419, encoder0, (-1), (-1845));
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[28];
      int int0 = BitTreeEncoder.reverseGetPrice(shortArray0, 1, 1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(6);
      int int0 = bitTreeEncoder0.reverseGetPrice(424);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(6);
      int int0 = bitTreeEncoder0.getPrice(6);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(4);
      Encoder encoder0 = new Encoder();
      // Undeclared exception!
      try { 
        bitTreeEncoder0.reverseEncode(encoder0, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(0);
      Encoder encoder0 = new Encoder();
      bitTreeEncoder0.reverseEncode(encoder0, 1);
      assertEquals(6, Encoder.kNumBitPriceShiftBits);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(6);
      bitTreeEncoder0.init();
      int int0 = bitTreeEncoder0.getPrice(6);
      assertEquals(384, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BitTreeEncoder bitTreeEncoder0 = new BitTreeEncoder(0);
      Encoder encoder0 = new Encoder();
      bitTreeEncoder0.encode(encoder0, 0);
      assertEquals(4L, encoder0.getProcessedSizeAdd());
  }
}
