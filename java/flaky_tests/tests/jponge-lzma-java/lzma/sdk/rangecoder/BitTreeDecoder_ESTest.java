/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 13:47:58 GMT 2022
 */

package lzma.sdk.rangecoder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import lzma.sdk.rangecoder.BitTreeDecoder;
import lzma.sdk.rangecoder.Decoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitTreeDecoder_ESTest extends BitTreeDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, (byte) (-100));
      decoder0.setStream(byteArrayInputStream0);
      short[] shortArray0 = new short[9];
      int int0 = BitTreeDecoder.reverseDecode(shortArray0, 0, decoder0, (int) (short)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Decoder decoder0 = new Decoder();
      int int0 = BitTreeDecoder.reverseDecode(shortArray0, (int) (short) (-1), decoder0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 11);
      decoder0.setStream(byteArrayInputStream0);
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(1650);
      // Undeclared exception!
      try { 
        bitTreeDecoder0.reverseDecode(decoder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder((-1788));
      Decoder decoder0 = new Decoder();
      int int0 = bitTreeDecoder0.reverseDecode(decoder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(0);
      int int0 = bitTreeDecoder0.reverseDecode(decoder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(0);
      int int0 = bitTreeDecoder0.decode(decoder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      // Undeclared exception!
      try { 
        BitTreeDecoder.reverseDecode((short[]) null, 1375, decoder0, 1375);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lzma.sdk.rangecoder.Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      short[] shortArray0 = new short[9];
      // Undeclared exception!
      try { 
        BitTreeDecoder.reverseDecode(shortArray0, (int) (short) (-1538), decoder0, 1454);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      decoder0.setStream(mockFileInputStream0);
      short[] shortArray0 = new short[2];
      try { 
        BitTreeDecoder.reverseDecode(shortArray0, 0, decoder0, 1024);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(1671);
      // Undeclared exception!
      try { 
        bitTreeDecoder0.reverseDecode(decoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lzma.sdk.rangecoder.Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(58);
      decoder0.setStream(pipedInputStream0);
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(843);
      try { 
        bitTreeDecoder0.reverseDecode(decoder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(1902);
      // Undeclared exception!
      bitTreeDecoder0.init();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(2694);
      // Undeclared exception!
      try { 
        bitTreeDecoder0.decode(decoder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lzma.sdk.rangecoder.Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder((-1248));
      Decoder decoder0 = new Decoder();
      // Undeclared exception!
      try { 
        bitTreeDecoder0.decode(decoder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("lzma.sdk.rangecoder.Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      decoder0.setStream(pipedInputStream0);
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(5);
      try { 
        bitTreeDecoder0.decode(decoder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitTreeDecoder bitTreeDecoder0 = null;
      try {
        bitTreeDecoder0 = new BitTreeDecoder((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("lzma.sdk.rangecoder.BitTreeDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, (byte) (-100));
      decoder0.setStream(byteArrayInputStream0);
      short[] shortArray0 = new short[9];
      int int0 = BitTreeDecoder.reverseDecode(shortArray0, (int) (byte)1, decoder0, 3);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, (byte) (-100));
      decoder0.setStream(byteArrayInputStream0);
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(2);
      int int0 = bitTreeDecoder0.reverseDecode(decoder0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Decoder decoder0 = new Decoder();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, (byte) (-100));
      decoder0.setStream(byteArrayInputStream0);
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(2);
      int int0 = bitTreeDecoder0.decode(decoder0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitTreeDecoder bitTreeDecoder0 = new BitTreeDecoder(0);
      bitTreeDecoder0.init();
  }
}
