/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:14:21 GMT 2022
 */

package com.github.chhsiao90.nitmproxy.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.chhsiao90.nitmproxy.http.HttpUrl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("&bkBHqS&ol/<x(}iu", "&bkBHqS&ol/<x(}iu", (-36), "&bkBHqS&ol/<x(}iu");
      httpUrl0.getScheme();
      assertEquals((-36), httpUrl0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("", "", (-2150), "");
      httpUrl0.getScheme();
      assertEquals((-2150), httpUrl0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("\"+", "\"+", 0, "\"+");
      int int0 = httpUrl0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("", "", 4, "");
      int int0 = httpUrl0.getPort();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl((String) null, "[E^HOT{5jtVPQoF5n2", 1398, "[E^HOT{5jtVPQoF5n2");
      String string0 = httpUrl0.getPath();
      assertEquals(1398, httpUrl0.getPort());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("", "", (-2150), "");
      httpUrl0.getPath();
      assertEquals((-2150), httpUrl0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("YSNR+0$Odl", "YSNR+0$Odl", (-1333), "YSNR+0$Odl");
      httpUrl0.getHost();
      assertEquals((-1333), httpUrl0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("http", "", 1166, "<W{%LW[!I9`Ec9!d,7S");
      String string0 = httpUrl0.getHost();
      assertEquals("<W{%LW[!I9`Ec9!d,7S", httpUrl0.getPath());
      assertEquals(1166, httpUrl0.getPort());
      assertEquals("", string0);
      assertEquals("http", httpUrl0.getScheme());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = HttpUrl.scheme(true);
      assertEquals("https", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = HttpUrl.scheme(false);
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.resolve(",F:mZf'0^J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal path: ,F:mZf'0^J
         //
         verifyException("com.github.chhsiao90.nitmproxy.http.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("r;Kjk/n5", (String) null, 3, "!");
      String string0 = httpUrl0.getHost();
      assertEquals("!", httpUrl0.getPath());
      assertEquals(3, httpUrl0.getPort());
      assertNull(string0);
      assertEquals("r;Kjk/n5", httpUrl0.getScheme());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl((String) null, (String) null, 4531, (String) null);
      httpUrl0.getScheme();
      assertEquals(4531, httpUrl0.getPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl((String) null, (String) null, 4531, (String) null);
      String string0 = httpUrl0.toString();
      assertEquals("null://null:4531null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl("https", "https", (-1), "https");
      int int0 = httpUrl0.getPort();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpUrl httpUrl0 = new HttpUrl((String) null, (String) null, 4531, (String) null);
      httpUrl0.getPath();
      assertEquals(4531, httpUrl0.getPort());
  }
}
