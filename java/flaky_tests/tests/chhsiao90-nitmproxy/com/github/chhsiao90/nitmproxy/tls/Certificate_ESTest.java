/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:19:14 GMT 2022
 */

package com.github.chhsiao90.nitmproxy.tls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.github.chhsiao90.nitmproxy.tls.Certificate;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Certificate_ESTest extends Certificate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      X509Certificate[] x509CertificateArray0 = new X509Certificate[5];
      Certificate certificate0 = new Certificate((KeyPair) null, x509CertificateArray0);
      KeyPair keyPair0 = certificate0.getKeyPair();
      assertNull(keyPair0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PublicKey publicKey0 = mock(PublicKey.class, new ViolatedAssumptionAnswer());
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      KeyPair keyPair0 = new KeyPair(publicKey0, privateKey0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      Certificate certificate0 = new Certificate(keyPair0, x509CertificateArray0);
      X509Certificate[] x509CertificateArray1 = certificate0.getChain();
      assertEquals(1, x509CertificateArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      KeyPair keyPair0 = new KeyPair((PublicKey) null, privateKey0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      Certificate certificate0 = new Certificate(keyPair0, x509CertificateArray0);
      X509Certificate[] x509CertificateArray1 = certificate0.getChain();
      assertEquals(0, x509CertificateArray1.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PublicKey publicKey0 = mock(PublicKey.class, new ViolatedAssumptionAnswer());
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      KeyPair keyPair0 = new KeyPair(publicKey0, privateKey0);
      Certificate certificate0 = new Certificate(keyPair0, (X509Certificate[]) null);
      X509Certificate[] x509CertificateArray0 = certificate0.getChain();
      assertNull(x509CertificateArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PublicKey publicKey0 = mock(PublicKey.class, new ViolatedAssumptionAnswer());
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      KeyPair keyPair0 = new KeyPair(publicKey0, privateKey0);
      Certificate certificate0 = new Certificate(keyPair0, (X509Certificate[]) null);
      KeyPair keyPair1 = certificate0.getKeyPair();
      assertSame(keyPair1, keyPair0);
  }
}
