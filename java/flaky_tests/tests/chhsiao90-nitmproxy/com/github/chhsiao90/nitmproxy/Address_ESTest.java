/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 31 20:11:13 GMT 2022
 */

package com.github.chhsiao90.nitmproxy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.chhsiao90.nitmproxy.Address;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Address_ESTest extends Address_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Address address0 = Address.address("", 353);
      Address address1 = new Address("w]iC251tenS0D&M@`", 0);
      boolean boolean0 = address0.equals(address1);
      assertEquals(353, address0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Address address0 = Address.resolve("w:1867", 353);
      assertEquals(1867, address0.getPort());
      assertEquals("w", address0.getHost());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Address address0 = Address.resolve("FV:0", 0);
      assertEquals(0, address0.getPort());
      assertEquals("FV", address0.getHost());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Address address0 = Address.resolve("AI:0");
      assertEquals("AI", address0.getHost());
      assertEquals(0, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Address address0 = Address.address("Jrf9", 0);
      int int0 = address0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Address address0 = Address.resolve("com.github.chhsiao90.nitmproxy.exception.NitmProxyException", 1097);
      int int0 = address0.getPort();
      assertEquals(1097, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Address address0 = Address.address((String) null, 1360);
      address0.getHost();
      assertEquals(1360, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Address address0 = new Address("", 4183);
      address0.getHost();
      assertEquals(4183, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Address.resolve((String) null, (-1133));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Address.resolve("y%XJB%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid address: y%XJB%
         //
         verifyException("com.github.chhsiao90.nitmproxy.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Address.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Address address0 = Address.address(":[6nG", 31);
      address0.hashCode();
      assertEquals(31, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Address address0 = Address.address((String) null, 1);
      address0.hashCode();
      assertEquals(1, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Address address0 = new Address("8H'[Z|kWN{769CSF", 1);
      Address address1 = Address.resolve("8H'[Z|kWN{769CSF", 1);
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
      assertEquals(1, address1.getPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Address address0 = Address.address("", 353);
      Address address1 = Address.resolve("w]iC251tenS0D&M@`", 1867);
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
      assertEquals(1867, address1.getPort());
      assertEquals(353, address0.getPort());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Address address0 = Address.address("", 353);
      boolean boolean0 = address0.equals((Object) null);
      assertEquals(353, address0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Address address0 = Address.address("", 380);
      boolean boolean0 = address0.equals(address0);
      assertEquals(380, address0.getPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Address address0 = Address.address("", 380);
      boolean boolean0 = address0.equals("w]iC251tenS0D&M@`");
      assertEquals(380, address0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Address.resolve("", 380);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid address: 
         //
         verifyException("com.github.chhsiao90.nitmproxy.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Address.resolve("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid address: 
         //
         verifyException("com.github.chhsiao90.nitmproxy.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Address address0 = Address.resolve("Jrf9", (-1));
      int int0 = address0.getPort();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Address address0 = Address.address("zN(w", (-1573));
      address0.getHost();
      assertEquals((-1573), address0.getPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Address address0 = Address.resolve("IHQe:4y");
      String string0 = address0.toString();
      assertEquals("IHQe:4", string0);
  }
}
