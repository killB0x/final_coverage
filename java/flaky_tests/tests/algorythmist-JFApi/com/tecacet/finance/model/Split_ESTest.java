/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:11:27 GMT 2022
 */

package com.tecacet.finance.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tecacet.finance.model.Split;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Split_ESTest extends Split_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Split split0 = new Split((LocalDate) null, 0, 0);
      boolean boolean0 = split0.isReverse();
      assertFalse(boolean0);
      assertEquals(0, split0.getDenominator());
      assertEquals(0, split0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Split split0 = new Split((LocalDate) null, 0, 0);
      int int0 = split0.getNumerator();
      assertEquals(0, int0);
      assertEquals(0, split0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, 3859, 972);
      int int0 = split0.getNumerator();
      assertEquals(3859, int0);
      assertEquals(972, split0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Split split0 = new Split((LocalDate) null, 0, 0);
      int int0 = split0.getDenominator();
      assertEquals(0, split0.getNumerator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1473), (-287));
      int int0 = split0.getDenominator();
      assertEquals((-1473), split0.getNumerator());
      assertEquals((-287), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Split split0 = new Split((LocalDate) null, 0, 0);
      split0.getDate();
      assertEquals(0, split0.getNumerator());
      assertEquals(0, split0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, 972, (-602));
      boolean boolean0 = split0.isReverse();
      assertEquals(972, split0.getNumerator());
      assertTrue(boolean0);
      assertEquals((-602), split0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1), 972);
      boolean boolean0 = split0.isReverse();
      assertFalse(boolean0);
      assertEquals(972, split0.getDenominator());
      assertEquals((-1), split0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1), 972);
      int int0 = split0.getNumerator();
      assertEquals(972, split0.getDenominator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1), 972);
      String string0 = split0.toString();
      assertEquals("972:-1 on 1964-05-10", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1), 972);
      split0.getDate();
      assertEquals((-1), split0.getNumerator());
      assertEquals(972, split0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2062L));
      Split split0 = new Split(localDate0, (-1), 972);
      int int0 = split0.getDenominator();
      assertEquals(972, int0);
      assertEquals((-1), split0.getNumerator());
  }
}
