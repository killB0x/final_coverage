/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:20:21 GMT 2022
 */

package com.tecacet.finance.model.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tecacet.finance.model.calendar.TradingCalendar;
import com.tecacet.finance.model.calendar.TradingDay;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TradingCalendar_ESTest extends TradingCalendar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TradingCalendar tradingCalendar0 = new TradingCalendar(0, 0, (List<TradingDay>) null);
      int int0 = tradingCalendar0.getYear();
      assertEquals(0, int0);
      assertEquals(0, tradingCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<TradingDay> linkedList0 = new LinkedList<TradingDay>();
      TradingCalendar tradingCalendar0 = new TradingCalendar(858, (-2369), linkedList0);
      int int0 = tradingCalendar0.getYear();
      assertEquals(858, tradingCalendar0.getMonth());
      assertEquals((-2369), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TradingCalendar tradingCalendar0 = new TradingCalendar((-4505), 1, (List<TradingDay>) null);
      tradingCalendar0.getTradingDays();
      assertEquals(1, tradingCalendar0.getYear());
      assertEquals((-4505), tradingCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<TradingDay> linkedList0 = new LinkedList<TradingDay>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      TradingDay.MarketStatus tradingDay_MarketStatus0 = TradingDay.MarketStatus.OPEN;
      TradingDay tradingDay0 = new TradingDay(localDate0, localTime0, localTime0, "BP3Py9xKW ,}c%^", tradingDay_MarketStatus0);
      linkedList0.add(tradingDay0);
      TradingCalendar tradingCalendar0 = new TradingCalendar(2998, 2998, linkedList0);
      tradingCalendar0.getTradingDays();
      assertEquals(2998, tradingCalendar0.getYear());
      assertEquals(2998, tradingCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TradingCalendar tradingCalendar0 = new TradingCalendar(0, 0, (List<TradingDay>) null);
      int int0 = tradingCalendar0.getMonth();
      assertEquals(0, tradingCalendar0.getYear());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<TradingDay> linkedList0 = new LinkedList<TradingDay>();
      TradingCalendar tradingCalendar0 = new TradingCalendar(858, (-2369), linkedList0);
      int int0 = tradingCalendar0.getMonth();
      assertEquals((-2369), tradingCalendar0.getYear());
      assertEquals(858, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TradingCalendar tradingCalendar0 = new TradingCalendar((-4505), 1, (List<TradingDay>) null);
      int int0 = tradingCalendar0.getYear();
      assertEquals(1, int0);
      assertEquals((-4505), tradingCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TradingCalendar tradingCalendar0 = new TradingCalendar((-4505), 1, (List<TradingDay>) null);
      int int0 = tradingCalendar0.getMonth();
      assertEquals((-4505), int0);
      assertEquals(1, tradingCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<TradingDay> linkedList0 = new LinkedList<TradingDay>();
      TradingCalendar tradingCalendar0 = new TradingCalendar(2998, 2998, linkedList0);
      tradingCalendar0.getTradingDays();
      assertEquals(2998, tradingCalendar0.getMonth());
      assertEquals(2998, tradingCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<TradingDay> linkedList0 = new LinkedList<TradingDay>();
      TradingCalendar tradingCalendar0 = new TradingCalendar((-4502), (-4502), linkedList0);
      String string0 = tradingCalendar0.toString();
      assertEquals("TradingCalendar(month=-4502, year=-4502)", string0);
  }
}
