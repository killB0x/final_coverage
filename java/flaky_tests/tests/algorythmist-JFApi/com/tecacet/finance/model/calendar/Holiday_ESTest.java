/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:18:43 GMT 2022
 */

package com.tecacet.finance.model.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tecacet.finance.model.calendar.Holiday;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Holiday_ESTest extends Holiday_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Locale locale0 = new Locale("\"", "", "");
      Holiday holiday0 = new Holiday(localDate0, locale0, "Holiday.HolidayBuilder(date=", "Holiday.HolidayBuilder(date=");
      String string0 = holiday0.getType();
      assertEquals("Holiday.HolidayBuilder(date=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1642L));
      Locale locale0 = Locale.GERMANY;
      Holiday holiday0 = new Holiday(localDate0, locale0, "", "");
      String string0 = holiday0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = new Holiday.HolidayBuilder();
      Holiday holiday0 = holiday_HolidayBuilder0.build();
      String string0 = holiday0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = new Holiday.HolidayBuilder();
      Holiday holiday0 = holiday_HolidayBuilder0.build();
      LocalDate localDate0 = holiday0.getDate();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1607L);
      Locale locale0 = Locale.ITALIAN;
      Holiday holiday0 = new Holiday(localDate0, locale0, "", "");
      LocalDate localDate1 = holiday0.getDate();
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1607L);
      Locale locale0 = Locale.ITALIAN;
      Holiday holiday0 = new Holiday(localDate0, locale0, "", "");
      String string0 = holiday0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = new Holiday.HolidayBuilder();
      Holiday holiday0 = holiday_HolidayBuilder0.build();
      String string0 = holiday0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1607L);
      Locale locale0 = Locale.ITALIAN;
      Holiday holiday0 = new Holiday(localDate0, locale0, "", "");
      Locale locale1 = holiday0.getLocale();
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1607L);
      Locale locale0 = Locale.ITALIAN;
      Holiday holiday0 = new Holiday(localDate0, locale0, "", "");
      String string0 = holiday0.toString();
      assertEquals("Holiday(date=1974-05-27, description=)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = Holiday.builder();
      String string0 = holiday_HolidayBuilder0.toString();
      assertEquals("Holiday.HolidayBuilder(date=null, locale=null, type=null, description=null)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = Holiday.builder();
      Holiday.HolidayBuilder holiday_HolidayBuilder1 = holiday_HolidayBuilder0.locale(locale0);
      assertSame(holiday_HolidayBuilder1, holiday_HolidayBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = new Holiday.HolidayBuilder();
      holiday_HolidayBuilder0.description("OP");
      Holiday holiday0 = holiday_HolidayBuilder0.build();
      String string0 = holiday0.getDescription();
      assertEquals("OP", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = Holiday.builder();
      Holiday.HolidayBuilder holiday_HolidayBuilder1 = holiday_HolidayBuilder0.date((LocalDate) null);
      assertSame(holiday_HolidayBuilder1, holiday_HolidayBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = Holiday.builder();
      Holiday holiday0 = holiday_HolidayBuilder0.build();
      Locale locale0 = holiday0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Holiday.HolidayBuilder holiday_HolidayBuilder0 = new Holiday.HolidayBuilder();
      Holiday.HolidayBuilder holiday_HolidayBuilder1 = holiday_HolidayBuilder0.type("VFM");
      assertSame(holiday_HolidayBuilder0, holiday_HolidayBuilder1);
  }
}
