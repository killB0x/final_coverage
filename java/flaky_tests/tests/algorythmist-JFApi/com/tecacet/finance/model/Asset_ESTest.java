/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 16:16:04 GMT 2022
 */

package com.tecacet.finance.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tecacet.finance.model.Asset;
import com.tecacet.finance.model.AssetType;
import com.tecacet.finance.model.Exchange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Asset_ESTest extends Asset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Asset asset0 = asset_AssetBuilder0.build();
      asset0.getSymbol();
      assertEquals(0, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AssetType assetType0 = AssetType.ETF;
      Exchange exchange0 = Exchange.BATS;
      Asset asset0 = new Asset("RW4mg?`z=3hEWn", "zCF%T}OrYB4pk", assetType0, 0, exchange0);
      String string0 = asset0.getSymbol();
      assertEquals("RW4mg?`z=3hEWn", string0);
      assertEquals("zCF%T}OrYB4pk", asset0.getName());
      assertEquals(0, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssetType assetType0 = AssetType.ETF;
      Exchange exchange0 = Exchange.BATS;
      Asset asset0 = new Asset("RW4mg?`z=3hEWn", "zCF%T}OrYB4pk", assetType0, 0, exchange0);
      int int0 = asset0.getRoundLotSize();
      assertEquals("zCF%T}OrYB4pk", asset0.getName());
      assertEquals("RW4mg?`z=3hEWn", asset0.getSymbol());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Asset.AssetBuilder asset_AssetBuilder1 = asset_AssetBuilder0.roundLotSize((-1));
      Asset asset0 = asset_AssetBuilder1.build();
      int int0 = asset0.getRoundLotSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Asset asset0 = asset_AssetBuilder0.build();
      asset0.getName();
      assertEquals(0, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Asset asset0 = asset_AssetBuilder0.build();
      asset0.getExchange();
      assertEquals(0, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Asset asset0 = asset_AssetBuilder0.build();
      asset0.getAssetType();
      assertEquals(0, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      Exchange exchange0 = Exchange.BATS;
      Asset.AssetBuilder asset_AssetBuilder1 = asset_AssetBuilder0.exchange(exchange0);
      assertSame(asset_AssetBuilder0, asset_AssetBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      Asset.AssetBuilder asset_AssetBuilder0 = asset0.toBuilder();
      asset_AssetBuilder0.name("");
      Asset asset1 = asset_AssetBuilder0.build();
      asset1.getName();
      assertEquals("", asset0.getSymbol());
      assertEquals(1980, asset1.getRoundLotSize());
      assertEquals(";)83-} A*p", asset0.getName());
      assertEquals(1980, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      Asset.AssetBuilder asset_AssetBuilder0 = asset0.toBuilder();
      asset_AssetBuilder0.assetType(assetType0);
      assertEquals("", asset0.getSymbol());
      assertEquals(";)83-} A*p", asset0.getName());
      assertEquals(1980, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      Asset.AssetBuilder asset_AssetBuilder0 = asset0.toBuilder();
      asset_AssetBuilder0.symbol((String) null);
      assertEquals("", asset0.getSymbol());
      assertEquals(1980, asset0.getRoundLotSize());
      assertEquals(";)83-} A*p", asset0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      asset0.getAssetType();
      assertEquals(";)83-} A*p", asset0.getName());
      assertEquals("", asset0.getSymbol());
      assertEquals(1980, asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssetType assetType0 = AssetType.MUTUAL_FUND;
      Exchange exchange0 = Exchange.NYSE_MKT;
      Asset asset0 = new Asset("", "", assetType0, (-1273), exchange0);
      asset0.getSymbol();
      assertEquals((-1273), asset0.getRoundLotSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      int int0 = asset0.getRoundLotSize();
      assertEquals(";)83-} A*p", asset0.getName());
      assertEquals(1980, int0);
      assertEquals("", asset0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      asset0.getExchange();
      assertEquals(1980, asset0.getRoundLotSize());
      assertEquals(";)83-} A*p", asset0.getName());
      assertEquals("", asset0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AssetType assetType0 = AssetType.STOCK;
      Exchange exchange0 = Exchange.NASDAQ;
      Asset asset0 = new Asset("", ";)83-} A*p", assetType0, 1980, exchange0);
      String string0 = asset0.getName();
      assertEquals("", asset0.getSymbol());
      assertEquals(1980, asset0.getRoundLotSize());
      assertEquals(";)83-} A*p", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = Asset.builder();
      String string0 = asset_AssetBuilder0.toString();
      assertEquals("Asset.AssetBuilder(symbol=null, name=null, assetType=null, roundLotSize=0, exchange=null)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Asset.AssetBuilder asset_AssetBuilder0 = new Asset.AssetBuilder();
      Asset asset0 = asset_AssetBuilder0.build();
      asset0.toBuilder();
      assertEquals(0, asset0.getRoundLotSize());
  }
}
