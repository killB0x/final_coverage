/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 02:15:27 GMT 2022
 */

package org.jomni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jomni.ConverterRegistry;
import org.jomni.TypeConverter;
import org.jomni.util.Pair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConverterRegistry_ESTest extends ConverterRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      converterRegistry0.init();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        converterRegistry0.resolveTypeConverter(class0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      Class<Date> class0 = Date.class;
      TypeConverter typeConverter0 = converterRegistry0.resolveTypeConverter((Class<?>) null, class0);
      assertNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      converterRegistry0.init();
      Map<Pair<Class<?>, Class<?>>, TypeConverter<?, ?>> map0 = converterRegistry0.getRegistry();
      assertEquals(42, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      Class<Date> class0 = Date.class;
      TypeConverter<Date, Date> typeConverter0 = (TypeConverter<Date, Date>) mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(typeConverter0).toString();
      converterRegistry0.addTypeConverter(class0, class0, typeConverter0);
      TypeConverter typeConverter1 = converterRegistry0.resolveTypeConverter(class0, class0);
      assertNotNull(typeConverter1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      Map<Pair<Class<?>, Class<?>>, TypeConverter<?, ?>> map0 = converterRegistry0.getRegistry();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      converterRegistry0.init();
      Class<Date> class0 = Date.class;
      TypeConverter typeConverter0 = converterRegistry0.resolveTypeConverter(class0, class0);
      assertNull(typeConverter0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConverterRegistry converterRegistry0 = new ConverterRegistry();
      Class<Date> class0 = Date.class;
      converterRegistry0.addTypeConverter(class0, class0, (TypeConverter<Date, Date>) null);
      TypeConverter typeConverter0 = converterRegistry0.resolveTypeConverter(class0, class0);
      assertNull(typeConverter0);
  }
}
