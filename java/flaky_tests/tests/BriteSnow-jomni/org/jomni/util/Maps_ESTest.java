/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 02:07:21 GMT 2022
 */

package org.jomni.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jomni.util.Maps;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Maps_ESTest extends Maps_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      Set<CharBuffer> set0 = Maps.setOf(charBufferArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<String, Object> map0 = Maps.propMapOf(objectArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.jomni.util.Maps", "org.jomni.util.Maps");
      Map<String, Object> map0 = Maps.asNestedMap(hashMap0);
      Maps.nestedValue(map0, "org.jomni.util.Maps");
      assertEquals(1, hashMap0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Maps.NamesValues maps_NamesValues0 = Maps.namesValuesOf(hashMap0);
      Map map0 = Maps.mapOf(maps_NamesValues0.names);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Map<String, Object> map0 = Maps.asFlatMap(hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Maps.setOf((CharBuffer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBuffer[] charBufferArray0 = new CharBuffer[4];
      charBuffer0.compact();
      charBufferArray0[0] = charBuffer1;
      // Undeclared exception!
      try { 
        Maps.setOf(charBufferArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Maps.propMapOf(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      // Undeclared exception!
      try { 
        Maps.nestedValue(hashMap0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.util.Maps", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Map map0 = Maps.mapOf(objectArray0);
      // Undeclared exception!
      try { 
        Maps.namesValuesOf(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Maps.mapOf((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.util.Maps", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Maps.asFlatMap((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.util.Maps", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Maps.NamesValues maps_NamesValues0 = Maps.namesValuesOf((Map) null);
      Maps.NamesValues maps_NamesValues1 = new Maps.NamesValues(maps_NamesValues0.names, maps_NamesValues0.names);
      assertFalse(maps_NamesValues1.equals((Object)maps_NamesValues0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.joni.u\"*iDl.Pair";
      Map<String, Object> map0 = Maps.propMapOf(objectArray0);
      Map<String, Object> map1 = Maps.asNestedMap(map0);
      Object object0 = Maps.nestedValue(map1, "org.joni.u\"*iDl.Pair");
      assertNull(object0);
      assertFalse(map1.equals((Object)map0));
      assertFalse(map1.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Object object0 = Maps.nestedValue(hashMap0, ".");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      hashMap0.put(charBuffer0, charBuffer0);
      Map<String, Object> map0 = Maps.asFlatMap(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) hashMap0;
      Map map0 = Maps.mapOf(objectArray0);
      Map<String, Object> map1 = Maps.asNestedMap(map0);
      Map<String, Object> map2 = Maps.asFlatMap(map1);
      assertFalse(map2.equals((Object)map1));
      assertEquals(1, map2.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(".", ".");
      Map<String, Object> map0 = Maps.asNestedMap(hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "?(";
      objectArray0[6] = (Object) ")qS5LP$m]M&`w";
      Map map0 = Maps.mapOf(objectArray0);
      Map<String, Object> map1 = Maps.asNestedMap(map0);
      assertEquals(3, map0.size());
      assertEquals(3, map1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) hashMap0;
      Map<String, Object> map0 = Maps.propMapOf(objectArray0);
      Map<String, Object> map1 = Maps.asNestedMap(map0);
      assertFalse(map1.equals((Object)map0));
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.joni.u\"*iDl.Pair";
      Map<String, Object> map0 = Maps.propMapOf(objectArray0);
      Maps.nestedValue(map0, "org.joni.u\"*iDl.Pair");
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Map map0 = Maps.mapOf(objectArray0);
      // Undeclared exception!
      try { 
        Maps.asNestedMap(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<CharBuffer, CharBuffer> hashMap0 = new HashMap<CharBuffer, CharBuffer>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) hashMap0;
      Map<String, Object> map0 = Maps.propMapOf(objectArray0);
      Maps.namesValuesOf(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      Set<CharBuffer> set0 = Maps.setOf(charBufferArray0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Maps maps0 = new Maps();
  }
}
