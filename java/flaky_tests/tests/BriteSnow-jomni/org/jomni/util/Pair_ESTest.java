/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 02:16:41 GMT 2022
 */

package org.jomni.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jomni.util.Pair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2064);
      Pair<Integer, Integer> pair0 = Pair.newPair(integer0, (Integer) null);
      Integer integer1 = pair0.getB();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1338);
      Pair<Integer, Integer> pair0 = Pair.newPair(integer0, integer0);
      Pair<Integer, Pair<Integer, Integer>> pair1 = Pair.newPair(integer0, pair0);
      Pair<Integer, Integer> pair2 = pair1.getB();
      assertSame(pair0, pair2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2064);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, integer0);
      Pair<Pair<Integer, Integer>, Integer> pair1 = Pair.newPair(pair0, integer0);
      Pair<Integer, Integer> pair2 = pair1.getA();
      assertSame(pair0, pair2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Pair<Integer, Integer>, Integer> pair1 = Pair.newPair(pair0, (Integer) null);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Pair<Integer, Integer>> pair1 = Pair.newPair(integer0, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2064);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, integer0);
      Pair<Integer, Pair<Integer, Integer>> pair1 = Pair.newPair((Integer) null, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Pair<Integer, Integer>> pair1 = Pair.newPair(integer0, pair0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1000);
      Pair<Integer, Integer> pair0 = Pair.newPair((Integer) null, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Pair<Integer, Integer> pair1 = Pair.newPair((Integer) null, (Integer) null);
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<Integer, Integer> pair0 = Pair.newPair(integer0, integer0);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>(pair0, pair0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = Pair.newPair(integer0, integer0);
      Pair<Integer, Integer> pair1 = Pair.newPair(integer0, (Integer) null);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Integer> pair0 = Pair.newPair(integer0, integer0);
      String string0 = pair0.toString();
      assertEquals("(0=0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pair<Integer, Integer> pair0 = Pair.newPair((Integer) null, (Integer) null);
      Integer integer0 = pair0.getA();
      assertNull(integer0);
  }
}
