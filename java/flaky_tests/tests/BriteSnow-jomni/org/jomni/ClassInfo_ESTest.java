/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 02:12:32 GMT 2022
 */

package org.jomni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jomni.ClassInfo;
import org.jomni.PropInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassInfo_ESTest extends ClassInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      PropInfo propInfo0 = classInfo0.getPropInfo("genericType");
      Object object0 = classInfo0.getValue(propInfo0, "genericType");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      classInfo0.propInfoByPropName = null;
      // Undeclared exception!
      try { 
        classInfo0.setValue(class0, "MIqi;zkq1VL\"3bLe9", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      classInfo0.propInfoByPropName = null;
      // Undeclared exception!
      try { 
        classInfo0.hasProperty("class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      classInfo0.propInfoByPropName = null;
      // Undeclared exception!
      try { 
        classInfo0.getValue(class0, "getgetReadMethod");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      classInfo0.propInfoByPropName = null;
      // Undeclared exception!
      try { 
        classInfo0.getPropInfo("0MK!x.f9c(Wj2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassInfo classInfo0 = null;
      try {
        classInfo0 = new ClassInfo((Class) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      boolean boolean0 = classInfo0.hasProperty("name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      boolean boolean0 = classInfo0.hasProperty("i'A,*:~HB:`8@rC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      boolean boolean0 = classInfo0.setValue(class0, "type", class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      boolean boolean0 = classInfo0.setValue((Object) null, "&#P7,", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      Object object0 = new Object();
      HashMap<String, PropInfo> hashMap0 = new HashMap<String, PropInfo>();
      PropInfo propInfo0 = new PropInfo("&#P7,", class0, class0, (Method) null, (Method) null);
      hashMap0.put("name", propInfo0);
      classInfo0.propInfoByPropName = (Map<String, PropInfo>) hashMap0;
      // Undeclared exception!
      try { 
        classInfo0.getValue(object0, "name");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // propName name does not not have readMethod
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classInfo0.getValue(object0, "name");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error while calling read method getName for property name on object java.lang.Object@1f05a413
         // java.lang.IllegalArgumentException: java.lang.ClassCastException@d4e9e8b
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      Object object0 = new Object();
      Object object1 = classInfo0.getValue(object0, "&#P7,");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      classInfo0.propInfoByPropName = null;
      // Undeclared exception!
      try { 
        classInfo0.getPropertyNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.ClassInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      Class class1 = classInfo0.getObjectClass();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      Set<String> set0 = classInfo0.getPropertyNames();
      assertEquals(5, set0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<PropInfo> class0 = PropInfo.class;
      ClassInfo classInfo0 = new ClassInfo(class0);
      PropInfo propInfo0 = classInfo0.getPropInfo("i'A,*:~HB:`8@rC");
      assertNull(propInfo0);
  }
}
