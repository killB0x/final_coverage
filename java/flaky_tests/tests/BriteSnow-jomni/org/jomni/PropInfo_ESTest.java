/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 02:17:21 GMT 2022
 */

package org.jomni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jomni.PropInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropInfo_ESTest extends PropInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropInfo propInfo0 = new PropInfo((String) null, class0, class0, (Method) null, (Method) null);
      Class class1 = propInfo0.getType();
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropInfo propInfo0 = new PropInfo((String) null, class0, class0, (Method) null, (Method) null);
      String string0 = propInfo0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      PropInfo propInfo0 = new PropInfo("3J0?qibxNJJSd", class0, class1, (Method) null, (Method) null);
      String string0 = propInfo0.getName();
      assertEquals("3J0?qibxNJJSd", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropInfo propInfo0 = new PropInfo("aR|U\"J\"0f6<", (Class) null, class0, (Method) null, (Method) null);
      Class class1 = propInfo0.getType();
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropInfo propInfo0 = new PropInfo("", class0, class0, (Method) null, (Method) null);
      Method method0 = propInfo0.getWriteMethod();
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropInfo propInfo0 = new PropInfo("", class0, class0, (Method) null, (Method) null);
      String string0 = propInfo0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropInfo propInfo0 = new PropInfo("", class0, class0, (Method) null, (Method) null);
      // Undeclared exception!
      try { 
        propInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jomni.PropInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropInfo propInfo0 = new PropInfo("'koAv##n2", class0, class0, (Method) null, (Method) null);
      Optional<Class> optional0 = (Optional<Class>)propInfo0.getGenericType();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropInfo propInfo0 = new PropInfo("", class0, class0, (Method) null, (Method) null);
      Method method0 = propInfo0.getReadMethod();
      assertNull(method0);
  }
}
