/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:27:45 GMT 2022
 */

package org.kivio.c3faces.listener.change;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.listener.change.Change;
import org.kivio.c3faces.listener.change.ViewDataSetChange;
import org.kivio.c3faces.listener.change.ViewDataSetCumulatibleChange;
import org.kivio.c3faces.script.Modifier;
import org.kivio.c3faces.script.modifier.Colors;
import org.kivio.c3faces.script.modifier.LegendShow;
import org.kivio.c3faces.script.modifier.Resize;
import org.kivio.c3faces.script.modifier.TransformType;
import org.kivio.c3faces.script.modifier.TransformTypes;
import org.kivio.c3faces.script.modifier.XGridAdd;
import org.kivio.c3faces.script.modifier.XGridRemove;
import org.kivio.c3faces.script.modifier.YGridRemove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Changes_ESTest extends Changes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Colors colors0 = new Colors();
      List<String> list0 = colors0.getFields();
      XGridRemove xGridRemove0 = new XGridRemove();
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange("sB_]?j-!|[VQva,", list0);
      xGridRemove0.onChange(viewDataSetCumulatibleChange0);
      Change<Object> change0 = new Change<Object>("sB_]?j-!|[VQva,", xGridRemove0);
      xGridRemove0.onChange(change0);
      assertFalse(xGridRemove0.isComposite());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Colors colors0 = new Colors();
      Object object0 = new Object();
      ViewDataSetChange viewDataSetChange0 = new ViewDataSetChange("GJ9REO/qa,uo", object0);
      colors0.onChange(viewDataSetChange0);
      ViewDataSetChange viewDataSetChange1 = new ViewDataSetChange("GJ9REO/qa,uo", "GJ9REO/qa,uo");
      colors0.onChange(viewDataSetChange1);
      assertFalse(colors0.isComposite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      Set<Change> set0 = (Set<Change>)yGridRemove0.getViewDataSetChanges();
      Colors colors0 = new Colors();
      Change<Object> change0 = new Change<Object>("m|~+X>;C[:", set0);
      colors0.onChange(change0);
      assertFalse(colors0.isMethod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      Object object0 = transformTypes0.getPropertyLastChange("l<j5/jzMU");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange("9F}gf", yGridRemove0);
      yGridRemove0.onChange(viewDataSetCumulatibleChange0);
      Map<String, Change> map0 = (Map<String, Change>)yGridRemove0.getChangedProps();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XGridAdd xGridAdd0 = new XGridAdd();
      Object object0 = new Object();
      TransformType transformType0 = new TransformType((String) null, (String) null);
      Modifier modifier0 = transformType0.addModifier(xGridAdd0);
      xGridAdd0.addModifier(modifier0);
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange((String) null, object0);
      // Undeclared exception!
      xGridAdd0.onChange(viewDataSetCumulatibleChange0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XGridAdd xGridAdd0 = new XGridAdd();
      // Undeclared exception!
      try { 
        xGridAdd0.onChange((Change<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegendShow legendShow0 = new LegendShow();
      Set<?> set0 = legendShow0.getPropertyChangeSet("");
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      ViewDataSetChange viewDataSetChange0 = new ViewDataSetChange("", (Object) null);
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange("", viewDataSetChange0);
      transformTypes0.onChange(viewDataSetCumulatibleChange0);
      Set<?> set0 = transformTypes0.getPropertyChangeSet("");
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegendShow legendShow0 = new LegendShow();
      ViewDataSetChange viewDataSetChange0 = new ViewDataSetChange("\"$3\":6/GCU", "\"$3\":6/GCU");
      legendShow0.onChange(viewDataSetChange0);
      Set<Change> set0 = (Set<Change>)legendShow0.getViewDataSetChanges();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      ViewDataSetChange viewDataSetChange0 = new ViewDataSetChange("", (Object) null);
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange("", viewDataSetChange0);
      transformTypes0.onChange(viewDataSetCumulatibleChange0);
      Set<Change> set0 = (Set<Change>)transformTypes0.getViewDataSetChanges();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Resize resize0 = new Resize();
      ViewDataSetCumulatibleChange viewDataSetCumulatibleChange0 = new ViewDataSetCumulatibleChange("U2'Oa$SUaWf_", "U2'Oa$SUaWf_");
      resize0.onChange(viewDataSetCumulatibleChange0);
      Object object0 = resize0.getPropertyLastChange("U2'Oa$SUaWf_");
      assertEquals("U2'Oa$SUaWf_", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Colors colors0 = new Colors();
      Map<String, Change> map0 = (Map<String, Change>)colors0.getChangedProps();
      assertEquals(0, map0.size());
  }
}
