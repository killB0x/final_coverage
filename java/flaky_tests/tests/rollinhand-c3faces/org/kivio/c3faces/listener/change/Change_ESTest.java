/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:54:24 GMT 2022
 */

package org.kivio.c3faces.listener.change;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.listener.change.Change;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Change_ESTest extends Change_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-2610));
      Change<Object> change0 = new Change<Object>("0/YBf'", integer0);
      String string0 = change0.getName();
      assertEquals("0/YBf'", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Change<Integer> change0 = new Change<Integer>("", (Integer) null);
      String string0 = change0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Change<Object> change0 = new Change<Object>((String) null, integer0);
      change0.addValue((Object) null);
      Object object0 = change0.getLastChange();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Change<Object> change0 = new Change<Object>((String) null, (Object) null);
      Object object0 = new Object();
      change0.addValue(object0);
      Object object1 = change0.getLastChange();
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Change<Object> change0 = new Change<Object>("", "");
      Set<Object> set0 = change0.getChangeSet();
      change0.addValue(set0);
      // Undeclared exception!
      try { 
        change0.addValue(set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Change<Object> change0 = new Change<Object>("g?,=ez,d-P*0g", object0);
      Set<Object> set0 = change0.getChangeSet();
      change0.addValue(set0);
      Change<Object> change1 = null;
      try {
        change1 = new Change<Object>("g?,=ez,d-P*0g", set0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Change<Integer> change0 = new Change<Integer>((String) null, (Integer) null);
      String string0 = change0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Change<Object> change0 = new Change<Object>("B:#z,5_?,ytuhR", "B:#z,5_?,ytuhR");
      boolean boolean0 = change0.isCumulatible();
      assertFalse(boolean0);
  }
}
