/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:10:07 GMT 2022
 */

package org.kivio.c3faces.script;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.listener.change.Change;
import org.kivio.c3faces.script.Modifier;
import org.kivio.c3faces.script.modifier.Colors;
import org.kivio.c3faces.script.modifier.LegendHide;
import org.kivio.c3faces.script.modifier.LegendShow;
import org.kivio.c3faces.script.modifier.Load;
import org.kivio.c3faces.script.modifier.Names;
import org.kivio.c3faces.script.modifier.Resize;
import org.kivio.c3faces.script.modifier.Transform;
import org.kivio.c3faces.script.modifier.TransformType;
import org.kivio.c3faces.script.modifier.TransformTypes;
import org.kivio.c3faces.script.modifier.XGridAdd;
import org.kivio.c3faces.script.modifier.XGridRemove;
import org.kivio.c3faces.script.modifier.YGridAdd;
import org.kivio.c3faces.script.modifier.YGridRemove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Modifier_ESTest extends Modifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transform transform0 = new Transform();
      XGridRemove xGridRemove0 = new XGridRemove();
      YGridRemove yGridRemove0 = new YGridRemove();
      YGridRemove yGridRemove1 = new YGridRemove();
      Modifier modifier0 = transform0.addModifier(yGridRemove1);
      modifier0.getScript("", 1098);
      modifier0.addModifier(transform0);
      yGridRemove0.getFields();
      Modifier modifier1 = transform0.addModifier(yGridRemove0);
      TransformType transformType0 = new TransformType("(", (String) null);
      transformType0.totalDuration();
      Colors colors0 = new Colors();
      colors0.getViewDataSetChanges();
      colors0.getDuration();
      colors0.getScript("", (-1));
      String string0 = "";
      int int0 = (-29);
      // Undeclared exception!
      try { 
        modifier1.getScript(string0, int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      assertFalse(transformTypes0.includePropName());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      transformTypes0.setFields(linkedList0);
      transformTypes0.getDuration();
      LegendHide legendHide0 = new LegendHide();
      YGridRemove yGridRemove0 = new YGridRemove();
      Change<YGridRemove> change0 = new Change<YGridRemove>("", yGridRemove0);
      Set<YGridRemove> set0 = change0.getChangeSet();
      linkedList0.removeAll(set0);
      XGridRemove xGridRemove0 = new XGridRemove();
      transformTypes0.setFields(linkedList0);
      List<String> list0 = xGridRemove0.getFields();
      legendHide0.setFields(list0);
      legendHide0.isMethod();
      transformTypes0.getScript("C+m!C'+%m-~Kn", (-1348));
      legendHide0.getFields();
      transformTypes0.getFields();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.addModifier((Modifier) null);
      // Undeclared exception!
      try { 
        transform0.totalDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.script.Modifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transform transform0 = new Transform();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      transform0.setFields(linkedList0);
      transform0.getFields();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.addModifier((Modifier) null);
      // Undeclared exception!
      try { 
        transform0.getScript(", ", (-1869));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.script.Modifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.setFields((List<String>) null);
      transform0.getScript(";] W7ToYw}", 997);
      LegendHide legendHide0 = new LegendHide();
      Modifier modifier0 = transform0.addModifier(legendHide0);
      modifier0.getScript("$", (-1));
      transform0.getFields();
      transform0.includePropName();
      LegendShow legendShow0 = new LegendShow();
      legendShow0.getScript("", 1038);
      legendShow0.isMethod();
      XGridRemove xGridRemove0 = new XGridRemove();
      xGridRemove0.isMethod();
      Colors colors0 = new Colors();
      LegendShow legendShow1 = new LegendShow();
      Change<Object> change0 = new Change<Object>("$", "");
      legendShow1.onChange(change0);
      List<String> list0 = legendShow1.getFields();
      xGridRemove0.setFields(list0);
      colors0.getDuration();
      xGridRemove0.getFields();
      XGridAdd xGridAdd0 = new XGridAdd();
      xGridAdd0.getFields();
      YGridAdd yGridAdd0 = new YGridAdd();
      yGridAdd0.getFields();
      yGridAdd0.getFields();
      colors0.isTimeoutable();
      xGridRemove0.getFields();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformType transformType0 = new TransformType(", ", ", ");
      transformType0.setFields((List<String>) null);
      transformType0.totalDuration();
      transformType0.getScript(", ", 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transform transform0 = new Transform();
      Modifier modifier0 = transform0.addModifier((Modifier) null);
      // Undeclared exception!
      try { 
        modifier0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.script.Modifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformType transformType0 = new TransformType("viewDataSetAdded", "viewDataSetAdded");
      transformType0.getScript("viewDataSetAdded", 2147483645);
      transformType0.getFields();
      transformType0.includePropName();
      LegendShow legendShow0 = new LegendShow();
      legendShow0.isMethod();
      transformType0.includePropName();
      transformType0.includePropName();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      boolean boolean0 = yGridRemove0.isTimeoutable();
      assertTrue(boolean0);
      
      yGridRemove0.getScript("l)1I>'", 0);
      TransformType transformType0 = new TransformType("yGridAdd", "setTimeout(function () {");
      transformType0.getScript(")", 0);
      transformType0.getScript("setTimeout(function () {", (-1171));
      Colors colors0 = new Colors();
      colors0.isTimeoutable();
      transformType0.isSuccessfullyGeneratedScript();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      Colors colors0 = new Colors();
      colors0.getFields();
      TransformType transformType0 = new TransformType("org.kivio.c3faces.script.modifier.XGridAdd", "/e,Ab)");
      transformType0.setFields((List<String>) null);
      transformType0.getScript("/e,Ab)", (-23));
      YGridRemove yGridRemove1 = new YGridRemove();
      yGridRemove0.isTimeoutable();
      XGridRemove xGridRemove0 = new XGridRemove();
      xGridRemove0.isMethod();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransformType transformType0 = new TransformType("$", "$");
      Names names0 = new Names();
      List<String> list0 = names0.getFields();
      transformType0.setFields(list0);
      transformType0.getScript("$", (-1236));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Colors colors0 = new Colors();
      colors0.reset();
      YGridRemove yGridRemove0 = new YGridRemove();
      yGridRemove0.setSuccessfullyGeneratedScript(true);
      yGridRemove0.getPropertyLastChange("V4_{C J6");
      Object object0 = new Object();
      Change<Object> change0 = new Change<Object>("zkV.zZ=JG 0DH^7o4r>", object0);
      yGridRemove0.getViewDataSetChanges();
      yGridRemove0.onChange(change0);
      yGridRemove0.isMethod();
      yGridRemove0.getFields();
      yGridRemove0.setSuccessfullyGeneratedScript(true);
      Modifier modifier0 = colors0.addModifier(yGridRemove0);
      Load load0 = new Load();
      XGridAdd xGridAdd0 = new XGridAdd();
      xGridAdd0.addModifier(load0);
      modifier0.getScript("zkV.zZ=JG 0DH^7o4r>", 0);
      Resize resize0 = new Resize();
      resize0.addModifier(modifier0);
      colors0.totalDuration();
      LegendHide legendHide0 = new LegendHide();
      legendHide0.isSuccessfullyGeneratedScript();
      YGridAdd yGridAdd0 = new YGridAdd();
      yGridAdd0.getFields();
      colors0.isTimeoutable();
      Names names0 = new Names();
      names0.totalDuration();
      names0.getFields();
      Names names1 = new Names();
      names1.isTimeoutable();
      names1.getFields();
      TransformType transformType0 = new TransformType("rz;W", "");
      transformType0.includePropName();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transform transform0 = new Transform();
      TransformType transformType0 = new TransformType("-", (String) null);
      transformType0.totalDuration();
      transform0.addModifier(transformType0);
      transform0.getScript("-", 446);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XGridRemove xGridRemove0 = new XGridRemove();
      Names names0 = new Names();
      Modifier modifier0 = xGridRemove0.addModifier(names0);
      YGridRemove yGridRemove0 = new YGridRemove();
      Change<YGridRemove> change0 = new Change<YGridRemove>("8\"])19[,g0/", yGridRemove0);
      modifier0.onChange(change0);
      names0.addModifier(modifier0);
      xGridRemove0.getFields();
      // Undeclared exception!
      try { 
        xGridRemove0.totalDuration();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.setSuccessfullyGeneratedScript(true);
      transform0.totalDuration();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegendShow legendShow0 = new LegendShow();
      YGridRemove yGridRemove0 = new YGridRemove();
      yGridRemove0.setSuccessfullyGeneratedScript(true);
      String string0 = "zkV.zZ=JG 0DH^7o4r>";
      yGridRemove0.getPropertyLastChange("0E");
      Change<Object> change0 = new Change<Object>("setTimeout(function () {", legendShow0);
      yGridRemove0.getViewDataSetChanges();
      yGridRemove0.onChange(change0);
      yGridRemove0.isMethod();
      yGridRemove0.setSuccessfullyGeneratedScript(true);
      Colors colors0 = new Colors();
      colors0.addModifier(yGridRemove0);
      Load load0 = new Load();
      Modifier modifier0 = yGridRemove0.addModifier(colors0);
      Load load1 = new Load();
      load1.getScript("zkV.zZ=JG 0DH^7o4r>", 0);
      modifier0.addModifier(load0);
      modifier0.totalDuration();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YGridAdd yGridAdd0 = new YGridAdd();
      YGridRemove yGridRemove0 = new YGridRemove();
      yGridRemove0.setSuccessfullyGeneratedScript(false);
      Modifier modifier0 = yGridAdd0.addModifier(yGridRemove0);
      modifier0.getScript((String) null, 0);
      List<String> list0 = yGridAdd0.getFields();
      yGridAdd0.setFields(list0);
      yGridAdd0.includePropName();
      LegendShow legendShow0 = new LegendShow();
      legendShow0.getViewDataSetChanges();
      legendShow0.isMethod();
      XGridRemove xGridRemove0 = new XGridRemove();
      xGridRemove0.setSuccessfullyGeneratedScript(false);
      xGridRemove0.isMethod();
      modifier0.includePropName();
      Change<Object> change0 = new Change<Object>((String) null, xGridRemove0);
      modifier0.onChange(change0);
      boolean boolean0 = xGridRemove0.isComposite();
      assertFalse(boolean0);
      
      modifier0.isMethod();
      LegendHide legendHide0 = new LegendHide();
      legendHide0.getFields();
      legendHide0.isMethod();
      yGridRemove0.getDuration();
      modifier0.getModifiers();
      assertTrue(yGridAdd0.isComposite());
      
      legendHide0.isMethod();
      assertFalse(legendHide0.isComposite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Load load0 = new Load();
      load0.getPropertyLastChange((String) null);
      load0.totalDuration();
      Change<Object> change0 = new Change<Object>("jEjCDi=M(m9Equ=O", (Object) null);
      load0.onChange(change0);
      LegendShow legendShow0 = new LegendShow();
      Colors colors0 = new Colors();
      List<String> list0 = colors0.getFields();
      legendShow0.setFields(list0);
      legendShow0.getFields();
      XGridRemove xGridRemove0 = new XGridRemove();
      assertFalse(xGridRemove0.isComposite());
      
      Names names0 = new Names();
      names0.getFields();
      Modifier modifier0 = xGridRemove0.addModifier(names0);
      modifier0.onChange(change0);
      modifier0.reset();
      xGridRemove0.getFields();
      xGridRemove0.isMethod();
      Colors colors1 = new Colors();
      colors1.getViewDataSetChanges();
      colors1.getFields();
      colors1.isTimeoutable();
      colors1.totalDuration();
      XGridAdd xGridAdd0 = new XGridAdd();
      xGridAdd0.getFields();
      xGridRemove0.getDuration();
      assertTrue(xGridRemove0.isComposite());
      
      LegendHide legendHide0 = new LegendHide();
      legendHide0.getFields();
      assertEquals(500, legendHide0.getDuration());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transform transform0 = new Transform();
      Names names0 = new Names();
      transform0.addModifier(names0);
      assertFalse(names0.isComposite());
      
      Change<String> change0 = new Change<String>("; \n", "; \n");
      transform0.onChange(change0);
      boolean boolean0 = transform0.isComposite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      List<String> list0 = transformTypes0.getFields();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Names names0 = new Names();
      Load load0 = new Load();
      names0.addModifier(load0);
      List<String> list0 = names0.getFields();
      List<String> list1 = load0.getFields();
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transform transform0 = new Transform();
      XGridAdd xGridAdd0 = new XGridAdd();
      transform0.addModifier(xGridAdd0);
      transform0.reset();
      assertFalse(transform0.isSuccessfullyGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Colors colors0 = new Colors();
      colors0.getFields();
      YGridRemove yGridRemove0 = new YGridRemove();
      yGridRemove0.setSuccessfullyGeneratedScript(true);
      yGridRemove0.getPropertyLastChange("0E");
      Change<Object> change0 = new Change<Object>("zkV.zZ=JG 0DH^7o4r>", (Object) null);
      yGridRemove0.getViewDataSetChanges();
      yGridRemove0.onChange(change0);
      yGridRemove0.isMethod();
      yGridRemove0.getFields();
      yGridRemove0.setSuccessfullyGeneratedScript(false);
      Modifier modifier0 = colors0.addModifier(yGridRemove0);
      Load load0 = new Load();
      modifier0.addModifier(load0);
      modifier0.getScript("zkV.zZ=JG 0DH^7o4r>", 0);
      Modifier modifier1 = modifier0.addModifier(yGridRemove0);
      modifier1.totalDuration();
      modifier0.isSuccessfullyGeneratedScript();
      assertFalse(yGridRemove0.isSuccessfullyGeneratedScript());
      
      YGridAdd yGridAdd0 = new YGridAdd();
      yGridAdd0.getFields();
      colors0.isTimeoutable();
      Names names0 = new Names();
      names0.totalDuration();
      names0.getFields();
      names0.isTimeoutable();
      names0.getFields();
      TransformType transformType0 = new TransformType("rz;W", "");
      transformType0.includePropName();
      assertFalse(transformType0.isComposite());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Colors colors0 = new Colors();
      colors0.isSuccessfullyGeneratedScript();
      TransformTypes transformTypes0 = new TransformTypes();
      Modifier modifier0 = transformTypes0.addModifier(colors0);
      modifier0.getViewDataSetChanges();
      colors0.addModifier(transformTypes0);
      XGridRemove xGridRemove0 = new XGridRemove();
      LegendShow legendShow0 = new LegendShow();
      xGridRemove0.reset();
      List<String> list0 = legendShow0.getFields();
      xGridRemove0.setFields(list0);
      xGridRemove0.isMethod();
      List<String> list1 = colors0.getFields();
      legendShow0.isSuccessfullyGeneratedScript();
      modifier0.setFields(list1);
      xGridRemove0.setFields(list0);
      assertFalse(xGridRemove0.isSuccessfullyGeneratedScript());
      
      String string0 = modifier0.getScript("", (-1));
      assertEquals("", string0);
      
      Names names0 = new Names();
      names0.getDuration();
      YGridAdd yGridAdd0 = new YGridAdd();
      yGridAdd0.getFields();
      colors0.getFields();
      assertFalse(colors0.includePropName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      XGridAdd xGridAdd0 = new XGridAdd();
      List<String> list0 = xGridAdd0.getFields();
      yGridRemove0.setFields(list0);
      yGridRemove0.getViewDataSetChanges();
      yGridRemove0.isMethod();
      yGridRemove0.getDuration();
      TransformType transformType0 = new TransformType("5*0MyW8", "(0GRu");
      assertFalse(transformType0.isComposite());
      
      transformType0.addModifier(xGridAdd0);
      transformType0.includePropName();
      yGridRemove0.isMethod();
      Names names0 = new Names();
      names0.getFields();
      TransformTypes transformTypes0 = new TransformTypes();
      transformTypes0.getDuration();
      Colors colors0 = new Colors();
      colors0.getFields();
      colors0.getFields();
      transformTypes0.isComposite();
      transformTypes0.getViewDataSetChanges();
      xGridAdd0.getFields();
      transformTypes0.getDuration();
      transformTypes0.getModifiers();
      colors0.getViewDataSetChanges();
      yGridRemove0.setFields(list0);
      colors0.getFields();
      yGridRemove0.getScript("(0GRu", 0);
      LegendHide legendHide0 = new LegendHide();
      legendHide0.isMethod();
      xGridAdd0.isMethod();
      legendHide0.getModifiers();
      transformType0.includePropName();
      assertTrue(transformType0.isComposite());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Names names0 = new Names();
      names0.getDuration();
      names0.includePropName();
      TransformTypes transformTypes0 = new TransformTypes();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      names0.setFields(linkedList0);
      Change<Object> change0 = new Change<Object>(")iS-Zpi/A1wOh!):", linkedList0);
      transformTypes0.onChange(change0);
      transformTypes0.setFields(linkedList0);
      transformTypes0.getDuration();
      names0.getScript("fgqFoBxi(WxtOR(X}=", (-1));
      YGridAdd yGridAdd0 = new YGridAdd();
      String string0 = yGridAdd0.getScript("fgqFoBxi(WxtOR(X}=", 0);
      assertEquals("", string0);
      
      yGridAdd0.getViewDataSetChanges();
      yGridAdd0.getFields();
      yGridAdd0.getFields();
      transformTypes0.reset();
      Colors colors0 = new Colors();
      colors0.getFields();
      yGridAdd0.reset();
      assertFalse(yGridAdd0.isSuccessfullyGeneratedScript());
      
      boolean boolean0 = transformTypes0.includePropName();
      assertFalse(boolean0);
      
      colors0.getDuration();
      LegendShow legendShow0 = new LegendShow();
      legendShow0.getFields();
      assertFalse(legendShow0.includePropName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TransformType transformType0 = new TransformType("; \n", "; \n");
      transformType0.getFields();
      XGridRemove xGridRemove0 = new XGridRemove();
      Change<Object> change0 = new Change<Object>("eKmP&@j7e,m436=O`}", transformType0);
      xGridRemove0.onChange(change0);
      transformType0.totalDuration();
      List<String> list0 = xGridRemove0.getFields();
      transformType0.getFields();
      Names names0 = new Names();
      names0.isTimeoutable();
      Modifier modifier0 = transformType0.addModifier(xGridRemove0);
      modifier0.setFields(list0);
      modifier0.getScript("", 0);
      transformType0.getScript("setTimeout(function () {", 330);
      modifier0.getScript("setTimeout(function () {setTimeout(function () {.xgrids.transform('; \n', '; \n')}, 330); \n", 0);
      assertTrue(modifier0.isSuccessfullyGeneratedScript());
      
      Colors colors0 = new Colors();
      colors0.isTimeoutable();
      assertFalse(colors0.isComposite());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transform transform0 = new Transform();
      Transform transform1 = new Transform();
      transform0.addModifier(transform1);
      assertFalse(transform1.isComposite());
      
      int int0 = transform0.totalDuration();
      assertTrue(transform0.isComposite());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transform transform0 = new Transform();
      XGridRemove xGridRemove0 = new XGridRemove();
      Modifier modifier0 = transform0.addModifier(xGridRemove0);
      assertTrue(modifier0.isTimeoutable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TransformType transformType0 = new TransformType(", ", ", ");
      YGridAdd yGridAdd0 = new YGridAdd();
      transformType0.addModifier(yGridAdd0);
      transformType0.getScript(", ", 494);
      assertTrue(transformType0.isSuccessfullyGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      yGridRemove0.getViewDataSetChanges();
      Names names0 = new Names();
      yGridRemove0.addModifier(names0);
      yGridRemove0.getViewDataSetChanges();
      yGridRemove0.getScript("jTuOo$\"{'-@", 0);
      yGridRemove0.getFields();
      LegendHide legendHide0 = new LegendHide();
      List<String> list0 = legendHide0.getFields();
      yGridRemove0.setFields(list0);
      yGridRemove0.isComposite();
      legendHide0.isMethod();
      yGridRemove0.getModifiers();
      Colors colors0 = new Colors();
      colors0.getDuration();
      colors0.getFields();
      YGridRemove yGridRemove1 = new YGridRemove();
      Change<Object> change0 = new Change<Object>("jTuOo$\"{'-@", yGridRemove1);
      colors0.onChange(change0);
      legendHide0.getFields();
      XGridAdd xGridAdd0 = new XGridAdd();
      xGridAdd0.getFields();
      colors0.totalDuration();
      TransformType transformType0 = new TransformType("jTuOo$\"{'-@", (String) null);
      transformType0.includePropName();
      colors0.isTimeoutable();
      yGridRemove0.getDuration();
      assertTrue(yGridRemove0.isComposite());
      
      xGridAdd0.getFields();
      xGridAdd0.reset();
      colors0.getFields();
      names0.getDuration();
      transformType0.getScript((String) null, 776);
      assertFalse(transformType0.isComposite());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transform transform0 = new Transform();
      String string0 = transform0.getScript((String) null, (-32));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XGridRemove xGridRemove0 = new XGridRemove();
      xGridRemove0.isMethod();
      YGridRemove yGridRemove0 = new YGridRemove();
      Change<YGridRemove> change0 = new Change<YGridRemove>("", yGridRemove0);
      xGridRemove0.onChange(change0);
      assertFalse(xGridRemove0.isMethod());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XGridRemove xGridRemove0 = new XGridRemove();
      YGridRemove yGridRemove0 = new YGridRemove();
      Change<YGridRemove> change0 = new Change<YGridRemove>("", yGridRemove0);
      xGridRemove0.onChange(change0);
      assertTrue(xGridRemove0.isTimeoutable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YGridAdd yGridAdd0 = new YGridAdd();
      YGridRemove yGridRemove0 = new YGridRemove();
      List<String> list0 = yGridRemove0.getFields();
      yGridAdd0.setFields(list0);
      yGridAdd0.getScript("&", 500);
      TransformTypes transformTypes0 = new TransformTypes();
      yGridAdd0.getFields();
      transformTypes0.getDuration();
      transformTypes0.totalDuration();
      transformTypes0.getScript("", 0);
      transformTypes0.getViewDataSetChanges();
      yGridAdd0.getScript("@}_OO@os", 0);
      Colors colors0 = new Colors();
      Modifier modifier0 = colors0.addModifier(yGridAdd0);
      modifier0.reset();
      colors0.getFields();
      colors0.setFields(list0);
      yGridAdd0.isSuccessfullyGeneratedScript();
      yGridRemove0.isMethod();
      colors0.getFields();
      colors0.getDuration();
      colors0.isComposite();
      assertTrue(colors0.isComposite());
      
      TransformType transformType0 = new TransformType("&", "Z)K?#v0He");
      transformType0.includePropName();
      assertFalse(transformType0.isComposite());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XGridRemove xGridRemove0 = new XGridRemove();
      xGridRemove0.setFields((List<String>) null);
      List<String> list0 = xGridRemove0.getFields();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transform transform0 = new Transform();
      int int0 = transform0.getDuration();
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transform transform0 = new Transform();
      transform0.reset();
      assertFalse(transform0.isSuccessfullyGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LegendHide legendHide0 = new LegendHide();
      List<Modifier> list0 = legendHide0.getModifiers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Colors colors0 = new Colors();
      colors0.setSuccessfullyGeneratedScript(false);
      colors0.getModifiers();
      Transform transform0 = new Transform();
      transform0.includePropName();
      YGridAdd yGridAdd0 = new YGridAdd();
      yGridAdd0.setSuccessfullyGeneratedScript(true);
      yGridAdd0.setSuccessfullyGeneratedScript(false);
      List<String> list0 = yGridAdd0.getFields();
      transform0.setFields(list0);
      LegendHide legendHide0 = new LegendHide();
      legendHide0.isMethod();
      XGridRemove xGridRemove0 = new XGridRemove();
      transform0.setFields(list0);
      xGridRemove0.getViewDataSetChanges();
      xGridRemove0.isMethod();
      xGridRemove0.getFields();
      xGridRemove0.setSuccessfullyGeneratedScript(true);
      colors0.isMethod();
      transform0.includePropName();
      colors0.getFields();
      xGridRemove0.getDuration();
      assertTrue(xGridRemove0.isSuccessfullyGeneratedScript());
      
      colors0.isTimeoutable();
      legendHide0.getFields();
      legendHide0.isComposite();
      legendHide0.getFields();
      legendHide0.totalDuration();
      boolean boolean0 = transform0.isTimeoutable();
      transform0.reset();
      Names names0 = new Names();
      boolean boolean1 = names0.isTimeoutable();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LegendShow legendShow0 = new LegendShow();
      boolean boolean0 = legendShow0.isMethod();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transform transform0 = new Transform();
      String string0 = transform0.getScript("?Wg34RRz<?6~Q%|P", 162);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YGridRemove yGridRemove0 = new YGridRemove();
      boolean boolean0 = yGridRemove0.includePropName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TransformType transformType0 = new TransformType(", ", ", ");
      transformType0.getScript(", ", 8);
      assertTrue(transformType0.isSuccessfullyGeneratedScript());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Names names0 = new Names();
      names0.getFields();
      names0.getViewDataSetChanges();
      String string0 = names0.getScript("hy]mp,z),2>KwE|", 0);
      assertEquals("", string0);
      
      names0.getFields();
      names0.isSuccessfullyGeneratedScript();
      TransformTypes transformTypes0 = new TransformTypes();
      transformTypes0.getDuration();
      Colors colors0 = new Colors();
      colors0.isTimeoutable();
      assertFalse(colors0.includePropName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TransformTypes transformTypes0 = new TransformTypes();
      // Undeclared exception!
      try { 
        transformTypes0.onChange((Change<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.listener.change.Changes", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Transform transform0 = new Transform();
      int int0 = transform0.totalDuration();
      assertFalse(transform0.isComposite());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Load load0 = new Load();
      load0.getViewDataSetChanges();
      load0.totalDuration();
      TransformTypes transformTypes0 = new TransformTypes();
      // Undeclared exception!
      try { 
        transformTypes0.onChange((Change<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.listener.change.Changes", e);
      }
  }
}
