/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:44:45 GMT 2022
 */

package org.kivio.c3faces.script.property;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.listener.ChangeListener;
import org.kivio.c3faces.script.property.Size;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Size_ESTest extends Size_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-2670));
      Integer integer1 = new Integer((-1));
      Size size0 = new Size(integer0, integer1);
      assertEquals((-1), (int)size0.getHeight());
      assertEquals((-2670), (int)size0.getWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Size size0 = new Size();
      size0.preScriptBuild();
      assertEquals(": ", size0.getSeparator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = new Integer(0);
      size0.setWidth(integer0);
      Integer integer1 = size0.getWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1071);
      Size size0 = new Size(integer0, integer0);
      Integer integer1 = size0.getWidth();
      assertEquals(1071, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Size size0 = new Size(integer0, integer0);
      Size.NAME = null;
      String string0 = size0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-220));
      Size size0 = new Size(integer0, integer0);
      String string0 = size0.getName();
      assertEquals("size", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Size size0 = new Size();
      Size.NAME = "";
      String string0 = size0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = new Integer(0);
      size0.setHeight(integer0);
      Integer integer1 = size0.getHeight();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1071);
      Size size0 = new Size(integer0, integer0);
      Integer integer1 = size0.getHeight();
      assertEquals(1071, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2670));
      Size size0 = new Size(integer0, integer0);
      size0.addListener((ChangeListener) null);
      // Undeclared exception!
      try { 
        size0.setWidth(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.script.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-2670));
      Size size0 = new Size(integer0, integer0);
      size0.addListener((ChangeListener) null);
      // Undeclared exception!
      try { 
        size0.setHeight(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.kivio.c3faces.script.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = Integer.valueOf((-1));
      size0.setWidth(integer0);
      Integer integer1 = size0.getWidth();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = size0.getWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = Integer.valueOf((-1));
      size0.setHeight(integer0);
      Integer integer1 = size0.getHeight();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Size size0 = new Size();
      Integer integer0 = size0.getHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Size size0 = new Size(integer0, integer0);
      String string0 = size0.getScript();
      assertEquals("size: \n{width: 0, \nheight: 0}", string0);
  }
}
