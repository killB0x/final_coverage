/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:14:01 GMT 2022
 */

package org.kivio.c3faces.script.property;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.script.property.Axis;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("^tZN d!HIs/oVk>Ah|");
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      Integer integer0 = new Integer(3893);
      Axis.Type axis_Type1 = Axis.Type.INDEXED;
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0, boolean0, axis_Type1, (Set<String>) null, boolean0, integer0);
      assertEquals(Axis.Type.INDEXED, axis0.getTypeY());
      assertEquals(Axis.Type.TIMESERIES, axis0.getTypeX());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("^tZN d!HIs/oVk>Ah|");
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer(3893);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Axis.Type axis_Type1 = axis0.getTypeY();
      assertEquals(Axis.Type.TIMESERIES, axis_Type1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Axis axis0 = new Axis();
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      axis0.setTypeX(axis_Type0);
      Axis.Type axis_Type1 = axis0.getTypeX();
      assertSame(axis_Type1, axis_Type0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      Integer integer0 = new Integer(0);
      Axis axis0 = new Axis((Boolean) null, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0, boolean0, axis_Type0, (Set<String>) null, (Boolean) null, integer0);
      Boolean boolean1 = Boolean.FALSE;
      axis0.setShowY(boolean1);
      Boolean boolean2 = axis0.getShowY();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = Boolean.TRUE;
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer((-3162));
      Axis axis0 = new Axis(boolean0, boolean1, axis_Type0, linkedHashSet0, boolean0, integer0, boolean1, axis_Type0, linkedHashSet0, boolean1, integer0);
      Boolean boolean2 = axis0.getShowX();
      assertFalse(axis0.getRotated());
      assertTrue(axis0.getShowY());
      assertTrue(boolean2);
      assertFalse(axis0.getLocaltimeX());
      assertTrue(axis0.getLocaltimeY());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf((String) null);
      axis0.setShowX(boolean0);
      Boolean boolean1 = axis0.getShowX();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf(true);
      axis0.setRotated(boolean0);
      Boolean boolean1 = axis0.getRotated();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf((String) null);
      axis0.setRotated(boolean0);
      Boolean boolean1 = axis0.getRotated();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Axis axis0 = new Axis();
      String string0 = axis0.getName();
      assertEquals("axis", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Boolean boolean1 = axis0.getLocaltimeY();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer((-3162));
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Boolean boolean1 = axis0.getLocaltimeY();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf(true);
      axis0.setLocaltimeX(boolean0);
      Boolean boolean1 = axis0.getLocaltimeX();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.FALSE;
      axis0.setLocaltimeX(boolean0);
      Boolean boolean1 = axis0.getLocaltimeX();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      Integer integer0 = new Integer((-766));
      Integer integer1 = new Integer(0);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, (Set<String>) null, (Boolean) null, integer0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer1);
      Integer integer2 = axis0.getHeightY();
      assertEquals(0, (int)integer2);
      assertEquals((-766), (int)axis0.getHeightX());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("^tZN d!HIs/oVk>Ah|");
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      Integer integer0 = new Integer(3893);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0);
      Integer integer1 = axis0.getHeightY();
      assertEquals(3893, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Axis axis0 = new Axis();
      Integer integer0 = Integer.getInteger("CATEGORY", (-1));
      axis0.setHeightY(integer0);
      Integer integer1 = axis0.getHeightY();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer(0);
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, (Boolean) null, axis_Type0, (Set<String>) null, (Boolean) null, integer0);
      Integer integer1 = axis0.getHeightX();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("^tZN d!HIs/oVk>Ah|");
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      Integer integer0 = new Integer(3893);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0, boolean0, axis_Type0, (Set<String>) null, boolean0, integer0);
      Integer integer1 = axis0.getHeightX();
      assertEquals(3893, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Axis axis0 = new Axis();
      Integer integer0 = Integer.getInteger("CATEGORY", (-1));
      axis0.setHeightX(integer0);
      Integer integer1 = axis0.getHeightX();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Axis axis0 = new Axis();
      Set<String> set0 = axis0.getCategoriesY();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Axis.Type axis_Type0 = Axis.Type.CATEGORY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Integer integer0 = Integer.getInteger("", 0);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Set<String> set0 = axis0.getCategoriesY();
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Axis axis0 = new Axis();
      Set<String> set0 = axis0.getCategoriesX();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Axis.Type axis_Type0 = Axis.Type.CATEGORY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Integer integer0 = Integer.getInteger("", 0);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Set<String> set0 = axis0.getCategoriesX();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = new Integer((-20));
      Axis axis0 = new Axis((Boolean) null, (Boolean) null, axis_Type0, linkedHashSet0, (Boolean) null, integer0, (Boolean) null, axis_Type0, linkedHashSet0, (Boolean) null, integer0);
      String string0 = axis0.getScript();
      assertEquals("axis: \n{x: \n{type: 'indexed', \nheight: -20}, \ny: \n{type: 'indexed', \nheight: -20}}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      axis0.preScriptBuild();
      assertEquals(0, (int)axis0.getHeightY());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf((String) null);
      axis0.setRotated(boolean0);
      axis0.preScriptBuild();
      assertNull(axis0.getLocaltimeX());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = axis0.getShowY();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Axis axis0 = new Axis();
      Axis.Type axis_Type0 = Axis.Type.INDEXED;
      axis0.setTypeX(axis_Type0);
      String string0 = axis0.getScript(false);
      assertEquals("{x: \n{type: 'indexed'}}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = axis0.getLocaltimeY();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Axis axis0 = new Axis();
      Integer integer0 = axis0.getHeightY();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Axis axis0 = new Axis();
      Axis.Type axis_Type0 = Axis.Type.TIMESERIES;
      axis0.setTypeY(axis_Type0);
      assertEquals(Axis.Type.TIMESERIES, axis0.getTypeY());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = axis0.getLocaltimeX();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = axis0.getRotated();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Axis axis0 = new Axis();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      axis0.setCategoriesX(linkedHashSet0);
      axis0.preScriptBuild();
      assertNull(axis0.getTypeY());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Axis axis0 = new Axis();
      axis0.getTypeY();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = axis0.getShowX();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Axis.Type axis_Type0 = Axis.Type.CATEGORY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = Integer.getInteger("", 0);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Set<String> set0 = axis0.getCategoriesX();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Axis axis0 = new Axis();
      Integer integer0 = axis0.getHeightX();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.TRUE;
      axis0.setLocaltimeX(boolean0);
      axis0.preScriptBuild();
      assertNull(axis0.getRotated());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Axis.Type axis_Type0 = Axis.Type.CATEGORY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Integer integer0 = Integer.getInteger("", 0);
      Axis axis0 = new Axis(boolean0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0, boolean0, axis_Type0, linkedHashSet0, boolean0, integer0);
      Set<String> set0 = axis0.getCategoriesY();
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.valueOf(true);
      axis0.setShowY(boolean0);
      Boolean boolean1 = axis0.getShowY();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Axis axis0 = new Axis();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      axis0.setCategoriesY(linkedHashSet0);
      axis0.getScript();
      assertEquals("axis", axis0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Axis axis0 = new Axis();
      axis0.getTypeX();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Axis axis0 = new Axis();
      Boolean boolean0 = Boolean.TRUE;
      axis0.setLocaltimeY(boolean0);
      axis0.preScriptBuild();
      assertEquals("{", axis0.getPrefix());
  }
}
