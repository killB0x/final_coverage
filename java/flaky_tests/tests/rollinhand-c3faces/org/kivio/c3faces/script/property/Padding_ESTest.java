/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:35:52 GMT 2022
 */

package org.kivio.c3faces.script.property;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.script.property.Padding;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Padding_ESTest extends Padding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-3400));
      Integer integer1 = new Integer((-3400));
      Padding padding0 = new Padding(integer0, integer1, integer0, integer0);
      assertEquals((-3400), (int)padding0.getBottom());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Integer integer1 = padding0.getTop();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = Integer.getInteger("{");
      Integer integer1 = new Integer(1060);
      Padding padding0 = new Padding((Integer) null, (Integer) null, integer1, integer0);
      padding0.setTop(integer1);
      Integer integer2 = padding0.getTop();
      assertEquals(1060, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = new Integer((-3871));
      padding0.setTop(integer0);
      Integer integer1 = padding0.getTop();
      assertEquals((-3871), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-3400));
      Integer integer1 = new Integer(0);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer1);
      assertEquals((-3400), (int)padding0.getRight());
      
      padding0.setRight(integer1);
      padding0.getRight();
      assertEquals(0, (int)padding0.getBottom());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = new Integer(500);
      padding0.setRight(integer0);
      Integer integer1 = padding0.getRight();
      assertEquals(500, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = padding0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Padding padding0 = new Padding();
      Padding.NAME = null;
      String string0 = padding0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Padding.NAME = "";
      String string0 = padding0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = Integer.valueOf(0);
      padding0.setLeft(integer0);
      Integer integer1 = padding0.getLeft();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = padding0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-3400));
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Integer integer1 = padding0.getLeft();
      assertEquals((-3400), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = Integer.valueOf(0);
      padding0.setBottom(integer0);
      Integer integer1 = padding0.getBottom();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = padding0.getBottom();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1276);
      Integer integer1 = new Integer((-1564));
      Padding padding0 = new Padding(integer0, integer0, integer1, integer1);
      Integer integer2 = padding0.getBottom();
      assertEquals((-1564), (int)padding0.getLeft());
      assertEquals(1276, (int)padding0.getTop());
      assertEquals((-1564), (int)integer2);
      assertEquals(1276, (int)padding0.getRight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(809);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      String string0 = padding0.getScript();
      assertEquals("padding: \n{top: 809, \nright: 809, \nleft: 809, \nbottom: 809}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Padding padding0 = new Padding();
      padding0.preScriptBuild();
      assertNull(padding0.getTop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-3400));
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Integer integer1 = padding0.getRight();
      assertEquals((-3400), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(809);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Integer integer1 = padding0.getBottom();
      assertEquals(809, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(809);
      Padding padding0 = new Padding(integer0, integer0, integer0, integer0);
      Integer integer1 = padding0.getLeft();
      assertEquals(809, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Padding padding0 = new Padding();
      Integer integer0 = padding0.getTop();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Padding padding0 = new Padding();
      String string0 = padding0.getName();
      assertEquals("padding", string0);
  }
}
