/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 21:02:17 GMT 2022
 */

package org.kivio.c3faces.script;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.kivio.c3faces.listener.ChangeListener;
import org.kivio.c3faces.script.ObjectBlock;
import org.kivio.c3faces.script.Property;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectBlock_ESTest extends ObjectBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Property[] propertyArray0 = new Property[3];
      ObjectBlock objectBlock0 = new ObjectBlock(propertyArray0);
      assertEquals("{", objectBlock0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectBlock objectBlock0 = new ObjectBlock("", "_C76C1+N'Bdc+IND`M");
      String string0 = objectBlock0.getSuffix();
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectBlock objectBlock0 = new ObjectBlock("", "_C76C1+N'Bdc+IND`M");
      String string0 = objectBlock0.getPrefix();
      assertEquals("{", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Property[] propertyArray0 = new Property[3];
      ObjectBlock objectBlock0 = new ObjectBlock("", "_C76C1+N'Bdc+IND`M");
      propertyArray0[0] = (Property) objectBlock0;
      objectBlock0.addChild((Property) objectBlock0, true);
      objectBlock0.setBody("");
      ObjectBlock objectBlock1 = null;
      try {
        objectBlock1 = new ObjectBlock(propertyArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectBlock objectBlock0 = null;
      try {
        objectBlock0 = new ObjectBlock("", (Property[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectBlock objectBlock0 = new ObjectBlock("org.kivio.c3faces.script.CommaValueBlock");
      assertEquals(": ", objectBlock0.getSeparator());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjectBlock objectBlock0 = new ObjectBlock();
      assertEquals("}", objectBlock0.getSuffix());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Property[] propertyArray0 = new Property[3];
      ObjectBlock objectBlock0 = new ObjectBlock("org.kivio.c3faces.listener.change.Changes", propertyArray0);
      assertEquals(": ", objectBlock0.getSeparator());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjectBlock objectBlock0 = null;
      try {
        objectBlock0 = new ObjectBlock((Property[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ObjectBlock objectBlock0 = new ObjectBlock((List<ChangeListener>) null);
      assertEquals(": ", objectBlock0.getSeparator());
  }
}
