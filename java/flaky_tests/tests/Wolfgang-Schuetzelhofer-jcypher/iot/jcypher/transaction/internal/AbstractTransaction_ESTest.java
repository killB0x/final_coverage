/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:03:18 GMT 2022
 */

package iot.jcypher.transaction.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.database.remote.RTransactionImpl;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.internal.DomainAccess;
import iot.jcypher.domain.internal.DomainAccessSync;
import iot.jcypher.transaction.ITransaction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractTransaction_ESTest extends AbstractTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      RTransactionImpl rTransactionImpl0 = (RTransactionImpl)remoteDBAccess0.beginTX();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "iot.jcypher.query.api.pattern.Relation", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      DomainAccess.InternalDomainAccess domainAccess_InternalDomainAccess0 = domainAccess_GenericDomainAccess0.getInternalDomainAccess();
      DomainAccessSync domainAccessSync0 = mock(DomainAccessSync.class, new ViolatedAssumptionAnswer());
      doReturn(domainAccess_InternalDomainAccess0).when(domainAccessSync0).getInternalDomainAccess();
      rTransactionImpl0.setIntDomainAccess(domainAccessSync0);
      rTransactionImpl0.setNoInfoNodeId();
      rTransactionImpl0.close();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      RTransactionImpl rTransactionImpl0 = (RTransactionImpl)remoteDBAccess0.beginTX();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "iot.jcypher.query.api.pattern.Relation", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      DomainAccess.InternalDomainAccess domainAccess_InternalDomainAccess0 = domainAccess_GenericDomainAccess0.getInternalDomainAccess();
      DomainAccessSync domainAccessSync0 = mock(DomainAccessSync.class, new ViolatedAssumptionAnswer());
      doReturn(domainAccess_InternalDomainAccess0).when(domainAccessSync0).getInternalDomainAccess();
      rTransactionImpl0.setIntDomainAccess(domainAccessSync0);
      rTransactionImpl0.setDomainInfoChanged();
      rTransactionImpl0.close();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      ITransaction iTransaction0 = remoteDBAccess0.beginTX();
      iTransaction0.isClosed();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      RTransactionImpl rTransactionImpl0 = new RTransactionImpl(remoteDBAccess0);
      // Undeclared exception!
      try { 
        rTransactionImpl0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // close() must be called from within the same thread which created this transaction
         //
         verifyException("iot.jcypher.database.remote.RTransactionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      ITransaction iTransaction0 = remoteDBAccess0.beginTX();
      iTransaction0.close();
      iTransaction0.isClosed();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      ITransaction iTransaction0 = remoteDBAccess0.beginTX();
      iTransaction0.failure();
  }
}
