/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:06:18 GMT 2022
 */

package iot.jcypher.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.concurrency.Locking;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.graph.GrNode;
import iot.jcypher.graph.Graph;
import iot.jcypher.graph.SyncState;
import iot.jcypher.query.result.util.ResultHandler;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Graph_ESTest extends Graph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      graph0.getSyncState();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.getSyncState();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      GrNode grNode0 = graph0.createNode();
      GrNode grNode1 = graph0.createNode();
      graph0.createRelation("!I1", grNode0, grNode1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      // Undeclared exception!
      try { 
        graph0.store();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      Locking locking0 = Locking.NONE;
      // Undeclared exception!
      try { 
        graph0.setLockingStrategy(locking0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      // Undeclared exception!
      try { 
        graph0.setDBAccess(remoteDBAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      // Undeclared exception!
      try { 
        graph0.createRelation((String) null, (GrNode) null, (GrNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.GrAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      // Undeclared exception!
      try { 
        graph0.createNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      SyncState syncState0 = SyncState.CHANGED;
      graph0.setSyncState(syncState0);
      Locking locking0 = Locking.OPTIMISTIC;
      Graph graph1 = graph0.setLockingStrategy(locking0);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      graph1.store((Map<Long, Integer>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.createNode();
      Locking locking0 = Locking.OPTIMISTIC;
      Graph graph1 = graph0.setLockingStrategy(locking0);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      // Undeclared exception!
      try { 
        graph1.store((Map<Long, Integer>) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Graph graph0 = new Graph((ResultHandler) null);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      // Undeclared exception!
      try { 
        graph0.store((Map<Long, Integer>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      graph0.store((Map<Long, Integer>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.createNode();
      graph0.isModified();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.isModified();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      SyncState syncState0 = SyncState.NEW_REMOVED;
      graph0.setSyncState(syncState0);
      graph0.isModified();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.createNode();
      Locking locking0 = Locking.OPTIMISTIC;
      Graph graph1 = graph0.setLockingStrategy(locking0);
      // Undeclared exception!
      try { 
        graph1.store();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      SyncState syncState0 = SyncState.NEW_REMOVED;
      graph0.setSyncState(syncState0);
      Locking locking0 = Locking.OPTIMISTIC;
      graph0.setLockingStrategy(locking0);
      graph0.store();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      SyncState syncState0 = SyncState.SYNC;
      graph0.setSyncState(syncState0);
      graph0.store();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      graph0.setDBAccess(remoteDBAccess0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      Graph graph0 = Graph.create(remoteDBAccess0);
      GrNode grNode0 = graph0.createNode();
      graph0.createRelation("!I1", grNode0, grNode0);
      graph0.createRelation("!I1", grNode0, grNode0);
  }
}
