/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:04:15 GMT 2022
 */

package iot.jcypher.domain.mapping.surrogate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.DomainState;
import iot.jcypher.domain.mapping.surrogate.Array;
import iot.jcypher.domain.mapping.surrogate.ObservableList;
import iot.jcypher.domain.mapping.surrogate.SurrogateState;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Array_ESTest extends Array_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array array0 = new Array();
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      List<Object> list0 = array0.getListContent();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      ObservableList<Object> observableList0 = new ObservableList<Object>(0);
      observableList0.add((Object) null);
      array0.setListContent(observableList0);
      List<Object> list0 = array0.getListContent();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array array0 = new Array();
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      array0.setSize((-280));
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -280
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      List<Object> list0 = array0.getListContent();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      ObservableList<Object> observableList0 = new ObservableList<Object>(0);
      array0.setSize(5);
      array0.setListContent(observableList0);
      boolean boolean0 = observableList0.add(objectArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      ObservableList<Object> observableList0 = new ObservableList<Object>(0);
      array0.setListContent(observableList0);
      // Undeclared exception!
      try { 
        observableList0.add(objectArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // internal error array surrogate size
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array$Observer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Array array0 = new Array();
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      Object object0 = array0.objectToUpdate();
      boolean boolean0 = observableList0.add(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      ObservableList<Object> observableList0 = new ObservableList<Object>(0);
      array0.setListContent(observableList0);
      array0.setListContent(observableList0);
      assertEquals(0, observableList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Array array0 = new Array();
      array0.setSize(0);
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      observableList0.add((Object) array0);
      array0.setListContent(observableList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Array array0 = new Array();
      array0.setSize(0);
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Array array0 = new Array();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      array0.setListContent(linkedList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array array0 = new Array();
      array0.setSize(1470);
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Array array0 = new Array();
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // internal error array surrogate size
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Array array0 = new Array();
      Object[] objectArray0 = array0.getContent();
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      Object[] objectArray1 = array0.getContent();
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array array0 = new Array();
      array0.setSize(1);
      ObservableList<Object> observableList0 = new ObservableList<Object>();
      array0.setListContent(observableList0);
      Object object0 = array0.objectToUpdate();
      Object[] objectArray0 = new Object[0];
      array0.setContent(objectArray0);
      // Undeclared exception!
      try { 
        observableList0.add(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array array0 = new Array();
      Object[] objectArray0 = new Object[0];
      array0.setContent(objectArray0);
      Object[] objectArray1 = array0.getContent();
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      DomainState domainState0 = new DomainState();
      SurrogateState surrogateState0 = domainState0.getSurrogateState();
      array0.setSurrogateState(surrogateState0);
      assertEquals(0, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Array array0 = new Array(objectArray0);
      Object object0 = array0.objectToUpdate();
      assertNull(object0);
  }
}
