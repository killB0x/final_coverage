/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 18:28:03 GMT 2022
 */

package iot.jcypher.domain.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.MappingUtil;
import iot.jcypher.query.values.JcPrimitive;
import java.sql.Date;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.format.TextStyle;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MappingUtil_ESTest extends MappingUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Date date0 = new Date((-1L));
      Object object0 = MappingUtil.convertToProperty(date0);
      Class<java.util.Date> class1 = java.util.Date.class;
      Object object1 = MappingUtil.convertFromProperty(object0, class0, class1, class1);
      assertEquals((-1L), object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = MappingUtil.mapsToProperty(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      long long0 = MappingUtil.dateToLong(mockDate0);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Month> class0 = Month.class;
      java.util.Date date0 = MappingUtil.longToDate((-1225L), class0);
      long long0 = MappingUtil.dateToLong(date0);
      assertEquals((-1225L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        MappingUtil.stringToDate("math", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Unparseable date: \"math\"
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        MappingUtil.stringToDate((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.mapsToProperty((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.longToDate(1821L, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.isSimpleType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.getEnumValues((Class<? extends Enum<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.fromType((Class<?>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.dateToString((java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappingUtil.dateToLong((java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        MappingUtil.convertFromProperty((Object) class0, (Class<?>) null, (Class<?>) class0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        MappingUtil.convertFromProperty(object0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      Object[] objectArray0 = MappingUtil.getEnumValues(class0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      MockDate mockDate0 = new MockDate();
      Object object0 = MappingUtil.convertFromProperty((Object) mockDate0, (Class<?>) class0, (Class<?>) class0, (Class<?>) class0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Object object0 = MappingUtil.convertFromProperty((Object) null, class0, class0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Month> class0 = Month.class;
      java.util.Date date0 = MappingUtil.longToDate(0L, class0);
      long long0 = MappingUtil.dateToLong(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class class1 = (Class)MappingUtil.convertFromProperty((Object) class0, (Class<?>) class0, (Class<?>) class0, (Class<?>) class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      JcPrimitive jcPrimitive0 = MappingUtil.fromType(class0, "4");
      assertNotNull(jcPrimitive0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Month> class0 = Month.class;
      JcPrimitive jcPrimitive0 = MappingUtil.fromType(class0, ".v4|H~;@yv7$JB");
      assertNull(jcPrimitive0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Long long0 = new Long(1L);
      Object object0 = MappingUtil.convertFromProperty((Object) long0, (Class<?>) class0);
      Class<Long> class1 = Long.class;
      Object object1 = MappingUtil.convertFromProperty(object0, class1, class0, class0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Class<Locale.Category> class1 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = MappingUtil.convertFromProperty((Object) locale_Category0, (Class<?>) class0, (Class<?>) class1, (Class<?>) class0);
      assertSame(locale_Category0, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<Long> class0 = Long.TYPE;
      Object object0 = MappingUtil.convertToProperty(mockDate0);
      Object object1 = MappingUtil.convertFromProperty(object0, class0, class0, class0);
      assertEquals(1392409281320L, object1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4229, 4229, (-1339));
      Object object0 = MappingUtil.convertToProperty(mockDate0);
      Class<java.util.Date> class0 = java.util.Date.class;
      Object object1 = MappingUtil.convertFromProperty(object0, class0, class0, class0);
      assertEquals("Thu Sep 30 00:00:00 GMT 6477", object1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      Object object0 = MappingUtil.convertFromProperty((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.NARROW;
      Object object0 = MappingUtil.convertToProperty(textStyle0);
      assertEquals("NARROW", object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = MappingUtil.convertToProperty(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = MappingUtil.convertToProperty((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = MappingUtil.isSimpleType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      java.util.Date date0 = MappingUtil.stringToDate("01.01.1970-00:00:00:000", class0);
      Object object0 = MappingUtil.convertFromProperty((Object) date0, (Class<?>) class0, (Class<?>) class0, (Class<?>) class0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      java.util.Date date0 = MappingUtil.longToDate(0L, class0);
      MappingUtil.dateToString(date0);
      String string0 = MappingUtil.dateToString(date0);
      assertEquals("01.01.1970-00:00:00:000", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MappingUtil mappingUtil0 = new MappingUtil();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Month> class0 = Month.class;
      boolean boolean0 = MappingUtil.mapsToProperty(class0);
      assertTrue(boolean0);
  }
}
