/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:37:35 GMT 2022
 */

package iot.jcypher.domain.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.CompoundObjectType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompoundObjectType_ESTest extends CompoundObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      CompoundObjectType.TypeIterator compoundObjectType_TypeIterator0 = compoundObjectType0.new TypeIterator();
      compoundObjectType_TypeIterator0.hasNext();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompoundObjectType.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.CompoundObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompoundObjectType compoundObjectType0 = null;
      try {
        compoundObjectType0 = new CompoundObjectType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      boolean boolean0 = CompoundObjectType.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      compoundObjectType0.typeIterator();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      CompoundObjectType.TypeIterator compoundObjectType_TypeIterator0 = compoundObjectType0.new TypeIterator();
      compoundObjectType_TypeIterator0.next();
      compoundObjectType_TypeIterator0.next();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      compoundObjectType0.getTypes(false);
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      String string0 = compoundObjectType0.getTypeListString();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
      assertEquals("iot.jcypher.domain.mapping.CompoundObjectType", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      boolean boolean0 = compoundObjectType0.addType(class0);
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      CompoundObjectType.TypeIterator compoundObjectType_TypeIterator0 = compoundObjectType0.new TypeIterator();
      // Undeclared exception!
      try { 
        compoundObjectType_TypeIterator0.remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // operation not supported
         //
         verifyException("iot.jcypher.domain.mapping.CompoundObjectType$TypeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      List<Class<?>> list0 = compoundObjectType0.getTypes(true);
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      compoundObjectType0.getType();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType0.getCType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      // Undeclared exception!
      try { 
        compoundObjectType0.addType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.MappingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<CompoundObjectType> class0 = CompoundObjectType.class;
      CompoundObjectType compoundObjectType0 = new CompoundObjectType(class0);
      CompoundObjectType.CType compoundObjectType_CType0 = compoundObjectType0.getCType();
      assertEquals(CompoundObjectType.CType.COMPLEX, compoundObjectType_CType0);
  }
}
