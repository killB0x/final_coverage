/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:34:53 GMT 2022
 */

package iot.jcypher.domain.mapping.surrogate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.DomainState;
import iot.jcypher.domain.mapping.surrogate.AbstractSurrogate;
import iot.jcypher.domain.mapping.surrogate.Array;
import iot.jcypher.domain.mapping.surrogate.Map;
import iot.jcypher.domain.mapping.surrogate.SurrogateState;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SurrogateState_ESTest extends SurrogateState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      SurrogateState surrogateState0 = new SurrogateState();
      Class<AbstractSurrogate> class0 = AbstractSurrogate.class;
      surrogateState0.getCreateSurrogateFor(object0, class0);
      int int0 = surrogateState0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      // Undeclared exception!
      try { 
        surrogateState0.removeReference((DomainState.IRelation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.SurrogateState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array array0 = new Array();
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("c", map0, map0, map0);
      SurrogateState surrogateState0 = new SurrogateState();
      surrogateState0.addOriginal2Surrogate((Object) null, (AbstractSurrogate) array0);
      surrogateState0.addReference(domainState_KeyedRelation0);
      // Undeclared exception!
      try { 
        surrogateState0.createCopy((java.util.Map<DomainState.IRelation, DomainState.IRelation>) null, (DomainState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.SurrogateState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      // Undeclared exception!
      try { 
        surrogateState0.addReference((DomainState.IRelation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.SurrogateState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Array array0 = new Array(objectArray0);
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation((String) null, array0, objectArray0[3], array0);
      SurrogateState.ReferredSurrogate<AbstractSurrogate> surrogateState_ReferredSurrogate0 = new SurrogateState.ReferredSurrogate<AbstractSurrogate>(array0);
      surrogateState_ReferredSurrogate0.removeReference(domainState_KeyedRelation0);
      assertNull(domainState_KeyedRelation0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Array array0 = new Array();
      SurrogateState.ReferredSurrogate<AbstractSurrogate> surrogateState_ReferredSurrogate0 = new SurrogateState.ReferredSurrogate<AbstractSurrogate>(array0);
      int int0 = surrogateState_ReferredSurrogate0.getReferenceCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Array array0 = new Array();
      SurrogateState.ReferredSurrogate<AbstractSurrogate> surrogateState_ReferredSurrogate0 = new SurrogateState.ReferredSurrogate<AbstractSurrogate>(array0);
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("", map0, map0, map0);
      DomainState.KeyedRelationToChange domainState_KeyedRelationToChange0 = new DomainState.KeyedRelationToChange(domainState_KeyedRelation0, domainState_KeyedRelation0);
      surrogateState_ReferredSurrogate0.addReference(domainState_KeyedRelationToChange0);
      surrogateState_ReferredSurrogate0.addReference(domainState_KeyedRelationToChange0);
      assertEquals(1, surrogateState_ReferredSurrogate0.getReferenceCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      HashMap<DomainState.IRelation, DomainState.IRelation> hashMap0 = new HashMap<DomainState.IRelation, DomainState.IRelation>();
      surrogateState0.addOriginal2Surrogate((Object) hashMap0, map0);
      assertEquals(1, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Array array0 = new Array();
      Object object0 = new Object();
      SurrogateState surrogateState0 = new SurrogateState();
      Class<AbstractSurrogate> class0 = AbstractSurrogate.class;
      surrogateState0.getCreateSurrogateFor(object0, class0);
      surrogateState0.addOriginal2Surrogate((Object) null, (AbstractSurrogate) array0);
      assertEquals(2, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Array array0 = new Array();
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("", map0, map0, map0);
      SurrogateState surrogateState0 = new SurrogateState();
      surrogateState0.addOriginal2Surrogate((Object) null, (AbstractSurrogate) array0);
      surrogateState0.addReference(domainState_KeyedRelation0);
      surrogateState0.removeUnreferenced();
      assertEquals(1, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("", surrogateState0, surrogateState0, map0);
      surrogateState0.removeReference(domainState_KeyedRelation0);
      assertFalse(domainState_KeyedRelation0.isDeferred());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DomainState domainState0 = new DomainState();
      Object object0 = new Object();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation(", getEnd()=", object0, object0, ", getEnd()=");
      SurrogateState surrogateState0 = domainState0.getSurrogateState();
      surrogateState0.removeReference(domainState_KeyedRelation0);
      assertFalse(domainState_KeyedRelation0.isDeferred());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("!@gUqAqR`<", map0, "!@gUqAqR`<", map0);
      DomainState.KeyedRelationToChange domainState_KeyedRelationToChange0 = new DomainState.KeyedRelationToChange(domainState_KeyedRelation0, domainState_KeyedRelation0);
      surrogateState0.addReference(domainState_KeyedRelationToChange0);
      assertEquals(0, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      DomainState.Relation domainState_Relation0 = new DomainState.Relation("1CZ[]+sv((u\"K", "1CZ[]+sv((u\"K", "1CZ[]+sv((u\"K");
      surrogateState0.addReference(domainState_Relation0);
      assertEquals(0, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      surrogateState0.addOriginal2Surrogate((Object) map0, map0);
      Class<Map> class0 = Map.class;
      surrogateState0.getCreateSurrogateFor((Object) map0, class0);
      assertEquals(1, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      Map map1 = new Map();
      surrogateState0.addOriginal2Surrogate((Object) map0, map1);
      // Undeclared exception!
      try { 
        surrogateState0.addOriginal2Surrogate((Object) map0, map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error existing surrogate map
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.SurrogateState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array array0 = new Array();
      Map map0 = new Map();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation("", map0, map0, map0);
      SurrogateState surrogateState0 = new SurrogateState();
      surrogateState0.addOriginal2Surrogate((Object) null, (AbstractSurrogate) array0);
      surrogateState0.addReference(domainState_KeyedRelation0);
      HashMap<DomainState.IRelation, DomainState.IRelation> hashMap0 = new HashMap<DomainState.IRelation, DomainState.IRelation>();
      surrogateState0.createCopy(hashMap0, (DomainState) null);
      surrogateState0.createCopy(hashMap0, (DomainState) null);
      assertEquals(1, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      HashMap<DomainState.IRelation, DomainState.IRelation> hashMap0 = new HashMap<DomainState.IRelation, DomainState.IRelation>();
      SurrogateState surrogateState1 = surrogateState0.createCopy(hashMap0, (DomainState) null);
      assertNotSame(surrogateState1, surrogateState0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      int int0 = surrogateState0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DomainState domainState0 = new DomainState();
      Map map0 = new Map();
      Object object0 = new Object();
      DomainState.KeyedRelation domainState_KeyedRelation0 = new DomainState.KeyedRelation(", getEnd()=", object0, object0, ", getEnd()=");
      DomainState.KeyedRelation domainState_KeyedRelation1 = new DomainState.KeyedRelation("$VALUES", domainState_KeyedRelation0, domainState0, map0);
      SurrogateState surrogateState0 = domainState0.getSurrogateState();
      surrogateState0.addOriginal2Surrogate((Object) null, (AbstractSurrogate) map0);
      surrogateState0.removeReference(domainState_KeyedRelation1);
      assertEquals(1, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Object object0 = new Object();
      Class<AbstractSurrogate> class0 = AbstractSurrogate.class;
      surrogateState0.getCreateSurrogateFor(object0, class0);
      surrogateState0.removeUnreferenced();
      assertEquals(0, surrogateState0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Array array0 = new Array();
      SurrogateState.ReferredSurrogate<AbstractSurrogate> surrogateState_ReferredSurrogate0 = new SurrogateState.ReferredSurrogate<AbstractSurrogate>(array0);
      AbstractSurrogate abstractSurrogate0 = surrogateState_ReferredSurrogate0.getSurrogate();
      assertSame(abstractSurrogate0, array0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SurrogateState surrogateState0 = new SurrogateState();
      Map map0 = new Map();
      surrogateState0.addOriginal2Surrogate((Object) map0, map0);
      surrogateState0.addOriginal2Surrogate((Object) map0, map0);
      assertEquals(1, surrogateState0.size());
  }
}
