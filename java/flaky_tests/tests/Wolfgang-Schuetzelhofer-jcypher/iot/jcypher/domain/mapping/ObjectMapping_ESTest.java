/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:57:22 GMT 2022
 */

package iot.jcypher.domain.mapping;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.FieldMapping;
import iot.jcypher.domain.mapping.NodeLabelMapping;
import iot.jcypher.domain.mapping.SimpleObjectMapping;
import iot.jcypher.graph.GrNode;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectMapping_ESTest extends ObjectMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      NodeLabelMapping nodeLabelMapping0 = new NodeLabelMapping("sCiufBNh7");
      simpleObjectMapping0.setNodeLabelMapping(nodeLabelMapping0);
      NodeLabelMapping nodeLabelMapping1 = simpleObjectMapping0.getNodeLabelMapping();
      assertEquals("sCiufBNh7", nodeLabelMapping1.getLabel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      FieldMapping fieldMapping0 = simpleObjectMapping0.getFieldMappingForField("4}~QF2x$Ph!su");
      assertNull(fieldMapping0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      Iterator<FieldMapping> iterator0 = simpleObjectMapping0.fieldMappingsIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      simpleObjectMapping0.addFieldMapping((FieldMapping) null);
      // Undeclared exception!
      try { 
        simpleObjectMapping0.getFieldMappingForField("|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.SimpleObjectMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      simpleObjectMapping0.addFieldMapping((FieldMapping) null);
      GrNode grNode0 = mock(GrNode.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleObjectMapping0.mapPropertiesToObject(simpleObjectMapping0, grNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.ObjectMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      GrNode grNode0 = mock(GrNode.class, new ViolatedAssumptionAnswer());
      simpleObjectMapping0.mapPropertiesToObject(simpleObjectMapping0, grNode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      simpleObjectMapping0.addFieldMapping((FieldMapping) null);
      // Undeclared exception!
      try { 
        simpleObjectMapping0.mapPropertiesFromObject((Object) null, (GrNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.ObjectMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      NodeLabelMapping nodeLabelMapping0 = new NodeLabelMapping("sCiufBNh7");
      simpleObjectMapping0.setNodeLabelMapping(nodeLabelMapping0);
      // Undeclared exception!
      try { 
        simpleObjectMapping0.mapPropertiesFromObject("sCiufBNh7", (GrNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.NodeLabelMapping", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      GrNode grNode0 = mock(GrNode.class, new ViolatedAssumptionAnswer());
      simpleObjectMapping0.mapPropertiesFromObject(simpleObjectMapping0, grNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      boolean boolean0 = simpleObjectMapping0.shouldPerformFieldMapping((FieldMapping) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleObjectMapping simpleObjectMapping0 = new SimpleObjectMapping();
      NodeLabelMapping nodeLabelMapping0 = simpleObjectMapping0.getNodeLabelMapping();
      assertNull(nodeLabelMapping0);
  }
}
