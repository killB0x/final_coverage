/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:48:54 GMT 2022
 */

package iot.jcypher.domain.mapping.surrogate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.surrogate.AbstractSurrogate;
import iot.jcypher.domain.mapping.surrogate.Array;
import iot.jcypher.domain.mapping.surrogate.Collection;
import iot.jcypher.domain.mapping.surrogate.Map;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSurrogate_ESTest extends AbstractSurrogate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Array array0 = new Array(objectArray0);
      Object object0 = array0.objectToUpdate();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Collection collection0 = new Collection();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      collection0.setContent(linkedList0);
      LinkedList linkedList1 = (LinkedList)collection0.objectToUpdate();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Collection collection0 = new Collection();
      Object object0 = collection0.getContent();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Array array0 = new Array();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      array0.setListContent(linkedList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Array array0 = new Array();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      array0.setSize((-3382));
      array0.setListContent(linkedList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3382
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Array array0 = new Array();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      array0.setSize(0);
      linkedList0.addFirst(object0);
      array0.setListContent(linkedList0);
      // Undeclared exception!
      try { 
        array0.getContent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Map map0 = new Map();
      AbstractSurrogate abstractSurrogate0 = AbstractSurrogate.createSurrogate(map0);
      assertNull(abstractSurrogate0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Array array0 = new Array(objectArray0);
      Object object0 = array0.getContent();
      AbstractSurrogate abstractSurrogate0 = AbstractSurrogate.createSurrogate(object0);
      assertNotSame(abstractSurrogate0, array0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractSurrogate abstractSurrogate0 = AbstractSurrogate.createSurrogate(hashMap0);
      assertNotNull(abstractSurrogate0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Collection collection0 = (Collection)AbstractSurrogate.createSurrogate(linkedList0);
      assertNull(collection0.getCollType());
  }
}
