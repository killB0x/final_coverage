/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:36:57 GMT 2022
 */

package iot.jcypher.domain.mapping.surrogate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.surrogate.MapEntry;
import iot.jcypher.domain.mapping.surrogate.MapEntryUpdater;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapEntryUpdater_ESTest extends MapEntryUpdater_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      mapEntryUpdater0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry((Object) null, (Object) null);
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, (java.util.Map<Object, Object>) null);
      Object object0 = mapEntryUpdater0.objectToUpdate();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      MapEntry mapEntry1 = mapEntryUpdater0.getMapEntry();
      assertSame(mapEntry1, mapEntry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, (java.util.Map<Object, Object>) null);
      java.util.Map<Object, Object> map0 = mapEntryUpdater0.getMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(mapEntry0, mapEntry0);
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      java.util.Map<Object, Object> map0 = mapEntryUpdater0.getMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater((MapEntry) null, hashMap0);
      Object object0 = mapEntryUpdater0.entry2Update();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      mapEntry0.setKey(hashMap0);
      Object object0 = new Object();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      Object object1 = mapEntryUpdater0.objectToUpdate();
      hashMap0.put(object0, object1);
      MapEntryUpdater mapEntryUpdater1 = new MapEntryUpdater(mapEntry0, hashMap0);
      Object object2 = mapEntryUpdater1.entry2Update();
      hashMap0.putIfAbsent(mapEntryUpdater1, object2);
      // Undeclared exception!
      mapEntryUpdater1.performUpdate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, (java.util.Map<Object, Object>) null);
      // Undeclared exception!
      try { 
        mapEntryUpdater0.performUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.MapEntryUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      java.util.Map<Object, Object> map0 = mapEntryUpdater0.getMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater((MapEntry) null, hashMap0);
      MapEntry mapEntry0 = mapEntryUpdater0.getMapEntry();
      assertNull(mapEntry0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater((MapEntry) null, hashMap0);
      MapEntryUpdater mapEntryUpdater1 = new MapEntryUpdater((MapEntry) null, hashMap0);
      boolean boolean0 = mapEntryUpdater0.equals(mapEntryUpdater1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry((Object) null, (Object) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      Object object0 = mapEntryUpdater0.objectToUpdate();
      boolean boolean0 = mapEntryUpdater0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntry mapEntry0 = new MapEntry();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      boolean boolean0 = mapEntryUpdater0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater((MapEntry) null, hashMap0);
      mapEntryUpdater0.breakLoops();
      assertFalse(mapEntryUpdater0.isRoot());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater((MapEntry) null, hashMap0);
      MapEntry mapEntry0 = new MapEntry();
      MapEntryUpdater mapEntryUpdater1 = new MapEntryUpdater(mapEntry0, hashMap0);
      boolean boolean0 = mapEntryUpdater0.equals(mapEntryUpdater1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      mapEntryUpdater0.performUpdate();
      assertFalse(mapEntryUpdater0.isRoot());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapEntry mapEntry0 = new MapEntry();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapEntryUpdater mapEntryUpdater0 = new MapEntryUpdater(mapEntry0, hashMap0);
      Object object0 = mapEntryUpdater0.objectToUpdate();
      mapEntry0.setKey(object0);
      mapEntryUpdater0.performUpdate();
      // Undeclared exception!
      try { 
        mapEntryUpdater0.performUpdate();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
