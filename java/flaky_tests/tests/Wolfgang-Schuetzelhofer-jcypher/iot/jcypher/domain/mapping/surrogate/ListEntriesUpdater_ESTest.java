/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:59:46 GMT 2022
 */

package iot.jcypher.domain.mapping.surrogate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domain.mapping.surrogate.Array;
import iot.jcypher.domain.mapping.surrogate.Collection;
import iot.jcypher.domain.mapping.surrogate.ListEntriesUpdater;
import iot.jcypher.domain.mapping.surrogate.Surrogate2ListEntry;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListEntriesUpdater_ESTest extends ListEntriesUpdater_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater((java.util.Collection<Object>) null);
      Object object0 = listEntriesUpdater0.objectToUpdate();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(linkedList0);
      java.util.Collection<?> collection0 = listEntriesUpdater0.getCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(linkedList0);
      listEntriesUpdater0.updateFrom((Surrogate2ListEntry) null);
      // Undeclared exception!
      try { 
        listEntriesUpdater0.performUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.mapping.surrogate.ListEntriesUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      java.util.Collection<Object> collection0 = hashMap0.values();
      Collection collection1 = new Collection(collection0);
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(collection0);
      Surrogate2ListEntry surrogate2ListEntry0 = new Surrogate2ListEntry(1529, listEntriesUpdater0, collection1);
      listEntriesUpdater0.updateFrom(surrogate2ListEntry0);
      // Undeclared exception!
      try { 
        listEntriesUpdater0.performUpdate();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(linkedList0);
      Collection collection0 = new Collection();
      Object[] objectArray0 = new Object[0];
      Array array0 = new Array(objectArray0);
      Surrogate2ListEntry surrogate2ListEntry0 = new Surrogate2ListEntry((-1), listEntriesUpdater0, collection0);
      listEntriesUpdater0.updateFrom(surrogate2ListEntry0);
      Surrogate2ListEntry surrogate2ListEntry1 = new Surrogate2ListEntry(2288, listEntriesUpdater0, array0);
      listEntriesUpdater0.updateFrom(surrogate2ListEntry1);
      // Undeclared exception!
      try { 
        listEntriesUpdater0.performUpdate();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Collection collection0 = new Collection();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater((java.util.Collection<Object>) null);
      Surrogate2ListEntry surrogate2ListEntry0 = new Surrogate2ListEntry(4, listEntriesUpdater0, collection0);
      surrogate2ListEntry0.performUpdate();
      Array array0 = new Array();
      Surrogate2ListEntry surrogate2ListEntry1 = new Surrogate2ListEntry(2, listEntriesUpdater0, array0);
      listEntriesUpdater0.updateFrom(surrogate2ListEntry1);
      listEntriesUpdater0.performUpdate();
      assertTrue(listEntriesUpdater0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Collection collection0 = new Collection();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater((java.util.Collection<Object>) null);
      Surrogate2ListEntry surrogate2ListEntry0 = new Surrogate2ListEntry(4, listEntriesUpdater0, collection0);
      surrogate2ListEntry0.performUpdate();
      listEntriesUpdater0.updateFrom(surrogate2ListEntry0);
      listEntriesUpdater0.performUpdate();
      assertTrue(listEntriesUpdater0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();
      java.util.Collection<Object> collection0 = hashMap0.values();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(collection0);
      Object object0 = listEntriesUpdater0.objectToUpdate();
      assertFalse(collection0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater(linkedList0);
      ListEntriesUpdater listEntriesUpdater1 = (ListEntriesUpdater)listEntriesUpdater0.entry2Update();
      assertTrue(listEntriesUpdater1.isLeaf());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ListEntriesUpdater listEntriesUpdater0 = new ListEntriesUpdater((java.util.Collection<Object>) null);
      java.util.Collection<?> collection0 = listEntriesUpdater0.getCollection();
      assertNull(collection0);
  }
}
