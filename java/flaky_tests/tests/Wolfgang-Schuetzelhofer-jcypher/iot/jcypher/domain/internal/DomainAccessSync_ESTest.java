/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:11:58 GMT 2022
 */

package iot.jcypher.domain.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.concurrency.Locking;
import iot.jcypher.database.IDBAccess;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.genericmodel.DOType;
import iot.jcypher.domain.genericmodel.DomainObject;
import iot.jcypher.domain.internal.DomainAccessFactoryImpl;
import iot.jcypher.domain.internal.DomainAccessSync;
import iot.jcypher.domainquery.DomainQuery;
import iot.jcypher.domainquery.GDomainQuery;
import iot.jcypher.query.JcQuery;
import iot.jcypher.query.result.JcError;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DomainAccessSync_ESTest extends DomainAccessSync_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.loadByType("~3K;d@", 7, 858, 1156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$GenericDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domainquery.ast.UnionExpression", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<DomainObject> class0 = DomainObject.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByType(class0, 0, (-62), (-898));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset must be >= 0
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "} 0V&~k-u", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      LinkedList<JcError> linkedList0 = new LinkedList<JcError>();
      domainAccessSync0.store((List<?>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      String string0 = "";
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.beginTX();
      JcError jcError0 = new JcError(string0, string0, string0);
      // Undeclared exception!
      try { 
        domainAccessSync0.store((Object) jcError0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "<hTb\"oD", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.beginTX();
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.numberOfInstancesOf(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "m}7>+Fp+yUsfM{Xk0", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.beginTX();
      Class<JcError> class0 = JcError.class;
      int int0 = 0;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByType(class0, int0, int0, int0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.beginTX();
      Class<JcError> class0 = JcError.class;
      int int0 = 0;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadById(class0, int0, (long) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "name", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.beginTX();
      // Undeclared exception!
      try { 
        domainAccessSync0.getStoredQueryNames();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "public ", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<Object> class0 = Object.class;
      long[] longArray0 = new long[0];
      domainAccessSync0.loadByIds(class0, 1635, longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(domainAccessSync0);
      domainAccessSync0.getSyncInfos(linkedList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.store((List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$ClosureCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.store((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "6H`A9r7P)&L", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.numberOfInstancesOf(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "K5*{r(d~!C9ep@T/;J", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByType(class0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "USING_INDEX", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByType(class0, 0, 0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcQuery> class0 = JcQuery.class;
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByIds(class0, 1140, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "*@i4#yT=Eo;!%DG<9'7", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByIds(class0, (-2994), (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync$GenericDomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadById(class0, 4, (long) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "iot.jcypher.domain.internal.DomainAccessSync$GenericDomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadById(class0, 297, (long) 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "pfVAF[rp)kD=el", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.getSyncInfos((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync$GenericDomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.getStoredQueryNames();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = null;
      try {
        domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, (String) null, iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$InternalDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "<hTb\"oD", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.getInternalDomainAccess();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "p_rdG", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.getGenericDomainAccess();
      domainAccessSync0.getGenericDomainAccess();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.loadById("", (-1194), 526L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "<hTb\"oD", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.getStoredQueryNames();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      GDomainQuery gDomainQuery0 = new GDomainQuery(domainAccessSync0);
      domainAccessSync_GenericDomainAccessSync0.createQueryPersistor(gDomainQuery0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "{gWf6;9+/2#N7,uO", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.createQuery();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "0;/.yiKwSD%\"5b:X_j", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.getDomainObjectType("0;/.yiKwSD%\"5b:X_j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "nW-sU6xov@", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.getSyncInfos((List<DomainObject>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$GenericDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.getTypeBuilderFactory();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domainquery.internal.QueryExecutor$MappingInfo", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.getInternalDomainAccess();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      LinkedList<DomainObject> linkedList0 = new LinkedList<DomainObject>();
      domainAccessSync_GenericDomainAccessSync0.store((List<DomainObject>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "$m3wF635'OxL", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.getDomainAccess();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      Locking locking0 = Locking.OPTIMISTIC;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.setLockingStrategy(locking0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "<hTb\"oD", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.loadByIds("name", 297, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.store((DomainObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.genericmodel.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "?Rt<Knbk+91vM", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.beginTX();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "{gWf6;9+/2#N7,uO", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      domainAccessSync_GenericDomainAccessSync0.createQueryLoader(" (buildIn: ");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "&)", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.numberOfInstancesOf((List<String>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$GenericDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.numberOfInstancesOf("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: javax/json/Json
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$GenericDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "v>W9^", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainAccessSync.GenericDomainAccessSync domainAccessSync_GenericDomainAccessSync0 = domainAccessSync0.new GenericDomainAccessSync();
      // Undeclared exception!
      try { 
        domainAccessSync_GenericDomainAccessSync0.getSyncInfo((DomainObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.genericmodel.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.numberOfInstancesOf(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "HtCc!Gk", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadById(class0, (-1168), (long) (-1168));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      domainAccessSync0.getSyncInfos(linkedList0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "iot.jcypher.domain.internal.DomainAccessSync", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Locking locking0 = Locking.OPTIMISTIC;
      domainAccessSync0.setLockingStrategy(locking0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "e'[i~2+6", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      Class<JcError> class0 = JcError.class;
      // Undeclared exception!
      try { 
        domainAccessSync0.loadByIds(class0, 21, (long[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "(SV5Ah`", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.store((Object) domainAccessFactoryImpl_SyncType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "fPf CNq", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.beginTX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler$DBAccessWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "pvd}z@h[u\"r~n{ 6", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.createQueryPersistor((DomainQuery) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, " f#<D4KIfsiD/QY+#@", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.createQueryLoader(" f#<D4KIfsiD/QY+#@");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "Z5", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.store((List<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "x2", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      // Undeclared exception!
      try { 
        domainAccessSync0.getStoredQueryNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$DomainAccessHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync((IDBAccess) null, "fPf CNq", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      DomainQuery domainQuery0 = domainAccessSync0.createQuery();
      assertNotNull(domainQuery0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccessSync domainAccessSync0 = new DomainAccessSync(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0, domainAccessFactoryImpl_SyncType0);
      domainAccessSync0.getSyncInfo(remoteDBAccess0);
  }
}
