/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:42:29 GMT 2022
 */

package iot.jcypher.domain.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.database.IDBAccess;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.IDomainAccessFactory;
import iot.jcypher.domain.IGenericDomainAccess;
import iot.jcypher.domain.internal.DomainAccessFactoryImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DomainAccessFactoryImpl_ESTest extends DomainAccessFactoryImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE;
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      // Undeclared exception!
      try { 
        domainAccessFactoryImpl0.createGenericDomainAccess((IDBAccess) remoteDBAccess0, (String) null, iDomainAccess_DomainLabelUse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$InternalDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE_SYNCHRONIZED;
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      // Undeclared exception!
      try { 
        domainAccessFactoryImpl0.createGenericDomainAccess((IDBAccess) remoteDBAccess0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$InternalDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE_SYNCHRONIZED;
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      // Undeclared exception!
      try { 
        domainAccessFactoryImpl0.createDomainAccess((IDBAccess) remoteDBAccess0, (String) null, iDomainAccess_DomainLabelUse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$InternalDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE_SYNCHRONIZED;
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      // Undeclared exception!
      try { 
        domainAccessFactoryImpl0.createDomainAccess((IDBAccess) remoteDBAccess0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domain.internal.DomainAccess$InternalDomainAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE;
      domainAccessFactoryImpl0.createGenericDomainAccess((IDBAccess) remoteDBAccess0, "X", iDomainAccess_DomainLabelUse0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.SYNCHRONIZED;
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = new DomainAccessFactoryImpl(domainAccessFactoryImpl_SyncType0);
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      IGenericDomainAccess iGenericDomainAccess0 = domainAccessFactoryImpl0.createGenericDomainAccess((IDBAccess) null, "", iDomainAccess_DomainLabelUse0);
      assertNotNull(iGenericDomainAccess0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE;
      domainAccessFactoryImpl0.createGenericDomainAccess((IDBAccess) remoteDBAccess0, "");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DomainAccessFactoryImpl.SyncType domainAccessFactoryImpl_SyncType0 = DomainAccessFactoryImpl.SyncType.NONE;
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = new DomainAccessFactoryImpl(domainAccessFactoryImpl_SyncType0);
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      domainAccessFactoryImpl0.createDomainAccess((IDBAccess) remoteDBAccess0, "CctlY`Av>x{`mz_i&!", iDomainAccess_DomainLabelUse0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DomainAccessFactoryImpl domainAccessFactoryImpl0 = (DomainAccessFactoryImpl)IDomainAccessFactory.INSTANCE;
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      domainAccessFactoryImpl0.createDomainAccess((IDBAccess) remoteDBAccess0, "");
  }
}
