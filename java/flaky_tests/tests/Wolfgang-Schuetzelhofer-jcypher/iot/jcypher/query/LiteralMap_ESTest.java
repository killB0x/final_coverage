/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:46:29 GMT 2022
 */

package iot.jcypher.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.LiteralMap;
import iot.jcypher.query.values.JcBoolean;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcPrimitive;
import iot.jcypher.query.values.JcString;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiteralMap_ESTest extends LiteralMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcString jcString0 = new JcString((String) null, "&<&m");
      literalMap0.put(jcString0, jcString0);
      Object object0 = literalMap0.get((String) null);
      assertSame(object0, jcString0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("iot.jcypher.query.LiteralMap");
      JcString jcString0 = jcBoolean0.asString();
      literalMap0.put(jcString0, "`.o#Ej!KWX,");
      String string0 = literalMap0.get(jcString0);
      assertEquals("`.o#Ej!KWX,", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean((String) null);
      JcString jcString0 = jcBoolean0.str();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      literalMap0.put(jcString0, bigDecimal0);
      JcNumber jcNumber0 = new JcNumber(bigDecimal0);
      BigDecimal bigDecimal1 = literalMap0.get(jcNumber0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("");
      JcNumber jcNumber0 = jcBoolean0.toInt();
      BigDecimal bigDecimal0 = new BigDecimal(618);
      literalMap0.put(jcNumber0, bigDecimal0);
      BigDecimal bigDecimal1 = literalMap0.get(jcNumber0);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("");
      JcNumber jcNumber0 = jcBoolean0.toFloat();
      BigDecimal bigDecimal0 = new BigDecimal((-2388));
      literalMap0.put(jcNumber0, bigDecimal0);
      BigDecimal bigDecimal1 = literalMap0.get(jcNumber0);
      assertEquals((byte) (-84), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      // Undeclared exception!
      try { 
        literalMap0.put((JcPrimitive) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      // Undeclared exception!
      try { 
        literalMap0.get((JcString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcString jcString0 = new JcString(",01^Y#$8E'", ",01^Y#$8E'");
      literalMap0.put(jcString0, jcString0);
      // Undeclared exception!
      try { 
        literalMap0.get(jcString0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class iot.jcypher.query.values.JcString cannot be cast to class java.lang.String (iot.jcypher.query.values.JcString is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @54b13916; java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("iot.jcypher.query.LiteralMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      // Undeclared exception!
      try { 
        literalMap0.get((JcNumber) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      // Undeclared exception!
      try { 
        literalMap0.get((JcBoolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      Object object0 = literalMap0.get("M=O>a!Yr");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean((String) null);
      JcString jcString0 = jcBoolean0.str();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      literalMap0.put(jcString0, bigDecimal0);
      // Undeclared exception!
      try { 
        literalMap0.get(jcBoolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.math.BigDecimal cannot be cast to class java.lang.Boolean (java.math.BigDecimal and java.lang.Boolean are in module java.base of loader 'bootstrap')
         //
         verifyException("iot.jcypher.query.LiteralMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("iot.jcypher.query.LiteralMap");
      Boolean boolean0 = literalMap0.get(jcBoolean0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcString jcString0 = new JcString("", "");
      literalMap0.put(jcString0, "");
      String string0 = literalMap0.get(jcString0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcString jcString0 = new JcString("", "");
      String string0 = literalMap0.get(jcString0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("iot.jcypher.query.LiteralMap");
      JcBoolean jcBoolean1 = jcBoolean0.asBoolean();
      literalMap0.put(jcBoolean1, jcBoolean0);
      JcNumber jcNumber0 = jcBoolean1.toInt();
      // Undeclared exception!
      try { 
        literalMap0.get(jcNumber0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class iot.jcypher.query.values.JcBoolean cannot be cast to class java.math.BigDecimal (iot.jcypher.query.values.JcBoolean is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @54b13916; java.math.BigDecimal is in module java.base of loader 'bootstrap')
         //
         verifyException("iot.jcypher.query.LiteralMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("iot.jcypher.query.LiteralMap");
      JcNumber jcNumber0 = jcBoolean0.toInt();
      BigDecimal bigDecimal0 = literalMap0.get(jcNumber0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LiteralMap literalMap0 = new LiteralMap();
      String string0 = literalMap0.toString();
      assertNotNull(string0);
  }
}
