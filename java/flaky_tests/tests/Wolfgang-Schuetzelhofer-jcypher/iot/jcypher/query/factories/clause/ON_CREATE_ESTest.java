/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:32:49 GMT 2022
 */

package iot.jcypher.query.factories.clause;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.modify.CopyProperties;
import iot.jcypher.query.api.modify.ModifyTerminal;
import iot.jcypher.query.api.modify.Set;
import iot.jcypher.query.factories.clause.ON_CREATE;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcProperty;
import iot.jcypher.query.values.JcRelation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ON_CREATE_ESTest extends ON_CREATE_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      JcNode jcNode0 = jcRelation0.startNode();
      JcLabel jcLabel0 = jcNode0.label((String) null);
      // Undeclared exception!
      try { 
        ON_CREATE.SET(jcLabel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JcNode jcNode0 = new JcNode((String) null);
      JcLabel jcLabel0 = jcNode0.label((String) null);
      // Undeclared exception!
      try { 
        ON_CREATE.REMOVE(jcLabel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      ModifyTerminal modifyTerminal0 = ON_CREATE.DELETE(jcRelation0);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ModifyTerminal modifyTerminal0 = ON_CREATE.REMOVE((JcLabel) null);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ModifyTerminal modifyTerminal0 = ON_CREATE.DETACH_DELETE((JcNode) null);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ModifyTerminal modifyTerminal0 = ON_CREATE.REMOVE((JcProperty) null);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ON_CREATE oN_CREATE0 = new ON_CREATE();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      JcProperty jcProperty0 = jcRelation0.property((String) null);
      Set<ModifyTerminal> set0 = ON_CREATE.SET(jcProperty0);
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      CopyProperties<ModifyTerminal> copyProperties0 = ON_CREATE.copyPropertiesFrom(jcRelation0);
      assertNotNull(copyProperties0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ModifyTerminal modifyTerminal0 = ON_CREATE.SET((JcLabel) null);
      assertNotNull(modifyTerminal0);
  }
}
