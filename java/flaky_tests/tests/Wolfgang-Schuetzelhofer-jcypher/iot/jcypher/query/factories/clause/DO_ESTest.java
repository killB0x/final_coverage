/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:54:38 GMT 2022
 */

package iot.jcypher.query.factories.clause;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.modify.CopyProperties;
import iot.jcypher.query.api.modify.ModifyTerminal;
import iot.jcypher.query.api.modify.Set;
import iot.jcypher.query.factories.clause.DO;
import iot.jcypher.query.values.JcElement;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcProperty;
import iot.jcypher.query.values.JcRelation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DO_ESTest extends DO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JcNode jcNode0 = new JcNode((String) null);
      JcLabel jcLabel0 = jcNode0.label((String) null);
      // Undeclared exception!
      try { 
        DO.SET(jcLabel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JcNode jcNode0 = new JcNode((String) null);
      JcLabel jcLabel0 = jcNode0.label((String) null);
      // Undeclared exception!
      try { 
        DO.REMOVE(jcLabel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DO dO0 = new DO();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JcNode jcNode0 = new JcNode("2;g0)Kl");
      JcLabel jcLabel0 = jcNode0.label("2;g0)Kl");
      ModifyTerminal modifyTerminal0 = DO.REMOVE(jcLabel0);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopyProperties<ModifyTerminal> copyProperties0 = DO.copyPropertiesFrom((JcElement) null);
      assertNotNull(copyProperties0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ModifyTerminal modifyTerminal0 = DO.DELETE((JcElement) null);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JcNode jcNode0 = new JcNode("2;g0)Kl");
      JcLabel jcLabel0 = jcNode0.label("2;g0)Kl");
      ModifyTerminal modifyTerminal0 = DO.SET(jcLabel0);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation("2;g0)Kl");
      JcProperty jcProperty0 = jcRelation0.property("2;g0)Kl");
      ModifyTerminal modifyTerminal0 = DO.REMOVE(jcProperty0);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JcNode jcNode0 = new JcNode("2;g0)Kl");
      ModifyTerminal modifyTerminal0 = DO.DETACH_DELETE(jcNode0);
      assertNotNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Set<ModifyTerminal> set0 = DO.SET((JcProperty) null);
      assertNotNull(set0);
  }
}
