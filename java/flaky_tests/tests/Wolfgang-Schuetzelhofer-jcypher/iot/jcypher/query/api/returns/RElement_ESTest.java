/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:34:09 GMT 2022
 */

package iot.jcypher.query.api.returns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.returns.RElement;
import iot.jcypher.query.api.returns.RSortable;
import iot.jcypher.query.ast.returns.ReturnExpression;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RElement_ESTest extends RElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RElement<RSortable> rElement0 = new RElement<RSortable>((ReturnExpression) null);
      ReturnExpression returnExpression0 = rElement0.getReturnExpression();
      assertNull(returnExpression0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setDistinct();
      RElement<RSortable> rElement0 = new RElement<RSortable>(returnExpression0);
      ReturnExpression returnExpression1 = rElement0.getReturnExpression();
      assertSame(returnExpression0, returnExpression1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setCount();
      RSortable rSortable0 = new RSortable(returnExpression0);
      ReturnExpression returnExpression1 = rSortable0.getReturnExpression();
      assertFalse(returnExpression1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RSortable rSortable0 = new RSortable(returnExpression0);
      rSortable0.SKIP(998);
      ReturnExpression returnExpression1 = rSortable0.getReturnExpression();
      assertEquals(998, returnExpression1.getSkip());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RElement<RSortable> rElement0 = new RElement<RSortable>(returnExpression0);
      RElement<RSortable> rElement1 = rElement0.LIMIT(0);
      rElement1.getReturnExpression();
      assertEquals(0, returnExpression0.getLimit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RSortable rSortable0 = new RSortable(returnExpression0);
      rSortable0.LIMIT(1511);
      ReturnExpression returnExpression1 = rSortable0.getReturnExpression();
      assertEquals(1511, returnExpression1.getLimit());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RElement<RSortable> rElement0 = new RElement<RSortable>(returnExpression0);
      RElement<RSortable> rElement1 = rElement0.SKIP(0);
      rElement1.getReturnExpression();
      assertEquals(0, returnExpression0.getSkip());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RSortable rSortable0 = new RSortable(returnExpression0);
      JcValue jcValue0 = new JcValue("f2In5-{&6r 9oe8iPl");
      RSortable rSortable1 = rSortable0.AS(jcValue0);
      assertSame(rSortable1, rSortable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RSortable rSortable0 = new RSortable((ReturnExpression) null);
      JcNode jcNode0 = new JcNode("Q0C");
      // Undeclared exception!
      try { 
        rSortable0.AS(jcNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RElement<RSortable> rElement0 = new RElement<RSortable>(returnExpression0);
      rElement0.setConnector((RSortable) null);
      Long long0 = new Long(19);
      JcNumber jcNumber0 = new JcNumber(long0);
      RSortable rSortable0 = rElement0.AS(jcNumber0);
      assertNull(rSortable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RElement<RSortable> rElement0 = new RElement<RSortable>((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rElement0.SKIP((-6304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RElement<RSortable> rElement0 = new RElement<RSortable>((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rElement0.LIMIT(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RElement", e);
      }
  }
}
