/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:21:24 GMT 2022
 */

package iot.jcypher.query.api.returns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.collection.ICollectExpression;
import iot.jcypher.query.api.pattern.IElement;
import iot.jcypher.query.api.predicate.Concatenator;
import iot.jcypher.query.api.returns.AggregateDistinct;
import iot.jcypher.query.api.returns.RCount;
import iot.jcypher.query.api.returns.RDistinct;
import iot.jcypher.query.api.returns.RElement;
import iot.jcypher.query.api.returns.RFactory;
import iot.jcypher.query.api.returns.RSortable;
import iot.jcypher.query.api.returns.RTerminal;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcProperty;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RFactory_ESTest extends RFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        RFactory.resultOf((Concatenator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JcCollection<JcProperty> jcCollection0 = new JcCollection<JcProperty>("!6U4");
      RElement<RElement<?>> rElement0 = RFactory.resultOf(jcCollection0);
      assertNotNull(rElement0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RDistinct rDistinct0 = RFactory.DISTINCT();
      assertNotNull(rDistinct0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AggregateDistinct aggregateDistinct0 = RFactory.aggregate();
      assertNotNull(aggregateDistinct0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RSortable rSortable0 = RFactory.value((JcValue) null);
      assertNotNull(rSortable0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        RFactory.existsPattern((IElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RCount rCount0 = RFactory.count();
      assertNotNull(rCount0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        RFactory.resultOf((ICollectExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RFactory rFactory0 = new RFactory();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RTerminal rTerminal0 = RFactory.ALL();
      assertNotNull(rTerminal0);
  }
}
