/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:14:37 GMT 2022
 */

package iot.jcypher.query.api.predicate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.collection.IPredicateFunction;
import iot.jcypher.query.api.pattern.IElement;
import iot.jcypher.query.api.predicate.BooleanOperation;
import iot.jcypher.query.api.predicate.Concat;
import iot.jcypher.query.api.predicate.Concatenator;
import iot.jcypher.query.api.predicate.IBeforePredicate;
import iot.jcypher.query.ast.predicate.PredicateExpression;
import iot.jcypher.query.values.IHas;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.ValueElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Concat_ESTest extends Concat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      BooleanOperation booleanOperation0 = concat0.valueOf((ValueElement) null);
      assertNotNull(booleanOperation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      IBeforePredicate iBeforePredicate0 = concat0.NOT();
      assertSame(iBeforePredicate0, concat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      predicateExpression0.setParent(predicateExpression0);
      Concat concat0 = new Concat(predicateExpression0);
      JcNode jcNode0 = new JcNode("invalid expression");
      JcLabel jcLabel0 = jcNode0.label("invalid expression");
      Concatenator concatenator0 = concat0.has(jcLabel0);
      // Undeclared exception!
      concat0.holdsTrue(concatenator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      // Undeclared exception!
      try { 
        concat0.holdsTrue((IPredicateFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Concat concat0 = new Concat((PredicateExpression) null);
      // Undeclared exception!
      try { 
        concat0.BR_OPEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.predicate.Concat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      // Undeclared exception!
      try { 
        concat0.existsPattern((IElement) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid expression
         //
         verifyException("iot.jcypher.query.api.predicate.Concat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      JcNode jcNode0 = new JcNode("invalid expression");
      JcLabel jcLabel0 = jcNode0.label("invalid expression");
      Concatenator concatenator0 = concat0.has(jcLabel0);
      Concatenator concatenator1 = concat0.holdsTrue(concatenator0);
      assertNotSame(concatenator0, concatenator1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Concat concat0 = new Concat((PredicateExpression) null);
      // Undeclared exception!
      try { 
        concat0.NOT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.predicate.Concat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Concat concat0 = new Concat((PredicateExpression) null);
      // Undeclared exception!
      try { 
        concat0.has((IHas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.predicate.Concat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PredicateExpression predicateExpression0 = new PredicateExpression();
      Concat concat0 = new Concat(predicateExpression0);
      Concat concat1 = concat0.BR_OPEN();
      assertNotSame(concat1, concat0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Concat concat0 = new Concat((PredicateExpression) null);
      // Undeclared exception!
      try { 
        concat0.valueOf((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.predicate.Concat", e);
      }
  }
}
