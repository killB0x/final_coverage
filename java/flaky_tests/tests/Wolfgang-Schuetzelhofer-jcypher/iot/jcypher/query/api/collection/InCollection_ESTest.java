/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:50:07 GMT 2022
 */

package iot.jcypher.query.api.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.collection.CFrom;
import iot.jcypher.query.api.collection.CTerminal;
import iot.jcypher.query.api.collection.CollectFrom;
import iot.jcypher.query.api.collection.EachDoConcat;
import iot.jcypher.query.api.collection.ICollectExpression;
import iot.jcypher.query.api.collection.InCollection;
import iot.jcypher.query.api.modify.ModifyTerminal;
import iot.jcypher.query.api.pattern.Property;
import iot.jcypher.query.ast.collection.CollectExpression;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcPath;
import iot.jcypher.query.values.JcRelation;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InCollection_ESTest extends InCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      JcPath jcPath0 = new JcPath("");
      ModifyTerminal modifyTerminal0 = inCollection0.IN_relations(jcPath0);
      assertNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      EachDoConcat eachDoConcat0 = new EachDoConcat(collectExpression0);
      CFrom<EachDoConcat> cFrom0 = new CFrom<EachDoConcat>(collectExpression0, eachDoConcat0);
      JcRelation jcRelation0 = new JcRelation("LF.N(`6gj+C&-@c$v`[");
      JcNode jcNode0 = jcRelation0.startNode();
      InCollection<EachDoConcat> inCollection0 = cFrom0.fromAll(jcNode0);
      InCollection<InCollection<EachDoConcat>> inCollection1 = new InCollection<InCollection<EachDoConcat>>(collectExpression0, inCollection0);
      JcPath jcPath0 = new JcPath("O");
      InCollection<EachDoConcat> inCollection2 = inCollection1.IN_nodes(jcPath0);
      assertSame(inCollection0, inCollection2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      Property<Object> property0 = (Property<Object>) mock(Property.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(property0).toString();
      InCollection<Property<Object>> inCollection0 = new InCollection<Property<Object>>(collectExpression0, property0);
      Object[] objectArray0 = new Object[9];
      Property<Object> property1 = inCollection0.IN_list(objectArray0);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<EachDoConcat> inCollection0 = new InCollection<EachDoConcat>(collectExpression0, (EachDoConcat) null);
      JcRelation jcRelation0 = new JcRelation((String) null);
      JcNode jcNode0 = jcRelation0.endNode();
      EachDoConcat eachDoConcat0 = inCollection0.IN_labels(jcNode0);
      assertNull(eachDoConcat0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      EachDoConcat eachDoConcat0 = new EachDoConcat(collectExpression0);
      CFrom<EachDoConcat> cFrom0 = new CFrom<EachDoConcat>(collectExpression0, eachDoConcat0);
      JcPath jcPath0 = new JcPath("CASE");
      JcCollection<JcNode> jcCollection0 = jcPath0.nodes();
      InCollection<EachDoConcat> inCollection0 = cFrom0.fromAll(jcCollection0);
      InCollection<InCollection<EachDoConcat>> inCollection1 = new InCollection<InCollection<EachDoConcat>>(collectExpression0, inCollection0);
      InCollection<EachDoConcat> inCollection2 = inCollection1.IN(jcCollection0);
      assertSame(inCollection0, inCollection2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      EachDoConcat eachDoConcat0 = new EachDoConcat(collectExpression0);
      CFrom<EachDoConcat> cFrom0 = new CFrom<EachDoConcat>(collectExpression0, eachDoConcat0);
      JcRelation jcRelation0 = new JcRelation("LF.N(`6gj+C&-@c$v`[");
      JcNode jcNode0 = jcRelation0.startNode();
      InCollection<EachDoConcat> inCollection0 = cFrom0.fromAll(jcNode0);
      InCollection<InCollection<EachDoConcat>> inCollection1 = new InCollection<InCollection<EachDoConcat>>(collectExpression0, inCollection0);
      JcPath jcPath0 = new JcPath("O");
      JcCollection<JcNode> jcCollection0 = jcPath0.nodes();
      CollectFrom collectFrom0 = new CollectFrom(collectExpression0);
      CTerminal cTerminal0 = collectFrom0.from(jcCollection0);
      InCollection<EachDoConcat> inCollection2 = inCollection1.IN((ICollectExpression) cTerminal0);
      assertSame(inCollection0, inCollection2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      // Undeclared exception!
      try { 
        inCollection0.IN_relations((JcPath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.collection.InCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      // Undeclared exception!
      try { 
        inCollection0.IN_nodes((JcPath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.collection.InCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      // Undeclared exception!
      try { 
        inCollection0.IN_labels((JcNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.collection.InCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      // Undeclared exception!
      try { 
        inCollection0.IN((ICollectExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<InCollection<ModifyTerminal>> inCollection0 = new InCollection<InCollection<ModifyTerminal>>(collectExpression0, (InCollection<ModifyTerminal>) null);
      JcRelation jcRelation0 = new JcRelation("");
      JcNode jcNode0 = jcRelation0.endNode();
      JcCollection<JcValue> jcCollection0 = jcNode0.labels();
      InCollection<ModifyTerminal> inCollection1 = inCollection0.IN(jcCollection0);
      assertNull(inCollection1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) collectExpression0;
      ModifyTerminal modifyTerminal0 = inCollection0.IN_list(objectArray0);
      assertNull(modifyTerminal0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        inCollection0.IN_list(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.collection.InCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      Property<EachDoConcat> property0 = (Property<EachDoConcat>) mock(Property.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(property0).toString();
      InCollection<Property<EachDoConcat>> inCollection0 = new InCollection<Property<EachDoConcat>>(collectExpression0, property0);
      JcPath jcPath0 = new JcPath("nxE=P#_hksw\"m");
      Property<EachDoConcat> property1 = inCollection0.IN_relations(jcPath0);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<EachDoConcat> inCollection0 = new InCollection<EachDoConcat>(collectExpression0, (EachDoConcat) null);
      JcPath jcPath0 = new JcPath("GT");
      EachDoConcat eachDoConcat0 = inCollection0.IN_nodes(jcPath0);
      assertNull(eachDoConcat0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<EachDoConcat> inCollection0 = new InCollection<EachDoConcat>(collectExpression0, (EachDoConcat) null);
      InCollection<InCollection<EachDoConcat>> inCollection1 = new InCollection<InCollection<EachDoConcat>>(collectExpression0, inCollection0);
      JcRelation jcRelation0 = new JcRelation("GT");
      JcNode jcNode0 = jcRelation0.startNode();
      InCollection<EachDoConcat> inCollection2 = inCollection1.IN_labels(jcNode0);
      assertSame(inCollection2, inCollection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<ModifyTerminal> inCollection0 = new InCollection<ModifyTerminal>(collectExpression0, (ModifyTerminal) null);
      CTerminal cTerminal0 = new CTerminal(collectExpression0);
      ModifyTerminal modifyTerminal0 = inCollection0.IN((ICollectExpression) cTerminal0);
      assertNull(modifyTerminal0);
  }
}
