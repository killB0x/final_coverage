/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:19:15 GMT 2022
 */

package iot.jcypher.query.api.returns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.collection.ICollectExpression;
import iot.jcypher.query.api.pattern.IElement;
import iot.jcypher.query.api.predicate.Concatenator;
import iot.jcypher.query.api.returns.RCount;
import iot.jcypher.query.api.returns.RDistinct;
import iot.jcypher.query.api.returns.RElement;
import iot.jcypher.query.api.returns.RSortable;
import iot.jcypher.query.api.returns.RTerminal;
import iot.jcypher.query.ast.returns.ReturnExpression;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RDistinct_ESTest extends RDistinct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RDistinct rDistinct0 = new RDistinct((ReturnExpression) null);
      ReturnExpression returnExpression0 = rDistinct0.getReturnExpression();
      assertNull(returnExpression0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RCount rCount0 = new RCount(returnExpression0);
      rCount0.DISTINCT();
      ReturnExpression returnExpression1 = rCount0.getReturnExpression();
      assertSame(returnExpression0, returnExpression1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setCount();
      RCount rCount0 = new RCount(returnExpression0);
      ReturnExpression returnExpression1 = rCount0.getReturnExpression();
      assertEquals((-1), returnExpression1.getSkip());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setSkip(0);
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      ReturnExpression returnExpression1 = rDistinct0.getReturnExpression();
      assertEquals((-1), returnExpression1.getLimit());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setSkip(564);
      RCount rCount0 = new RCount(returnExpression0);
      ReturnExpression returnExpression1 = rCount0.getReturnExpression();
      assertSame(returnExpression1, returnExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setLimit(0);
      RCount rCount0 = new RCount(returnExpression0);
      ReturnExpression returnExpression1 = rCount0.getReturnExpression();
      assertEquals(0, returnExpression1.getLimit());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setLimit(1965);
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      ReturnExpression returnExpression1 = rDistinct0.getReturnExpression();
      assertEquals((-1), returnExpression1.getSkip());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      RElement<RElement<?>> rElement0 = rDistinct0.collection((JcCollection) null);
      assertNotNull(rElement0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      RTerminal rTerminal0 = rDistinct0.ALL();
      assertNotNull(rTerminal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RDistinct rDistinct0 = new RDistinct((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rDistinct0.value((JcValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RDistinct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RCount rCount0 = new RCount((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rCount0.evalPredicate((Concatenator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      JcCollection<JcNumber> jcCollection0 = new JcCollection<JcNumber>("");
      RSortable rSortable0 = rDistinct0.value(jcCollection0);
      assertNotNull(rSortable0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RDistinct rDistinct0 = new RDistinct((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rDistinct0.ALL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RDistinct", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      // Undeclared exception!
      try { 
        rDistinct0.collection((ICollectExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      RDistinct rDistinct0 = new RDistinct(returnExpression0);
      // Undeclared exception!
      try { 
        rDistinct0.existsPattern((IElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RCount rCount0 = new RCount((ReturnExpression) null);
      // Undeclared exception!
      try { 
        rCount0.collection((JcCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.returns.RDistinct", e);
      }
  }
}
