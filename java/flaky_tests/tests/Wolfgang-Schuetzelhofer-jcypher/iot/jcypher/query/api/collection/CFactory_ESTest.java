/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:19:52 GMT 2022
 */

package iot.jcypher.query.api.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.api.APIObject;
import iot.jcypher.query.api.IClause;
import iot.jcypher.query.api.collection.CFactory;
import iot.jcypher.query.api.collection.CFrom;
import iot.jcypher.query.api.collection.CTerminal;
import iot.jcypher.query.api.collection.CWhere;
import iot.jcypher.query.api.collection.CollectFrom;
import iot.jcypher.query.api.collection.Collection;
import iot.jcypher.query.api.collection.EXProperty;
import iot.jcypher.query.api.collection.EachDoConcat;
import iot.jcypher.query.api.collection.ExtractExpression;
import iot.jcypher.query.api.collection.ICollectExpression;
import iot.jcypher.query.api.collection.InCollection;
import iot.jcypher.query.api.collection.ReduceInit;
import iot.jcypher.query.api.collection.ReduceTo;
import iot.jcypher.query.api.predicate.BooleanOperation;
import iot.jcypher.query.api.predicate.Concat;
import iot.jcypher.query.api.predicate.Concatenator;
import iot.jcypher.query.ast.collection.CollectExpression;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcRelation;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CFactory_ESTest extends CFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      InCollection<CWhere> inCollection0 = CFactory.forSingle((JcValue) null);
      Object[] objectArray0 = new Object[3];
      CWhere cWhere0 = inCollection0.IN_list(objectArray0);
      CollectExpression collectExpression1 = CFactory.getRootCollectExpression(cWhere0);
      collectExpression1.setParent(collectExpression0);
      collectExpression0.setParent(collectExpression1);
      // Undeclared exception!
      CFactory.getRootCollectExpression(inCollection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CFactory.getRootCollectExpression((APIObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.api.APIObjectAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      InCollection<CWhere> inCollection0 = CFactory.forAny(jcRelation0);
      CollectExpression collectExpression0 = CFactory.getRootCollectExpression(inCollection0);
      CWhere cWhere0 = new CWhere(collectExpression0);
      Concat concat0 = cWhere0.WHERE();
      Concat concat1 = concat0.BR_OPEN();
      BooleanOperation booleanOperation0 = concat1.valueOf(jcRelation0);
      Concatenator concatenator0 = booleanOperation0.IS_NULL();
      CWhere cWhere1 = inCollection0.IN((ICollectExpression) concatenator0);
      assertNotSame(cWhere0, cWhere1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReduceInit reduceInit0 = new ReduceInit((CollectExpression) null);
      CollectExpression collectExpression0 = CFactory.getRootCollectExpression(reduceInit0);
      assertNull(collectExpression0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtractExpression extractExpression0 = CFactory.EXTRACT();
      assertNotNull(extractExpression0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CFactory cFactory0 = new CFactory();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CTerminal cTerminal0 = CFactory.TAIL((JcCollection) null);
      assertNotNull(cTerminal0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EXProperty<CollectFrom> eXProperty0 = CFactory.COLLECT();
      CollectExpression collectExpression0 = CFactory.getRootCollectExpression(eXProperty0);
      assertNull(collectExpression0.getClauseType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CTerminal cTerminal0 = CFactory.CREATE((IClause[]) null);
      assertNotNull(cTerminal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      JcCollection<JcValue> jcCollection0 = jcRelation0.collectionProperty("");
      InCollection<CWhere> inCollection0 = CFactory.forAll(jcCollection0);
      assertNotNull(inCollection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InCollection<CWhere> inCollection0 = CFactory.forNone((JcValue) null);
      assertNotNull(inCollection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Collection collection0 = CFactory.TAIL();
      EXProperty<CollectFrom> eXProperty0 = collection0.COLLECT();
      CollectExpression collectExpression0 = CFactory.getRootCollectExpression(eXProperty0);
      assertNotNull(collectExpression0);
      assertEquals(CollectExpression.CollectXpressionType.TAIL, collectExpression0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation((String) null);
      JcNode jcNode0 = jcRelation0.startNode();
      InCollection<EachDoConcat> inCollection0 = CFactory.element(jcNode0);
      assertNotNull(inCollection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CFrom<CWhere> cFrom0 = CFactory.FILTER();
      assertNotNull(cFrom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CFrom<ReduceTo> cFrom0 = CFactory.REDUCE();
      assertNotNull(cFrom0);
  }
}
