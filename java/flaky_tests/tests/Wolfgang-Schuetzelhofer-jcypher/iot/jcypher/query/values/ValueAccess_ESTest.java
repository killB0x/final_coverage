/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:40:28 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.values.JcBoolean;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcPrimitive;
import iot.jcypher.query.values.JcString;
import iot.jcypher.query.values.JcValue;
import iot.jcypher.query.values.MathFunctions;
import iot.jcypher.query.values.ReplaceWith;
import iot.jcypher.query.values.SubString;
import iot.jcypher.query.values.ValueAccess;
import iot.jcypher.query.values.ValueElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueAccess_ESTest extends ValueAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcString jcString0 = valueElement0.str();
      JcBoolean jcBoolean0 = jcString0.asBoolean();
      Object object0 = ValueAccess.getAnyHint(jcBoolean0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = Long.valueOf(1L);
      JcNumber jcNumber0 = new JcNumber("iot.jcypher.query.values.ValueAccess", long0);
      MathFunctions mathFunctions0 = jcNumber0.math();
      JcNumber jcNumber1 = mathFunctions0.asin();
      ValueAccess.setPredecessor(jcNumber0, jcNumber1);
      assertFalse(jcNumber0.equals((Object)jcNumber1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      JcString jcString0 = replaceWith0.str();
      JcString jcString1 = jcString0.lower();
      ValueElement[] valueElementArray0 = new ValueElement[7];
      valueElementArray0[5] = (ValueElement) jcString1;
      JcValue jcValue0 = ValueAccess.coalesce(valueElementArray0);
      assertNotNull(jcValue0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      ValueElement[] valueElementArray0 = new ValueElement[6];
      valueElementArray0[2] = valueElement0;
      valueElementArray0[3] = valueElement0;
      JcValue jcValue0 = ValueAccess.coalesce(valueElementArray0);
      assertNotNull(jcValue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JcLabel jcLabel0 = new JcLabel();
      ReplaceWith replaceWith0 = jcLabel0.replace("]wO+$}vDQ");
      Object object0 = ValueAccess.getValue(replaceWith0);
      assertEquals("]wO+$}vDQ", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubString subString0 = new SubString();
      JcString jcString0 = subString0.asString();
      ValueElement valueElement0 = ValueAccess.getPredecessor(jcString0);
      assertSame(valueElement0, subString0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubString subString0 = new SubString();
      String string0 = ValueAccess.getName(subString0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JcBoolean jcBoolean0 = new JcBoolean("iot.jcypher.query.values.ValueAccess");
      String string0 = ValueAccess.getName(jcBoolean0);
      assertEquals("iot.jcypher.query.values.ValueAccess", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("");
      String string0 = ValueAccess.getName(jcNumber0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MathFunctions mathFunctions0 = new MathFunctions((JcNumber) null);
      JcNumber jcNumber0 = ValueAccess.getArgument(mathFunctions0);
      assertNull(jcNumber0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubString subString0 = new SubString();
      JcNumber jcNumber0 = subString0.toFloat();
      MathFunctions mathFunctions0 = jcNumber0.math();
      JcNumber jcNumber1 = ValueAccess.getArgument(mathFunctions0);
      assertSame(jcNumber0, jcNumber1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.setPredecessor((ValueElement) null, (ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.setName("-J+fWCuj\"?%+j", (JcValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      // Undeclared exception!
      try { 
        ValueAccess.setHint((ValueElement) null, ";8\"9>QR=qh?{VE", jcValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.isSame((JcValue) null, (JcValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.getValue((JcPrimitive) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.getPredecessor((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JcString jcString0 = new JcString();
      jcString0.setPredecessor(jcString0);
      // Undeclared exception!
      ValueAccess.getAnyHint(jcString0, ";'");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      JcCollection<JcValue> jcCollection0 = jcValue0.asCollection();
      jcValue0.setPredecessor(jcCollection0);
      // Undeclared exception!
      ValueAccess.findFirst(jcValue0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.findFirst((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      JcBoolean jcBoolean0 = jcNumber0.asBoolean();
      jcNumber0.setPredecessor(jcBoolean0);
      ValueElement[] valueElementArray0 = new ValueElement[9];
      valueElementArray0[1] = (ValueElement) jcBoolean0;
      // Undeclared exception!
      ValueAccess.coalesce(valueElementArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JcBoolean jcBoolean0 = new JcBoolean(":");
      ValueElement[] valueElementArray0 = new ValueElement[5];
      valueElementArray0[1] = (ValueElement) jcBoolean0;
      // Undeclared exception!
      try { 
        ValueAccess.coalesce(valueElementArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.InstantiationException: iot.jcypher.query.values.JcBoolean
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.coalesce((ValueElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      JcBoolean jcBoolean0 = replaceWith0.asBoolean();
      // Undeclared exception!
      try { 
        ValueAccess.cloneShallow(jcBoolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.InstantiationException: iot.jcypher.query.values.JcBoolean
         //
         verifyException("iot.jcypher.query.values.ValueElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.cloneShallow((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      ValueElement[] valueElementArray0 = new ValueElement[6];
      valueElementArray0[0] = valueElement0;
      JcValue jcValue0 = ValueAccess.coalesce(valueElementArray0);
      ValueElement valueElement1 = ValueAccess.findFirst(jcValue0);
      assertSame(valueElement1, valueElement0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      JcValue jcValue1 = new JcValue("ADD_ALL");
      boolean boolean0 = ValueAccess.isSame(jcValue1, jcValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      replaceWith0.setName("");
      boolean boolean0 = ValueAccess.isSame(replaceWith0, replaceWith0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ValueElement[] valueElementArray0 = new ValueElement[6];
      JcValue jcValue0 = ValueAccess.coalesce(valueElementArray0);
      boolean boolean0 = ValueAccess.isSame(jcValue0, jcValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      replaceWith0.setHint("", "");
      Object object0 = ValueAccess.getAnyHint(replaceWith0, "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      JcNumber jcNumber0 = jcValue0.asNumber();
      ValueElement[] valueElementArray0 = new ValueElement[4];
      valueElementArray0[1] = (ValueElement) jcNumber0;
      valueElementArray0[3] = (ValueElement) jcValue0;
      JcValue jcValue1 = ValueAccess.coalesce(valueElementArray0);
      assertFalse(jcValue1.equals((Object)jcValue0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      ValueAccess.setHint(jcValue0, ";8\"9>QR=qh?{VE", jcValue0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JcLabel jcLabel0 = new JcLabel();
      SubString subString0 = new SubString();
      ReplaceWith replaceWith0 = jcLabel0.replace((JcString) subString0);
      ValueAccess.setName("6?V6['#sK0@Td0uW&", replaceWith0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      ValueElement valueElement1 = ValueAccess.cloneShallow(valueElement0);
      assertFalse(valueElement1.equals((Object)valueElement0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JcValue jcValue0 = ValueAccess.timeStamp();
      ValueElement valueElement0 = ValueAccess.getPredecessor(jcValue0);
      assertNull(valueElement0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      Object object0 = ValueAccess.getValue(replaceWith0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.getArgument((MathFunctions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ValueAccess valueAccess0 = new ValueAccess();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValueAccess.getName((JcValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }
}
