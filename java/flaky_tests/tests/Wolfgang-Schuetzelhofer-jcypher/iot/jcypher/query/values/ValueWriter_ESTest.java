/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:03:59 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.values.IOperatorOrFunction;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcPath;
import iot.jcypher.query.values.JcRelation;
import iot.jcypher.query.values.JcString;
import iot.jcypher.query.values.JcValue;
import iot.jcypher.query.values.Operator;
import iot.jcypher.query.values.ReplaceWith;
import iot.jcypher.query.values.SubString;
import iot.jcypher.query.values.ValueElement;
import iot.jcypher.query.values.ValueWriter;
import iot.jcypher.query.writer.WriterContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueWriter_ESTest extends ValueWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JcPath jcPath0 = new JcPath();
      JcNumber jcNumber0 = jcPath0.length();
      jcPath0.setPredecessor(jcNumber0);
      WriterContext writerContext0 = new WriterContext();
      // Undeclared exception!
      ValueWriter.toValueExpression(jcNumber0, writerContext0, (StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JcCollection<JcCollection<JcPath>> jcCollection0 = new JcCollection<JcCollection<JcPath>>();
      Object object0 = new Object();
      JcCollection<JcValue> jcCollection1 = jcCollection0.add(object0);
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcCollection1, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("");
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcNumber0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JcString jcString0 = new JcString("", "");
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcString0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(valueElement0, writerContext0, (StringBuilder) null);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JcNode jcNode0 = new JcNode("oGZbCg'+YIq4", (ValueElement) null, (IOperatorOrFunction) null);
      JcNumber jcNumber0 = jcNode0.toFloat();
      JcCollection<JcValue> jcCollection0 = jcNode0.labels();
      JcValue jcValue0 = jcCollection0.get(jcNumber0);
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcValue0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JcValue jcValue0 = new JcValue();
      WriterContext writerContext0 = new WriterContext();
      Operator operator0 = new Operator("Q0.", "Q0.", "Q0.", (Enum<?>) null);
      SubString subString0 = new SubString(operator0, jcValue0, operator0);
      ValueWriter.toValueExpression(subString0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JcPath jcPath0 = new JcPath();
      JcCollection<JcRelation> jcCollection0 = jcPath0.relations();
      JcRelation jcRelation0 = jcCollection0.get((-711));
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcRelation0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation();
      JcCollection<JcValue> jcCollection0 = jcRelation0.collectionProperty("NODES");
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcCollection0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JcLabel jcLabel0 = new JcLabel();
      ReplaceWith replaceWith0 = jcLabel0.replace((JcString) jcLabel0);
      JcNumber jcNumber0 = replaceWith0.toFloat();
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcNumber0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubString subString0 = new SubString();
      JcString jcString0 = subString0.subLength(15);
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcString0, writerContext0, writerContext0.buffer);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JcLabel jcLabel0 = new JcLabel();
      JcLabel jcLabel1 = jcLabel0.label("");
      WriterContext writerContext0 = new WriterContext();
      ValueWriter.toValueExpression(jcLabel1, writerContext0, writerContext0.buffer);
      assertFalse(jcLabel0.equals((Object)jcLabel1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JcRelation jcRelation0 = new JcRelation();
      JcNode jcNode0 = jcRelation0.startNode();
      WriterContext writerContext0 = new WriterContext();
      // Undeclared exception!
      try { 
        ValueWriter.toValueExpression(jcNode0, writerContext0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValueWriter valueWriter0 = new ValueWriter();
  }
}
