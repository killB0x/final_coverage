/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:36:33 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domainquery.internal.QueryRecorder;
import iot.jcypher.query.values.IOperatorOrFunction;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcString;
import iot.jcypher.query.values.ReplaceWith;
import iot.jcypher.query.values.SubString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JcString_ESTest extends JcString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JcString jcString0 = new JcString("");
      JcString jcString1 = jcString0.right(0);
      ReplaceWith replaceWith0 = jcString0.replace(jcString1);
      assertNotNull(replaceWith0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JcString jcString0 = new JcString("");
      JcString jcString1 = jcString0.right(0);
      JcString jcString2 = jcString0.concat(jcString1);
      assertNotSame(jcString2, jcString0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      JcString jcString0 = new JcString("trimLeft");
      SubString subString0 = jcString0.substring(1632);
      JcNumber jcNumber0 = subString0.toInt();
      JcString jcString1 = new JcString("trimLeft", object0, jcNumber0, (IOperatorOrFunction) null);
      assertFalse(jcString1.equals((Object)jcString0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JcString jcString0 = new JcString("trimLeft");
      JcString jcString1 = new JcString(object0, jcString0, (IOperatorOrFunction) null);
      assertFalse(jcString1.equals((Object)jcString0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.upper();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.trimRight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.trimLeft();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.trim();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.substring(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.right((-363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.replace("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.replace(jcString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.lower();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.left((-959));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.concat("AYvGUn[Yxi!ZeiK$M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JcString jcString0 = new JcString();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcString0.concat(jcString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JcString jcString0 = new JcString("");
      JcString jcString1 = jcString0.upper();
      assertNotSame(jcString1, jcString0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JcString jcString0 = new JcString("trimLeft");
      JcString jcString1 = jcString0.lower();
      assertNotSame(jcString1, jcString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JcString jcString0 = new JcString();
      JcString jcString1 = jcString0.left(737);
      assertNotNull(jcString1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JcString jcString0 = new JcString("");
      JcString jcString1 = jcString0.right(0);
      JcString jcString2 = jcString1.concat("");
      assertFalse(jcString2.equals((Object)jcString0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JcString jcString0 = new JcString();
      JcString jcString1 = jcString0.trimRight();
      assertNotSame(jcString1, jcString0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JcString jcString0 = new JcString("");
      JcNumber jcNumber0 = jcString0.length();
      assertNotNull(jcNumber0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JcString jcString0 = new JcString("-~O/-km*2Fa=", "9Ji+2G7J4^ ");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JcString jcString0 = new JcString("trimLeft");
      JcString jcString1 = jcString0.trimLeft();
      assertNotSame(jcString1, jcString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JcString jcString0 = new JcString();
      JcString jcString1 = jcString0.trim();
      assertNotSame(jcString1, jcString0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JcString jcString0 = new JcString("trimLeft");
      ReplaceWith replaceWith0 = jcString0.replace((String) null);
      assertNotNull(replaceWith0);
  }
}
