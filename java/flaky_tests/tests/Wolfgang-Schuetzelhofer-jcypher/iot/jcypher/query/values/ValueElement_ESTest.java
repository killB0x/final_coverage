/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:02:12 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domainquery.internal.QueryRecorder;
import iot.jcypher.query.values.IOperatorOrFunction;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcString;
import iot.jcypher.query.values.ValueElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueElement_ESTest extends ValueElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toInt();
      JcString jcString0 = jcNumber0.str();
      ValueElement valueElement1 = new ValueElement(jcString0, (IOperatorOrFunction) null);
      assertFalse(valueElement1.equals((Object)valueElement0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toFloat();
      valueElement0.copyShallowTo(jcNumber0);
      IOperatorOrFunction iOperatorOrFunction0 = jcNumber0.getOperatorOrFunction();
      assertNull(iOperatorOrFunction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      valueElement0.setHint("", "");
      Object object0 = valueElement0.getHint("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        valueElement0.toInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        valueElement0.toFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        valueElement0.str();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      // Undeclared exception!
      try { 
        valueElement0.copyShallowTo((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcString jcString0 = valueElement0.str();
      JcNumber jcNumber0 = jcString0.toFloat();
      // Undeclared exception!
      try { 
        jcNumber0.copyShallowTo(valueElement0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class iot.jcypher.query.values.ValueElement cannot be cast to class iot.jcypher.query.values.JcValue (iot.jcypher.query.values.ValueElement and iot.jcypher.query.values.JcValue are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @37fe2b4a)
         //
         verifyException("iot.jcypher.query.values.JcValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toFloat();
      valueElement0.setHint("!FMUi*UxAzgO~7nB", "!FMUi*UxAzgO~7nB");
      valueElement0.copyShallowTo(jcNumber0);
      jcNumber0.setHint("asCollection", valueElement0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toFloat();
      JcString jcString0 = jcNumber0.str();
      jcString0.setHint("asCollection", jcString0);
      Object object0 = jcString0.getHint("HAVERSIN");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toInt();
      JcString jcString0 = jcNumber0.str();
      Object object0 = jcString0.getHint("8:,Wakc4e5f");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toInt();
      valueElement0.setPredecessor(jcNumber0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toInt();
      JcNumber jcNumber1 = (JcNumber)jcNumber0.cloneShallow();
      ValueElement valueElement1 = jcNumber1.getPredecessor();
      assertNull(valueElement1);
      assertNotSame(jcNumber0, jcNumber1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toInt();
      JcString jcString0 = jcNumber0.str();
      IOperatorOrFunction iOperatorOrFunction0 = jcString0.getOperatorOrFunction();
      valueElement0.setOperatorOrFunction(iOperatorOrFunction0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValueElement valueElement0 = new ValueElement();
      JcNumber jcNumber0 = valueElement0.toFloat();
      JcString jcString0 = jcNumber0.str();
      ValueElement valueElement1 = jcString0.getPredecessor();
      assertSame(valueElement1, jcNumber0);
  }
}
