/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:48:26 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.values.JcLabel;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcString;
import iot.jcypher.query.values.ReplaceWith;
import iot.jcypher.query.values.ValueElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JcPrimitive_ESTest extends JcPrimitive_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JcString jcString0 = new JcString("", "length");
      jcString0.copyShallowTo(jcString0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReplaceWith replaceWith0 = new ReplaceWith();
      Object object0 = replaceWith0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Float float0 = Float.valueOf((-520.5731F));
      JcNumber jcNumber0 = new JcNumber(float0);
      // Undeclared exception!
      try { 
        jcNumber0.copyShallowTo((ValueElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      jcNumber0.setValue(jcNumber0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JcLabel jcLabel0 = new JcLabel();
      JcString jcString0 = jcLabel0.right(0);
      ReplaceWith replaceWith0 = jcLabel0.replace(jcString0);
      Object object0 = replaceWith0.getValue();
      assertSame(object0, jcString0);
  }
}
