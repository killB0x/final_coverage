/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:00:14 GMT 2022
 */

package iot.jcypher.query.values;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domainquery.internal.QueryRecorder;
import iot.jcypher.query.values.IOperatorOrFunction;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcValue;
import iot.jcypher.query.values.MathFunctions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JcNumber_ESTest extends JcNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcCollection<JcValue> jcCollection0 = jcNumber0.asCollection();
      JcNumber jcNumber1 = new JcNumber(object0, jcCollection0, (IOperatorOrFunction) null);
      JcNumber jcNumber2 = jcNumber1.mod(jcNumber0);
      assertNotSame(jcNumber2, jcNumber0);
      assertNotSame(jcNumber2, jcNumber1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      JcNumber jcNumber1 = new JcNumber(jcNumber0, jcNumber0, (IOperatorOrFunction) null);
      JcNumber jcNumber2 = jcNumber0.div(jcNumber1);
      assertNotSame(jcNumber2, jcNumber1);
      assertNotSame(jcNumber2, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = Integer.getInteger("iot.jcypher.query.values.functions.FUNCTION$Collection", (-228));
      JcNumber jcNumber0 = new JcNumber(integer0);
      JcNumber jcNumber1 = new JcNumber("iot.jcypher.query.values.functions.FUNCTION$Collection", "iot.jcypher.query.values.functions.FUNCTION$Collection", jcNumber0, (IOperatorOrFunction) null);
      assertFalse(jcNumber1.equals((Object)jcNumber0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcCollection<JcValue> jcCollection0 = jcNumber0.asCollection();
      JcNumber jcNumber1 = new JcNumber(object0, jcCollection0, (IOperatorOrFunction) null);
      JcNumber jcNumber2 = jcNumber1.mult(jcNumber0);
      assertNotSame(jcNumber2, jcNumber1);
      assertNotSame(jcNumber2, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.pow((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("mE;/YD ,");
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.pow((JcNumber) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.plus((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.plus(jcNumber0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber((Number) null);
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.mult((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.mult(jcNumber0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.mod((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.mod(jcNumber0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.minus((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber((Number) null);
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.minus((JcNumber) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.enclose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.div((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      QueryRecorder.blockRecording = null;
      // Undeclared exception!
      try { 
        jcNumber0.div(jcNumber0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryRecorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.enclose();
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.div((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.plus((JcNumber) null);
      assertNotSame(jcNumber1, jcNumber0);
      assertNotNull(jcNumber1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.plus((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber((Number) null);
      JcNumber jcNumber1 = jcNumber0.minus((JcNumber) null);
      assertNotNull(jcNumber1);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.pow(jcNumber0);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      MathFunctions mathFunctions0 = jcNumber0.math();
      assertNotNull(mathFunctions0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber("", (Number) null);
      JcNumber jcNumber1 = jcNumber0.minus((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      JcNumber jcNumber1 = jcNumber0.mult((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      JcNumber jcNumber1 = jcNumber0.pow((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JcNumber jcNumber0 = new JcNumber();
      JcNumber jcNumber1 = jcNumber0.mod((Number) null);
      assertNotSame(jcNumber1, jcNumber0);
  }
}
