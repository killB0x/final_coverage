/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:47:33 GMT 2022
 */

package iot.jcypher.query.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import iot.jcypher.query.writer.PreparedQueries;
import iot.jcypher.query.writer.PreparedQuery;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreparedQueries_ESTest extends PreparedQueries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      preparedQueries0.add((PreparedQuery) null);
      List<PreparedQuery> list0 = preparedQueries0.getPreparedQueries();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      preparedQueries0.setJson("4-{{wT-(='hO.0x-");
      String string0 = preparedQueries0.getJson();
      assertEquals("4-{{wT-(='hO.0x-", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      preparedQueries0.setJson("");
      String string0 = preparedQueries0.getJson();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      List<PreparedQuery> list0 = preparedQueries0.getPreparedQueries();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      boolean boolean0 = preparedQueries0.hasdSLParams();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      String string0 = preparedQueries0.getJson();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PreparedQueries preparedQueries0 = new PreparedQueries();
      preparedQueries0.setdSLParams();
      boolean boolean0 = preparedQueries0.hasdSLParams();
      assertTrue(boolean0);
  }
}
