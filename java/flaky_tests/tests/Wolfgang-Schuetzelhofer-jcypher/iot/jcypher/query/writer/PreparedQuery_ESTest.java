/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:15:30 GMT 2022
 */

package iot.jcypher.query.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import iot.jcypher.query.writer.PreparedQuery;
import iot.jcypher.query.writer.WriterContext;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreparedQuery_ESTest extends PreparedQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      PreparedQuery.PQContext preparedQuery_PQContext0 = preparedQuery0.getContext();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      preparedQuery_PQContext0.resultDataContents = (List<String>) linkedList0;
      WriterContext writerContext0 = new WriterContext();
      preparedQuery_PQContext0.fillContext(writerContext0);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      PreparedQuery.PQContext preparedQuery_PQContext0 = preparedQuery0.getContext();
      WriterContext writerContext0 = new WriterContext();
      preparedQuery_PQContext0.extractParams = true;
      preparedQuery_PQContext0.fillContext(writerContext0);
      assertFalse(writerContext0.inFunction);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      preparedQuery0.setJson("");
      String string0 = preparedQuery0.getJson();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      preparedQuery0.setCypher(" 7.](7n)%Q(//.2&?iw");
      String string0 = preparedQuery0.getCypher();
      assertEquals(" 7.](7n)%Q(//.2&?iw", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      preparedQuery0.setCypher("");
      String string0 = preparedQuery0.getCypher();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      PreparedQuery.PQContext preparedQuery_PQContext0 = preparedQuery0.getContext();
      PreparedQuery.PQContext preparedQuery_PQContext1 = preparedQuery0.getContext();
      assertSame(preparedQuery_PQContext1, preparedQuery_PQContext0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      preparedQuery0.setJson("Onz8z[`g[xf");
      String string0 = preparedQuery0.getJson();
      assertEquals("Onz8z[`g[xf", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      String string0 = preparedQuery0.getCypher();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      String string0 = preparedQuery0.getJson();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      boolean boolean0 = preparedQuery0.hasdSLParams();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreparedQuery preparedQuery0 = new PreparedQuery();
      preparedQuery0.setdSLParams();
      boolean boolean0 = preparedQuery0.hasdSLParams();
      assertTrue(boolean0);
  }
}
