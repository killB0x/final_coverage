/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:21:54 GMT 2022
 */

package iot.jcypher.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.query.LiteralMap;
import iot.jcypher.query.LiteralMapList;
import iot.jcypher.query.values.JcBoolean;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcPrimitive;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiteralMapList_ESTest extends LiteralMapList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JcNumber jcNumber0 = new JcNumber(bigDecimal0);
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      Byte byte0 = new Byte((byte) (-116));
      LiteralMapList literalMapList1 = literalMapList0.select((JcPrimitive) jcNumber0, (Object) byte0);
      assertTrue(literalMapList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = Integer.getInteger("1m`/T04}=E/:", 0);
      JcNumber jcNumber0 = new JcNumber(integer0);
      LiteralMap literalMap0 = new LiteralMap();
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      LiteralMapList literalMapList1 = literalMapList0.select((JcPrimitive) jcNumber0, (Object) integer0);
      assertEquals(0, literalMapList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      literalMapList0.add(literalMap0);
      // Undeclared exception!
      try { 
        literalMapList0.selectFirst((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.LiteralMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      literalMapList0.add(literalMap0);
      // Undeclared exception!
      try { 
        literalMapList0.selectFirst((JcPrimitive) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      literalMapList0.add((LiteralMap) null);
      // Undeclared exception!
      try { 
        literalMapList0.select("REPLACE_SEPARATOR", (Object) "REPLACE_SEPARATOR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.LiteralMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      literalMapList0.add(literalMap0);
      // Undeclared exception!
      try { 
        literalMapList0.select((JcPrimitive) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.query.values.ValueAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LiteralMapList literalMapList0 = null;
      try {
        literalMapList0 = new LiteralMapList((-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -31
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JcNumber jcNumber0 = new JcNumber(bigDecimal0);
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      Byte byte0 = new Byte((byte)10);
      LiteralMapList literalMapList1 = literalMapList0.select((String) null, (Object) byte0);
      assertEquals(0, literalMapList1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JcNumber jcNumber0 = new JcNumber(bigDecimal0);
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      LiteralMapList literalMapList1 = literalMapList0.select((String) null, (Object) literalMap0);
      assertTrue(literalMapList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = Integer.getInteger("1m`/T04}=E/:", 0);
      JcNumber jcNumber0 = new JcNumber(integer0);
      LiteralMap literalMap0 = new LiteralMap();
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      LiteralMapList literalMapList1 = literalMapList0.select((JcPrimitive) jcNumber0, (Object) integer0);
      assertEquals(1, literalMapList1.size());
      assertNotSame(literalMapList1, literalMapList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Integer integer0 = Integer.getInteger("1m`/T04}=E/:", 18);
      JcNumber jcNumber0 = new JcNumber(integer0);
      LiteralMap literalMap0 = new LiteralMap();
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      LiteralMapList literalMapList1 = literalMapList0.select((JcPrimitive) jcNumber0, (Object) integer0);
      assertTrue(literalMapList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JcNumber jcNumber0 = new JcNumber(bigDecimal0);
      literalMap0.put(jcNumber0, bigDecimal0);
      literalMapList0.add(literalMap0);
      Byte byte0 = new Byte((byte)0);
      LiteralMap literalMap1 = literalMapList0.selectFirst((String) null, (Object) byte0);
      assertSame(literalMap1, literalMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList();
      LiteralMap literalMap0 = new LiteralMap();
      literalMapList0.add(literalMap0);
      Byte byte0 = new Byte((byte)0);
      LiteralMap literalMap1 = literalMapList0.selectFirst((String) null, (Object) byte0);
      assertNull(literalMap1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList(2368);
      Byte byte0 = new Byte((byte)24);
      LiteralMap literalMap0 = literalMapList0.selectFirst("", (Object) byte0);
      assertNull(literalMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList(2368);
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("");
      Object object0 = new Object();
      literalMap0.put(jcBoolean0, object0);
      literalMapList0.add(0, literalMap0);
      LiteralMap literalMap1 = literalMapList0.selectFirst((JcPrimitive) jcBoolean0, object0);
      assertSame(literalMap1, literalMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList(2368);
      LiteralMap literalMap0 = new LiteralMap();
      literalMapList0.add(0, literalMap0);
      JcNumber jcNumber0 = new JcNumber(";bjOKwzU*");
      LiteralMap literalMap1 = literalMapList0.selectFirst((JcPrimitive) jcNumber0, (Object) jcNumber0);
      assertNull(literalMap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LiteralMapList literalMapList0 = new LiteralMapList(2382);
      LiteralMap literalMap0 = new LiteralMap();
      JcBoolean jcBoolean0 = new JcBoolean("");
      Object object0 = new Object();
      literalMap0.put(jcBoolean0, object0);
      literalMapList0.add(0, literalMap0);
      LiteralMapList literalMapList1 = literalMapList0.select("", object0);
      assertNotSame(literalMapList1, literalMapList0);
      assertEquals(1, literalMapList1.size());
  }
}
