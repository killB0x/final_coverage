/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 22:07:54 GMT 2022
 */

package iot.jcypher.query.ast.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import iot.jcypher.query.api.IClause;
import iot.jcypher.query.ast.collection.CollectExpression;
import iot.jcypher.query.ast.collection.CollectionSpec;
import iot.jcypher.query.ast.collection.EvalExpression;
import iot.jcypher.query.ast.collection.ReduceEvalExpression;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcRelation;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectExpression_ESTest extends CollectExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      CollectExpression collectExpression1 = new CollectExpression();
      collectExpression0.setParent(collectExpression1);
      assertNull(collectExpression1.getClauseType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      IClause[] iClauseArray0 = new IClause[0];
      collectExpression0.setNestedClauses(iClauseArray0);
      IClause[] iClauseArray1 = collectExpression0.getNestedClauses();
      assertEquals(0, iClauseArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      JcRelation jcRelation0 = new JcRelation("8_kU+E?'\"4Gp");
      JcNode jcNode0 = jcRelation0.startNode();
      collectExpression0.setIterationVariable(jcNode0);
      JcValue jcValue0 = collectExpression0.getIterationVariable();
      assertSame(jcValue0, jcNode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      ReduceEvalExpression reduceEvalExpression0 = new ReduceEvalExpression();
      collectExpression0.setEvalExpression(reduceEvalExpression0);
      EvalExpression evalExpression0 = collectExpression0.getEvalExpression();
      assertSame(evalExpression0, reduceEvalExpression0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      collectExpression0.getType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      IClause[] iClauseArray0 = new IClause[1];
      collectExpression0.setNestedClauses(iClauseArray0);
      IClause[] iClauseArray1 = collectExpression0.getNestedClauses();
      assertSame(iClauseArray1, iClauseArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      CollectionSpec collectionSpec0 = new CollectionSpec(collectExpression0);
      collectExpression0.setCollectionToOperateOn(collectionSpec0);
      CollectionSpec collectionSpec1 = collectExpression0.getCollectionToOperateOn();
      assertSame(collectionSpec1, collectionSpec0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      collectExpression0.setParent(collectExpression0);
      CollectExpression collectExpression1 = collectExpression0.getParent();
      assertSame(collectExpression0, collectExpression1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      CollectExpression.CollectXpressionType collectExpression_CollectXpressionType0 = CollectExpression.CollectXpressionType.PREDICATE_FUNCTION;
      collectExpression0.setType(collectExpression_CollectXpressionType0);
      CollectExpression.CollectXpressionType collectExpression_CollectXpressionType1 = collectExpression0.getType();
      assertSame(collectExpression_CollectXpressionType1, collectExpression_CollectXpressionType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      CollectionSpec collectionSpec0 = collectExpression0.getCollectionToOperateOn();
      assertNull(collectionSpec0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      IClause[] iClauseArray0 = collectExpression0.getNestedClauses();
      assertNull(iClauseArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      JcValue jcValue0 = collectExpression0.getIterationVariable();
      assertNull(jcValue0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      CollectExpression collectExpression1 = collectExpression0.getParent();
      assertNull(collectExpression1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CollectExpression collectExpression0 = new CollectExpression();
      EvalExpression evalExpression0 = collectExpression0.getEvalExpression();
      assertNull(evalExpression0);
  }
}
