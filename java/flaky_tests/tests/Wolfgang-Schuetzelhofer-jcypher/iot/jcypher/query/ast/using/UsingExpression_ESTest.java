/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:35:29 GMT 2022
 */

package iot.jcypher.query.ast.using;

import org.junit.Test;
import static org.junit.Assert.*;
import iot.jcypher.query.ast.using.UsingExpression;
import iot.jcypher.query.values.JcNode;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcProperty;
import iot.jcypher.query.values.JcValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UsingExpression_ESTest extends UsingExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      JcNode jcNode0 = new JcNode((String) null);
      usingExpression0.setValueRef(jcNode0);
      boolean boolean0 = usingExpression0.isUsingScan();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      JcNode jcNode0 = new JcNode("ON MATCH REMOVE");
      JcProperty jcProperty0 = jcNode0.property("ON MATCH REMOVE");
      usingExpression0.setValueRef(jcProperty0);
      boolean boolean0 = usingExpression0.isUsingIndex();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      usingExpression0.setIndexLabel("0ERY8@L|`X]L( t(");
      String string0 = usingExpression0.getIndexLabel();
      assertEquals("0ERY8@L|`X]L( t(", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      usingExpression0.setIndexLabel("");
      String string0 = usingExpression0.getIndexLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      String string0 = usingExpression0.getIndexLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      JcNode jcNode0 = new JcNode("ON MATCH REMOVE");
      JcNumber jcNumber0 = jcNode0.asNumber();
      usingExpression0.setValueRef(jcNumber0);
      JcValue jcValue0 = usingExpression0.getValueRef();
      assertSame(jcValue0, jcNumber0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      boolean boolean0 = usingExpression0.isUsingIndex();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      boolean boolean0 = usingExpression0.isUsingScan();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UsingExpression usingExpression0 = new UsingExpression();
      JcValue jcValue0 = usingExpression0.getValueRef();
      assertNull(jcValue0);
  }
}
