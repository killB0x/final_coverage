/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:13:44 GMT 2022
 */

package iot.jcypher.query.ast.returns;

import org.junit.Test;
import static org.junit.Assert.*;
import iot.jcypher.query.ast.returns.Order;
import iot.jcypher.query.ast.returns.ReturnElement;
import iot.jcypher.query.ast.returns.ReturnExpression;
import iot.jcypher.query.values.JcCollection;
import iot.jcypher.query.values.JcNumber;
import iot.jcypher.query.values.JcValue;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReturnExpression_ESTest extends ReturnExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setSkip(1956);
      int int0 = returnExpression0.getSkip();
      assertEquals(1956, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      ReturnElement returnElement0 = new ReturnElement();
      returnExpression0.setReturnValue(returnElement0);
      returnExpression0.getReturnValue();
      assertFalse(returnExpression0.isDistinct());
      assertEquals((-1), returnExpression0.getSkip());
      assertEquals((-1), returnExpression0.getLimit());
      assertFalse(returnExpression0.isCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      Order order0 = new Order();
      returnExpression0.addOrder(order0);
      returnExpression0.getOrders();
      assertFalse(returnExpression0.isDistinct());
      assertFalse(returnExpression0.isCount());
      assertEquals((-1), returnExpression0.getSkip());
      assertEquals((-1), returnExpression0.getLimit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.setLimit(29);
      int int0 = returnExpression0.getLimit();
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      Order order0 = new Order();
      returnExpression0.addOrder(order0);
      returnExpression0.addOrder(order0);
      assertFalse(returnExpression0.isCount());
      assertFalse(returnExpression0.isDistinct());
      assertEquals((-1), returnExpression0.getSkip());
      assertEquals((-1), returnExpression0.getLimit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.getAlias();
      assertFalse(returnExpression0.isDistinct());
      assertEquals((-1), returnExpression0.getLimit());
      assertFalse(returnExpression0.isCount());
      assertEquals((-1), returnExpression0.getSkip());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      assertEquals((-1), returnExpression0.getLimit());
      
      returnExpression0.setLimit(0);
      int int0 = returnExpression0.getLimit();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      assertEquals((-1), returnExpression0.getSkip());
      
      returnExpression0.setSkip(0);
      int int0 = returnExpression0.getSkip();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      int int0 = returnExpression0.getLimit();
      assertEquals((-1), int0);
      assertFalse(returnExpression0.isCount());
      assertFalse(returnExpression0.isDistinct());
      assertEquals((-1), returnExpression0.getSkip());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      assertFalse(returnExpression0.isDistinct());
      
      returnExpression0.setDistinct();
      boolean boolean0 = returnExpression0.isDistinct();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      int int0 = returnExpression0.getSkip();
      assertEquals((-1), int0);
      assertEquals((-1), returnExpression0.getLimit());
      assertFalse(returnExpression0.isDistinct());
      assertFalse(returnExpression0.isCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      assertFalse(returnExpression0.isCount());
      
      returnExpression0.setCount();
      boolean boolean0 = returnExpression0.isCount();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      boolean boolean0 = returnExpression0.isCount();
      assertFalse(boolean0);
      assertEquals((-1), returnExpression0.getLimit());
      assertFalse(returnExpression0.isDistinct());
      assertEquals((-1), returnExpression0.getSkip());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      returnExpression0.getReturnValue();
      assertEquals((-1), returnExpression0.getLimit());
      assertEquals((-1), returnExpression0.getSkip());
      assertFalse(returnExpression0.isCount());
      assertFalse(returnExpression0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      List<Order> list0 = returnExpression0.getOrders();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JcCollection<JcNumber> jcCollection0 = new JcCollection<JcNumber>(linkedList0);
      JcCollection<JcValue> jcCollection1 = jcCollection0.addAll(list0);
      returnExpression0.setAlias(jcCollection1);
      returnExpression0.getAlias();
      assertEquals((-1), returnExpression0.getSkip());
      assertFalse(returnExpression0.isDistinct());
      assertFalse(returnExpression0.isCount());
      assertEquals((-1), returnExpression0.getLimit());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReturnExpression returnExpression0 = new ReturnExpression();
      boolean boolean0 = returnExpression0.isDistinct();
      assertEquals((-1), returnExpression0.getLimit());
      assertFalse(returnExpression0.isCount());
      assertEquals((-1), returnExpression0.getSkip());
      assertFalse(boolean0);
  }
}
