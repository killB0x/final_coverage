/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:43:29 GMT 2022
 */

package iot.jcypher.domainquery.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import iot.jcypher.domainquery.api.DomainObjectMatch;
import iot.jcypher.domainquery.internal.RecordedQuery;
import iot.jcypher.domainquery.internal.ReplayedQueryContext;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReplayedQueryContext_ESTest extends ReplayedQueryContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RecordedQuery recordedQuery0 = new RecordedQuery(true);
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext(recordedQuery0);
      RecordedQuery recordedQuery1 = replayedQueryContext0.getRecordedQuery();
      assertSame(recordedQuery1, recordedQuery0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RecordedQuery recordedQuery0 = new RecordedQuery(false);
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext(recordedQuery0);
      RecordedQuery recordedQuery1 = replayedQueryContext0.getRecordedQuery();
      assertFalse(recordedQuery1.isGeneric());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RecordedQuery recordedQuery0 = new RecordedQuery(true);
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext(recordedQuery0);
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(domainObjectMatch0).toString();
      replayedQueryContext0.addDomainObjectMatch("", domainObjectMatch0);
      Map<String, DomainObjectMatch<?>> map0 = replayedQueryContext0.getId2DomainObjectMatch();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RecordedQuery recordedQuery0 = new RecordedQuery(true);
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext(recordedQuery0);
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(domainObjectMatch0).toString();
      replayedQueryContext0.addDomainObjectMatch("", domainObjectMatch0);
      DomainObjectMatch<?> domainObjectMatch1 = replayedQueryContext0.getById("");
      assertNotNull(domainObjectMatch1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext((RecordedQuery) null);
      RecordedQuery recordedQuery0 = replayedQueryContext0.getRecordedQuery();
      assertNull(recordedQuery0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext((RecordedQuery) null);
      Map<String, DomainObjectMatch<?>> map0 = replayedQueryContext0.getId2DomainObjectMatch();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReplayedQueryContext replayedQueryContext0 = new ReplayedQueryContext((RecordedQuery) null);
      DomainObjectMatch<?> domainObjectMatch0 = replayedQueryContext0.getById("");
      assertNull(domainObjectMatch0);
  }
}
