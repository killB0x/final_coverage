/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:33:53 GMT 2022
 */

package iot.jcypher.domainquery.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.internal.DomainAccess;
import iot.jcypher.domainquery.AbstractDomainQuery;
import iot.jcypher.domainquery.GDomainQuery;
import iot.jcypher.domainquery.api.Collect;
import iot.jcypher.domainquery.ast.CollectExpression;
import iot.jcypher.domainquery.ast.ConcatenateExpression;
import iot.jcypher.domainquery.ast.IASTObject;
import iot.jcypher.query.values.JcProperty;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Collect_ESTest extends Collect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0);
      GDomainQuery gDomainQuery0 = new GDomainQuery(domainAccess0);
      AbstractDomainQuery.IntAccess abstractDomainQuery_IntAccess0 = gDomainQuery0.new IntAccess();
      CollectExpression collectExpression0 = new CollectExpression((JcProperty) null, abstractDomainQuery_IntAccess0);
      Collect collect0 = new Collect(collectExpression0);
      Class<GDomainQuery> class0 = GDomainQuery.class;
      // Undeclared exception!
      try { 
        collect0.AS(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Collect collect0 = new Collect((CollectExpression) null);
      ConcatenateExpression.Concatenator concatenateExpression_Concatenator0 = ConcatenateExpression.Concatenator.OR;
      ConcatenateExpression concatenateExpression0 = new ConcatenateExpression(concatenateExpression_Concatenator0);
      collect0.astObject = (IASTObject) concatenateExpression0;
      Class<CollectExpression> class0 = CollectExpression.class;
      // Undeclared exception!
      try { 
        collect0.AS(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class iot.jcypher.domainquery.ast.ConcatenateExpression cannot be cast to class iot.jcypher.domainquery.ast.CollectExpression (iot.jcypher.domainquery.ast.ConcatenateExpression and iot.jcypher.domainquery.ast.CollectExpression are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @7528a56d)
         //
         verifyException("iot.jcypher.domainquery.api.Collect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Collect collect0 = new Collect((CollectExpression) null);
      Class<GDomainQuery> class0 = GDomainQuery.class;
      // Undeclared exception!
      try { 
        collect0.AS(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.api.Collect", e);
      }
  }
}
