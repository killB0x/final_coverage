/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:46:53 GMT 2022
 */

package iot.jcypher.domainquery.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import iot.jcypher.domainquery.api.DomainObjectMatch;
import iot.jcypher.domainquery.ast.FromPreviousQueryExpression;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FromPreviousQueryExpression_ESTest extends FromPreviousQueryExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression(domainObjectMatch0, (DomainObjectMatch<?>) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DomainObjectMatch<Integer> domainObjectMatch0 = (DomainObjectMatch<Integer>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression(domainObjectMatch0, linkedList0);
      List<?> list0 = fromPreviousQueryExpression0.getPreviousObjects();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression(domainObjectMatch0, linkedList0);
      List<?> list0 = fromPreviousQueryExpression0.getPreviousObjects();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(domainObjectMatch0).toString();
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression(domainObjectMatch0, domainObjectMatch0);
      DomainObjectMatch<?> domainObjectMatch1 = fromPreviousQueryExpression0.getPreviousMatch();
      assertNotNull(domainObjectMatch1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(domainObjectMatch0).toString();
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression(domainObjectMatch0, domainObjectMatch0);
      DomainObjectMatch<?> domainObjectMatch1 = fromPreviousQueryExpression0.getActualMatch();
      assertNotNull(domainObjectMatch1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression((DomainObjectMatch<?>) null, linkedList0);
      DomainObjectMatch<?> domainObjectMatch0 = fromPreviousQueryExpression0.getPreviousMatch();
      assertNull(domainObjectMatch0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression((DomainObjectMatch<?>) null, (DomainObjectMatch<?>) null);
      List<?> list0 = fromPreviousQueryExpression0.getPreviousObjects();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FromPreviousQueryExpression fromPreviousQueryExpression0 = new FromPreviousQueryExpression((DomainObjectMatch<?>) null, (DomainObjectMatch<?>) null);
      DomainObjectMatch<?> domainObjectMatch0 = fromPreviousQueryExpression0.getActualMatch();
      assertNull(domainObjectMatch0);
  }
}
