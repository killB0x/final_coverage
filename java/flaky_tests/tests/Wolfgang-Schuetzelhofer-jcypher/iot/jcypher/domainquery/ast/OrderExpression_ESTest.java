/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:45:14 GMT 2022
 */

package iot.jcypher.domainquery.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.domainquery.api.DomainObjectMatch;
import iot.jcypher.domainquery.ast.OrderExpression;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderExpression_ESTest extends OrderExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      orderExpression0.getCreateOrderCriteriaFor("Cu5YpKiCa#9qC");
      List<OrderExpression.OrderBy> list0 = orderExpression0.getOrderCriterias();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrderExpression orderExpression0 = new OrderExpression((DomainObjectMatch<?>) null);
      DomainObjectMatch<?> domainObjectMatch0 = orderExpression0.getObjectMatch();
      assertNull(domainObjectMatch0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DomainObjectMatch<OrderExpression.OrderBy> domainObjectMatch0 = (DomainObjectMatch<OrderExpression.OrderBy>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      OrderExpression.OrderBy orderExpression_OrderBy0 = orderExpression0.getCreateOrderCriteriaFor("");
      orderExpression_OrderBy0.setDirection(563);
      assertEquals(563, orderExpression_OrderBy0.getDirection());
      
      OrderExpression.OrderBy orderExpression_OrderBy1 = orderExpression0.getCreateOrderCriteriaFor("");
      assertEquals(563, orderExpression_OrderBy1.getDirection());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      List<OrderExpression.OrderBy> list0 = orderExpression0.getOrderCriterias();
      List<OrderExpression.OrderBy> list1 = orderExpression0.getOrderCriterias();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OrderExpression.OrderBy orderExpression_OrderBy0 = new OrderExpression.OrderBy("nN|._hsC");
      orderExpression_OrderBy0.getAttributeName();
      assertEquals(0, orderExpression_OrderBy0.getDirection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      orderExpression0.getCreateOrderCriteriaFor("Cu5YpKiCa#9qC");
      OrderExpression.OrderBy orderExpression_OrderBy0 = orderExpression0.getCreateOrderCriteriaFor("");
      assertEquals(0, orderExpression_OrderBy0.getDirection());
      assertEquals("", orderExpression_OrderBy0.getAttributeName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      OrderExpression.OrderBy orderExpression_OrderBy0 = orderExpression0.getCreateOrderCriteriaFor("Cu5YpKiCa#9qC");
      int int0 = orderExpression_OrderBy0.getDirection();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      OrderExpression.OrderBy orderExpression_OrderBy0 = orderExpression0.getCreateOrderCriteriaFor("Cu5YpKiCa#9qC");
      assertNotNull(orderExpression_OrderBy0);
      
      orderExpression_OrderBy0.setDirection((-1577));
      assertEquals((-1577), orderExpression_OrderBy0.getDirection());
      
      OrderExpression.OrderBy orderExpression_OrderBy1 = orderExpression0.getCreateOrderCriteriaFor("Cu5YpKiCa#9qC");
      assertEquals((-1577), orderExpression_OrderBy1.getDirection());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DomainObjectMatch<Object> domainObjectMatch0 = (DomainObjectMatch<Object>) mock(DomainObjectMatch.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(domainObjectMatch0).toString();
      OrderExpression orderExpression0 = new OrderExpression(domainObjectMatch0);
      DomainObjectMatch<?> domainObjectMatch1 = orderExpression0.getObjectMatch();
      assertNotNull(domainObjectMatch1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OrderExpression orderExpression0 = new OrderExpression((DomainObjectMatch<?>) null);
      orderExpression0.getCreateOrderCriteriaFor((String) null);
      // Undeclared exception!
      try { 
        orderExpression0.getCreateOrderCriteriaFor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
