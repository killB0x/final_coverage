/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 21:40:20 GMT 2022
 */

package iot.jcypher.domainquery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.database.IDBAccess;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.internal.DomainAccess;
import iot.jcypher.domainquery.AbstractDomainQuery;
import iot.jcypher.domainquery.CountQueryResult;
import iot.jcypher.domainquery.DomainQuery;
import iot.jcypher.domainquery.DomainQueryResult;
import iot.jcypher.domainquery.GDomainQuery;
import iot.jcypher.domainquery.InternalAccess;
import iot.jcypher.domainquery.QueryLoader;
import iot.jcypher.domainquery.internal.RecordedQuery;
import iot.jcypher.domainquery.internal.ReplayedQueryContext;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InternalAccess_ESTest extends InternalAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "A?*V sje7", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      RecordedQuery recordedQuery0 = new RecordedQuery(true);
      InternalAccess.recordQuery(domainQuery0, recordedQuery0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "o96v`(u<r*tlCU7/[)", iDomainAccess_DomainLabelUse0);
      GDomainQuery gDomainQuery0 = new GDomainQuery(domainAccess0);
      InternalAccess.replayQuery(gDomainQuery0, (ReplayedQueryContext) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccess domainAccess0 = new DomainAccess((IDBAccess) null, "o96v`(u<r*tlCU7/[)", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = new DomainQuery(domainAccess0);
      Map<Object, String> map0 = InternalAccess.getRecordedQueryObjects(domainQuery0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DomainQueryResult domainQueryResult0 = new DomainQueryResult((AbstractDomainQuery) null);
      AbstractDomainQuery abstractDomainQuery0 = InternalAccess.getDomainQuery(domainQueryResult0);
      assertNull(abstractDomainQuery0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "Location", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      DomainQueryResult domainQueryResult0 = new DomainQueryResult(domainQuery0);
      InternalAccess.getDomainQuery(domainQueryResult0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountQueryResult countQueryResult0 = new CountQueryResult((AbstractDomainQuery) null);
      AbstractDomainQuery abstractDomainQuery0 = InternalAccess.getDomainQuery(countQueryResult0);
      assertNull(abstractDomainQuery0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "o96v`(u<r*tlCU7/[)", iDomainAccess_DomainLabelUse0);
      GDomainQuery gDomainQuery0 = new GDomainQuery(domainAccess0);
      CountQueryResult countQueryResult0 = new CountQueryResult(gDomainQuery0);
      InternalAccess.getDomainQuery(countQueryResult0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.recordQuery((AbstractDomainQuery) null, (RecordedQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.getRecordedQueryObjects((AbstractDomainQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.getQueryExecutor((AbstractDomainQuery) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GDomainQuery gDomainQuery0 = new GDomainQuery((IDomainAccess) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        InternalAccess.createMatch((AbstractDomainQuery) gDomainQuery0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.internal.QueryExecutor$MappingInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "A?*V sje7", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      Object object0 = new Object();
      InternalAccess.createQueryPersistor(domainQuery0, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.replayQuery((AbstractDomainQuery) null, (ReplayedQueryContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "A?*V sje7", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      InternalAccess.getRecordedQueryObjects(domainQuery0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InternalAccess internalAccess0 = new InternalAccess();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.getDomainQuery((CountQueryResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.ALWAYS;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "o96v`(u<r*tlCU7/[)", iDomainAccess_DomainLabelUse0);
      GDomainQuery gDomainQuery0 = new GDomainQuery(domainAccess0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        InternalAccess.createMatch((AbstractDomainQuery) gDomainQuery0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.query.writer.JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        InternalAccess.getDomainQuery((DomainQueryResult) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.InternalAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.NEVER;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "A?*V sje7", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      InternalAccess.getQueryExecutor(domainQuery0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QueryLoader<String> queryLoader0 = InternalAccess.createQueryLoader("A?*V sje7", (Object) "A?*V sje7");
      assertNotNull(queryLoader0);
  }
}
