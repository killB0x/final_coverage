/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 20:29:17 GMT 2022
 */

package iot.jcypher.domainquery;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import iot.jcypher.database.remote.RemoteDBAccess;
import iot.jcypher.domain.IDomainAccess;
import iot.jcypher.domain.internal.DomainAccess;
import iot.jcypher.domainquery.DomainQuery;
import iot.jcypher.domainquery.GDomainQuery;
import iot.jcypher.domainquery.QueryPersistor;
import iot.jcypher.domainquery.api.DomainObjectMatch;
import iot.jcypher.query.writer.Format;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryPersistor_ESTest extends QueryPersistor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "queryJSON", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      QueryPersistor queryPersistor0 = new QueryPersistor(domainQuery0, iDomainAccess_DomainLabelUse0);
      // Undeclared exception!
      try { 
        queryPersistor0.createMemento();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.domainquery.internal.JSONConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      GDomainQuery gDomainQuery0 = domainAccess_GenericDomainAccess0.createQuery();
      QueryPersistor queryPersistor0 = domainAccess_GenericDomainAccess0.createQueryPersistor(gDomainQuery0);
      queryPersistor0.augment((DomainObjectMatch<?>) null, "");
      // Undeclared exception!
      try { 
        queryPersistor0.createMemento();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.api.APIAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      GDomainQuery gDomainQuery0 = domainAccess_GenericDomainAccess0.createQuery();
      QueryPersistor queryPersistor0 = domainAccess_GenericDomainAccess0.createQueryPersistor(gDomainQuery0);
      queryPersistor0.augment((DomainObjectMatch<?>) null, "");
      queryPersistor0.augment((DomainObjectMatch<?>) null, "_query");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      GDomainQuery gDomainQuery0 = domainAccess_GenericDomainAccess0.createQuery();
      QueryPersistor queryPersistor0 = domainAccess_GenericDomainAccess0.createQueryPersistor(gDomainQuery0);
      QueryPersistor queryPersistor1 = queryPersistor0.augment((DomainObjectMatch<?>) null, "");
      // Undeclared exception!
      try { 
        queryPersistor1.storeAs("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("iot.jcypher.domainquery.api.APIAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, ".D73Fac*>AM:[~t?K", iDomainAccess_DomainLabelUse0);
      DomainQuery domainQuery0 = domainAccess0.createQuery();
      QueryPersistor queryPersistor0 = domainAccess0.createQueryPersistor(domainQuery0);
      // Undeclared exception!
      try { 
        queryPersistor0.storeAs(".D73Fac*>AM:[~t?K");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/json/Json
         //
         verifyException("iot.jcypher.domainquery.internal.JSONConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RemoteDBAccess remoteDBAccess0 = new RemoteDBAccess();
      IDomainAccess.DomainLabelUse iDomainAccess_DomainLabelUse0 = IDomainAccess.DomainLabelUse.AUTO;
      DomainAccess domainAccess0 = new DomainAccess(remoteDBAccess0, "", iDomainAccess_DomainLabelUse0);
      DomainAccess.GenericDomainAccess domainAccess_GenericDomainAccess0 = domainAccess0.new GenericDomainAccess();
      GDomainQuery gDomainQuery0 = domainAccess_GenericDomainAccess0.createQuery();
      QueryPersistor queryPersistor0 = domainAccess_GenericDomainAccess0.createQueryPersistor(gDomainQuery0);
      Format format0 = Format.NONE;
      queryPersistor0.setPrettyFormat(format0);
  }
}
