/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 03:39:50 GMT 2022
 */

package com.github.hwywl.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.hwywl.model.Limit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Limit_ESTest extends Limit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      Integer integer0 = new Integer(0);
      limit0.setPageSize(integer0);
      limit0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Limit limit0 = new Limit(integer0, integer0, integer0);
      Integer integer1 = Integer.valueOf(1);
      Limit limit1 = new Limit(integer0, integer1, integer0);
      boolean boolean0 = limit0.equals(limit1);
      assertEquals(1, (int)limit1.getPageStart());
      assertTrue(boolean0);
      assertEquals(1, (int)limit1.getTypeOfDatabase());
      assertEquals(1, (int)limit1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = limit0.getTypeOfDatabase();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Integer integer0 = new Integer(2255);
      Limit limit0 = limit_LimitBuilder0.build();
      limit0.setTypeOfDatabase(integer0);
      Integer integer1 = limit0.getTypeOfDatabase();
      assertEquals(2255, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Integer integer0 = new Integer((-1042));
      Limit.LimitBuilder limit_LimitBuilder1 = limit_LimitBuilder0.typeOfDatabase(integer0);
      Limit limit0 = limit_LimitBuilder1.build();
      Integer integer1 = limit0.getTypeOfDatabase();
      assertEquals((-1042), (int)integer1);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = new Limit.LimitBuilder();
      Integer integer0 = new Integer(1);
      Limit limit0 = limit_LimitBuilder0.build();
      limit0.setPageStart(integer0);
      Integer integer1 = limit0.getPageStart();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = Integer.getInteger("J#Va9Hx.n>S}xT$", (-1));
      limit0.setPageStart(integer0);
      Integer integer1 = limit0.getPageStart();
      assertEquals((-1), (int)integer1);
      assertEquals(0, (int)limit0.getTypeOfDatabase());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = new Limit.LimitBuilder();
      Integer integer0 = new Integer(0);
      Limit.LimitBuilder limit_LimitBuilder1 = limit_LimitBuilder0.pageSize(integer0);
      Limit limit0 = limit_LimitBuilder1.build();
      Integer integer1 = limit0.getPageSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Integer integer0 = new Integer(2878);
      Limit limit0 = limit_LimitBuilder0.build();
      limit0.setPageSize(integer0);
      Integer integer1 = limit0.getPageSize();
      assertEquals(2878, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = new Integer((-1113));
      limit0.setPageSize(integer0);
      Integer integer1 = limit0.getPageSize();
      assertEquals(0, (int)limit0.getTypeOfDatabase());
      assertNotNull(integer1);
      assertEquals((-1113), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Limit limit0 = new Limit();
      limit0.canEqual(limit0);
      assertEquals(0, (int)limit0.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      boolean boolean0 = limit0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = new Limit.LimitBuilder();
      Limit limit0 = limit_LimitBuilder0.build();
      Integer integer0 = limit0.getPageSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = new Limit.LimitBuilder();
      Limit limit0 = limit_LimitBuilder0.build();
      Integer integer0 = limit0.getPageStart();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      Integer integer0 = limit0.getTypeOfDatabase();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Limit limit0 = new Limit();
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit1 = limit_LimitBuilder0.build();
      boolean boolean0 = limit0.equals(limit1);
      assertEquals(0, (int)limit0.getTypeOfDatabase());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      Limit limit1 = new Limit();
      boolean boolean0 = limit0.equals(limit1);
      assertFalse(limit1.equals((Object)limit0));
      assertFalse(boolean0);
      assertEquals(0, (int)limit1.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      Limit limit1 = limit_LimitBuilder0.build();
      boolean boolean0 = limit1.equals(limit0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = new Integer(0);
      limit0.setPageSize(integer0);
      Limit limit1 = new Limit();
      boolean boolean0 = limit1.equals(limit0);
      assertFalse(limit0.equals((Object)limit1));
      assertFalse(boolean0);
      assertEquals(0, (int)limit1.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = new Integer(1);
      Limit limit1 = new Limit(integer0, integer0, integer0);
      boolean boolean0 = limit0.equals(limit1);
      assertFalse(boolean0);
      assertEquals(0, (int)limit0.getTypeOfDatabase());
      assertEquals(1, (int)limit1.getPageStart());
      assertEquals(1, (int)limit1.getTypeOfDatabase());
      assertEquals(1, (int)limit1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = new Integer((-1));
      Limit limit1 = new Limit(integer0, integer0, integer0);
      boolean boolean0 = limit1.equals(limit0);
      assertEquals((-1), (int)limit1.getPageSize());
      assertFalse(boolean0);
      assertEquals((-1), (int)limit1.getPageStart());
      assertEquals((-1), (int)limit1.getTypeOfDatabase());
      assertEquals(0, (int)limit0.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      boolean boolean0 = limit0.equals("Limit.LimitBuilder(pageStart=null, pageSize=null, typeOfDatabase=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Limit limit0 = new Limit();
      boolean boolean0 = limit0.equals(limit0);
      assertEquals(0, (int)limit0.getTypeOfDatabase());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = new Integer(0);
      limit0.pageStart = integer0;
      limit0.setPageSize(limit0.pageStart);
      limit0.hashCode();
      assertEquals(0, (int)limit0.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Limit limit0 = new Limit();
      limit0.hashCode();
      assertEquals(0, (int)limit0.getTypeOfDatabase());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      String string0 = limit_LimitBuilder0.toString();
      assertEquals("Limit.LimitBuilder(pageStart=null, pageSize=null, typeOfDatabase=null)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = new Limit.LimitBuilder();
      Integer integer0 = new Integer(0);
      Limit.LimitBuilder limit_LimitBuilder1 = limit_LimitBuilder0.pageStart(integer0);
      Limit limit0 = limit_LimitBuilder1.build();
      Integer integer1 = limit0.getPageStart();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Limit.LimitBuilder limit_LimitBuilder0 = Limit.builder();
      Limit limit0 = limit_LimitBuilder0.build();
      String string0 = limit0.toString();
      assertEquals("Limit(pageStart=null, pageSize=null, typeOfDatabase=null)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Limit limit0 = new Limit();
      Limit limit1 = new Limit();
      boolean boolean0 = limit0.equals(limit1);
      assertEquals(0, (int)limit1.getTypeOfDatabase());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Limit limit0 = new Limit();
      Integer integer0 = Integer.valueOf(1);
      limit0.setPageSize(integer0);
      Limit limit1 = new Limit();
      boolean boolean0 = limit0.equals(limit1);
      assertFalse(boolean0);
      assertEquals(1, (int)limit0.getPageSize());
      assertEquals(0, (int)limit1.getTypeOfDatabase());
  }
}
