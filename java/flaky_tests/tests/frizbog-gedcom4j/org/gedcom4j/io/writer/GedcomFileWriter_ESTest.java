/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:49:47 GMT 2022
 */

package org.gedcom4j.io.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.gedcom4j.io.writer.GedcomFileWriter;
import org.gedcom4j.io.writer.LineTerminator;
import org.gedcom4j.model.Address;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.writer.GedcomWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GedcomFileWriter_ESTest extends GedcomFileWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, list0);
      LineTerminator lineTerminator0 = LineTerminator.CRLF;
      gedcomFileWriter0.setTerminator(lineTerminator0);
      assertTrue(gedcomFileWriter0.isUseLittleEndianForUnicode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, list0);
      assertTrue(gedcomFileWriter0.isUseLittleEndianForUnicode());
      
      gedcomFileWriter0.setUseLittleEndianForUnicode(false);
      boolean boolean0 = gedcomFileWriter0.isUseLittleEndianForUnicode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1 CHAR UTF-8");
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      gedcomWriter0.cancel();
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        gedcomFileWriter0.write(pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Construction and writing of GEDCOM cancelled
         //
         verifyException("org.gedcom4j.io.writer.Utf8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter((GedcomWriter) null, linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q<U`'PpF+2e3$z7|NU", false);
      // Undeclared exception!
      try { 
        gedcomFileWriter0.write(mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.io.writer.AbstractEncodingSpecificWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1 CHAR UNICODE");
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      gedcomFileWriter0.setUseLittleEndianForUnicode(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      gedcomFileWriter0.write(byteArrayOutputStream0);
      assertEquals(30, byteArrayOutputStream0.size());
      assertFalse(gedcomFileWriter0.isUseLittleEndianForUnicode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1 CHAR UNICODE");
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      gedcomFileWriter0.write(byteArrayOutputStream0);
      assertEquals(30, byteArrayOutputStream0.size());
      assertEquals("1\u0000 \u0000C\u0000H\u0000A\u0000R\u0000 \u0000U\u0000N\u0000I\u0000C\u0000O\u0000D\u0000E\u0000\n\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1 CHAR UTF-8");
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        gedcomFileWriter0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("1 CHAR ASCII");
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      gedcomFileWriter0.write(byteArrayOutputStream0);
      assertTrue(gedcomFileWriter0.isUseLittleEndianForUnicode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, linkedList0);
      gedcomFileWriter0.getTerminator();
      assertTrue(gedcomFileWriter0.isUseLittleEndianForUnicode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      GedcomFileWriter gedcomFileWriter0 = new GedcomFileWriter(gedcomWriter0, list0);
      boolean boolean0 = gedcomFileWriter0.isUseLittleEndianForUnicode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      gedcomWriter0.write("`RD[Di8uC)cq%&");
      assertFalse(gedcomWriter0.isValidationSuppressed());
  }
}
