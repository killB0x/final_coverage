/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:40:19 GMT 2022
 */

package org.gedcom4j.io.writer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.gedcom4j.io.writer.LineTerminator;
import org.gedcom4j.io.writer.UnicodeLittleEndianWriter;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.writer.GedcomWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnicodeLittleEndianWriter_ESTest extends UnicodeLittleEndianWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter(gedcomWriter0);
      LineTerminator lineTerminator0 = LineTerminator.CR_ONLY;
      unicodeLittleEndianWriter0.terminator = lineTerminator0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      unicodeLittleEndianWriter0.writeLine(byteArrayOutputStream0, "`Y,Y");
      assertEquals(10, byteArrayOutputStream0.size());
      assertEquals("`\u0000Y\u0000,\u0000Y\u0000\r\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      gedcomWriter0.cancel();
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter(gedcomWriter0);
      try { 
        unicodeLittleEndianWriter0.writeLineTerminator(byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Construction and writing of GEDCOM cancelled
         //
         verifyException("org.gedcom4j.io.writer.UnicodeLittleEndianWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter((GedcomWriter) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unicodeLittleEndianWriter0.writeLineTerminator(byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.io.writer.UnicodeLittleEndianWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter((GedcomWriter) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        unicodeLittleEndianWriter0.writeLineTerminator(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter((GedcomWriter) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unicodeLittleEndianWriter0.writeLine(byteArrayOutputStream0, "CIRCULAR_ANCESTRAL_RELATIONSHIP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.io.writer.UnicodeLittleEndianWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter((GedcomWriter) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        unicodeLittleEndianWriter0.writeLine(pipedOutputStream0, "q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      gedcomWriter0.cancel();
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter(gedcomWriter0);
      try { 
        unicodeLittleEndianWriter0.writeLine(byteArrayOutputStream0, "Termiator selction of ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Construction and writing of GEDCOM cancelled
         //
         verifyException("org.gedcom4j.io.writer.UnicodeLittleEndianWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter(gedcomWriter0);
      LineTerminator lineTerminator0 = LineTerminator.CRLF;
      unicodeLittleEndianWriter0.terminator = lineTerminator0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FyI{|cJ'-V837+9", true);
      unicodeLittleEndianWriter0.writeLineTerminator(mockFileOutputStream0);
      unicodeLittleEndianWriter0.writeLine(mockFileOutputStream0, "");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      GedcomWriter gedcomWriter0 = new GedcomWriter(gedcom0);
      UnicodeLittleEndianWriter unicodeLittleEndianWriter0 = new UnicodeLittleEndianWriter(gedcomWriter0);
      LineTerminator lineTerminator0 = LineTerminator.LFCR;
      unicodeLittleEndianWriter0.terminator = lineTerminator0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qaw>6AX@ ", true);
      unicodeLittleEndianWriter0.writeLineTerminator(mockFileOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      unicodeLittleEndianWriter0.writeLineTerminator(byteArrayOutputStream0);
      assertEquals("\n\u0000\r\u0000", byteArrayOutputStream0.toString());
  }
}
