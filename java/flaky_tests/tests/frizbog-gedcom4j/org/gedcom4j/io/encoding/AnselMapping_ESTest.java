/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:51:45 GMT 2022
 */

package org.gedcom4j.io.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.io.encoding.AnselMapping;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnselMapping_ESTest extends AnselMapping_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('\uFE23');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('\u0333');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('\u0300');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char char0 = AnselMapping.decode(128);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char char0 = AnselMapping.encode('6');
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char char0 = AnselMapping.decode((-235));
      assertEquals('\uFF15', char0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('\uFF6B');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('\uFE20');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = AnselMapping.isUnicodeCombiningDiacritic('l');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char char0 = AnselMapping.encode('+');
      assertEquals('+', char0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char char0 = AnselMapping.encode('\uFE23');
      assertEquals('\u00FB', char0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char char0 = AnselMapping.encode('\uFE22');
      assertEquals('\u00FA', char0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char char0 = AnselMapping.encode('\uFE21');
      assertEquals('\u00EC', char0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char char0 = AnselMapping.encode('\uFE20');
      assertEquals('\u00EB', char0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char char0 = AnselMapping.encode('\u266F');
      assertEquals('\u00C4', char0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char char0 = AnselMapping.encode('\u266D');
      assertEquals('\u00A9', char0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char char0 = AnselMapping.encode('\u25A1');
      assertEquals('\u00BE', char0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char char0 = AnselMapping.encode('\u25A0');
      assertEquals('\u00BF', char0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char char0 = AnselMapping.encode('\u2117');
      assertEquals('\u00C2', char0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char char0 = AnselMapping.encode('\u2113');
      assertEquals('\u00C1', char0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char char0 = AnselMapping.encode('\u20AC');
      assertEquals('\u00C8', char0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0338');
      assertEquals('\u00FC', char0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0333');
      assertEquals('\u00F5', char0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0332');
      assertEquals('\u00F6', char0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char char0 = AnselMapping.encode('\u032E');
      assertEquals('\u00F9', char0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0328');
      assertEquals('\u00F1', char0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0327');
      assertEquals('\u00F0', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0326');
      assertEquals('\u00F7', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0325');
      assertEquals('\u00F4', char0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0324');
      assertEquals('\u00F3', char0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0323');
      assertEquals('\u00F2', char0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = AnselMapping.encode('\u031C');
      assertEquals('\u00F8', char0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0315');
      assertEquals('\u00ED', char0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0310');
      assertEquals('\u00EF', char0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char char0 = AnselMapping.encode('\u030C');
      assertEquals('\u00E9', char0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char char0 = AnselMapping.encode('\u030B');
      assertEquals('\u00EE', char0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char char0 = AnselMapping.encode('\u030A');
      assertEquals('\u00EA', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0309');
      assertEquals('\u00E0', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0308');
      assertEquals('\u00E8', char0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0307');
      assertEquals('\u00E7', char0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0306');
      assertEquals('\u00E6', char0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0304');
      assertEquals('\u00E5', char0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0303');
      assertEquals('\u00E4', char0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0302');
      assertEquals('\u00E3', char0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0301');
      assertEquals('\u00E2', char0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0300');
      assertEquals('\u00E1', char0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char char0 = AnselMapping.encode('\u02BC');
      assertEquals('\u00AE', char0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char char0 = AnselMapping.encode('\u02BB');
      assertEquals('\u00B0', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char char0 = AnselMapping.encode('\u02BA');
      assertEquals('\u00B7', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char char0 = AnselMapping.encode('\u02B9');
      assertEquals('\u00A7', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char char0 = AnselMapping.encode('\u01B0');
      assertEquals('\u00BD', char0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char char0 = AnselMapping.encode('\u01AF');
      assertEquals('\u00AD', char0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char char0 = AnselMapping.encode('\u01A1');
      assertEquals('\u00BC', char0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char char0 = AnselMapping.encode('\u01A0');
      assertEquals('\u00AC', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0153');
      assertEquals('\u00B6', char0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0152');
      assertEquals('\u00A6', char0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0142');
      assertEquals('\u00B1', char0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0141');
      assertEquals('\u00A1', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0131');
      assertEquals('\u00B8', char0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0111');
      assertEquals('\u00B3', char0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0110');
      assertEquals('\u00A3', char0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00FE');
      assertEquals('\u00B4', char0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00F8');
      assertEquals('\u00B2', char0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00F0');
      assertEquals('\u00BA', char0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00E6');
      assertEquals('\u00B5', char0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00DF');
      assertEquals('\u00CF', char0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00DE');
      assertEquals('\u00A4', char0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00D8');
      assertEquals('\u00A2', char0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00C6');
      assertEquals('\u00A5', char0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00BF');
      assertEquals('\u00C5', char0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00B7');
      assertEquals('\u00A8', char0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00B1');
      assertEquals('\u00AB', char0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00B0');
      assertEquals('\u00C0', char0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00AE');
      assertEquals('\u00AA', char0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00A9');
      assertEquals('\u00C3', char0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00A3');
      assertEquals('\u00B9', char0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char char0 = AnselMapping.encode('\u00A1');
      assertEquals('\u00C6', char0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char char0 = AnselMapping.encode('o');
      assertEquals('\u00CE', char0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char char0 = AnselMapping.encode('\u0313');
      assertEquals('\u00FE', char0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char char0 = AnselMapping.encode('e');
      assertEquals('\u00CD', char0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char char0 = AnselMapping.decode(2021);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char char0 = AnselMapping.decode(254);
      assertEquals('\u0313', char0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char char0 = AnselMapping.decode(253);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char char0 = AnselMapping.decode(252);
      assertEquals('\u0338', char0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char char0 = AnselMapping.decode(251);
      assertEquals('\uFE23', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char char0 = AnselMapping.decode(250);
      assertEquals('\uFE22', char0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char char0 = AnselMapping.decode(249);
      assertEquals('\u032E', char0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char char0 = AnselMapping.decode(248);
      assertEquals('\u031C', char0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char char0 = AnselMapping.decode(247);
      assertEquals('\u0326', char0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char char0 = AnselMapping.decode(246);
      assertEquals('\u0332', char0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char char0 = AnselMapping.decode(245);
      assertEquals('\u0333', char0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char char0 = AnselMapping.decode(244);
      assertEquals('\u0325', char0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char char0 = AnselMapping.decode(243);
      assertEquals('\u0324', char0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char char0 = AnselMapping.decode(242);
      assertEquals('\u0323', char0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char char0 = AnselMapping.decode(241);
      assertEquals('\u0328', char0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = AnselMapping.decode(240);
      assertEquals('\u0327', char0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char char0 = AnselMapping.decode(239);
      assertEquals('\u0310', char0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char char0 = AnselMapping.decode(238);
      assertEquals('\u030B', char0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char char0 = AnselMapping.decode(237);
      assertEquals('\u0315', char0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char char0 = AnselMapping.decode(236);
      assertEquals('\uFE21', char0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char char0 = AnselMapping.decode(235);
      assertEquals('\uFE20', char0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char char0 = AnselMapping.decode(234);
      assertEquals('\u030A', char0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char char0 = AnselMapping.decode(233);
      assertEquals('\u030C', char0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char char0 = AnselMapping.decode(232);
      assertEquals('\u0308', char0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char char0 = AnselMapping.decode(231);
      assertEquals('\u0307', char0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char char0 = AnselMapping.decode(230);
      assertEquals('\u0306', char0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char char0 = AnselMapping.decode(229);
      assertEquals('\u0304', char0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char char0 = AnselMapping.decode(228);
      assertEquals('\u0303', char0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char char0 = AnselMapping.decode(227);
      assertEquals('\u0302', char0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char char0 = AnselMapping.decode(226);
      assertEquals('\u0301', char0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char char0 = AnselMapping.decode(225);
      assertEquals('\u0300', char0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char char0 = AnselMapping.decode(224);
      assertEquals('\u0309', char0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char char0 = AnselMapping.decode(223);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char char0 = AnselMapping.decode(222);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char char0 = AnselMapping.decode(221);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char char0 = AnselMapping.decode(220);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char char0 = AnselMapping.decode(219);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char char0 = AnselMapping.decode(218);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char char0 = AnselMapping.decode(217);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char char0 = AnselMapping.decode(216);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char char0 = AnselMapping.decode(215);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char char0 = AnselMapping.decode(214);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char char0 = AnselMapping.decode(213);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char char0 = AnselMapping.decode(212);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char char0 = AnselMapping.decode(211);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char char0 = AnselMapping.decode(210);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char char0 = AnselMapping.decode(209);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char char0 = AnselMapping.decode(208);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char char0 = AnselMapping.decode(207);
      assertEquals('\u00DF', char0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char char0 = AnselMapping.decode(206);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char char0 = AnselMapping.decode(205);
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char char0 = AnselMapping.decode(204);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char char0 = AnselMapping.decode(203);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char char0 = AnselMapping.decode(202);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char char0 = AnselMapping.decode(201);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char char0 = AnselMapping.decode(200);
      assertEquals('\u20AC', char0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char char0 = AnselMapping.decode(199);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char char0 = AnselMapping.decode(198);
      assertEquals('\u00A1', char0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char char0 = AnselMapping.decode(197);
      assertEquals('\u00BF', char0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char char0 = AnselMapping.decode(196);
      assertEquals('\u266F', char0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char char0 = AnselMapping.decode(195);
      assertEquals('\u00A9', char0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char char0 = AnselMapping.decode(194);
      assertEquals('\u2117', char0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char char0 = AnselMapping.decode(193);
      assertEquals('\u2113', char0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char char0 = AnselMapping.decode(192);
      assertEquals('\u00B0', char0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char char0 = AnselMapping.decode(191);
      assertEquals('\u25A0', char0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char char0 = AnselMapping.decode(190);
      assertEquals('\u25A1', char0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char char0 = AnselMapping.decode(189);
      assertEquals('\u01B0', char0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char char0 = AnselMapping.decode(188);
      assertEquals('\u01A1', char0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char char0 = AnselMapping.decode(187);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char char0 = AnselMapping.decode(186);
      assertEquals('\u00F0', char0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char char0 = AnselMapping.decode(185);
      assertEquals('\u00A3', char0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char char0 = AnselMapping.decode(184);
      assertEquals('\u0131', char0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char char0 = AnselMapping.decode(183);
      assertEquals('\u02BA', char0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char char0 = AnselMapping.decode(182);
      assertEquals('\u0153', char0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char char0 = AnselMapping.decode(181);
      assertEquals('\u00E6', char0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char char0 = AnselMapping.decode(180);
      assertEquals('\u00FE', char0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char char0 = AnselMapping.decode(179);
      assertEquals('\u0111', char0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char char0 = AnselMapping.decode(178);
      assertEquals('\u00F8', char0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char char0 = AnselMapping.decode(177);
      assertEquals('\u0142', char0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char char0 = AnselMapping.decode(176);
      assertEquals('\u02BB', char0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char char0 = AnselMapping.decode(175);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char char0 = AnselMapping.decode(174);
      assertEquals('\u02BC', char0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char char0 = AnselMapping.decode(173);
      assertEquals('\u01AF', char0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char char0 = AnselMapping.decode(172);
      assertEquals('\u01A0', char0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char char0 = AnselMapping.decode(171);
      assertEquals('\u00B1', char0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char char0 = AnselMapping.decode(170);
      assertEquals('\u00AE', char0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char char0 = AnselMapping.decode(169);
      assertEquals('\u266D', char0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char char0 = AnselMapping.decode(168);
      assertEquals('\u00B7', char0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char char0 = AnselMapping.decode(167);
      assertEquals('\u02B9', char0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char char0 = AnselMapping.decode(166);
      assertEquals('\u0152', char0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char char0 = AnselMapping.decode(165);
      assertEquals('\u00C6', char0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char char0 = AnselMapping.decode(164);
      assertEquals('\u00DE', char0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char char0 = AnselMapping.decode(163);
      assertEquals('\u0110', char0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char char0 = AnselMapping.decode(161);
      assertEquals('\u0141', char0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char char0 = AnselMapping.decode(162);
      assertEquals('\u00D8', char0);
  }
}
