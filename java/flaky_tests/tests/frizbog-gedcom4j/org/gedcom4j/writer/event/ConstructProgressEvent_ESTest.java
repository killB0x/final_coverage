/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 23:23:54 GMT 2022
 */

package org.gedcom4j.writer.event;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.writer.event.ConstructProgressEvent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstructProgressEvent_ESTest extends ConstructProgressEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, (-1), true);
      boolean boolean0 = constructProgressEvent0.isComplete();
      assertEquals((-1), constructProgressEvent0.getLinesProcessed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, 981, false);
      int int0 = constructProgressEvent0.getLinesProcessed();
      assertFalse(constructProgressEvent0.isComplete());
      assertEquals(981, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, (-1), true);
      int int0 = constructProgressEvent0.getLinesProcessed();
      assertTrue(constructProgressEvent0.isComplete());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstructProgressEvent constructProgressEvent0 = null;
      try {
        constructProgressEvent0 = new ConstructProgressEvent((Object) null, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, 981, false);
      String string0 = constructProgressEvent0.toString();
      assertEquals("ConstructProgressEvent [complete=false, linesProcessed=981]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, 0, false);
      int int0 = constructProgressEvent0.getLinesProcessed();
      assertEquals(0, int0);
      assertFalse(constructProgressEvent0.isComplete());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      ConstructProgressEvent constructProgressEvent0 = new ConstructProgressEvent(object0, 981, false);
      boolean boolean0 = constructProgressEvent0.isComplete();
      assertEquals(981, constructProgressEvent0.getLinesProcessed());
      assertFalse(boolean0);
  }
}
