/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:57:53 GMT 2022
 */

package org.gedcom4j.relationship;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Individual;
import org.gedcom4j.relationship.GenerationCounter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenerationCounter_ESTest extends GenerationCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenerationCounter generationCounter0 = new GenerationCounter();
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0, true);
      individual1.getPhoneNumbers(true);
      // Undeclared exception!
      try { 
        generationCounter0.getGenerationCount(individual1, individual0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ancestor/descendant relationship not found for null and null
         //
         verifyException("org.gedcom4j.relationship.GenerationCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenerationCounter generationCounter0 = new GenerationCounter();
      Individual individual0 = new Individual();
      individual0.getFamiliesWhereChild(true);
      // Undeclared exception!
      try { 
        generationCounter0.getGenerationCount(individual0, (Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.relationship.GenerationCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenerationCounter generationCounter0 = new GenerationCounter();
      Individual individual0 = new Individual();
      int int0 = generationCounter0.getGenerationCount(individual0, individual0);
      assertEquals(0, int0);
  }
}
