/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:37:04 GMT 2022
 */

package org.gedcom4j.relationship;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Individual;
import org.gedcom4j.relationship.RelationshipName;
import org.gedcom4j.relationship.SimpleRelationship;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleRelationship_ESTest extends SimpleRelationship_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved(31);
      simpleRelationship0.hashCode();
      assertEquals(31, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved((-1425));
      SimpleRelationship simpleRelationship1 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship1.equals(simpleRelationship0);
      assertEquals((-1425), simpleRelationship0.getGenerationsRemoved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = RelationshipName.FIRST_COUSIN;
      simpleRelationship0.setName(relationshipName0);
      RelationshipName relationshipName1 = simpleRelationship0.getName();
      simpleRelationship0.setReverseName(relationshipName1);
      simpleRelationship0.getReverseName();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual2(individual0);
      simpleRelationship0.getIndividual2();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual1(individual0);
      simpleRelationship0.getIndividual1();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved(31);
      int int0 = simpleRelationship0.getGenerationsRemoved();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved((-1));
      int int0 = simpleRelationship0.getGenerationsRemoved();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      individual0.getNames(true);
      simpleRelationship0.setIndividual2(individual0);
      // Undeclared exception!
      try { 
        simpleRelationship0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = null;
      try {
        simpleRelationship0 = new SimpleRelationship((SimpleRelationship) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.relationship.SimpleRelationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual2(individual0);
      // Undeclared exception!
      try { 
        simpleRelationship0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.relationship.SimpleRelationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
      
      simpleRelationship0.setGenerationsRemoved(1);
      String string0 = simpleRelationship0.toString();
      assertEquals("null's null_ONCE_REMOVED null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved(31);
      simpleRelationship0.toString();
      assertEquals(31, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual1(individual0);
      // Undeclared exception!
      try { 
        simpleRelationship0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.relationship.SimpleRelationship", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = RelationshipName.GREAT_GREAT_GREAT_GRANDCHILD;
      simpleRelationship0.setReverseName(relationshipName0);
      simpleRelationship0.hashCode();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = RelationshipName.FIRST_COUSIN;
      simpleRelationship0.setName(relationshipName0);
      simpleRelationship0.hashCode();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual2(individual0);
      simpleRelationship0.hashCode();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual1(individual0);
      simpleRelationship0.hashCode();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = RelationshipName.GREAT_GREAT_GREAT_GRANDCHILD;
      simpleRelationship0.setReverseName(relationshipName0);
      SimpleRelationship simpleRelationship1 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertEquals(0, simpleRelationship1.getGenerationsRemoved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = RelationshipName.SIBLING;
      simpleRelationship0.setName(relationshipName0);
      SimpleRelationship simpleRelationship1 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertFalse(boolean0);
      assertEquals(0, simpleRelationship1.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      SimpleRelationship simpleRelationship1 = new SimpleRelationship(simpleRelationship0);
      simpleRelationship1.setGenerationsRemoved((-644));
      boolean boolean0 = simpleRelationship1.equals(simpleRelationship0);
      assertEquals((-644), simpleRelationship1.getGenerationsRemoved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      SimpleRelationship simpleRelationship1 = new SimpleRelationship(simpleRelationship0);
      assertTrue(simpleRelationship1.equals((Object)simpleRelationship0));
      
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual2(individual0);
      boolean boolean0 = simpleRelationship1.equals(simpleRelationship0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      SimpleRelationship simpleRelationship1 = new SimpleRelationship(simpleRelationship0);
      assertTrue(simpleRelationship1.equals((Object)simpleRelationship0));
      
      Individual individual0 = new Individual();
      simpleRelationship1.setIndividual2(individual0);
      boolean boolean0 = simpleRelationship1.equals(simpleRelationship0);
      assertFalse(simpleRelationship1.equals((Object)simpleRelationship0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual1(individual0);
      SimpleRelationship simpleRelationship1 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertEquals(0, simpleRelationship1.getGenerationsRemoved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      SimpleRelationship simpleRelationship1 = new SimpleRelationship();
      assertTrue(simpleRelationship1.equals((Object)simpleRelationship0));
      
      Individual individual0 = new Individual();
      simpleRelationship1.setIndividual1(individual0);
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Object object0 = new Object();
      boolean boolean0 = simpleRelationship0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship0);
      assertTrue(boolean0);
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      int int0 = simpleRelationship0.getGenerationsRemoved();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual1(individual0);
      SimpleRelationship simpleRelationship1 = new SimpleRelationship(simpleRelationship0);
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.getReverseName();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      RelationshipName relationshipName0 = simpleRelationship0.getName();
      simpleRelationship0.setReverseName(relationshipName0);
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.setGenerationsRemoved(2);
      simpleRelationship0.toString();
      assertEquals(2, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.getIndividual1();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      simpleRelationship0.getIndividual2();
      assertEquals(0, simpleRelationship0.getGenerationsRemoved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleRelationship simpleRelationship0 = new SimpleRelationship();
      Individual individual0 = new Individual();
      simpleRelationship0.setIndividual2(individual0);
      SimpleRelationship simpleRelationship1 = new SimpleRelationship(simpleRelationship0);
      boolean boolean0 = simpleRelationship0.equals(simpleRelationship1);
      assertTrue(boolean0);
      assertEquals(0, simpleRelationship1.getGenerationsRemoved());
  }
}
