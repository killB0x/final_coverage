/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:51:22 GMT 2022
 */

package org.gedcom4j.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.parser.HebrewCalendarParser;
import org.gedcom4j.parser.HebrewMonth;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HebrewCalendarParser_ESTest extends HebrewCalendarParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.IYAR;
      int int0 = hebrewCalendarParser0.getMonthLength(3438, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.AV;
      int int0 = hebrewCalendarParser0.getMonthLength((-1006), hebrewMonth0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.ADAR_A;
      int int0 = hebrewCalendarParser0.getMonthLength(154, hebrewMonth0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      // Undeclared exception!
      try { 
        hebrewCalendarParser0.getMonthLength(4464, (HebrewMonth) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.HebrewCalendarParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      // Undeclared exception!
      try { 
        hebrewCalendarParser0.convertHebrewDateToGregorian(0, "", 511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.HebrewCalendarParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.TAMUZ;
      hebrewCalendarParser0.getMonthLength(592, hebrewMonth0);
      int int0 = hebrewCalendarParser0.getMonthLength(187, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.KISLEV;
      int int0 = hebrewCalendarParser0.getMonthLength(30, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.TAMUZ;
      int int0 = hebrewCalendarParser0.getMonthLength(1705, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.SHEVAT;
      int int0 = hebrewCalendarParser0.getMonthLength(8, hebrewMonth0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.ADAR_A;
      int int0 = hebrewCalendarParser0.getMonthLength(57, hebrewMonth0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.ADAR;
      int int0 = hebrewCalendarParser0.getMonthLength(2067025, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.AV;
      int int0 = hebrewCalendarParser0.getMonthLength(1736, hebrewMonth0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      Date date0 = hebrewCalendarParser0.convertHebrewDateToGregorian(1, "SVN", 12);
      assertEquals("Mon Jun 02 00:00:00 GMT 3760", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.ELUL;
      int int0 = hebrewCalendarParser0.getMonthLength(803, hebrewMonth0);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      Date date0 = hebrewCalendarParser0.convertHebrewDateToGregorian(0, "ELL", 1);
      assertEquals("Wed Sep 28 00:00:00 GMT 3780", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HebrewCalendarParser hebrewCalendarParser0 = new HebrewCalendarParser();
      HebrewMonth hebrewMonth0 = HebrewMonth.KISLEV;
      int int0 = hebrewCalendarParser0.getMonthLength(6, hebrewMonth0);
      assertEquals(30, int0);
  }
}
