/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 23:05:12 GMT 2022
 */

package org.gedcom4j.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.parser.FrenchRepublicanMonth;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FrenchRepublicanMonth_ESTest extends FrenchRepublicanMonth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FrenchRepublicanMonth frenchRepublicanMonth0 = FrenchRepublicanMonth.getFromGedcomAbbrev("vend");
      assertEquals("VEND", frenchRepublicanMonth0.getGedcomAbbrev());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FrenchRepublicanMonth[] frenchRepublicanMonthArray0 = FrenchRepublicanMonth.values();
      assertEquals(13, frenchRepublicanMonthArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        FrenchRepublicanMonth.getFromGedcomAbbrev((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FrenchRepublicanMonth frenchRepublicanMonth0 = FrenchRepublicanMonth.valueOf("NIVOSE");
      String string0 = frenchRepublicanMonth0.getGedcomAbbrev();
      assertEquals("NIVO", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FrenchRepublicanMonth frenchRepublicanMonth0 = FrenchRepublicanMonth.getFromGedcomAbbrev("NIVO");
      assertEquals("NIVO", frenchRepublicanMonth0.getGedcomAbbrev());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FrenchRepublicanMonth.getFromGedcomAbbrev("&)%");
  }
}
