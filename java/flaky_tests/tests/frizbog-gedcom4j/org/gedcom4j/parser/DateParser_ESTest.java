/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:06:46 GMT 2022
 */

package org.gedcom4j.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.parser.DateParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateParser_ESTest extends DateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("BEF. 1 APR 0B.C.");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("1 APR 0B.C.");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parseHebrewSingleDate("e$O/I1Rspx", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("BWGw'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String string0 = dateParser0.resolveEnglishCalendarSwitch("@#DGREGORIAN@ ");
      assertEquals("@#DGREGORIAN@ ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String string0 = dateParser0.resolveEnglishCalendarSwitch("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String[] stringArray0 = dateParser0.splitTwoDateString("", "9C2J+fbeKe");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = dateParser0.removePrefixes((String) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String[] stringArray0 = dateParser0.splitTwoDateString("3jB.$~x~4", "FROM");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = dateParser0.removePrefixes("3jB.$~x~4", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("3jB.$~x~4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String[] stringArray0 = dateParser0.splitTwoDateString("BEFORE ", "BEFORE ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = dateParser0.removePrefixes("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String string0 = dateParser0.removeApproximations("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      Date date0 = dateParser0.parseHebrewSingleDate("INT. [WWTC^{%B.C.E.", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parseFrenchRepublicanSingleDate("TO. 9", dateParser_ImpreciseDatePreference0);
      assertEquals("Sun Mar 22 00:00:00 GMT 1801", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String string0 = dateParser0.formatBC("d7oP)?v2o");
      assertEquals("d7oP)?v2o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      String string0 = dateParser0.formatBC("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.splitTwoDateString((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.resolveEnglishCalendarSwitch((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.removePrefixes("Pbu0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.removeApproximations((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      // Undeclared exception!
      try { 
        dateParser0.parseHebrewSingleDate((String) null, dateParser_ImpreciseDatePreference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      // Undeclared exception!
      try { 
        dateParser0.parseFrenchRepublicanSingleDate((String) null, dateParser_ImpreciseDatePreference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      // Undeclared exception!
      try { 
        dateParser0.parse("077/00B.C.", dateParser_ImpreciseDatePreference0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"077/00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      // Undeclared exception!
      try { 
        dateParser0.parse((String) null, dateParser_ImpreciseDatePreference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.parse("0/00BC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0/00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      // Undeclared exception!
      try { 
        dateParser0.formatBC((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      Date date0 = dateParser0.parse("@#DJULIAN@ ", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parse("@#DGREGORIAN@ ", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      Date date0 = dateParser0.parse("@#DFRENCH R@ CALC ", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_EARLIEST;
      Date date0 = dateParser0.parse("@#DHEBREW@ ", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      Date date0 = dateParser0.parseHebrewSingleDate("0000", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Oct 08 00:00:00 GMT 3781", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parseHebrewSingleDate("0000", dateParser_ImpreciseDatePreference0);
      assertEquals("Sun Apr 17 00:00:00 GMT 3780", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_EARLIEST;
      Date date0 = dateParser0.parseHebrewSingleDate("0000", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Oct 08 00:00:00 GMT 3781", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.PRECISE;
      Date date0 = dateParser0.parseFrenchRepublicanSingleDate("0", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_LATEST;
      Date date0 = dateParser0.parseFrenchRepublicanSingleDate("0", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_EARLIEST;
      Date date0 = dateParser0.parseFrenchRepublicanSingleDate("CAL 0", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("000", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parse("APR 0", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 28 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_LATEST;
      Date date0 = dateParser0.parse("APR 0", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 28 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_EARLIEST;
      Date date0 = dateParser0.parse("CAL APR 0", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("APPROX. TO 0 TO 0");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_LATEST;
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      Date date0 = dateParser0.parse("TO 0 TO 0", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      assertNotNull(dateParser0);
      
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_EARLIEST;
      Date date0 = dateParser0.parse("TO 0 TO 0", dateParser_ImpreciseDatePreference0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("TO AF0 TO 0", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_MIDPOINT;
      Date date0 = dateParser0.parse("TO 0 TO 0", dateParser_ImpreciseDatePreference0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("0000/00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("AFT. ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_LATEST;
      Date date0 = dateParser0.parse("INT. :*(A!{@V'QZ", dateParser_ImpreciseDatePreference0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("CAL. INT. J0_A(V'VINT. J0_AE(V");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("INT `Y/S$#+5&B7");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      String string0 = dateParser0.removeApproximations("CAL. INT HAI(+=UVEXH/EKRQ{V");
      assertEquals("HAI", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      DateParser.ImpreciseDatePreference dateParser_ImpreciseDatePreference0 = DateParser.ImpreciseDatePreference.FAVOR_LATEST;
      Date date0 = dateParser0.parseHebrewSingleDate("0000", dateParser_ImpreciseDatePreference0);
      assertEquals("Wed Oct 26 00:00:00 GMT 3780", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      // Undeclared exception!
      try { 
        dateParser0.formatBC("B.C.E.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("0B.C.");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      // Undeclared exception!
      try { 
        dateParser0.formatBC("BCE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("APR 0BC");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
      Date date0 = dateParser0.parse("@#DGREGORIAN@ @#DGtEGORIAN@ ");
      assertNull(date0);
  }
}
