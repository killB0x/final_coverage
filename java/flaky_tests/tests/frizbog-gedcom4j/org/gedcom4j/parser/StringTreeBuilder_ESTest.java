/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:04:23 GMT 2022
 */

package org.gedcom4j.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.StringTree;
import org.gedcom4j.parser.GedcomParser;
import org.gedcom4j.parser.StringTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringTreeBuilder_ESTest extends StringTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      try { 
        stringTreeBuilder0.appendLine("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1 does not begin with a 1 or 2 digit number for the level followed by a space: 
         //
         verifyException("org.gedcom4j.parser.StringTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      StringTree stringTree0 = stringTreeBuilder0.getTree();
      stringTree0.setLineNum(3276);
      StringTree stringTree1 = stringTreeBuilder0.getTree();
      assertEquals((-1), stringTree1.getLevel());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      // Undeclared exception!
      try { 
        stringTreeBuilder0.appendLine((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.StringTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringTreeBuilder stringTreeBuilder0 = null;
      try {
        stringTreeBuilder0 = new StringTreeBuilder((GedcomParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.parser.StringTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      StringTree stringTree0 = stringTreeBuilder0.getTree();
      stringTree0.setLevel(6);
      StringTree stringTree1 = stringTreeBuilder0.getTree();
      assertEquals(0, stringTree1.getLineNum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      try { 
        stringTreeBuilder0.appendLine("CR$hSt:3UqqdI0-Zh(");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1 does not begin with a 1 or 2 digit number for the level followed by a space: CR$hSt:3UqqdI0-Zh(
         //
         verifyException("org.gedcom4j.parser.StringTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      try { 
        stringTreeBuilder0.appendLine("13+|RHs");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Line 1 does not begin with a 1 or 2 digit number for the level followed by a space: 13+|RHs
         //
         verifyException("org.gedcom4j.parser.StringTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      stringTreeBuilder0.appendLine("3 DUn;+v,TT^][]d@1?");
      gedcomParser0.setStrictLineBreaks(false);
      stringTreeBuilder0.appendLine("2d8h8beg4240(|)");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringTreeBuilder.leftTrim(" ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringTreeBuilder.leftTrim(" did not begin with a level and tag, so it was treated as a non-standard continuation of the previous line.");
      assertEquals("did not begin with a level and tag, so it was treated as a non-standard continuation of the previous line.", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringTreeBuilder.leftTrim("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringTreeBuilder.leftTrim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringTreeBuilder.leftTrim("3 DUn;+v,TT^][]d@1?");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GedcomParser gedcomParser0 = new GedcomParser();
      StringTreeBuilder stringTreeBuilder0 = new StringTreeBuilder(gedcomParser0);
      gedcomParser0.setStrictLineBreaks(false);
      stringTreeBuilder0.appendLine("2d8h8beg4240(|)");
  }
}
