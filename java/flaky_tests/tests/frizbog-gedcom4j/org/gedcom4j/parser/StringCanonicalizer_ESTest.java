/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:30:05 GMT 2022
 */

package org.gedcom4j.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.parser.StringCanonicalizer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringCanonicalizer_ESTest extends StringCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
      
      stringCanonicalizer0.numEvictions = 1;
      int int0 = stringCanonicalizer0.getNumEvictedCumulative();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.numEvictions = 1000;
      int int0 = stringCanonicalizer0.getNumEvictions();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.numEvictions = (-1058);
      int int0 = stringCanonicalizer0.getNumEvictions();
      assertEquals((-1058), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.getCanonicalVersion("a#m");
      String string0 = stringCanonicalizer0.getCanonicalVersion("a#m");
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
      assertEquals("a#m", string0);
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.getCanonicalVersion("");
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.getCanonicalVersion((String) null);
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringCanonicalizer.CanonicalizedString stringCanonicalizer_CanonicalizedString0 = new StringCanonicalizer.CanonicalizedString("value=");
      String string0 = stringCanonicalizer_CanonicalizedString0.toString();
      assertEquals("CanonicalizedString [count=0, value=value=]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringCanonicalizer.CanonicalizedString stringCanonicalizer_CanonicalizedString0 = new StringCanonicalizer.CanonicalizedString((String) null);
      String string0 = stringCanonicalizer_CanonicalizedString0.toString();
      assertEquals("CanonicalizedString [count=0, ]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      int int0 = stringCanonicalizer0.getNumEvictions();
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertEquals(0, int0);
      assertFalse(stringCanonicalizer0.isMaxedOut());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      boolean boolean0 = stringCanonicalizer0.isMaxedOut();
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
      assertFalse(boolean0);
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      int int0 = stringCanonicalizer0.getMaxPoolSize();
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertEquals(500, int0);
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      stringCanonicalizer0.reset();
      assertEquals(25, stringCanonicalizer0.getPoolUsageThreshold());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringCanonicalizer stringCanonicalizer0 = new StringCanonicalizer();
      int int0 = stringCanonicalizer0.getPoolUsageThreshold();
      assertEquals(0, stringCanonicalizer0.getNumEvictions());
      assertFalse(stringCanonicalizer0.isMaxedOut());
      assertEquals(25, int0);
      assertEquals(0, stringCanonicalizer0.getNumEvictedCumulative());
      assertEquals(500, stringCanonicalizer0.getMaxPoolSize());
  }
}
