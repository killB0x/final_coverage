/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:38:19 GMT 2022
 */

package org.gedcom4j.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.factory.FamilyFactory;
import org.gedcom4j.model.Family;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.Individual;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FamilyFactory_ESTest extends FamilyFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Gedcom gedcom0 = new Gedcom();
      Individual individual0 = new Individual();
      Individual[] individualArray0 = new Individual[3];
      Individual individual1 = new Individual(individual0);
      // Undeclared exception!
      try { 
        familyFactory0.create(gedcom0, individual1, individual0, individualArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Father could not be found by xref in supplied gedcom object: null
         //
         verifyException("org.gedcom4j.factory.FamilyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Individual individual0 = new Individual();
      Individual[] individualArray0 = new Individual[0];
      // Undeclared exception!
      try { 
        familyFactory0.create((Gedcom) null, individual0, individual0, individualArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.factory.FamilyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Individual individual0 = new Individual();
      Gedcom gedcom0 = new Gedcom();
      Individual[] individualArray0 = new Individual[3];
      individualArray0[0] = individual0;
      // Undeclared exception!
      try { 
        familyFactory0.create(gedcom0, (Individual) null, (Individual) null, individualArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Child could not be found by xref in supplied gedcom object: null
         //
         verifyException("org.gedcom4j.factory.FamilyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Gedcom gedcom0 = new Gedcom();
      Family family0 = familyFactory0.create(gedcom0, (Individual) null, (Individual) null, (Individual[]) null);
      assertEquals("@F0@", family0.getXref());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Individual individual0 = new Individual();
      Gedcom gedcom0 = new Gedcom();
      Individual[] individualArray0 = new Individual[1];
      // Undeclared exception!
      try { 
        familyFactory0.create(gedcom0, individualArray0[0], individual0, individualArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mother could not be found by xref in supplied gedcom object: null
         //
         verifyException("org.gedcom4j.factory.FamilyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FamilyFactory familyFactory0 = new FamilyFactory();
      Gedcom gedcom0 = new Gedcom();
      Individual[] individualArray0 = new Individual[3];
      Family family0 = familyFactory0.create(gedcom0, (Individual) null, (Individual) null, individualArray0);
      assertEquals("@F0@", family0.getXref());
  }
}
