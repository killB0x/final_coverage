/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:00:02 GMT 2022
 */

package org.gedcom4j.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.gedcom4j.factory.IndividualFactory;
import org.gedcom4j.factory.Sex;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.Individual;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndividualFactory_ESTest extends IndividualFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.MALE;
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate((-965), (-965), (-965));
      Individual individual0 = individualFactory0.create(gedcom0, ";J@IQ+>Fr/NX^O6h", ";\"\"|T:?~*QB~U", sex0, (Date) mockDate0, "", (Date) mockDate1, "Jk=L7,Leg");
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.FEMALE;
      MockDate mockDate0 = new MockDate(0, (-2551), (-2551));
      Individual individual0 = individualFactory0.create(gedcom0, "CE9(=au,>KR[oOB", "org.gedcom4j.factory.IndividualFactory", sex0, (Date) null, "", (Date) mockDate0, "");
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Sex sex0 = Sex.FEMALE;
      // Undeclared exception!
      try { 
        individualFactory0.create((Gedcom) null, (String) null, "org.gedcom4j.factory.IndividualFactory", sex0, (Date) null, "", (Date) null, "CE9(=au,>KR[oOB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.factory.IndividualFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Sex sex0 = Sex.MALE;
      // Undeclared exception!
      try { 
        individualFactory0.create((Gedcom) null, "@I4@", "@I4@", sex0, "@I4@", "@I4@", "@I4@", "@I4@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.factory.IndividualFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.FEMALE;
      Individual individual0 = individualFactory0.create(gedcom0, "", (String) null, sex0, "", "", (String) null, "");
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.UNKNOWN;
      Individual individual0 = individualFactory0.create(gedcom0, "yZ[+f%Sh", "_Pf8>wUv5=m", sex0, "Submitter [", (String) null, "rjmzUbG", "");
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.UNKNOWN;
      Individual individual0 = individualFactory0.create(gedcom0, "rjmzUbG", "_Pf8>wUv5=m", sex0, (String) null, " /", "+{cB6", (String) null);
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.UNKNOWN;
      Individual individual0 = individualFactory0.create(gedcom0, (String) null, (String) null, sex0, (String) null, (String) null, "rjmzUbG", (String) null);
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Sex sex0 = Sex.FEMALE;
      Individual individual0 = individualFactory0.create(gedcom0, (String) null, (String) null, sex0, (String) null, (String) null, (String) null, (String) null);
      assertEquals("@I0@", individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IndividualFactory individualFactory0 = new IndividualFactory();
      Gedcom gedcom0 = new Gedcom();
      Individual individual0 = individualFactory0.create(gedcom0, "o2&e8H|}", "Hx8@MosM", (Sex) null, "o2&e8H|}", "o2&e8H|}", "Hx8@MosM", "o2&e8H|}");
      assertEquals("@I0@", individual0.getXref());
  }
}
