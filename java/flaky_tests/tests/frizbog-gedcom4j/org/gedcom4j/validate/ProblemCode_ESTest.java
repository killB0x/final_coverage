/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 23:12:57 GMT 2022
 */

package org.gedcom4j.validate;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.validate.ProblemCode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProblemCode_ESTest extends ProblemCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProblemCode[] problemCodeArray0 = ProblemCode.values();
      assertEquals(34, problemCodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.valueOf("CROSS_REFERENCE_NOT_FOUND");
      assertEquals(0, problemCode0.getCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.valueOf("FATHER_MAY_HAVE_BEEN_DECEASED");
      assertEquals(ProblemCode.FATHER_MAY_HAVE_BEEN_DECEASED, problemCode0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.getForCode(0);
      assertEquals(ProblemCode.CROSS_REFERENCE_NOT_FOUND, problemCode0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.CROSS_REFERENCE_NOT_FOUND;
      int int0 = problemCode0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.getForCode(1);
      assertEquals(ProblemCode.DUPLICATE_VALUE, problemCode0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProblemCode.getForCode((-1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.INVALID_DATE;
      String string0 = problemCode0.toString();
      assertEquals("13: Invalid date", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.INVALID_DATE;
      int int0 = problemCode0.getCode();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ProblemCode problemCode0 = ProblemCode.INVALID_DATE;
      String string0 = problemCode0.getDescription();
      assertEquals("Invalid date", string0);
  }
}
