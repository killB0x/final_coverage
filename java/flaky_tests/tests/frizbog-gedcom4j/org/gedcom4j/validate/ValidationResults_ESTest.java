/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:32:57 GMT 2022
 */

package org.gedcom4j.validate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.ModelElement;
import org.gedcom4j.model.Multimedia;
import org.gedcom4j.model.MultimediaReference;
import org.gedcom4j.validate.ProblemCode;
import org.gedcom4j.validate.Severity;
import org.gedcom4j.validate.ValidationResults;
import org.gedcom4j.validate.Validator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationResults_ESTest extends ValidationResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      ProblemCode problemCode0 = ProblemCode.DATE_IN_FUTURE;
      validator_Finding0.setProblem(problemCode0);
      ProblemCode problemCode1 = ProblemCode.MOTHER_MAY_HAVE_BEEN_DECEASED;
      List<Validator.Finding> list0 = validationResults0.getByCode(problemCode1);
      assertFalse(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      ProblemCode problemCode0 = ProblemCode.CROSS_REFERENCE_NOT_FOUND;
      List<Validator.Finding> list0 = validationResults0.getByCode(problemCode0);
      assertTrue(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      List<Validator.Finding> list0 = validationResults0.getAllFindings();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      MultimediaReference multimediaReference0 = new MultimediaReference();
      Multimedia multimedia0 = new Multimedia();
      multimedia0.setContinuedObject(multimediaReference0);
      multimediaReference0.setMultimedia(multimedia0);
      // Undeclared exception!
      try { 
        validationResults0.getFindingsForObject(multimediaReference0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      // Undeclared exception!
      try { 
        validationResults0.add((Validator.Finding) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.validate.ValidationResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      List<Validator.Finding> list0 = validationResults0.getByCode(15);
      assertFalse(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      String string0 = validationResults0.toString();
      assertEquals("ValidationResults [allFindings=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      MultimediaReference multimediaReference0 = new MultimediaReference();
      List<Validator.Finding> list0 = validationResults0.getFindingsForObject(multimediaReference0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      List<Validator.Finding> list0 = validationResults0.getFindingsForObject((ModelElement) null);
      assertTrue(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      Severity severity0 = Severity.WARNING;
      validator_Finding0.setSeverity(severity0);
      validationResults0.add(validator_Finding0);
      List<Validator.Finding> list0 = validationResults0.getBySeverity(severity0);
      assertTrue(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      Severity severity0 = Severity.INFO;
      List<Validator.Finding> list0 = validationResults0.getBySeverity(severity0);
      assertFalse(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      // Undeclared exception!
      try { 
        validationResults0.getBySeverity((Severity) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Severity is a required argument
         //
         verifyException("org.gedcom4j.validate.ValidationResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      // Undeclared exception!
      try { 
        validationResults0.getByCode((ProblemCode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // problemCode is a required argument
         //
         verifyException("org.gedcom4j.validate.ValidationResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      List<Validator.Finding> list0 = validationResults0.getByCode(0);
      assertTrue(list0.contains(validator_Finding0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      Validator.Finding validator_Finding0 = new Validator.Finding();
      validationResults0.add(validator_Finding0);
      validationResults0.add(validator_Finding0);
      assertNull(validator_Finding0.getFieldNameOfConcern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      List<Validator.Finding> list0 = validationResults0.getAllFindings();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValidationResults validationResults0 = new ValidationResults();
      validationResults0.clear();
  }
}
