/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:56:53 GMT 2022
 */

package org.gedcom4j.validate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Association;
import org.gedcom4j.model.FamilyEvent;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.ModelElement;
import org.gedcom4j.model.PersonalName;
import org.gedcom4j.model.StringTree;
import org.gedcom4j.validate.AutoRepair;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AutoRepair_ESTest extends AutoRepair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair(familyEvent0, (ModelElement) null);
      ModelElement modelElement0 = autoRepair0.getBefore();
      assertSame(modelElement0, familyEvent0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, familyEvent0);
      FamilyEvent familyEvent1 = (FamilyEvent)autoRepair0.getAfter();
      assertNull(familyEvent1.getYNull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, familyEvent0);
      String string0 = autoRepair0.toString();
      assertEquals("AutoRepair [after=FamilyEvent []]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair(familyEvent0, (ModelElement) null);
      String string0 = autoRepair0.toString();
      assertEquals("AutoRepair [before=FamilyEvent [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      autoRepair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Association association0 = new Association();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, association0);
      autoRepair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Individual individual0 = new Individual();
      AutoRepair autoRepair0 = new AutoRepair(individual0, individual0);
      AutoRepair autoRepair1 = new AutoRepair(individual0, individual0);
      boolean boolean0 = autoRepair0.equals(autoRepair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      AutoRepair autoRepair1 = new AutoRepair((ModelElement) null, (ModelElement) null);
      boolean boolean0 = autoRepair0.equals(autoRepair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      AutoRepair autoRepair0 = new AutoRepair(stringTree0, stringTree0);
      AutoRepair autoRepair1 = new AutoRepair((ModelElement) null, (ModelElement) null);
      boolean boolean0 = autoRepair0.equals(autoRepair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      AutoRepair autoRepair1 = new AutoRepair(familyEvent0, (ModelElement) null);
      boolean boolean0 = autoRepair1.equals(autoRepair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Association association0 = new Association();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, association0);
      AutoRepair autoRepair1 = new AutoRepair(association0, association0);
      boolean boolean0 = autoRepair0.equals(autoRepair1);
      assertFalse(autoRepair1.equals((Object)autoRepair0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      boolean boolean0 = autoRepair0.equals(familyEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, personalName0);
      boolean boolean0 = autoRepair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      AutoRepair autoRepair1 = new AutoRepair(familyEvent0, familyEvent0);
      boolean boolean0 = autoRepair0.equals(autoRepair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Association association0 = new Association();
      Gedcom gedcom0 = new Gedcom();
      AutoRepair autoRepair0 = null;
      try {
        autoRepair0 = new AutoRepair(association0, gedcom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The before object (org.gedcom4j.model.Association) is not the same type as the after object (org.gedcom4j.model.Gedcom).
         //
         verifyException("org.gedcom4j.validate.AutoRepair", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Individual individual0 = new Individual();
      AutoRepair autoRepair0 = new AutoRepair(individual0, individual0);
      boolean boolean0 = autoRepair0.equals(autoRepair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FamilyEvent familyEvent0 = new FamilyEvent();
      AutoRepair autoRepair0 = new AutoRepair(familyEvent0, (ModelElement) null);
      autoRepair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      ModelElement modelElement0 = autoRepair0.getAfter();
      assertNull(modelElement0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AutoRepair autoRepair0 = new AutoRepair((ModelElement) null, (ModelElement) null);
      ModelElement modelElement0 = autoRepair0.getBefore();
      assertNull(modelElement0);
  }
}
