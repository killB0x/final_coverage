/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:31:02 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.IndividualReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndividualReference_ESTest extends IndividualReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference((Individual) null);
      List<CustomFact> list0 = individualReference0.getCustomFactsWithTag("");
      individualReference0.customFacts = list0;
      individualReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      IndividualReference individualReference1 = new IndividualReference(individualReference0, true);
      assertTrue(individualReference1.equals((Object)individualReference0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.individual = individual0;
      Individual individual1 = individualReference0.getIndividual();
      assertNull(individual1.getXref());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference((Individual) null);
      List<CustomFact> list0 = individualReference0.getCustomFactsWithTag("");
      individualReference0.customFacts = list0;
      String string0 = individualReference0.toString();
      assertEquals("IndividualReference [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.individual = individual0;
      String string0 = individualReference0.toString();
      assertEquals("IndividualReference [individual=Unknown name, ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.individual = individual0;
      individualReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.individual = individual0;
      IndividualReference individualReference1 = new IndividualReference();
      boolean boolean0 = individualReference0.equals(individualReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      IndividualReference individualReference1 = new IndividualReference();
      boolean boolean0 = individualReference0.equals(individualReference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.individual = individual0;
      IndividualReference individualReference1 = new IndividualReference(individual0);
      boolean boolean0 = individualReference0.equals(individualReference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      boolean boolean0 = individualReference0.equals(individualReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      IndividualReference individualReference1 = new IndividualReference(individual0);
      boolean boolean0 = individualReference0.equals(individualReference1);
      assertFalse(boolean0);
      assertFalse(individualReference1.equals((Object)individualReference0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      IndividualReference individualReference1 = null;
      try {
        individualReference1 = new IndividualReference(individualReference0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = individualReference0.getIndividual();
      assertNull(individual0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      boolean boolean0 = individualReference0.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndividualReference individualReference0 = new IndividualReference();
      Individual individual0 = new Individual();
      individualReference0.setIndividual(individual0);
      assertNull(individual0.getXref());
  }
}
