/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:27:48 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.MultimediaReference;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.Submitter;
import org.gedcom4j.model.UserReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Submitter_ESTest extends Submitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Submitter submitter0 = new Submitter("|m9Hf", "dtu%[#p9o<MvNYG$,hG");
      String string0 = submitter0.getXref();
      assertEquals("|m9Hf", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setXref("");
      String string0 = submitter0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<UserReference> list0 = submitter0.getUserReferences(true);
      List<UserReference> list1 = submitter0.getUserReferences();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber("Submitter [name=23|WB, userReferences=[], customFacts=[], ]");
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getRegFileNumber();
      assertEquals("Submitter [name=23|WB, userReferences=[], customFacts=[], ]", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRecIdNumber("P:");
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getRecIdNumber();
      assertEquals("P:", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Submitter submitter0 = new Submitter(" lP5u/y^X0+) hQOG", " lP5u/y^X0+) hQOG");
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getName();
      assertEquals(" lP5u/y^X0+) hQOG", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<MultimediaReference> list0 = submitter0.getMultimedia(true);
      List<MultimediaReference> list1 = submitter0.getMultimedia();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.getLanguagePref(true);
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Submitter submitter0 = new Submitter((String) null, "");
      ChangeDate changeDate0 = new ChangeDate();
      submitter0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = submitter0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Submitter submitter0 = null;
      try {
        submitter0 = new Submitter((Submitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Submitter submitter0 = new Submitter("pg&`43'HZ5 tG[}Fga.", (String) null);
      List<UserReference> list0 = submitter0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<MultimediaReference> list0 = submitter0.getMultimedia(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Submitter submitter0 = new Submitter(" lP5u/y^X0+) hQOG", " lP5u/y^X0+) hQOG");
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.getCustomFacts(true);
      String string0 = submitter0.toString();
      assertEquals("Submitter [customFacts=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Submitter submitter0 = new Submitter("h5v^]K", "]aBKT%Fo;K6*:BS(T");
      List<UserReference> list0 = submitter0.getUserReferences(true);
      assertNotNull(list0);
      
      String string0 = submitter0.toString();
      assertEquals("Submitter [name=]aBKT%Fo;K6*:BS(T, userReferences=[], xref=h5v^]K, ]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber("");
      String string0 = submitter0.toString();
      assertEquals("Submitter [regFileNumber=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRecIdNumber("~W_@Ek.tID=R'/UK-");
      String string0 = submitter0.toString();
      assertEquals("Submitter [recIdNumber=~W_@Ek.tID=R'/UK-, ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<MultimediaReference> list0 = submitter0.getMultimedia(true);
      assertNotNull(list0);
      
      String string0 = submitter0.toString();
      assertEquals("Submitter [multimedia=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Submitter submitter0 = new Submitter("h5v^]K", "]aBKT%Fo;K6*:BS(T");
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref(true);
      assertNotNull(list0);
      
      String string0 = submitter0.toString();
      assertEquals("Submitter [languagePref=[], name=]aBKT%Fo;K6*:BS(T, xref=h5v^]K, ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      ChangeDate changeDate0 = new ChangeDate();
      submitter0.setChangeDate(changeDate0);
      String string0 = submitter0.toString();
      assertEquals("Submitter [changeDate=ChangeDate [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber((String) null);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRecIdNumber((String) null);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setName((String) null);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber(", ");
      submitter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Submitter submitter0 = new Submitter("pW6I:*9*zsd&Kp?Tk", "pW6I:*9*zsd&Kp?Tk");
      submitter0.setRecIdNumber("pW6I:*9*zsd&Kp?Tk");
      submitter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setName("");
      submitter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Submitter submitter0 = new Submitter();
      submitter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      ChangeDate changeDate0 = new ChangeDate();
      submitter0.setChangeDate(changeDate0);
      submitter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<UserReference> list0 = submitter0.getUserReferences(true);
      List<UserReference> list1 = submitter0.getUserReferences(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<MultimediaReference> list0 = submitter0.getMultimedia(true);
      List<MultimediaReference> list1 = submitter0.getMultimedia(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref(true);
      List<StringWithCustomFacts> list1 = submitter0.getLanguagePref(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setXref("tag=");
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setXref("multimedia=");
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<UserReference> list0 = submitter0.getUserReferences(true);
      assertNotNull(list0);
      
      Submitter submitter1 = new Submitter();
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter0.getUserReferences(true);
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter0.setRegFileNumber("");
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setRegFileNumber("");
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter();
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setRecIdNumber("");
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setRecIdNumber("noteStructures=");
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.setName("multimedia=");
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter0.setName(".YTx%mG");
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<MultimediaReference> list0 = submitter0.getMultimedia(true);
      assertNotNull(list0);
      
      Submitter submitter1 = new Submitter("@\\bu:Z;C7GN*Z", "PhK[b3Oi%G~AXC`N-");
      boolean boolean0 = submitter0.equals(submitter1);
      assertEquals("@\\bu:Z;C7GN*Z", submitter1.getXref());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.getMultimedia(true);
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(submitter1.equals((Object)submitter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      submitter1.getLanguagePref(true);
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(submitter1.equals((Object)submitter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref(true);
      assertNotNull(list0);
      
      Submitter submitter1 = new Submitter();
      boolean boolean0 = submitter1.equals(submitter0);
      assertFalse(boolean0);
      assertFalse(submitter0.equals((Object)submitter1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      ChangeDate changeDate0 = new ChangeDate();
      submitter0.setChangeDate(changeDate0);
      Submitter submitter1 = new Submitter();
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      ChangeDate changeDate0 = new ChangeDate();
      submitter1.setChangeDate(changeDate0);
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Submitter submitter0 = new Submitter("h5v^]K", "]aBKT%Fo;K6*:BS(T");
      Submitter submitter1 = new Submitter(submitter0);
      assertTrue(submitter1.equals((Object)submitter0));
      
      List<StringWithCustomFacts> list0 = submitter1.getLanguagePref(true);
      submitter1.emails = list0;
      boolean boolean0 = submitter0.equals(submitter1);
      assertFalse(submitter1.equals((Object)submitter0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      boolean boolean0 = submitter0.equals(submitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber("Submitter [");
      Submitter submitter1 = new Submitter(submitter0);
      boolean boolean0 = submitter0.equals(submitter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRecIdNumber("");
      Submitter submitter1 = new Submitter(submitter0);
      boolean boolean0 = submitter1.equals(submitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Submitter submitter0 = new Submitter();
      Submitter submitter1 = new Submitter(submitter0);
      boolean boolean0 = submitter1.equals(submitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getRegFileNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      submitter0.setName(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      ChangeDate changeDate0 = new ChangeDate();
      submitter0.setChangeDate(changeDate0);
      Submitter submitter1 = new Submitter(submitter0);
      boolean boolean0 = submitter1.equals(submitter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRegFileNumber((StringWithCustomFacts) null);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      submitter0.setRecIdNumber((StringWithCustomFacts) null);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      StringWithCustomFacts stringWithCustomFacts0 = submitter0.getName();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      String string0 = submitter0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      ChangeDate changeDate0 = submitter0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Submitter submitter0 = new Submitter("h5v^]K", "]aBKT%Fo;K6*:BS(T");
      List<MultimediaReference> list0 = submitter0.getMultimedia();
      assertEquals("h5v^]K", submitter0.getXref());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Submitter submitter0 = new Submitter("h5v^]K", "]aBKT%Fo;K6*:BS(T");
      List<UserReference> list0 = submitter0.getUserReferences();
      assertNull(list0);
      assertEquals("h5v^]K", submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      List<StringWithCustomFacts> list0 = submitter0.getLanguagePref();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Submitter submitter0 = new Submitter("zsCW@", "zsCW@");
      Submitter submitter1 = new Submitter(submitter0);
      boolean boolean0 = submitter1.equals(submitter0);
      assertTrue(boolean0);
  }
}
