/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:36:42 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringWithCustomFacts_ESTest extends StringWithCustomFacts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      stringWithCustomFacts0.setValue("I-wB-r)");
      stringWithCustomFacts0.hashCode();
      assertEquals("I-wB-r)", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      stringWithCustomFacts0.getCustomFacts(true);
      stringWithCustomFacts0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("org.gedcom4j.model.StringWithCustomFacts");
      String string0 = stringWithCustomFacts0.trim();
      assertEquals("org.gedcom4j.model.StringWithCustomFacts", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts((String) null);
      String string0 = stringWithCustomFacts0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      stringWithCustomFacts0.setValue("I-wB-r)");
      String string0 = stringWithCustomFacts0.toString();
      assertEquals("I-wB-r)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      String string0 = stringWithCustomFacts0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      stringWithCustomFacts0.setValue("I-wB-r)");
      String string0 = stringWithCustomFacts0.getValue();
      assertEquals("I-wB-r)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = null;
      try {
        stringWithCustomFacts0 = new StringWithCustomFacts((StringWithCustomFacts) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      String string0 = stringWithCustomFacts0.trim();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      String string0 = stringWithCustomFacts0.trim();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      stringWithCustomFacts0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      StringWithCustomFacts stringWithCustomFacts1 = new StringWithCustomFacts(stringWithCustomFacts0);
      boolean boolean0 = stringWithCustomFacts1.equals(stringWithCustomFacts0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("noteStrucutures=");
      StringWithCustomFacts stringWithCustomFacts1 = new StringWithCustomFacts();
      boolean boolean0 = stringWithCustomFacts1.equals(stringWithCustomFacts0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      Object object0 = new Object();
      boolean boolean0 = stringWithCustomFacts0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("x?FF/pdb");
      boolean boolean0 = stringWithCustomFacts0.equals(stringWithCustomFacts0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("5!Q@!hNdme[@");
      StringWithCustomFacts stringWithCustomFacts1 = new StringWithCustomFacts();
      boolean boolean0 = stringWithCustomFacts0.equals(stringWithCustomFacts1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      String string0 = stringWithCustomFacts0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      StringWithCustomFacts stringWithCustomFacts1 = new StringWithCustomFacts(stringWithCustomFacts0);
      boolean boolean0 = stringWithCustomFacts0.equals(stringWithCustomFacts1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      String string0 = stringWithCustomFacts0.getValue();
      assertEquals("", string0);
  }
}
