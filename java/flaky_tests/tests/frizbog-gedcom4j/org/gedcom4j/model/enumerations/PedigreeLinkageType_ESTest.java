/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 23:11:25 GMT 2022
 */

package org.gedcom4j.model.enumerations;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.enumerations.PedigreeLinkageType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PedigreeLinkageType_ESTest extends PedigreeLinkageType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.getForCode("foster");
      assertEquals(PedigreeLinkageType.FOSTER, pedigreeLinkageType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PedigreeLinkageType[] pedigreeLinkageTypeArray0 = PedigreeLinkageType.values();
      assertEquals(4, pedigreeLinkageTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.valueOf("FOSTER");
      assertEquals("indicates child was included in a foster or guardian family", pedigreeLinkageType0.getDescription());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.getForCode("birth");
      assertEquals(PedigreeLinkageType.BIRTH, pedigreeLinkageType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PedigreeLinkageType.getForCode("f+pW,mf:\bjk}DCg");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.BIRTH;
      String string0 = pedigreeLinkageType0.toString();
      assertEquals("birth", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.SEALING;
      String string0 = pedigreeLinkageType0.getCode();
      assertEquals("sealing", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PedigreeLinkageType pedigreeLinkageType0 = PedigreeLinkageType.BIRTH;
      String string0 = pedigreeLinkageType0.getDescription();
      assertEquals("indicates birth parents", string0);
  }
}
