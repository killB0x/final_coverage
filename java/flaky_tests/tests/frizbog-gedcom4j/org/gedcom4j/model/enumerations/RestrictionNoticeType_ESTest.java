/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 23:07:41 GMT 2022
 */

package org.gedcom4j.model.enumerations;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.enumerations.RestrictionNoticeType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RestrictionNoticeType_ESTest extends RestrictionNoticeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.getForCode("locked");
      assertEquals(RestrictionNoticeType.LOCKED, restrictionNoticeType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RestrictionNoticeType[] restrictionNoticeTypeArray0 = RestrictionNoticeType.values();
      assertEquals(3, restrictionNoticeTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.valueOf("CONFIDENTIAL");
      assertEquals("confidential", restrictionNoticeType0.getCode());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.getForCode("privacy");
      assertEquals(RestrictionNoticeType.PRIVACY, restrictionNoticeType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RestrictionNoticeType.getForCode("");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.PRIVACY;
      String string0 = restrictionNoticeType0.getCode();
      assertEquals("privacy", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.CONFIDENTIAL;
      String string0 = restrictionNoticeType0.toString();
      assertEquals("confidential", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RestrictionNoticeType restrictionNoticeType0 = RestrictionNoticeType.LOCKED;
      String string0 = restrictionNoticeType0.getDescription();
      assertEquals("Marked as unchangable by Ancestral File custodian", string0);
  }
}
