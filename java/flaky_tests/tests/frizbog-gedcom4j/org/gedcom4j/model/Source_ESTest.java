/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:12:38 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.MultiStringWithCustomFacts;
import org.gedcom4j.model.MultimediaReference;
import org.gedcom4j.model.RepositoryCitation;
import org.gedcom4j.model.Source;
import org.gedcom4j.model.SourceData;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.UserReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Source_ESTest extends Source_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      String string0 = source0.getXref();
      assertEquals("xWjo'e@}p[-d'W}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Source source0 = new Source("");
      String string0 = source0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      source0.getUserReferences(true);
      List<UserReference> list0 = source0.getUserReferences();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Source source0 = new Source("");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setTitle(multiStringWithCustomFacts0);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = source0.getTitle();
      assertSame(multiStringWithCustomFacts1, multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Source source0 = new Source("gAx#yYq");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = source0.getSourceText();
      assertSame(multiStringWithCustomFacts1, multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      source0.setRepositoryCitation(repositoryCitation0);
      RepositoryCitation repositoryCitation1 = source0.getRepositoryCitation();
      assertSame(repositoryCitation1, repositoryCitation0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Source source0 = new Source("");
      source0.setRecIdNumber("NoteStructure [");
      StringWithCustomFacts stringWithCustomFacts0 = source0.getRecIdNumber();
      assertEquals("NoteStructure [", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setPublicationFacts(multiStringWithCustomFacts0);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = source0.getPublicationFacts();
      assertSame(multiStringWithCustomFacts1, multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setOriginatorsAuthors(multiStringWithCustomFacts0);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = source0.getOriginatorsAuthors();
      assertSame(multiStringWithCustomFacts1, multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      source0.getMultimedia(true);
      List<MultimediaReference> list0 = source0.getMultimedia();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Source source0 = new Source("NUj>5^]P");
      SourceData sourceData0 = new SourceData();
      source0.setData(sourceData0);
      SourceData sourceData1 = source0.getData();
      assertSame(sourceData1, sourceData0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Source source0 = null;
      try {
        source0 = new Source((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.setRepositoryCitation(repositoryCitation0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Source source0 = new Source();
      source0.getCustomFacts(true);
      String string0 = source0.toString();
      assertEquals("Source [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences(true);
      assertNotNull(list0);
      
      String string0 = source0.toString();
      assertEquals("Source [userReferences=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Source source0 = new Source("org.gedcom4j.model.MultimediaReference");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setTitle(multiStringWithCustomFacts0);
      String string0 = source0.toString();
      assertEquals("Source [title=MultiStringWithCustomFacts [], xref=org.gedcom4j.model.MultimediaReference, ]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Source source0 = new Source("org.gedcom4j.model.MultimediaReference");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      String string0 = source0.toString();
      assertEquals("Source [sourceText=MultiStringWithCustomFacts [], xref=org.gedcom4j.model.MultimediaReference, ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Source source0 = new Source("");
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("~E~,9");
      source0.setSourceFiledBy(stringWithCustomFacts0);
      String string0 = source0.toString();
      assertEquals("Source [sourceFiledBy=~E~,9, xref=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      source0.setRepositoryCitation(repositoryCitation0);
      String string0 = source0.toString();
      assertEquals("Source [repositoryCitation=RepositoryCitation [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Source source0 = new Source("org.gedcom4j.model.MultimediaReference");
      source0.setRecIdNumber("");
      String string0 = source0.toString();
      assertEquals("Source [recIdNumber=, xref=org.gedcom4j.model.MultimediaReference, ]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Source source0 = new Source("");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setPublicationFacts(multiStringWithCustomFacts0);
      String string0 = source0.toString();
      assertEquals("Source [publicationFacts=MultiStringWithCustomFacts [], xref=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setOriginatorsAuthors(multiStringWithCustomFacts0);
      String string0 = source0.toString();
      assertEquals("Source [originatorsAuthors=MultiStringWithCustomFacts [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Source source0 = new Source("");
      source0.getNoteStructures(true);
      String string0 = source0.toString();
      assertEquals("Source [noteStructures=[], xref=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia(true);
      assertNotNull(list0);
      
      String string0 = source0.toString();
      assertEquals("Source [multimedia=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Source source0 = new Source();
      SourceData sourceData0 = new SourceData();
      source0.setData(sourceData0);
      String string0 = source0.toString();
      assertEquals("Source [data=SourceData [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Source source0 = new Source();
      ChangeDate changeDate0 = new ChangeDate();
      source0.setChangeDate(changeDate0);
      String string0 = source0.toString();
      assertEquals("Source [changeDate=ChangeDate [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Source source0 = new Source();
      source0.setSourceFiledBy((String) null);
      assertNull(source0.getXref());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Source source0 = new Source();
      source0.setRecIdNumber((String) null);
      assertNull(source0.getXref());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Source source0 = new Source();
      source0.getUserReferences(true);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Source source0 = new Source(",qm2MMt!^u[+oN:C/");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setTitle(multiStringWithCustomFacts0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Source source0 = new Source("");
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("~E~,9");
      source0.setSourceFiledBy(stringWithCustomFacts0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      source0.setRepositoryCitation(repositoryCitation0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Source source0 = new Source("org.gedcom4j.model.MultimediaReference");
      source0.setRecIdNumber("");
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Source source0 = new Source("");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setPublicationFacts(multiStringWithCustomFacts0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setOriginatorsAuthors(multiStringWithCustomFacts0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Source source0 = new Source();
      source0.getMultimedia(true);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Source source0 = new Source();
      SourceData sourceData0 = new SourceData();
      source0.setData(sourceData0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Source source0 = new Source();
      ChangeDate changeDate0 = new ChangeDate();
      source0.setChangeDate(changeDate0);
      source0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences(true);
      List<UserReference> list1 = source0.getUserReferences(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia(true);
      List<MultimediaReference> list1 = source0.getMultimedia(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source("org.gedcom4j.model.MultimediaReference");
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.setXref("Fh7`Jt6KeBnkG9p/D5");
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences(true);
      assertNotNull(list0);
      
      Source source1 = new Source();
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.getUserReferences(true);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setTitle(multiStringWithCustomFacts0);
      Source source1 = new Source();
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source1.setTitle(multiStringWithCustomFacts0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      Source source1 = new Source();
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      Source source1 = new Source("FileReference [");
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals((Object)source0));
      
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      source0.setSourceFiledBy(stringWithCustomFacts0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals((Object)source0));
      
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      source0.setSourceFiledBy(stringWithCustomFacts0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.setRepositoryCitation(repositoryCitation0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Source source0 = new Source();
      source0.setRecIdNumber("");
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Source source0 = new Source();
      source0.setRecIdNumber("Source [userReferences=[], ]");
      Source source1 = new Source();
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      source1.setRecIdNumber(stringWithCustomFacts0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source1.setPublicationFacts(multiStringWithCustomFacts0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals((Object)source0));
      
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source1.setPublicationFacts(multiStringWithCustomFacts0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setOriginatorsAuthors(multiStringWithCustomFacts0);
      Source source1 = new Source();
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.setOriginatorsAuthors(multiStringWithCustomFacts0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia(true);
      assertNotNull(list0);
      
      Source source1 = new Source();
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source("6Y?5/Q?dLjw?]I");
      List<MultimediaReference> list0 = source1.getMultimedia(true);
      assertNotNull(list0);
      
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
      assertFalse(source1.equals((Object)source0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      SourceData sourceData0 = new SourceData();
      source1.setData(sourceData0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(source1.equals((Object)source0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Source source0 = new Source();
      SourceData sourceData0 = new SourceData();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      source1.setData(sourceData0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Source source0 = new Source("1=?X7|=8%8V7");
      SourceData sourceData0 = new SourceData();
      source0.setData(sourceData0);
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      ChangeDate changeDate0 = new ChangeDate();
      source1.setChangeDate(changeDate0);
      boolean boolean0 = source1.equals(source0);
      assertFalse(source1.equals((Object)source0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      boolean boolean0 = source0.equals(repositoryCitation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Source source0 = new Source();
      boolean boolean0 = source0.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Source source0 = new Source((String) null);
      ChangeDate changeDate0 = new ChangeDate();
      source0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = source0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences(true);
      assertNotNull(list0);
      
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Source source0 = new Source();
      source0.setSourceFiledBy("p70[\"");
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia(true);
      assertNotNull(list0);
      
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      assertTrue(source1.equals((Object)source0));
      
      ChangeDate changeDate0 = new ChangeDate();
      source1.setChangeDate(changeDate0);
      boolean boolean0 = source0.equals(source1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = new RepositoryCitation();
      source0.setRepositoryCitation(repositoryCitation0);
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Source source0 = new Source();
      ChangeDate changeDate0 = source0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setOriginatorsAuthors(multiStringWithCustomFacts0);
      Source source1 = new Source(source0);
      boolean boolean0 = source0.equals(source1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = source0.getPublicationFacts();
      assertNull(multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Source source0 = new Source();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      source0.setSourceFiledBy(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = source0.getSourceFiledBy();
      assertNull(stringWithCustomFacts1.getValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      StringWithCustomFacts stringWithCustomFacts0 = source0.getSourceFiledBy();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Source source0 = new Source("org.gedcom4j.model.MultimediaReference");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = source0.getOriginatorsAuthors();
      assertNull(multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setSourceText(multiStringWithCustomFacts0);
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Source source0 = new Source();
      ChangeDate changeDate0 = new ChangeDate();
      source0.setChangeDate(changeDate0);
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Source source0 = new Source();
      List<UserReference> list0 = source0.getUserReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Source source0 = new Source();
      SourceData sourceData0 = source0.getData();
      assertNull(sourceData0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Source source0 = new Source();
      RepositoryCitation repositoryCitation0 = source0.getRepositoryCitation();
      assertNull(repositoryCitation0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setPublicationFacts(multiStringWithCustomFacts0);
      Source source1 = new Source(source0);
      boolean boolean0 = source0.equals(source1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Source source0 = new Source();
      List<MultimediaReference> list0 = source0.getMultimedia();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      StringWithCustomFacts stringWithCustomFacts0 = source0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      source0.setTitle(multiStringWithCustomFacts0);
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Source source0 = new Source("xWjo'e@}p[-d'W}");
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = source0.getTitle();
      assertNull(multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Source source0 = new Source();
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = source0.getSourceText();
      assertNull(multiStringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Source source0 = new Source();
      String string0 = source0.getXref();
      assertNull(string0);
  }
}
