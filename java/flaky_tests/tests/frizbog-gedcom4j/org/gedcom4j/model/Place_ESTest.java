/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:32:05 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.AbstractNameVariation;
import org.gedcom4j.model.Place;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Place_ESTest extends Place_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Place place0 = new Place();
      place0.getRomanized(true);
      List<AbstractNameVariation> list0 = place0.getRomanized();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("phonetic=");
      String string0 = place0.getPlaceName();
      assertEquals("phonetic=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("");
      String string0 = place0.getPlaceName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceFormat("[Ig2Ci3S}J5Mat");
      StringWithCustomFacts stringWithCustomFacts0 = place0.getPlaceFormat();
      assertEquals("[Ig2Ci3S}J5Mat", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Place place0 = new Place();
      place0.getPhonetic(true);
      List<AbstractNameVariation> list0 = place0.getPhonetic();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      place0.setLongitude(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = place0.getLongitude();
      assertSame(stringWithCustomFacts1, stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude("$QC6=/Sh(AZ<");
      StringWithCustomFacts stringWithCustomFacts0 = place0.getLatitude();
      assertEquals("$QC6=/Sh(AZ<", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Place place0 = new Place();
      place0.getCitations(true);
      List<AbstractCitation> list0 = place0.getCitations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Place place0 = null;
      try {
        place0 = new Place((Place) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getRomanized(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getPhonetic(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractCitation> list0 = place0.getCitations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Place place0 = new Place();
      place0.getCustomFacts(true);
      String string0 = place0.toString();
      assertEquals("Place [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getRomanized(true);
      assertNotNull(list0);
      
      String string0 = place0.toString();
      assertEquals("Place [romanized=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("");
      String string0 = place0.toString();
      assertEquals("Place [placeName=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceFormat("");
      String string0 = place0.toString();
      assertEquals("Place [placeFormat=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getPhonetic(true);
      assertNotNull(list0);
      
      String string0 = place0.toString();
      assertEquals("Place [phonetic=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Place place0 = new Place();
      place0.getNoteStructures(true);
      String string0 = place0.toString();
      assertEquals("Place [noteStructures=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Place place0 = new Place();
      place0.setLongitude("5({hy");
      String string0 = place0.toString();
      assertEquals("Place [longitude=5({hy, ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude("respAgency=");
      String string0 = place0.toString();
      assertEquals("Place [latitude=respAgency=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractCitation> list0 = place0.getCitations(true);
      assertNotNull(list0);
      
      String string0 = place0.toString();
      assertEquals("Place [citations=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceFormat((String) null);
      assertNull(place0.getPlaceName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Place place0 = new Place();
      place0.setLongitude((String) null);
      assertNull(place0.getPlaceName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude((String) null);
      assertNull(place0.getPlaceName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Place place0 = new Place();
      place0.getRomanized(true);
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("pk<7FexLh!%ifH");
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceFormat("4;p4xP^aW");
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Place place0 = new Place();
      place0.getPhonetic(true);
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      place0.setLongitude(stringWithCustomFacts0);
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude("KhKU");
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Place place0 = new Place();
      place0.getCitations(true);
      place0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getRomanized(true);
      List<AbstractNameVariation> list1 = place0.getRomanized(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getPhonetic(true);
      List<AbstractNameVariation> list1 = place0.getPhonetic(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractCitation> list0 = place0.getCitations(true);
      List<AbstractCitation> list1 = place0.getCitations(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place();
      assertTrue(place1.equals((Object)place0));
      
      place1.getRomanized(true);
      Place place2 = new Place(place1);
      boolean boolean0 = place2.equals(place0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.getRomanized(true);
      boolean boolean0 = place0.equals(place1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.setPlaceName("Gd]j#W\"?\"");
      boolean boolean0 = place1.equals(place0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("2JhGxF@H.=JKohY[Q9");
      place0.setLatitude("q_E:v");
      Place place1 = new Place();
      place1.setLatitude("q_E:v");
      boolean boolean0 = place1.equals(place0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place0.setPlaceFormat("");
      boolean boolean0 = place0.equals(place1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.setPlaceFormat("");
      boolean boolean0 = place0.equals(place1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.getPhonetic(true);
      boolean boolean0 = place0.equals(place1);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.getPhonetic(true);
      boolean boolean0 = place1.equals(place0);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place();
      assertTrue(place1.equals((Object)place0));
      
      place1.setLongitude("l6s7_9rxE1j9k6");
      boolean boolean0 = place1.equals(place0);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Place place0 = new Place();
      place0.setLongitude("/");
      Place place1 = new Place();
      boolean boolean0 = place1.equals(place0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.setLatitude("9H~!oPss0u");
      boolean boolean0 = place1.equals(place0);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.setLatitude("Place [citations=[], ]");
      boolean boolean0 = place0.equals(place1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place(place0);
      assertTrue(place1.equals((Object)place0));
      
      place1.getCitations(true);
      boolean boolean0 = place1.equals(place0);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Place place0 = new Place();
      Place place1 = new Place();
      assertTrue(place1.equals((Object)place0));
      
      place1.getCitations(true);
      boolean boolean0 = place0.equals(place1);
      assertFalse(place1.equals((Object)place0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Place place0 = new Place();
      boolean boolean0 = place0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Place place0 = new Place();
      boolean boolean0 = place0.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getRomanized(true);
      assertNotNull(list0);
      
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceFormat("");
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getPhonetic(true);
      assertNotNull(list0);
      
      Place place1 = new Place(place0);
      boolean boolean0 = place0.equals(place1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Place place0 = new Place();
      place0.setLongitude("");
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude("F?9M273 tXU0&oPGj");
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractCitation> list0 = place0.getCitations(true);
      assertNotNull(list0);
      
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Place place0 = new Place();
      place0.setPlaceName("]");
      Place place1 = new Place(place0);
      boolean boolean0 = place1.equals(place0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractCitation> list0 = place0.getCitations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Place place0 = new Place();
      String string0 = place0.getPlaceName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      place0.setPlaceFormat(stringWithCustomFacts0);
      assertNull(place0.getPlaceName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = place0.getLongitude();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Place place0 = new Place();
      place0.setLatitude((StringWithCustomFacts) null);
      assertNull(place0.getPlaceName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = place0.getPlaceFormat();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Place place0 = new Place();
      StringWithCustomFacts stringWithCustomFacts0 = place0.getLatitude();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getPhonetic();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Place place0 = new Place();
      List<AbstractNameVariation> list0 = place0.getRomanized();
      assertNull(list0);
  }
}
