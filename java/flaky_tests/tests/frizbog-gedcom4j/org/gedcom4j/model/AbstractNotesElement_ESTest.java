/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:12:45 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CitationWithSource;
import org.gedcom4j.model.NoteStructure;
import org.gedcom4j.model.PersonalName;
import org.gedcom4j.model.Source;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractNotesElement_ESTest extends AbstractNotesElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.getCustomFacts(true);
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      String string0 = personalName0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Source source0 = new Source();
      String string0 = source0.toString();
      assertEquals("Source []", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Source source0 = new Source();
      source0.getNoteStructures(true);
      List<NoteStructure> list0 = source0.getNoteStructures();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Source source0 = new Source();
      PersonalName personalName0 = new PersonalName();
      boolean boolean0 = personalName0.equals(source0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CitationWithSource citationWithSource0 = new CitationWithSource();
      List<NoteStructure> list0 = citationWithSource0.getNoteStructures(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<NoteStructure> list0 = personalName0.getNoteStructures();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.getNoteStructures(true);
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Source source0 = new Source();
      List<NoteStructure> list0 = source0.getNoteStructures(true);
      List<NoteStructure> list1 = source0.getNoteStructures(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName();
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName0.getNoteStructures(true);
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(personalName1.equals((Object)personalName0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<NoteStructure> list0 = personalName0.getNoteStructures(true);
      assertNotNull(list0);
      
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Source source0 = new Source();
      List<NoteStructure> list0 = source0.getNoteStructures(true);
      assertNotNull(list0);
      
      Source source1 = new Source(source0);
      boolean boolean0 = source1.equals(source0);
      assertTrue(boolean0);
  }
}
