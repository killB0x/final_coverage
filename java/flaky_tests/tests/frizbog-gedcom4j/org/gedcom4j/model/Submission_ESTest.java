/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:35:59 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.Submission;
import org.gedcom4j.model.Submitter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Submission_ESTest extends Submission_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.getCustomFacts(true);
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Submission submission0 = new Submission(")<u");
      String string0 = submission0.getXref();
      assertEquals(")<u", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Submission submission0 = new Submission("");
      String string0 = submission0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Submission submission0 = new Submission("Z|njap!");
      submission0.setTempleCode("Z|njap!");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getTempleCode();
      assertEquals("Z|njap!", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      submission0.setSubmitter(submitter0);
      Submitter submitter1 = submission0.getSubmitter();
      assertSame(submitter1, submitter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setRecIdNumber("noteStructures=");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getRecIdNumber();
      assertEquals("noteStructures=", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Submission submission0 = new Submission("Z|njap!");
      submission0.setOrdinanceProcessFlag("Z|njap!");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getOrdinanceProcessFlag();
      assertEquals("Z|njap!", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setNameOfFamilyFile("g]+uGaaA>pXH]h7_*");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getNameOfFamilyFile();
      assertEquals("g]+uGaaA>pXH]h7_*", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Submission submission0 = new Submission("+");
      submission0.setDescendantsCount("E,(i");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getDescendantsCount();
      assertEquals("E,(i", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Submission submission0 = new Submission("");
      submission0.setAncestorsCount("");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getAncestorsCount();
      assertEquals("", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Submission submission0 = null;
      try {
        submission0 = new Submission((Submission) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.getCustomFacts(true);
      String string0 = submission0.toString();
      assertEquals("Submission [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Submission submission0 = new Submission(")<u");
      String string0 = submission0.toString();
      assertEquals("Submission [xref=)<u, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode("");
      String string0 = submission0.toString();
      assertEquals("Submission [templeCode=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      submission0.setSubmitter(submitter0);
      String string0 = submission0.toString();
      assertEquals("Submission [submitter=Submitter [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setRecIdNumber("");
      String string0 = submission0.toString();
      assertEquals("Submission [recIdNumber=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setOrdinanceProcessFlag("");
      String string0 = submission0.toString();
      assertEquals("Submission [ordinanceProcessFlag=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setDescendantsCount("");
      String string0 = submission0.toString();
      assertEquals("Submission [descendantsCount=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setAncestorsCount("");
      String string0 = submission0.toString();
      assertEquals("Submission [ancestorsCount=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setRecIdNumber((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setOrdinanceProcessFlag((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setNameOfFamilyFile((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setDescendantsCount((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setAncestorsCount((String) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode("");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      submission0.setSubmitter(submitter0);
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setRecIdNumber("Submission [descendantsCount=, ]");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setOrdinanceProcessFlag("ordinanceProcessFlag=");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setNameOfFamilyFile(".Y(~vIO#RfM3nCG");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setDescendantsCount("");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Submission submission0 = new Submission(")<u");
      submission0.setAncestorsCount(")<u");
      submission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Submission submission0 = new Submission(")<u");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission("-(mpm@");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission("}U >_m^lr<#Zs]do4");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setTempleCode("0FL)[:o|])`P");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode("");
      Submission submission1 = new Submission("");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      Submission submission1 = new Submission();
      assertTrue(submission1.equals((Object)submission0));
      
      submission0.setSubmitter(submitter0);
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      Submission submission1 = new Submission();
      assertTrue(submission1.equals((Object)submission0));
      
      submission0.setSubmitter(submitter0);
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setRecIdNumber("recIdNumber=");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission0.setRecIdNumber("");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setOrdinanceProcessFlag(";):sZ4");
      Submission submission1 = new Submission(";):sZ4");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission();
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setOrdinanceProcessFlag("Address [");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setNameOfFamilyFile(";,WE io;Mz");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(submission1.equals((Object)submission0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setNameOfFamilyFile(";,WE io;Mz");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission0.setDescendantsCount("");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission0.setDescendantsCount("");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(submission1.equals((Object)submission0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission(submission0);
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setAncestorsCount("");
      boolean boolean0 = submission1.equals(submission0);
      assertFalse(submission1.equals((Object)submission0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Submission submission0 = new Submission();
      Submission submission1 = new Submission();
      assertTrue(submission1.equals((Object)submission0));
      
      submission1.setAncestorsCount("q6LCl2Si#AeP(d0");
      boolean boolean0 = submission0.equals(submission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Submission submission0 = new Submission();
      Object object0 = new Object();
      boolean boolean0 = submission0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Submission submission0 = new Submission();
      boolean boolean0 = submission0.equals(submission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode("(cGmfA");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setRecIdNumber("RZ\"XJ [noq8u W$");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setOrdinanceProcessFlag("Submission [ordinanceProcessFlag=, recIdNumber=, ]");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setNameOfFamilyFile("Address [");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission1.equals(submission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setDescendantsCount("Address [");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setAncestorsCount("}U >_m^lr<#Zs]do4");
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission0.equals(submission1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Submission submission0 = new Submission("");
      ChangeDate changeDate0 = new ChangeDate();
      StringWithCustomFacts stringWithCustomFacts0 = changeDate0.getDate();
      submission0.setOrdinanceProcessFlag(stringWithCustomFacts0);
      assertEquals("", submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Submission submission0 = new Submission();
      String string0 = submission0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Submission submission0 = new Submission(")<u");
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getOrdinanceProcessFlag();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setAncestorsCount((StringWithCustomFacts) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = submission0.getSubmitter();
      assertNull(submitter0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      submission0.setNameOfFamilyFile(stringWithCustomFacts0);
      String string0 = submission0.toString();
      assertEquals("Submission [nameOfFamilyFile=null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getTempleCode();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      submission0.setRecIdNumber(stringWithCustomFacts0);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setTempleCode((StringWithCustomFacts) null);
      assertNull(submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getAncestorsCount();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getNameOfFamilyFile();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Submission submission0 = new Submission();
      StringWithCustomFacts stringWithCustomFacts0 = submission0.getDescendantsCount();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setXref("[`O\"2qsMjJ");
      assertEquals("[`O\"2qsMjJ", submission0.getXref());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Submission submission0 = new Submission();
      Submitter submitter0 = new Submitter();
      submission0.setSubmitter(submitter0);
      Submission submission1 = new Submission(submission0);
      boolean boolean0 = submission1.equals(submission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Submission submission0 = new Submission();
      submission0.setDescendantsCount((StringWithCustomFacts) null);
      assertNull(submission0.getXref());
  }
}
