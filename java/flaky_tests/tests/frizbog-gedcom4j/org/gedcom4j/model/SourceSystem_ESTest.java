/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:04:48 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Corporation;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.HeaderSourceData;
import org.gedcom4j.model.SourceSystem;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceSystem_ESTest extends SourceSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      List<CustomFact> list0 = sourceSystem0.getCustomFactsWithTag("systemId=");
      sourceSystem0.customFacts = list0;
      sourceSystem0.hashCode();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum("b?'~");
      StringWithCustomFacts stringWithCustomFacts0 = sourceSystem0.getVersionNum();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
      assertNotNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setSystemId((String) null);
      String string0 = sourceSystem0.getSystemId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setSystemId("");
      String string0 = sourceSystem0.getSystemId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem0.setSourceData(headerSourceData0);
      sourceSystem0.getSourceData();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName("systemId=");
      StringWithCustomFacts stringWithCustomFacts0 = sourceSystem0.getProductName();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
      assertNotNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      Corporation corporation0 = new Corporation();
      sourceSystem0.setCorporation(corporation0);
      sourceSystem0.getCorporation();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceSystem sourceSystem0 = null;
      try {
        sourceSystem0 = new SourceSystem((SourceSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      LinkedList<CustomFact> linkedList0 = new LinkedList<CustomFact>();
      sourceSystem0.customFacts = (List<CustomFact>) linkedList0;
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem [systemId=UNSPECIFIED, customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum("b?'~");
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem [systemId=UNSPECIFIED, versionNum=b?'~, ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
      
      sourceSystem0.setSystemId((String) null);
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem []", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem0.setSourceData(headerSourceData0);
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem [sourceData=HeaderSourceData [name=UNSPECIFIED, ], systemId=UNSPECIFIED, ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName("systemId=");
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem [productName=systemId=, systemId=UNSPECIFIED, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      Corporation corporation0 = new Corporation();
      sourceSystem0.setCorporation(corporation0);
      String string0 = sourceSystem0.toString();
      assertEquals("SourceSystem [corporation=Corporation [businessName=UNSPECIFIED, ], systemId=UNSPECIFIED, ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum((String) null);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName((String) null);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum("b?'~");
      sourceSystem0.hashCode();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setSystemId((String) null);
      sourceSystem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem0.setSourceData(headerSourceData0);
      sourceSystem0.hashCode();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName("systemId=");
      sourceSystem0.hashCode();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      Corporation corporation0 = new Corporation();
      sourceSystem0.setCorporation(corporation0);
      sourceSystem0.hashCode();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum(",eR29!%-M`<qy]");
      SourceSystem sourceSystem1 = new SourceSystem();
      boolean boolean0 = sourceSystem0.equals(sourceSystem1);
      assertFalse(boolean0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum("ij?mS>K+~7}z~\" ");
      SourceSystem sourceSystem1 = new SourceSystem();
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
      
      sourceSystem1.setSystemId("L{pBGYQ-.");
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      sourceSystem1.setSystemId((String) null);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem1.setSourceData(headerSourceData0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(sourceSystem1.equals((Object)sourceSystem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem0.setSourceData(headerSourceData0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      sourceSystem1.setProductName("");
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(sourceSystem1.equals((Object)sourceSystem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem();
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      sourceSystem1.setProductName("MxH-y/xln-on");
      boolean boolean0 = sourceSystem0.equals(sourceSystem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      Corporation corporation0 = new Corporation();
      sourceSystem1.setCorporation(corporation0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertFalse(sourceSystem1.equals((Object)sourceSystem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      SourceSystem sourceSystem1 = new SourceSystem();
      assertTrue(sourceSystem1.equals((Object)sourceSystem0));
      
      Corporation corporation0 = new Corporation();
      sourceSystem1.setCorporation(corporation0);
      boolean boolean0 = sourceSystem0.equals(sourceSystem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      Object object0 = new Object();
      boolean boolean0 = sourceSystem0.equals(object0);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      boolean boolean0 = sourceSystem0.equals(sourceSystem0);
      assertTrue(boolean0);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum("B:X\"=W'?A=a-");
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertTrue(boolean0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName("SQ{hHV'|UgOaY");
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      Corporation corporation0 = new Corporation();
      sourceSystem0.setCorporation(corporation0);
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      boolean boolean0 = sourceSystem1.equals(sourceSystem0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
      
      sourceSystem0.setSystemId((String) null);
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      boolean boolean0 = sourceSystem0.equals(sourceSystem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.getCorporation();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setVersionNum((StringWithCustomFacts) null);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.setProductName((StringWithCustomFacts) null);
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.getSourceData();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      HeaderSourceData headerSourceData0 = new HeaderSourceData();
      sourceSystem0.setSourceData(headerSourceData0);
      SourceSystem sourceSystem1 = new SourceSystem(sourceSystem0);
      boolean boolean0 = sourceSystem0.equals(sourceSystem1);
      assertTrue(boolean0);
      assertEquals("UNSPECIFIED", sourceSystem1.getSystemId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.getProductName();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      String string0 = sourceSystem0.getSystemId();
      assertEquals("UNSPECIFIED", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SourceSystem sourceSystem0 = new SourceSystem();
      sourceSystem0.getVersionNum();
      assertEquals("UNSPECIFIED", sourceSystem0.getSystemId());
  }
}
