/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:48:52 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.IndividualAttribute;
import org.gedcom4j.model.enumerations.IndividualAttributeType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndividualAttribute_ESTest extends IndividualAttribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.POSSESSIONS;
      individualAttribute0.setType(individualAttributeType0);
      IndividualAttributeType individualAttributeType1 = individualAttribute0.getType();
      assertEquals("Possessions", individualAttributeType1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndividualAttribute individualAttribute0 = null;
      try {
        individualAttribute0 = new IndividualAttribute((IndividualAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      String string0 = individualAttribute0.toString();
      assertEquals("IndividualAttribute []", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      individualAttribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.OCCUPATION;
      individualAttribute0.setType(individualAttributeType0);
      individualAttribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      IndividualAttribute individualAttribute1 = new IndividualAttribute(individualAttribute0);
      assertTrue(individualAttribute1.equals((Object)individualAttribute0));
      
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.POSSESSIONS;
      individualAttribute0.setType(individualAttributeType0);
      boolean boolean0 = individualAttribute1.equals(individualAttribute0);
      assertFalse(individualAttribute1.equals((Object)individualAttribute0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      boolean boolean0 = individualAttribute0.equals("IndividualAttribute [type=Religious Affiliation, date=type=, ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      boolean boolean0 = individualAttribute0.equals(individualAttribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.POSSESSIONS;
      individualAttribute0.setType(individualAttributeType0);
      String string0 = individualAttribute0.toString();
      assertEquals("IndividualAttribute [type=Possessions, ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      IndividualAttribute individualAttribute1 = new IndividualAttribute(individualAttribute0);
      boolean boolean0 = individualAttribute1.equals(individualAttribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      individualAttribute0.getType();
  }
}
