/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:40:21 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.NoteRecord;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.UserReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NoteRecord_ESTest extends NoteRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      String string0 = noteRecord0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("8^Sr$>miRLq]%E");
      String string0 = noteRecord0.getXref();
      assertEquals("8^Sr$>miRLq]%E", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      List<UserReference> list0 = noteRecord1.getUserReferences();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      noteRecord0.setRecIdNumber("");
      StringWithCustomFacts stringWithCustomFacts0 = noteRecord0.getRecIdNumber();
      assertEquals("", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("K.sT!h~{[,");
      noteRecord0.getLines(true);
      List<String> list0 = noteRecord0.getLines();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("ue.Aaw!0#Z]kb_[a u");
      noteRecord0.getCitations(true);
      List<AbstractCitation> list0 = noteRecord0.getCitations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("W1VKac7y");
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = noteRecord0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoteRecord noteRecord0 = null;
      try {
        noteRecord0 = new NoteRecord((NoteRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      List<UserReference> list0 = noteRecord0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      List<String> list0 = noteRecord0.getLines(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("citations=");
      List<AbstractCitation> list0 = noteRecord0.getCitations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      ChangeDate changeDate0 = noteRecord0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      String string0 = noteRecord0.toString();
      assertEquals("Note []", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("Note [xref=4Oj=xISjQ, ]");
      noteRecord0.setRecIdNumber("Note [xref=4Oj=xISjQ, ]");
      String string0 = noteRecord0.toString();
      assertEquals("Note [recIdNumber=Note [xref=4Oj=xISjQ, ], xref=Note [xref=4Oj=xISjQ, ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord0 = new NoteRecord("customFacts()=");
      String string0 = noteRecord0.toString();
      assertEquals("Note [citations=[], lines=[], userReferences=[], xref=customFacts()=, customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("gIKF)(P~P-");
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord0.setChangeDate(changeDate0);
      String string0 = noteRecord0.toString();
      assertEquals("Note [changeDate=ChangeDate [], xref=gIKF)(P~P-, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteRecord0.setRecIdNumber((String) null);
      assertEquals(", ", noteRecord0.getXref());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      noteRecord0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      noteRecord0.setRecIdNumber("4Oj=xISjQ");
      noteRecord0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord0 = new NoteRecord("xref=");
      noteRecord0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("lines=");
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord0.setChangeDate(changeDate0);
      noteRecord0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord0 = new NoteRecord("j5tT{-'P7.>b*z#E+\"r");
      List<UserReference> list0 = noteRecord0.getUserReferences(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      List<String> list0 = noteRecord0.getLines(true);
      List<String> list1 = noteRecord0.getLines(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord0 = new NoteRecord("4Oj=IS|jQ");
      List<AbstractCitation> list0 = noteRecord0.getCitations(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("[6A**DMq =_//*4M%.U");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.setXref("userReferen#es=");
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("AE5,Q{:o3|");
      NoteRecord noteRecord1 = new NoteRecord((String) null);
      boolean boolean0 = noteRecord1.equals(noteRecord0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.getUserReferences(true);
      boolean boolean0 = noteRecord1.equals(noteRecord0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("userReferen#es=");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.getUserReferences(true);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("userReferen#es=");
      noteRecord0.setRecIdNumber("userReferen#es=");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      boolean boolean0 = noteRecord1.equals(noteRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      NoteRecord noteRecord1 = new NoteRecord("4Oj=xISjQ");
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.setRecIdNumber("4Oj=xISjQ");
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("]RNcr}|ELr+/");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.setRecIdNumber("]RNcr}|ELr+/");
      boolean boolean0 = noteRecord1.equals(noteRecord0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("citations=");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord0.getLines(true);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.getLines(true);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("AE5,Q{:o3|");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.getCitations(true);
      boolean boolean0 = noteRecord1.equals(noteRecord0);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("pJZ,xr#[j|Mo?>Tv0`");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
      
      noteRecord1.getCitations(true);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      NoteRecord noteRecord0 = new NoteRecord("j5tT{-'P7.>b*z#E+\"r");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("[6A**DMq =_//*4M%.U");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord1.setChangeDate(changeDate0);
      assertFalse(noteRecord0.equals((Object)noteRecord1));
      
      noteRecord0.setChangeDate(changeDate0);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertTrue(noteRecord0.equals((Object)noteRecord1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("AE5,Q{:o3|");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord1.setChangeDate(changeDate0);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("[6A**DMq =_//*4M%.U");
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord0.setChangeDate(changeDate0);
      boolean boolean0 = noteRecord0.equals(noteRecord1);
      assertFalse(boolean0);
      assertFalse(noteRecord1.equals((Object)noteRecord0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("[6A**DMq =_//*4M%.U");
      ChangeDate changeDate0 = new ChangeDate();
      boolean boolean0 = noteRecord0.equals(changeDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      boolean boolean0 = noteRecord0.equals(noteRecord0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("org.gedcom4j.model.AbstractElement");
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      noteRecord0.setRecIdNumber(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = noteRecord0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord((String) null);
      List<AbstractCitation> list0 = noteRecord0.getCitations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("userReferen#es=");
      List<String> list0 = noteRecord0.getLines();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("");
      String string0 = noteRecord0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("4Oj=xISjQ");
      List<UserReference> list0 = noteRecord0.getUserReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NoteRecord noteRecord0 = new NoteRecord("P6:Q");
      ChangeDate changeDate0 = new ChangeDate();
      noteRecord0.setChangeDate(changeDate0);
      NoteRecord noteRecord1 = new NoteRecord(noteRecord0);
      assertTrue(noteRecord1.equals((Object)noteRecord0));
  }
}
