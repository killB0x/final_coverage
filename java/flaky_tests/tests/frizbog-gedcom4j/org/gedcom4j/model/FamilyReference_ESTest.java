/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:37:37 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.Family;
import org.gedcom4j.model.FamilyReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FamilyReference_ESTest extends FamilyReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      List<CustomFact> list0 = familyReference0.getCustomFactsWithTag("gI#;yW~]");
      familyReference0.customFacts = list0;
      familyReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Family family0 = new Family();
      FamilyReference familyReference0 = new FamilyReference(family0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.setFamily(family0);
      Family family1 = familyReference0.getFamily();
      assertNull(family1.getXref());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      List<CustomFact> list0 = familyReference0.getCustomFactsWithTag("gI#;yW~]");
      familyReference0.customFacts = list0;
      String string0 = familyReference0.toString();
      assertEquals("FamilyReference [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.setFamily(family0);
      String string0 = familyReference0.toString();
      assertEquals("FamilyReference [family=Family [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.family = family0;
      FamilyReference familyReference1 = new FamilyReference();
      boolean boolean0 = familyReference0.equals(familyReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.family = family0;
      FamilyReference familyReference1 = new FamilyReference();
      boolean boolean0 = familyReference1.equals(familyReference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      FamilyReference familyReference1 = new FamilyReference();
      boolean boolean0 = familyReference1.equals(familyReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.family = family0;
      FamilyReference familyReference1 = new FamilyReference(familyReference0, true);
      boolean boolean0 = familyReference0.equals(familyReference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      boolean boolean0 = familyReference0.equals(familyReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      boolean boolean0 = familyReference0.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = new Family();
      familyReference0.setFamily(family0);
      familyReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      Family family0 = familyReference0.getFamily();
      assertNull(family0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FamilyReference familyReference0 = new FamilyReference();
      FamilyReference familyReference1 = null;
      try {
        familyReference1 = new FamilyReference(familyReference0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }
}
