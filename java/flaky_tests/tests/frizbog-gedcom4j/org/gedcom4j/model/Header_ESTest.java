/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:15:25 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CharacterSet;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.GedcomVersion;
import org.gedcom4j.model.Header;
import org.gedcom4j.model.SourceSystem;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.Submission;
import org.gedcom4j.model.SubmissionReference;
import org.gedcom4j.model.SubmitterReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Header_ESTest extends Header_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Header header0 = new Header();
      header0.setTime("}");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getTime();
      assertEquals("}", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Header header0 = new Header();
      header0.setSubmitterReference((SubmitterReference) null);
      SubmitterReference submitterReference0 = header0.getSubmitterReference();
      assertNull(submitterReference0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Header header0 = new Header();
      SubmissionReference submissionReference0 = new SubmissionReference();
      header0.setSubmissionReference(submissionReference0);
      SubmissionReference submissionReference1 = header0.getSubmissionReference();
      assertSame(submissionReference1, submissionReference0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Header header0 = new Header();
      header0.setSourceSystem((SourceSystem) null);
      SourceSystem sourceSystem0 = header0.getSourceSystem();
      assertNull(sourceSystem0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Header header0 = new Header();
      header0.setPlaceHierarchy("MJ5C,S-Kv@80(2");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getPlaceHierarchy();
      assertNotNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage("'ZB.");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getLanguage();
      assertEquals("'ZB.", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Header header0 = new Header();
      header0.setGedcomVersion((GedcomVersion) null);
      GedcomVersion gedcomVersion0 = header0.getGedcomVersion();
      assertNull(gedcomVersion0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName("");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getFileName();
      assertEquals("", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem("%H_V*E$9'P}#W4");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getDestinationSystem();
      assertEquals("%H_V*E$9'P}#W4", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Header header0 = new Header();
      header0.setDate("language=");
      StringWithCustomFacts stringWithCustomFacts0 = header0.getDate();
      assertEquals("language=", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(true);
      List<String> list1 = header0.getCopyrightData();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Header header0 = new Header();
      header0.setCharacterSet((CharacterSet) null);
      CharacterSet characterSet0 = header0.getCharacterSet();
      assertNull(characterSet0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Header header0 = null;
      try {
        header0 = new Header((Header) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Header header0 = new Header();
      header0.getCustomFacts(true);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Header header0 = new Header();
      header0.setTime("");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], time=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Header header0 = new Header();
      header0.setSubmitterReference((SubmitterReference) null);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Header header0 = new Header();
      Submission submission0 = new Submission(">~|0]YZ8w/H*4wzSSE`");
      SubmissionReference submissionReference0 = new SubmissionReference(submission0);
      header0.setSubmissionReference(submissionReference0);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submissionReference=SubmissionReference [submission=Submission [xref=>~|0]YZ8w/H*4wzSSE`, ], ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Header header0 = new Header();
      header0.setSourceSystem((SourceSystem) null);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Header header0 = new Header();
      header0.setPlaceHierarchy("");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], placeHierarchy=, sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Header header0 = new Header();
      header0.getNoteStructures(true);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], noteStructures=[], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage("|e]u4F(");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], language=|e]u4F(, sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Header header0 = new Header();
      header0.setGedcomVersion((GedcomVersion) null);
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName("|e]u4F(");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], fileName=|e]u4F(, gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem("I&R3wc@_");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], destinationSystem=I&R3wc@_, gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Header header0 = new Header();
      header0.setDate("5<'m25Rn0P>UU3GP");
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], date=5<'m25Rn0P>UU3GP, gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(true);
      assertNotNull(list0);
      
      String string0 = header0.toString();
      assertEquals("Header [characterSet=CharacterSet [characterSetName=ANSEL, ], copyrightData=[], gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Header header0 = new Header();
      header0.setCharacterSet((CharacterSet) null);
      String string0 = header0.toString();
      assertEquals("Header [gedcomVersion=GedcomVersion [gedcomForm=LINEAGE-LINKED, versionNumber=5.5.1, ], sourceSystem=SourceSystem [systemId=UNSPECIFIED, ], submitter=SubmitterReference [submitter=Submitter [name=UNSPECIFIED, xref=@SUBMITTER@, ], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Header header0 = new Header();
      header0.setTime((String) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Header header0 = new Header();
      header0.setPlaceHierarchy((String) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage((String) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName((String) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem((String) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Header header0 = new Header();
      header0.setSubmitterReference((SubmitterReference) null);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Header header0 = new Header();
      Submission submission0 = new Submission("TDb%i<.X2oE$+");
      SubmissionReference submissionReference0 = new SubmissionReference(submission0);
      header0.setSubmissionReference(submissionReference0);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Header header0 = new Header();
      header0.setSourceSystem((SourceSystem) null);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Header header0 = new Header();
      header0.setPlaceHierarchy("");
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage("");
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Header header0 = new Header();
      header0.setGedcomVersion((GedcomVersion) null);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName("");
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem("%H_V*E$9'P}#W4");
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Header header0 = new Header();
      header0.setDate("8Wm2)2eC");
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Header header0 = new Header();
      header0.getCopyrightData(true);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Header header0 = new Header();
      header0.setCharacterSet((CharacterSet) null);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(true);
      List<String> list1 = header0.getCopyrightData(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Header header0 = new Header();
      header0.setTime("x] =+3>G+,Om.1IGN2");
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setTime("=G@o)s]r(9^MaZ#_");
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Header header0 = new Header();
      header0.setTime(";");
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      SubmitterReference submitterReference0 = new SubmitterReference();
      header1.setSubmitterReference(submitterReference0);
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setSubmitterReference((SubmitterReference) null);
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Header header0 = new Header();
      SubmissionReference submissionReference0 = new SubmissionReference();
      header0.setSubmissionReference(submissionReference0);
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Header header0 = new Header();
      SubmissionReference submissionReference0 = new SubmissionReference();
      header0.setSubmissionReference(submissionReference0);
      Header header1 = new Header();
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      SourceSystem sourceSystem0 = header0.getSourceSystem();
      Header header2 = new Header();
      assertTrue(header2.equals((Object)header1));
      
      List<CustomFact> list0 = header2.getCustomFacts(true);
      sourceSystem0.customFacts = list0;
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Header header0 = new Header();
      header0.setSourceSystem((SourceSystem) null);
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setPlaceHierarchy("");
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setPlaceHierarchy(")P3>f-R;)zkdE");
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setLanguage("");
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setLanguage("rA+-Bw2<cGA^");
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header();
      assertTrue(header1.equals((Object)header0));
      
      header0.setGedcomVersion((GedcomVersion) null);
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      header1.setGedcomVersion((GedcomVersion) null);
      assertFalse(header1.equals((Object)header0));
      
      header0.setGedcomVersion((GedcomVersion) null);
      boolean boolean0 = header1.equals(header0);
      assertTrue(header1.equals((Object)header0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setGedcomVersion((GedcomVersion) null);
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName("romanized=");
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header0.setFileName("");
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem("%H_V*E$9'P}#W4");
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setDestinationSystem("emails=");
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.setDate("");
      boolean boolean0 = header1.equals(header0);
      assertFalse(header1.equals((Object)header0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Header header0 = new Header();
      header0.setDate("U:\"[{>ZLVb%AIL_");
      Header header1 = new Header();
      boolean boolean0 = header1.equals(header0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(true);
      assertNotNull(list0);
      
      Header header1 = new Header();
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
      
      header1.getCopyrightData(true);
      boolean boolean0 = header0.equals(header1);
      assertFalse(header1.equals((Object)header0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header(header0);
      header1.setCharacterSet((CharacterSet) null);
      boolean boolean0 = header0.equals(header1);
      assertFalse(boolean0);
      assertFalse(header1.equals((Object)header0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Header header0 = new Header();
      Header header1 = new Header();
      header0.setCharacterSet((CharacterSet) null);
      boolean boolean0 = header0.equals(header1);
      assertFalse(header1.equals((Object)header0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Header header0 = new Header();
      Object object0 = new Object();
      boolean boolean0 = header0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Header header0 = new Header();
      boolean boolean0 = header0.equals(header0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Header header0 = new Header();
      header0.setPlaceHierarchy("description=");
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage("|e]u4F(");
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName("romanized=");
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem("H#<F");
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData(true);
      assertNotNull(list0);
      
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Header header0 = new Header();
      header0.setCharacterSet((CharacterSet) null);
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Header header0 = new Header();
      CharacterSet characterSet0 = header0.getCharacterSet();
      assertNotNull(characterSet0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getDate();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Header header0 = new Header();
      header0.setDate("^$;dq9");
      Header header1 = new Header(header0);
      boolean boolean0 = header1.equals(header0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Header header0 = new Header();
      header0.setFileName((StringWithCustomFacts) null);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Header header0 = new Header();
      SubmissionReference submissionReference0 = header0.getSubmissionReference();
      assertNull(submissionReference0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Header header0 = new Header();
      header0.setGedcomVersion((GedcomVersion) null);
      Header header1 = new Header(header0);
      assertTrue(header1.equals((Object)header0));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getFileName();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getLanguage();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Header header0 = new Header();
      Submission submission0 = new Submission(">~|0]YZ8w/H*4wzSSE`");
      SubmissionReference submissionReference0 = new SubmissionReference(submission0);
      header0.setSubmissionReference(submissionReference0);
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Header header0 = new Header();
      GedcomVersion gedcomVersion0 = header0.getGedcomVersion();
      StringWithCustomFacts stringWithCustomFacts0 = gedcomVersion0.getGedcomForm();
      header0.setPlaceHierarchy(stringWithCustomFacts0);
      assertEquals("LINEAGE-LINKED", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      header0.setDate(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Header header0 = new Header();
      List<String> list0 = header0.getCopyrightData();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Header header0 = new Header();
      header0.setSourceSystem((SourceSystem) null);
      Header header1 = new Header(header0);
      boolean boolean0 = header1.equals(header0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Header header0 = new Header();
      header0.setSubmitterReference((SubmitterReference) null);
      Header header1 = new Header(header0);
      boolean boolean0 = header0.equals(header1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getTime();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getDestinationSystem();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Header header0 = new Header();
      SubmitterReference submitterReference0 = header0.getSubmitterReference();
      assertNotNull(submitterReference0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Header header0 = new Header();
      header0.setLanguage((StringWithCustomFacts) null);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Header header0 = new Header();
      StringWithCustomFacts stringWithCustomFacts0 = header0.getPlaceHierarchy();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Header header0 = new Header();
      GedcomVersion gedcomVersion0 = new GedcomVersion();
      StringWithCustomFacts stringWithCustomFacts0 = gedcomVersion0.getVersionNumber();
      header0.setTime(stringWithCustomFacts0);
      header0.hashCode();
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Header header0 = new Header();
      header0.setDestinationSystem((StringWithCustomFacts) null);
  }
}
