/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:16:44 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.FamilyChild;
import org.gedcom4j.model.IndividualEvent;
import org.gedcom4j.model.enumerations.IndividualEventType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndividualEvent_ESTest extends IndividualEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.BAPTISM;
      individualEvent0.setType(individualEventType0);
      IndividualEventType individualEventType1 = individualEvent0.getType();
      assertEquals(IndividualEventType.BAPTISM, individualEventType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent0.setFamily(familyChild0);
      FamilyChild familyChild1 = individualEvent0.getFamily();
      assertSame(familyChild1, familyChild0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndividualEvent individualEvent0 = null;
      try {
        individualEvent0 = new IndividualEvent((IndividualEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.WILL;
      individualEvent0.setType(individualEventType0);
      String string0 = individualEvent0.toString();
      assertEquals("IndividualEvent [type=Will, ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent0.setFamily(familyChild0);
      String string0 = individualEvent0.toString();
      assertEquals("IndividualEvent [family=FamilyChild [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.WILL;
      individualEvent0.setType(individualEventType0);
      individualEvent0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      individualEvent0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent0.setFamily(familyChild0);
      individualEvent0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEvent individualEvent1 = new IndividualEvent();
      assertTrue(individualEvent1.equals((Object)individualEvent0));
      
      IndividualEventType individualEventType0 = IndividualEventType.CREMATION;
      individualEvent1.setType(individualEventType0);
      boolean boolean0 = individualEvent1.equals(individualEvent0);
      assertFalse(individualEvent1.equals((Object)individualEvent0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEvent individualEvent1 = new IndividualEvent();
      assertTrue(individualEvent1.equals((Object)individualEvent0));
      
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent1.setFamily(familyChild0);
      boolean boolean0 = individualEvent1.equals(individualEvent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEvent individualEvent1 = new IndividualEvent(individualEvent0);
      assertTrue(individualEvent1.equals((Object)individualEvent0));
      
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent1.setFamily(familyChild0);
      boolean boolean0 = individualEvent0.equals(individualEvent1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      Object object0 = new Object();
      boolean boolean0 = individualEvent0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      boolean boolean0 = individualEvent0.equals(individualEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEvent individualEvent1 = new IndividualEvent(individualEvent0);
      boolean boolean0 = individualEvent1.equals(individualEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyChild familyChild0 = new FamilyChild();
      individualEvent0.setFamily(familyChild0);
      IndividualEvent individualEvent1 = new IndividualEvent(individualEvent0);
      boolean boolean0 = individualEvent1.equals(individualEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      individualEvent0.getType();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyChild familyChild0 = individualEvent0.getFamily();
      assertNull(familyChild0);
  }
}
