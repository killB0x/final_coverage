/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:59:55 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.Family;
import org.gedcom4j.model.FamilyEvent;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.IndividualReference;
import org.gedcom4j.model.LdsSpouseSealing;
import org.gedcom4j.model.MultimediaReference;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.SubmitterReference;
import org.gedcom4j.model.UserReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Family_ESTest extends Family_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Family family0 = new Family();
      family0.setXref("o]I`");
      String string0 = family0.getXref();
      assertEquals("o]I`", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Family family0 = new Family();
      family0.setXref("");
      String string0 = family0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = new IndividualReference();
      family0.setWife(individualReference0);
      IndividualReference individualReference1 = family0.getWife();
      assertSame(individualReference1, individualReference0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Family family0 = new Family();
      List<UserReference> list0 = family0.getUserReferences(true);
      List<UserReference> list1 = family0.getUserReferences();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Family family0 = new Family();
      family0.getSubmitters(true);
      List<SubmitterReference> list0 = family0.getSubmitters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice("");
      StringWithCustomFacts stringWithCustomFacts0 = family0.getRestrictionNotice();
      assertEquals("", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber("]TA~K]");
      StringWithCustomFacts stringWithCustomFacts0 = family0.getRecFileNumber();
      assertEquals("]TA~K]", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren("");
      StringWithCustomFacts stringWithCustomFacts0 = family0.getNumChildren();
      assertEquals("", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Family family0 = new Family();
      family0.getMultimedia(true);
      List<MultimediaReference> list0 = family0.getMultimedia();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Family family0 = new Family();
      family0.getLdsSpouseSealings(true);
      List<LdsSpouseSealing> list0 = family0.getLdsSpouseSealings();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Family family0 = new Family();
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family0.setHusband(individualReference0);
      IndividualReference individualReference1 = family0.getHusband();
      assertSame(individualReference1, individualReference0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      List<FamilyEvent> list0 = family0.getEvents();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Family family0 = new Family();
      family0.getCitations(true);
      List<AbstractCitation> list0 = family0.getCitations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Family family0 = new Family();
      family0.getChildren(true);
      List<IndividualReference> list0 = family0.getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = family0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId("xref=");
      StringWithCustomFacts stringWithCustomFacts0 = family0.getAutomatedRecordId();
      assertEquals("xref=", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Family family0 = null;
      try {
        family0 = new Family((Family) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Family family0 = new Family();
      List<UserReference> list0 = family0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Family family0 = new Family();
      List<SubmitterReference> list0 = family0.getSubmitters(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Family family0 = new Family();
      List<MultimediaReference> list0 = family0.getMultimedia(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Family family0 = new Family();
      List<LdsSpouseSealing> list0 = family0.getLdsSpouseSealings(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Family family0 = new Family();
      List<FamilyEvent> list0 = family0.getEvents(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Family family0 = new Family();
      List<AbstractCitation> list0 = family0.getCitations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Family family0 = new Family();
      List<IndividualReference> list0 = family0.getChildren(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      String string0 = family0.toString();
      assertEquals("Family [children=[], citations=[], events=[], ldsSpouseSealings=[], multimedia=[], noteStructures=[], submitters=[], userReferences=[], customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Family family0 = new Family();
      family0.setXref("<`zVUhCP,S");
      String string0 = family0.toString();
      assertEquals("Family [xref=<`zVUhCP,S, ]", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Family family0 = new Family();
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family0.setWife(individualReference0);
      String string0 = family0.toString();
      assertEquals("Family [wife=IndividualReference [individual=Unknown name, ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice("");
      String string0 = family0.toString();
      assertEquals("Family [restrictionNotice=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber("");
      String string0 = family0.toString();
      assertEquals("Family [recFileNumber=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren("*%PPf<j'lo");
      String string0 = family0.toString();
      assertEquals("Family [numChildren=*%PPf<j'lo, ]", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = new IndividualReference();
      family0.setHusband(individualReference0);
      String string0 = family0.toString();
      assertEquals("Family [husband=IndividualReference [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Family family0 = new Family();
      List<FamilyEvent> list0 = family0.getEvents(true);
      assertNotNull(list0);
      
      String string0 = family0.toString();
      assertEquals("Family [events=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      String string0 = family0.toString();
      assertEquals("Family [changeDate=ChangeDate [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId("xref=");
      String string0 = family0.toString();
      assertEquals("Family [automatedRecordId=xref=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice((String) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber((String) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren((String) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId((String) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice("H0 HSX?usjj6~k|Wbr6");
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Family family0 = new Family();
      family0.setXref("3ge?J");
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Family family0 = new Family();
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family0.setWife(individualReference0);
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber("]TA~K]");
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren("Z\";4yem'=!r{Jm[>y");
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = new IndividualReference();
      family0.setHusband(individualReference0);
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId("xref=");
      family0.hashCode();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Family family0 = new Family();
      List<UserReference> list0 = family0.getUserReferences(true);
      List<UserReference> list1 = family0.getUserReferences(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Family family0 = new Family();
      List<SubmitterReference> list0 = family0.getSubmitters(true);
      List<SubmitterReference> list1 = family0.getSubmitters(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      List<MultimediaReference> list0 = family0.getMultimedia(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Family family0 = new Family();
      List<LdsSpouseSealing> list0 = family0.getLdsSpouseSealings(true);
      List<LdsSpouseSealing> list1 = family0.getLdsSpouseSealings(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Family family0 = new Family();
      List<FamilyEvent> list0 = family0.getEvents(true);
      List<FamilyEvent> list1 = family0.getEvents(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Family family0 = new Family();
      List<AbstractCitation> list0 = family0.getCitations(true);
      List<AbstractCitation> list1 = family0.getCitations(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      List<IndividualReference> list0 = family0.getChildren(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice("customFacts=");
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setRestrictionNotice("\"1X,fp[En{\"3Cq3vBA{");
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family0.setRestrictionNotice("eDVs;lsbn+_q>b3-");
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setXref("");
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setXref("sF.QcT:<l ");
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      IndividualReference individualReference0 = new IndividualReference();
      family0.setWife(individualReference0);
      assertFalse(family0.equals((Object)family1));
      
      family1.setWife(individualReference0);
      boolean boolean0 = family0.equals(family1);
      assertTrue(family0.equals((Object)family1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      IndividualReference individualReference0 = new IndividualReference();
      family1.setWife(individualReference0);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      IndividualReference individualReference0 = new IndividualReference();
      family0.setWife(individualReference0);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getUserReferences(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0, true);
      assertTrue(family1.equals((Object)family0));
      
      family1.getUserReferences(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family();
      assertTrue(family1.equals((Object)family0));
      
      family1.getSubmitters(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Family family0 = new Family();
      List<SubmitterReference> list0 = family0.getSubmitters(true);
      assertNotNull(list0);
      
      Family family1 = new Family();
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family();
      assertTrue(family1.equals((Object)family0));
      
      family1.setRecFileNumber("#-~&U7");
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setRecFileNumber("YBa`z");
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber("l5NLjX<`zX_$kI");
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setNumChildren("xref=");
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.setNumChildren("Number of Marriages");
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family();
      assertTrue(family1.equals((Object)family0));
      
      family1.getMultimedia(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getMultimedia(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getLdsSpouseSealings(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getLdsSpouseSealings(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family();
      assertTrue(family1.equals((Object)family0));
      
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family0.setHusband(individualReference0);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family1.setHusband(individualReference0);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Family family0 = new Family();
      Individual individual0 = new Individual();
      IndividualReference individualReference0 = new IndividualReference(individual0);
      family0.setHusband(individualReference0);
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getEvents(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getEvents(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getCitations(true);
      boolean boolean0 = family1.equals(family0);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getCitations(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family0.getChildren(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      assertTrue(family1.equals((Object)family0));
      
      family1.getChildren(true);
      boolean boolean0 = family0.equals(family1);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      Family family1 = new Family();
      Family family2 = new Family(family1);
      boolean boolean0 = family0.equals(family2);
      assertFalse(boolean0);
      assertTrue(family2.equals((Object)family1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      Family family1 = new Family();
      boolean boolean0 = family1.equals(family0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0);
      family0.setAutomatedRecordId("sF.QcT:<l ");
      boolean boolean0 = family0.equals(family1);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId("xref=");
      Family family1 = new Family(family0, true);
      family0.setAutomatedRecordId((StringWithCustomFacts) null);
      boolean boolean0 = family0.equals(family1);
      assertFalse(family1.equals((Object)family0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Family family0 = new Family();
      family0.setAutomatedRecordId("recIdNumber=");
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Family family0 = new Family();
      boolean boolean0 = family0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Family family0 = new Family();
      boolean boolean0 = family0.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren("addr2=");
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Family family0 = new Family();
      Family family1 = new Family(family0);
      boolean boolean0 = family0.equals(family1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Family family0 = new Family();
      Family family1 = new Family(family0, false);
      assertNull(family1.getXref());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = new ChangeDate();
      family0.setChangeDate(changeDate0);
      Family family1 = new Family(family0);
      boolean boolean0 = family0.equals(family1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Family family0 = new Family();
      family0.setRestrictionNotice((StringWithCustomFacts) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Family family0 = new Family();
      List<AbstractCitation> list0 = family0.getCitations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = new IndividualReference();
      family0.setWife(individualReference0);
      Family family1 = null;
      try {
        family1 = new Family(family0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Family family0 = new Family();
      List<MultimediaReference> list0 = family0.getMultimedia();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Family family0 = new Family();
      List<LdsSpouseSealing> list0 = family0.getLdsSpouseSealings();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Family family0 = new Family();
      StringWithCustomFacts stringWithCustomFacts0 = family0.getNumChildren();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Family family0 = new Family();
      family0.setNumChildren((StringWithCustomFacts) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Family family0 = new Family();
      ChangeDate changeDate0 = family0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = family0.getWife();
      assertNull(individualReference0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Family family0 = new Family();
      StringWithCustomFacts stringWithCustomFacts0 = family0.getRestrictionNotice();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Family family0 = new Family();
      List<IndividualReference> list0 = family0.getChildren();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Family family0 = new Family();
      String string0 = family0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Family family0 = new Family();
      List<UserReference> list0 = family0.getUserReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Family family0 = new Family();
      List<FamilyEvent> list0 = family0.getEvents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Family family0 = new Family();
      family0.setRecFileNumber((StringWithCustomFacts) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Family family0 = new Family();
      family0.setXref("bD]MG");
      Family family1 = new Family(family0);
      boolean boolean0 = family1.equals(family0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Family family0 = new Family();
      StringWithCustomFacts stringWithCustomFacts0 = family0.getRecFileNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Family family0 = new Family();
      StringWithCustomFacts stringWithCustomFacts0 = family0.getAutomatedRecordId();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Family family0 = new Family();
      List<SubmitterReference> list0 = family0.getSubmitters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Family family0 = new Family();
      IndividualReference individualReference0 = family0.getHusband();
      assertNull(individualReference0);
  }
}
