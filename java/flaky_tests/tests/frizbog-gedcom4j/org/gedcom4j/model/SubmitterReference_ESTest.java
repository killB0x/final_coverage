/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:24:09 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.Submitter;
import org.gedcom4j.model.SubmitterReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubmitterReference_ESTest extends SubmitterReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      List<CustomFact> list0 = submitterReference0.getCustomFactsWithTag("customFacts=");
      submitterReference0.customFacts = list0;
      submitterReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      Submitter submitter0 = new Submitter("JZ)(?N", (String) null);
      submitterReference0.setSubmitter(submitter0);
      Submitter submitter1 = submitterReference0.getSubmitter();
      assertSame(submitter1, submitter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubmitterReference submitterReference0 = null;
      try {
        submitterReference0 = new SubmitterReference((SubmitterReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      submitterReference0.getCustomFacts(true);
      String string0 = submitterReference0.toString();
      assertEquals("SubmitterReference [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      Submitter submitter0 = new Submitter("SubmitterReference []", ".ryveY");
      submitterReference0.setSubmitter(submitter0);
      String string0 = submitterReference0.toString();
      assertEquals("SubmitterReference [submitter=Submitter [name=.ryveY, xref=SubmitterReference [], ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      SubmitterReference submitterReference1 = new SubmitterReference(submitterReference0);
      assertTrue(submitterReference1.equals((Object)submitterReference0));
      
      Submitter submitter0 = new Submitter("JZ)(?N", (String) null);
      submitterReference0.submitter = submitter0;
      boolean boolean0 = submitterReference0.equals(submitterReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      SubmitterReference submitterReference1 = new SubmitterReference(submitterReference0);
      assertTrue(submitterReference1.equals((Object)submitterReference0));
      
      Submitter submitter0 = new Submitter("SubmitterReference []", ".ryveY");
      submitterReference1.setSubmitter(submitter0);
      boolean boolean0 = submitterReference0.equals(submitterReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      Object object0 = new Object();
      boolean boolean0 = submitterReference0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      SubmitterReference submitterReference0 = new SubmitterReference(submitter0);
      boolean boolean0 = submitterReference0.equals(submitterReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      SubmitterReference submitterReference1 = new SubmitterReference(submitterReference0);
      boolean boolean0 = submitterReference0.equals(submitterReference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Submitter submitter0 = new Submitter();
      SubmitterReference submitterReference0 = new SubmitterReference(submitter0);
      SubmitterReference submitterReference1 = new SubmitterReference(submitterReference0);
      boolean boolean0 = submitterReference1.equals(submitterReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      Submitter submitter0 = new Submitter("SubmitterReference []", ".ryveY");
      submitterReference0.setSubmitter(submitter0);
      submitterReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubmitterReference submitterReference0 = new SubmitterReference();
      Submitter submitter0 = submitterReference0.getSubmitter();
      assertNull(submitter0);
  }
}
