/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:56:16 GMT 2022
 */

package org.gedcom4j.model.thirdpartyadapters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.AbstractEvent;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.Family;
import org.gedcom4j.model.FamilyEvent;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.IndividualAttribute;
import org.gedcom4j.model.IndividualEvent;
import org.gedcom4j.model.Multimedia;
import org.gedcom4j.model.NoteStructure;
import org.gedcom4j.model.PersonalName;
import org.gedcom4j.model.Repository;
import org.gedcom4j.model.Source;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.Submitter;
import org.gedcom4j.model.enumerations.IndividualEventType;
import org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FamilyHistorianAdapter_ESTest extends FamilyHistorianAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newPlace("@0@", "# jA]MJwk'KlG2G3");
      assertEquals("@0@", customFact0.getXref());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      List<CustomFact> list0 = familyHistorianAdapter0.getWitnessReferences(individualEvent0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      List<CustomFact> list0 = familyHistorianAdapter0.getUnrelatedWitnesses(individualEvent0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      PersonalName personalName0 = new PersonalName();
      List<CustomFact> list0 = familyHistorianAdapter0.getNameUsed(personalName0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Source source0 = new Source();
      familyHistorianAdapter0.setSourceType(source0, "/#p.jKv>");
      assertNull(source0.getXref());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      PersonalName personalName0 = new PersonalName();
      familyHistorianAdapter0.setNameUsed(personalName0, "8lRreycn|]_k&_o7eMU");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.removeWitnessReferences(individualEvent0);
      assertNull(individualEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter();
      familyHistorianAdapter0.removeWebUrls(submitter0);
      assertNull(submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.removeWebUrls(repository0);
      assertNull(repository0.getXref());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      familyHistorianAdapter0.removeWebUrls(customFact0);
      assertEquals("_SHAR", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.removeWebUrls((AbstractEvent) individualEvent0);
      assertNull(individualEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.removeUnrelatedWitnesses(individualEvent0);
      assertNull(individualEvent0.getYNull());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.removePlaceRecords(gedcom0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeOrdinances(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeMission(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeMilitaryId(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeHeight(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeEmployment(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.removeEmails(repository0);
      assertNull(repository0.getXref());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      familyHistorianAdapter0.removeEmails(customFact0);
      assertEquals("_FLGS", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.removeEmails((AbstractEvent) individualEvent0);
      assertNull(individualEvent0.getYNull());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeElected(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMission("@M=PC5hf!A6`h");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addMission(individual0, customFact0);
      assertEquals(8140277678428809773L, customFact0.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryService("<sqyIJGx*");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addMilitaryService(individual0, customFact0);
      assertEquals(8140277678428809773L, customFact0.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId("listName is a ryquird argument");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addMilitaryId(individual0, customFact0);
      assertNull(customFact0.getXref());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition("^!jig9s>&=n");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addMedicalCondition(individual0, customFact0);
      assertNull(customFact0.getXref());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newHeight("data=");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addHeight(individual0, customFact0);
      assertEquals("_ATTR", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("DNA Mrkgs");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addElected(individual0, customFact0);
      assertEquals(8140277678428809773L, customFact0.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newDnaMarker("The medicalCondition argument is required.");
      Individual individual0 = new Individual();
      familyHistorianAdapter0.addDnaMarker(individual0, customFact0);
      assertEquals("_ATTR", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getOrdinances(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("_CAPT");
      assertEquals("_ATTR", customFact0.getTag());
      
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      List<CustomFact> list0 = familyHistorianAdapter0.getOrdinances(individual0);
      assertTrue(list0.contains(customFact0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getNamesake(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake((String) null);
      assertEquals("_ATTR", customFact0.getTag());
      
      familyHistorianAdapter0.addNamesake(individual0, customFact0);
      List<CustomFact> list0 = familyHistorianAdapter0.getNamesake(individual0);
      assertTrue(list0.contains(customFact0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteArea(noteStructure0, "");
      String string0 = familyHistorianAdapter0.getMultimediaNoteArea(noteStructure0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaKeys(multimedia0, "");
      String string0 = familyHistorianAdapter0.getMultimediaKeys(multimedia0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaFile(multimedia0, "ki");
      String string0 = familyHistorianAdapter0.getMultimediaFile(multimedia0);
      assertEquals("ki", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaDate(multimedia0, "|hVBvG6L");
      String string0 = familyHistorianAdapter0.getMultimediaDate(multimedia0);
      assertEquals("|hVBvG6L", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getMilitaryService(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      List<CustomFact> list0 = familyHistorianAdapter0.getMedicalCondition(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getHeight(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.setFactSetSentenceTemplate((AbstractEvent) individualEvent0, "");
      String string0 = familyHistorianAdapter0.getFactSetSentenceTemplate((AbstractEvent) individualEvent0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      List<CustomFact> list0 = familyHistorianAdapter0.getElected(individual0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getDnaMarkers(individual0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setVariantExportFormat((Gedcom) null, "The dnaMarker argument had the wrong type value; expected 'DNA Markers', found '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaNoteExclusion((NoteStructure) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaNoteArea((NoteStructure) null, "Bun]hxzu5/pkj-E]bq*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaNoteASID((NoteStructure) null, "ENGAGEMENT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaNote((Multimedia) null, "_FLAG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaKeys((Multimedia) null, "#{3dGZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaFile((Multimedia) null, "g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaDate((Multimedia) null, "h1DiJGqSWGa$`[[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setFlags((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setFamilyStatus((Family) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setFactSetSentenceTemplate((CustomFact) null, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setFactSetSentenceTemplate((AbstractEvent) null, "Cgo.M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removePlaceRecord((Gedcom) null, ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeNamesake((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeNamedLists((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeNamedList((Gedcom) null, "Ex%h1b3^fD R8T`e$6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeMilitaryService((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeMedicalCondition((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeEmails((Submitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeDnaMarkers((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.newWitnessReference((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getWebUrls((Submitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getWebUrls((Repository) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getWebUrls((CustomFact) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getWebUrls((AbstractEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getVariantExportFormat((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getUID((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getSourceType((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getRootIndividual((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getPlaceRecords((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getPlaceRecord((Gedcom) null, "Cremation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getNamedLists((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaNoteExclusion((NoteStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaNoteCaption((NoteStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaNoteArea((NoteStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaNoteASID((NoteStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaNote((Multimedia) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaKeys((Multimedia) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaFile((Multimedia) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMultimediaDate((Multimedia) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMission((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMilitaryId((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getFlags((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getFamilyStatus((Family) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getFactSetSentenceTemplate((CustomFact) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getFactSetSentenceTemplate((AbstractEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getEmployment((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getEmails((Submitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getEmails((Repository) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getEmails((CustomFact) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getEmails((AbstractEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWebUrl((Submitter) null, "+b[h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWebUrl((CustomFact) null, "GRADUATION");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamedList("The employment argument had the wrong tag value; expected _ATTR, found ");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamedList((Gedcom) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newEmployment("R(nsj2|z6-");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmployment((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmail((Submitter) null, "listName is a required argument");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmail((Repository) null, "Elected");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.setVariantExportFormat(gedcom0, "jtFjvNkim3Cyc]7$[3S");
      String string0 = familyHistorianAdapter0.getVariantExportFormat(gedcom0);
      assertEquals("jtFjvNkim3Cyc]7$[3S", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setRootIndividual(gedcom0, individual0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Individual being set as root individual does not exist in the supplied gedcom
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setRootIndividual(gedcom0, (Individual) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Individual being set as root individual is a required argument
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setRootIndividual((Gedcom) null, individual0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.EMIGRATION;
      individualEvent0.setType(individualEventType0);
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.setOtherPlaceName(individualEvent0, "Employment");
      assertNull(individualEvent0.getYNull());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setOtherPlaceName(individualEvent0, "Employment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Other place names are only supported on Immigration and Emigration event types; null was supplied
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setOtherPlaceName((IndividualEvent) null, "Medical Condition");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // immigrationOrEmigrationEvent is a required argument
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteArea(noteStructure0, (String) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaNote(multimedia0, "WaB$0");
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaNote(multimedia0, (String) null);
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaKeys(multimedia0, (String) null);
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaFile(multimedia0, (String) null);
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaDate(multimedia0, (String) null);
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newDnaMarker("_NOTE");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setFlags(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // flags custom fact did not have the expected tag type of _FLGS - found _ATTR
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.setFlags(individual0, (CustomFact) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Family family0 = new Family();
      familyHistorianAdapter0.setFamilyStatus(family0, "Ocwupatiov");
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Family family0 = new Family();
      familyHistorianAdapter0.setFamilyStatus(family0, (String) null);
      assertNull(family0.getXref());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      familyHistorianAdapter0.setFactSetSentenceTemplate(customFact0, "zx6R~ZfP6Wl\"9S");
      assertEquals("_FLGS", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId("Height");
      familyHistorianAdapter0.setFactSetSentenceTemplate(customFact0, (String) null);
      assertEquals("_ATTR", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      FamilyEvent familyEvent0 = new FamilyEvent();
      familyHistorianAdapter0.setFactSetSentenceTemplate((AbstractEvent) familyEvent0, (String) null);
      assertNull(familyEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setEditingEnabled((CustomFact) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namedList supplied is not a named list
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      boolean boolean0 = familyHistorianAdapter0.removePlaceRecord(gedcom0, "_Hgpr7fO_hYo/(S.[W[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.setDescriptionForCustomTag(gedcom0, "t+t;}`@WuzF8NAh=0i", "t+t;}`@WuzF8NAh=0i");
      boolean boolean0 = familyHistorianAdapter0.removePlaceRecord(gedcom0, "t+t;}`@WuzF8NAh=0i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.setUID(gedcom0, "g");
      int int0 = familyHistorianAdapter0.removeNamedList(gedcom0, "g");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.setUID(gedcom0, "RETI");
      int int0 = familyHistorianAdapter0.removeNamedList(gedcom0, "jq`d-LU\"T&#gazJ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeNamedList(gedcom0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // listName is a required argument
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      int int0 = familyHistorianAdapter0.removeNamedList(gedcom0, "jq`d-LU\"T&#gazJ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.newPlace("@0@", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // placeName is required and must not be empty
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.newPlace("@0@", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // placeName is required and must not be empty
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.newPlace("Au", "Au");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // xref does not consist of letters and numbers between @-signs
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.newPlace((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // xref is required
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamedList("+DIEmDH'RbH|-/=s$");
      familyHistorianAdapter0.setEditingEnabled(customFact0, false);
      boolean boolean0 = familyHistorianAdapter0.isEditingEnabled(customFact0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamedList("![FD=`R");
      familyHistorianAdapter0.setEditingEnabled(customFact0, true);
      boolean boolean0 = familyHistorianAdapter0.isEditingEnabled(customFact0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.isEditingEnabled(customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namedList supplied is not a named list
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter();
      familyHistorianAdapter0.addWebUrl(submitter0, "v/U");
      List<String> list0 = familyHistorianAdapter0.getWebUrls(submitter0);
      assertTrue(list0.contains("v/U"));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter("v/U", "_SHAN");
      familyHistorianAdapter0.addWebUrl(submitter0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getWebUrls(submitter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.addWebUrl(repository0, "tiFE5hQy#;(:>$");
      List<String> list0 = familyHistorianAdapter0.getWebUrls(repository0);
      assertTrue(list0.contains("tiFE5hQy#;(:>$"));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.addWebUrl(repository0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getWebUrls(repository0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter();
      CustomFact customFact0 = familyHistorianAdapter0.addWebUrl(submitter0, "variation=");
      CustomFact customFact1 = familyHistorianAdapter0.addWebUrl(customFact0, "variation=");
      List<String> list0 = familyHistorianAdapter0.getWebUrls(customFact0);
      assertTrue(list0.contains("variation="));
      assertNotSame(customFact0, customFact1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.addWebUrl((AbstractEvent) individualEvent0, "_UED");
      List<String> list0 = familyHistorianAdapter0.getWebUrls((AbstractEvent) individualEvent0);
      assertTrue(list0.contains("_UED"));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.addWebUrl((AbstractEvent) individualEvent0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getWebUrls((AbstractEvent) individualEvent0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      String string0 = familyHistorianAdapter0.getVariantExportFormat(gedcom0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.setUID(gedcom0, "&\"P");
      String string0 = familyHistorianAdapter0.getUID(gedcom0);
      assertEquals("&\"P", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      String string0 = familyHistorianAdapter0.getUID(gedcom0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Source source0 = new Source();
      String string0 = familyHistorianAdapter0.getSourceType(source0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      Individual individual0 = familyHistorianAdapter0.getRootIndividual(gedcom0);
      assertNull(individual0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      CustomFact customFact0 = familyHistorianAdapter0.getPlaceRecord(gedcom0, "~^N0)odZyqJ");
      assertNull(customFact0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.IMMIGRATION;
      individualEvent0.setType(individualEventType0);
      familyHistorianAdapter0.setOtherPlaceName(individualEvent0, "Employment");
      String string0 = familyHistorianAdapter0.getOtherPlaceName(individualEvent0);
      assertEquals("Employment", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IndividualEvent individualEvent0 = new IndividualEvent();
      IndividualEventType individualEventType0 = IndividualEventType.EMIGRATION;
      individualEvent0.setType(individualEventType0);
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      String string0 = familyHistorianAdapter0.getOtherPlaceName(individualEvent0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getOtherPlaceName((IndividualEvent) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // immigrationOrEmigrationEvent is a required argument
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getOtherPlaceName(individualEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Other place names are only supported on Immigration and Emigration event types; null was supplied
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      List<CustomFact> list0 = familyHistorianAdapter0.getNamedList(gedcom0, "~-,q<uL,pikd");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getNamedList(gedcom0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // listName is a required argument
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getNamedList((Gedcom) null, "CHRISTENING");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.setMultimediaNoteExclusion(noteStructure0, "productName=");
      String string0 = familyHistorianAdapter0.getMultimediaNoteExclusion(noteStructure0);
      assertEquals("productName=", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      String string0 = familyHistorianAdapter0.getMultimediaNoteExclusion(noteStructure0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteCaption(noteStructure0, "osH,CswB@Z3p");
      String string0 = familyHistorianAdapter0.getMultimediaNoteCaption(noteStructure0);
      assertEquals("osH,CswB@Z3p", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      String string0 = familyHistorianAdapter0.getMultimediaNoteCaption(noteStructure0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      String string0 = familyHistorianAdapter0.getMultimediaNoteASID(noteStructure0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteArea(noteStructure0, "sh}``_vg^,74");
      String string0 = familyHistorianAdapter0.getMultimediaNoteArea(noteStructure0);
      assertEquals("sh}``_vg^,74", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      String string0 = familyHistorianAdapter0.getMultimediaNoteArea(noteStructure0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      String string0 = familyHistorianAdapter0.getMultimediaNote(multimedia0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaKeys(multimedia0, "/u:5ZN(w{fk+");
      String string0 = familyHistorianAdapter0.getMultimediaKeys(multimedia0);
      assertEquals("/u:5ZN(w{fk+", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      String string0 = familyHistorianAdapter0.getMultimediaKeys(multimedia0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaFile(multimedia0, "");
      String string0 = familyHistorianAdapter0.getMultimediaFile(multimedia0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      String string0 = familyHistorianAdapter0.getMultimediaFile(multimedia0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      familyHistorianAdapter0.setMultimediaDate(multimedia0, "");
      String string0 = familyHistorianAdapter0.getMultimediaDate(multimedia0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Multimedia multimedia0 = new Multimedia();
      String string0 = familyHistorianAdapter0.getMultimediaDate(multimedia0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.getFlags(individual0);
      assertNull(customFact0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.setFlags(individual0, customFact0);
      CustomFact customFact1 = familyHistorianAdapter0.getFlags(individual0);
      assertEquals(8140277678428809773L, customFact1.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Family family0 = new Family();
      String string0 = familyHistorianAdapter0.getFamilyStatus(family0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake("EVENT");
      CustomFact customFact1 = familyHistorianAdapter0.addWebUrl(customFact0, "EVENT");
      assertEquals("_WEB", customFact1.getTag());
      
      String string0 = familyHistorianAdapter0.getFactSetSentenceTemplate(customFact0);
      assertEquals("_ATTR", customFact0.getTag());
      assertNull(string0);
      assertNotSame(customFact0, customFact1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      familyHistorianAdapter0.getFactSetSentenceTemplate(customFact0);
      assertEquals("_FLGS", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      familyHistorianAdapter0.setFactSetSentenceTemplate((AbstractEvent) individualAttribute0, "Cgo.M");
      String string0 = familyHistorianAdapter0.getFactSetSentenceTemplate((AbstractEvent) individualAttribute0);
      assertEquals("Cgo.M", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.addWebUrl((AbstractEvent) individualEvent0, "");
      String string0 = familyHistorianAdapter0.getFactSetSentenceTemplate((AbstractEvent) individualEvent0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualAttribute individualAttribute0 = new IndividualAttribute();
      String string0 = familyHistorianAdapter0.getFactSetSentenceTemplate((AbstractEvent) individualAttribute0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter("xVjr`4l[", "xVjr`4l[");
      familyHistorianAdapter0.addEmail(submitter0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getEmails(submitter0);
      assertFalse(list0.contains("xVjr`4l["));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter("j-^hz&\"", "j-^hz&\"");
      familyHistorianAdapter0.addEmail(submitter0, "The employment argument is required.");
      List<String> list0 = familyHistorianAdapter0.getEmails(submitter0);
      assertTrue(list0.contains("The employment argument is required."));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.addEmail(repository0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getEmails(repository0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      CustomFact customFact1 = familyHistorianAdapter0.addEmail(customFact0, "JC4kW+:-xVm2V~2uJ");
      List<String> list0 = familyHistorianAdapter0.getEmails(customFact0);
      assertNotSame(customFact0, customFact1);
      assertTrue(list0.contains("JC4kW+:-xVm2V~2uJ"));
      assertEquals("_FLGS", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("<B1F#$yy>n%");
      CustomFact customFact1 = familyHistorianAdapter0.addEmail(customFact0, (String) null);
      assertEquals("_EMAIL", customFact1.getTag());
      
      familyHistorianAdapter0.getEmails(customFact0);
      assertEquals("_ATTR", customFact0.getTag());
      assertNotSame(customFact0, customFact1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.addEmail((AbstractEvent) individualEvent0, (String) null);
      List<String> list0 = familyHistorianAdapter0.getEmails((AbstractEvent) individualEvent0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      familyHistorianAdapter0.addEmail((AbstractEvent) individualEvent0, "y)$T{:)'+Fn,7");
      List<String> list0 = familyHistorianAdapter0.getEmails((AbstractEvent) individualEvent0);
      assertTrue(list0.contains("y)$T{:)'+Fn,7"));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      individual0.setXref("g");
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      Gedcom gedcom0 = new Gedcom();
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference(gedcom0, individualEvent0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Individual referenced in the witnessReference value (xref=g) could not be found in the gedcom supplied
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      individual0.setXref("");
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      Gedcom gedcom0 = new Gedcom();
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference(gedcom0, individualEvent0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The witnessReference value supplied does not contain a cross-reference to an individual
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      individual0.setXref("F@@D{r8=9VJ");
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference((Gedcom) null, individualEvent0, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      IndividualEvent individualEvent0 = new IndividualEvent();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference(gedcom0, individualEvent0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Custom fact supplied in witnessReference does not have the correct tag. Expected _SHAR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference(gedcom0, individualEvent0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unrelatedWitness cannot be null
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWitnessReference((Gedcom) null, individualEvent0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The witnessReference value supplied does not contain a cross-reference to an individual
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("The mission argument is required.");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addUnrelatedWitness(individualEvent0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Custom fact supplied in unrelatedWitness does not have the correct tag. Expected _SHAN, found _ATTR
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addUnrelatedWitness(individualEvent0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unrelatedWitness cannot be null
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      IndividualEvent individualEvent0 = new IndividualEvent();
      CustomFact customFact0 = familyHistorianAdapter0.newUnrelatedWitness("continuedObject=");
      familyHistorianAdapter0.addUnrelatedWitness(individualEvent0, customFact0);
      assertNull(individualEvent0.getYNull());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addPlaceRecord((Gedcom) null, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // place did not have the required custom tag; expected _PLAC, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addPlaceRecord(gedcom0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // place must be non-null
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newPlace("@0@", "@0@");
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.addPlaceRecord(gedcom0, customFact0);
      assertEquals(8140277678428809773L, customFact0.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake((String) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addOrdinance(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ordinance argument had the wrong type value; expected 'Ordinance', found 'Namesake'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake((String) null);
      customFact0.setType((StringWithCustomFacts) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addOrdinance(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ordinance argument had the wrong type value; expected 'Ordinance', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addOrdinance(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ordinance argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addOrdinance((Individual) null, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The ordinance argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition("");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamesake(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The namesake argument had the wrong type value; expected 'Namesake', found 'Medical Condition'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamesake(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The namesake argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamesake(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The namesake argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newHeight("Q,%e$");
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamedList(gedcom0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Custom fact supplied in namedList does not have the correct tag. Expected _LIST, found _ATTR
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamedList(gedcom0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namedList cannot be null
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      CustomFact customFact0 = familyHistorianAdapter0.newNamedList("bW(#U{>F7-");
      familyHistorianAdapter0.addNamedList(gedcom0, customFact0);
      assertEquals(8140277678428809773L, customFact0.getSerialversionuid());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId("SOCIAL_SECRRITY_NUMBER");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMission(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The mission argument had the wrong type value; expected 'Mission (LDS)', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMission(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The mission argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMission(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The mission argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId("UTF_8");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMission((Individual) null, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The mission argument had the wrong type value; expected 'Mission (LDS)', found 'Military ID'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition("DNA Markers");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryService(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryService argument had the wrong type value; expected 'Military Service', found 'Medical Condition'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition("namedList cannot be null");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryService(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryService argument had the wrong type value; expected 'Military Service', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryService(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryService argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryService(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryService argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryService((String) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryService((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId((String) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryId((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newDnaMarker("]YS^;d/k#");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryId(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryId argument had the wrong type value; expected 'Military ID', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newDnaMarker("j-^hz&\"");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryId(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryId argument had the wrong type value; expected 'Military ID', found 'DNA Markers'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryId(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryId argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter("j-^hz&\"", "j-^hz&\"");
      CustomFact customFact0 = familyHistorianAdapter0.addEmail(submitter0, "The employment argument is required.");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMilitaryId(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The militaryId argument had the wrong tag value; expected _ATTR, found _EMAIL
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition(";DYl'HMt");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMedicalCondition((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryService("The employment argument had the wrong tag value; expected _ATTR, found ");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMedicalCondition(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The medicalCondition argument had the wrong type value; expected 'Medical Condition', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMedicalCondition(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The medicalCondition argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMedicalCondition(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The medicalCondition argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("qUcG~jt]6Pmon2EvAl");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addHeight(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The height argument had the wrong type value; expected 'Height', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addHeight(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The height argument had the wrong tag value; expected _ATTR, found _SHAR
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addHeight(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The height argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("qUcG~jt]6Pmon2EvAl");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addHeight(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The height argument had the wrong type value; expected 'Height', found 'Elected'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newElected(",$$u0w0V*%7");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmployment(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The employment argument had the wrong type value; expected 'Employment', found 'Elected'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newEmployment("_");
      customFact0.setType((StringWithCustomFacts) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmployment(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The employment argument had the wrong type value; expected 'Employment', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmployment(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The employment argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newEmployment("V_P;rc");
      familyHistorianAdapter0.addEmployment(individual0, customFact0);
      assertEquals("_ATTR", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMedicalCondition("");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addElected(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The elected argument had the wrong type value; expected 'Elected', found 'Medical Condition'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake("QE>;i=@!Jn6[@62W\"u");
      customFact0.setType((StringWithCustomFacts) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addElected((Individual) null, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The elected argument had the wrong type value; expected 'Elected', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addElected((Individual) null, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The elected argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addElected(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The elected argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId((String) null);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addDnaMarker((Individual) null, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dnaMarker argument had the wrong type value; expected 'DNA Markers', found 'Military ID'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId((String) null);
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addDnaMarker(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dnaMarker argument had the wrong type value; expected 'DNA Markers', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addDnaMarker(individual0, (CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dnaMarker argument is required.
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryId("copyrightData=");
      customFact0.setType((StringWithCustomFacts) null);
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamesake(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The namesake argument had the wrong type value; expected 'Namesake', found 'null'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter("Employment", "N9BU`S#");
      familyHistorianAdapter0.removeEmails(submitter0);
      assertEquals("Employment", submitter0.getXref());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newElected("QE>;i=@!Jn6[@62W\"u");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addElected((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getMission(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("qGs");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addOrdinance((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMilitaryService("The employment argument had the wrong tag value; expected _ATTR, found ");
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMedicalCondition(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The medicalCondition argument had the wrong type value; expected 'Medical Condition', found 'Military Service'
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeHeight((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMilitaryService((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      List<CustomFact> list0 = familyHistorianAdapter0.getMilitaryId(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getHeight((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWebUrl((Repository) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getOrdinances((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeEmails((Repository) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setNameUsed((PersonalName) null, "wife=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeElected((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      List<CustomFact> list0 = familyHistorianAdapter0.getPlaceRecords(gedcom0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Repository repository0 = new Repository();
      familyHistorianAdapter0.addEmail(repository0, "Emigration");
      List<String> list0 = familyHistorianAdapter0.getEmails(repository0);
      assertTrue(list0.contains("Emigration"));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addWebUrl((AbstractEvent) null, "_SHAN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeWebUrls((AbstractEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeEmails((CustomFact) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeWebUrls((Repository) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newMission("UTF_8");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addMission((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmail((CustomFact) null, "QM:#Li%57<,b.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getUnrelatedWitnesses((IndividualEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeWebUrls((CustomFact) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeMedicalCondition(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removePlaceRecords((Gedcom) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getDnaMarkers((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeEmails((AbstractEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setMultimediaNoteCaption((NoteStructure) null, "7jg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeMission((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getWitnessReferences((IndividualEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getElected((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteASID(noteStructure0, "The medicalCondition argument had the wrong tag value; expected _ATTR, found ");
      String string0 = familyHistorianAdapter0.getMultimediaNoteASID(noteStructure0);
      assertEquals("The medicalCondition argument had the wrong tag value; expected _ATTR, found ", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setUID((Gedcom) null, "c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getMedicalCondition((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getEmployment(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Submitter submitter0 = new Submitter();
      CustomFact customFact0 = familyHistorianAdapter0.addWebUrl(submitter0, (String) null);
      CustomFact customFact1 = familyHistorianAdapter0.addWebUrl(customFact0, (String) null);
      familyHistorianAdapter0.getWebUrls(customFact0);
      assertNotSame(customFact0, customFact1);
      assertEquals("_WEB", customFact0.getTag());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeOrdinances((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeNamesake(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newNamesake("The militaryId argument is required.");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addNamesake((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      familyHistorianAdapter0.removeNamedLists(gedcom0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeMilitaryId((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newFlags();
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addDnaMarker(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The dnaMarker argument had the wrong tag value; expected _ATTR, found _FLGS
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeWitnessReferences((IndividualEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newWitnessReference(individual0);
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmployment(individual0, customFact0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The employment argument had the wrong tag value; expected _ATTR, found _SHAR
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeUnrelatedWitnesses((IndividualEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.removeMilitaryService(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeEmployment((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyHistorianAdapter0.removeDnaMarkers(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.setSourceType((Source) null, "|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      List<CustomFact> list0 = familyHistorianAdapter0.getNamedLists(gedcom0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getNameUsed((PersonalName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.removeWebUrls((Submitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newHeight("LINEAGE-LINKED");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addHeight((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newDnaMarker("Individual referenced in the witnessReference value (xref=");
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addDnaMarker((Individual) null, customFact0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.getNamesake((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.addEmail((AbstractEvent) null, "|E5wN?PQCYFy V>{#*}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }
}
