/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:22:57 GMT 2022
 */

package org.gedcom4j.model.thirdpartyadapters;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.AbstractElement;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.HasCustomFacts;
import org.gedcom4j.model.Header;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.Multimedia;
import org.gedcom4j.model.NoteStructure;
import org.gedcom4j.model.Source;
import org.gedcom4j.model.SubmitterReference;
import org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter;
import org.gedcom4j.model.thirdpartyadapters.FamilyTreeMaker3Adapter;
import org.gedcom4j.model.thirdpartyadapters.LegacyFamilyTree8Adapter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractThirdPartyAdapter_ESTest extends AbstractThirdPartyAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "Multimedia [", "{T)]6P#");
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("H>,");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      familyHistorianAdapter0.removeOrdinances(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "_CIRC", ">-`l=;o`");
      List<CustomFact> list0 = familyTreeMaker3Adapter0.getCircumcision(individual0);
      familyTreeMaker3Adapter0.setElected(individual0, list0);
      familyHistorianAdapter0.removeHeight(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      Multimedia multimedia0 = new Multimedia();
      legacyFamilyTree8Adapter0.setDescriptionForCustomTag(multimedia0, "1e`l=;o`", "1e`l=;o`");
      legacyFamilyTree8Adapter0.setMultimediaScrapbookTag(multimedia0, "|");
      legacyFamilyTree8Adapter0.setMultimediaScrapbookTag(multimedia0, "|");
      assertNull(multimedia0.getXref());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      CustomFact customFact0 = new CustomFact("Z29<Ov (vh,H");
      boolean boolean0 = familyTreeMaker3Adapter0.isNonNullAndHasRequiredTag(customFact0, "Z29<Ov (vh,H");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      String string0 = familyHistorianAdapter0.getDescriptionForCustomTag(individual0, "B/Y]fKu'8$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Header header0 = new Header();
      int int0 = familyHistorianAdapter0.clearCustomTagsOfType(header0, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter");
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(customFact0, "1~4", "1~4");
      List<CustomFact> list0 = customFact0.getCustomFacts(false);
      familyTreeMaker3Adapter0.setNamesake(individual0, list0);
      int int0 = familyTreeMaker3Adapter0.clearCustomTagsOfType(individual0, "1~4");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      // Undeclared exception!
      try { 
        familyTreeMaker3Adapter0.setDescriptionForCustomTag((HasCustomFacts) null, "_SEPR", "_SEPR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      // Undeclared exception!
      try { 
        legacyFamilyTree8Adapter0.replaceAllCustomFactsOfTypeWithNewFacts((HasCustomFacts) null, "Marriage settlement", (List<CustomFact>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      CustomFact customFact0 = familyTreeMaker3Adapter0.newEmploymentCustomFact();
      // Undeclared exception!
      try { 
        legacyFamilyTree8Adapter0.isNonNullAndHasRequiredTag(customFact0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      // Undeclared exception!
      try { 
        legacyFamilyTree8Adapter0.getDescriptionForCustomTag((HasCustomFacts) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      // Undeclared exception!
      try { 
        legacyFamilyTree8Adapter0.getCustomTagsWithTagAndType((AbstractElement) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      // Undeclared exception!
      try { 
        legacyFamilyTree8Adapter0.clearCustomTagsOfTypeAndSubType((AbstractElement) null, "_LINK", "_LINK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.clearCustomTagsOfType((HasCustomFacts) null, "HUSB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.AbstractThirdPartyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      NoteStructure noteStructure0 = new NoteStructure();
      familyHistorianAdapter0.setMultimediaNoteCaption(noteStructure0, "");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LegacyFamilyTree8Adapter legacyFamilyTree8Adapter0 = new LegacyFamilyTree8Adapter();
      Source source0 = new Source();
      legacyFamilyTree8Adapter0.setSourceInItalicsFlag(source0, (String) null);
      assertNull(source0.getXref());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      List<CustomFact> list0 = familyTreeMaker3Adapter0.getCircumcision(individual0);
      familyTreeMaker3Adapter0.setElected(individual0, list0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Gedcom gedcom0 = new Gedcom();
      Header header0 = gedcom0.getHeader();
      SubmitterReference submitterReference0 = header0.getSubmitterReference();
      familyHistorianAdapter0.replaceAllCustomFactsOfTypeWithNewFacts(submitterReference0, (String) null, (List<CustomFact>) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      // Undeclared exception!
      try { 
        familyHistorianAdapter0.isEditingEnabled((CustomFact) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // namedList supplied is not a named list
         //
         verifyException("org.gedcom4j.model.thirdpartyadapters.FamilyHistorianAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "1e`l=;o`", "1e`l=;o`");
      String string0 = familyHistorianAdapter0.getDescriptionForCustomTag(individual0, "1e`l=;o`");
      assertEquals("1e`l=;o`", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("B/Y]fKu'8$");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      List<CustomFact> list0 = familyHistorianAdapter0.getOrdinances(individual0);
      assertTrue(list0.contains(customFact0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("'9t7Us;^");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      customFact0.setType((String) null);
      List<CustomFact> list0 = familyHistorianAdapter0.getNamesake(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "_CIRC", "_CIRC");
      List<CustomFact> list0 = familyTreeMaker3Adapter0.getCustomTagsWithTagAndType(individual0, "_CIRC", "_CIRC");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("H>,");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      List<CustomFact> list0 = familyHistorianAdapter0.getNamesake(individual0);
      assertFalse(list0.contains(customFact0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      List<CustomFact> list0 = familyHistorianAdapter0.getEmployment(individual0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "Multimedia [", "{T)]6P#");
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      List<CustomFact> list0 = familyHistorianAdapter0.getNamesake(individual0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("B/Y]fKu'8$");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      familyHistorianAdapter0.removeNamesake(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      CustomFact customFact0 = familyHistorianAdapter0.newOrdinance("'9t7Us;^");
      familyHistorianAdapter0.addOrdinance(individual0, customFact0);
      customFact0.setType((String) null);
      familyHistorianAdapter0.removeNamesake(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Individual individual0 = new Individual();
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      familyTreeMaker3Adapter0.setDescriptionForCustomTag(individual0, "_DEST", "_DEST");
      int int0 = familyHistorianAdapter0.clearCustomTagsOfTypeAndSubType(individual0, "_DEST", ":tFXr1M");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FamilyHistorianAdapter familyHistorianAdapter0 = new FamilyHistorianAdapter();
      Individual individual0 = new Individual();
      familyHistorianAdapter0.removeOrdinances(individual0);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FamilyTreeMaker3Adapter familyTreeMaker3Adapter0 = new FamilyTreeMaker3Adapter();
      CustomFact customFact0 = familyTreeMaker3Adapter0.newWeightCustomFact();
      boolean boolean0 = familyTreeMaker3Adapter0.isNonNullAndHasRequiredTag(customFact0, "?(7xJ");
      assertFalse(boolean0);
  }
}
