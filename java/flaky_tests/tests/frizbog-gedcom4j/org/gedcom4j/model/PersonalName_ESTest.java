/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:20:58 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.PersonalName;
import org.gedcom4j.model.PersonalNameVariation;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PersonalName_ESTest extends PersonalName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("");
      String string0 = personalName0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType(" L59lSk}y^H0C");
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getType();
      assertEquals(" L59lSk}y^H0C", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSurnamePrefix("org.gedcom4j.model.CitationData");
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSurnamePrefix();
      assertEquals("org.gedcom4j.model.CitationData", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getRomanized(true);
      List<PersonalNameVariation> list1 = personalName0.getRomanized();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setPrefix(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = personalName0.getPrefix();
      assertNull(stringWithCustomFacts1.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.getPhonetic(true);
      List<PersonalNameVariation> list0 = personalName0.getPhonetic();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setNickname("mJn1lJ0W/'ZJFA6V");
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getNickname();
      assertEquals("mJn1lJ0W/'ZJFA6V", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setGivenName("\"");
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getGivenName();
      assertEquals("\"", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.getCitations(true);
      List<AbstractCitation> list0 = personalName0.getCitations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("$ sxfFZP-ZH0");
      String string0 = personalName0.getBasic();
      assertEquals("$ sxfFZP-ZH0", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("");
      String string0 = personalName0.getBasic();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PersonalName personalName0 = null;
      try {
        personalName0 = new PersonalName((PersonalName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getRomanized(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getPhonetic(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<AbstractCitation> list0 = personalName0.getCitations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setNickname(stringWithCustomFacts0);
      personalName0.setSurname(stringWithCustomFacts0);
      String string0 = personalName0.toString();
      assertNotNull(string0);
      assertEquals("null, null \"null\"", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setGivenName("");
      String string0 = personalName0.toString();
      assertNotNull(string0);
      assertEquals("null, ", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      String string0 = personalName0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType("#_)p]mNO^jQ");
      personalName0.setType("p9H@\"`_-");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSurnamePrefix("AbstractNameVariation [");
      personalName0.setSurnamePrefix("AbstractNameVariation [");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setSurname(stringWithCustomFacts0);
      personalName0.setSurname((String) null);
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      personalName0.setSuffix("org.gedcom4j.model.AbstractCitation");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setPrefix((String) null);
      personalName0.setPrefix("(3bJ=");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setNickname(">q\"ELkP&Jj?Q2`m");
      personalName0.setNickname(">q\"ELkP&Jj?Q2`m");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setGivenName("*E4GdzkwA^V|}UtW");
      personalName0.setGivenName("*E4GdzkwA^V|}UtW");
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType((String) null);
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      PersonalName personalName0 = new PersonalName();
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSurnamePrefix((String) null);
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSurname("org.gedcom4j.model.PlaceNameVariation");
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setPrefix("6}y'_7w!,u)^");
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setNickname(stringWithCustomFacts0);
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setGivenName("org.gedcom4j.model.CustomFact");
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("]");
      personalName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getRomanized(true);
      List<PersonalNameVariation> list1 = personalName0.getRomanized(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getPhonetic(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<AbstractCitation> list0 = personalName0.getCitations(true);
      List<AbstractCitation> list1 = personalName0.getCitations(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType("#_)p]mNO^jQ");
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType((String) null);
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName();
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.getPhonetic(true);
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.getPhonetic(true);
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName();
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.getRomanized(true);
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getRomanized(true);
      assertNotNull(list0);
      
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSurname("n");
      PersonalName personalName1 = new PersonalName(personalName0);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSurname();
      assertTrue(personalName0.equals((Object)personalName1));
      
      personalName1.setSurnamePrefix(stringWithCustomFacts0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setSurnamePrefix(stringWithCustomFacts0);
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      Options.setCollectionInitializationEnabled(true);
      PersonalName personalName1 = new PersonalName(personalName0);
      personalName1.setSurname(stringWithCustomFacts0);
      PersonalName personalName2 = new PersonalName(personalName1);
      boolean boolean0 = personalName1.equals(personalName2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      personalName1.setSurname(stringWithCustomFacts0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setSuffix("org.gedcom4j.model.AbstractCitation");
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setPrefix("a/-M#%iwA*C-ea9Q");
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setPrefix("\"");
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setNickname("mJn1lJ0W/'ZJFA6V");
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(personalName1.equals((Object)personalName0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setNickname(stringWithCustomFacts0);
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName0.setGivenName("");
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setGivenName("");
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(personalName1.equals((Object)personalName0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.getCitations(true);
      boolean boolean0 = personalName1.equals(personalName0);
      assertFalse(personalName1.equals((Object)personalName0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.getCitations(true);
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(personalName1.equals((Object)personalName0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("$'~kc,3k");
      PersonalName personalName1 = new PersonalName();
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      PersonalName personalName1 = new PersonalName(personalName0);
      assertTrue(personalName1.equals((Object)personalName0));
      
      personalName1.setBasic("u8#Uzg+4k2FMl=>b3");
      boolean boolean0 = personalName0.equals(personalName1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      boolean boolean0 = personalName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      boolean boolean0 = personalName0.equals(personalName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType("#_)p]mNO^jQ");
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName1.equals(personalName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setSurnamePrefix(stringWithCustomFacts0);
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setPrefix("^oe(IHV`");
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setSuffix((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setNickname(stringWithCustomFacts0);
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName1.equals(personalName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setGivenName("");
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      Options.setCollectionInitializationEnabled(true);
      PersonalName personalName1 = new PersonalName(personalName0);
      PersonalName personalName2 = new PersonalName(personalName1);
      boolean boolean0 = personalName1.equals(personalName2);
      assertTrue(boolean0);
      assertFalse(personalName2.equals((Object)personalName0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getNickname();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setType((StringWithCustomFacts) null);
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSuffix();
      personalName0.setSurname(stringWithCustomFacts0);
      assertNull(personalName0.getBasic());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getPrefix();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getGivenName();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("");
      personalName0.setSuffix(stringWithCustomFacts0);
      assertEquals("", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSurnamePrefix();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      personalName0.setGivenName(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      personalName0.setBasic("$ sxfFZP-ZH0");
      PersonalName personalName1 = new PersonalName(personalName0);
      boolean boolean0 = personalName0.equals(personalName1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getRomanized();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getSurname();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      String string0 = personalName0.getBasic();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      StringWithCustomFacts stringWithCustomFacts0 = personalName0.getType();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<PersonalNameVariation> list0 = personalName0.getPhonetic();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PersonalName personalName0 = new PersonalName();
      List<AbstractCitation> list0 = personalName0.getCitations();
      assertNull(list0);
  }
}
