/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:01:35 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.Repository;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.UserReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Repository_ESTest extends Repository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setXref("1P-");
      String string0 = repository0.getXref();
      assertEquals("1P-", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setXref("");
      String string0 = repository0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.getUserReferences(true);
      List<UserReference> list0 = repository0.getUserReferences();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      repository0.setRecIdNumber(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = repository0.getRecIdNumber();
      assertSame(stringWithCustomFacts1, stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setName("&ntk@5x");
      StringWithCustomFacts stringWithCustomFacts0 = repository0.getName();
      assertNotNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = new ChangeDate();
      repository0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = repository0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Repository repository0 = null;
      try {
        repository0 = new Repository((Repository) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Repository repository0 = new Repository();
      List<UserReference> list0 = repository0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setXref(";CjG");
      String string0 = repository0.toString();
      assertEquals("Repository [xref=;CjG, ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Repository repository0 = new Repository();
      List<UserReference> list0 = repository0.getUserReferences(true);
      assertNotNull(list0);
      
      String string0 = repository0.toString();
      assertEquals("Repository [userReferences=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setRecIdNumber(";CjG");
      String string0 = repository0.toString();
      assertEquals("Repository [recIdNumber=;CjG, ]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setName("ft");
      String string0 = repository0.toString();
      assertEquals("Repository [name=ft, ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = new ChangeDate();
      repository0.setChangeDate(changeDate0);
      String string0 = repository0.toString();
      assertEquals("Repository [changeDate=ChangeDate [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setRecIdNumber((String) null);
      assertNull(repository0.getXref());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setName((String) null);
      assertNull(repository0.getXref());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setXref("*&+%HIMjZ");
      repository0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.getUserReferences(true);
      repository0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setRecIdNumber("}<B|PT.");
      repository0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      repository0.setName(stringWithCustomFacts0);
      repository0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = new ChangeDate();
      repository0.setChangeDate(changeDate0);
      repository0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Repository repository0 = new Repository();
      List<UserReference> list0 = repository0.getUserReferences(true);
      List<UserReference> list1 = repository0.getUserReferences(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setXref("getNotes()=");
      Repository repository1 = new Repository(repository0);
      boolean boolean0 = repository0.equals(repository1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      repository1.setXref("C:W");
      boolean boolean0 = repository0.equals(repository1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      repository1.setXref("org.gedcom4j.model.AbstractElement");
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      repository1.getUserReferences(true);
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(repository1.equals((Object)repository0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      repository0.getUserReferences(true);
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setRecIdNumber("changeDate=");
      Repository repository1 = new Repository();
      boolean boolean0 = repository0.equals(repository1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      repository0.setRecIdNumber(stringWithCustomFacts0);
      Repository repository1 = new Repository();
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository();
      assertTrue(repository1.equals((Object)repository0));
      
      repository1.setName("");
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(repository1.equals((Object)repository0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      repository1.setName("Repository []");
      boolean boolean0 = repository0.equals(repository1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = new ChangeDate();
      repository0.setChangeDate(changeDate0);
      Repository repository1 = new Repository();
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Repository repository0 = new Repository();
      Repository repository1 = new Repository(repository0);
      assertTrue(repository1.equals((Object)repository0));
      
      ChangeDate changeDate0 = new ChangeDate();
      repository1.setChangeDate(changeDate0);
      boolean boolean0 = repository1.equals(repository0);
      assertFalse(repository1.equals((Object)repository0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Repository repository0 = new Repository();
      boolean boolean0 = repository0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Repository repository0 = new Repository();
      boolean boolean0 = repository0.equals(repository0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Repository repository0 = new Repository();
      List<UserReference> list0 = repository0.getUserReferences(true);
      assertNotNull(list0);
      
      Repository repository1 = new Repository(repository0);
      boolean boolean0 = repository0.equals(repository1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Repository repository0 = new Repository();
      repository0.setName("ft");
      Repository repository1 = new Repository(repository0);
      boolean boolean0 = repository0.equals(repository1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Repository repository0 = new Repository();
      String string0 = repository0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = repository0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = new ChangeDate();
      repository0.setChangeDate(changeDate0);
      Repository repository1 = new Repository(repository0);
      boolean boolean0 = repository1.equals(repository0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Repository repository0 = new Repository();
      ChangeDate changeDate0 = repository0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = repository0.getName();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Repository repository0 = new Repository();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      repository0.setRecIdNumber(stringWithCustomFacts0);
      Repository repository1 = new Repository(repository0);
      boolean boolean0 = repository1.equals(repository0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Repository repository0 = new Repository();
      List<UserReference> list0 = repository0.getUserReferences();
      assertNull(list0);
  }
}
