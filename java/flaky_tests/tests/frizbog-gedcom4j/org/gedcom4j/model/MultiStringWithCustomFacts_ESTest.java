/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:17:43 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.MultiStringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiStringWithCustomFacts_ESTest extends MultiStringWithCustomFacts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      multiStringWithCustomFacts0.getCustomFacts(true);
      multiStringWithCustomFacts0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      Options.setCollectionInitializationEnabled(true);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      List<String> list0 = multiStringWithCustomFacts1.getLines(false);
      MultiStringWithCustomFacts multiStringWithCustomFacts2 = new MultiStringWithCustomFacts(list0);
      assertFalse(multiStringWithCustomFacts2.equals((Object)multiStringWithCustomFacts0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      Options.setCollectionInitializationEnabled(true);
      List<String> list0 = multiStringWithCustomFacts0.getLines(false);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = null;
      try {
        multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      List<String> list0 = multiStringWithCustomFacts0.getLines(true);
      List<String> list1 = multiStringWithCustomFacts0.getLines();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = null;
      try {
        multiStringWithCustomFacts0 = new MultiStringWithCustomFacts((MultiStringWithCustomFacts) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      Options.setCollectionInitializationEnabled(true);
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      String string0 = multiStringWithCustomFacts1.toString();
      assertEquals("MultiStringWithCustomFacts [lines=[], customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      List<String> list0 = multiStringWithCustomFacts0.getLines(true);
      assertNotNull(list0);
      
      String string0 = multiStringWithCustomFacts0.toString();
      assertEquals("MultiStringWithCustomFacts [lines=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      String string0 = multiStringWithCustomFacts0.toString();
      assertEquals("MultiStringWithCustomFacts []", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      multiStringWithCustomFacts0.getLines(true);
      multiStringWithCustomFacts0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      List<String> list0 = multiStringWithCustomFacts0.getLines(true);
      List<String> list1 = multiStringWithCustomFacts0.getLines(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      assertTrue(multiStringWithCustomFacts1.equals((Object)multiStringWithCustomFacts0));
      
      multiStringWithCustomFacts1.getLines(true);
      boolean boolean0 = multiStringWithCustomFacts0.equals(multiStringWithCustomFacts1);
      assertFalse(multiStringWithCustomFacts1.equals((Object)multiStringWithCustomFacts0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      assertTrue(multiStringWithCustomFacts1.equals((Object)multiStringWithCustomFacts0));
      
      multiStringWithCustomFacts1.getLines(true);
      boolean boolean0 = multiStringWithCustomFacts1.equals(multiStringWithCustomFacts0);
      assertFalse(multiStringWithCustomFacts1.equals((Object)multiStringWithCustomFacts0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      boolean boolean0 = multiStringWithCustomFacts0.equals("MultiStringWithCustomFacts [lines=[], customFacts=[]]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      boolean boolean0 = multiStringWithCustomFacts0.equals(multiStringWithCustomFacts0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      List<String> list0 = multiStringWithCustomFacts0.getLines(true);
      assertNotNull(list0);
      
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      boolean boolean0 = multiStringWithCustomFacts0.equals(multiStringWithCustomFacts1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      MultiStringWithCustomFacts multiStringWithCustomFacts1 = new MultiStringWithCustomFacts(multiStringWithCustomFacts0);
      boolean boolean0 = multiStringWithCustomFacts0.equals(multiStringWithCustomFacts1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiStringWithCustomFacts multiStringWithCustomFacts0 = new MultiStringWithCustomFacts();
      List<String> list0 = multiStringWithCustomFacts0.getLines();
      assertNull(list0);
  }
}
