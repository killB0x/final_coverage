/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:34:35 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.EventRecorded;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EventRecorded_ESTest extends EventRecorded_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      List<CustomFact> list0 = eventRecorded0.getCustomFactsWithTag("ZBQhY*l;G`");
      eventRecorded0.customFacts = list0;
      eventRecorded0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setJurisdiction(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = eventRecorded0.getJurisdiction();
      assertSame(stringWithCustomFacts1, stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType((String) null);
      StringWithCustomFacts stringWithCustomFacts0 = eventRecorded0.getEventType();
      assertNull(stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setDatePeriod(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = eventRecorded0.getDatePeriod();
      assertNull(stringWithCustomFacts1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventRecorded eventRecorded0 = null;
      try {
        eventRecorded0 = new EventRecorded((EventRecorded) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      LinkedList<CustomFact> linkedList0 = new LinkedList<CustomFact>();
      eventRecorded1.customFacts = (List<CustomFact>) linkedList0;
      String string0 = eventRecorded1.toString();
      assertEquals("EventRecorded [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType("getNotes()=");
      String string0 = eventRecorded0.toString();
      assertEquals("EventRecorded [eventType=getNotes()=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setJurisdiction((String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setJurisdiction("");
      String string0 = eventRecorded0.toString();
      assertEquals("EventRecorded [jurisdiction=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType("getNotes()=");
      eventRecorded0.setEventType("getNotes()=");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setDatePeriod((String) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setJurisdiction(stringWithCustomFacts0);
      eventRecorded0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType((String) null);
      eventRecorded0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setDatePeriod("DLE_X$r}4ZRU=S)");
      eventRecorded0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setJurisdiction(stringWithCustomFacts0);
      EventRecorded eventRecorded1 = new EventRecorded();
      boolean boolean0 = eventRecorded0.equals(eventRecorded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      assertTrue(eventRecorded1.equals((Object)eventRecorded0));
      
      eventRecorded0.setJurisdiction(stringWithCustomFacts0);
      boolean boolean0 = eventRecorded1.equals(eventRecorded0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType((String) null);
      EventRecorded eventRecorded1 = new EventRecorded();
      boolean boolean0 = eventRecorded0.equals(eventRecorded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      assertTrue(eventRecorded1.equals((Object)eventRecorded0));
      
      eventRecorded1.setEventType("?w_uO,9=!ZAzu8l1c");
      boolean boolean0 = eventRecorded0.equals(eventRecorded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setEventType("q,kccy b2AS\"V[6Tq`y");
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      boolean boolean0 = eventRecorded1.equals(eventRecorded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      assertTrue(eventRecorded1.equals((Object)eventRecorded0));
      
      eventRecorded1.setDatePeriod("");
      boolean boolean0 = eventRecorded1.equals(eventRecorded0);
      assertFalse(eventRecorded1.equals((Object)eventRecorded0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      assertTrue(eventRecorded1.equals((Object)eventRecorded0));
      
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded1.setDatePeriod(stringWithCustomFacts0);
      boolean boolean0 = eventRecorded0.equals(eventRecorded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      Object object0 = new Object();
      boolean boolean0 = eventRecorded0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      boolean boolean0 = eventRecorded0.equals(eventRecorded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      eventRecorded0.setDatePeriod("");
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      boolean boolean0 = eventRecorded1.equals(eventRecorded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = eventRecorded0.getJurisdiction();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setEventType(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      eventRecorded0.setDatePeriod(stringWithCustomFacts0);
      String string0 = eventRecorded0.toString();
      assertEquals("EventRecorded [datePeriod=null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = eventRecorded0.getEventType();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = eventRecorded0.getDatePeriod();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EventRecorded eventRecorded0 = new EventRecorded();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("vYQ");
      eventRecorded0.setJurisdiction(stringWithCustomFacts0);
      EventRecorded eventRecorded1 = new EventRecorded(eventRecorded0);
      boolean boolean0 = eventRecorded0.equals(eventRecorded1);
      assertTrue(boolean0);
  }
}
