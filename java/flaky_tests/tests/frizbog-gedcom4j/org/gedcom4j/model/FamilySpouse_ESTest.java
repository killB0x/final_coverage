/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:07:30 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Family;
import org.gedcom4j.model.FamilySpouse;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FamilySpouse_ESTest extends FamilySpouse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FamilySpouse familySpouse0 = null;
      try {
        familySpouse0 = new FamilySpouse((FamilySpouse) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FamilySpouse familySpouse0 = null;
      try {
        familySpouse0 = new FamilySpouse((FamilySpouse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      familySpouse0.getCustomFacts(true);
      String string0 = familySpouse0.toString();
      assertEquals("FamilySpouse [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      String string0 = familySpouse0.toString();
      assertEquals("FamilySpouse [family=Family [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      family0.setXref(".ZT1p$69~E6{dMAO9Mm");
      familySpouse0.setFamily(family0);
      familySpouse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      familySpouse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      familySpouse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      family0.setXref(".ZT1p$69~E6{dMAO9Mm");
      FamilySpouse familySpouse1 = new FamilySpouse(familySpouse0);
      boolean boolean0 = familySpouse1.equals(familySpouse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      family0.setXref("6\"w~N#+2C,d4XfQWwu");
      FamilySpouse familySpouse1 = new FamilySpouse();
      Family family1 = new Family();
      familySpouse1.setFamily(family1);
      boolean boolean0 = familySpouse1.equals(familySpouse0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      FamilySpouse familySpouse1 = new FamilySpouse(familySpouse0, true);
      Family family1 = familySpouse1.getFamily();
      assertTrue(familySpouse0.equals((Object)familySpouse1));
      
      family1.setXref("p*oV%O@");
      boolean boolean0 = familySpouse1.equals(familySpouse0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      FamilySpouse familySpouse1 = new FamilySpouse();
      boolean boolean0 = familySpouse0.equals(familySpouse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      FamilySpouse familySpouse1 = new FamilySpouse(familySpouse0, false);
      assertTrue(familySpouse1.equals((Object)familySpouse0));
      
      Family family0 = new Family();
      familySpouse1.setFamily(family0);
      boolean boolean0 = familySpouse0.equals(familySpouse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Object object0 = new Object();
      boolean boolean0 = familySpouse0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      boolean boolean0 = familySpouse0.equals(familySpouse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      FamilySpouse familySpouse1 = new FamilySpouse(familySpouse0, true);
      boolean boolean0 = familySpouse1.equals(familySpouse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = familySpouse0.getFamily();
      assertNull(family0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FamilySpouse familySpouse0 = new FamilySpouse();
      Family family0 = new Family();
      familySpouse0.setFamily(family0);
      FamilySpouse familySpouse1 = new FamilySpouse(familySpouse0, true);
      boolean boolean0 = familySpouse1.equals(familySpouse0);
      assertTrue(boolean0);
  }
}
