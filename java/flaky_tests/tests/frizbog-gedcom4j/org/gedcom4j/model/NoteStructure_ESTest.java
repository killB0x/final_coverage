/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:35:49 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.NoteRecord;
import org.gedcom4j.model.NoteStructure;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NoteStructure_ESTest extends NoteStructure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      Options.setCollectionInitializationEnabled(true);
      NoteStructure noteStructure1 = new NoteStructure(noteStructure0);
      noteStructure1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteStructure0.setNoteReference(noteRecord0);
      NoteRecord noteRecord1 = noteStructure0.getNoteReference();
      assertSame(noteRecord1, noteRecord0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(true);
      assertNotNull(list0);
      
      List<String> list1 = noteStructure0.getLines();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoteStructure noteStructure0 = null;
      try {
        noteStructure0 = new NoteStructure((NoteStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      Options.setCollectionInitializationEnabled(true);
      NoteStructure noteStructure1 = new NoteStructure(noteStructure0);
      String string0 = noteStructure1.toString();
      assertEquals("NoteStructure [lines=[], customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteStructure0.setNoteReference(noteRecord0);
      String string0 = noteStructure0.toString();
      assertEquals("NoteStructure [noteReference=Note [xref=, , ], ]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteStructure0.getLines(true);
      noteStructure0.setNoteReference(noteRecord0);
      assertEquals(", ", noteRecord0.getXref());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      noteStructure0.setNoteReference((NoteRecord) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteStructure0.setNoteReference(noteRecord0);
      noteStructure0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(true);
      List<String> list1 = noteStructure0.getLines(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord(", ");
      noteStructure0.setNoteReference(noteRecord0);
      List<String> list0 = noteStructure0.getLines(false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteStructure noteStructure1 = new NoteStructure();
      assertTrue(noteStructure1.equals((Object)noteStructure0));
      
      NoteRecord noteRecord0 = new NoteRecord("lines=");
      noteStructure0.setNoteReference(noteRecord0);
      boolean boolean0 = noteStructure0.equals(noteStructure1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteStructure noteStructure1 = new NoteStructure();
      assertTrue(noteStructure1.equals((Object)noteStructure0));
      
      NoteRecord noteRecord0 = new NoteRecord("lines=");
      noteStructure0.setNoteReference(noteRecord0);
      boolean boolean0 = noteStructure1.equals(noteStructure0);
      assertFalse(noteStructure1.equals((Object)noteStructure0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = new NoteRecord("");
      noteStructure0.setNoteReference(noteRecord0);
      NoteStructure noteStructure1 = new NoteStructure(noteStructure0);
      boolean boolean0 = noteStructure0.equals(noteStructure1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(true);
      assertNotNull(list0);
      
      NoteStructure noteStructure1 = new NoteStructure();
      boolean boolean0 = noteStructure1.equals(noteStructure0);
      assertFalse(boolean0);
      assertFalse(noteStructure0.equals((Object)noteStructure1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(true);
      assertNotNull(list0);
      
      NoteStructure noteStructure1 = new NoteStructure();
      boolean boolean0 = noteStructure0.equals(noteStructure1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      boolean boolean0 = noteStructure0.equals(noteStructure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      Object object0 = new Object();
      boolean boolean0 = noteStructure0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines(true);
      assertNotNull(list0);
      
      NoteStructure noteStructure1 = new NoteStructure(noteStructure0);
      boolean boolean0 = noteStructure0.equals(noteStructure1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      List<String> list0 = noteStructure0.getLines();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoteStructure noteStructure0 = new NoteStructure();
      NoteRecord noteRecord0 = noteStructure0.getNoteReference();
      assertNull(noteRecord0);
  }
}
