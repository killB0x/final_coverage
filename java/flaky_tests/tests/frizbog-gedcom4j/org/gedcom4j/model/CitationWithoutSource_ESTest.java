/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:21:38 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.CitationWithoutSource;
import org.gedcom4j.model.MultimediaReference;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CitationWithoutSource_ESTest extends CitationWithoutSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(true);
      List<List<String>> list1 = citationWithoutSource0.getTextFromSource();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.getDescription(true);
      List<String> list0 = citationWithoutSource0.getDescription();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = null;
      try {
        citationWithoutSource0 = new CitationWithoutSource((CitationWithoutSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.getCustomFacts(true);
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [customFacts()=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.getNoteStructures(true);
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [notes()=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(true);
      assertNotNull(list0);
      
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [textFromSource=[], textFromSource()=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      LinkedList<MultimediaReference> linkedList0 = new LinkedList<MultimediaReference>();
      citationWithoutSource0.multimedia = (List<MultimediaReference>) linkedList0;
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [multimedia=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription(true);
      assertNotNull(list0);
      
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [description=[], description()=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.setCertainty("=_bs");
      String string0 = citationWithoutSource0.toString();
      assertEquals("CitationWithoutSource [certainty==_bs, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.getTextFromSource(true);
      citationWithoutSource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      citationWithoutSource0.getDescription(true);
      citationWithoutSource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(true);
      List<List<String>> list1 = citationWithoutSource0.getTextFromSource(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription(true);
      List<String> list1 = citationWithoutSource0.getDescription(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource(citationWithoutSource0);
      assertTrue(citationWithoutSource1.equals((Object)citationWithoutSource0));
      
      citationWithoutSource1.getTextFromSource(true);
      boolean boolean0 = citationWithoutSource1.equals(citationWithoutSource0);
      assertFalse(citationWithoutSource1.equals((Object)citationWithoutSource0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(true);
      assertNotNull(list0);
      
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource();
      boolean boolean0 = citationWithoutSource1.equals(citationWithoutSource0);
      assertFalse(boolean0);
      assertFalse(citationWithoutSource0.equals((Object)citationWithoutSource1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription(true);
      assertNotNull(list0);
      
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource();
      boolean boolean0 = citationWithoutSource1.equals(citationWithoutSource0);
      assertFalse(citationWithoutSource0.equals((Object)citationWithoutSource1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource(citationWithoutSource0);
      assertTrue(citationWithoutSource1.equals((Object)citationWithoutSource0));
      
      citationWithoutSource0.getDescription(true);
      boolean boolean0 = citationWithoutSource0.equals(citationWithoutSource1);
      assertFalse(citationWithoutSource1.equals((Object)citationWithoutSource0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      boolean boolean0 = citationWithoutSource0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      boolean boolean0 = citationWithoutSource0.equals(citationWithoutSource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<List<String>> list0 = citationWithoutSource0.getTextFromSource(true);
      assertNotNull(list0);
      
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource(citationWithoutSource0);
      boolean boolean0 = citationWithoutSource0.equals(citationWithoutSource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CitationWithoutSource citationWithoutSource0 = new CitationWithoutSource();
      List<String> list0 = citationWithoutSource0.getDescription(true);
      assertNotNull(list0);
      
      CitationWithoutSource citationWithoutSource1 = new CitationWithoutSource(citationWithoutSource0);
      boolean boolean0 = citationWithoutSource0.equals(citationWithoutSource1);
      assertTrue(boolean0);
  }
}
