/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 21:13:36 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.StringTree;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringTree_ESTest extends StringTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      stringTree0.setParent(stringTree1);
      assertTrue(stringTree1.equals((Object)stringTree0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLineNum((-1));
      stringTree0.hashCode();
      assertEquals((-1), stringTree0.getLineNum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLevel(1426);
      stringTree0.hashCode();
      assertEquals(1426, stringTree0.getLevel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      stringTree1.setLineNum(31);
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertEquals(31, stringTree1.getLineNum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      stringTree1.setLevel(241);
      boolean boolean0 = stringTree1.equals(stringTree0);
      assertEquals(241, stringTree1.getLevel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setXref("]CFZ");
      String string0 = stringTree0.getXref();
      assertEquals("]CFZ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setXref("");
      String string0 = stringTree0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setValue("]CFZ");
      String string0 = stringTree0.getValue();
      assertEquals("]CFZ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setValue("");
      String string0 = stringTree0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("(null value)");
      String string0 = stringTree0.getTag();
      assertEquals("(null value)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("");
      String string0 = stringTree0.getTag();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setParent(stringTree0);
      stringTree0.setLineNum(3615);
      stringTree0.getParent();
      assertEquals(3615, stringTree0.getLineNum());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setParent(stringTree0);
      stringTree0.setLineNum((-777));
      stringTree0.getParent();
      assertEquals((-777), stringTree0.getLineNum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setParent(stringTree0);
      StringTree stringTree1 = stringTree0.getParent();
      assertSame(stringTree1, stringTree0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLevel((-882));
      stringTree0.setParent(stringTree0);
      stringTree0.getParent();
      assertEquals((-882), stringTree0.getLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLineNum(1089);
      int int0 = stringTree0.getLineNum();
      assertEquals(1089, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLineNum((-2147483645));
      int int0 = stringTree0.getLineNum();
      assertEquals((-2147483645), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLevel(476);
      int int0 = stringTree0.getLevel();
      assertEquals(476, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setLevel((-882));
      int int0 = stringTree0.getLevel();
      assertEquals((-882), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.getChildren(true);
      List<StringTree> list0 = stringTree0.getChildren();
      assertFalse(list0.contains(stringTree0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringTree stringTree0 = null;
      try {
        stringTree0 = new StringTree((StringTree) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.StringTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      List<StringTree> list0 = stringTree0.getChildren(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      List<StringTree> list0 = stringTree0.getChildren();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      List<StringTree> list0 = stringTree0.getChildren(true);
      assertNotNull(list0);
      
      String string0 = stringTree0.toString();
      assertEquals("Line 0: 0 (null tag) (null value)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setValue("bT7+g");
      String string0 = stringTree0.toString();
      assertEquals("Line 0: 0 (null tag) bT7+g", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("");
      String string0 = stringTree0.toString();
      assertEquals("Line 0: 0  (null value)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setXref("95p~bV");
      String string0 = stringTree0.toString();
      assertEquals("Line 0: 0 95p~bV (null tag) (null value)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setValue("%uV80\"Khp&");
      stringTree0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setXref("Line ");
      stringTree0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.getChildren(true);
      stringTree0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      List<StringTree> list0 = stringTree0.getChildren(true);
      List<StringTree> list1 = stringTree0.getChildren(true);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree1.setValue("bT7+g");
      boolean boolean0 = stringTree1.equals(stringTree0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree1.setValue("5}jwG 0nB'!s");
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setValue("bT7+g");
      StringTree stringTree1 = new StringTree(stringTree0);
      boolean boolean0 = stringTree1.equals(stringTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("");
      StringTree stringTree1 = new StringTree();
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree1.setTag("T^km2HZT");
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("(null value)");
      StringTree stringTree1 = new StringTree(stringTree0);
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertEquals(0, stringTree1.getLineNum());
      
      stringTree1.setLineNum(1);
      boolean boolean0 = stringTree1.equals(stringTree0);
      assertEquals(1, stringTree1.getLineNum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      stringTree1.setLevel((-2621));
      boolean boolean0 = stringTree1.equals(stringTree0);
      assertEquals((-2621), stringTree1.getLevel());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setXref("95p~bV");
      StringTree stringTree1 = new StringTree(stringTree0);
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree();
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree1.setXref("G*");
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree0.setXref("!Y_D>wo GPr0@Adcd");
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.getChildren(true);
      StringTree stringTree1 = new StringTree();
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = new StringTree(stringTree0);
      assertTrue(stringTree1.equals((Object)stringTree0));
      
      stringTree1.getChildren(true);
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertFalse(stringTree1.equals((Object)stringTree0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      boolean boolean0 = stringTree0.equals("Line -2621: 0  (null value)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      boolean boolean0 = stringTree0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      boolean boolean0 = stringTree0.equals(stringTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      List<StringTree> list0 = stringTree0.getChildren(true);
      assertNotNull(list0);
      
      StringTree stringTree1 = new StringTree(stringTree0);
      boolean boolean0 = stringTree0.equals(stringTree1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setTag("bT7+g");
      stringTree0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      String string0 = stringTree0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      String string0 = stringTree0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      StringTree stringTree1 = stringTree0.getParent();
      assertNull(stringTree1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      String string0 = stringTree0.getTag();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      stringTree0.setParent(stringTree0);
      stringTree0.setLevel(241);
      stringTree0.getParent();
      assertEquals(241, stringTree0.getLevel());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      int int0 = stringTree0.getLineNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringTree stringTree0 = new StringTree();
      int int0 = stringTree0.getLevel();
      assertEquals(0, int0);
  }
}
