/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 19:47:13 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.Options;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.Association;
import org.gedcom4j.model.ChangeDate;
import org.gedcom4j.model.FamilyChild;
import org.gedcom4j.model.FamilySpouse;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.IndividualAttribute;
import org.gedcom4j.model.IndividualEvent;
import org.gedcom4j.model.LdsIndividualOrdinance;
import org.gedcom4j.model.MultimediaReference;
import org.gedcom4j.model.PersonalName;
import org.gedcom4j.model.StringWithCustomFacts;
import org.gedcom4j.model.Submitter;
import org.gedcom4j.model.UserReference;
import org.gedcom4j.model.enumerations.IndividualAttributeType;
import org.gedcom4j.model.enumerations.IndividualEventType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Individual_ESTest extends Individual_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setXref("jK@s@]`:.QB-`@FL[5,");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setXref(" / ");
      String string0 = individual0.getXref();
      assertEquals(" / ", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setXref("");
      String string0 = individual0.getXref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.getUserReferences(true);
      List<UserReference> list0 = individual0.getUserReferences();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.getSubmitters(true);
      List<Submitter> list0 = individual0.getSubmitters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setSex("<vb0m{_NZfg>m");
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getSex();
      assertEquals("<vb0m{_NZfg>m", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRestrictionNotice(", spouse of ");
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getRestrictionNotice();
      assertEquals(", spouse of ", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts((String) null);
      individual0.setRecIdNumber(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = individual0.getRecIdNumber();
      assertNull(stringWithCustomFacts1.getValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setPermanentRecFileNumber("");
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getPermanentRecFileNumber();
      assertEquals("", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<PersonalName> list0 = individual0.getNames();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      List<MultimediaReference> list0 = individual1.getMultimedia();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Individual individual0 = new Individual();
      List<LdsIndividualOrdinance> list0 = individual0.getLdsIndividualOrdinances(true);
      List<LdsIndividualOrdinance> list1 = individual0.getLdsIndividualOrdinances();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      List<FamilySpouse> list0 = individual1.getFamiliesWhereSpouse();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Individual individual0 = new Individual();
      List<FamilyChild> list0 = individual0.getFamiliesWhereChild(true);
      List<FamilyChild> list1 = individual0.getFamiliesWhereChild();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      List<IndividualEvent> list0 = individual1.getEvents();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getDescendantInterest();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<AbstractCitation> list0 = individual0.getCitations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Individual individual0 = new Individual();
      ChangeDate changeDate0 = new ChangeDate();
      individual0.setChangeDate(changeDate0);
      ChangeDate changeDate1 = individual0.getChangeDate();
      assertSame(changeDate1, changeDate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0);
      List<IndividualAttribute> list0 = individual1.getAttributes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.getAssociations(true);
      List<Association> list0 = individual0.getAssociations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setAncestralFileNumber("whereInSource=");
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getAncestralFileNumber();
      assertEquals("whereInSource=", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getAncestorInterest();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      List<StringWithCustomFacts> list0 = individual1.getAliases();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Individual individual0 = new Individual();
      // Undeclared exception!
      try { 
        individual0.getSurnames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Individual individual0 = new Individual();
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.OCCUPATION;
      // Undeclared exception!
      try { 
        individual0.getAttributesOfType(individualAttributeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Individual individual0 = null;
      try {
        individual0 = new Individual((Individual) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Individual individual0 = null;
      try {
        individual0 = new Individual((Individual) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Individual individual0 = new Individual();
      List<UserReference> list0 = individual0.getUserReferences(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getSubmitters(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Individual individual0 = new Individual();
      List<PersonalName> list0 = individual0.getNames(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Individual individual0 = new Individual();
      List<MultimediaReference> list0 = individual0.getMultimedia(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Individual individual0 = new Individual();
      List<LdsIndividualOrdinance> list0 = individual0.getLdsIndividualOrdinances(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Individual individual0 = new Individual();
      String string0 = individual0.getFormattedName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      String string0 = individual1.getFormattedName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Individual individual0 = new Individual();
      List<FamilySpouse> list0 = individual0.getFamiliesWhereSpouse(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Individual individual0 = new Individual();
      List<FamilyChild> list0 = individual0.getFamiliesWhereChild(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Individual individual0 = new Individual();
      IndividualEventType individualEventType0 = IndividualEventType.FIRST_COMMUNION;
      List<IndividualEvent> list0 = individual0.getEventsOfType(individualEventType0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0, true);
      IndividualEventType individualEventType0 = IndividualEventType.BAS_MITZVAH;
      List<IndividualEvent> list0 = individual1.getEventsOfType(individualEventType0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Individual individual0 = new Individual();
      List<IndividualEvent> list0 = individual0.getEvents(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getDescendantInterest(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Individual individual0 = new Individual();
      List<AbstractCitation> list0 = individual0.getCitations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Individual individual0 = new Individual();
      List<IndividualAttribute> list0 = individual0.getAttributes(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Association> list0 = individual0.getAssociations(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getAncestorInterest(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Individual individual0 = new Individual();
      List<StringWithCustomFacts> list0 = individual0.getAliases(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      Set<Individual> set0 = individual0.getDescendants();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      Set<Individual> set0 = individual0.getAncestors();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setSex((String) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRestrictionNotice((String) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRecIdNumber((String) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setPermanentRecFileNumber((String) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setAncestralFileNumber((String) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setSex("vxIQ-");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRestrictionNotice("*]");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRecIdNumber("8Vvot&Z[,1/V");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setPermanentRecFileNumber(":!\nBY'i4_$cs");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Individual individual0 = new Individual();
      ChangeDate changeDate0 = new ChangeDate();
      individual0.setChangeDate(changeDate0);
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setAncestralFileNumber("zs^");
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      individual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<UserReference> list0 = individual0.getUserReferences(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      Set<String> set0 = individual0.getSurnames();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getSubmitters(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0);
      Set<Individual> set0 = individual1.getSpouses();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Individual individual0 = new Individual();
      Set<Individual> set0 = individual0.getSpouses();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Individual individual0 = new Individual();
      List<PersonalName> list0 = individual0.getNames(true);
      List<PersonalName> list1 = individual0.getNames(true);
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<MultimediaReference> list0 = individual0.getMultimedia(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<LdsIndividualOrdinance> list0 = individual0.getLdsIndividualOrdinances(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<FamilySpouse> list0 = individual0.getFamiliesWhereSpouse(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<FamilyChild> list0 = individual0.getFamiliesWhereChild(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0);
      String string0 = individual1.toString();
      assertEquals("Unknown name", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Individual individual0 = new Individual();
      String string0 = individual0.toString();
      assertEquals("Unknown name", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0);
      List<IndividualEvent> list0 = individual1.getEvents(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getDescendantInterest(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<AbstractCitation> list0 = individual0.getCitations(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      IndividualAttributeType individualAttributeType0 = IndividualAttributeType.POSSESSIONS;
      Individual individual0 = new Individual();
      List<IndividualAttribute> list0 = individual0.getAttributesOfType(individualAttributeType0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<IndividualAttribute> list0 = individual0.getAttributes(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Association> list0 = individual0.getAssociations(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getAncestorInterest(true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      List<StringWithCustomFacts> list0 = individual0.getAliases(true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setXref("L|f(:V &%gQ[i");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0, true);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setXref("");
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setXref("B+q7!:HnBizYVn6");
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual0.equals(individual1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getUserReferences(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getUserReferences(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getSubmitters(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getSubmitters(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setSex("}<MSXvz/");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setSex("(");
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setRestrictionNotice("");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0, true);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setRestrictionNotice("*]");
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setRecIdNumber("");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRecIdNumber("<No /name>/");
      Individual individual1 = new Individual();
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setPermanentRecFileNumber("DUTIt:");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.setPermanentRecFileNumber("DUTIt:");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setPermanentRecFileNumber("\")'O([SGC$n7gbu");
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual0.equals(individual1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      individual1.getNames(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getNames(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getMultimedia(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getMultimedia(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Individual individual0 = new Individual();
      List<LdsIndividualOrdinance> list0 = individual0.getLdsIndividualOrdinances(true);
      assertNotNull(list0);
      
      Individual individual1 = new Individual();
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getLdsIndividualOrdinances(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getFamiliesWhereSpouse(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getFamiliesWhereSpouse(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.getFamiliesWhereChild(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0, true);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.getFamiliesWhereChild(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getEvents(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getEvents(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getDescendantInterest(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getDescendantInterest(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getCitations(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getCitations(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      ChangeDate changeDate0 = new ChangeDate();
      individual1.setChangeDate(changeDate0);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      ChangeDate changeDate0 = new ChangeDate();
      individual1.setChangeDate(changeDate0);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      individual1.getAttributes(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Individual individual0 = new Individual();
      List<IndividualAttribute> list0 = individual0.getAttributes(true);
      assertNotNull(list0);
      
      Individual individual1 = new Individual();
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual();
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getAssociations(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.getAssociations(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setAncestralFileNumber("DUTIt:");
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.setAncestralFileNumber("H4EqoKdNcy");
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.getAncestorInterest(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual0.getAncestorInterest(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Individual individual0 = new Individual();
      Options.setCollectionInitializationEnabled(true);
      Individual individual1 = new Individual(individual0);
      Individual individual2 = new Individual(individual0, true);
      boolean boolean0 = individual1.equals(individual2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getAliases(true);
      boolean boolean0 = individual0.equals(individual1);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Individual individual0 = new Individual();
      Object object0 = new Object();
      boolean boolean0 = individual0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Individual individual0 = new Individual();
      boolean boolean0 = individual0.equals(individual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRestrictionNotice("N7TQ*?x.j?Yz");
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual0.equals(individual1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRecIdNumber("<No /name>/");
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual1.equals(individual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setAncestralFileNumber("PHYSICAL_DESCRIPTION");
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual1.equals(individual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Options.setCollectionInitializationEnabled(true);
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertNull(individual1.getXref());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Individual individual0 = new Individual();
      List<StringWithCustomFacts> list0 = individual0.getAliases();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Individual individual0 = new Individual();
      Set<Individual> set0 = individual0.getAncestors();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Individual individual0 = new Individual();
      List<IndividualEvent> list0 = individual0.getEvents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Individual individual0 = new Individual();
      Individual individual1 = new Individual(individual0);
      assertTrue(individual1.equals((Object)individual0));
      
      individual1.getAliases(true);
      boolean boolean0 = individual1.equals(individual0);
      assertFalse(individual1.equals((Object)individual0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Individual individual0 = new Individual();
      Set<Individual> set0 = individual0.getDescendants();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Individual individual0 = new Individual();
      String string0 = individual0.getXref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getRecIdNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getAncestralFileNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setRestrictionNotice((StringWithCustomFacts) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getRestrictionNotice();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Individual individual0 = new Individual();
      List<IndividualAttribute> list0 = individual0.getAttributes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Association> list0 = individual0.getAssociations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getSex();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Individual individual0 = new Individual();
      List<LdsIndividualOrdinance> list0 = individual0.getLdsIndividualOrdinances();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Individual individual0 = new Individual();
      List<FamilyChild> list0 = individual0.getFamiliesWhereChild();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getDescendantInterest();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      individual0.setSex(stringWithCustomFacts0);
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual1.equals(individual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Individual individual0 = new Individual();
      ChangeDate changeDate0 = individual0.getChangeDate();
      assertNull(changeDate0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Individual individual0 = new Individual();
      ChangeDate changeDate0 = new ChangeDate();
      individual0.setChangeDate(changeDate0);
      Individual individual1 = new Individual(individual0);
      boolean boolean0 = individual0.equals(individual1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Individual individual0 = new Individual();
      List<AbstractCitation> list0 = individual0.getCitations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getAncestorInterest();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setAncestralFileNumber((StringWithCustomFacts) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Individual individual0 = new Individual();
      List<Submitter> list0 = individual0.getSubmitters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Individual individual0 = new Individual();
      StringWithCustomFacts stringWithCustomFacts0 = individual0.getPermanentRecFileNumber();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Individual individual0 = new Individual();
      List<MultimediaReference> list0 = individual0.getMultimedia();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Individual individual0 = new Individual();
      List<UserReference> list0 = individual0.getUserReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Individual individual0 = new Individual();
      List<FamilySpouse> list0 = individual0.getFamiliesWhereSpouse();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Individual individual0 = new Individual();
      individual0.setPermanentRecFileNumber((StringWithCustomFacts) null);
      assertNull(individual0.getXref());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Individual individual0 = new Individual();
      List<PersonalName> list0 = individual0.getNames();
      assertNull(list0);
  }
}
