/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 22:41:10 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.AbstractCitation;
import org.gedcom4j.model.CustomFact;
import org.gedcom4j.model.LdsSpouseSealing;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LdsSpouseSealing_ESTest extends LdsSpouseSealing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      LdsSpouseSealing ldsSpouseSealing1 = new LdsSpouseSealing(ldsSpouseSealing0);
      assertTrue(ldsSpouseSealing1.equals((Object)ldsSpouseSealing0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      List<CustomFact> list0 = ldsSpouseSealing0.getCustomFactsWithTag("LdsSpouseSealing []");
      stringWithCustomFacts0.customFacts = list0;
      ldsSpouseSealing0.customFacts = stringWithCustomFacts0.customFacts;
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      ldsSpouseSealing0.setTemple(stringWithCustomFacts0);
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [temple=null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      ldsSpouseSealing0.setStatus("LdsSpouseSealing []");
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [status=LdsSpouseSealing [], ]", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      ldsSpouseSealing0.setPlace(stringWithCustomFacts0);
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [place=null, ]", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      ldsSpouseSealing0.getNoteStructures(true);
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [noteStructures=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      ldsSpouseSealing0.setDate("D.~ui.DalqkCR_x&");
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [date=D.~ui.DalqkCR_x&, ]", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = new LdsSpouseSealing();
      LinkedList<AbstractCitation> linkedList0 = new LinkedList<AbstractCitation>();
      ldsSpouseSealing0.citations = (List<AbstractCitation>) linkedList0;
      String string0 = ldsSpouseSealing0.toString();
      assertEquals("LdsSpouseSealing [citations=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LdsSpouseSealing ldsSpouseSealing0 = null;
      try {
        ldsSpouseSealing0 = new LdsSpouseSealing((LdsSpouseSealing) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }
}
