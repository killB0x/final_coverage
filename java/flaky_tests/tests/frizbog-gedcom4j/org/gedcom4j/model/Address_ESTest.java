/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:29:59 GMT 2022
 */

package org.gedcom4j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gedcom4j.model.Address;
import org.gedcom4j.model.StringWithCustomFacts;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Address_ESTest extends Address_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Address address0 = new Address();
      address0.getCustomFacts(true);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince("#x%+*y`rVI9R,");
      StringWithCustomFacts stringWithCustomFacts0 = address0.getStateProvince();
      assertEquals("#x%+*y`rVI9R,", stringWithCustomFacts0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Address address0 = new Address();
      address0.getLines(true);
      List<String> list0 = address0.getLines();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      address0.setCity(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = address0.getCity();
      assertSame(stringWithCustomFacts1, stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3("U7");
      StringWithCustomFacts stringWithCustomFacts0 = address0.getAddr3();
      assertEquals("U7", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2("lines=");
      StringWithCustomFacts stringWithCustomFacts0 = address0.getAddr2();
      assertEquals("lines=", stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts("9Qt&:^|jQA%EIf1g");
      address0.setAddr1(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = address0.getAddr1();
      assertEquals("9Qt&:^|jQA%EIf1g", stringWithCustomFacts1.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address((Address) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.model.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Address address0 = new Address();
      List<String> list0 = address0.getLines(false);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Address address0 = new Address();
      address0.getCustomFacts(true);
      String string0 = address0.toString();
      assertEquals("Address [customFacts=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince("#x%+*y`rVI9R,");
      String string0 = address0.toString();
      assertEquals("Address [stateProvince=#x%+*y`rVI9R,, ]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      assertNotNull(list0);
      
      String string0 = address0.toString();
      assertEquals("Address [lines=[], ]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Address address0 = new Address();
      address0.setCountry("U5D");
      String string0 = address0.toString();
      assertEquals("Address [country=U5D, ]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity("stateProvince=");
      String string0 = address0.toString();
      assertEquals("Address [city=stateProvince=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3("lines=");
      String string0 = address0.toString();
      assertEquals("Address [addr3=lines=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2("lines=");
      String string0 = address0.toString();
      assertEquals("Address [addr2=lines=, ]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Address address0 = new Address();
      address0.setPostalCode("*4-b");
      StringWithCustomFacts stringWithCustomFacts0 = address0.getPostalCode();
      address0.setAddr1(stringWithCustomFacts0);
      String string0 = address0.toString();
      assertEquals("Address [addr1=*4-b, postalCode=*4-b, ]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince("#x%+*y`rVI9R,");
      address0.setStateProvince("Y!un~ESg!E25(`:@=|/");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Address address0 = new Address();
      address0.setPostalCode("");
      address0.setPostalCode((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Address address0 = new Address();
      address0.setCountry("");
      address0.setCountry("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity((String) null);
      address0.setCity((String) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3((String) null);
      address0.setAddr3((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2("^c");
      address0.setAddr2("");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr1("e5tmBDkGj");
      address0.setAddr1("e5tmBDkGj");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince("ke]V3}G_%u4O(");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Address address0 = new Address();
      address0.setPostalCode("");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Address address0 = new Address();
      address0.getLines(true);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Address address0 = new Address();
      address0.setCountry("ke]V3}G_%u4O(");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Address address0 = new Address();
      address0.setCity("");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3("U7");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2("^c");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr1("lines=");
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      List<String> list1 = address0.getLines(true);
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setStateProvince("ke]V3}G_%u4O(");
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setStateProvince("ke]V3}G_%u4O(");
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setPostalCode("");
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setPostalCode("lines=");
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.getLines(true);
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.getLines(true);
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setCountry("~Wyx6n&I2");
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setCountry("U5D");
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address();
      assertTrue(address1.equals((Object)address0));
      
      address1.setCity(", ");
      Address address2 = new Address(address1);
      boolean boolean0 = address2.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address();
      assertTrue(address1.equals((Object)address0));
      
      address0.setCity("");
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setAddr3("U7");
      boolean boolean0 = address1.equals(address0);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setAddr3("kOYi@y#n4<m%PdM4^");
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2(" [");
      Address address1 = new Address();
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address0.setAddr2("^c");
      boolean boolean0 = address1.equals(address0);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setAddr1("");
      boolean boolean0 = address1.equals(address0);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Address address0 = new Address();
      Address address1 = new Address(address0);
      assertTrue(address1.equals((Object)address0));
      
      address1.setAddr1("lines=");
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Address address0 = new Address();
      boolean boolean0 = address0.equals("ke]V3}G_%u4O(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Address address0 = new Address();
      boolean boolean0 = address0.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince("");
      Address address1 = new Address(address0);
      boolean boolean0 = address1.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Address address0 = new Address();
      address0.setPostalCode("");
      Address address1 = new Address(address0);
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Address address0 = new Address();
      List<String> list0 = address0.getLines(true);
      assertNotNull(list0);
      
      Address address1 = new Address(address0);
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Address address0 = new Address();
      address0.setCountry("?knw.j|");
      Address address1 = new Address(address0);
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Address address0 = new Address();
      String string0 = "d6aS7,(-L\\uXgd";
      address0.setCity(string0);
      Address address1 = new Address(address0);
      boolean boolean0 = address1.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3("");
      Address address1 = new Address(address0);
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2("placeName=");
      Address address1 = new Address(address0);
      boolean boolean0 = address1.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr1("");
      Address address1 = new Address(address0);
      boolean boolean0 = address0.equals(address1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      address0.setPostalCode(stringWithCustomFacts0);
      assertNull(stringWithCustomFacts0.getValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr2((StringWithCustomFacts) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Address address0 = new Address();
      List<String> list0 = address0.getLines();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Address address0 = new Address();
      address0.setStateProvince((StringWithCustomFacts) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getPostalCode();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getCity();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getStateProvince();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getAddr3();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = new StringWithCustomFacts();
      address0.setCountry(stringWithCustomFacts0);
      StringWithCustomFacts stringWithCustomFacts1 = address0.getCountry();
      assertNull(stringWithCustomFacts1.getValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Address address0 = new Address();
      address0.setAddr3((StringWithCustomFacts) null);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getAddr1();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getAddr2();
      assertNull(stringWithCustomFacts0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Address address0 = new Address();
      StringWithCustomFacts stringWithCustomFacts0 = address0.getCountry();
      assertNull(stringWithCustomFacts0);
  }
}
