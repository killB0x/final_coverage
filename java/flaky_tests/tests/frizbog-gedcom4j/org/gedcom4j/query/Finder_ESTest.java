/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 20:25:33 GMT 2022
 */

package org.gedcom4j.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.gedcom4j.model.Gedcom;
import org.gedcom4j.model.Individual;
import org.gedcom4j.model.enumerations.IndividualEventType;
import org.gedcom4j.query.Finder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Finder_ESTest extends Finder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Finder finder0 = new Finder((Gedcom) null);
      // Undeclared exception!
      try { 
        finder0.findByNameSoundsLike("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Finder finder0 = new Finder((Gedcom) null);
      // Undeclared exception!
      try { 
        finder0.findByName("", "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Finder finder0 = new Finder((Gedcom) null);
      // Undeclared exception!
      try { 
        finder0.findByName("given name is required", "given name is required");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Finder finder0 = new Finder((Gedcom) null);
      IndividualEventType individualEventType0 = IndividualEventType.BLESSING;
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        finder0.findByEvent(individualEventType0, (Date) mockDate0, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Finder finder0 = new Finder((Gedcom) null);
      IndividualEventType individualEventType0 = IndividualEventType.BAS_MITZVAH;
      // Undeclared exception!
      try { 
        finder0.findByEvent(individualEventType0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      List<Individual> list0 = finder0.findByName(")$.e$7\"kk*", "", "Rd\"e8Z,MbN&pGwI;", "q~`%");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      // Undeclared exception!
      try { 
        finder0.findByNameSoundsLike("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // given name is required
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      // Undeclared exception!
      try { 
        finder0.findByNameSoundsLike((String) null, "Mrs. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // surname is required
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      List<Individual> list0 = finder0.findByNameSoundsLike("$]", "$]");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      IndividualEventType individualEventType0 = IndividualEventType.EVENT;
      Set<Individual> set0 = finder0.findByEvent(individualEventType0, (String) null, (String) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      IndividualEventType individualEventType0 = IndividualEventType.CHRISTENING_ADULT;
      // Undeclared exception!
      try { 
        finder0.findByEvent(individualEventType0, "q~`%", "org.gedcom4j.query.Finder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // q~`% could not be parsed as a date
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      IndividualEventType individualEventType0 = IndividualEventType.DEATH;
      Set<Individual> set0 = finder0.findByEvent(individualEventType0, "7", "7");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      IndividualEventType individualEventType0 = IndividualEventType.ORDINATION;
      // Undeclared exception!
      try { 
        finder0.findByEvent(individualEventType0, (String) null, "{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // { could not be parsed as a date
         //
         verifyException("org.gedcom4j.query.Finder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      IndividualEventType individualEventType0 = IndividualEventType.ORDINATION;
      MockDate mockDate0 = new MockDate();
      Set<Individual> set0 = finder0.findByEvent(individualEventType0, (Date) mockDate0, (Date) mockDate0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gedcom gedcom0 = new Gedcom();
      Finder finder0 = new Finder(gedcom0);
      List<Individual> list0 = finder0.findByName("8bp", "$]");
      assertEquals(0, list0.size());
  }
}
