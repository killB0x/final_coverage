/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:04:04 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.model.Credential;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Credential_ESTest extends Credential_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom(")\"*Qjl5]pEO%(cjeh>", "(%$z3;Z", " type=");
      int int0 = credential0.compareTo(credential0);
      assertEquals(" type=", credential0.secret());
      assertEquals(0, int0);
      assertEquals("(%$z3;Z", credential0.id());
      assertEquals(")\"*Qjl5]pEO%(cjeh>", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom(")G09EuwoDMmoQr", "(%$z3;Z", "Credential id required.");
      String string0 = credential0.toString();
      assertEquals("Credential[authority=)G09EuwoDMmoQr id=(%$z3;Z type=OAUTH]", string0);
      assertEquals("Credential id required.", credential0.secret());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom(".:=", "e~B}E0qc.`?jW", "e~B}E0qc.`?jW");
      boolean boolean0 = credential0.equals(credential0);
      assertEquals(".:=", credential0.authority());
      assertEquals("e~B}E0qc.`?jW", credential0.secret());
      assertTrue(boolean0);
      assertEquals("e~B}E0qc.`?jW", credential0.id());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom(")G09EuwoDMmoQr", "(%$z3;Z", "Credential id required.");
      String string0 = credential0.secret();
      assertEquals("Credential id required.", string0);
      assertEquals(")G09EuwoDMmoQr", credential0.authority());
      assertNotNull(string0);
      assertEquals("(%$z3;Z", credential0.id());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom("p/>1Ch@:p$ w/Lm:9", "]", "p/>1Ch@:p$ w/Lm:9");
      String string0 = credential0.id();
      assertEquals("p/>1Ch@:p$ w/Lm:9", credential0.secret());
      assertEquals("]", string0);
      assertEquals("p/>1Ch@:p$ w/Lm:9", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("@", "aVU+~HpMP<\"\"3", "S>&Cz9(h6aA=~+|tG");
      String string0 = credential0.authority();
      assertNotNull(string0);
      assertEquals("@", string0);
      assertEquals("aVU+~HpMP<\"\"3", credential0.id());
      assertEquals("S>&Cz9(h6aA=~+|tG", credential0.secret());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.credentialFrom("", ":", "U}5qy", "* YfV~o3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknow credential type: * YfV~o3
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Credential credential0 = Credential.credentialFrom("Y(A*d", "ku 2Z^nUd", ",/v<D 8J('&[*(n).\"", "VLINGO");
      assertEquals("ku 2Z^nUd", credential0.id());
      assertEquals(",/v<D 8J('&[*(n).\"", credential0.secret());
      assertEquals("Y(A*d", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Credential credential0 = Credential.credentialFrom("&", "ixEeS1", "&", "OAUTH");
      assertEquals("ixEeS1", credential0.id());
      assertEquals("&", credential0.secret());
      assertEquals("&", credential0.authority());
      assertFalse(credential0.isVlingo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Credential.isVlingoType("VLINGO");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Credential.isOAuthType("OAUTH");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("N3/=klx%42", "N3/=klx%42", " type=");
      Credential credential1 = Credential.vlingoCredentialFrom(" type=", "tLf", "N3/=klx%42");
      int int0 = credential0.compareTo(credential1);
      assertEquals(" type=", credential0.secret());
      assertEquals(46, int0);
      assertEquals("N3/=klx%42", credential0.id());
      assertEquals("N3/=klx%42", credential1.secret());
      assertEquals("tLf", credential1.id());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("&", "&", "&");
      Credential credential1 = Credential.vlingoCredentialFrom("N<:`+xsLp", "&", "&");
      int int0 = credential0.compareTo(credential1);
      assertEquals("&", credential1.secret());
      assertEquals((-40), int0);
      assertEquals("&", credential0.id());
      assertEquals("&", credential0.secret());
      assertEquals("&", credential1.id());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Credential.isOAuthType("VLINGO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Credential.isVlingoType("&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.credentialFrom("OVD5UN", "OAUTH", "", "OAUTH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential secret required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.oauthCredentialFrom("L\"yn-as", "L\"yn-as", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential secret required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.vlingoCredentialFrom("olk%9K8C1XeP", "", "olk%9K8C1XeP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential id required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.oauthCredentialFrom("f-XsGv9&M1vd*r[64", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential id required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.vlingoCredentialFrom("", (String) null, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential authority required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Credential.vlingoCredentialFrom((String) null, "N3/=klx%42", "\"elKLjDj&XZ).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential authority required.
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom("-me/2*", "-me/2*", "-me/2*");
      boolean boolean0 = credential0.equals("-me/2*");
      assertEquals("-me/2*", credential0.authority());
      assertEquals("-me/2*", credential0.secret());
      assertFalse(boolean0);
      assertEquals("-me/2*", credential0.id());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom("-^e/2*", "-^e/2*", "+iQH}");
      boolean boolean0 = credential0.equals((Object) null);
      assertEquals("-^e/2*", credential0.authority());
      assertFalse(boolean0);
      assertEquals("+iQH}", credential0.secret());
      assertEquals("-^e/2*", credential0.id());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom(" type=", " type=", " type=");
      boolean boolean0 = credential0.isVlingo();
      assertEquals(" type=", credential0.authority());
      assertTrue(boolean0);
      assertEquals(" type=", credential0.secret());
      assertEquals(" type=", credential0.id());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom(" type=", " type=", " type=");
      boolean boolean0 = credential0.isVlingo();
      assertEquals(" type=", credential0.secret());
      assertFalse(boolean0);
      assertEquals(" type=", credential0.id());
      assertEquals(" type=", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("R[$W5kSgD}c~k{:;/9", "R[$W5kSgD}c~k{:;/9", "R[$W5kSgD}c~k{:;/9");
      boolean boolean0 = credential0.isOauth();
      assertTrue(boolean0);
      assertEquals("R[$W5kSgD}c~k{:;/9", credential0.authority());
      assertEquals("R[$W5kSgD}c~k{:;/9", credential0.id());
      assertEquals("R[$W5kSgD}c~k{:;/9", credential0.secret());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom("\u0002ifxB1(Y#T>;)R;v:", "\u0002ifxB1(Y#T>;)R;v:", "\u0002ifxB1(Y#T>;)R;v:");
      boolean boolean0 = credential0.isOauth();
      assertEquals("\u0002ifxB1(Y#T>;)R;v:", credential0.id());
      assertEquals("\u0002ifxB1(Y#T>;)R;v:", credential0.secret());
      assertFalse(boolean0);
      assertEquals("\u0002ifxB1(Y#T>;)R;v:", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom("f9XYV~f9zK ", "L\"yn-as", "f9XYV~f9zK ");
      assertTrue(credential0.isVlingo());
      
      credential0.hashCode();
      assertEquals("L\"yn-as", credential0.id());
      assertEquals("f9XYV~f9zK ", credential0.secret());
      assertEquals("f9XYV~f9zK ", credential0.authority());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("U", "U", "U");
      // Undeclared exception!
      try { 
        credential0.compareTo((Credential) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Credential", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Credential credential0 = Credential.vlingoCredentialFrom(".:=", ".:=", ".:=");
      credential0.type();
      assertTrue(credential0.isVlingo());
      assertEquals(".:=", credential0.authority());
      assertEquals(".:=", credential0.secret());
      assertEquals(".:=", credential0.id());
  }
}
