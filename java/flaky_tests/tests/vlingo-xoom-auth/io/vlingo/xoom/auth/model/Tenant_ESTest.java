/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:23:32 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.Role;
import io.vlingo.xoom.auth.model.Tenant;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tenant_ESTest extends Tenant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor((String) null, "Group", true);
      tenant0.hashCode();
      assertTrue(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("", "", false);
      tenant0.tenantId();
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("ER^9E17R", " active=", false);
      PersonName personName0 = PersonName.of("ER^9E17R", "ER^9E17R", ">>Q}+!t|b&l}L=A");
      EmailAddress emailAddress0 = EmailAddress.of(">>Q}+!t|b&l}L=A");
      Phone phone0 = Phone.of(">>Q}+!t|b&l}L=A");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.oauthCredentialFrom("OAUTH", "ER^9E17R", "Z{[~F?J_ ~^ZYP<YE");
      User user0 = tenant0.registerUser("ER^9E17R", profile0, credential0, true);
      assertTrue(user0.isActive());
      assertFalse(tenant0.isActive());
      assertEquals(" active=", tenant0.description());
      assertEquals("ER^9E17R", tenant0.name());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      PersonName personName0 = PersonName.of("UY.K\"@}T", "41", "?']L");
      EmailAddress emailAddress0 = new EmailAddress("]");
      Phone phone0 = Phone.of("?']L");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.oauthCredentialFrom("?']L", "-z", "-z");
      User user0 = tenant0.registerUser("e^;g(,}x=_!02t", profile0, credential0, false);
      assertFalse(user0.isActive());
      assertFalse(tenant0.isActive());
      assertEquals("]", tenant0.name());
      assertEquals("e^;g(,}x=_!02t", tenant0.description());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      Role role0 = tenant0.provisionRole("]", "1T%7ZEb`4'Ft;KEa");
      assertFalse(tenant0.isActive());
      assertEquals("]", tenant0.name());
      assertEquals("]", role0.name());
      assertEquals("e^;g(,}x=_!02t", tenant0.description());
      assertEquals("1T%7ZEb`4'Ft;KEa", role0.description());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("", "", false);
      tenant0.provisionPermission("", "");
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor(" eq+!B_zq/", "5 _YLl0Axjizjh+", false);
      tenant0.provisionGroup("vW)\no*\"&~>\"BMH&14", "vW)\no*\"&~>\"BMH&14");
      assertEquals(" eq+!B_zq/", tenant0.name());
      assertEquals("5 _YLl0Axjizjh+", tenant0.description());
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("", "", false);
      assertFalse(tenant0.isActive());
      
      tenant0.activate();
      boolean boolean0 = tenant0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor((String) null, "", true);
      String string0 = tenant0.description();
      assertTrue(tenant0.isActive());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      // Undeclared exception!
      try { 
        tenant0.equals(tenant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Tenant", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      Object object0 = new Object();
      boolean boolean0 = tenant0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      boolean boolean0 = tenant0.equals(tenant0);
      assertTrue(boolean0);
      assertEquals("]", tenant0.name());
      assertEquals("e^;g(,}x=_!02t", tenant0.description());
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      boolean boolean0 = tenant0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      boolean boolean0 = tenant0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("4", "4", false);
      boolean boolean0 = tenant0.doesNotExist();
      assertFalse(tenant0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      tenant0.NonExisting.changeName(" active=");
      assertEquals(" active=", tenant0.name());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      // Undeclared exception!
      try { 
        tenant0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Tenant", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      tenant0.provisionRole(" active=", " active=");
      assertTrue(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      String string0 = tenant0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      String string0 = tenant0.toString();
      assertEquals("Tenant[tenantId=TenantId[value=00000000-0100-4000-8200-000003000000] name=] description=e^;g(,}x=_!02t active=false]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      assertEquals("e^;g(,}x=_!02t", tenant0.description());
      
      tenant0.changeDescription("");
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      String string0 = tenant0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      tenant0.NonExisting.deactivate();
      assertFalse(tenant0.isActive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      TenantId tenantId0 = tenant0.tenantId();
      assertNull(tenantId0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      // Undeclared exception!
      try { 
        tenant0.registerUser("UKjk4`N'1N()>G]]", (Profile) null, (Credential) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User tenant id required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor("]", "e^;g(,}x=_!02t", false);
      Permission permission0 = tenant0.NonExisting.provisionPermission("e^;g(,}x=_!02t", "");
      assertEquals("]", tenant0.name());
      assertEquals("e^;g(,}x=_!02t", tenant0.description());
      assertFalse(tenant0.isActive());
      assertEquals("e^;g(,}x=_!02t", permission0.name());
      assertEquals("", permission0.description());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tenant tenant0 = Tenant.NonExisting;
      boolean boolean0 = tenant0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tenant tenant0 = Tenant.subscribeFor(" eq+!B_zq/", "5 _YLl0Axjizjh+", false);
      Group group0 = tenant0.NonExisting.provisionGroup(" eq+!B_zq/", "Tenant[tenantId=TenantId[value=00000000-0100-4000-8200-000003000000] name= eq+!B_zq/ description=5 _YLl0Axjizjh+ active=false]");
      assertEquals("Tenant[tenantId=TenantId[value=00000000-0100-4000-8200-000003000000] name= eq+!B_zq/ description=5 _YLl0Axjizjh+ active=false]", group0.description());
      assertEquals(" eq+!B_zq/", group0.name());
      assertFalse(tenant0.isActive());
      assertEquals("5 _YLl0Axjizjh+", tenant0.description());
      assertEquals(" eq+!B_zq/", tenant0.name());
  }
}
