/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:21:25 GMT 2022
 */

package io.vlingo.xoom.auth.infra.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryGroupRepository;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.TenantId;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryGroupRepository_ESTest extends InMemoryGroupRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        inMemoryGroupRepository0.save(group0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      // Undeclared exception!
      try { 
        inMemoryGroupRepository0.groupsOf((TenantId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      // Undeclared exception!
      try { 
        inMemoryGroupRepository0.groupOf((TenantId) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "bLJ3`\"oN8<}s");
      inMemoryGroupRepository0.save(group0);
      TenantId tenantId1 = TenantId.fromExisting("bLJ3`\"oN8<}s");
      Collection<Group> collection0 = inMemoryGroupRepository0.groupsOf(tenantId1);
      assertFalse(collection0.contains(group0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "bLJ3`\"oN8<}s");
      inMemoryGroupRepository0.save(group0);
      Collection<Group> collection0 = inMemoryGroupRepository0.groupsOf(tenantId0);
      assertTrue(collection0.contains(group0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "bLJ3`\"oN8<}s");
      inMemoryGroupRepository0.save(group0);
      Group group1 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertFalse(group1.doesNotExist());
  }
}
