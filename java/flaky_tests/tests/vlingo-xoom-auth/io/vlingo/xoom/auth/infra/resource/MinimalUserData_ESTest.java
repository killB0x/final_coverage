/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:31:05 GMT 2022
 */

package io.vlingo.xoom.auth.infra.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.resource.MinimalUserData;
import io.vlingo.xoom.auth.infra.resource.PersonNameData;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinimalUserData_ESTest extends MinimalUserData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersonNameData personNameData0 = PersonNameData.of("WJyg-i:JGYkLJx", "", "WJyg-i:JGYkLJx");
      MinimalUserData minimalUserData0 = MinimalUserData.from("", "WJyg-i:JGYkLJx", personNameData0, true);
      assertTrue(minimalUserData0.active);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<User> linkedList0 = new LinkedList<User>();
      User user0 = User.NonExisting;
      linkedList0.add(user0);
      // Undeclared exception!
      try { 
        MinimalUserData.from((Collection<User>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.MinimalUserData", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        MinimalUserData.from(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.MinimalUserData", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("_VeZ38<Jh", "", "_VeZ38<Jh");
      EmailAddress emailAddress0 = EmailAddress.of("$VALUES");
      Phone phone0 = Phone.of("Hq >8]");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("es", "Hq >8]", "+HBRpv");
      User user0 = User.of(tenantId0, "00000000-0100-4000-8200-000003000000", profile0, credential0, true);
      MinimalUserData minimalUserData0 = MinimalUserData.from(user0);
      MinimalUserData minimalUserData1 = MinimalUserData.from("B1P", "B1P", minimalUserData0.name, true);
      assertTrue(minimalUserData1.active);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<User> linkedList0 = new LinkedList<User>();
      TenantId tenantId0 = TenantId.fromExisting("9mNd%<(!SK91_Xmh'");
      PersonName personName0 = PersonName.of("9t]", "io.vlingo.xoom.auth.infra.resource.MinimalUserData", "9mNd%<(!SK91_Xmh'");
      EmailAddress emailAddress0 = EmailAddress.of("9mNd%<(!SK91_Xmh'");
      Phone phone0 = new Phone("9mNd%<(!SK91_Xmh'");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("r", "io.vlingo.xoom.auth.infra.resource.MinimalUserData", "io.vlingo.xoom.auth.infra.resource.MinimalUserData");
      User user0 = User.of(tenantId0, "9mNd%<(!SK91_Xmh'", profile0, credential0, false);
      linkedList0.add(user0);
      Collection<MinimalUserData> collection0 = MinimalUserData.from((Collection<User>) linkedList0);
      assertNotNull(collection0);
  }
}
