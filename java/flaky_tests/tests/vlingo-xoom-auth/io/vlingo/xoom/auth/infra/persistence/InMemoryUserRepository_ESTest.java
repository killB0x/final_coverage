/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:19:18 GMT 2022
 */

package io.vlingo.xoom.auth.infra.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryUserRepository;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryUserRepository_ESTest extends InMemoryUserRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      TenantId tenantId0 = TenantId.unique();
      User user0 = User.NonExisting;
      user0.activate();
      User user1 = inMemoryUserRepository0.userOf(tenantId0, "=U(9VVd;");
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      // Undeclared exception!
      try { 
        inMemoryUserRepository0.usersOf((TenantId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      // Undeclared exception!
      try { 
        inMemoryUserRepository0.userOf((TenantId) null, "}t.^yJp\"P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      TenantId tenantId0 = TenantId.fromExisting("Credential[authority=");
      PersonName personName0 = PersonName.of("Credential[authority=", "Credential[authority=", "Credential[authority=");
      EmailAddress emailAddress0 = EmailAddress.of("Credential[authority=");
      Profile profile0 = Profile.with(personName0, emailAddress0, (Phone) null);
      Credential credential0 = Credential.oauthCredentialFrom("Credential[authority=", "Credential[authority=", "Credential[authority=");
      User user0 = User.of(tenantId0, "Credential[authority=", profile0, credential0, false);
      inMemoryUserRepository0.save(user0);
      TenantId tenantId1 = TenantId.unique();
      Collection<User> collection0 = inMemoryUserRepository0.usersOf(tenantId1);
      assertFalse(collection0.contains(user0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("Credential[authority=:Credential[authority=:i", "~Eutk", "io.vlingo.xoom.auth.infra.persistence.InMemoryUserRepository");
      EmailAddress emailAddress0 = EmailAddress.of("io.vlingo.xoom.auth.infra.persistence.InMemoryUserRepository");
      Profile profile0 = Profile.with(personName0, emailAddress0, (Phone) null);
      Credential credential0 = Credential.oauthCredentialFrom("bzh", "x./XkFKMnHbYU1<6Q", " description=");
      User user0 = User.of(tenantId0, "+YbKcm'$b!.JTa", profile0, credential0, false);
      inMemoryUserRepository0.save(user0);
      Collection<User> collection0 = inMemoryUserRepository0.usersOf(tenantId0);
      assertTrue(collection0.contains(user0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      TenantId tenantId0 = TenantId.unique();
      User user0 = inMemoryUserRepository0.userOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        inMemoryUserRepository0.save(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InMemoryUserRepository inMemoryUserRepository0 = new InMemoryUserRepository();
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("Credential[authority=:Credential[authority=:i", "~Eutk", "io.vlingo.xoom.auth.infra.persistence.InMemoryUserRepository");
      EmailAddress emailAddress0 = EmailAddress.of("io.vlingo.xoom.auth.infra.persistence.InMemoryUserRepository");
      Profile profile0 = Profile.with(personName0, emailAddress0, (Phone) null);
      Credential credential0 = Credential.oauthCredentialFrom("bzh", "x./XkFKMnHbYU1<6Q", " description=");
      User user0 = User.of(tenantId0, "+YbKcm'$b!.JTa", profile0, credential0, false);
      inMemoryUserRepository0.save(user0);
      User user1 = inMemoryUserRepository0.userOf(tenantId0, "+YbKcm'$b!.JTa");
      assertFalse(user1.doesNotExist());
  }
}
