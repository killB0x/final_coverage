/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:28:19 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.model.TenantId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TenantId_ESTest extends TenantId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      TenantId tenantId1 = TenantId.unique();
      boolean boolean0 = tenantId1.equals(tenantId0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting((String) null);
      // Undeclared exception!
      try { 
        tenantId0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.TenantId", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting((String) null);
      // Undeclared exception!
      try { 
        tenantId0.equals(tenantId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      boolean boolean0 = tenantId0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      boolean boolean0 = tenantId0.equals(tenantId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      tenantId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      String string0 = tenantId0.toString();
      assertEquals("TenantId[value=]", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      boolean boolean0 = tenantId0.equals((Object) null);
      assertFalse(boolean0);
  }
}
