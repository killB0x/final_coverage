/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 21:55:37 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryGroupRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryLoader;
import io.vlingo.xoom.auth.infra.persistence.InMemoryPermissionRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryRoleRepository;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.Loader;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.PermissionRepository;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.Role;
import io.vlingo.xoom.auth.model.RoleRepository;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Group_ESTest extends Group_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "Credential secret required.", ".");
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      Group group1 = Group.forRole(tenantId0, "00000000-0100-4000-8200-000003000000", (String) null);
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group0.hasMember(group1, (Loader) inMemoryLoader0);
      assertEquals(".", group0.description());
      assertFalse(boolean0);
      assertFalse(group1.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      Group group1 = Group.forRole(tenantId0, "([;04^v})o", "[l{K");
      group0.assign(group1);
      group0.unassign(group1);
      assertEquals("([;04^v})o", group1.name());
      assertEquals("[l{K", group1.description());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      Group group1 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      group0.unassign(group1);
      assertFalse(group1.equals((Object)group0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryLoader0.loadGroup(tenantId0, "c=_(i:*'cr");
      Group group1 = Group.forRole(tenantId0, "00000000-0100-4000-8200-000003000000", "ho`{u");
      group0.unassignFrom(group1);
      assertEquals("ho`{u", group1.description());
      assertEquals("00000000-0100-4000-8200-000003000000", group1.name());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(";1W7)7&j GTJ7brJIe");
      Group group0 = Group.forRole(tenantId0, ";1W7)7&j GTJ7brJIe", "i");
      Role role0 = Role.with(tenantId0, ";1W7)7&j GTJ7brJIe", ";1W7)7&j GTJ7brJIe");
      group0.unassignFrom(role0);
      assertEquals(";1W7)7&j GTJ7brJIe", group0.name());
      assertEquals("i", group0.description());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Group group0 = Group.NonExisting;
      TenantId tenantId0 = group0.tenantId();
      assertNull(tenantId0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      Group group0 = Group.with(tenantId0, "", "]_Is");
      group0.tenantId();
      assertEquals("", group0.name());
      assertEquals("]_Is", group0.description());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Group group0 = Group.NonExisting;
      String string0 = group0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      String string0 = group0.name();
      assertEquals("([;04^v})o", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      Group group0 = Group.with(tenantId0, "", "a'ePkoB$]Qi");
      String string0 = group0.name();
      assertEquals("a'ePkoB$]Qi", group0.description());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      boolean boolean0 = group0.isNormalGroup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Group group0 = Group.NonExisting;
      boolean boolean0 = group0.isNormalGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryLoader0.loadGroup(tenantId0, "00000000-0100-4000-8200-000003000000");
      Role role0 = inMemoryLoader0.loadRole(tenantId0, "00000000-0100-4000-8200-000003000000");
      group0.isInRole(role0, (Loader) inMemoryLoader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      Group group0 = Group.with(tenantId0, (String) null, (String) null);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Permission permission0 = inMemoryLoader0.loadPermission(tenantId0, "");
      group0.NonExisting.hasPermission(permission0, (Loader) inMemoryLoader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Group group0 = Group.forRole((TenantId) null, "PersonName given required.", "PersonName given required.");
      assertTrue(group0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Group group0 = Group.NonExisting;
      String string0 = group0.description();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "Xov:PwE7z?o", "");
      String string0 = group0.description();
      assertEquals("Xov:PwE7z?o", group0.name());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Group group0 = Group.NonExisting;
      // Undeclared exception!
      try { 
        group0.unassignFrom(group0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Group group0 = Group.NonExisting;
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        group0.unassign(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Group group0 = Group.NonExisting;
      // Undeclared exception!
      try { 
        group0.unassign(group0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryLoader0.loadGroup(tenantId0, "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        group0.isInRole((Role) null, (Loader) inMemoryLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Group group0 = Group.NonExisting;
      // Undeclared exception!
      try { 
        group0.assignTo((Role) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember$RoleMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Group group0 = Group.NonExisting;
      // Undeclared exception!
      try { 
        group0.NonExisting.assignTo((Group) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember$GroupMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Group group0 = Group.NonExisting;
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        group0.NonExisting.assign(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        group0.NonExisting.assign(group0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "Credential secret required.", ".");
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      group0.assign(group0);
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group0.hasMember(group0, (Loader) inMemoryLoader0);
      assertTrue(boolean0);
      assertEquals(".", group0.description());
      assertEquals("Credential secret required.", group0.name());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      boolean boolean0 = group0.isRoleGroup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      boolean boolean0 = group0.isRoleGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      Group group1 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      group1.assignTo(group0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      inMemoryGroupRepository0.save(group0);
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group1.isInRole("([;04^v})o", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;0f4^v})o");
      Group group0 = Group.with(tenantId0, "([;0f4^v})o", "([;0f4^v})o");
      group0.assignTo(group0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group0.isInRole("([;0f4^v})o", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Group group0 = Group.NonExisting;
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      User user0 = User.NonExisting;
      boolean boolean0 = group0.isInRole("Ro^nleGroup", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      Group group1 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      group1.assignTo(group0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      inMemoryGroupRepository0.save(group0);
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group1.hasPermission("([;04^v})o", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      group0.assignTo(group0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group0.hasPermission("([;04^v})o", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("([;04^v})o");
      Group group0 = Group.with(tenantId0, "([;04^v})o", "([;04^v})o");
      Role role0 = Role.with(tenantId0, "([;04^v})o", "PersonName given required.");
      group0.assignTo(role0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = group0.hasPermission("([;04^v})o", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000", "d^3<[X~D'mvArM![");
      EmailAddress emailAddress0 = EmailAddress.of("d^3<[X~D'mvArM![");
      Phone phone0 = Phone.of("00000000-0100-4000-8200-000003000000");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("HRs", "d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000");
      User user0 = User.of(tenantId0, "NE]V\"", profile0, credential0, false);
      Group group0 = Group.forRole(tenantId0, "d^3<[X~D'mvArM![", "d^3<[X~D'mvArM![");
      group0.assign(user0);
      group0.unassign(user0);
      assertEquals("d^3<[X~D'mvArM![", group0.name());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000", "d^3<[X~D'mvArM![");
      EmailAddress emailAddress0 = EmailAddress.of("d^3<[X~D'mvArM![");
      Phone phone0 = Phone.of("00000000-0100-4000-8200-000003000000");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("HRs", "d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000");
      User user0 = User.of(tenantId0, "NE]V\"", profile0, credential0, false);
      Group group0 = Group.with(tenantId0, "!Vmr69Y\"~I~Gd7]T]_k", "g(:x9q{|7\"eV4>");
      group0.assign(user0);
      group0.unassign(user0);
      assertEquals("g(:x9q{|7\"eV4>", group0.description());
      assertEquals("!Vmr69Y\"~I~Gd7]T]_k", group0.name());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000", "d^3<[X~D'mvArM![");
      EmailAddress emailAddress0 = EmailAddress.of("d^3<[X~D'mvArM![");
      Phone phone0 = Phone.of("00000000-0100-4000-8200-000003000000");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("HRs", "d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000");
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Group group0 = inMemoryLoader0.loadGroup(tenantId0, "HRs");
      User user0 = User.of(tenantId0, "xoom-platform", profile0, credential0, false);
      group0.unassign(user0);
      assertNull(group0.name());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000", "d^3<[X~D'mvArM![");
      EmailAddress emailAddress0 = EmailAddress.of("d^3<[X~D'mvArM![");
      Phone phone0 = Phone.of("00000000-0100-4000-8200-000003000000");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.vlingoCredentialFrom("HRs", "d^3<[X~D'mvArM![", "00000000-0100-4000-8200-000003000000");
      User user0 = User.of(tenantId0, "00000000-0100-4000-8200-000003000000", profile0, credential0, false);
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "d^3<[X~D'mvArM![");
      group0.assign(user0);
      group0.assign(user0);
      assertEquals("d^3<[X~D'mvArM![", group0.description());
      assertEquals("00000000-0100-4000-8200-000003000000", group0.name());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      Group group1 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      group0.NonExisting.assign(group1);
      assertNull(group0.name());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("0");
      Group group0 = Group.with(tenantId0, (String) null, (String) null);
      boolean boolean0 = group0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "io.vlingo.xoom.auth.model.Permission", "00000000-0100-4000-8200-000003000000");
      boolean boolean0 = group0.doesNotExist();
      assertFalse(boolean0);
      assertEquals("io.vlingo.xoom.auth.model.Permission", group0.name());
      assertEquals("00000000-0100-4000-8200-000003000000", group0.description());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Group group0 = Group.NonExisting;
      boolean boolean0 = group0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.forRole(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      String string0 = group0.description();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Group group0 = Group.NonExisting;
      Role role0 = Role.NonExisting;
      // Undeclared exception!
      try { 
        group0.unassignFrom(role0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Group group0 = Group.NonExisting;
      TenantId tenantId0 = TenantId.fromExisting("d^3<[X~D'mvArM![");
      Role role0 = Role.with(tenantId0, "", "d^3<[X~D'mvArM![");
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, (RoleRepository) null);
      boolean boolean0 = group0.NonExisting.isInRole(role0, (Loader) inMemoryLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "2\u0005^w+A~c|E]");
      String string0 = group0.toString();
      assertEquals("Group[tenantId=TenantId[value=00000000-0100-4000-8200-000003000000] name=00000000-0100-4000-8200-000003000000 description=2\u0005^w+A~c|E] type=Group members=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Group group0 = Group.NonExisting;
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, inMemoryRoleRepository0);
      // Undeclared exception!
      try { 
        group0.hasPermission((Permission) null, (Loader) inMemoryLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Group group0 = Group.NonExisting;
      group0.changeDescription("d^3<[X~D'mvArM![");
      assertEquals("d^3<[X~D'mvArM![", group0.description());
  }
}
