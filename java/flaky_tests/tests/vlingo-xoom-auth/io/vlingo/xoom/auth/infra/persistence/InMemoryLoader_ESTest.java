/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:32:36 GMT 2022
 */

package io.vlingo.xoom.auth.infra.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryGroupRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryLoader;
import io.vlingo.xoom.auth.infra.persistence.InMemoryPermissionRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryRoleRepository;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.GroupRepository;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.PermissionRepository;
import io.vlingo.xoom.auth.model.Role;
import io.vlingo.xoom.auth.model.RoleRepository;
import io.vlingo.xoom.auth.model.TenantId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryLoader_ESTest extends InMemoryLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.fromExisting("@-j#&63,+z8uQ|A");
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Role role0 = Role.with(tenantId0, "@-j#&63,+z8uQ|A", "UxC&oOLeW");
      inMemoryRoleRepository0.save(role0);
      Role role1 = inMemoryLoader0.loadRole(tenantId0, "@-j#&63,+z8uQ|A");
      assertSame(role1, role0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", "g>qAI|hU82#5");
      inMemoryPermissionRepository0.save(permission0);
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Permission permission1 = inMemoryLoader0.loadPermission(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertEquals("00000000-0100-4000-8200-000003000000", permission1.name());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryLoader0.loadGroup(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertTrue(group0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = Group.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      inMemoryGroupRepository0.save(group0);
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, inMemoryRoleRepository0);
      Group group1 = inMemoryLoader0.loadGroup(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertEquals("00000000-0100-4000-8200-000003000000", group1.description());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, (RoleRepository) null);
      // Undeclared exception!
      try { 
        inMemoryLoader0.loadRole(tenantId0, "00000000-0100-4000-8200-000003000000");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.InMemoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, (RoleRepository) null);
      TenantId tenantId0 = TenantId.unique();
      // Undeclared exception!
      try { 
        inMemoryLoader0.loadPermission(tenantId0, "00000000-0100-4000-8200-000003000000");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.InMemoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Role role0 = inMemoryLoader0.loadRole(tenantId0, "");
      assertTrue(role0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Permission permission0 = inMemoryLoader0.loadPermission(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertTrue(permission0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader((GroupRepository) null, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.unique();
      // Undeclared exception!
      try { 
        inMemoryLoader0.loadGroup(tenantId0, "00000000-0100-4000-8200-000003000000");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.InMemoryLoader", e);
      }
  }
}
