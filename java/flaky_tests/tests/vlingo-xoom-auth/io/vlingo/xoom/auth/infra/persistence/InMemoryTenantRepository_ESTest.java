/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:22:28 GMT 2022
 */

package io.vlingo.xoom.auth.infra.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryTenantRepository;
import io.vlingo.xoom.auth.model.Tenant;
import io.vlingo.xoom.auth.model.TenantId;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryTenantRepository_ESTest extends InMemoryTenantRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Tenant tenant0 = Tenant.subscribeFor("hz.~M[Y;5^", "", false);
      tenant0.changeName("<|v,B`LB0Q1");
      inMemoryTenantRepository0.save(tenant0);
      Tenant tenant1 = inMemoryTenantRepository0.tenantOf("<|v,B`LB0Q1");
      assertEquals("", tenant1.description());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Tenant tenant0 = Tenant.subscribeFor((String) null, (String) null, true);
      inMemoryTenantRepository0.save(tenant0);
      // Undeclared exception!
      try { 
        inMemoryTenantRepository0.tenantOf("00000000-0100-4000-8200-000003000000");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      // Undeclared exception!
      try { 
        inMemoryTenantRepository0.tenantOf((TenantId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.InMemoryTenantRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      // Undeclared exception!
      try { 
        inMemoryTenantRepository0.save((Tenant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.InMemoryTenantRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      TenantId tenantId0 = TenantId.unique();
      Tenant tenant0 = inMemoryTenantRepository0.tenantOf(tenantId0);
      assertNull(tenant0.name());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Tenant tenant0 = Tenant.subscribeFor("00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000", true);
      inMemoryTenantRepository0.save(tenant0);
      TenantId tenantId0 = TenantId.fromExisting("00000000-0100-4000-8200-000003000000");
      Tenant tenant1 = inMemoryTenantRepository0.tenantOf(tenantId0);
      assertFalse(tenant1.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Tenant tenant0 = Tenant.subscribeFor("00000000-0100-4000-8200-000003000000", "p%>~>gl.r", true);
      inMemoryTenantRepository0.save(tenant0);
      Tenant tenant1 = inMemoryTenantRepository0.tenantOf("p%>~>gl.r");
      assertNull(tenant1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Collection<Tenant> collection0 = inMemoryTenantRepository0.allTenants();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InMemoryTenantRepository inMemoryTenantRepository0 = new InMemoryTenantRepository();
      Tenant tenant0 = Tenant.subscribeFor("00000000-0100-4000-8200-000003000000", "p%>~>gl.r", true);
      inMemoryTenantRepository0.save(tenant0);
      Tenant tenant1 = inMemoryTenantRepository0.tenantOf("00000000-0100-4000-8200-000003000000");
      assertSame(tenant1, tenant0);
  }
}
