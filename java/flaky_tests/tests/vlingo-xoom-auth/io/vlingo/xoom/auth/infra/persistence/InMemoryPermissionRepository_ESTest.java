/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:18:14 GMT 2022
 */

package io.vlingo.xoom.auth.infra.persistence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryPermissionRepository;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.TenantId;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryPermissionRepository_ESTest extends InMemoryPermissionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = inMemoryPermissionRepository0.permissionOf(tenantId0, "a.Tu0\"grJk;");
      // Undeclared exception!
      try { 
        inMemoryPermissionRepository0.save(permission0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.fromExisting((String) null);
      Permission permission0 = Permission.with(tenantId0, (String) null, "08000000-0900-4000-8a00-00000b000000");
      inMemoryPermissionRepository0.save(permission0);
      // Undeclared exception!
      try { 
        inMemoryPermissionRepository0.permissionsOf(tenantId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.TenantId", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      // Undeclared exception!
      try { 
        inMemoryPermissionRepository0.permissionOf((TenantId) null, "Cu,[H[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.persistence.BaseRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      TenantId tenantId1 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId1, "00000000-0100-4000-8200-000003000000", "04000000-0500-4000-8600-000007000000");
      inMemoryPermissionRepository0.save(permission0);
      Collection<Permission> collection0 = inMemoryPermissionRepository0.permissionsOf(tenantId0);
      assertFalse(collection0.contains(permission0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", "04000000-0500-4000-8600-000007000000");
      inMemoryPermissionRepository0.save(permission0);
      Permission permission1 = inMemoryPermissionRepository0.permissionOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      assertFalse(permission1.doesNotExist());
  }
}
