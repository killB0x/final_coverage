/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:26:26 GMT 2022
 */

package io.vlingo.xoom.auth.infra.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.resource.PersonNameData;
import io.vlingo.xoom.auth.infra.resource.ProfileData;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProfileData_ESTest extends ProfileData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersonNameData personNameData0 = new PersonNameData("xFYS", "xFYS", "xFYS");
      ProfileData profileData0 = ProfileData.from(personNameData0, "xFYS", "xFYS");
      assertNotNull(profileData0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProfileData.from((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.ProfileData", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PersonNameData personNameData0 = PersonNameData.of("9uGRU&", "9uGRU&", "9uGRU&");
      ProfileData profileData0 = new ProfileData(personNameData0, "", "9uGRU&");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProfileData profileData0 = null;
      try {
        profileData0 = new ProfileData((PersonNameData) null, "tl=q1l5ryq)gnVb7%c", "tl=q1l5ryq)gnVb7%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name required.
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.ProfileData", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PersonNameData personNameData0 = PersonNameData.of("Jn9#;,", "Jn9#;,", "Jn9#;,");
      ProfileData profileData0 = null;
      try {
        profileData0 = new ProfileData(personNameData0, (String) null, "io.vlingo.xoom.auth.infra.resource.ProfileData");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Email address required.
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.ProfileData", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PersonNameData personNameData0 = PersonNameData.of((String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        ProfileData.from(personNameData0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Email address required.
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.ProfileData", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      User user0 = User.NonExisting;
      PersonName personName0 = PersonName.of("a!JC%/9Z", "a!JC%/9Z", "Credential type required.");
      EmailAddress emailAddress0 = EmailAddress.of(">I\u0002QfxC\"b>^TA-7*wM");
      Phone phone0 = new Phone("Credential type required.");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      user0.replace(profile0);
      ProfileData profileData0 = ProfileData.from(user0);
      assertNotNull(profileData0);
  }
}
