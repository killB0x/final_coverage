/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:05:46 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.model.Constraint;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.TenantId;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Permission_ESTest extends Permission_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", (String) null);
      permission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", (String) null);
      permission0.tenantId();
      assertFalse(permission0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission0 = Permission.with(tenantId0, "8W", "J~&/");
      String string0 = permission0.name();
      assertEquals("J~&/", permission0.description());
      assertEquals("8W", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "", "");
      String string0 = permission0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      permission0.changeDescription("Tx~l");
      String string0 = permission0.description();
      assertEquals("Tx~l", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      Permission permission0 = Permission.with(tenantId0, "", "");
      String string0 = permission0.description();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Constraint.Type constraint_Type0 = Constraint.Type.Integer;
      Constraint constraint0 = Constraint.of(constraint_Type0, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        permission0.forget(constraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Constraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      // Undeclared exception!
      try { 
        permission0.equals(permission0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Permission", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Constraint constraint0 = permission0.constraintOf("s::*,q_ECogwCb!8Gfw");
      Constraint.Type constraint_Type0 = Constraint.Type.String;
      permission0.enforce(constraint0);
      Constraint constraint1 = new Constraint(constraint_Type0, (String) null, "J~&/", "cuV>*oPz3R@,q");
      // Undeclared exception!
      try { 
        permission0.enforce(constraint0, constraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Constraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Constraint.Type constraint_Type0 = Constraint.Type.Boolean;
      Constraint constraint0 = new Constraint(constraint_Type0, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        permission0.enforce(constraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Constraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Constraint.Type constraint_Type0 = Constraint.Type.String;
      Constraint constraint0 = Constraint.of(constraint_Type0, "J~&/", "J~&/", "4jE_$/I16=`~5Wc(G:");
      permission0.enforce(constraint0);
      Constraint constraint1 = permission0.constraintOf("");
      assertNull(constraint1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Constraint.Type constraint_Type0 = Constraint.Type.String;
      Constraint constraint0 = Constraint.of(constraint_Type0, "J~&/", "J~&/", "4jE_$/I16=`~5Wc(G:");
      permission0.enforce(constraint0);
      Constraint constraint1 = permission0.constraintOf("J~&/");
      assertSame(constraint1, constraint0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission0 = Permission.with(tenantId0, "8W", "J~&/");
      Permission permission1 = Permission.with(tenantId0, "lZ[CnHwLik]^1", "!BgW");
      boolean boolean0 = permission0.equals(permission1);
      assertEquals("lZ[CnHwLik]^1", permission1.name());
      assertEquals("!BgW", permission1.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission1 = Permission.with(tenantId0, "8W", "J~&/");
      boolean boolean0 = permission1.equals(permission0);
      assertEquals("8W", permission1.name());
      assertEquals("J~&/", permission1.description());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Object object0 = new Object();
      boolean boolean0 = permission0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission0 = Permission.with(tenantId0, "\u0005\"d", "\u0005\"d");
      boolean boolean0 = permission0.equals(permission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      boolean boolean0 = permission0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      // Undeclared exception!
      try { 
        permission0.enforce((Constraint) null, (Constraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing previous constraint.
         //
         verifyException("io.vlingo.xoom.auth.model.Permission", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQdXn0[Vc/jY");
      Permission permission0 = Permission.with(tenantId0, (String) null, "yQdXn0[Vc/jY");
      boolean boolean0 = permission0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission0 = Permission.with(tenantId0, "\u0005\"d", "\u0005\"d");
      boolean boolean0 = permission0.doesNotExist();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      boolean boolean0 = permission0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      permission0.forget((Constraint) null);
      assertTrue(permission0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      // Undeclared exception!
      try { 
        permission0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.Permission", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      Set<Constraint> set0 = permission0.constraints();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      TenantId tenantId0 = permission0.tenantId();
      assertNull(tenantId0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      permission0.enforce((Constraint) null);
      permission0.enforce((Constraint) null, (Constraint) null);
      assertNull(permission0.description());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      String string0 = permission0.name();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("yQd\n0[Vcy'Y");
      Permission permission0 = Permission.with(tenantId0, "\u0005\"d", "\u0005\"d");
      String string0 = permission0.toString();
      assertEquals("Permission[tenantId=TenantId[value=yQd\n0[Vcy'Y] name=\u0005\"d description=\u0005\"d constraints=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Permission permission0 = Permission.NonExisting;
      String string0 = permission0.description();
      assertNull(string0);
  }
}
