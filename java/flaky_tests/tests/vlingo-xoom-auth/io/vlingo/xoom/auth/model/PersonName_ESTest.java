/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:17:11 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.model.PersonName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PersonName_ESTest extends PersonName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersonName personName0 = PersonName.of(",9IXhEe)/kH9Y(mS", "S<u4\"H#", "PersonName given required.");
      PersonName personName1 = personName0.withSecondOf("S<u4\"H#");
      assertNotSame(personName0, personName1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PersonName personName0 = PersonName.of("n^5;^/[SXi`d", "rewpbFry8i$ m", "rewpbFry8i$ m");
      PersonName personName1 = personName0.withGivenOf("?ONr~*O(2E");
      assertFalse(personName1.equals((Object)personName0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PersonName personName0 = PersonName.of("'_E$2$C^A7d`v", "'_E$2$C^A7d`v", "'_E$2$C^A7d`v");
      PersonName personName1 = personName0.withFamilyOf("no");
      PersonName personName2 = personName1.withGivenOf("io.vlingo.xoom.auth.model.PersonName");
      assertFalse(personName2.equals((Object)personName0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PersonName personName0 = PersonName.of("n^5;^/[SXi`d", "rewpbFry8i$ m", "rewpbFry8i$ m");
      PersonName personName1 = personName0.withSecondOf("jO'");
      // Undeclared exception!
      try { 
        personName1.withFamilyOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PersonName family required.
         //
         verifyException("io.vlingo.xoom.auth.model.PersonName", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PersonName personName0 = PersonName.of("n^5;^/[SXi`d", "rewpbFry8i$ m", "rewpbFry8i$ m");
      // Undeclared exception!
      try { 
        personName0.withFamilyOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PersonName family required.
         //
         verifyException("io.vlingo.xoom.auth.model.PersonName", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        PersonName.of("}", "}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PersonName family required.
         //
         verifyException("io.vlingo.xoom.auth.model.PersonName", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        PersonName.of((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PersonName given required.
         //
         verifyException("io.vlingo.xoom.auth.model.PersonName", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PersonName personName0 = PersonName.of("]", "]", "]");
      // Undeclared exception!
      try { 
        personName0.withGivenOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PersonName given required.
         //
         verifyException("io.vlingo.xoom.auth.model.PersonName", e);
      }
  }
}
