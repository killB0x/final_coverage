/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 21:59:42 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryGroupRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryLoader;
import io.vlingo.xoom.auth.infra.persistence.InMemoryPermissionRepository;
import io.vlingo.xoom.auth.infra.persistence.InMemoryRoleRepository;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.GroupRepository;
import io.vlingo.xoom.auth.model.Loader;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.PermissionRepository;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.Role;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      user0.replace(credential0, (Credential) null);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("P", "L^~_/?hcG<", "opJF");
      PersonName personName0 = PersonName.of("User tenant id required.", "g1U;-v<[?uSx~X,", "[J3PWVmj1K,");
      EmailAddress emailAddress0 = new EmailAddress("[J3PWVmj1K,");
      Phone phone0 = Phone.of("io.vlingo.xoom.auth.model.User");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, ".", profile0, credential0, false);
      Role role0 = Role.with(tenantId0, "lDfn?D@,R!`FX", "User tenant id required.");
      user0.unassignFrom(role0);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      user0.remove(credential0);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = User.NonExisting;
      String string0 = user0.username();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = User.NonExisting;
      TenantId tenantId0 = user0.tenantId();
      assertNull(tenantId0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = User.NonExisting;
      Profile profile0 = user0.profile();
      assertNull(profile0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = new EmailAddress(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      Role role0 = Role.with(tenantId0, "ffC{g", " .zDCUKY$4`moKpWiyoD");
      user0.assignTo(role0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = user0.isInRole(role0, (Loader) inMemoryLoader0);
      assertTrue(user0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      boolean boolean0 = user0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.vlingoCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "opJF");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDKY$4`moKpWiyoD");
      Phone phone0 = new Phone("xoom-platform");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "xoom-platform", profile0, credential0, true);
      Credential credential1 = user0.credentialOf(" .zDKY$4`moKpWiyoD");
      assertTrue(user0.isActive());
      assertNotNull(credential1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.vlingoCredential();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.unassignFrom((Group) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember$GroupMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.replace((Credential) null, (Credential) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.isInRole((String) null, (Loader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = User.NonExisting;
      Role role0 = Role.NonExisting;
      // Undeclared exception!
      try { 
        user0.isInRole(role0, (Loader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.hasPermission((String) null, (Loader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.hasPermission((Permission) null, (Loader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.credentials();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.credentialOf("(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = User.NonExisting;
      Role role0 = Role.NonExisting;
      // Undeclared exception!
      try { 
        user0.assignTo(role0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = User.NonExisting;
      Group group0 = Group.NonExisting;
      // Undeclared exception!
      try { 
        user0.NonExisting.assignTo(group0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.add((Credential) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of("Role[tenantId=", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      EmailAddress emailAddress0 = new EmailAddress("Role[tenantId=");
      Phone phone0 = Phone.of("<GneQw|]");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      // Undeclared exception!
      try { 
        User.of(tenantId0, ":", profile0, (Credential) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User credential required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.vlingoCredentialFrom("opoJF", " .zDKY$4`moKpWiyoD", "]");
      PersonName personName0 = PersonName.of("opoJF", "O\"G$Jw1&L!E)", "opoJF");
      EmailAddress emailAddress0 = new EmailAddress("opoJF");
      Phone phone0 = Phone.of("User profile required.");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "#3:@@", profile0, credential0, false);
      Credential credential1 = user0.vlingoCredential();
      assertFalse(user0.isActive());
      assertNotNull(credential1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      Credential credential1 = Credential.oauthCredentialFrom("hk", "@7w=@FiL-V", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of("Integer", "EncodedMember[type=", "Integer");
      EmailAddress emailAddress0 = new EmailAddress("J[(w:(Cl3[Lnq\"j?`");
      Phone phone0 = Phone.of("xoom-platform");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      // Undeclared exception!
      try { 
        user0.replace(credential1, credential1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing previous credential.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      // Undeclared exception!
      try { 
        User.of(tenantId0, "00000000-0100-4000-8200-000003000000", (Profile) null, (Credential) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User profile required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Credential credential0 = Credential.vlingoCredentialFrom("00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        User.of(tenantId0, "", (Profile) null, credential0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User username required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Credential credential0 = Credential.vlingoCredentialFrom("00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      // Undeclared exception!
      try { 
        User.of(tenantId0, (String) null, (Profile) null, credential0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User username required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("dLAO0\"3_", "dLAO0\"3_", "dLAO0\"3_");
      // Undeclared exception!
      try { 
        User.of((TenantId) null, (String) null, (Profile) null, credential0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User tenant id required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        User.of((TenantId) null, "=$v0", (Profile) null, (Credential) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User tenant id required.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User user0 = User.of((TenantId) null, (String) null, (Profile) null, (Credential) null, false);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      Role role0 = Role.with(tenantId0, "ffC{g", " .zDCUKY$4`moKpWiyoD");
      user0.assignTo(role0);
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader((GroupRepository) null, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = user0.isInRole(" .zDCUKY$4`moKpWiyoD", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.vlingoCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDKY$4`moKpWiyoD");
      Phone phone0 = new Phone("xoom-platform");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Group group0 = Group.forRole(tenantId0, " .zDKY$4`moKpWiyoD", "%UJ w3HpE3;F(bh[QMQ");
      user0.assignTo(group0);
      boolean boolean0 = user0.isInRole(" .zDKY$4`moKpWiyoD", (Loader) inMemoryLoader0);
      assertFalse(user0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      Role role0 = Role.with(tenantId0, "ffC{g", " .zDCUKY$4`moKpWiyoD");
      user0.assignTo(role0);
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader((GroupRepository) null, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = user0.isInRole("ffC{g", (Loader) inMemoryLoader0);
      assertTrue(user0.isActive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Credential credential0 = Credential.vlingoCredentialFrom("00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      PersonName personName0 = PersonName.of("00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of("00000000-0100-4000-8200-000003000000");
      Phone phone0 = Phone.of("00000000-0100-4000-8200-000003000000");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "00000000-0100-4000-8200-000003000000", profile0, credential0, true);
      Role role0 = Role.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      user0.assignTo(role0);
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      boolean boolean0 = user0.hasPermission("xoom-platform", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.vlingoCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDKY$4`moKpWiyoD");
      Phone phone0 = new Phone("xoom-platform");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Group group0 = Group.forRole(tenantId0, " .zDKY$4`moKpWiyoD", "%UJ w3HpE3;F(bh[QMQ");
      user0.assignTo(group0);
      boolean boolean0 = user0.hasPermission(" .zDKY$4`moKpWiyoD", (Loader) inMemoryLoader0);
      assertFalse(boolean0);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress(" .zDKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Credential credential1 = user0.vlingoCredential();
      assertNull(credential1);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(";wS!IlG72.@5zzF>");
      PersonName personName0 = PersonName.of("0uS|uuz+", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      EmailAddress emailAddress0 = EmailAddress.of("n+>");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      Credential credential0 = Credential.oauthCredentialFrom("n+>", "W", "io.vlingo.xoom.auth.model.TenantId");
      User user0 = User.of(tenantId0, "n+>", profile0, credential0, true);
      Credential credential1 = user0.credentialOf("n+>");
      assertTrue(user0.isActive());
      assertNotNull(credential1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Credential credential1 = user0.credentialOf("n+>");
      assertNull(credential1);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.vlingoCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "opJF");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDKY$4`moKpWiyoD");
      Phone phone0 = new Phone("xoom-platform");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "opJF", profile0, credential0, false);
      // Undeclared exception!
      try { 
        user0.add(credential0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Credential already exists.
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress(" .zDKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      user0.add((Credential) null);
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      boolean boolean0 = user0.doesNotExist();
      assertTrue(user0.isActive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      User user0 = User.NonExisting;
      boolean boolean0 = user0.doesNotExist();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Role role0 = Role.NonExisting;
      // Undeclared exception!
      try { 
        user0.unassignFrom(role0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      User user0 = User.NonExisting;
      user0.NonExisting.deactivate();
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("-@i]z", "opJF", "opJF");
      PersonName personName0 = PersonName.of("opJF", "=)}6", "io.vlingo.xoom.auth.model.User");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of("=)}6");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      TenantId tenantId0 = TenantId.fromExisting("I21Tx:,U^[M?F8=# {B");
      User user0 = User.of(tenantId0, "Credential[authority=", profile0, credential0, false);
      user0.tenantId();
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of("opJF");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "+0c'?({u5}J24WRP", profile0, credential0, true);
      user0.username();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      user0.profile();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      User user0 = User.NonExisting;
      boolean boolean0 = user0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, true);
      Group group0 = Group.with(tenantId0, "[J3PWVmj1K,", "xoom-platform");
      user0.unassignFrom(group0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDCUKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDCUKY$4`moKpWiyoD", " .zDCUKY$4`moKpWiyoD", "xoom-platform");
      EmailAddress emailAddress0 = EmailAddress.of(" .zDCUKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDCUKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, "4>EQX", profile0, credential0, true);
      InMemoryPermissionRepository inMemoryPermissionRepository0 = new InMemoryPermissionRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader((GroupRepository) null, inMemoryPermissionRepository0, inMemoryRoleRepository0);
      Permission permission0 = inMemoryLoader0.loadPermission(tenantId0, " .zDCUKY$4`moKpWiyoD");
      boolean boolean0 = user0.hasPermission(permission0, (Loader) inMemoryLoader0);
      assertFalse(boolean0);
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      User user0 = User.NonExisting;
      user0.NonExisting.replace((Profile) null);
      assertTrue(user0.doesNotExist());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      User user0 = User.NonExisting;
      user0.NonExisting.activate();
      assertTrue(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress(" .zDKY$4`moKpWiyoD");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      user0.credentials();
      assertFalse(user0.isActive());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        user0.remove((Credential) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      InMemoryRoleRepository inMemoryRoleRepository0 = new InMemoryRoleRepository();
      InMemoryLoader inMemoryLoader0 = new InMemoryLoader(inMemoryGroupRepository0, (PermissionRepository) null, inMemoryRoleRepository0);
      TenantId tenantId0 = TenantId.fromExisting(" .zDKY$4`moKpWiyoD");
      Credential credential0 = Credential.oauthCredentialFrom("opJF", " .zDKY$4`moKpWiyoD", " .zDKY$4`moKpWiyoD");
      PersonName personName0 = PersonName.of(" .zDKY$4`moKpWiyoD", "opJF", "d}=5zJ:d-E[5Oc<,_w");
      EmailAddress emailAddress0 = new EmailAddress("opJF");
      Phone phone0 = Phone.of(" .zDKY$4`moKpWiyoD");
      Profile profile0 = Profile.with(personName0, emailAddress0, phone0);
      User user0 = User.of(tenantId0, " .zDKY$4`moKpWiyoD", profile0, credential0, false);
      Role role0 = inMemoryRoleRepository0.roleOf(tenantId0, "Permission[tenantId=");
      boolean boolean0 = user0.isInRole(role0, (Loader) inMemoryLoader0);
      assertFalse(boolean0);
      assertFalse(user0.isActive());
  }
}
