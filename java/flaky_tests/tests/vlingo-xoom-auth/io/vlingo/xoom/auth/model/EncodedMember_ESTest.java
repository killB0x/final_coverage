/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:09:13 GMT 2022
 */

package io.vlingo.xoom.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.persistence.InMemoryGroupRepository;
import io.vlingo.xoom.auth.model.EncodedMember;
import io.vlingo.xoom.auth.model.Group;
import io.vlingo.xoom.auth.model.Permission;
import io.vlingo.xoom.auth.model.Role;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncodedMember_ESTest extends EncodedMember_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = User.NonExisting;
      EncodedMember.UserMember encodedMember_UserMember0 = new EncodedMember.UserMember(user0);
      String string0 = encodedMember_UserMember0.toString();
      assertEquals("EncodedMember[type=U id=null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "Be9H3Ebh4Qr", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      encodedMember_RoleMember0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("H");
      Permission permission0 = Permission.with(tenantId0, "H", "H");
      EncodedMember.PermissionMember encodedMember_PermissionMember0 = new EncodedMember.PermissionMember(permission0);
      boolean boolean0 = encodedMember_PermissionMember0.isSameAs('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = User.NonExisting;
      EncodedMember.UserMember encodedMember_UserMember0 = new EncodedMember.UserMember(user0);
      boolean boolean0 = encodedMember_UserMember0.isRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InMemoryGroupRepository inMemoryGroupRepository0 = new InMemoryGroupRepository();
      TenantId tenantId0 = TenantId.unique();
      Group group0 = inMemoryGroupRepository0.groupOf(tenantId0, "00000000-0100-4000-8200-000003000000");
      EncodedMember.GroupMember encodedMember_GroupMember0 = new EncodedMember.GroupMember(group0);
      boolean boolean0 = encodedMember_GroupMember0.isPermission();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Role role0 = Role.NonExisting;
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      // Undeclared exception!
      try { 
        encodedMember_RoleMember0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Group group0 = Group.NonExisting;
      EncodedMember.GroupMember encodedMember_GroupMember0 = new EncodedMember.GroupMember(group0);
      // Undeclared exception!
      try { 
        encodedMember_GroupMember0.equals(encodedMember_GroupMember0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      Role role1 = Role.NonExisting;
      EncodedMember.RoleMember encodedMember_RoleMember1 = new EncodedMember.RoleMember(role1);
      boolean boolean0 = encodedMember_RoleMember0.equals(encodedMember_RoleMember1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Role role0 = Role.NonExisting;
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      Object object0 = new Object();
      boolean boolean0 = encodedMember_RoleMember0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.equals(encodedMember_RoleMember0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "EncodedMember[type=", (String) null);
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TenantId tenantId0 = TenantId.fromExisting("");
      Group group0 = Group.with(tenantId0, "#Qx2+G\"Qjyyy[6W|", "#Qx2+G\"Qjyyy[6W|");
      EncodedMember.GroupMember encodedMember_GroupMember0 = new EncodedMember.GroupMember(group0);
      boolean boolean0 = encodedMember_GroupMember0.isSameAs('G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      EncodedMember.PermissionMember encodedMember_PermissionMember0 = new EncodedMember.PermissionMember(permission0);
      boolean boolean0 = encodedMember_PermissionMember0.isSameAs(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = User.NonExisting;
      EncodedMember.UserMember encodedMember_UserMember0 = new EncodedMember.UserMember(user0);
      boolean boolean0 = encodedMember_UserMember0.isUser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.isUser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.isRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      EncodedMember.PermissionMember encodedMember_PermissionMember0 = new EncodedMember.PermissionMember(permission0);
      boolean boolean0 = encodedMember_PermissionMember0.isRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.isPermission();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      boolean boolean0 = encodedMember_RoleMember0.isGroup();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Group group0 = Group.NonExisting;
      EncodedMember.GroupMember encodedMember_GroupMember0 = new EncodedMember.GroupMember(group0);
      boolean boolean0 = encodedMember_GroupMember0.isGroup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Role role0 = Role.NonExisting;
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        role0.unassign(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.model.EncodedMember", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      Permission permission0 = Permission.with(tenantId0, "00000000-0100-4000-8200-000003000000", "00000000-0100-4000-8200-000003000000");
      EncodedMember.PermissionMember encodedMember_PermissionMember0 = new EncodedMember.PermissionMember(permission0);
      boolean boolean0 = encodedMember_PermissionMember0.isPermission();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Role role0 = Role.with((TenantId) null, "", "");
      EncodedMember.RoleMember encodedMember_RoleMember0 = new EncodedMember.RoleMember(role0);
      String string0 = encodedMember_RoleMember0.toString();
      assertEquals("EncodedMember[type=R id=]", string0);
  }
}
