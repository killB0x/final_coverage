/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 22:13:19 GMT 2022
 */

package io.vlingo.xoom.auth.infra.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.vlingo.xoom.auth.infra.resource.CredentialData;
import io.vlingo.xoom.auth.model.Credential;
import io.vlingo.xoom.auth.model.EmailAddress;
import io.vlingo.xoom.auth.model.PersonName;
import io.vlingo.xoom.auth.model.Phone;
import io.vlingo.xoom.auth.model.Profile;
import io.vlingo.xoom.auth.model.TenantId;
import io.vlingo.xoom.auth.model.User;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CredentialData_ESTest extends CredentialData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("$[2FZ<%!Ctm(utL6", "io.vlingo.xoom.auth.infra.resource.CredentialData", "wA>w|IBoA&~l=j3NCBh", "io.vlingo.xoom.auth.infra.resource.CredentialData");
      String string0 = credentialData0.toString();
      assertEquals("Credential[authority=$[2FZ<%!Ctm(utL6 id=io.vlingo.xoom.auth.infra.resource.CredentialData type=io.vlingo.xoom.auth.infra.resource.CredentialData]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("$[2FZ<%!Ctm(utL6", "io.vlingo.xoom.auth.infra.resource.CredentialData", "wA>w|IBoA&~l=j3NCBh", "io.vlingo.xoom.auth.infra.resource.CredentialData");
      boolean boolean0 = credentialData0.equals(credentialData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("", "", "", "Double");
      assertNotNull(credentialData0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("|)sr<ts", "W", "|)sr<ts");
      // Undeclared exception!
      try { 
        credentialData0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.CredentialData", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = User.NonExisting;
      // Undeclared exception!
      try { 
        CredentialData.from(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CredentialData.from((Credential) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.vlingo.xoom.auth.infra.resource.CredentialData", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("MgN", "MgN", "MgN");
      CredentialData credentialData1 = new CredentialData("MgN", (String) null, "MgN", (String) null);
      // Undeclared exception!
      try { 
        credentialData1.equals(credentialData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Credential credential0 = Credential.oauthCredentialFrom("Double", "Double", "Double");
      CredentialData credentialData0 = CredentialData.from(credential0);
      assertNotNull(credentialData0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("$A2FZ<%OCtm(utL6", "$A2FZ<%OCtm(utL6", "$A2FZ<%OCtm(utL6");
      CredentialData credentialData1 = CredentialData.from("$A2FZ<%OCtm(utL6", "$A2FZ<%OCtm(utL6", "$A2FZ<%OCtm(utL6", "$A2FZ<%OCtm(utL6");
      boolean boolean0 = credentialData0.equals(credentialData1);
      assertFalse(credentialData1.equals((Object)credentialData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("PhN", "PhN", "PhN");
      CredentialData credentialData1 = new CredentialData("PhN", (String) null, "PhN", "PhN");
      boolean boolean0 = credentialData0.equals(credentialData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("PhN", "PhN", "PhN");
      CredentialData credentialData1 = CredentialData.from((String) null, "PhN", "PhN");
      boolean boolean0 = credentialData0.equals(credentialData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("2!", "2!", "2!");
      boolean boolean0 = credentialData0.equals("2!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from((String) null, (String) null, (String) null);
      boolean boolean0 = credentialData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CredentialData credentialData0 = CredentialData.from("$[>FZ<%!CtmhutL6", "wA>w|IBoA&~l=j3NCBh", "wA>w|IBoA&~l=j3NCBh");
      String string0 = credentialData0.toString();
      assertEquals("Credential[authority=$[>FZ<%!CtmhutL6 id=wA>w|IBoA&~l=j3NCBh type=null]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CredentialData credentialData0 = new CredentialData("", "", "W@3%N Bw+;E`,", "W@3%N Bw+;E`,");
      credentialData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TenantId tenantId0 = TenantId.unique();
      PersonName personName0 = PersonName.of("p", "Kd}>[lu3H%Vrm] [", "PA+x@p?*]dv");
      EmailAddress emailAddress0 = EmailAddress.of("Tv8T\".h-Fh:");
      Profile profile0 = Profile.with(personName0, emailAddress0, (Phone) null);
      Credential credential0 = Credential.vlingoCredentialFrom("PA+x@p?*]dv", "wA>w|IBoA&~l=j3NCBh", "B3{manC'{>N");
      User user0 = User.of(tenantId0, "wA>w|IBoA&~l=j3NCBh", profile0, credential0, true);
      List<CredentialData> list0 = CredentialData.from(user0);
      assertFalse(list0.isEmpty());
  }
}
