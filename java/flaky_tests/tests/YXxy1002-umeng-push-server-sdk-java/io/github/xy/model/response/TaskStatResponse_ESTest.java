/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:19:38 GMT 2022
 */

package io.github.xy.model.response;

import org.junit.Test;
import static org.junit.Assert.*;
import io.github.xy.model.response.TaskStatResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskStatResponse_ESTest extends TaskStatResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskStatResponse taskStatResponse0 = new TaskStatResponse();
      taskStatResponse0.setRet("c0}0\"ABX");
      String string0 = taskStatResponse0.getRet();
      assertEquals("c0}0\"ABX", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskStatResponse taskStatResponse0 = new TaskStatResponse();
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      taskStatResponse0.setData(taskStatResponse_Data0);
      TaskStatResponse.Data taskStatResponse_Data1 = taskStatResponse0.getData();
      assertNull(taskStatResponse_Data1.getArriveCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskStatResponse taskStatResponse0 = new TaskStatResponse();
      String string0 = taskStatResponse0.getRet();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskStatResponse taskStatResponse0 = new TaskStatResponse();
      TaskStatResponse.Data taskStatResponse_Data0 = taskStatResponse0.getData();
      assertNull(taskStatResponse_Data0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskStatResponse taskStatResponse0 = new TaskStatResponse();
      taskStatResponse0.setRet("");
      String string0 = taskStatResponse0.getRet();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      String string0 = taskStatResponse_Data0.getOpenRate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      String string0 = taskStatResponse_Data0.getTaskId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = taskStatResponse_Data0.getOpenCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = taskStatResponse_Data0.getDismissCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = taskStatResponse_Data0.getAcceptCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = new Integer(2072);
      taskStatResponse_Data0.setArriveCount(integer0);
      assertNull(taskStatResponse_Data0.getAcceptCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      String string0 = taskStatResponse_Data0.getDismissRate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      taskStatResponse_Data0.setTaskId("");
      assertNull(taskStatResponse_Data0.getOpenRate());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = taskStatResponse_Data0.getSentCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = taskStatResponse_Data0.getArriveCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      taskStatResponse_Data0.setOpenRate("");
      assertNull(taskStatResponse_Data0.getSentCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = new Integer((-1));
      taskStatResponse_Data0.setDismissCount(integer0);
      assertNull(taskStatResponse_Data0.getTaskId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      taskStatResponse_Data0.setSentCount((Integer) null);
      assertNull(taskStatResponse_Data0.getSentCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      taskStatResponse_Data0.setDismissRate("VOko]#W=");
      assertNull(taskStatResponse_Data0.getDismissCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = new Integer(2072);
      taskStatResponse_Data0.setOpenCount(integer0);
      assertNull(taskStatResponse_Data0.getTaskId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskStatResponse.Data taskStatResponse_Data0 = new TaskStatResponse.Data();
      Integer integer0 = new Integer(443);
      taskStatResponse_Data0.setAcceptCount(integer0);
      assertEquals(443, (int)taskStatResponse_Data0.getAcceptCount());
  }
}
