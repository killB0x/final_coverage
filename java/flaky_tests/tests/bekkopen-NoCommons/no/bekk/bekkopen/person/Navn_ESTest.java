/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:43:12 GMT 2022
 */

package no.bekk.bekkopen.person;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import no.bekk.bekkopen.person.Navn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Navn_ESTest extends Navn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Navn navn0 = new Navn("M#0(i};1q", "no.bekk.bekkopen.person.Navn", "");
      String string0 = navn0.getMellomnavn();
      assertEquals("", navn0.getEtternavn());
      assertEquals("No.bekk.bekkopen.person.navn", string0);
      assertEquals("M#0(i};1q", navn0.getFornavn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Navn navn0 = new Navn("", "", "");
      String string0 = navn0.getMellomnavn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Navn navn0 = new Navn("", "", "");
      String string0 = navn0.getFornavn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Navn navn0 = new Navn("M#0(i};1q", "no.bekk.bekkopen.person.Navn", "");
      String string0 = navn0.getEtternavn();
      assertEquals("M#0(i};1q", navn0.getFornavn());
      assertEquals("", string0);
      assertEquals("No.bekk.bekkopen.person.navn", navn0.getMellomnavn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Navn navn0 = null;
      try {
        navn0 = new Navn((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fornavn or etternavn can not be null: fornavn=null,etternavn=null
         //
         verifyException("no.bekk.bekkopen.person.Navn", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Navn navn0 = new Navn("", (String) null, "");
      String string0 = navn0.getNavn();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Navn navn0 = new Navn("M#0(i};1q", "no.bekk.bekkopen.person.Navn", "");
      String string0 = navn0.getNavn();
      assertEquals("M#0(i};1q No.bekk.bekkopen.person.navn ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Navn navn0 = null;
      try {
        navn0 = new Navn("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fornavn or etternavn can not be null: fornavn=,etternavn=null
         //
         verifyException("no.bekk.bekkopen.person.Navn", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Navn navn0 = new Navn("M#0(i};1q", "no.bekk.bekkopen.person.Navn", "");
      String string0 = navn0.toString();
      assertEquals("M#0(i};1q No.bekk.bekkopen.person.navn ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Navn navn0 = new Navn(" ", " ");
      String string0 = navn0.getEtternavn();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Navn navn0 = new Navn(" ", " ");
      String string0 = navn0.getFornavn();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Navn navn0 = new Navn(" ", " ");
      navn0.getMellomnavn();
      assertEquals(" ", navn0.getFornavn());
  }
}
