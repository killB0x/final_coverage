/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:51:33 GMT 2022
 */

package no.bekk.bekkopen.person;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import no.bekk.bekkopen.person.Fodselsnummer;
import no.bekk.bekkopen.person.Navn;
import no.bekk.bekkopen.person.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Navn navn0 = new Navn("@P+gkij1,&+FY0/|?v", "", "#,Dh =?EN;uzLN.]C>");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("#,Dh =?EN;uzLN.]C>");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getPersonnummer();
      assertEquals("?EN;uzLN.]C>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Navn navn0 = new Navn("ddMMyy", "ddMMyy", "ddMMyy");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("ddMMyy");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getPersonnummer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Navn navn0 = new Navn("no.bekk.bekkopen.person.Person", "no.bekk.bekkopen.person.Person");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("no.bekk.bekkopen.person.Person");
      Person person0 = new Person(navn0, fodselsnummer0);
      Navn navn1 = person0.getNavn();
      assertEquals("No.bekk.bekkopen.person.person", navn1.getEtternavn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Navn navn0 = new Navn("]Vm", "]Vm");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getMellomnavn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Navn navn0 = new Navn("fornavn or etternavn can not be null: fornavn=", "fornavn or etternavn can not be null: fornavn=", "7JQr-XVk#");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("$VALUES");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getMellomnavn();
      assertEquals("Fornavn or etternavn can not be null: fornavn=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Navn navn0 = new Navn("@P+gkij1,&+FY0/|?v", "", "#,Dh =?EN;uzLN.]C>");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("#,Dh =?EN;uzLN.]C>");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getMellomnavn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("2");
      Navn navn0 = new Navn("", "RtFjE,umEI:X%fCq!");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getFornavn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      Fodselsnummer fodselsnummer0 = person0.getFodselsnummer();
      assertNull(fodselsnummer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Navn navn0 = new Navn("", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("");
      Person person0 = new Person(navn0, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertSame(fodselsnummer0, fodselsnummer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Navn navn0 = new Navn("XViKbW,.", "XViKbW,.");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("-G|XnIrw&0!Nl");
      Person person0 = new Person(navn0, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertEquals("nI", fodselsnummer1.get2DigitBirthYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Navn navn0 = new Navn("p'm&eM", "p'm&eM", "p'm&eM");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("=fa#V7'+/D>");
      Person person0 = new Person(navn0, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertEquals("V7", fodselsnummer1.get2DigitBirthYear());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("_33- |SB2.:~6Z~k");
      Navn navn0 = new Navn("ddMMyy", "(H};]!\"<o-O#}");
      Person person0 = new Person(navn0, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertEquals(10, fodselsnummer1.getChecksumDigit2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Navn navn0 = new Navn("^l(R", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("J(pQJenj0&");
      Person person0 = new Person(navn0, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertEquals("J(pQJenj0&", fodselsnummer1.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Navn navn0 = new Navn("@P+gkij1,&+FY0/|?v", "", "#,Dh =?EN;uzLN.]C>");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("#,Dh =?EN;uzLN.]C>");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getEtternavn();
      assertEquals("#,dh =?en;uzln.]c>", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Navn navn0 = new Navn("", "", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getEtternavn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Navn navn0 = new Navn("sW3@zBNQM]AH", "no.bekk.bekkopen.common.StringNumber");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("&:\"9K(gtmDH T@aPp");
      Person person0 = new Person(navn0, fodselsnummer0);
      boolean boolean0 = person0.erMann();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Navn navn0 = new Navn("$VALUES", "[?pUzC[Q");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("mA]WCc!58NIuQ");
      Person person0 = new Person(navn0, fodselsnummer0);
      boolean boolean0 = person0.erMann();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Navn navn0 = new Navn("sW3@zBNQM]AH", "no.bekk.bekkopen.common.StringNumber");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("&:\"9K(gtmDH T@aPp");
      Person person0 = new Person(navn0, fodselsnummer0);
      boolean boolean0 = person0.erKvinne();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Navn navn0 = new Navn("9o", "9o", "9o");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("9o");
      Person person0 = new Person(navn0, fodselsnummer0);
      // Undeclared exception!
      try { 
        person0.getPersonnummer();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getFornavn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Navn navn0 = new Navn("*", "*", "*");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("*");
      Person person0 = new Person(navn0, fodselsnummer0);
      // Undeclared exception!
      try { 
        person0.getFodselsdatoAsString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getFodselsdatoAsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Navn navn0 = new Navn("9o", "9o", "9o");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("9o");
      Person person0 = new Person(navn0, fodselsnummer0);
      // Undeclared exception!
      try { 
        person0.getFodselsdato();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getFodselsdato();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Navn navn0 = new Navn("r", "r", "r");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("r");
      Person person0 = new Person(navn0, fodselsnummer0);
      // Undeclared exception!
      try { 
        person0.erMann();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Navn navn0 = new Navn("", "", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("");
      Person person0 = new Person(navn0, fodselsnummer0);
      // Undeclared exception!
      try { 
        person0.erKvinne();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.erKvinne();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getEtternavn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Navn navn0 = new Navn("^l(R", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("J(pQJenj0&");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getFornavn();
      assertEquals("^l(r", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.erMann();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getPersonnummer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = new Person((Navn) null, (Fodselsnummer) null);
      // Undeclared exception!
      try { 
        person0.getMellomnavn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("");
      Person person0 = new Person((Navn) null, fodselsnummer0);
      Navn navn0 = person0.getNavn();
      assertNull(navn0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Navn navn0 = new Navn("^l(R", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("J(pQJenj0&");
      Person person0 = new Person(navn0, fodselsnummer0);
      try { 
        person0.getFodselsdato();
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"J(pQJe\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("_33- |SB2.:~6Z~k");
      Navn navn0 = new Navn("ddMMyy", "(H};]!\"<o-O#}");
      Person person0 = new Person(navn0, fodselsnummer0);
      boolean boolean0 = person0.erKvinne();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fodselsnummer fodselsnummer0 = new Fodselsnummer(">qX2~Z2QI0");
      Person person0 = new Person((Navn) null, fodselsnummer0);
      Fodselsnummer fodselsnummer1 = person0.getFodselsnummer();
      assertEquals("2QI0", fodselsnummer1.getPersonnummer());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Navn navn0 = new Navn("^l(R", "");
      Fodselsnummer fodselsnummer0 = new Fodselsnummer("J(pQJenj0&");
      Person person0 = new Person(navn0, fodselsnummer0);
      String string0 = person0.getFodselsdatoAsString();
      assertEquals("J(pQJe", string0);
  }
}
