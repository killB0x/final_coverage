/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:29:22 GMT 2022
 */

package no.bekk.bekkopen.person;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import no.bekk.bekkopen.person.FodselsnummerCalculator;
import no.bekk.bekkopen.person.KJONN;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FodselsnummerCalculator_ESTest extends FodselsnummerCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticFodselsnummerForDate(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticDNumberFodselsnummerForDate(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1825), (-904), (-904), (-904), (-904), (-904));
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyFodselsnummerForDate(mockDate0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyDNumberFodselsnummerForDate(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1825), (-904), (-904), (-904), (-904), (-904));
      KJONN kJONN0 = KJONN.KVINNE;
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDateAndGender(mockDate0, kJONN0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      KJONN kJONN0 = KJONN.MANN;
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDateAndGender(mockDate0, kJONN0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1742), (-1742), (-1742));
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDate(mockDate0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyFodselsnummerForDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticDNumberFodselsnummerForDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1825), (-904), (-904), (-904), (-904), (-904));
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticDNumberFodselsnummerForDate(mockDate0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticFodselsnummerForDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1920), 100, 2342);
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManySynteticFodselsnummerForDate(mockDate0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyDNumberFodselsnummerForDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1825), (-904), (-904), (-904), (-1825));
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyDNumberFodselsnummerForDate(mockDate0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDate(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getManyFodselsnummerForDate(mockDate0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // no/bekk/bekkopen/person/FodselsnummerValidator
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KJONN kJONN0 = KJONN.MANN;
      // Undeclared exception!
      try { 
        FodselsnummerCalculator.getFodselsnummerForDateAndGender((Date) null, kJONN0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.person.FodselsnummerCalculator", e);
      }
  }
}
