/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:35:51 GMT 2022
 */

package no.bekk.bekkopen.person;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import no.bekk.bekkopen.person.Navn;
import no.bekk.bekkopen.person.NavnGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NavnGenerator_ESTest extends NavnGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(14);
      List<Navn> list0 = NavnGenerator.genererMannsnavn(2);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(22);
      List<Navn> list0 = NavnGenerator.genererKvinnenavn(22);
      assertEquals(22, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-2807));
      Navn navn0 = NavnGenerator.genererMannsnavn();
      assertEquals("Benny", navn0.getFornavn());
      assertEquals("Hauglid", navn0.getMellomnavn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Navn> list0 = NavnGenerator.genererNavn(0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Navn> list0 = NavnGenerator.genererMannsnavn(0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Navn> list0 = NavnGenerator.genererKvinnenavn(0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Navn> list0 = NavnGenerator.genererKvinnenavn(22);
      assertEquals(22, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      NavnGenerator.genererNavn(4075);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      NavnGenerator.genererMannsnavn(3523);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      NavnGenerator.genererKvinnenavn(3362);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(1848);
      Navn navn0 = NavnGenerator.genererMannsnavn();
      assertEquals("Nicolai", navn0.getFornavn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom(1532);
      Navn navn0 = NavnGenerator.genererKvinnenavn();
      assertEquals("Karianne", navn0.getFornavn());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Navn> list0 = NavnGenerator.genererNavn(2);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        NavnGenerator.genererKvinnenavn((-1560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1560
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        NavnGenerator.genererMannsnavn((-1531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1531
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        NavnGenerator.genererNavn((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
