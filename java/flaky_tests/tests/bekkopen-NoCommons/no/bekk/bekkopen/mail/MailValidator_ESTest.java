/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:44:30 GMT 2022
 */

package no.bekk.bekkopen.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import no.bekk.bekkopen.mail.MailValidator;
import no.bekk.bekkopen.mail.model.Kommunenavn;
import no.bekk.bekkopen.mail.model.Kommunenummer;
import no.bekk.bekkopen.mail.model.PostInfo;
import no.bekk.bekkopen.mail.model.Postnummer;
import no.bekk.bekkopen.mail.model.PostnummerKategori;
import no.bekk.bekkopen.mail.model.Poststed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MailValidator_ESTest extends MailValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostnummerKategori postnummerKategori0 = MailValidator.getPostnummerKategori("F");
      assertEquals(PostnummerKategori.F, postnummerKategori0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      List<Postnummer> list0 = MailValidator.getPostnummerForPoststed("*Z-%2O{x>/}b+1f");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      int int0 = MailValidator.getAntallPoststed();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      Kommunenavn kommunenavn0 = new Kommunenavn("*Z-%2O{x>/}b+1f");
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, kommunenavn0, (PostnummerKategori) null);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      int int0 = MailValidator.getAntallPostnummer();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      int int0 = MailValidator.getAntallKommunenummer();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      hashMap0.put((Postnummer) null, (PostInfo) null);
      MailValidator.setPostInfo(hashMap0);
      // Undeclared exception!
      try { 
        MailValidator.getPostnummerForPoststed("}ZU3z 2sl!{ I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.mail.MailValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getPostnummerForPoststed((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.mail.model.Poststed", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getPostInfoForPostnummer("?Z)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : ?Z)
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      // Undeclared exception!
      try { 
        MailValidator.getPostInfoForKommunenavn((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.mail.MailValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      // Undeclared exception!
      try { 
        MailValidator.getKommunenummerForKommunenavn("*Z-%2O{x>/}b+1f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("no.bekk.bekkopen.mail.MailValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getKommunenummer("Only digits a|e allowed : ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : Only digits a|e allowed : 
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getPostnummer("g*,V`<OT\bvYc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : g*,V`<OT\bvYc
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optional<PostInfo> optional0 = MailValidator.getPostInfoForKommunenavn("");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optional<PostInfo> optional0 = MailValidator.getPostInfoForKommunenummer("");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      Kommunenavn kommunenavn0 = new Kommunenavn("*Z-%2O{x>/}b+1f");
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, kommunenavn0, (PostnummerKategori) null);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      Kommunenummer kommunenummer1 = MailValidator.getKommunenummerForKommunenavn("*Z-%2O{x>/}b+1f");
      assertEquals("*Z-%2O{x>/}b+1f", kommunenummer1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Postnummer, PostInfo> hashMap0 = new HashMap<Postnummer, PostInfo>();
      Poststed poststed0 = new Poststed("*Z-%2O{x>/}b+1f");
      Kommunenummer kommunenummer0 = new Kommunenummer("*Z-%2O{x>/}b+1f");
      PostnummerKategori postnummerKategori0 = PostnummerKategori.G;
      PostInfo postInfo0 = new PostInfo((Postnummer) null, poststed0, kommunenummer0, (Kommunenavn) null, postnummerKategori0);
      hashMap0.put((Postnummer) null, postInfo0);
      MailValidator.setPostInfo(hashMap0);
      Kommunenavn kommunenavn0 = MailValidator.getKommunenavnForKommunenummer("*Z-%2O{x>/}b+1f");
      assertNull(kommunenavn0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Postnummer> list0 = MailValidator.getPostnummerForPoststed("1h*E96T=-AZ");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = MailValidator.getAntallPostnummer();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Kommunenummer kommunenummer0 = MailValidator.getKommunenummerForKommunenavn((String) null);
      assertNull(kommunenummer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = MailValidator.isValidKommunenummer((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MailValidator mailValidator0 = new MailValidator();
      assertEquals(0, mailValidator0.getAntallPostnummer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getKommunenummerForPostnummer("J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : J
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = MailValidator.getAntallKommunenummer();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getPoststedForPostnummer("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : 
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = MailValidator.isValidPostnummer("no.bekk.bekkopen.common.StringNumber");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getPostnummerKategoriForPostnummer(">/pF.SFLp]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : >/pF.SFLp]
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = MailValidator.getAntallPoststed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MailValidator.getKommunenavnForPostnummer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only digits are allowed : null
         //
         verifyException("no.bekk.bekkopen.common.StringNumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Kommunenavn kommunenavn0 = MailValidator.getKommunenavnForKommunenummer("}ZU3z 2sl!{ I");
      assertNull(kommunenavn0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MailValidator.getPostnummerKategori("");
  }
}
