/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 04:14:11 GMT 2022
 */

package org.projectodd.sockjs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.projectodd.sockjs.GenericReceiver;
import org.projectodd.sockjs.HtmlFileReceiver;
import org.projectodd.sockjs.JsonpReceiver;
import org.projectodd.sockjs.ResponseReceiver;
import org.projectodd.sockjs.Session;
import org.projectodd.sockjs.SockJsRequest;
import org.projectodd.sockjs.SockJsResponse;
import org.projectodd.sockjs.SockJsServer;
import org.projectodd.sockjs.Transport;
import org.projectodd.sockjs.XhrPollingReceiver;
import org.projectodd.sockjs.XhrStreamingReceiver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transport_ESTest extends Transport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4096;
      Transport.closeFrame(4096, "");
      Transport.closeFrame(4096, "c[4096,\"\"]");
      String string0 = "pUjfC3>H~|(c";
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      doReturn("pUjfC3>H~|(c").when(sockJsRequest0).session();
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      XhrStreamingReceiver xhrStreamingReceiver0 = new XhrStreamingReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options);
      // Undeclared exception!
      try { 
        Transport.register(sockJsRequest0, sockJsServer0, xhrStreamingReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transport.closeFrame(4096, "");
      Transport.READY_STATE.values();
      Transport.closeFrame(4096, "c[4096,\"\"]");
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      doReturn("z)##?-").when(sockJsRequest0).session();
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      HtmlFileReceiver htmlFileReceiver0 = new HtmlFileReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options);
      // Undeclared exception!
      try { 
        Transport.register(sockJsRequest0, sockJsServer0, htmlFileReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transport.READY_STATE.values();
      SockJsServer sockJsServer0 = new SockJsServer();
      sockJsServer0.init();
      // Undeclared exception!
      try { 
        Transport.registerNoSession((SockJsRequest) null, sockJsServer0, (GenericReceiver) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.projectodd.sockjs.Utils
         //
         verifyException("org.projectodd.sockjs.SockJsConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sockJsRequest0).session();
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      sockJsServer0.init();
      XhrPollingReceiver xhrPollingReceiver0 = new XhrPollingReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options);
      xhrPollingReceiver0.currResponseSize = 0;
      // Undeclared exception!
      try { 
        Transport.register(sockJsRequest0, sockJsServer0, xhrPollingReceiver0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.projectodd.sockjs.Utils
         //
         verifyException("org.projectodd.sockjs.SockJsConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transport transport0 = new Transport();
      SockJsServer sockJsServer0 = new SockJsServer();
      // Undeclared exception!
      try { 
        Transport.registerNoSession((SockJsRequest) null, sockJsServer0, (GenericReceiver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transport transport0 = new Transport();
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sockJsRequest0).session();
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      ResponseReceiver responseReceiver0 = new ResponseReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options);
      // Undeclared exception!
      try { 
        Transport.register(sockJsRequest0, sockJsServer0, responseReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      JsonpReceiver jsonpReceiver0 = new JsonpReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options, "");
      // Undeclared exception!
      try { 
        Transport.registerNoSession(sockJsRequest0, sockJsServer0, jsonpReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Transport.closeFrame((-4551), "");
      assertEquals("c[-4551,\"\"]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transport.closeFrame((-304), "kbP&khe0id");
      // Undeclared exception!
      try { 
        Transport.READY_STATE.valueOf("kbP&khe0id");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.projectodd.sockjs.Transport.READY_STATE.kbP&khe0id
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sockJsRequest0).session();
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      SockJsServer.Options sockJsServer_Options0 = sockJsServer0.options;
      JsonpReceiver jsonpReceiver0 = new JsonpReceiver(sockJsRequest0, sockJsResponse0, sockJsServer_Options0, "host");
      // Undeclared exception!
      try { 
        Transport.register(sockJsRequest0, sockJsServer0, jsonpReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transport.READY_STATE.values();
      SockJsServer sockJsServer0 = new SockJsServer();
      // Undeclared exception!
      try { 
        Transport.registerNoSession((SockJsRequest) null, sockJsServer0, (GenericReceiver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SockJsRequest sockJsRequest0 = null;
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      SockJsServer.Options sockJsServer_Options0 = sockJsServer0.options;
      XhrStreamingReceiver xhrStreamingReceiver0 = new XhrStreamingReceiver((SockJsRequest) null, sockJsResponse0, sockJsServer_Options0);
      SockJsServer.OnConnectionHandler sockJsServer_OnConnectionHandler0 = mock(SockJsServer.OnConnectionHandler.class, new ViolatedAssumptionAnswer());
      sockJsServer0.onConnection(sockJsServer_OnConnectionHandler0);
      xhrStreamingReceiver0.request = null;
      SockJsServer.OnConnectionHandler sockJsServer_OnConnectionHandler1 = mock(SockJsServer.OnConnectionHandler.class, new ViolatedAssumptionAnswer());
      sockJsServer0.onConnection(sockJsServer_OnConnectionHandler1);
      sockJsServer_Options0.websocket = false;
      sockJsServer_Options0.heartbeatDelay = 825;
      xhrStreamingReceiver0.didClose();
      // Undeclared exception!
      try { 
        Transport.register((SockJsRequest) null, sockJsServer0, xhrStreamingReceiver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.Transport", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transport.READY_STATE.values();
      SockJsServer sockJsServer0 = new SockJsServer();
      // Undeclared exception!
      try { 
        Transport.register((SockJsRequest) null, sockJsServer0, (GenericReceiver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.Transport", e);
      }
  }
}
