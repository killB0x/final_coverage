/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 03:59:49 GMT 2022
 */

package org.projectodd.sockjs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.projectodd.sockjs.JsonpReceiver;
import org.projectodd.sockjs.ResponseReceiver;
import org.projectodd.sockjs.Session;
import org.projectodd.sockjs.SockJsRequest;
import org.projectodd.sockjs.SockJsResponse;
import org.projectodd.sockjs.SockJsServer;
import org.projectodd.sockjs.Transport;
import org.projectodd.sockjs.XhrStreamingReceiver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Session_ESTest extends Session_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Session.bySessionId("org.projectodd.sockjs.HtmlfileHandler");
      Transport.READY_STATE transport_READY_STATE0 = Transport.READY_STATE.CLOSING;
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SockJsServer sockJsServer0 = new SockJsServer();
      SockJsServer.Options sockJsServer_Options0 = new SockJsServer.Options();
      sockJsServer0.options = sockJsServer_Options0;
      sockJsServer0.t("\"W<dIK]i");
      sockJsServer0.init();
      Session.bySessionId(":");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Session.bySessionId("org.projectodd.sockjs.HtmlfileHandler");
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      SockJsServer.Options sockJsServer_Options0 = new SockJsServer.Options();
      XhrStreamingReceiver xhrStreamingReceiver0 = new XhrStreamingReceiver((SockJsRequest) null, sockJsResponse0, sockJsServer_Options0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Session.bySessionId(":");
      SockJsRequest sockJsRequest0 = mock(SockJsRequest.class, new ViolatedAssumptionAnswer());
      SockJsResponse sockJsResponse0 = mock(SockJsResponse.class, new ViolatedAssumptionAnswer());
      SockJsServer sockJsServer0 = new SockJsServer();
      ResponseReceiver responseReceiver0 = new ResponseReceiver(sockJsRequest0, sockJsResponse0, sockJsServer0.options);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SockJsServer sockJsServer0 = new SockJsServer();
      sockJsServer0.init();
      Session session0 = null;
      try {
        session0 = new Session("", sockJsServer0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.projectodd.sockjs.Utils
         //
         verifyException("org.projectodd.sockjs.SockJsConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Session.bySessionId("org.projectodd.sockjs.HtmlfileHandler");
      Transport.READY_STATE transport_READY_STATE0 = Transport.READY_STATE.OPEN;
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Session session0 = Session.bySessionId((String) null);
      assertNull(session0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Session.bySessionId("org.projectodd.sockjs.HtmlfileHandler");
      SockJsServer sockJsServer0 = new SockJsServer();
      JsonpReceiver jsonpReceiver0 = new JsonpReceiver((SockJsRequest) null, (SockJsResponse) null, sockJsServer0.options, (String) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SockJsServer sockJsServer0 = new SockJsServer();
      Session session0 = null;
      try {
        session0 = new Session("?T,", sockJsServer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SockJsServer sockJsServer0 = new SockJsServer();
      Session session0 = null;
      try {
        session0 = new Session((String) null, sockJsServer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.projectodd.sockjs.SockJsServer", e);
      }
  }
}
