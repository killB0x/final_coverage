/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 10:27:08 GMT 2022
 */

package com.github.shootercheng.export.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.shootercheng.export.common.ExportCommon;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExportCommon_ESTest extends ExportCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("3Dd#1Pk!3*^XrCrjY|", "3[;/]ND;&F[Lh-'~vw&");
      // Undeclared exception!
      try { 
        ExportCommon.buildParamGetter(class0, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bean class java.lang.String not contain field getter 3[;/]ND;&F[Lh-'~vw& ,please check config column map
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ExportCommon.calExcelNumChar(383);
      assertEquals("NT", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ExportCommon.calExcelNumChar(26);
      assertEquals("AA", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExportCommon.calExcelNumChar(702);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column num input error
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ExportCommon.calExcelNumChar(0);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Integer> list0 = ExportCommon.calIndexList(1405, (-16165980));
      assertEquals(133, list0.size());
      assertTrue(list0.contains((-16165980)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Integer> list0 = ExportCommon.calIndexList((-2305), 2531);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      ExportCommon.calIndexList(2126851216, 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExportCommon.calIndexList(2816, (-1169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExportCommon.calIndexList(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      ExportCommon.UPPER_CHAR = charArray0;
      // Undeclared exception!
      try { 
        ExportCommon.calExcelNumChar(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        ExportCommon.buildParamGetter(class0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      // Undeclared exception!
      try { 
        ExportCommon.buildParamGetter(class0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<Method> list0 = ExportCommon.buildParamGetter(class0, hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExportCommon.calExcelNumChar(1472);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column num input error
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExportCommon.calExcelNumChar((-1316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column num input error
         //
         verifyException("com.github.shootercheng.export.common.ExportCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Integer> list0 = ExportCommon.calIndexList(2531, 1);
      assertEquals(2531, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Integer> list0 = ExportCommon.calIndexList(3956, 3956);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      ExportCommon.calIndexList((-660), (-2694));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExportCommon exportCommon0 = new ExportCommon();
  }
}
