/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 10:32:12 GMT 2022
 */

package com.github.shootercheng.export.param;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.shootercheng.export.common.RowQuotationFormat;
import com.github.shootercheng.export.define.CellFormat;
import com.github.shootercheng.export.define.RowFormat;
import com.github.shootercheng.export.param.ExportParam;
import java.lang.reflect.Method;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExportParam_ESTest extends ExportParam_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      assertEquals(0, exportParam0.getPageSize());
      
      ExportParam exportParam1 = exportParam0.setStartLine(3394);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam2 = exportParam1.setCellFormat(cellFormat0);
      ExportParam exportParam3 = exportParam2.setRecordSeparator((String) null);
      ExportParam exportParam4 = exportParam3.setPageSize(0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ExportParam exportParam5 = exportParam4.setSearchParam(hashMap1);
      exportParam5.getGetterMethod();
      ExportParam exportParam6 = exportParam3.setGetterMethod((List<Method>) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam6.setRowFormat(rowQuotationFormat0);
      exportParam5.getRecordSeparator();
      exportParam3.getSearchParam();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader((String) null);
      ExportParam exportParam2 = exportParam1.setSheetName("");
      exportParam2.setSheetName("AnCB*_mz<p");
      exportParam0.getGetterMethod();
      exportParam0.getGetterMethod();
      ExportParam exportParam3 = exportParam2.setGetterMethod((List<Method>) null);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam4 = exportParam0.setCellFormat(cellFormat0);
      ExportParam exportParam5 = exportParam4.setSum(3564);
      ExportParam exportParam6 = exportParam3.setRowFormat((RowFormat) null);
      exportParam5.getSheetName();
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ExportParam exportParam7 = exportParam0.setCharset(charset1);
      ExportParam exportParam8 = exportParam3.setCharset(charset0);
      exportParam0.setHeader((String) null);
      exportParam8.getSearchParam();
      exportParam5.getGetterMethod();
      exportParam6.getCharset();
      ExportParam exportParam9 = exportParam6.setHeader("iph3[,czU]}wf");
      exportParam4.getSum();
      exportParam7.getGetterMethod();
      ExportParam exportParam10 = exportParam9.setRecordSeparator("");
      exportParam10.setHeader("Y,b");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setCharset((Charset) null);
      ExportParam exportParam2 = exportParam1.setRecordSeparator("UT}@2%\"Cc=8qP>eHiu");
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam2.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam3 = exportParam1.setPageSize((-339));
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam4 = exportParam3.setCellFormat(cellFormat0);
      RowQuotationFormat rowQuotationFormat1 = new RowQuotationFormat();
      ExportParam exportParam5 = exportParam0.setRowFormat(rowQuotationFormat1);
      exportParam2.getGetterMethod();
      exportParam5.setGetterMethod((List<Method>) null);
      ExportParam exportParam6 = exportParam4.setStartLine((-339));
      exportParam1.getSearchParam();
      ExportParam exportParam7 = exportParam6.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam8 = exportParam7.setPageSize((-339));
      exportParam8.setGetterMethod((List<Method>) null);
      exportParam0.getGetterMethod();
      ExportParam exportParam9 = exportParam6.setGetterMethod((List<Method>) null);
      exportParam9.getSearchParam();
      exportParam3.setSheetName("H.[mN'f");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setPageSize((-4191));
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam2 = exportParam1.setCellFormat(cellFormat0);
      exportParam2.getSearchParam();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator("jTOH3||O!<V5;&NV'");
      exportParam1.getGetterMethod();
      ExportParam exportParam2 = exportParam1.setGetterMethod((List<Method>) null);
      ExportParam exportParam3 = exportParam2.setRecordSeparator("jTOH3||O!<V5;&NV'");
      ExportParam exportParam4 = exportParam1.setRecordSeparator("jTOH3||O!<V5;&NV'");
      exportParam1.getCharset();
      ExportParam exportParam5 = exportParam0.setSheetIndex(1);
      ExportParam exportParam6 = exportParam4.setSheetIndex(0);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      RowQuotationFormat rowQuotationFormat1 = new RowQuotationFormat();
      exportParam2.setRowFormat(rowQuotationFormat1);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ExportParam exportParam7 = exportParam5.setGetterMethod(linkedList0);
      ExportParam exportParam8 = exportParam3.setPageSize((-2483));
      exportParam3.getPageSize();
      RowQuotationFormat rowQuotationFormat2 = new RowQuotationFormat();
      exportParam7.setSum(1);
      exportParam8.setSheetName("");
      exportParam6.setSheetName("com.github.shootercheng.export.param.ExportParam");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSum(1766);
      ExportParam exportParam2 = exportParam1.setHeader((String) null);
      ExportParam exportParam3 = exportParam2.setRecordSeparator((String) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam4 = exportParam3.setPageSize(1766);
      ExportParam exportParam5 = exportParam3.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam6 = exportParam1.setHeader((String) null);
      ExportParam exportParam7 = exportParam5.setSheetName((String) null);
      ExportParam exportParam8 = exportParam6.setRowFormat(rowQuotationFormat0);
      exportParam7.setHeader("com.github.shootercheng.export.param.ExportParam");
      rowQuotationFormat0.formatRow("$");
      ExportParam exportParam9 = exportParam1.setStartLine(4579);
      exportParam7.getSum();
      exportParam5.getRowFormat();
      exportParam8.setSheetName("");
      ExportParam exportParam10 = exportParam8.setSheetName("");
      exportParam10.getSearchParam();
      ExportParam exportParam11 = exportParam4.setSearchParam((Map<String, Object>) null);
      exportParam11.setStartLine(0);
      exportParam9.getStartLine();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator((String) null);
      ExportParam exportParam2 = exportParam1.setSum(0);
      exportParam1.setSheetName((String) null);
      exportParam2.getCharset();
      ExportParam exportParam3 = exportParam2.setSum((-1));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      rowQuotationFormat0.formatRow("");
      exportParam3.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam4 = exportParam1.setSheetIndex(0);
      ExportParam exportParam5 = exportParam4.setRecordSeparator("");
      exportParam5.setSheetIndex(0);
      ExportParam exportParam6 = exportParam0.setRecordSeparator("");
      Object object0 = new Object();
      hashMap0.put("", object0);
      ExportParam exportParam7 = exportParam3.setSearchParam(hashMap0);
      ExportParam exportParam8 = exportParam1.setSum((-1));
      exportParam0.getGetterMethod();
      exportParam3.getPageSize();
      exportParam1.getCharset();
      Map<String, Object> map0 = exportParam8.getSearchParam();
      ExportParam exportParam9 = exportParam6.setRecordSeparator((String) null);
      exportParam9.setSearchParam(map0);
      ExportParam exportParam10 = exportParam7.setStartLine((-2735));
      exportParam3.setSheetIndex(0);
      exportParam8.setRowFormat(rowQuotationFormat0);
      exportParam2.getHeader();
      exportParam9.setCharset((Charset) null);
      exportParam10.setRowFormat(rowQuotationFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      assertSame(exportParam0, exportParam1);
      
      ExportParam exportParam2 = exportParam1.setStartLine((-2335));
      ExportParam exportParam3 = exportParam2.setHeader("");
      ExportParam exportParam4 = exportParam3.setSum((-2335));
      ExportParam exportParam5 = exportParam4.setSheetIndex(0);
      exportParam5.setSum(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setCharset((Charset) null);
      ExportParam exportParam2 = exportParam1.setHeader("");
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam3 = exportParam2.setRowFormat(rowQuotationFormat0);
      exportParam3.getSearchParam();
      ExportParam exportParam4 = exportParam1.setSearchParam((Map<String, Object>) null);
      exportParam0.setSheetIndex(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ExportParam exportParam5 = exportParam3.setSearchParam(hashMap0);
      ExportParam exportParam6 = exportParam5.setGetterMethod((List<Method>) null);
      ExportParam exportParam7 = exportParam6.setRecordSeparator("");
      exportParam6.getSum();
      exportParam6.getRecordSeparator();
      exportParam2.setStartLine(212);
      ExportParam exportParam8 = exportParam3.setSheetIndex((-5203));
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cellFormat0).toString();
      ExportParam exportParam9 = exportParam8.setCellFormat(cellFormat0);
      ExportParam exportParam10 = exportParam1.setSearchParam((Map<String, Object>) null);
      exportParam9.getPageSize();
      exportParam3.getCellFormat();
      exportParam4.getSum();
      exportParam7.getHeader();
      exportParam10.getSum();
      exportParam9.setGetterMethod((List<Method>) null);
      exportParam5.getSheetIndex();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetIndex(1872);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam2 = exportParam0.setCellFormat(cellFormat0);
      exportParam2.setSum(1872);
      ExportParam exportParam3 = exportParam1.setHeader("");
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      Charset charset0 = Charset.defaultCharset();
      exportParam1.setCharset(charset0);
      exportParam0.setSum(554);
      ExportParam exportParam4 = exportParam0.setRowFormat(rowQuotationFormat0);
      exportParam0.getGetterMethod();
      ExportParam exportParam5 = exportParam4.setGetterMethod((List<Method>) null);
      CellFormat cellFormat1 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam1.setCellFormat(cellFormat1);
      exportParam5.setSheetIndex((-2167));
      exportParam0.getSum();
      ExportParam exportParam6 = exportParam0.setStartLine((-2745));
      exportParam6.setRowFormat(rowQuotationFormat0);
      exportParam6.getRowFormat();
      exportParam6.getGetterMethod();
      exportParam0.getSearchParam();
      exportParam0.setPageSize(0);
      CellFormat cellFormat2 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam3.setCellFormat(cellFormat2);
      exportParam5.getRecordSeparator();
      ExportParam exportParam7 = exportParam5.setGetterMethod((List<Method>) null);
      CellFormat cellFormat3 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam7.setCellFormat(cellFormat3);
      exportParam5.setPageSize(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam2 = exportParam1.setCharset(charset0);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      rowQuotationFormat0.formatRow("");
      ExportParam exportParam3 = exportParam2.setCellFormat(cellFormat0);
      ExportParam exportParam4 = exportParam3.setStartLine((-1));
      ExportParam exportParam5 = exportParam4.setRecordSeparator("");
      exportParam5.setSheetName(")d\"OG'");
      charset0.aliases();
      ExportParam exportParam6 = exportParam5.setRecordSeparator("^hyhJR");
      exportParam3.getHeader();
      exportParam2.setSheetName((String) null);
      exportParam6.setSheetName((String) null);
      exportParam5.setCharset(charset0);
      exportParam3.getSearchParam();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetIndex((-1584));
      ExportParam exportParam2 = exportParam1.setCharset((Charset) null);
      ExportParam exportParam3 = exportParam2.setRecordSeparator("");
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam4 = exportParam3.setCellFormat(cellFormat0);
      ExportParam exportParam5 = exportParam4.setPageSize((-1584));
      ExportParam exportParam6 = exportParam5.setCharset((Charset) null);
      exportParam1.getSheetName();
      ExportParam exportParam7 = exportParam2.setSum((-1584));
      ExportParam exportParam8 = exportParam7.setStartLine((-1584));
      exportParam8.setPageSize(567);
      exportParam0.getGetterMethod();
      exportParam5.getSum();
      CellFormat cellFormat1 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam9 = exportParam3.setCellFormat(cellFormat1);
      exportParam9.setSheetIndex((-900));
      ExportParam exportParam10 = exportParam4.setHeader((String) null);
      ExportParam exportParam11 = exportParam10.setSheetIndex((-1584));
      CellFormat cellFormat2 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam0.setCellFormat(cellFormat2);
      exportParam6.getRowFormat();
      exportParam1.getSearchParam();
      exportParam1.getRecordSeparator();
      exportParam4.getGetterMethod();
      exportParam11.getStartLine();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam0.setSum((-185));
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam2 = exportParam1.setSheetIndex(34);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam3 = exportParam2.setCellFormat(cellFormat0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ExportParam exportParam4 = exportParam2.setSearchParam(hashMap0);
      ExportParam exportParam5 = exportParam3.setSheetName("com.github.shootercheng.export.param.ExportParam");
      ExportParam exportParam6 = exportParam5.setStartLine(1);
      exportParam6.getGetterMethod();
      ExportParam exportParam7 = exportParam5.setGetterMethod((List<Method>) null);
      ExportParam exportParam8 = exportParam7.setStartLine(34);
      exportParam2.setCharset((Charset) null);
      exportParam7.setSearchParam(hashMap0);
      exportParam6.setStartLine(1);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      exportParam6.setSearchParam(hashMap1);
      exportParam5.getRecordSeparator();
      exportParam1.getStartLine();
      exportParam4.getSheetIndex();
      exportParam5.getSum();
      exportParam0.setPageSize(1);
      CellFormat cellFormat1 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam3.setRowFormat(rowQuotationFormat0);
      exportParam8.setCellFormat(cellFormat1);
      exportParam4.setRecordSeparator((String) null);
      CellFormat cellFormat2 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam1.setCellFormat(cellFormat2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam1 = exportParam0.setCellFormat(cellFormat0);
      ExportParam exportParam2 = exportParam1.setStartLine(34);
      ExportParam exportParam3 = exportParam2.setSheetIndex(34);
      ExportParam exportParam4 = exportParam3.setHeader("idnBXNc)AW3$2GA");
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      LinkedList<Method> linkedList1 = new LinkedList<Method>(linkedList0);
      ExportParam exportParam5 = exportParam4.setGetterMethod(linkedList1);
      CellFormat cellFormat1 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam6 = exportParam5.setCellFormat(cellFormat1);
      exportParam2.setSheetName("idnBXNc)AW3$2GA");
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam3.setRowFormat(rowQuotationFormat0);
      exportParam6.getRowFormat();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine((-1));
      exportParam1.getSearchParam();
      ExportParam exportParam2 = exportParam1.setSearchParam((Map<String, Object>) null);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam2.setCellFormat(cellFormat0);
      ExportParam exportParam3 = exportParam1.setHeader(",[4n85Rl`B\"FhM");
      CellFormat cellFormat1 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cellFormat1).toString();
      ExportParam exportParam4 = exportParam1.setCellFormat(cellFormat1);
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam5 = exportParam4.setCharset(charset0);
      exportParam5.setRecordSeparator("fIIgRywQ+FMZ}d?");
      exportParam2.getSheetName();
      exportParam1.getSearchParam();
      exportParam3.getGetterMethod();
      exportParam1.getCellFormat();
      ExportParam exportParam6 = exportParam2.setSheetIndex(0);
      ExportParam exportParam7 = exportParam2.setSearchParam((Map<String, Object>) null);
      exportParam7.setHeader((String) null);
      ExportParam exportParam8 = exportParam1.setStartLine(1);
      exportParam8.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam9 = exportParam6.setGetterMethod((List<Method>) null);
      exportParam9.setSheetName("%Bhy] 5HhYx3^<<|QL");
      exportParam6.setSheetIndex(0);
      exportParam0.setHeader((String) null);
      exportParam1.setHeader("i/6:,Ut54qt");
      exportParam0.setSheetName((String) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setPageSize((-1));
      ExportParam exportParam2 = exportParam1.setGetterMethod((List<Method>) null);
      ExportParam exportParam3 = exportParam2.setSheetName("&:|HhL.gs1Tm[Qg/");
      ExportParam exportParam4 = exportParam3.setHeader("&:|HhL.gs1Tm[Qg/");
      ExportParam exportParam5 = exportParam4.setRecordSeparator("com.github.shootercheng.export.param.ExportParam");
      exportParam5.getSheetIndex();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator((String) null);
      ExportParam exportParam2 = exportParam1.setPageSize(4244);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam3 = exportParam2.setRowFormat(rowQuotationFormat0);
      exportParam0.getGetterMethod();
      exportParam3.setGetterMethod((List<Method>) null);
      // Undeclared exception!
      try { 
        rowQuotationFormat0.formatRow((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.shootercheng.export.common.RowQuotationFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cellFormat0).toString();
      ExportParam exportParam1 = exportParam0.setCellFormat(cellFormat0);
      ExportParam exportParam2 = exportParam1.setPageSize(1);
      exportParam0.getSearchParam();
      ExportParam exportParam3 = exportParam2.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam4 = exportParam2.setRecordSeparator("");
      exportParam1.getSum();
      exportParam2.setSheetName("");
      exportParam2.getPageSize();
      ExportParam exportParam5 = exportParam3.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam6 = exportParam5.setPageSize(0);
      exportParam6.setStartLine(729);
      exportParam2.getPageSize();
      exportParam2.getCharset();
      ExportParam exportParam7 = exportParam6.setGetterMethod((List<Method>) null);
      exportParam5.setGetterMethod((List<Method>) null);
      exportParam3.getCellFormat();
      exportParam4.setSum(0);
      exportParam0.setSum(1);
      exportParam7.setSheetIndex((-1));
      exportParam2.setPageSize(0);
      assertEquals((-1), exportParam2.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setPageSize(2119);
      ExportParam exportParam2 = exportParam0.setStartLine(1);
      exportParam0.getSearchParam();
      exportParam0.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam3 = exportParam2.setPageSize(0);
      exportParam3.setSheetName("com.github.shootercheng.export.param.ExportParam");
      ExportParam exportParam4 = exportParam1.setHeader("iWR/M`+H^qM26=");
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam5 = exportParam4.setCellFormat(cellFormat0);
      ExportParam exportParam6 = exportParam5.setSum(2119);
      ExportParam exportParam7 = exportParam6.setGetterMethod((List<Method>) null);
      exportParam7.getStartLine();
      exportParam6.getPageSize();
      exportParam5.getGetterMethod();
      exportParam1.setPageSize(1);
      // Undeclared exception!
      try { 
        Charset.forName(";");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      exportParam0.setRecordSeparator((String) null);
      exportParam0.getGetterMethod();
      ExportParam exportParam1 = exportParam0.setGetterMethod((List<Method>) null);
      ExportParam exportParam2 = exportParam1.setRecordSeparator("");
      String string0 = exportParam2.getRecordSeparator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam1 = exportParam0.setCharset(charset0);
      assertSame(exportParam1, exportParam0);
      
      ExportParam exportParam2 = exportParam1.setHeader("");
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam3 = exportParam2.setCellFormat(cellFormat0);
      ExportParam exportParam4 = exportParam3.setSheetIndex(34);
      exportParam0.setSheetIndex(34);
      ExportParam exportParam5 = exportParam4.setRecordSeparator((String) null);
      ExportParam exportParam6 = exportParam5.setPageSize(1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam7 = exportParam5.setRowFormat(rowQuotationFormat0);
      exportParam7.setCharset(charset0);
      exportParam6.setSearchParam(hashMap0);
      exportParam5.getHeader();
      exportParam2.getSum();
      exportParam3.getHeader();
      exportParam3.setCharset(charset0);
      exportParam4.getPageSize();
      exportParam5.getRecordSeparator();
      exportParam6.setPageSize(1);
      assertEquals(1, exportParam5.getPageSize());
      assertEquals(34, exportParam0.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      int int0 = (-269);
      ExportParam exportParam1 = exportParam0.setSum((-269));
      RowFormat rowFormat0 = null;
      ExportParam exportParam2 = exportParam1.setRowFormat((RowFormat) null);
      String string0 = "com.github.shootercheng.export.param.ExportParam";
      exportParam2.setStartLine((-1));
      // Undeclared exception!
      try { 
        Charset.forName("com.github.shootercheng.export.param.ExportParam");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.github.shootercheng.export.param.ExportParam
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine((-3065));
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ExportParam exportParam2 = exportParam1.setGetterMethod(linkedList0);
      ExportParam exportParam3 = exportParam2.setPageSize(0);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam4 = exportParam3.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam5 = exportParam4.setSheetIndex((-1));
      exportParam5.getSearchParam();
      assertEquals((-1), exportParam4.getSheetIndex());
      assertEquals(0, exportParam0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSum(1837);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam2 = exportParam1.setCellFormat(cellFormat0);
      ExportParam exportParam3 = exportParam2.setRecordSeparator("");
      ExportParam exportParam4 = exportParam3.setPageSize(4684);
      ExportParam exportParam5 = exportParam4.setHeader("");
      exportParam5.setSheetIndex(4227);
      assertEquals(4684, exportParam3.getPageSize());
      assertEquals(1837, exportParam0.getSum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine(3394);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam2 = exportParam1.setCellFormat(cellFormat0);
      ExportParam exportParam3 = exportParam2.setRecordSeparator((String) null);
      ExportParam exportParam4 = exportParam3.setPageSize(0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      ExportParam exportParam5 = exportParam4.setSearchParam(hashMap1);
      exportParam5.getGetterMethod();
      ExportParam exportParam6 = exportParam3.setGetterMethod((List<Method>) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam7 = exportParam6.setRowFormat(rowQuotationFormat0);
      exportParam7.getGetterMethod();
      assertEquals(3394, exportParam0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSum(1766);
      ExportParam exportParam2 = exportParam1.setHeader((String) null);
      ExportParam exportParam3 = exportParam2.setRecordSeparator((String) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam3.setPageSize(1766);
      ExportParam exportParam4 = exportParam3.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam5 = exportParam1.setHeader((String) null);
      ExportParam exportParam6 = exportParam4.setSheetName((String) null);
      exportParam5.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam7 = exportParam6.setHeader("com.github.shootercheng.export.param.ExportParam");
      rowQuotationFormat0.formatRow("$");
      exportParam1.setStartLine(4579);
      exportParam6.getSum();
      exportParam4.getRowFormat();
      exportParam4.getHeader();
      exportParam5.setRowFormat(rowQuotationFormat0);
      exportParam7.setSum(0);
      // Undeclared exception!
      try { 
        Charset.forName("ad6cXc, vzo+8P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ad6cXc, vzo+8P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      exportParam0.setRecordSeparator(";");
      ExportParam exportParam2 = exportParam1.setSheetIndex(0);
      ExportParam exportParam3 = exportParam2.setSheetName("");
      int int0 = 34;
      exportParam3.setSum((-1545));
      exportParam1.setHeader("");
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader("`hz\"13nwN");
      ExportParam exportParam2 = exportParam1.setSheetIndex(1505);
      ExportParam exportParam3 = exportParam2.setPageSize(0);
      ExportParam exportParam4 = exportParam3.setSheetName("`hz\"13nwN");
      ExportParam exportParam5 = exportParam4.setStartLine(0);
      int int0 = exportParam5.getStartLine();
      assertEquals(1505, exportParam1.getSheetIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetName("");
      ExportParam exportParam2 = exportParam1.setRecordSeparator("");
      exportParam0.getGetterMethod();
      ExportParam exportParam3 = exportParam2.setGetterMethod((List<Method>) null);
      ExportParam exportParam4 = exportParam3.setSum(3517);
      ExportParam exportParam5 = exportParam4.setSheetIndex(0);
      exportParam5.setSheetIndex(476);
      assertEquals(476, exportParam5.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine(1602);
      exportParam0.setCharset((Charset) null);
      ExportParam exportParam2 = exportParam1.setPageSize((-1687));
      ExportParam exportParam3 = exportParam2.setSheetIndex((-1687));
      exportParam3.getRowFormat();
      assertEquals(1602, exportParam0.getStartLine());
      assertEquals((-1687), exportParam0.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine(0);
      exportParam1.setRecordSeparator("");
      ExportParam exportParam2 = exportParam1.setPageSize(0);
      ExportParam exportParam3 = exportParam2.setSheetName("r0Wpvf$qkn4[xQp8Gi");
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam4 = exportParam3.setCharset(charset0);
      ExportParam exportParam5 = exportParam4.setSheetIndex(0);
      exportParam2.setSheetIndex(0);
      exportParam0.getSearchParam();
      exportParam1.setSearchParam((Map<String, Object>) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam6 = exportParam1.setRowFormat(rowQuotationFormat0);
      exportParam6.setSum(0);
      exportParam5.setSum(0);
      exportParam3.setRecordSeparator("");
      exportParam6.setSheetName("");
      exportParam5.setRecordSeparator("\"y]%\"^ 2f76");
      exportParam6.getRowFormat();
      exportParam0.getRowFormat();
      assertEquals(0, exportParam0.getSheetIndex());
      assertEquals(0, exportParam0.getPageSize());
      assertEquals(0, exportParam0.getSum());
      assertEquals(0, exportParam0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      exportParam0.setCharset((Charset) null);
      exportParam0.setPageSize((-1687));
      exportParam0.getRowFormat();
      assertEquals((-1687), exportParam0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator("@\"l2S");
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam2 = exportParam1.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam3 = exportParam2.setSheetIndex(4861);
      ExportParam exportParam4 = exportParam3.setStartLine(4861);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam5 = exportParam4.setCellFormat(cellFormat0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      exportParam5.setSearchParam(hashMap0);
      assertEquals(4861, exportParam2.getSheetIndex());
      assertEquals(4861, exportParam0.getStartLine());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetName("ul@8f-v$6");
      ExportParam exportParam2 = exportParam1.setRecordSeparator("ul@8f-v$6");
      ExportParam exportParam3 = exportParam2.setSheetIndex((-1));
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam4 = exportParam2.setRowFormat(rowQuotationFormat0);
      exportParam4.getSearchParam();
      ExportParam exportParam5 = exportParam3.setSearchParam((Map<String, Object>) null);
      ExportParam exportParam6 = exportParam5.setCellFormat((CellFormat) null);
      exportParam6.setHeader("");
      exportParam2.getRecordSeparator();
      assertEquals((-1), exportParam2.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setPageSize(1339);
      assertEquals(1339, exportParam1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader("`hz\"13nwN");
      ExportParam exportParam2 = exportParam1.setPageSize(0);
      ExportParam exportParam3 = exportParam2.setSheetName("`hz\"13nwN");
      ExportParam exportParam4 = exportParam3.setStartLine(0);
      int int0 = exportParam4.getStartLine();
      assertEquals(0, exportParam4.getPageSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader(",");
      exportParam1.getSearchParam();
      ExportParam exportParam2 = exportParam1.setSearchParam((Map<String, Object>) null);
      exportParam0.getGetterMethod();
      ExportParam exportParam3 = exportParam2.setGetterMethod((List<Method>) null);
      int int0 = (-1090);
      ExportParam exportParam4 = exportParam3.setSheetIndex((-1090));
      ExportParam exportParam5 = exportParam4.setSheetName(",");
      exportParam1.setSum(2099);
      exportParam5.getSum();
      exportParam2.getStartLine();
      exportParam1.setRecordSeparator(",");
      exportParam0.setGetterMethod((List<Method>) null);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam2 = exportParam1.setSheetIndex(0);
      ExportParam exportParam3 = exportParam2.setSum(0);
      ExportParam exportParam4 = exportParam3.setCharset((Charset) null);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      exportParam3.setCellFormat(cellFormat0);
      ExportParam exportParam5 = exportParam3.setSheetName("com.github.shootercheng.export.param.ExportParam");
      rowQuotationFormat0.formatRow("com.github.shootercheng.export.param.ExportParam");
      ExportParam exportParam6 = exportParam5.setStartLine(0);
      exportParam2.getCharset();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ExportParam exportParam7 = exportParam6.setGetterMethod(linkedList0);
      exportParam4.setSheetIndex(0);
      exportParam5.setHeader("");
      exportParam4.getHeader();
      exportParam6.getCharset();
      exportParam6.setRecordSeparator("");
      ExportParam exportParam8 = exportParam7.setRecordSeparator("`m");
      exportParam8.getGetterMethod();
      int int0 = exportParam8.getPageSize();
      assertEquals(0, exportParam7.getStartLine());
      assertEquals(0, int0);
      assertEquals(0, exportParam7.getSum());
      assertEquals(0, exportParam7.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader(";");
      ExportParam exportParam2 = exportParam1.setGetterMethod((List<Method>) null);
      exportParam1.getHeader();
      exportParam0.getCharset();
      ExportParam exportParam3 = exportParam1.setSheetIndex(0);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam4 = exportParam0.setRowFormat(rowQuotationFormat0);
      ExportParam exportParam5 = exportParam0.setGetterMethod((List<Method>) null);
      int int0 = exportParam2.getPageSize();
      assertEquals(0, int0);
      
      exportParam3.setRowFormat(rowQuotationFormat0);
      exportParam5.setSheetName(";");
      ExportParam exportParam6 = exportParam4.setSheetName(";");
      assertEquals(0, exportParam6.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setCellFormat((CellFormat) null);
      assertNull(exportParam1.getHeader());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator("");
      exportParam1.getCellFormat();
      exportParam1.getSheetName();
      exportParam0.getSearchParam();
      exportParam0.getHeader();
      ExportParam exportParam2 = exportParam1.setCellFormat((CellFormat) null);
      ExportParam exportParam3 = exportParam2.setHeader((String) null);
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      exportParam3.setRowFormat(rowQuotationFormat0);
      exportParam0.getPageSize();
      exportParam1.getStartLine();
      exportParam0.setSheetName(";");
      int int0 = exportParam2.getStartLine();
      assertEquals(0, int0);
      
      exportParam3.setPageSize(0);
      ExportParam exportParam4 = exportParam2.setRowFormat(rowQuotationFormat0);
      assertEquals(0, exportParam4.getPageSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader("");
      assertSame(exportParam1, exportParam0);
      
      ExportParam exportParam2 = exportParam0.setSheetName("");
      exportParam0.getGetterMethod();
      ExportParam exportParam3 = exportParam2.setGetterMethod((List<Method>) null);
      CellFormat cellFormat0 = mock(CellFormat.class, new ViolatedAssumptionAnswer());
      ExportParam exportParam4 = exportParam3.setCellFormat(cellFormat0);
      ExportParam exportParam5 = exportParam4.setSum(693);
      ExportParam exportParam6 = exportParam5.setRowFormat((RowFormat) null);
      exportParam6.getSheetName();
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam7 = exportParam2.setCharset(charset0);
      ExportParam exportParam8 = exportParam3.setCharset(charset0);
      exportParam3.setHeader("");
      exportParam8.getSearchParam();
      exportParam3.getGetterMethod();
      exportParam3.getCharset();
      exportParam3.setHeader("");
      int int0 = exportParam7.getSum();
      assertEquals(693, int0);
      
      exportParam6.getGetterMethod();
      exportParam0.setHeader("");
      assertEquals(693, exportParam0.getSum());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSum(658);
      assertEquals(658, exportParam1.getSum());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      exportParam0.setSum(0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      Map<String, Object> map0 = exportParam0.getSearchParam();
      assertNull(map0);
      
      ExportParam exportParam1 = exportParam0.setSearchParam((Map<String, Object>) null);
      assertNull(exportParam1.getHeader());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setStartLine((-3109));
      assertEquals((-3109), exportParam1.getStartLine());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      List<Method> list0 = exportParam0.getGetterMethod();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setHeader("&4.LZiN/gs>~$2@Qbg");
      HashMap<String, Method> hashMap0 = new HashMap<String, Method>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      exportParam0.setSearchParam(hashMap1);
      exportParam0.setSum(1);
      exportParam0.setSheetIndex(1);
      int int0 = exportParam1.getSum();
      assertEquals(1, exportParam1.getSheetIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator("/xwr#<9uU5");
      assertEquals(0, exportParam1.getPageSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      exportParam0.getCellFormat();
      exportParam0.setHeader("");
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam1 = exportParam0.setCharset(charset0);
      assertSame(exportParam1, exportParam0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      Charset charset0 = exportParam0.getCharset();
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      RowQuotationFormat rowQuotationFormat0 = new RowQuotationFormat();
      ExportParam exportParam1 = exportParam0.setRowFormat(rowQuotationFormat0);
      exportParam1.setHeader("com.github.shootercheng.export.common.RowQuotationFormat");
      exportParam1.getCellFormat();
      String string0 = exportParam1.getHeader();
      assertEquals("com.github.shootercheng.export.common.RowQuotationFormat", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      String string0 = exportParam0.getRecordSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setRecordSeparator("jTOH3||O!<V5;&NV'");
      exportParam1.getGetterMethod();
      ExportParam exportParam2 = exportParam1.setGetterMethod((List<Method>) null);
      ExportParam exportParam3 = exportParam2.setRecordSeparator("jTOH3||O!<V5;&NV'");
      exportParam1.setRecordSeparator("jTOH3||O!<V5;&NV'");
      ExportParam exportParam4 = exportParam2.setHeader("bnq]/tbI&]?j'?UA");
      ExportParam exportParam5 = exportParam3.setStartLine(0);
      exportParam2.setHeader("bnq]/tbI&]?j'?UA");
      ExportParam exportParam6 = exportParam5.setGetterMethod((List<Method>) null);
      exportParam6.setRecordSeparator("P\"v0");
      ExportParam exportParam7 = exportParam3.setRecordSeparator("Zce|0w'd;c");
      exportParam2.getRecordSeparator();
      exportParam1.getHeader();
      exportParam2.getSearchParam();
      exportParam1.setGetterMethod((List<Method>) null);
      exportParam3.getCharset();
      ExportParam exportParam8 = exportParam5.setSheetName("Zce|0w'd;c");
      ExportParam exportParam9 = exportParam8.setSearchParam((Map<String, Object>) null);
      exportParam3.getCellFormat();
      int int0 = exportParam4.getSheetIndex();
      exportParam7.setSheetName("Zce|0w'd;c");
      int int1 = exportParam9.getSum();
      assertEquals(0, exportParam5.getStartLine());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setPageSize((-1));
      ExportParam exportParam2 = exportParam1.setGetterMethod((List<Method>) null);
      ExportParam exportParam3 = exportParam2.setSheetName("&:|HhL.gs1Tm[Qg/");
      ExportParam exportParam4 = exportParam1.setRecordSeparator("&:|HhL.gs1Tm[Qg/");
      exportParam4.getSheetIndex();
      exportParam3.setSum(0);
      assertEquals((-1), exportParam0.getPageSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetIndex(0);
      assertEquals(0, exportParam1.getSheetIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ExportParam exportParam1 = exportParam0.setGetterMethod(linkedList0);
      assertNull(exportParam1.getHeader());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      ExportParam exportParam1 = exportParam0.setSheetName("R=K");
      assertEquals(0, exportParam1.getStartLine());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ExportParam exportParam0 = new ExportParam();
      Charset charset0 = Charset.defaultCharset();
      ExportParam exportParam1 = exportParam0.setCharset(charset0);
      ExportParam exportParam2 = exportParam1.setHeader("com.github.shootercheng.export.param.ExportParam");
      ExportParam exportParam3 = exportParam2.setSheetName("com.github.shootercheng.export.param.ExportParam");
      ExportParam exportParam4 = exportParam3.setSheetIndex(0);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      ExportParam exportParam5 = exportParam4.setGetterMethod(linkedList0);
      int int0 = exportParam5.getSheetIndex();
      assertEquals(0, int0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      exportParam4.setSearchParam(hashMap0);
      exportParam2.setHeader((String) null);
      assertEquals(0, exportParam0.getSheetIndex());
  }
}
