/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 20 10:24:14 GMT 2022
 */

package com.github.shootercheng.export.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.shootercheng.export.utils.ReflectUtil;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectUtil_ESTest extends ReflectUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation> class1 = Annotation.class;
      Field field0 = ReflectUtil.findField(class0, "clazz", class1);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Field[] fieldArray0 = ReflectUtil.getClassField(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = ReflectUtil.findMethod(class0, "toShortString", classArray0);
      assertNotNull(method0);
      assertEquals("java.lang.String java.lang.reflect.Field.toShortString()", method0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.makeAccessible((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ReflectUtil.getAllFields(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getClassField((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getBeanGetterMap((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Map<String, Method> map0 = ReflectUtil.getBeanGetterMap(class0);
      assertEquals(13, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getBeanSetterMap((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Map<String, Method> map0 = ReflectUtil.getBeanSetterMap(class0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Method> list0 = ReflectUtil.getBeanMethods(class0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        ReflectUtil.getBeanMethods(classArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      Method method0 = ReflectUtil.findMethod(class0, "WhiHl%h>T$p]-", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        ReflectUtil.findMethod(class0, "WhiHl%h>T$p]-", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 0);
      Method method0 = ReflectUtil.findMethod(class0, "getBoolean", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        ReflectUtil.findMethod(class0, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param error
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 7);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ReflectUtil.findMethod(class0, (String) null, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param error
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = ReflectUtil.findMethod(class0, "isSynthetic", classArray0);
      assertNotNull(method0);
      assertEquals(1, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        ReflectUtil.findMethod(classArray0[0], "~f", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param error
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getAllMethods((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Method[]> list0 = ReflectUtil.getAllMethods(class0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getClassMethod((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param class is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Method[] methodArray0 = ReflectUtil.getClassMethod(class0);
      assertEquals(49, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = ReflectUtil.findField(class0, "setChar", (Class<?>) null);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = ReflectUtil.findField(class0, (String) null, class0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Field field0 = ReflectUtil.findField((Class<?>) null, "1Zjr/G", (Class<?>) null);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field field0 = ReflectUtil.findField(class0, "root", class0);
      ReflectUtil.makeAccessible(field0);
      assertTrue(field0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Field>[] classArray0 = (Class<Field>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        ReflectUtil.getAllFields(classArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Field[] fieldArray0 = ReflectUtil.getClassField(class0);
      assertEquals(12, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ReflectUtil.findField(class0, "slot", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input param is null
         //
         verifyException("com.github.shootercheng.export.utils.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Field[]> list0 = ReflectUtil.getAllFields(class0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReflectUtil reflectUtil0 = new ReflectUtil();
  }
}
