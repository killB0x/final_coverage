/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:51:05 GMT 2022
 */

package org.holmes.statement;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.holmes.Statement;
import org.holmes.Validator;
import org.holmes.evaluator.ObjectEvaluator;
import org.holmes.statement.AndStatement;
import org.holmes.statement.OrStatement;
import org.holmes.statement.SimpleStatement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrStatement_ESTest extends OrStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ObjectEvaluator<Object> objectEvaluator0 = new ObjectEvaluator<Object>(object0);
      SimpleStatement simpleStatement0 = new SimpleStatement(objectEvaluator0);
      AndStatement andStatement0 = new AndStatement(simpleStatement0, simpleStatement0);
      OrStatement orStatement0 = new OrStatement(andStatement0, (Statement) null);
      // Undeclared exception!
      try { 
        orStatement0.evaluate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.holmes.statement.OrStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1110));
      ObjectEvaluator<Integer> objectEvaluator0 = new ObjectEvaluator<Integer>(integer0);
      SimpleStatement simpleStatement0 = new SimpleStatement(objectEvaluator0);
      OrStatement orStatement0 = new OrStatement(simpleStatement0, simpleStatement0);
      Validator<Integer> validator0 = (Validator<Integer>) mock(Validator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, true).when(validator0).isValid(anyInt());
      objectEvaluator0.isValidBy(validator0);
      boolean boolean0 = orStatement0.evaluate();
      boolean boolean1 = orStatement0.evaluate();
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = orStatement0.evaluate();
      assertTrue(boolean2);
  }
}
