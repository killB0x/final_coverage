/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:45:24 GMT 2022
 */

package org.holmes.evaluator.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.holmes.evaluator.support.Diff;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Diff_ESTest extends Diff_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      Diff diff1 = diff0.inSeconds();
      diff0.setTarget(mockDate0);
      Number number0 = diff1.calculate();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      diff0.inSeconds();
      diff0.setTarget(mockDate0);
      mockDate0.setTime(1L);
      Number number0 = diff0.calculate();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Diff diff0 = Diff.fromNow();
      MockDate mockDate0 = new MockDate(1, 1, 0);
      diff0.setTarget(mockDate0);
      Diff diff1 = diff0.inMilliseconds();
      Number number0 = diff1.calculate();
      assertEquals((-3567270081320L), number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 0);
      Diff diff0 = Diff.from(mockDate0);
      assertNotNull(diff0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Diff diff0 = Diff.fromNow();
      Diff diff1 = diff0.inSeconds();
      // Undeclared exception!
      try { 
        diff1.calculate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.holmes.evaluator.support.Diff", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Diff diff0 = Diff.to((Date) null);
      // Undeclared exception!
      try { 
        diff0.calculate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // either beginning date or ending date must be set.
         //
         verifyException("org.holmes.evaluator.support.Diff", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      Diff diff1 = diff0.inYears();
      assertSame(diff0, diff1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      Diff diff1 = diff0.inMinutes();
      assertSame(diff1, diff0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      // Undeclared exception!
      try { 
        diff0.calculate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // time unit must be specified: Diff.[to|toNow|from|fromNow]().in[Milliseconds|Seconds|Minutes|Hours|Days|Months|Years]()
         //
         verifyException("org.holmes.evaluator.support.Diff", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Diff diff0 = Diff.toNow();
      Diff diff1 = diff0.inDays();
      assertSame(diff1, diff0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Diff diff0 = Diff.toNow();
      Diff diff1 = diff0.inMonths();
      assertSame(diff0, diff1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Diff diff0 = Diff.to(mockDate0);
      Diff diff1 = diff0.inHours();
      assertSame(diff0, diff1);
  }
}
