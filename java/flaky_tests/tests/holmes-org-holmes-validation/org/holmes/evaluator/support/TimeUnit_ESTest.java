/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:57:49 GMT 2022
 */

package org.holmes.evaluator.support;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.holmes.evaluator.support.TimeUnit;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeUnit_ESTest extends TimeUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit[] timeUnitArray0 = TimeUnit.values();
      assertEquals(7, timeUnitArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit.valueOf("DAY");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECOND;
      Number number0 = timeUnit0.fromMillis(2591999998L);
      assertEquals(2591999998L, number0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECOND;
      Number number0 = timeUnit0.fromMillis(3956L);
      assertEquals(3.956, number0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTE;
      Number number0 = timeUnit0.fromMillis(652L);
      assertEquals(0.0108666667, number0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOUR;
      Number number0 = timeUnit0.fromMillis((-1L));
      assertEquals((-2.778E-7), number0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MONTH;
      Number number0 = timeUnit0.fromMillis(2062L);
      assertEquals(7.956E-7, number0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.YEAR;
      Number number0 = timeUnit0.fromMillis(2592000000L);
      assertEquals(0.0821372727, number0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAY;
      Number number0 = timeUnit0.fromMillis(2591999969L);
      assertEquals(29.9999996413, number0);
  }
}
