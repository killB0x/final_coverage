/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:38:04 GMT 2022
 */

package org.holmes.evaluator.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.holmes.evaluator.support.Interval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-532));
      Interval<Integer> interval0 = Interval.leftOpenInterval(integer2, integer0);
      boolean boolean0 = interval0.contains(integer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-2420));
      Interval<Integer> interval0 = Interval.rightOpenInterval(integer0, integer0);
      Integer integer1 = Integer.getInteger("}:", (-1));
      boolean boolean0 = interval0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      Interval<Integer> interval0 = Interval.closedInterval(integer1, integer0);
      boolean boolean0 = interval0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-2420));
      Integer integer1 = new Integer(0);
      Interval<Integer> interval0 = Interval.openInterval(integer1, integer1);
      boolean boolean0 = interval0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2420));
      Integer integer1 = Integer.getInteger("}:", (-1));
      Interval<Integer> interval0 = Interval.openInterval(integer0, integer1);
      assertNotNull(interval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(289);
      Interval<Integer> interval0 = Interval.rightOpenInterval(integer0, integer1);
      boolean boolean0 = interval0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(912);
      Interval<Integer> interval0 = Interval.rightOpenInterval(integer0, integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = interval0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Interval<Integer> interval0 = Interval.leftOpenInterval(integer0, integer0);
      Integer integer1 = new Integer(1);
      boolean boolean0 = interval0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Interval<Integer> interval0 = Interval.leftOpenInterval((Integer) null, integer0);
      // Undeclared exception!
      try { 
        interval0.contains(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval<Integer> interval0 = Interval.rightOpenInterval((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        interval0.contains((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // both leftBoundary and rightBoundary must been set.
         //
         verifyException("org.holmes.evaluator.support.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Interval<Integer> interval0 = Interval.rightOpenInterval(integer0, integer0);
      boolean boolean0 = interval0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Interval<Integer> interval0 = Interval.leftOpenInterval(integer0, integer0);
      boolean boolean0 = interval0.contains(integer0);
      assertFalse(boolean0);
  }
}
