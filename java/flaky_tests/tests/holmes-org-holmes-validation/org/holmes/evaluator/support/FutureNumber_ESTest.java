/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:52:12 GMT 2022
 */

package org.holmes.evaluator.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.holmes.evaluator.support.FutureNumber;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FutureNumber_ESTest extends FutureNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short) (-487));
      futureNumber0.wrap(short0);
      String string0 = futureNumber0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Double double0 = Double.valueOf(0.0);
      futureNumber0.wrap(double0);
      long long0 = futureNumber0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short)926);
      futureNumber0.wrap(short0);
      long long0 = futureNumber0.longValue();
      assertEquals(926L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short) (-487));
      futureNumber0.wrap(short0);
      long long0 = futureNumber0.longValue();
      assertEquals((-487L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Float float0 = Float.valueOf(0.0F);
      futureNumber0.wrap(float0);
      int int0 = futureNumber0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Long long0 = new Long(1060L);
      futureNumber0.wrap(long0);
      int int0 = futureNumber0.intValue();
      assertEquals(1060, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short) (-487));
      futureNumber0.wrap(short0);
      int int0 = futureNumber0.intValue();
      assertEquals((-487), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Double double0 = Double.valueOf(0.0);
      futureNumber0.wrap(double0);
      float float0 = futureNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Long long0 = Long.valueOf(756L);
      futureNumber0.wrap(long0);
      float float0 = futureNumber0.floatValue();
      assertEquals(756.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short) (-487));
      futureNumber0.wrap(short0);
      float float0 = futureNumber0.floatValue();
      assertEquals((-487.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Double double0 = Double.valueOf(0.0);
      futureNumber0.wrap(double0);
      double double1 = futureNumber0.doubleValue();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Long long0 = Long.valueOf(1L);
      futureNumber0.wrap(long0);
      double double0 = futureNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      Short short0 = Short.valueOf((short) (-487));
      futureNumber0.wrap(short0);
      double double0 = futureNumber0.doubleValue();
      assertEquals((-487.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      // Undeclared exception!
      try { 
        futureNumber0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown wrapped number.
         //
         verifyException("org.holmes.evaluator.support.FutureNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      // Undeclared exception!
      try { 
        futureNumber0.longValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown wrapped number.
         //
         verifyException("org.holmes.evaluator.support.FutureNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      // Undeclared exception!
      try { 
        futureNumber0.doubleValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown wrapped number.
         //
         verifyException("org.holmes.evaluator.support.FutureNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      // Undeclared exception!
      try { 
        futureNumber0.intValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown wrapped number.
         //
         verifyException("org.holmes.evaluator.support.FutureNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FutureNumber futureNumber0 = new FutureNumber();
      // Undeclared exception!
      try { 
        futureNumber0.floatValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown wrapped number.
         //
         verifyException("org.holmes.evaluator.support.FutureNumber", e);
      }
  }
}
