/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 13:47:13 GMT 2022
 */

package org.holmes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.holmes.Evaluator;
import org.holmes.Rule;
import org.holmes.Statement;
import org.holmes.evaluator.ObjectEvaluator;
import org.holmes.statement.AndStatement;
import org.holmes.statement.OrStatement;
import org.holmes.statement.SimpleStatement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rule_ESTest extends Rule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Rule rule0 = Rule.simpleFor((Evaluator<?>) null);
      // Undeclared exception!
      try { 
        rule0.evaluate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.holmes.statement.SimpleStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ObjectEvaluator<Object> objectEvaluator0 = new ObjectEvaluator<Object>(object0);
      Rule rule0 = Rule.simpleFor(objectEvaluator0);
      try { 
        rule0.evaluate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.holmes.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectEvaluator<Object> objectEvaluator0 = new ObjectEvaluator<Object>((Object) null);
      Rule rule0 = Rule.simpleFor(objectEvaluator0);
      objectEvaluator0.isNull();
      rule0.evaluate();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Rule rule0 = Rule.simpleFor((Evaluator<?>) null);
      rule0.setViolationDescriptor("", (Object[]) null);
      boolean boolean0 = rule0.hasViolationDescriptor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(7);
      ObjectEvaluator<Integer> objectEvaluator0 = new ObjectEvaluator<Integer>(integer0);
      Rule rule0 = Rule.simpleFor(objectEvaluator0);
      boolean boolean0 = rule0.hasViolationDescriptor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Rule rule0 = Rule.simpleFor((Evaluator<?>) null);
      rule0.addOrStatement((Statement) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      ObjectEvaluator<Object> objectEvaluator0 = new ObjectEvaluator<Object>(object0);
      Rule rule0 = Rule.simpleFor(objectEvaluator0);
      Object[] objectArray0 = new Object[4];
      rule0.setViolationDescriptor("org.holmes.Rule", objectArray0);
      boolean boolean0 = rule0.hasViolationDescriptor();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      ObjectEvaluator<Object> objectEvaluator0 = new ObjectEvaluator<Object>(object0);
      Rule rule0 = Rule.simpleFor(objectEvaluator0);
      SimpleStatement simpleStatement0 = new SimpleStatement(objectEvaluator0);
      AndStatement andStatement0 = new AndStatement(simpleStatement0, simpleStatement0);
      OrStatement orStatement0 = new OrStatement(andStatement0, andStatement0);
      rule0.addAndStatement(orStatement0);
  }
}
