/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 03:10:34 GMT 2022
 */

package org.jiucai.appframework.common.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiucai.appframework.common.security.AsymmetricEncryptor;
import org.jiucai.appframework.common.security.RSA;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RSA_ESTest extends RSA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RSA rSA0 = new RSA();
      byte[] byteArray0 = new byte[0];
      RSA.log = null;
      String string0 = "7B,'198ka5'\\ s=";
      try { 
        RSA.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.security.RSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RSA rSA0 = new RSA();
      RSA.log = null;
      // Undeclared exception!
      try { 
        RSA.verify((byte[]) null, "7B,'198ka5' s=", "AsymmetricEncryptorPublicKey");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.security.RSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        RSA.initKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.security.RSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RSA.main((String[]) null);
      RSA.initKey("DSA");
      RSA.main((String[]) null);
      byte[] byteArray0 = new byte[0];
      RSA.verify(byteArray0, "DSA", (String) null);
      RSA.main((String[]) null);
      RSA.initKey("$ed<O");
      RSA.main((String[]) null);
      RSA.main((String[]) null);
      RSA.main((String[]) null);
      RSA.initKey("$ed<O");
      RSA.main((String[]) null);
      RSA.verify(byteArray0, "$ed<O", "invalid Base64 sign.");
      RSA.initKey("UTF-8");
      RSA.main((String[]) null);
      RSA.sign(byteArray0, "$T|_QVA");
      RSA.main((String[]) null);
      RSA.sign(byteArray0, "DSA");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      RSA.sign(byteArray1, (String) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "^(vcpkBViQokk^;<[";
      stringArray0[1] = "7/#biKG!s";
      stringArray0[2] = "}PE@~g]`P0";
      stringArray0[3] = "";
      stringArray0[4] = "BqB3D.`CJ^f!q_)'";
      stringArray0[5] = "invalid Base64 sign.";
      stringArray0[6] = "sign failed";
      RSA.main(stringArray0);
      byte[] byteArray0 = new byte[0];
      RSA.verify(byteArray0, "", "");
      RSA rSA0 = new RSA();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        AsymmetricEncryptor.getPrivateKey(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.security.AsymmetricEncryptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RSA.initKey(",J_");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RSA.sign((byte[]) null, "");
      RSA.main((String[]) null);
      RSA.verify((byte[]) null, "", "");
      RSA.main((String[]) null);
      RSA.main((String[]) null);
  }
}
