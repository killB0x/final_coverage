/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 02:47:42 GMT 2022
 */

package org.jiucai.appframework.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jiucai.appframework.common.util.DomainUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DomainUtil_ESTest extends DomainUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[4];
      DomainUtil.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = DomainUtil.isIp(".G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = DomainUtil.getTopDomain("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "btX{N&!AJX?S,KUi-3";
      DomainUtil.protocols = stringArray0;
      // Undeclared exception!
      try { 
        DomainUtil.main((String[]) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // ^btX{N&!AJX?S,KUi-3:[/]*
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DomainUtil.protocols = null;
      // Undeclared exception!
      try { 
        DomainUtil.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.util.DomainUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        DomainUtil.isIp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.util.DomainUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "*02)sN";
      DomainUtil.protocols = stringArray0;
      // Undeclared exception!
      try { 
        DomainUtil.getTopDomain("null");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // ^*02)sN:[/]*
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DomainUtil.protocols = null;
      // Undeclared exception!
      try { 
        DomainUtil.getTopDomain("zu9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.util.DomainUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = ".ecs[u``v3w-^x\"z&";
      DomainUtil.protocols = stringArray0;
      // Undeclared exception!
      try { 
        DomainUtil.getSubDomain("org.jiucai.appframework.common.util.domainutil", 0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 14
         // ^.ecs[u``v3w-^x\"z&:[/]*
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DomainUtil.protocols = null;
      // Undeclared exception!
      try { 
        DomainUtil.getSubDomain(".com.cn", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.common.util.DomainUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "cK(";
      DomainUtil.protocols = stringArray0;
      // Undeclared exception!
      try { 
        DomainUtil.getDomain(".org.tw");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // ^cK(:[/]*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Boolean boolean0 = DomainUtil.isIp("cv0[,F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain("org.jiucai.appframework.common.util.domainutil", 2);
      assertEquals(".util.domainutil", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain("org.jiucai.appframework.common.util.domainutil", 0);
      assertEquals(".domainutil", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain("CcL6&kw`F;hrS&=v%", (-2979));
      assertEquals(".ccl6&kw`f;hrs&=v%", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain(" , \u503C: ", 32);
      assertEquals(".,\u503C", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain("", 34);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain((String) null, (-12));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = DomainUtil.getDomain(":0");
      assertEquals(":0", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = DomainUtil.getDomain("[2001:db8:85a3:8d3:1319:8a2e:370:7348]");
      assertEquals("2001:db8:85a3:8d3:1319:8a2e:370", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = DomainUtil.getDomain(":[/]*");
      assertEquals(":[", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = DomainUtil.getDomain(":");
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = DomainUtil.getDomain("0:0:0:FFFF:129.144.52.38/index.jsp");
      assertEquals("0:0:0:ffff:129.144.52.38", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = DomainUtil.getDomain("ftp://upload.test-test.org");
      assertEquals("upload.test-test.org", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = DomainUtil.getDomain("http:www.jiucai.org");
      assertEquals("www.jiucai.org", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = DomainUtil.getDomain((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = DomainUtil.getTopDomain(")}J[`K&IE9q@to20)=");
      assertEquals(".)}j[`k&ie9q@to20)=", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = DomainUtil.getDomain("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = DomainUtil.getSubDomain("..cm", 1014);
      assertEquals("..cm", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = DomainUtil.getTopDomain("ftp:^/usernamepasswrG@f.viui.ok:21/uload");
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = DomainUtil.getTopDomain((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DomainUtil.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DomainUtil domainUtil0 = new DomainUtil();
  }
}
