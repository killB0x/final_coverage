/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 03:02:36 GMT 2022
 */

package org.jiucai.appframework.base.executor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.jiucai.appframework.base.executor.AppExecutorService;
import org.jiucai.appframework.base.executor.AppExecutorServiceFactory;
import org.jiucai.appframework.base.executor.impl.DefaultExecutorCommand;
import org.jiucai.appframework.base.executor.impl.DefaultExecutorService;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AppExecutorServiceFactory_ESTest extends AppExecutorServiceFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultExecutorCommand defaultExecutorCommand0 = new DefaultExecutorCommand();
      AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      Boolean boolean0 = AppExecutorServiceFactory.removeExecutorCommand(defaultExecutorCommand0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultExecutorCommand defaultExecutorCommand0 = new DefaultExecutorCommand();
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.getInstance();
      defaultExecutorCommand0.setService(defaultExecutorService0);
      AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      defaultExecutorCommand0.shutdown();
      AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      AppExecutorServiceFactory.add(forkJoinPool0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      forkJoinPool0.awaitTermination((-5543L), timeUnit0);
      AppExecutorServiceFactory.shutdown();
      AppExecutorServiceFactory.shutdown();
      AppExecutorServiceFactory.remove(forkJoinPool0);
      AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      AppExecutorServiceFactory appExecutorServiceFactory0 = AppExecutorServiceFactory.getInstance();
      assertNotNull(appExecutorServiceFactory0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AppExecutorServiceFactory appExecutorServiceFactory0 = AppExecutorServiceFactory.getInstance();
      appExecutorServiceFactory0.getThreadPoolList();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AppExecutorServiceFactory appExecutorServiceFactory0 = AppExecutorServiceFactory.getInstance();
      List<AppExecutorService> list0 = appExecutorServiceFactory0.getCommandList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AppExecutorServiceFactory appExecutorServiceFactory0 = AppExecutorServiceFactory.getInstance();
      AppExecutorServiceFactory appExecutorServiceFactory1 = AppExecutorServiceFactory.getInstance();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      appExecutorServiceFactory0.getThreadPoolList();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      List<AppExecutorService> list0 = appExecutorServiceFactory1.getCommandList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockThread.getDefaultUncaughtExceptionHandler();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      Boolean boolean0 = AppExecutorServiceFactory.remove(scheduledThreadPoolExecutor0);
      Boolean boolean1 = AppExecutorServiceFactory.add(scheduledThreadPoolExecutor0);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AppExecutorServiceFactory.getInstance();
      AppExecutorServiceFactory.shutdown();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AppExecutorServiceFactory.shutdown();
      DefaultExecutorService.getExecutorService();
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.getInstance();
      assertEquals("Default", defaultExecutorService0.getName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.getInstance();
      DefaultExecutorService.getInstance();
      DefaultExecutorCommand defaultExecutorCommand0 = new DefaultExecutorCommand(defaultExecutorService0);
      Boolean boolean0 = AppExecutorServiceFactory.removeExecutorCommand(defaultExecutorCommand0);
      Boolean boolean1 = AppExecutorServiceFactory.addExecutorCommand(defaultExecutorCommand0);
      assertFalse(boolean1.equals((Object)boolean0));
  }
}
