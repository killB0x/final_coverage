/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 03:03:43 GMT 2022
 */

package org.jiucai.appframework.base.executor.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiucai.appframework.base.executor.impl.DefaultExecutorService;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultExecutorService_ESTest extends DefaultExecutorService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.setParam((String) null, 216);
      String string0 = defaultExecutorService0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.setParam(" threads ...", 0);
      DefaultExecutorService.setParam("", 20);
      String string0 = defaultExecutorService0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultExecutorService.logger = null;
      // Undeclared exception!
      try { 
        DefaultExecutorService.getExecutorService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.base.executor.impl.DefaultExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.getInstance();
      DefaultExecutorService.logger = null;
      // Undeclared exception!
      try { 
        defaultExecutorService0.shutdown();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiucai.appframework.base.executor.impl.DefaultExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.setParam("try to shutdown ExecutorService ", 1);
      DefaultExecutorService.getExecutorService();
      defaultExecutorService0.shutdown();
      assertEquals("try to shutdown ExecutorService ", defaultExecutorService0.getName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.setParam("try to shutdown ExecutorService ", 1);
      defaultExecutorService0.shutdown();
      assertEquals("try to shutdown ExecutorService ", defaultExecutorService0.getName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultExecutorService.setParam(" threads ...", 0);
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.getInstance();
      assertEquals(" threads ...", defaultExecutorService0.getName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExecutorService executorService0 = DefaultExecutorService.getExecutorService();
      ExecutorService executorService1 = DefaultExecutorService.getExecutorService();
      assertSame(executorService1, executorService0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultExecutorService defaultExecutorService0 = DefaultExecutorService.setParam(" threads ...", 0);
      String string0 = defaultExecutorService0.getName();
      assertEquals(" threads ...", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultExecutorService.setParam("afOC@r\"H[ ", (-2224));
      // Undeclared exception!
      try { 
        DefaultExecutorService.getExecutorService();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
