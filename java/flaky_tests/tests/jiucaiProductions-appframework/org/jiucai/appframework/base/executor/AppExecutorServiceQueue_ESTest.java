/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 03:23:37 GMT 2022
 */

package org.jiucai.appframework.base.executor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiucai.appframework.base.executor.AppExecutorServiceQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AppExecutorServiceQueue_ESTest extends AppExecutorServiceQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AppExecutorServiceQueue<Object> appExecutorServiceQueue0 = new AppExecutorServiceQueue<Object>(3825);
      // Undeclared exception!
      try { 
        appExecutorServiceQueue0.offer((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AppExecutorServiceQueue<Integer> appExecutorServiceQueue0 = null;
      try {
        appExecutorServiceQueue0 = new AppExecutorServiceQueue<Integer>((-2755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ArrayBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AppExecutorServiceQueue<Object> appExecutorServiceQueue0 = new AppExecutorServiceQueue<Object>(1);
      Integer integer0 = new Integer(0);
      boolean boolean0 = appExecutorServiceQueue0.offer((Object) integer0);
      assertTrue(boolean0);
  }
}
