/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:09:28 GMT 2022
 */

package executionChains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import executionChains.ChainFunction;
import executionChains.ChainNode;
import executionChains.Navigation;
import executionChains.SimpleChainNode;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Navigation_ESTest extends Navigation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      ChainFunction<Object> chainFunction1 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode1 = new SimpleChainNode<Object>(chainFunction1);
      Navigation<Integer> navigation0 = new Navigation<Integer>(simpleChainNode0, simpleChainNode1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Navigation<Integer> navigation0 = new Navigation<Integer>(simpleChainNode0, simpleChainNode0);
      ChainNode<? super Integer> chainNode0 = navigation0.getTo();
      assertEquals("class executionChains.SimpleChainNode", chainNode0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Navigation<Integer> navigation0 = new Navigation<Integer>((ChainNode<? super Integer>) null, (ChainNode<? super Integer>) null);
      ChainNode<? super Integer> chainNode0 = navigation0.getFrom();
      assertNull(chainNode0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Integer integer0 = new Integer((-2467));
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Navigation<Object> navigation0 = new Navigation<Object>(simpleChainNode0, simpleChainNode0, predicate0);
      boolean boolean0 = navigation0.canBeUsed(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Navigation<Object> navigation0 = new Navigation<Object>(simpleChainNode0, simpleChainNode0, (Predicate<Object>) null);
      // Undeclared exception!
      try { 
        navigation0.canBeUsed(simpleChainNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.Navigation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Navigation<Integer> navigation0 = new Navigation<Integer>((ChainNode<? super Integer>) null, (ChainNode<? super Integer>) null);
      ChainNode<? super Integer> chainNode0 = navigation0.getTo();
      assertNull(chainNode0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Navigation<Object> navigation0 = new Navigation<Object>(simpleChainNode0, simpleChainNode0, (Predicate<Object>) null);
      ChainNode<? super Object> chainNode0 = navigation0.getFrom();
      assertEquals("class executionChains.SimpleChainNode", chainNode0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Navigation<Integer> navigation0 = new Navigation<Integer>((ChainNode<? super Integer>) null, (ChainNode<? super Integer>) null);
      Integer integer0 = new Integer(0);
      boolean boolean0 = navigation0.canBeUsed(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChainFunction<Integer> chainFunction0 = (ChainFunction<Integer>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Integer> simpleChainNode0 = new SimpleChainNode<Integer>(chainFunction0);
      Integer integer0 = new Integer(1);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Navigation<Integer> navigation0 = new Navigation<Integer>(simpleChainNode0, (ChainNode<? super Integer>) null, predicate0);
  }
}
