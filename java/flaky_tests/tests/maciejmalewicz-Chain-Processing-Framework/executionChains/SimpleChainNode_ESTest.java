/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:09:45 GMT 2022
 */

package executionChains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import executionChains.Chain;
import executionChains.ChainFunction;
import executionChains.ChainNode;
import executionChains.SimpleChainNode;
import executionChains.chainExecutors.ChainExecutor;
import executionChains.chainExecutors.LoopUntilExecutor;
import java.lang.reflect.Array;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleChainNode_ESTest extends SimpleChainNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChainFunction<Integer> chainFunction0 = (ChainFunction<Integer>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Integer> simpleChainNode0 = new SimpleChainNode<Integer>(chainFunction0);
      Integer integer0 = new Integer(1650);
      ChainNode<Integer>[] chainNodeArray0 = (ChainNode<Integer>[]) Array.newInstance(ChainNode.class, 8);
      Chain<Integer> chain0 = new Chain<Integer>(chainNodeArray0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) chainNodeArray0[0]);
      LoopUntilExecutor<Integer> loopUntilExecutor0 = new LoopUntilExecutor<Integer>(chain0, predicate0, (Integer) null);
      simpleChainNode0.execute(integer0, loopUntilExecutor0);
      assertEquals("class executionChains.SimpleChainNode", simpleChainNode0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleChainNode<Integer> simpleChainNode0 = new SimpleChainNode<Integer>((ChainFunction<Integer>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        simpleChainNode0.execute(integer0, (ChainExecutor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.SimpleChainNode", e);
      }
  }
}
