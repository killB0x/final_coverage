/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:00:00 GMT 2022
 */

package executionChains.chainExecutors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import executionChains.Chain;
import executionChains.ChainFunction;
import executionChains.ChainNode;
import executionChains.SimpleChainNode;
import executionChains.chainExecutors.LoopNExecutor;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoopNExecutor_ESTest extends LoopNExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chain<Object> chain0 = (Chain<Object>) mock(Chain.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chain0).getNodes();
      LoopNExecutor<Object> loopNExecutor0 = null;
      try {
        loopNExecutor0 = new LoopNExecutor<Object>(chain0, (-1), chain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.chainExecutors.ChainExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Chain<Object> chain0 = (Chain<Object>) mock(Chain.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chain0).getNodes();
      Object object0 = new Object();
      LoopNExecutor<Object> loopNExecutor0 = null;
      try {
        loopNExecutor0 = new LoopNExecutor<Object>(chain0, 186, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.chainExecutors.ChainExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      ChainNode<Object>[] chainNodeArray0 = (ChainNode<Object>[]) Array.newInstance(ChainNode.class, 4);
      chainNodeArray0[0] = (ChainNode<Object>) simpleChainNode0;
      chainNodeArray0[1] = (ChainNode<Object>) simpleChainNode0;
      chainNodeArray0[2] = (ChainNode<Object>) simpleChainNode0;
      chainNodeArray0[3] = (ChainNode<Object>) simpleChainNode0;
      Chain<Integer> chain0 = new Chain<Integer>(chainNodeArray0);
      Integer integer0 = new Integer(537);
      chain0.loopNTimes(integer0, 537);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Chain<Object> chain0 = (Chain<Object>) mock(Chain.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(chain0).getNodes();
      LoopNExecutor<Object> loopNExecutor0 = null;
      try {
        loopNExecutor0 = new LoopNExecutor<Object>(chain0, 0, chain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.chainExecutors.ChainExecutor", e);
      }
  }
}
