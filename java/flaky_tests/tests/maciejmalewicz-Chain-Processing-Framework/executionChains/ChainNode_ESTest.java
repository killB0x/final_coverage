/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:03:16 GMT 2022
 */

package executionChains;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import executionChains.Chain;
import executionChains.ChainFunction;
import executionChains.ChainNode;
import executionChains.SimpleChainNode;
import executionChains.chainExecutors.LoopNExecutor;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChainNode_ESTest extends ChainNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      ChainFunction<Integer> chainFunction1 = (ChainFunction<Integer>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Integer> simpleChainNode1 = new SimpleChainNode<Integer>(chainFunction1);
      boolean boolean0 = simpleChainNode0.equals(simpleChainNode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Object object0 = new Object();
      Chain<Object> chain0 = new Chain<Object>();
      Integer integer0 = new Integer(388);
      LoopNExecutor<Object> loopNExecutor0 = new LoopNExecutor<Object>(chain0, 388, integer0);
      simpleChainNode0.execute(object0, loopNExecutor0);
      assertEquals("class executionChains.SimpleChainNode", simpleChainNode0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChainFunction<SimpleChainNode<Object>> chainFunction0 = (ChainFunction<SimpleChainNode<Object>>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<SimpleChainNode<Object>> simpleChainNode0 = new SimpleChainNode<SimpleChainNode<Object>>(chainFunction0);
      Chain<Object> chain0 = new Chain<Object>();
      LoopNExecutor<Object> loopNExecutor0 = new LoopNExecutor<Object>(chain0, 2, simpleChainNode0);
      SimpleChainNode<Integer> simpleChainNode1 = new SimpleChainNode<Integer>((ChainFunction<Integer>) null);
      Integer integer0 = new Integer(1496);
      // Undeclared exception!
      try { 
        simpleChainNode1.execute(integer0, loopNExecutor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("executionChains.SimpleChainNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      simpleChainNode0.chainNodeId = 1;
      SimpleChainNode<Object> simpleChainNode1 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      boolean boolean0 = simpleChainNode1.equals(simpleChainNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      Object object0 = new Object();
      boolean boolean0 = simpleChainNode0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChainFunction<Object> chainFunction0 = (ChainFunction<Object>) mock(ChainFunction.class, new ViolatedAssumptionAnswer());
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>(chainFunction0);
      boolean boolean0 = simpleChainNode0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      ChainNode<Object>[] chainNodeArray0 = (ChainNode<Object>[]) Array.newInstance(ChainNode.class, 1);
      chainNodeArray0[0] = (ChainNode<Object>) simpleChainNode0;
      Chain<Object> chain0 = new Chain<Object>(chainNodeArray0);
      // Undeclared exception!
      try { 
        chain0.removeNode(simpleChainNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("java.util.Iterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      SimpleChainNode<Object> simpleChainNode1 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      boolean boolean0 = simpleChainNode1.equals(simpleChainNode0);
      assertFalse(boolean0);
      assertFalse(simpleChainNode0.equals((Object)simpleChainNode1));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      String string0 = simpleChainNode0.toString();
      assertEquals("class executionChains.SimpleChainNode", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SimpleChainNode<Object> simpleChainNode0 = new SimpleChainNode<Object>((ChainFunction<Object>) null);
      simpleChainNode0.hashCode();
  }
}
