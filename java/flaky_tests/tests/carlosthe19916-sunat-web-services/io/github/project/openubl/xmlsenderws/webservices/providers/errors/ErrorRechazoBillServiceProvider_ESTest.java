/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 18:13:49 GMT 2022
 */

package io.github.project.openubl.xmlsenderws.webservices.providers.errors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.project.openubl.xmlsenderws.webservices.providers.BillServiceModel;
import io.github.project.openubl.xmlsenderws.webservices.providers.errors.ErrorRechazoBillServiceProvider;
import io.github.project.openubl.xmlsenderws.webservices.wrappers.ServiceConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ErrorRechazoBillServiceProvider_ESTest extends ErrorRechazoBillServiceProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = Integer.getInteger("El Name o TaxTypeCode debe corresponder con el Id para el IGV", 0);
      ErrorRechazoBillServiceProvider errorRechazoBillServiceProvider0 = new ErrorRechazoBillServiceProvider(integer0);
      byte[] byteArray0 = new byte[8];
      ServiceConfig serviceConfig0 = mock(ServiceConfig.class, new ViolatedAssumptionAnswer());
      BillServiceModel billServiceModel0 = errorRechazoBillServiceProvider0.sendBill("El Name o TaxTypeCode debe corresponder con el Id para el IGV", byteArray0, serviceConfig0);
      assertEquals(0, (int)billServiceModel0.getCode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ErrorRechazoBillServiceProvider errorRechazoBillServiceProvider0 = new ErrorRechazoBillServiceProvider((Integer) null);
      // Undeclared exception!
      try { 
        errorRechazoBillServiceProvider0.sendBill("", (byte[]) null, (ServiceConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.project.openubl.xmlsenderws.webservices.providers.errors.ErrorRechazoBillServiceProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BillServiceModel billServiceModel0 = new BillServiceModel();
      ErrorRechazoBillServiceProvider errorRechazoBillServiceProvider0 = new ErrorRechazoBillServiceProvider(billServiceModel0, (Integer) null);
      byte[] byteArray0 = new byte[0];
      BillServiceModel billServiceModel1 = errorRechazoBillServiceProvider0.sendBill("pjY7_@", byteArray0, (ServiceConfig) null);
      assertNull(billServiceModel1.getDescription());
  }
}
