/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 18:05:08 GMT 2022
 */

package io.github.project.openubl.xmlsenderws.webservices.providers.errors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.project.openubl.xmlsenderws.webservices.providers.BillServiceModel;
import io.github.project.openubl.xmlsenderws.webservices.providers.ErrorBillServiceProvider;
import io.github.project.openubl.xmlsenderws.webservices.providers.errors.Error1033BillServiceProviderFactory;
import javax.xml.soap.SOAPFault;
import javax.xml.ws.soap.SOAPFaultException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Error1033BillServiceProviderFactory_ESTest extends Error1033BillServiceProviderFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      SOAPFault sOAPFault0 = mock(SOAPFault.class, new ViolatedAssumptionAnswer());
      doReturn("5688").when(sOAPFault0).getFaultCode();
      doReturn("5688").when(sOAPFault0).getFaultString();
      SOAPFaultException sOAPFaultException0 = new SOAPFaultException(sOAPFault0);
      boolean boolean0 = error1033BillServiceProviderFactory0.isSupported(sOAPFaultException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      boolean boolean0 = error1033BillServiceProviderFactory0.isSupported(1865);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      // Undeclared exception!
      try { 
        error1033BillServiceProviderFactory0.isSupported((SOAPFaultException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.project.openubl.xmlsenderws.webservices.utils.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      SOAPFault sOAPFault0 = mock(SOAPFault.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sOAPFault0).getFaultCode();
      doReturn((String) null).when(sOAPFault0).getFaultString();
      SOAPFaultException sOAPFaultException0 = new SOAPFaultException(sOAPFault0);
      boolean boolean0 = error1033BillServiceProviderFactory0.isSupported(sOAPFaultException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      boolean boolean0 = error1033BillServiceProviderFactory0.isSupported(1033);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      boolean boolean0 = error1033BillServiceProviderFactory0.isSupported(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      Integer integer0 = new Integer(0);
      BillServiceModel billServiceModel0 = new BillServiceModel();
      ErrorBillServiceProvider errorBillServiceProvider0 = error1033BillServiceProviderFactory0.create(integer0, billServiceModel0);
      assertNotNull(errorBillServiceProvider0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      ErrorBillServiceProvider errorBillServiceProvider0 = error1033BillServiceProviderFactory0.create((Integer) null);
      assertNotNull(errorBillServiceProvider0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Error1033BillServiceProviderFactory error1033BillServiceProviderFactory0 = new Error1033BillServiceProviderFactory();
      int int0 = error1033BillServiceProviderFactory0.getPriority();
      assertEquals(1, int0);
  }
}
