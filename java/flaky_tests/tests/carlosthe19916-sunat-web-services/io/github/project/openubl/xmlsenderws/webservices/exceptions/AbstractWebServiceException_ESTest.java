/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 18:28:55 GMT 2022
 */

package io.github.project.openubl.xmlsenderws.webservices.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import io.github.project.openubl.xmlsenderws.webservices.exceptions.ValidationWebServiceException;
import javax.xml.soap.SOAPFault;
import javax.xml.ws.soap.SOAPFaultException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractWebServiceException_ESTest extends AbstractWebServiceException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SOAPFault sOAPFault0 = mock(SOAPFault.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(sOAPFault0).getFaultString();
      SOAPFaultException sOAPFaultException0 = new SOAPFaultException(sOAPFault0);
      ValidationWebServiceException validationWebServiceException0 = new ValidationWebServiceException(sOAPFaultException0);
      SOAPFaultException sOAPFaultException1 = validationWebServiceException0.getException();
      assertNull(sOAPFaultException1.getMessage());
  }
}
