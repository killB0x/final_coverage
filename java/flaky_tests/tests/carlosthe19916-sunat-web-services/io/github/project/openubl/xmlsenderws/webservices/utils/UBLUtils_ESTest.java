/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 17:39:47 GMT 2022
 */

package io.github.project.openubl.xmlsenderws.webservices.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.project.openubl.xmlsenderws.webservices.models.DeliveryURLType;
import io.github.project.openubl.xmlsenderws.webservices.utils.UBLUtils;
import io.github.project.openubl.xmlsenderws.webservices.xml.DocumentType;
import io.github.project.openubl.xmlsenderws.webservices.xml.XmlContentModel;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UBLUtils_ESTest extends UBLUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentType documentType0 = DocumentType.INVOICE;
      // Undeclared exception!
      try { 
        UBLUtils.getFileNameWithoutExtension(documentType0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      // Undeclared exception!
      try { 
        UBLUtils.getDeliveryURLType(documentType0, (XmlContentModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.project.openubl.xmlsenderws.webservices.utils.UBLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentType documentType0 = DocumentType.INVOICE;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "7K26*<__+-fu", "B2&4v[z");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = DocumentType.INVOICE;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "|x.x", "|x.x");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = DocumentType.DESPATCH_ADVICE;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "7K26*<__+-fu", "");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = DocumentType.RETENTION;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "=$AQB*", "=$AQB*");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentType documentType0 = DocumentType.PERCEPTION;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "9JrLq=", "9JrLq=");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "B2&4v[z", "B2&4v[z");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentType documentType0 = DocumentType.DEBIT_NOTE;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "yUvy^", "a`");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentType documentType0 = DocumentType.CREDIT_NOTE;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "", "");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentType documentType0 = DocumentType.SUMMARY_DOCUMENT;
      Optional<String> optional0 = UBLUtils.getFileNameWithoutExtension(documentType0, "7K26*<__+-fu", "");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = DocumentType.INVOICE;
      // Undeclared exception!
      try { 
        UBLUtils.getFileNameWithoutExtension(documentType0, ":l?V", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid Serie, can not detect code
         //
         verifyException("io.github.project.openubl.xmlsenderws.webservices.utils.UBLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      xmlContentModel0.setVoidedLineDocumentTypeCode("71");
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      xmlContentModel0.setVoidedLineDocumentTypeCode("09");
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      xmlContentModel0.setVoidedLineDocumentTypeCode("20");
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      xmlContentModel0.setVoidedLineDocumentTypeCode("40");
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.DESPATCH_ADVICE;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.RETENTION;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.PERCEPTION;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentType documentType0 = DocumentType.SUMMARY_DOCUMENT;
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.DEBIT_NOTE;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.CREDIT_NOTE;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentType documentType0 = DocumentType.VOIDED_DOCUMENT;
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      // Undeclared exception!
      try { 
        UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No se pudo convertir el valor del cat\u00E1logo
         //
         verifyException("io.github.project.openubl.xmlsenderws.webservices.utils.UBLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlContentModel xmlContentModel0 = new XmlContentModel();
      DocumentType documentType0 = DocumentType.INVOICE;
      Optional<DeliveryURLType> optional0 = UBLUtils.getDeliveryURLType(documentType0, xmlContentModel0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UBLUtils uBLUtils0 = new UBLUtils();
  }
}
