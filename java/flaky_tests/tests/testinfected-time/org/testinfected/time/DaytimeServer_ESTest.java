/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 06:22:08 GMT 2022
 */

package org.testinfected.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.testinfected.time.Clock;
import org.testinfected.time.DaytimeClient;
import org.testinfected.time.DaytimeServer;
import org.testinfected.time.ServerMonitor;
import org.testinfected.time.nist.NISTDialect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DaytimeServer_ESTest extends DaytimeServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      DaytimeServer daytimeServer0 = new DaytimeServer(1, nISTDialect0);
      daytimeServer0.setInternalClock((Clock) null);
      ServerMonitor serverMonitor0 = mock(ServerMonitor.class, new ViolatedAssumptionAnswer());
      daytimeServer0.addMonitor(serverMonitor0);
      daytimeServer0.start();
      daytimeServer0.stop();
      try { 
        daytimeServer0.start();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 48;
      DaytimeServer daytimeServer0 = new DaytimeServer(48);
      daytimeServer0.start();
      try { 
        daytimeServer0.start();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer((-3827));
      // Undeclared exception!
      try { 
        daytimeServer0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -3827
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer(0);
      daytimeServer0.start();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 3344;
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      DaytimeServer daytimeServer0 = new DaytimeServer(3344, nISTDialect0);
      daytimeServer0.start();
      ServerMonitor serverMonitor0 = null;
      daytimeServer0.addMonitor((ServerMonitor) null);
      try { 
        daytimeServer0.start();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer((-1));
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      ServerMonitor serverMonitor0 = mock(ServerMonitor.class, new ViolatedAssumptionAnswer());
      daytimeServer0.addMonitor(serverMonitor0);
      DaytimeClient daytimeClient0 = new DaytimeClient("", (-1), nISTDialect0);
      ServerMonitor serverMonitor1 = mock(ServerMonitor.class, new ViolatedAssumptionAnswer());
      daytimeServer0.removeMonitor(serverMonitor1);
      // Undeclared exception!
      try { 
        daytimeClient0.now();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.IllegalArgumentException: port out of range:-1
         //
         verifyException("org.testinfected.time.DaytimeClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer(2683);
      daytimeServer0.addMonitor((ServerMonitor) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer((-3827));
      daytimeServer0.removeMonitor((ServerMonitor) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1253;
      DaytimeServer daytimeServer0 = new DaytimeServer(1253);
      // Undeclared exception!
      try { 
        daytimeServer0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.testinfected.time.DaytimeServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 2271;
      DaytimeServer daytimeServer0 = new DaytimeServer(2271);
      ServerMonitor serverMonitor0 = mock(ServerMonitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        daytimeServer0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.testinfected.time.DaytimeServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer(1253);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DaytimeServer daytimeServer0 = new DaytimeServer((-2353));
      daytimeServer0.setInternalClock((Clock) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      DaytimeServer daytimeServer0 = new DaytimeServer((-1014), nISTDialect0);
      DaytimeClient daytimeClient0 = new DaytimeClient("", 1646, nISTDialect0);
      daytimeServer0.setInternalClock(daytimeClient0);
  }
}
