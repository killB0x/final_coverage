/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 06:29:21 GMT 2022
 */

package org.testinfected.time.nist;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testinfected.time.nist.NISTDialect;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NISTDialect_ESTest extends NISTDialect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      Date date0 = nISTDialect0.decode("JJJJJ 14-02-14 20:21:21 TT L H msADV UTC(NIST) *");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      // Undeclared exception!
      try { 
        nISTDialect0.encode((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      // Undeclared exception!
      try { 
        nISTDialect0.decode("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      // Undeclared exception!
      try { 
        nISTDialect0.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.testinfected.time.nist.NISTDialect", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      MockDate mockDate0 = new MockDate();
      String string0 = nISTDialect0.encode(mockDate0);
      assertEquals("JJJJJ 14-02-14 20:21:21 TT L H msADV UTC(NIST) *", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NISTDialect nISTDialect0 = (NISTDialect)NISTDialect.INSTANCE;
      try { 
        nISTDialect0.decode("JJJJJ %s %s TT L H msADV UTC(NIST) *");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"%s %s TT L H msAD\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
