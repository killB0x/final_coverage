/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:41:16 GMT 2022
 */

package com.antherd.smcrypto.sm2;

import org.junit.Test;
import static org.junit.Assert.*;
import com.antherd.smcrypto.sm2.Point;
import com.antherd.smcrypto.sm2.SignatureOptions;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SignatureOptions_ESTest extends SignatureOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.hash = true;
      boolean boolean0 = signatureOptions0.isDer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<Point> arrayDeque0 = new ArrayDeque<Point>();
      ArrayDeque<Point> arrayDeque1 = new ArrayDeque<Point>(arrayDeque0);
      SignatureOptions signatureOptions0 = new SignatureOptions(arrayDeque1, false, false, (String) null, "B`94[kW~p2kvJ$y");
      signatureOptions0.setPointPool(arrayDeque0);
      assertFalse(signatureOptions0.isHash());
      assertFalse(signatureOptions0.isDer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<Point> arrayDeque0 = new ArrayDeque<Point>();
      SignatureOptions signatureOptions0 = new SignatureOptions(arrayDeque0, true, false, "AI{=d+S<6]RM%n", "AM2TMK|9d@");
      assertTrue(signatureOptions0.isDer());
      assertFalse(signatureOptions0.isHash());
      assertEquals("AM2TMK|9d@", signatureOptions0.getUserId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.hash = true;
      boolean boolean0 = signatureOptions0.isHash();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      String string0 = signatureOptions0.getUserId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.setUserId("");
      String string0 = signatureOptions0.getUserId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.publicKey = "com.antherd.smcrypto.sm2.SignatureOptions";
      String string0 = signatureOptions0.getPublicKey();
      assertEquals("com.antherd.smcrypto.sm2.SignatureOptions", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.setPublicKey("");
      String string0 = signatureOptions0.getPublicKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      PriorityQueue<Point> priorityQueue0 = new PriorityQueue<Point>();
      signatureOptions0.pointPool = (Queue<Point>) priorityQueue0;
      Queue<Point> queue0 = signatureOptions0.getPointPool();
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      String string0 = signatureOptions0.getPublicKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      Queue<Point> queue0 = signatureOptions0.getPointPool();
      assertNull(queue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SignatureOptions signatureOptions0 = new SignatureOptions(linkedList0, true, true, "9RbU@", "9RbU@");
      signatureOptions0.setPublicKey("9RbU@");
      assertTrue(signatureOptions0.isHash());
      assertTrue(signatureOptions0.isDer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      boolean boolean0 = signatureOptions0.isHash();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SignatureOptions signatureOptions0 = new SignatureOptions(linkedList0, true, true, "9RbU@", "9RbU@");
      String string0 = signatureOptions0.getUserId();
      assertTrue(signatureOptions0.isHash());
      assertTrue(signatureOptions0.isDer());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SignatureOptions signatureOptions0 = new SignatureOptions(linkedList0, true, true, "9RbU@", "9RbU@");
      boolean boolean0 = signatureOptions0.isDer();
      assertTrue(boolean0);
      assertTrue(signatureOptions0.isHash());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.setDer(true);
      assertTrue(signatureOptions0.isDer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignatureOptions signatureOptions0 = new SignatureOptions();
      signatureOptions0.setHash(true);
      assertTrue(signatureOptions0.isHash());
  }
}
