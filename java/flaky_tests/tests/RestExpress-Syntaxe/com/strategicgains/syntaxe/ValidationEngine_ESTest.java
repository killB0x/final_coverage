/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 18:55:09 GMT 2022
 */

package com.strategicgains.syntaxe;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.strategicgains.syntaxe.ValidationEngine;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValidationEngine_ESTest extends ValidationEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(linkedList0);
      // Undeclared exception!
      try { 
        ValidationEngine.validateAndThrow(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        ValidationEngine.validate((Object) linkedList0, (List<String>) linkedList1, "q%4l:_rKW");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(linkedList0);
      // Undeclared exception!
      try { 
        ValidationEngine.validate((Object) linkedList0, "YB>mM3PNh)*");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(linkedList0);
      // Undeclared exception!
      try { 
        ValidationEngine.validate((Object) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ValidationEngine.encode((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.strategicgains.syntaxe.ValidationEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValidationEngine.encode("LLY)npud6P");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      List<String> list0 = ValidationEngine.validate(object0, "");
      Object object1 = new Object();
      ValidationEngine.validate(object1, list0, "");
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<String> list0 = ValidationEngine.validate((Object) linkedList0, "YB>mM3PNh)*");
      assertFalse(list0.contains("YB>mM3PNh)*"));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object object0 = new Object();
      List<String> list0 = ValidationEngine.validate(object0);
      Object object1 = new Object();
      ValidationEngine.validate(object1, list0, "");
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stream<String> stream0 = linkedList0.parallelStream();
      ValidationEngine.validateAndThrow(stream0);
  }
}
