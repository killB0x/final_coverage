/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 19:14:58 GMT 2022
 */

package com.strategicgains.syntaxe.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.strategicgains.syntaxe.util.ClassUtils;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, Field> hashMap0 = ClassUtils.getAllDeclaredFieldsByName(class0, 0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, Field> hashMap0 = ClassUtils.getAllDeclaredFieldsByName(class0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Field> list0 = ClassUtils.getAllDeclaredFields(class0, (-2655));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Field> list0 = ClassUtils.getAllDeclaredFields(class0, (-2459));
      assertEquals(13, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Field> list0 = ClassUtils.getAllDeclaredFields(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Field> class1 = Field.class;
      Object object0 = new Object();
      ClassUtils.FieldClosure<Object> classUtils_FieldClosure0 = (ClassUtils.FieldClosure<Object>) mock(ClassUtils.FieldClosure.class, new ViolatedAssumptionAnswer());
      doReturn(class0, object0, object0).when(classUtils_FieldClosure0).getValues();
      Object object1 = ClassUtils.computeDeclaredFields((Class<?>) class1, classUtils_FieldClosure0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAllDeclaredFieldsByName((Class<?>) null, (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAllDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        ClassUtils.computeDeclaredFields((Class<?>) class0, (ClassUtils.FieldClosure<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strategicgains.syntaxe.util.ClassUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtils.FieldClosure<Object> classUtils_FieldClosure0 = (ClassUtils.FieldClosure<Object>) mock(ClassUtils.FieldClosure.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(classUtils_FieldClosure0).getValues();
      Object object0 = ClassUtils.computeDeclaredFields((Class<?>) class0, classUtils_FieldClosure0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Field> class0 = Field.class;
      HashMap<String, Field> hashMap0 = ClassUtils.getAllDeclaredFieldsByName(class0, 0);
      assertEquals(17, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAllDeclaredFields((Class<?>) null, (-1970));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Field> class0 = Field.class;
      HashMap<String, Field> hashMap0 = ClassUtils.getAllDeclaredFieldsByName(class0);
      assertEquals(11, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getAllDeclaredFieldsByName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Field> class0 = Field.class;
      List<Field> list0 = ClassUtils.getAllDeclaredFields(class0);
      assertEquals(11, list0.size());
  }
}
