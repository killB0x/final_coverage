/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 18:51:11 GMT 2022
 */

package com.imadcn.framework.idworker.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.imadcn.framework.idworker.generator.SnowflakeGenerator;
import com.imadcn.framework.idworker.register.zookeeper.ZookeeperWorkerRegister;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnowflakeGenerator_ESTest extends SnowflakeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      snowflakeGenerator0.reset();
      assertFalse(snowflakeGenerator0.isConnecting());
      assertFalse(snowflakeGenerator0.isWorking());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.nextId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // worker isn't working, reg center may shutdown
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.connect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      boolean boolean0 = snowflakeGenerator0.isConnecting();
      assertFalse(boolean0);
      assertFalse(snowflakeGenerator0.isWorking());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      boolean boolean0 = snowflakeGenerator0.isWorking();
      assertFalse(snowflakeGenerator0.isConnecting());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.nextId(1786);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // worker isn't working, reg center may shutdown
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      snowflakeGenerator0.suspend();
      assertFalse(snowflakeGenerator0.isConnecting());
      assertFalse(snowflakeGenerator0.isWorking());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.nextFixedStringId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // worker isn't working, reg center may shutdown
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      snowflakeGenerator0.setLowConcurrency(false);
      assertFalse(snowflakeGenerator0.isConnecting());
      assertFalse(snowflakeGenerator0.isWorking());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.nextStringId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // worker isn't working, reg center may shutdown
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SnowflakeGenerator snowflakeGenerator0 = new SnowflakeGenerator((ZookeeperWorkerRegister) null);
      // Undeclared exception!
      try { 
        snowflakeGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.imadcn.framework.idworker.generator.SnowflakeGenerator", e);
      }
  }
}
