/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:06:03 GMT 2022
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.CholeskyDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CholeskyDecompositor_ESTest extends CholeskyDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(17, 265.09685963665);
      Matrix matrix0 = denseVector0.toRowMatrix();
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3, 3);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0, 0);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(0, 506);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      choleskyDecompositor0.matrix = matrix0;
      // Undeclared exception!
      try { 
        choleskyDecompositor0.decompose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 8);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      double[] doubleArray0 = new double[1];
      Matrix matrix0 = Matrix.from1DArray(950, 8, doubleArray0);
      choleskyDecompositor0.matrix = matrix0;
      // Undeclared exception!
      try { 
        choleskyDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3, 3);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2040, 2040);
      // Undeclared exception!
      choleskyDecompositor0.applicableTo(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3, 3);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        choleskyDecompositor0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.CholeskyDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(50, 50, 50);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.CholeskyDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1000, 1000, doubleArray0);
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1000 out of bounds for length 5
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, (-1417.3050125278487));
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3, 3);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      boolean boolean0 = choleskyDecompositor0.applicableTo(denseMatrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(6, 3, 3);
      CholeskyDecompositor choleskyDecompositor0 = null;
      try {
        choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 8);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      choleskyDecompositor0.decompose();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(13, 13, 13);
      CholeskyDecompositor choleskyDecompositor0 = new CholeskyDecompositor(columnMajorSparseMatrix0);
      // Undeclared exception!
      choleskyDecompositor0.decompose();
  }
}
