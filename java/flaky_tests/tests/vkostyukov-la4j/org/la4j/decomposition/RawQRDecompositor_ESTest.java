/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 15:57:29 GMT 2022
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.RawQRDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RawQRDecompositor_ESTest extends RawQRDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(2541, 0, (double[]) null);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(matrix0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(645);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(matrix0);
      boolean boolean0 = rawQRDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(345, (-1482.6797149));
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
      // Undeclared exception!
      rawQRDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(columnMajorSparseMatrix0);
      rawQRDecompositor0.matrix = null;
      // Undeclared exception!
      try { 
        rawQRDecompositor0.decompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawQRDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(37, 37, doubleArray0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
      // Undeclared exception!
      try { 
        rawQRDecompositor0.decompose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RawQRDecompositor rawQRDecompositor0 = null;
      try {
        rawQRDecompositor0 = new RawQRDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.RawQRDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(13, 48);
      RawQRDecompositor rawQRDecompositor0 = null;
      try {
        rawQRDecompositor0 = new RawQRDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(columnMajorSparseMatrix0);
      double[][] doubleArray0 = new double[2][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      boolean boolean0 = rawQRDecompositor0.applicableTo(denseMatrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(2, 2, (double) 0.0F, (Random) mockRandom0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(columnMajorSparseMatrix0);
      rawQRDecompositor0.decompose();
      assertEquals(0.2, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.5, columnMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(13, 13, 0.0, (Random) mockRandom0);
      RawQRDecompositor rawQRDecompositor0 = new RawQRDecompositor(columnMajorSparseMatrix0);
      rawQRDecompositor0.decompose();
      assertEquals(0.9, columnMajorSparseMatrix0.max(), 0.01);
  }
}
