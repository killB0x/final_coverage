/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:00:56 GMT 2022
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.LeastSquaresSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeastSquaresSolver_ESTest extends LeastSquaresSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, (-301.598));
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      Vector vector0 = Vector.unit(1);
      Vector vector1 = leastSquaresSolver0.solve(vector0);
      assertNotSame(vector0, vector1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      leastSquaresSolver0.unknowns = (-1163);
      SparseVector sparseVector0 = SparseVector.zero(1);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1163].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2039, 1, (-2267.4635462));
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(2039);
      CompressedVector compressedVector0 = (CompressedVector)leastSquaresSolver0.solve(sparseVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = leastSquaresSolver0.solve(sparseVector0);
      assertTrue(vector0.equals((Object)sparseVector0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      boolean boolean0 = leastSquaresSolver0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      boolean boolean0 = leastSquaresSolver0.applicableTo(matrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(17, 17);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(17);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(rowMajorSparseMatrix0);
      // Undeclared exception!
      leastSquaresSolver0.solve(sparseVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      leastSquaresSolver0.unknowns = 1;
      SparseVector sparseVector0 = SparseVector.zero(0);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(677, 677);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LeastSquaresSolver leastSquaresSolver0 = null;
      try {
        leastSquaresSolver0 = new LeastSquaresSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.LeastSquaresSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(3, 3, doubleArray0);
      LeastSquaresSolver leastSquaresSolver0 = null;
      try {
        leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(3, 3494);
      LeastSquaresSolver leastSquaresSolver0 = null;
      try {
        leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      Vector vector0 = Vector.zero(1);
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can not be solved: coefficient matrix is rank deficient.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(16, 16);
      SparseVector sparseVector0 = SparseVector.zero(0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(denseMatrix0);
      leastSquaresSolver0.equations = 0;
      // Undeclared exception!
      try { 
        leastSquaresSolver0.solve(sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '15' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
