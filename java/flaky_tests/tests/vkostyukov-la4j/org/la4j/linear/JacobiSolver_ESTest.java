/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:07:46 GMT 2022
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.JacobiSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JacobiSolver_ESTest extends JacobiSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2639L));
      DenseVector denseVector0 = DenseVector.random(22, mockRandom0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(22, 22);
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      jacobiSolver0.solve(denseVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = sparseVector0.add((-35.19));
      jacobiSolver0.solve(vector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(23);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      jacobiSolver0.applicableTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      double[][] doubleArray0 = new double[5][3];
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      jacobiSolver0.applicableTo(matrix1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector vector0 = Vector.unit(811);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(29);
      JacobiSolver jacobiSolver0 = new JacobiSolver(columnMajorSparseMatrix0);
      jacobiSolver0.equations = 811;
      // Undeclared exception!
      jacobiSolver0.solve(vector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(9);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(35);
      DenseVector denseVector0 = DenseVector.unit(35);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      jacobiSolver0.unknowns = (-877);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve(denseVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -877
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      Vector vector0 = Vector.constant(1490, 1490);
      // Undeclared exception!
      try { 
        jacobiSolver0.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 1490.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(35);
      Matrix matrix0 = Matrix.identity(51);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
      jacobiSolver0.equations = 35;
      // Undeclared exception!
      try { 
        jacobiSolver0.solve(denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(684);
      JacobiSolver jacobiSolver0 = new JacobiSolver(matrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.JacobiSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 9);
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Matrix matrix0 = Matrix.from1DArray(22, 22, doubleArray0);
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
