/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 15:59:10 GMT 2022
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.SquareRootSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SquareRootSolver_ESTest extends SquareRootSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.setAll((-2764.93362426));
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      // Undeclared exception!
      try { 
        squareRootSolver0.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This matrix is singular. We can't solve it.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      Vector vector0 = squareRootSolver0.solve(denseVector0);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 1);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(denseMatrix0);
      boolean boolean0 = squareRootSolver0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.blankOfShape(1254, 6);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(denseMatrix0);
      boolean boolean0 = squareRootSolver0.applicableTo(matrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      // Undeclared exception!
      try { 
        squareRootSolver0.solve((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1943);
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1943.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      squareRootSolver0.unknowns = 2;
      // Undeclared exception!
      try { 
        squareRootSolver0.solve(denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(denseMatrix0);
      // Undeclared exception!
      try { 
        squareRootSolver0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.SquareRootSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2053);
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SquareRootSolver squareRootSolver0 = null;
      try {
        squareRootSolver0 = new SquareRootSolver((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.SquareRootSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SquareRootSolver squareRootSolver0 = null;
      try {
        squareRootSolver0 = new SquareRootSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Matrix matrix0 = Matrix.from1DArray(1353, 1353, doubleArray0);
      SquareRootSolver squareRootSolver0 = null;
      try {
        squareRootSolver0 = new SquareRootSolver(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1353 out of bounds for length 7
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1157.036753);
      doubleArray0[1] = 1002.168821;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      Vector vector0 = squareRootSolver0.solve(denseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SquareRootSolver squareRootSolver0 = new SquareRootSolver(matrix0);
      squareRootSolver0.unknowns = (-1408);
      // Undeclared exception!
      try { 
        squareRootSolver0.solve(denseVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1408
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }
}
