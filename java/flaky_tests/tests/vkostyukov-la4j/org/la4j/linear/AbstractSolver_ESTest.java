/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:25:36 GMT 2022
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.linear.GaussianSolver;
import org.la4j.linear.JacobiSolver;
import org.la4j.linear.LeastNormSolver;
import org.la4j.linear.LeastSquaresSolver;
import org.la4j.linear.SweepSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSolver_ESTest extends AbstractSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0, (Random) mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(16);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 0.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      SweepSolver sweepSolver0 = new SweepSolver(matrix0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      SparseVector sparseVector0 = SparseVector.random(0, (double) 0L, (Random) mockRandom0);
      sweepSolver0.unknowns = (-1);
      Vector vector0 = leastNormSolver0.solve(sparseVector0);
      Vector vector1 = sweepSolver0.solve(vector0);
      assertNotSame(vector0, vector1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(rowMajorSparseMatrix0);
      leastNormSolver0.unknowns = 48;
      int int0 = leastNormSolver0.unknowns();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(rowMajorSparseMatrix0);
      jacobiSolver0.unknowns = (-1);
      int int0 = jacobiSolver0.unknowns();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      JacobiSolver jacobiSolver0 = new JacobiSolver(rowMajorSparseMatrix0);
      Matrix matrix0 = jacobiSolver0.self();
      assertEquals(3, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      LeastSquaresSolver leastSquaresSolver0 = new LeastSquaresSolver(matrix0);
      int int0 = leastSquaresSolver0.equations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      jacobiSolver0.equations = (-809);
      int int0 = jacobiSolver0.equations();
      assertEquals((-809), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        leastNormSolver0.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      JacobiSolver jacobiSolver0 = new JacobiSolver(denseMatrix0);
      // Undeclared exception!
      try { 
        jacobiSolver0.ensureRHSIsCorrect((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(rowMajorSparseMatrix0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 0);
      leastNormSolver0.ensureRHSIsCorrect(sparseVector0);
      assertEquals(0, sparseVector0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(6, 6);
      JacobiSolver jacobiSolver0 = null;
      try {
        jacobiSolver0 = new JacobiSolver(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(rowMajorSparseMatrix0);
      int int0 = jacobiSolver0.unknowns();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[2] = 4074.58867248057;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[1] = 2749.5047758961;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 4074.58867248057;
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      LeastNormSolver leastNormSolver0 = new LeastNormSolver(matrix0);
      int int0 = leastNormSolver0.equations();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(rowMajorSparseMatrix0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      // Undeclared exception!
      try { 
        forwardBackSubstitutionSolver0.ensureRHSIsCorrect(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong length of RHS vector: 1.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(0, 0);
      JacobiSolver jacobiSolver0 = new JacobiSolver(rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)jacobiSolver0.self();
      assertEquals(0, cRSMatrix0.cardinality());
  }
}
