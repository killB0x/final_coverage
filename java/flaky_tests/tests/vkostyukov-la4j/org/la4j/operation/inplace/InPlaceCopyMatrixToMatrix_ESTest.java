/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:19:22 GMT 2022
 */

package org.la4j.operation.inplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InPlaceCopyMatrixToMatrix_ESTest extends InPlaceCopyMatrixToMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 649.7061245164826;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1646);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(1646);
      // Undeclared exception!
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix1, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[5] = (-1720.92);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(48);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(48);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      assertSame(denseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, (DenseMatrix) null);
      assertNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(1, 0.0, (Random) null);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) null);
      assertNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-934.3));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1649, 1649);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1649);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) null, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1071, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(374, 1);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1631, 1631);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1631);
      // Undeclared exception!
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((DenseMatrix) null, (SparseMatrix) columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[3];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(213, 1);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(14, 14);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(442, 442);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(16, 442);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1655, 1655, doubleArray0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1294, 2179.3987133239);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1294, 1294);
      // Undeclared exception!
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 0, 0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      assertEquals(2, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(48);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(48);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(1.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 1649, 1285);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) null);
      assertNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((ColumnMajorSparseMatrix) null, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1071, 1);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(1071, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1529);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(6);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
