/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:47:45 GMT 2022
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SymmetricVectorVectorOperation_ESTest extends SymmetricVectorVectorOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.zero(5057);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      BasicVector basicVector0 = (BasicVector)ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertEquals(5057, basicVector0.length());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      DenseVector denseVector0 = DenseVector.unit(48);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, denseVector0);
      assertNotSame(vector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.constant(2483, 2483);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, sparseVector0);
      assertNotSame(vector0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply(sparseVector0, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.zero(2181, 2181);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((DenseVector) null, sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }
}
