/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:23:20 GMT 2022
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OoPlaceVectorsAddition_ESTest extends OoPlaceVectorsAddition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(2115);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      Vector vector0 = Vector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo(vector0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 0 does not equal to 2115.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(0);
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertNotSame(denseVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.zero(0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector0);
      assertNotSame(vector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      assertTrue(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo((Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric((DenseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 7.099;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      SparseVector sparseVector1 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(259);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector1 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply(denseVector0, denseVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(0);
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.ensureApplicableTo(sparseVector0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 1 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      Vector vector0 = Vector.zero(10);
      ooPlaceVectorsAddition0.ensureApplicableTo(vector0, vector0);
      assertEquals(10, vector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.fromCSV("9");
      SparseVector sparseVector0 = SparseVector.fromCSV("9");
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector0, sparseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(2119);
      Vector vector0 = ooPlaceVectorsAddition0.apply(denseVector0, denseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      SparseVector sparseVector0 = SparseVector.zero(17, 1);
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector1 = SparseVector.random(1, (double) 1, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorsAddition0.apply(sparseVector0, sparseVector1);
      assertEquals(17, vector0.length());
  }
}
