/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:27:46 GMT 2022
 */

package org.la4j.operation.ooplace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OoPlaceInnerProduct_ESTest extends OoPlaceInnerProduct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.unit(202);
      DenseVector denseVector1 = DenseVector.unit(2217);
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.ensureApplicableTo(denseVector0, denseVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 202 does not equal to 2217.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 336.7;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Double double0 = ooPlaceInnerProduct0.applySymmetric(denseVector0, sparseVector0);
      assertEquals(113366.89, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      Double double0 = ooPlaceInnerProduct0.apply(sparseVector0, (SparseVector) compressedVector0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-3124.80489);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(48);
      DenseVector denseVector1 = DenseVector.random(48, mockRandom0);
      Double double0 = ooPlaceInnerProduct0.apply(denseVector0, denseVector1);
      assertEquals((-937.4414669999999), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.ensureApplicableTo((Vector) null, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.applySymmetric((DenseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(1);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 1;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.applySymmetric(denseVector0, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.unit(2103);
      Double double0 = ooPlaceInnerProduct0.apply(denseVector0, denseVector0);
      assertEquals(2103.0, (double)double0, 0.01);
      
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Double double1 = ooPlaceInnerProduct0.apply(sparseVector0, sparseVector0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.apply((DenseVector) null, (DenseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.constant(32, 32);
      DenseVector denseVector1 = DenseVector.unit(16);
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.apply(denseVector0, denseVector1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      double[] doubleArray0 = new double[9];
      SparseVector sparseVector1 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceInnerProduct0.ensureApplicableTo(sparseVector1, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 9 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceInnerProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      ooPlaceInnerProduct0.ensureApplicableTo(denseVector0, sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      Double double0 = ooPlaceInnerProduct0.apply(denseVector0, denseVector0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Double double0 = ooPlaceInnerProduct0.applySymmetric(denseVector0, sparseVector0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      DenseVector denseVector0 = DenseVector.unit(2103);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Double double0 = ooPlaceInnerProduct0.apply(sparseVector0, sparseVector0);
      assertEquals(2103.0, (double)double0, 0.01);
  }
}
