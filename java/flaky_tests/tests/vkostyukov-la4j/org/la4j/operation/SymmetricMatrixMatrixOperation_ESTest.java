/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:34:49 GMT 2022
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SymmetricMatrixMatrixOperation_ESTest extends SymmetricMatrixMatrixOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[9];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.apply((ColumnMajorSparseMatrix) cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2955);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.identity(2955);
      // Undeclared exception!
      ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(0, 0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(0, 0, 0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertEquals(0, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix0, denseMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply((RowMajorSparseMatrix) null, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom(567);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(567, 567, 0.0, (Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(567);
      // Undeclared exception!
      ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[6][8];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertTrue(cRSMatrix1.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, denseMatrix0);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[8];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 84, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[2];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 351, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply((ColumnMajorSparseMatrix) null, denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom(1871L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, rowMajorSparseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }
}
