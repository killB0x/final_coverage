/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:39:43 GMT 2022
 */

package org.la4j.operation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VectorVectorOperation_ESTest extends VectorVectorOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3062);
      Vector vector0 = sparseVector0.hadamardProduct(sparseVector0);
      assertEquals(3062, vector0.length());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(2770);
      double[] doubleArray0 = new double[8];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.outerProduct(denseVector0);
      assertEquals(8, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      VectorOperation<Matrix> vectorOperation0 = ooPlaceOuterProduct0.partiallyApply((DenseVector) null);
      assertNotNull(vectorOperation0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      ooPlaceOuterProduct0.ensureApplicableTo((Vector) null, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      VectorOperation<Matrix> vectorOperation0 = ooPlaceOuterProduct0.partiallyApply((SparseVector) null);
      assertNotNull(vectorOperation0);
  }
}
