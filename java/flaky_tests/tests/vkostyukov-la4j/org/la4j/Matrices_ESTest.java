/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 16:41:42 GMT 2022
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrices;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrices_ESTest extends Matrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.INC_FUNCTION;
      // Undeclared exception!
      try { 
        Matrices.asSumFunctionAccumulator(Double.NEGATIVE_INFINITY, matrixFunction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character I is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.asSumAccumulator(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character I is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asModFunction(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        Matrices.asProductFunctionAccumulator(Double.NEGATIVE_INFINITY, matrixFunction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character I is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.asProductAccumulator(Double.POSITIVE_INFINITY);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character I is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.asProductAccumulator(2362.10074348);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.asSumAccumulator(1.0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asPlusFunction(1.0);
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asConstFunction(1.0);
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asModFunction((-1950.2353763688125));
      MatrixAccumulator matrixAccumulator0 = Matrices.asProductFunctionAccumulator(1.0, matrixFunction0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asMinusFunction((-1950.2353763688125));
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkManhattanNormAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkInfinityNormAccumulator();
      MatrixProcedure matrixProcedure0 = Matrices.asAccumulatorProcedure(matrixAccumulator0);
      assertNotNull(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkMaxAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkEuclideanNormAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asModFunction((-1950.2353763688125));
      MatrixAccumulator matrixAccumulator0 = Matrices.asSumFunctionAccumulator(0.0, matrixFunction0);
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MatrixAccumulator matrixAccumulator0 = Matrices.mkMinAccumulator();
      assertNotNull(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asMulFunction(3494.116);
      assertNotNull(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MatrixFunction matrixFunction0 = Matrices.asDivFunction(1513.3);
      assertNotNull(matrixFunction0);
  }
}
