/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 14:56:34 GMT 2022
 */

package at.molindo.notify.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import at.molindo.notify.model.Template;
import at.molindo.notify.render.IRenderService;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Template_ESTest extends Template_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.forLanguageTag("FL^~SgYCR<QK0l33:");
      Template template0 = new Template("FL^~SgYCR<QK0l33:", iRenderService_Type0, iRenderService_Version0, locale0, "");
      template0.getLocale();
      assertEquals("", template0.getContent());
      assertEquals("FL^~SgYCR<QK0l33:", template0.getKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Template template0 = new Template();
      Date date0 = template0.getLastModified();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Template template0 = new Template();
      String string0 = template0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("AR)N 4f~*(a", iRenderService_Type0, iRenderService_Version0, locale0, "AR)N 4f~*(a");
      String string0 = template0.getKey();
      assertEquals("AR)N 4f~*(a", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("AR)N 4f~*(a", iRenderService_Type0, iRenderService_Version0, locale0, "AR)N 4f~*(a");
      String string0 = template0.getContent();
      assertEquals("AR)N 4f~*(a", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.LONG;
      Locale locale0 = Locale.PRC;
      Template template0 = new Template("", iRenderService_Type0, iRenderService_Version0, locale0, "");
      String string0 = template0.getContent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.ENGLISH;
      Template template0 = null;
      try {
        template0 = new Template("GGcr0iq", (IRenderService.Type) null, iRenderService_Version0, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("at.molindo.notify.model.Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.JAPANESE;
      Template template0 = new Template("", iRenderService_Type0, iRenderService_Version0, locale0, (String) null);
      Date date0 = template0.getLastModified();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("AR)N 4f~*(a", iRenderService_Type0, iRenderService_Version0, locale0, "AR)N 4f~*(a");
      IRenderService.Type iRenderService_Type1 = template0.getType();
      assertSame(iRenderService_Type0, iRenderService_Type1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.forLanguageTag("FL^~SgYCR<QK0l33:");
      Template template0 = new Template("FL^~SgYCR<QK0l33:", iRenderService_Type0, iRenderService_Version0, locale0, "");
      template0.getVersion();
      assertEquals("", template0.getContent());
      assertEquals("FL^~SgYCR<QK0l33:", template0.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Template template0 = new Template();
      String string0 = template0.getContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.LONG;
      Locale locale0 = Locale.CHINA;
      Template template0 = new Template("", iRenderService_Type0, iRenderService_Version0, locale0, (String) null);
      String string0 = template0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Template template0 = new Template();
      Locale locale0 = template0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "$rJh}J7");
      Template template1 = template0.clone();
      IRenderService.Version iRenderService_Version1 = IRenderService.Version.LONG;
      template0.setVersion(iRenderService_Version1);
      Template.Key template_Key0 = template1.key();
      Template.Key template_Key1 = template0.key();
      boolean boolean0 = template_Key0.equals(template_Key1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      Template template1 = new Template("lD+\"X)9!w>c8]7)/j", iRenderService_Type0, iRenderService_Version0, locale0, "lD+\"X)9!w>c8]7)/j");
      Template.Key template_Key0 = template0.key();
      Template.Key template_Key1 = template1.key();
      boolean boolean0 = template_Key0.equals(template_Key1);
      assertFalse(boolean0);
      assertEquals("$rJh}J7", template0.getKey());
      assertEquals("type", template0.getContent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "$rJh}J7");
      Template.Key template_Key0 = template0.key();
      boolean boolean0 = template_Key0.equals(template0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Template template0 = new Template();
      template0.setKey("`[uR>E");
      Template.Key template_Key0 = template0.key();
      boolean boolean0 = template_Key0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      Template.Key template_Key0 = template0.key();
      boolean boolean0 = template_Key0.equals(template_Key0);
      assertEquals("type", template0.getContent());
      assertTrue(boolean0);
      assertEquals("$rJh}J7", template0.getKey());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("version", iRenderService_Type0, iRenderService_Version0, locale0, "mQAqEWea");
      Template template1 = template0.clone();
      Template template2 = template1.setType(iRenderService_Type0);
      assertEquals("mQAqEWea", template2.getContent());
      
      template2.setContent("");
      boolean boolean0 = template0.equals(template2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Template template0 = new Template();
      Template template1 = template0.clone();
      assertTrue(template1.equals((Object)template0));
      
      template1.setContent("[ug'(^3J/}qer_7vt#~");
      boolean boolean0 = template0.equals(template1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template();
      Template template1 = template0.clone();
      assertTrue(template1.equals((Object)template0));
      
      Template template2 = template1.setLocale(locale0);
      Template template3 = template2.clone();
      boolean boolean0 = template3.equals(template0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Template template0 = new Template();
      Template template1 = new Template();
      assertTrue(template1.equals((Object)template0));
      
      Locale locale0 = Locale.KOREA;
      Template template2 = template0.setLocale(locale0);
      boolean boolean0 = template1.equals(template2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("version", iRenderService_Type0, iRenderService_Version0, locale0, "mQAqEWea");
      Template template1 = template0.clone();
      Template template2 = template1.setType(iRenderService_Type0);
      assertTrue(template2.equals((Object)template0));
      
      MockDate mockDate0 = new MockDate(25, 25, 0, 0, 2752);
      Template template3 = template2.setLastModified(mockDate0);
      boolean boolean0 = template0.equals(template3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Template template0 = new Template();
      Template template1 = template0.clone();
      assertTrue(template1.equals((Object)template0));
      
      MockDate mockDate0 = new MockDate((-12), (-538), 25, 0, 2752);
      template0.setLastModified(mockDate0);
      boolean boolean0 = template1.equals(template0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Template template0 = new Template();
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA;
      Template template1 = new Template("", iRenderService_Type0, iRenderService_Version0, locale0, "");
      Template template2 = template0.setType(iRenderService_Type0);
      Template template3 = template2.setKey("");
      boolean boolean0 = template3.equals(template1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      Locale locale0 = Locale.CANADA;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.LONG;
      Template template0 = new Template("evP'W'D", iRenderService_Type0, iRenderService_Version0, locale0, "evP'W'D");
      Template template1 = template0.clone();
      assertTrue(template1.equals((Object)template0));
      
      IRenderService.Type iRenderService_Type1 = IRenderService.Type.TEXT;
      Template template2 = template0.setType(iRenderService_Type1);
      boolean boolean0 = template2.equals(template1);
      assertFalse(template1.equals((Object)template0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA_FRENCH;
      Template template0 = new Template("version", iRenderService_Type0, iRenderService_Version0, locale0, "mQAqEWea");
      Template template1 = template0.clone();
      assertEquals("version", template0.getKey());
      
      template0.setKey("");
      boolean boolean0 = template0.equals(template1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Template template0 = new Template();
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.CANADA;
      Template template1 = new Template("", iRenderService_Type0, iRenderService_Version0, locale0, "");
      boolean boolean0 = template0.equals(template1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      Locale locale0 = Locale.CANADA;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.LONG;
      Template template0 = new Template("evP'W'D", iRenderService_Type0, iRenderService_Version0, locale0, "evP'W'D");
      Template template1 = template0.clone();
      boolean boolean0 = template0.equals(template1);
      assertTrue(boolean0);
      assertNotSame(template1, template0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.PRC;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      boolean boolean0 = template0.equals("");
      assertFalse(boolean0);
      assertEquals("type", template0.getContent());
      assertEquals("$rJh}J7", template0.getKey());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      boolean boolean0 = template0.equals((Object) null);
      assertEquals("type", template0.getContent());
      assertEquals("$rJh}J7", template0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Template template0 = new Template();
      boolean boolean0 = template0.equals(template0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Template template0 = new Template();
      template0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      Template.Key template_Key0 = template0.key();
      Template.Key template_Key1 = template0.key();
      assertNotNull(template_Key1);
      
      boolean boolean0 = template_Key0.equals(template_Key1);
      assertEquals("$rJh}J7", template0.getKey());
      assertTrue(boolean0);
      assertEquals("type", template0.getContent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Template template0 = new Template();
      Template.Key template_Key0 = template0.key();
      assertNull(template_Key0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Template template0 = new Template();
      // Undeclared exception!
      try { 
        template0.setVersion((IRenderService.Version) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // version
         //
         verifyException("at.molindo.notify.model.Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Template template0 = new Template();
      // Undeclared exception!
      try { 
        template0.setType((IRenderService.Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // type
         //
         verifyException("at.molindo.notify.model.Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.TEXT;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      template0.hashCode();
      assertEquals("$rJh}J7", template0.getKey());
      assertEquals("type", template0.getContent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IRenderService.Type iRenderService_Type0 = IRenderService.Type.HTML;
      IRenderService.Version iRenderService_Version0 = IRenderService.Version.SHORT;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Template template0 = new Template("$rJh}J7", iRenderService_Type0, iRenderService_Version0, locale0, "type");
      String string0 = template0.toString();
      assertEquals("type", template0.getContent());
      assertEquals("Template [_key=$rJh}J7, _version=SHORT, _lastModified=Fri Feb 14 20:21:21 GMT 2014]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Template template0 = new Template();
      Template template1 = template0.clone();
      boolean boolean0 = template0.equals(template1);
      assertTrue(boolean0);
      assertNotSame(template1, template0);
  }
}
