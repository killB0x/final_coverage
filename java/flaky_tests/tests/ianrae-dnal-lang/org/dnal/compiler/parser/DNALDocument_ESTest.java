/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:06:47 GMT 2022
 */

package org.dnal.compiler.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.dnal.compiler.parser.DNALDocument;
import org.dnal.compiler.parser.ast.CustomRule;
import org.dnal.compiler.parser.ast.EnumMemberExp;
import org.dnal.compiler.parser.ast.Exp;
import org.dnal.compiler.parser.ast.FullAssignmentExp;
import org.dnal.compiler.parser.ast.FullListTypeExp;
import org.dnal.compiler.parser.ast.FullTypeExp;
import org.dnal.compiler.parser.ast.IdentExp;
import org.dnal.compiler.parser.ast.ImportExp;
import org.dnal.compiler.parser.ast.NumberExp;
import org.dnal.compiler.parser.ast.PackageExp;
import org.dnal.compiler.parser.ast.RangeExp;
import org.dnal.compiler.parser.ast.RuleDeclExp;
import org.dnal.compiler.parser.ast.RuleExp;
import org.dnal.compiler.parser.ast.RuleWithFieldExp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DNALDocument_ESTest extends DNALDocument_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      List<Exp> list0 = dNALDocument0.getStatementList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IdentExp identExp0 = new IdentExp((-4051), "unknowntype??");
      RuleWithFieldExp ruleWithFieldExp0 = new RuleWithFieldExp(0, identExp0, identExp0);
      LinkedList<List<Exp>> linkedList0 = new LinkedList<List<Exp>>();
      CustomRule customRule0 = new CustomRule(1059, ruleWithFieldExp0, linkedList0, "7t");
      DNALDocument dNALDocument0 = new DNALDocument(customRule0.argL);
      List<Exp> list0 = dNALDocument0.getStatementList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IdentExp identExp0 = new IdentExp("Mjd14:M4goDM");
      RuleWithFieldExp ruleWithFieldExp0 = new RuleWithFieldExp((-2021571434), identExp0, identExp0);
      Double double0 = new Double((-943.2216));
      NumberExp numberExp0 = new NumberExp((-2021571434), double0);
      RangeExp rangeExp0 = new RangeExp(2908, numberExp0, numberExp0);
      CustomRule customRule0 = new CustomRule((-2021571434), ruleWithFieldExp0, rangeExp0, "Mjd14:M4goDM");
      DNALDocument dNALDocument0 = new DNALDocument(customRule0.argL);
      List<Exp> list0 = dNALDocument0.getStatementList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      PackageExp packageExp0 = new PackageExp("");
      ImportExp importExp0 = new ImportExp("");
      EnumMemberExp enumMemberExp0 = new EnumMemberExp(packageExp0, importExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      String string0 = dNALDocument0.getShape(enumMemberExp0.type);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      PackageExp packageExp0 = new PackageExp("unknowntype??");
      packageExp0.pos = (-2614);
      packageExp0.pos = 792;
      linkedList0.add((Exp) packageExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      PackageExp packageExp1 = dNALDocument0.getPackage();
      assertEquals(792, packageExp1.pos);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      PackageExp packageExp0 = new PackageExp("unknowntype??");
      packageExp0.pos = (-2614);
      linkedList0.add((Exp) packageExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      PackageExp packageExp1 = dNALDocument0.getPackage();
      assertEquals((-2614), packageExp1.pos);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"]2P2x~d");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(0, importExp0, importExp0, importExp0, linkedList1);
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp(0, fullListTypeExp0.type, fullListTypeExp0.type, importExp0);
      linkedList0.add((Exp) fullAssignmentExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullAssignmentExp fullAssignmentExp1 = dNALDocument0.findValue("P\"]2P2x~d");
      assertEquals("P\"]2P2x~d", fullAssignmentExp1.strValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"N]2P2x~d");
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp((-1), importExp0, importExp0, importExp0);
      linkedList0.add((Exp) fullAssignmentExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullAssignmentExp fullAssignmentExp1 = dNALDocument0.findValue("P\"N]2P2x~d");
      assertFalse(fullAssignmentExp1.isListVar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"N]2P2x~d");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(2052, importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullTypeExp fullTypeExp0 = dNALDocument0.findType("P\"N]2P2x~d");
      assertEquals(2052, fullTypeExp0.pos);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"N]2P2x~d");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp((-1013), importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullTypeExp fullTypeExp0 = dNALDocument0.findType("P\"N]2P2x~d");
      assertEquals("P\"N]2P2x~d", fullTypeExp0.strValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      // Undeclared exception!
      try { 
        dNALDocument0.isTypeShape((IdentExp) null, "unkno4ntype??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.getValues();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.getTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      // Undeclared exception!
      try { 
        dNALDocument0.getShape((IdentExp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.getRuleDeclarations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.getPackage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.getImports();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.findValue("2C0F&%v:DJ5+uz=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.DNALDocument", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DNALDocument dNALDocument0 = new DNALDocument((List<Exp>) null);
      // Undeclared exception!
      try { 
        dNALDocument0.findType("org.dnal.compiler.parser.DNALDocument");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(0, importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullTypeExp fullTypeExp0 = dNALDocument0.findType("");
      assertEquals(0, fullTypeExp0.pos);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.ast.BooleanExp");
      linkedList0.push(importExp0);
      List<FullAssignmentExp> list0 = dNALDocument0.getValues();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(453, (IdentExp) null, (IdentExp) null, (IdentExp) null, (List<RuleExp>) null);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      List<FullTypeExp> list0 = dNALDocument0.getTypes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.ast.BooleanExp");
      linkedList0.push(importExp0);
      List<FullTypeExp> list0 = dNALDocument0.getTypes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp((String) null);
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp((-1544), importExp0, importExp0, importExp0);
      importExp0.val = "HN'Z(";
      linkedList0.add((Exp) fullAssignmentExp0);
      FullAssignmentExp fullAssignmentExp1 = dNALDocument0.findValue("5uI> R4~#\"uz.");
      assertNull(fullAssignmentExp1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("e&");
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp(579, importExp0, importExp0, importExp0);
      linkedList0.add((Exp) fullAssignmentExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullAssignmentExp fullAssignmentExp1 = dNALDocument0.findValue("e&");
      assertFalse(fullAssignmentExp1.isListVar());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"N]2P2x~d");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(0, importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      FullTypeExp fullTypeExp0 = dNALDocument0.findType("unknowntype??");
      assertNull(fullTypeExp0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("P\"N]2P2x~d");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(0, importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      // Undeclared exception!
      dNALDocument0.getShape(fullListTypeExp0.elementType);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.DNALDocument");
      String string0 = dNALDocument0.getShape(importExp0);
      assertEquals("org.dnal.compiler.parser.DNALDocument", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp((String) null);
      String string0 = dNALDocument0.getShape(importExp0);
      assertNotNull(string0);
      assertEquals("unknowntype??", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp((String) null);
      importExp0.val = "HN'Z(";
      boolean boolean0 = dNALDocument0.isTypeShape(importExp0, "HN'Z(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.DNALDocument");
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp((-1610612734), importExp0, importExp0, importExp0);
      linkedList0.addFirst(fullAssignmentExp0);
      List<FullAssignmentExp> list0 = dNALDocument0.getValues();
      assertTrue(list0.contains(fullAssignmentExp0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("unknowntype??");
      RuleDeclExp ruleDeclExp0 = new RuleDeclExp(0, importExp0, importExp0);
      linkedList0.add((Exp) ruleDeclExp0);
      boolean boolean0 = dNALDocument0.isTypeShape(importExp0, "R9tB|jMoT3sx&_Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.ast.BooleanExp");
      linkedList0.push(importExp0);
      List<RuleDeclExp> list0 = dNALDocument0.getRuleDeclarations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("unknowntype??");
      RuleDeclExp ruleDeclExp0 = new RuleDeclExp(0, importExp0, importExp0);
      linkedList0.add((Exp) ruleDeclExp0);
      List<RuleDeclExp> list0 = dNALDocument0.getRuleDeclarations();
      assertTrue(list0.contains(ruleDeclExp0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.ast.BooleanExp");
      linkedList0.push(importExp0);
      List<ImportExp> list0 = dNALDocument0.getImports();
      assertTrue(list0.contains(importExp0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.parser.DNALDocument");
      FullAssignmentExp fullAssignmentExp0 = new FullAssignmentExp((-1610612734), importExp0, importExp0, importExp0);
      linkedList0.addFirst(fullAssignmentExp0);
      List<ImportExp> list0 = dNALDocument0.getImports();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      PackageExp packageExp0 = new PackageExp("%s and %s");
      linkedList0.add((Exp) packageExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      PackageExp packageExp1 = dNALDocument0.getPackage();
      assertEquals(0, packageExp1.getPos());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      ImportExp importExp0 = new ImportExp("unknowntype??");
      RuleDeclExp ruleDeclExp0 = new RuleDeclExp(0, importExp0, importExp0);
      linkedList0.add((Exp) ruleDeclExp0);
      PackageExp packageExp0 = dNALDocument0.getPackage();
      assertNull(packageExp0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Exp> linkedList0 = new LinkedList<Exp>();
      ImportExp importExp0 = new ImportExp("??");
      LinkedList<RuleExp> linkedList1 = new LinkedList<RuleExp>();
      FullListTypeExp fullListTypeExp0 = new FullListTypeExp(0, importExp0, importExp0, importExp0, linkedList1);
      linkedList0.add((Exp) fullListTypeExp0);
      DNALDocument dNALDocument0 = new DNALDocument(linkedList0);
      // Undeclared exception!
      dNALDocument0.isTypeShape(fullListTypeExp0.var, "P\"N]2P2x~d");
  }
}
