/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:22:53 GMT 2022
 */

package org.dnal.compiler.parser.error;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dnal.compiler.parser.error.ErrorInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ErrorInfo_ESTest extends ErrorInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentVarName("dL1ANqZb,iggMnkz");
      errorInfo0.getCurrentVarName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentTypeName("/#b6S-&(M9{`lQEb");
      errorInfo0.getCurrentTypeName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentListIndex(4021);
      int int0 = errorInfo0.getCurrentListIndex();
      assertEquals(4021, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentFieldName("@");
      errorInfo0.getCurrentFieldName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentActualValue("`-");
      errorInfo0.getCurrentActualValue();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentActualValue("");
      errorInfo0.getCurrentActualValue();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentTypeName("");
      errorInfo0.getCurrentTypeName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      int int0 = errorInfo0.getCurrentListIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentFieldName("");
      errorInfo0.getCurrentFieldName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.getCurrentActualValue();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.getCurrentFieldName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.setCurrentVarName("");
      errorInfo0.getCurrentVarName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
      
      errorInfo0.setCurrentListIndex(0);
      int int0 = errorInfo0.getCurrentListIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.getCurrentTypeName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorInfo errorInfo0 = new ErrorInfo();
      errorInfo0.getCurrentVarName();
      assertEquals((-1), errorInfo0.getCurrentListIndex());
  }
}
