/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:30:02 GMT 2022
 */

package org.dnal.compiler.parser.error;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dnal.compiler.parser.ast.IdentExp;
import org.dnal.compiler.parser.error.TypeInfo;
import org.dnal.core.DType;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInfo_ESTest extends TypeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IdentExp identExp0 = new IdentExp(82385409, ">e");
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf(identExp0);
      assertEquals(TypeInfo.Type.UNKNOWN_TYPE, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TypeInfo.parserTypeOf("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = TypeInfo.isMapAny("map<any>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = TypeInfo.isListAny("|VI2cQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = TypeInfo.isBuiltIntype("NUMBER_SHAPE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = TypeInfo.isBuiltIntype("kWS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("N%Ny}pj@#m32zg% (>");
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dType0).getCompleteName();
      DType dType1 = new DType(shape0, "_- ", dType0);
      String string0 = TypeInfo.getBaseTypeName(dType1, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "", dType0);
      DType dType2 = new DType(shape0, "j", dType1);
      String string0 = TypeInfo.getBaseTypeName(dType2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.typeOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.stringToShape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.shapeForRuleDecl((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.isScalarType((IdentExp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.isPrimitiveType((IdentExp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.getBaseTypeName((DType) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.getBaseTypeName((DType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeInfo.parserTypeOf("dkLY)G(");
      String string0 = TypeInfo.parserTypeOf("boolean");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.ANY;
      DType dType0 = new DType(shape0, (String) null, (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0, false);
      assertEquals("any", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      DType dType0 = new DType(shape0, "long", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0, true);
      assertEquals("map", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "T<28eB>t,H:EmzP.Gq", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0, false);
      assertEquals("??", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      DType dType0 = new DType(shape0, "9jHkc", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0, false);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "NUMBER_SHAPE", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0, false);
      assertEquals("struct", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.isBuiltIntype((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeInfo.parserTypeOf("STRING_SHAPE");
      String string0 = TypeInfo.toShapeType("string");
      assertEquals("STRING_SHAPE", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("boolean");
      assertEquals(Shape.BOOLEAN, shape0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("long");
      assertEquals(Shape.LONG, shape0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("list");
      assertEquals(Shape.LIST, shape0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("enum");
      assertEquals(Shape.ENUM, shape0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("date");
      assertEquals(Shape.DATE, shape0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("map");
      assertEquals(Shape.MAP, shape0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("int");
      assertEquals(Shape.INTEGER, shape0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("struct");
      assertEquals(Shape.STRUCT, shape0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("string");
      assertEquals(Shape.STRING, shape0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.ANY;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("any", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("map", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("struct", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("string", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.NUMBER;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("number", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("list", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.DATE;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("date", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.BOOLEAN;
      String string0 = TypeInfo.shapeForRuleDecl(shape0);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = TypeInfo.parserTypeOf((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "NUMBER_SHAPE", (DType) null);
      DType dType1 = new DType(shape0, "NUMBER_SHAPE", dType0);
      String string0 = TypeInfo.getBaseTypeName(dType1, true);
      assertEquals("number", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("number");
      assertEquals(Shape.NUMBER, shape0);
      
      DType dType0 = new DType(shape0, "number", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0);
      assertEquals("??", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = TypeInfo.toShapeType((String) null);
      assertEquals("?????", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IdentExp identExp0 = new IdentExp("number");
      boolean boolean0 = TypeInfo.isScalarType(identExp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IdentExp identExp0 = new IdentExp((-1005), "list<any>");
      boolean boolean0 = TypeInfo.isScalarType(identExp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IdentExp identExp0 = new IdentExp("any");
      boolean boolean0 = TypeInfo.isPrimitiveType(identExp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IdentExp identExp0 = new IdentExp((String) null);
      boolean boolean0 = TypeInfo.isPrimitiveType(identExp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("T m$ZESJ.BHAR[]2?Nnv");
      assertEquals(TypeInfo.Type.UNKNOWN_TYPE, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("boolean");
      assertEquals(TypeInfo.Type.BOOLEAN, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("long");
      assertEquals(TypeInfo.Type.LONG, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("enum");
      assertEquals(TypeInfo.Type.ENUM, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("date");
      assertEquals(TypeInfo.Type.DATE, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("map");
      assertEquals(TypeInfo.Type.MAP, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("int");
      assertEquals(TypeInfo.Type.INT, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("any");
      assertEquals(TypeInfo.Type.ANY, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("struct");
      assertEquals(TypeInfo.Type.STRUCT, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("string");
      assertEquals(TypeInfo.Type.STRING, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("list");
      assertEquals(TypeInfo.Type.LIST, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeInfo.Type typeInfo_Type0 = TypeInfo.typeOf("number");
      assertEquals(TypeInfo.Type.NUMBER, typeInfo_Type0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInfo.typeOf((IdentExp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.parser.error.TypeInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Shape shape0 = TypeInfo.stringToShape("any");
      DType dType0 = new DType(shape0, "any", (DType) null);
      String string0 = TypeInfo.getBaseTypeName(dType0);
      assertEquals("any", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "NUMBER_SHAPE", (DType) null);
      DType dType1 = new DType(shape0, "NUMBER_SHAPE", dType0);
      String string0 = TypeInfo.getBaseTypeName(dType1, false);
      assertEquals("number", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = TypeInfo.isListAny("list<any>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = TypeInfo.isMapAny("list<any>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TypeInfo typeInfo0 = new TypeInfo();
  }
}
