/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:32:28 GMT 2022
 */

package org.dnal.compiler.nrule;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dnal.compiler.dnalgenerate.CustomRuleFactory;
import org.dnal.compiler.dnalgenerate.RuleDeclaration;
import org.dnal.compiler.nrule.InRule;
import org.dnal.compiler.nrule.IntegerRangeRule;
import org.dnal.compiler.nrule.RegexRule;
import org.dnal.compiler.nrule.StandardRuleFactory;
import org.dnal.compiler.nrule.StringCompareCaseInsensitiveRule;
import org.dnal.core.Shape;
import org.dnal.core.nrule.NRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardRuleFactory_ESTest extends StandardRuleFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.ANY;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("endsWith", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("endsWith", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[5];
      Shape shape0 = Shape.MAP;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("regex", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("regex", shape0);
      assertEquals("regex", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("contains", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("-AJ9PVLpDH<@.N", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("contains", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[0];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("DITjhZB-60bKP5xp9", shapeArray0);
      Shape shape0 = Shape.STRING;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("contains", shape0);
      assertEquals("contains", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("in", shape0);
      Shape shape1 = Shape.NUMBER;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("in", shape1);
      assertEquals("in", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("in", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("in", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("in", shape0);
      Shape shape1 = Shape.INTEGER;
      InRule inRule0 = (InRule)standardRuleFactory_Factory0.createRule("in", shape1);
      assertTrue(inRule0.polarity);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("hasText", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("in", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ige", shape0);
      Shape shape1 = Shape.STRING;
      StringCompareCaseInsensitiveRule stringCompareCaseInsensitiveRule0 = (StringCompareCaseInsensitiveRule)standardRuleFactory_Factory0.createRule("ige", shape1);
      assertTrue(stringCompareCaseInsensitiveRule0.polarity);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[5];
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("==", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("igt", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[5];
      Shape shape0 = Shape.STRUCT;
      shapeArray0[0] = shape0;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("==", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("igt", shapeArray0[0]);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ile", shape0);
      Shape shape1 = Shape.STRING;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ile", shape1);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("-AJ9PVLpDH<@.N", shape0);
      Shape shape1 = Shape.STRING;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ilt", shape1);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ieq", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ieq", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[0];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("DITjhZB-60bKP5xp9", shapeArray0);
      Shape shape0 = Shape.STRING;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("irange", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shapeArray0);
      Shape shape0 = Shape.NUMBER;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("range", shape0);
      assertEquals("range", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      Shape shape0 = Shape.LIST;
      shapeArray0[3] = shape0;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("range", shapeArray0[3]);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      Shape shape0 = Shape.LONG;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("range", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("org.dnal.compiler.nrule.IntegerRangeRule", shape0);
      IntegerRangeRule integerRangeRule0 = (IntegerRangeRule)standardRuleFactory_Factory0.createRule("range", shape0);
      assertTrue(integerRangeRule0.polarity);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shapeArray0);
      Shape shape0 = Shape.DATE;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("range", shape0);
      assertEquals("range", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[4];
      Shape shape0 = Shape.STRING;
      shapeArray0[1] = shape0;
      shapeArray0[3] = shapeArray0[1];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shapeArray0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("range", shapeArray0[3]);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ige", shape0);
      Shape shape1 = Shape.BOOLEAN;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("empty", shape1);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.DATE;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("endsWith", shape0);
      Shape shape1 = Shape.STRING;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("empty", shape1);
      assertEquals("empty", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ige", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("empty", shape0);
      assertEquals(1, nRule0.getMode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("hasText", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("hasText", shape0);
      assertEquals("hasText", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[5];
      Shape shape0 = Shape.STRUCT;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("regex", shapeArray0);
      RegexRule regexRule0 = (RegexRule)standardRuleFactory_Factory0.createRule("regex", shape0);
      assertTrue(regexRule0.polarity);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.NUMBER;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("len", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("len", shape0);
      assertEquals("len", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ilt", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("org.dnal.compiler.nrule.NumberRangeRule", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ile", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("ige", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ige", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("org.dnal.compiler.nrule.NumberRangeRule", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("ieq", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("in", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[0];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("DITjhZB-60bKP5xp9", shapeArray0);
      Shape shape0 = Shape.INTEGER;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("contains", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("org.dnal.compiler.nrule.NumberRangeRule", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("==", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("-AJ9PVLpDH<@.N", shape0);
      NRule nRule0 = standardRuleFactory_Factory0.createRule("startsWith", shape0);
      assertEquals("startsWith", nRule0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape[] shapeArray0 = new Shape[0];
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("DITjhZB-60bKP5xp9", shapeArray0);
      Shape shape0 = Shape.INTEGER;
      NRule nRule0 = standardRuleFactory_Factory0.createRule("irange", shape0);
      assertNull(nRule0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardRuleFactory standardRuleFactory0 = new StandardRuleFactory();
      CustomRuleFactory customRuleFactory0 = standardRuleFactory0.createFactory();
      assertNotNull(customRuleFactory0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      StandardRuleFactory.Factory standardRuleFactory_Factory0 = new StandardRuleFactory.Factory("org.dnal.compiler.nrule.NumberRangeRule", shape0);
      RuleDeclaration ruleDeclaration0 = standardRuleFactory_Factory0.getDeclaration();
      assertNotNull(ruleDeclaration0);
  }
}
