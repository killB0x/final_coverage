/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:51:34 GMT 2022
 */

package org.dnal.compiler.dnalgenerate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.dnal.compiler.dnalgenerate.ViaValueMatcher;
import org.dnal.core.DType;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.DValueProxy;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ViaValueMatcher_ESTest extends ViaValueMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ViaValueMatcher viaValueMatcher0 = new ViaValueMatcher();
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(dType0).isShape(any(org.dnal.core.Shape.class));
      DValueImpl dValueImpl0 = new DValueImpl(dType0, viaValueMatcher0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      DType dType1 = dValueProxy0.getType();
      DValue dValue0 = mock(DValue.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dValue0).asLong();
      doReturn(dType1, dType1, dType1).when(dValue0).getType();
      DValueProxy dValueProxy1 = new DValueProxy(dValue0);
      boolean boolean0 = viaValueMatcher0.match("saIGVjRH", dValueProxy1);
      assertEquals("NumberFormatException: For input string: \"saIGVjRH\"", viaValueMatcher0.getErrMsg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ViaValueMatcher viaValueMatcher0 = new ViaValueMatcher();
      Shape shape0 = Shape.INTEGER;
      DType dType0 = new DType(shape0, "", (DType) null);
      DValue dValue0 = mock(DValue.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dValue0).asInt();
      doReturn((DType) null, dType0).when(dValue0).getType();
      DValueProxy dValueProxy0 = new DValueProxy(dValue0);
      boolean boolean0 = viaValueMatcher0.match("NumberFormatException: %s", dValueProxy0);
      assertFalse(boolean0);
      assertEquals("NumberFormatException: For input string: \"NumberFormatException: %s\"", viaValueMatcher0.getErrMsg());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ViaValueMatcher viaValueMatcher0 = new ViaValueMatcher();
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(dType0).isShape(any(org.dnal.core.Shape.class));
      DValueImpl dValueImpl0 = new DValueImpl(dType0, viaValueMatcher0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      DType dType1 = dValueProxy0.getType();
      DValue dValue0 = mock(DValue.class, new ViolatedAssumptionAnswer());
      doReturn("saIGVjRH").when(dValue0).asString();
      doReturn(dType1, dType1, dType1).when(dValue0).getType();
      DValueProxy dValueProxy1 = new DValueProxy(dValue0);
      boolean boolean0 = viaValueMatcher0.match("saIGVjRH", dValueProxy1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ViaValueMatcher viaValueMatcher0 = new ViaValueMatcher();
      DValue dValue0 = mock(DValue.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null).when(dValue0).getType();
      DValueProxy dValueProxy0 = new DValueProxy(dValue0);
      boolean boolean0 = viaValueMatcher0.match((String) null, dValueProxy0);
      assertFalse(boolean0);
      
      String string0 = viaValueMatcher0.getErrMsg();
      assertEquals("NullPointerException: null", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ViaValueMatcher viaValueMatcher0 = new ViaValueMatcher();
      String string0 = viaValueMatcher0.getErrMsg();
      assertNull(string0);
  }
}
