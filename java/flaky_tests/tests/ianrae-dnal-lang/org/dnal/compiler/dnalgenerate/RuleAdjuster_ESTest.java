/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:33:48 GMT 2022
 */

package org.dnal.compiler.dnalgenerate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.dnal.compiler.dnalgenerate.RuleAdjuster;
import org.dnal.compiler.parser.ast.ComparisonAndRuleExp;
import org.dnal.compiler.parser.ast.ComparisonOrRuleExp;
import org.dnal.compiler.parser.ast.ComparisonRuleExp;
import org.dnal.compiler.parser.ast.CustomRule;
import org.dnal.compiler.parser.ast.Exp;
import org.dnal.compiler.parser.ast.IdentExp;
import org.dnal.compiler.parser.ast.ImportExp;
import org.dnal.compiler.parser.ast.PackageExp;
import org.dnal.compiler.parser.ast.RuleWithFieldExp;
import org.dnal.core.DType;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RuleAdjuster_ESTest extends RuleAdjuster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      ImportExp importExp0 = new ImportExp("GY<F?>elFHUIP");
      // Undeclared exception!
      try { 
        ruleAdjuster0.adjust((DType) null, importExp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.compiler.dnalgenerate.RuleAdjuster", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "BFlGmi;ml9aBgtG", (DType) null);
      ImportExp importExp0 = new ImportExp("BFlGmi;ml9aBgtG");
      ComparisonRuleExp comparisonRuleExp0 = new ComparisonRuleExp((IdentExp) importExp0, "BFlGmi;ml9aBgtG", (Exp) importExp0);
      comparisonRuleExp0.strVal = "org.dnal.compiler.dnalgenerate.RuleAdjuster";
      ruleAdjuster0.adjust(dType0, comparisonRuleExp0);
      assertEquals("BFlGmi;ml9aBgtG", dType0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      PackageExp packageExp0 = new PackageExp("02vT");
      ImportExp importExp0 = new ImportExp("02vT");
      ComparisonRuleExp comparisonRuleExp0 = new ComparisonRuleExp((IdentExp) importExp0, "02vT", (Exp) packageExp0);
      comparisonRuleExp0.strVal = "02vT";
      ruleAdjuster0.adjust(dType1, comparisonRuleExp0);
      assertFalse(dType1.isAnyShape());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      ImportExp importExp0 = new ImportExp((String) null);
      RuleWithFieldExp ruleWithFieldExp0 = new RuleWithFieldExp(0, importExp0, importExp0);
      LinkedList<List<Exp>> linkedList0 = new LinkedList<List<Exp>>();
      CustomRule customRule0 = new CustomRule(0, ruleWithFieldExp0, linkedList0, "");
      ruleAdjuster0.adjust(dType1, customRule0);
      assertFalse(dType1.equals((Object)dType0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      PackageExp packageExp0 = new PackageExp(".Y?5!4l9/\"");
      ruleAdjuster0.adjust(dType1, packageExp0);
      assertNull(dType1.getPackageName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      PackageExp packageExp0 = new PackageExp("02vT");
      ImportExp importExp0 = new ImportExp("02vT");
      ComparisonRuleExp comparisonRuleExp0 = new ComparisonRuleExp((IdentExp) importExp0, "02vT", (Exp) packageExp0);
      ruleAdjuster0.adjust(dType1, comparisonRuleExp0);
      assertEquals(0, dType1.getBitIndex());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "org.dnal.compiler.dnalgenerate.RuleAdjuster", (DType) null);
      ImportExp importExp0 = new ImportExp("org.dnal.compiler.dnalgenerate.RuleAdjuster");
      ruleAdjuster0.adjust(dType0, importExp0);
      assertEquals(0, importExp0.getPos());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      PackageExp packageExp0 = new PackageExp((String) null);
      ImportExp importExp0 = new ImportExp((String) null);
      ComparisonRuleExp comparisonRuleExp0 = new ComparisonRuleExp((IdentExp) importExp0, (String) null, (Exp) packageExp0);
      ComparisonAndRuleExp comparisonAndRuleExp0 = new ComparisonAndRuleExp(1, comparisonRuleExp0, comparisonRuleExp0);
      ruleAdjuster0.adjust(dType1, comparisonAndRuleExp0);
      assertNull(dType1.getPackageName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RuleAdjuster ruleAdjuster0 = new RuleAdjuster();
      Shape shape0 = Shape.DATE;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "*u1$1U@S:", dType0);
      IdentExp identExp0 = new IdentExp((-1215), "*u1$1U@S:");
      ComparisonRuleExp comparisonRuleExp0 = new ComparisonRuleExp(identExp0, "%d", (Exp) identExp0);
      ComparisonOrRuleExp comparisonOrRuleExp0 = new ComparisonOrRuleExp((-1215), comparisonRuleExp0, comparisonRuleExp0);
      ruleAdjuster0.adjust(dType1, comparisonOrRuleExp0);
      assertEquals("*u1$1U@S:", dType1.getName());
  }
}
