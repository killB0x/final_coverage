/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:24:02 GMT 2022
 */

package org.dnal.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import org.dnal.core.DType;
import org.dnal.core.DTypeHierarchy;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DTypeHierarchy_ESTest extends DTypeHierarchy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null, (DType) null, (DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = new DType(shape0, "", dType0);
      DType dType2 = new DType(shape0, "1PS~f26k-m=", dType1);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("1PS~f26k-m=", dType1);
      hashMap0.put("", dType2);
      dTypeHierarchy0.build(hashMap0);
      boolean boolean0 = dTypeHierarchy0.isParent(dType2, dType2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null, (DType) null, (DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = new DType(shape0, "", dType0);
      DType dType2 = new DType(shape0, "1PS~f26k-m=", dType1);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("ANY", dType1);
      hashMap0.put("w&%D>i\"AhBJ1la", dType2);
      dTypeHierarchy0.build(hashMap0);
      List<DType> list0 = dTypeHierarchy0.findParentTypes(hashMap0, dType2);
      assertNotNull(list0);
      assertTrue(list0.contains(dType1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn(dType0, dType0).when(dType1).getBaseType();
      DType dType2 = new DType(shape0, "1PS~f26k-m=", dType1);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("w&%D>i\"AhBJ1la", dType2);
      dTypeHierarchy0.build(hashMap0);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.isParent(dType2, (DType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.DTypeHierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      Shape shape0 = Shape.INTEGER;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = new DType(shape0, (String) null, dType0);
      dType1.setBitIndex((-3208));
      hashMap0.put("j_%kn2xZ+)\"%", dType1);
      dTypeHierarchy0.build(hashMap0);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.isParent(dType1, dType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -3208
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("de l[<f k'Obs]iU", dType0);
      dTypeHierarchy0.build(hashMap0);
      DType dType1 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      dType1.setBitIndex((-1));
      // Undeclared exception!
      try { 
        dTypeHierarchy0.isChild(dType0, dType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "x.=_#BzS", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("x.=_#BzS", dType0);
      dTypeHierarchy0.build(hashMap0);
      hashMap0.put("x.=_#BzS", (DType) null);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.findParentTypes(hashMap0, dType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.DTypeHierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.MAP;
      DType dType0 = new DType(shape0, "w&%D>i\"AhBJ1la", (DType) null);
      dType0.setBitIndex((-2588));
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("w&%D>i\"AhBJ1la", dType0);
      dTypeHierarchy0.build(hashMap0);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.findParentTypes(hashMap0, dType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2588
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "x.=_#B]zS", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("x.=_#B]zS", dType0);
      dTypeHierarchy0.build(hashMap0);
      hashMap0.put("org.dnal.core.DTypeHierarchy", (DType) null);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.findChildTypes(hashMap0, dType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.DTypeHierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      Shape shape0 = Shape.ANY;
      DType dType0 = new DType(shape0, "ANY", (DType) null);
      hashMap0.put("org.dnal.core.DTypeHierarchy", dType0);
      dTypeHierarchy0.build(hashMap0);
      dType0.setBitIndex((-746));
      // Undeclared exception!
      try { 
        dTypeHierarchy0.findChildTypes(hashMap0, dType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -746
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("S#bPvo26;HAI", (DType) null);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.build(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.DTypeHierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      DType dType1 = new DType(shape0, "de l[<f k'Obs]iU", dType0);
      dType1.setBitIndex((-1));
      hashMap0.put("+BV(xc) ", dType1);
      hashMap0.put("de l[<f k'Obs]iU", dType0);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.build(hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null, (DType) null, (DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = new DType(shape0, "", dType0);
      DType dType2 = new DType(shape0, "w&%D>i\"AhBJ1la", dType1);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("w&%D>i\"AhBJ1la", dType2);
      hashMap0.put("1PS~f26k-m=", dType1);
      dTypeHierarchy0.build(hashMap0);
      List<DType> list0 = dTypeHierarchy0.findChildTypes(hashMap0, dType1);
      assertNotNull(list0);
      assertTrue(list0.contains(dType1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      List<DType> list0 = dTypeHierarchy0.findChildTypes(hashMap0, (DType) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = new DType(shape0, "ANY", dType0);
      hashMap0.put("ANY", dType1);
      dTypeHierarchy0.build(hashMap0);
      List<DType> list0 = dTypeHierarchy0.findChildTypes(hashMap0, dType1);
      assertFalse(list0.contains(dType1));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      List<DType> list0 = dTypeHierarchy0.findParentTypes(hashMap0, (DType) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null, (DType) null).when(dType0).getBaseType();
      DType dType1 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn(dType0, dType0).when(dType1).getBaseType();
      DType dType2 = new DType(shape0, "1PS~f26k-m=", dType1);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      hashMap0.put("w&%D>i\"AhBJ1la", dType2);
      dTypeHierarchy0.build(hashMap0);
      List<DType> list0 = dTypeHierarchy0.findParentTypes(hashMap0, dType2);
      assertFalse(list0.contains(dType2));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      boolean boolean0 = dTypeHierarchy0.isChild(dType0, dType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      DType dType1 = hashMap0.put("de l[<f k'Obs]iU", dType0);
      dTypeHierarchy0.build(hashMap0);
      // Undeclared exception!
      try { 
        dTypeHierarchy0.isChild(dType0, dType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.DTypeHierarchy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      boolean boolean0 = dTypeHierarchy0.isParent(dType0, dType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DTypeHierarchy dTypeHierarchy0 = new DTypeHierarchy();
      Shape shape0 = Shape.DATE;
      DType dType0 = new DType(shape0, "de l[<f k'Obs]iU", (DType) null);
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      DType dType1 = new DType(shape0, "de l[<f k'Obs]iU", dType0);
      hashMap0.put("+BV(xc) ", dType1);
      hashMap0.put("de l[<f k'Obs]iU", dType0);
      dTypeHierarchy0.build(hashMap0);
      boolean boolean0 = dTypeHierarchy0.isChild(dType0, dType0);
      assertTrue(boolean0);
  }
}
