/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:47:33 GMT 2022
 */

package org.dnal.core.xbuilder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.dnal.core.DListType;
import org.dnal.core.DType;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.DValueProxy;
import org.dnal.core.NewErrorMessage;
import org.dnal.core.Shape;
import org.dnal.core.ValidationState;
import org.dnal.core.xbuilder.XListValueBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XListValueBuilder_ESTest extends XListValueBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, object0);
      DListType dListType0 = new DListType(shape0, "+l*g*%", (DType) null, (DType) null);
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      // Undeclared exception!
      try { 
        xListValueBuilder0.addValue(dValueImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.xbuilder.XListValueBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null).when(dListType0).getElementType();
      doReturn(false).when(dListType0).isAnyShape();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      DType dType0 = xListValueBuilder0.getType();
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType0, object0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      dValueProxy0.forceObject(xListValueBuilder0);
      DListType dListType1 = new DListType(shape0, "expecting int (tc)", dType0, dType0);
      XListValueBuilder xListValueBuilder1 = new XListValueBuilder(dListType1);
      // Undeclared exception!
      try { 
        xListValueBuilder1.addValue(dValueProxy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dnal.core.xbuilder.XListValueBuilder cannot be cast to class org.dnal.core.DValue (org.dnal.core.xbuilder.XListValueBuilder and org.dnal.core.DValue are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @45f2b9bf)
         //
         verifyException("org.dnal.core.DValueProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XListValueBuilder xListValueBuilder0 = null;
      try {
        xListValueBuilder0 = new XListValueBuilder((DListType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.xbuilder.XListValueBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DListType dListType0 = new DListType(shape0, "org.dnal.core.DValueImpl", (DType) null, (DType) null);
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      xListValueBuilder0.finished = true;
      LinkedList<NewErrorMessage> linkedList0 = new LinkedList<NewErrorMessage>();
      xListValueBuilder0.valErrorList = (List<NewErrorMessage>) linkedList0;
      xListValueBuilder0.onFinish();
      assertTrue(xListValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      xListValueBuilder0.onFinish();
      assertFalse(xListValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      DType dType0 = xListValueBuilder0.getType();
      DType dType1 = new DType(shape0, "expecting int (tc)", dType0);
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType1, object0);
      DListType dListType1 = new DListType(shape0, "expecting int (tc)", dType1, dType1);
      XListValueBuilder xListValueBuilder1 = new XListValueBuilder(dListType1);
      xListValueBuilder1.addValue(dValueImpl0);
      assertFalse(xListValueBuilder0.equals((Object)xListValueBuilder1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn(dType0).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isAnyShape();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      DType dType1 = xListValueBuilder0.getType();
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType1, object0);
      DListType dListType1 = new DListType(shape0, "expecting int (tc)", dType1, dType1);
      XListValueBuilder xListValueBuilder1 = new XListValueBuilder(dListType1);
      xListValueBuilder1.addValue(dValueImpl0);
      assertEquals(ValidationState.UNKNOWN, dValueImpl0.getValState());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn(dType0).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      xListValueBuilder0.addValue((DValue) null);
      assertFalse(xListValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dType0).isAnyShape();
      doReturn(false).when(dType0).isAssignmentCompatible(any(org.dnal.core.DType.class));
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn(dType0).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      DType dType1 = xListValueBuilder0.getType();
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType1, object0);
      xListValueBuilder0.addValue(dValueImpl0);
      assertFalse(xListValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DListType dListType0 = mock(DListType.class, new ViolatedAssumptionAnswer());
      doReturn((DType) null).when(dListType0).getElementType();
      doReturn(true).when(dListType0).isShape(any(org.dnal.core.Shape.class));
      XListValueBuilder xListValueBuilder0 = new XListValueBuilder(dListType0);
      xListValueBuilder0.buildFromString("");
      assertFalse(xListValueBuilder0.wasSuccessful());
  }
}
