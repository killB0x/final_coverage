/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:59:34 GMT 2022
 */

package org.dnal.core.xbuilder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dnal.core.DType;
import org.dnal.core.Shape;
import org.dnal.core.xbuilder.XIntegerValueBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XIntegerValueBuilder_ESTest extends XIntegerValueBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "\"Dc5i rKl", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      xIntegerValueBuilder0.buildFromString("2");
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XIntegerValueBuilder xIntegerValueBuilder0 = null;
      try {
        xIntegerValueBuilder0 = new XIntegerValueBuilder((DType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.xbuilder.XIntegerValueBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "\"Dc5i rKl", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      xIntegerValueBuilder0.buildFrom((Integer) null);
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "org.dnal.core.DValueImpl", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      Integer integer0 = new Integer((-664));
      xIntegerValueBuilder0.buildFrom(integer0);
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "I5(dsO1&", (DType) null);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType0);
      xIntegerValueBuilder0.buildFromString((String) null);
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "\"Dc5i rKl", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      xIntegerValueBuilder0.buildFromString("K\" ^fEdra>WSu");
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "8b:,^jHBU Z\"A[", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "org.dnal.core.DValueImpl", dType0);
      XIntegerValueBuilder xIntegerValueBuilder0 = new XIntegerValueBuilder(dType1);
      xIntegerValueBuilder0.onFinish();
      assertFalse(xIntegerValueBuilder0.wasSuccessful());
  }
}
