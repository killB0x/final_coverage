/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:29:27 GMT 2022
 */

package org.dnal.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.dnal.core.DMapType;
import org.dnal.core.DType;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DMapType_ESTest extends DMapType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "{V7>HF", (DType) null);
      DMapType dMapType0 = new DMapType(shape0, "{V7>HF", dType0, (DType) null);
      assertFalse(dMapType0.hasRules());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Shape shape0 = Shape.ENUM;
      Shape shape1 = Shape.STRUCT;
      DType dType0 = new DType(shape1, (String) null, (DType) null);
      DMapType dMapType0 = new DMapType(shape0, (String) null, dType0, dType0);
      DType dType1 = dMapType0.getElementType();
      assertSame(dType0, dType1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      Shape shape1 = Shape.LIST;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape1, "", dType0);
      DMapType dMapType0 = new DMapType(shape0, "", dType1, dType1);
      DType dType2 = dMapType0.getElementType();
      assertEquals("", dType2.getName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      Shape shape1 = Shape.ANY;
      DMapType dMapType0 = new DMapType(shape1, "Y^$zwiMkprHL", (DType) null, (DType) null);
      DMapType dMapType1 = new DMapType(shape0, "Y^$zwiMkprHL", dMapType0, dMapType0);
      DType dType0 = dMapType1.getElementType();
      assertFalse(dType0.isMapShape());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      DMapType dMapType0 = new DMapType(shape0, "<j`", dType1, dType1);
      dType1.setBitIndex(2599);
      DType dType2 = dMapType0.getElementType();
      assertFalse(dType2.isStructShape());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "", dType0);
      DMapType dMapType0 = new DMapType(shape0, "", dType1, dType1);
      dType1.setBitIndex((-1));
      DType dType2 = dMapType0.getElementType();
      assertNull(dType2.getPackageName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shape shape0 = Shape.NUMBER;
      DMapType dMapType0 = new DMapType(shape0, "_HNk", (DType) null, (DType) null);
      DType dType0 = dMapType0.getElementType();
      assertNull(dType0);
  }
}
