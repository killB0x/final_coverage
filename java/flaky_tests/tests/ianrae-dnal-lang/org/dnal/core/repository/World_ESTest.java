/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:39:30 GMT 2022
 */

package org.dnal.core.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import org.dnal.core.DListType;
import org.dnal.core.DStructType;
import org.dnal.core.DType;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.DValueProxy;
import org.dnal.core.OrderedMap;
import org.dnal.core.Shape;
import org.dnal.core.ValidationState;
import org.dnal.core.nrule.ValidationScorer;
import org.dnal.core.repository.MockRepositoryFactory;
import org.dnal.core.repository.Repository;
import org.dnal.core.repository.RepositoryFactory;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class World_ESTest extends World_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.DATE;
      DListType dListType0 = new DListType(shape0, "TG3", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, "TG3");
      world0.addTopLevelValue("TG3", dValueImpl0);
      boolean boolean0 = world0.inRepo(dValueImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.LIST;
      DListType dListType0 = new DListType(shape0, "j", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, object0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("WfINOYw1N", dValueProxy0);
      Map<String, DValue> map0 = world0.getValueMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      RepositoryFactory repositoryFactory0 = world0.getRepositoryFactory();
      assertSame(repositoryFactory0, mockRepositoryFactory0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "^O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "^O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      Map<DType, Repository> map0 = world0.getRepoMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "^O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "^O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("^O+M@", dValueProxy0);
      Repository repository0 = world0.getRepoForListType(dType0);
      assertEquals(1L, repository0.size());
      assertNotNull(repository0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      Repository repository0 = world0.getRepoFor(dListType0);
      assertEquals(0L, repository0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("O+M@", dValueProxy0);
      List<String> list0 = world0.getOrderedList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("O+M@", dValueProxy0);
      String string0 = world0.findTopValueValueName(dValueProxy0);
      assertEquals("O+M@", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.ANY;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      world0.typeRegistered(dStructType0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, orderedMap0);
      world0.addTopLevelValue(" ", dValueImpl0);
      ValidationState validationState0 = ValidationState.VALID;
      dValueImpl0.changeValidState(validationState0);
      DValue dValue0 = world0.findTopLevelValue(" ");
      assertSame(dValue0, dValueImpl0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.MAP;
      DListType dListType0 = new DListType(shape0, "/0N", (DType) null, (DType) null);
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, object0);
      world0.addTopLevelValue("/0N", dValueImpl0);
      DValue dValue0 = world0.findTopLevelValue("/0N");
      assertEquals(ValidationState.UNKNOWN, dValue0.getValState());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "BOOLEAN", (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dType0, (Object) null);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      dValueProxy0.forceObject(dValueProxy0);
      // Undeclared exception!
      try { 
        world0.valueAdded(dValueProxy0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.NUMBER;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "", (DType) null, orderedMap0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, shape0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      Object object0 = new Object();
      dValueProxy0.forceObject(object0);
      // Undeclared exception!
      try { 
        world0.valueAdded(dValueProxy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.STRUCT;
      DListType dListType0 = new DListType(shape0, "s", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dListType0);
      world0.addTopLevelValue("s", dValueImpl0);
      ValidationScorer validationScorer0 = new ValidationScorer();
      // Undeclared exception!
      try { 
        world0.scoreWorld(validationScorer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dnal.core.DListType cannot be cast to class java.util.Map (org.dnal.core.DListType is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5d493040; java.util.Map is in module java.base of loader 'bootstrap')
         //
         verifyException("org.dnal.core.DValueImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.MAP;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "JD[#C+&", (DType) null, orderedMap0);
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, dStructType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      dValueProxy0.forceObject(dValueProxy0);
      // Undeclared exception!
      try { 
        world0.inRepo(dValueProxy0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      World world0 = new World();
      // Undeclared exception!
      try { 
        world0.inRepo((DValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      World world0 = new World();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, world0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      Object object0 = new Object();
      dValueProxy0.forceObject(object0);
      // Undeclared exception!
      try { 
        world0.inRepo(dValueProxy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      World world0 = new World();
      // Undeclared exception!
      try { 
        world0.dumpType((DType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "^@", (DType) null);
      DListType dListType0 = new DListType(shape0, "^@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, (Object) null);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("^@", dValueProxy0);
      // Undeclared exception!
      try { 
        world0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.INTEGER;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("O+M@", dValueProxy0);
      dValueProxy0.forceObject("O+M@");
      // Undeclared exception!
      try { 
        world0.dump();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      World world0 = new World();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, world0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      dValueProxy0.forceObject(dValueProxy0);
      // Undeclared exception!
      try { 
        world0.addTopLevelValue("mU23jwzCh'Kg2", dValueProxy0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, (Object) null);
      World world0 = new World();
      // Undeclared exception!
      try { 
        world0.addTopLevelValue("T~r)OKW.'lu%aF", dValueImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      World world0 = new World();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, world0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      dValueProxy0.forceObject(world0);
      // Undeclared exception!
      try { 
        world0.addTopLevelValue("Zw", dValueProxy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "BOOLEAN", (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dType0, (Object) null);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.typeRegistered(dType0);
      world0.valueAdded(dValueProxy0);
      Repository repository0 = world0.getRepoFor(dType0);
      assertEquals(1L, repository0.size());
      assertNotNull(repository0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "^@", (DType) null);
      DListType dListType0 = new DListType(shape0, "^@", dType0, dType0);
      world0.typeRegistered(dListType0);
      Repository repository0 = world0.getRepoForListType(dListType0);
      assertNull(repository0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.ANY;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      DListType dListType0 = new DListType(shape0, ".kE", (DType) null, dStructType0);
      world0.typeRegistered(dStructType0);
      Repository repository0 = world0.getRepoForListType(dListType0);
      assertNull(repository0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.LIST;
      DListType dListType0 = new DListType(shape0, "j", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      Repository repository0 = world0.getRepoForListType((DType) null);
      assertEquals(0L, repository0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.STRUCT;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      world0.typeRegistered(dStructType0);
      boolean boolean0 = world0.hasRepo(dStructType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      World world0 = new World();
      boolean boolean0 = world0.hasRepo((DType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.DATE;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "", (DType) null, orderedMap0);
      DStructType dStructType1 = new DStructType(shape0, "", dStructType0, orderedMap0);
      orderedMap0.add("", dStructType1, false, true);
      world0.dumpType(dStructType0);
      assertEquals(0, dStructType0.getBitIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.LIST;
      DType dType0 = new DType(shape0, "--dump end.---", (DType) null);
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "--dump end.---", dType0, orderedMap0);
      orderedMap0.add("", dType0, true, false);
      world0.dumpType(dStructType0);
      assertFalse(dStructType0.isAnyShape());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.ANY;
      DListType dListType0 = new DListType(shape0, "name or dval were null", (DType) null, (DType) null);
      DType dType0 = new DType(shape0, "name or dval were null", dListType0);
      world0.dumpType(dType0);
      assertFalse(World.debug);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.STRUCT;
      DListType dListType0 = new DListType(shape0, "xV!IbDS:", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, (Object) null);
      world0.addTopLevelValue("xV!IbDS:", dValueImpl0);
      ValidationScorer validationScorer0 = new ValidationScorer();
      // Undeclared exception!
      try { 
        world0.scoreWorld(validationScorer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.LIST;
      DListType dListType0 = new DListType(shape0, "j", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      assertEquals(0, validationScorer0.getInvalidCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("O+M@", dValueProxy0);
      world0.dump();
      assertFalse(World.debug);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.LIST;
      DListType dListType0 = new DListType(shape0, "j", (DType) null, (DType) null);
      world0.typeRegistered(dListType0);
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, object0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      world0.addTopLevelValue("WfINOYw1N", dValueProxy0);
      world0.dump();
      assertFalse(World.debug);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "^O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "^O+M@", dType0, dType0);
      world0.typeRegistered(dListType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      boolean boolean0 = world0.inRepo(dValueProxy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "BOOLEAN", (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dType0, (Object) null);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      boolean boolean0 = world0.inRepo(dValueProxy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.ANY;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      world0.typeRegistered(dStructType0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, orderedMap0);
      world0.addTopLevelValue(" ", dValueImpl0);
      world0.valueAdded(dValueImpl0);
      assertFalse(dValueImpl0.isValid());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.ANY;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, orderedMap0);
      // Undeclared exception!
      try { 
        world0.addTopLevelValue("", dValueImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or dval were null
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      World world0 = new World();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, world0);
      // Undeclared exception!
      try { 
        world0.addTopLevelValue((String) null, dValueImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or dval were null
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      World world0 = new World();
      // Undeclared exception!
      try { 
        world0.addTopLevelValue("--%s %s [%s]---", (DValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or dval were null
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      World world0 = new World();
      World.debug = true;
      Shape shape0 = Shape.STRING;
      DListType dListType0 = new DListType(shape0, "", (DType) null, (DType) null);
      // Undeclared exception!
      try { 
        world0.typeRegistered(dListType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.MAP;
      DType dType0 = new DType(shape0, (String) null, (DType) null);
      world0.typeRegistered(dType0);
      assertNull(dType0.getCompleteName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.MAP;
      DListType dListType0 = new DListType(shape0, "", (DType) null, (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, shape0);
      world0.valueAdded(dValueImpl0);
      assertFalse(dValueImpl0.isValid());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.STRUCT;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      DListType dListType0 = new DListType(shape0, ".kE", (DType) null, dStructType0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, orderedMap0);
      Shape shape1 = Shape.DATE;
      DStructType dStructType1 = new DStructType(shape1, "n}o<'GoUnkYi_j1F_h", dListType0, orderedMap0);
      dValueImpl0.forceType(dStructType1);
      // Undeclared exception!
      try { 
        world0.valueAdded(dValueImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      World world0 = new World();
      List<String> list0 = world0.getOrderedList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.BOOLEAN;
      DType dType0 = new DType(shape0, "O+M@", (DType) null);
      DListType dListType0 = new DListType(shape0, "O+M@", dType0, dType0);
      DValueImpl dValueImpl0 = new DValueImpl(dListType0, dType0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      String string0 = world0.findTopValueValueName(dValueProxy0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      World world0 = new World();
      DValue dValue0 = world0.findTopLevelValue(" ");
      assertNull(dValue0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      World world0 = new World();
      MockRepositoryFactory mockRepositoryFactory0 = new MockRepositoryFactory();
      world0.setRepositoryFactory(mockRepositoryFactory0);
      Shape shape0 = Shape.STRUCT;
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, ".kE", (DType) null, orderedMap0);
      DListType dListType0 = new DListType(shape0, ".kE", (DType) null, dStructType0);
      world0.typeRegistered(dStructType0);
      DValueImpl dValueImpl0 = new DValueImpl(dStructType0, orderedMap0);
      world0.addTopLevelValue(" ", dValueImpl0);
      ValidationScorer validationScorer0 = new ValidationScorer();
      Shape shape1 = Shape.DATE;
      DStructType dStructType1 = new DStructType(shape1, "n}o<'GoUnkYi_j1F_h", dListType0, orderedMap0);
      dValueImpl0.forceType(dStructType1);
      world0.scoreWorld(validationScorer0);
      assertEquals(1, validationScorer0.count);
      assertTrue(validationScorer0.someUnknown());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      World world0 = new World();
      Map<String, DValue> map0 = world0.getValueMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      World world0 = new World();
      Map<DType, Repository> map0 = world0.getRepoMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      World world0 = new World();
      RepositoryFactory repositoryFactory0 = world0.getRepositoryFactory();
      assertNull(repositoryFactory0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      World world0 = new World();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "BOOLEAN", (DType) null);
      Repository repository0 = world0.getRepoFor(dType0);
      assertNull(repository0);
  }
}
