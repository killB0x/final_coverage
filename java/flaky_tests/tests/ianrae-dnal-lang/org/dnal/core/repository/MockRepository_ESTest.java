/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:18:56 GMT 2022
 */

package org.dnal.core.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dnal.core.DType;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.DValueProxy;
import org.dnal.core.Shape;
import org.dnal.core.repository.MockRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MockRepository_ESTest extends MockRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "", dType0);
      DValueImpl dValueImpl0 = new DValueImpl(dType1, "");
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      mockRepository0.add(dValueProxy0);
      long long0 = mockRepository0.size();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType0, object0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      DType dType1 = dValueProxy0.getType();
      DType dType2 = new DType(shape0, "org.dnal.core.logger.Slf4jLog", dType1);
      MockRepository mockRepository0 = new MockRepository(dType2);
      DType dType3 = mockRepository0.getType();
      assertFalse(dType3.equals((Object)dType0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DValueImpl dValueImpl0 = new DValueImpl(dType0, "IY?J3|=z+/");
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      DType dType1 = dValueProxy0.getType();
      DType dType2 = new DType(shape0, "IY?J3|=z+/", dType1);
      MockRepository mockRepository0 = new MockRepository(dType2);
      DType dType3 = mockRepository0.getType();
      assertEquals("IY?J3|=z+/", dType3.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.ANY;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "BOOLEAN", dType0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      DType dType2 = mockRepository0.getType();
      assertNull(dType2.getPackageName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "", dType0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      DType dType2 = mockRepository0.getType();
      assertSame(dType2, dType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "", dType0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      dType1.setBitIndex(2);
      DType dType2 = mockRepository0.getType();
      assertFalse(dType2.equals((Object)dType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "31C", dType0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      dType1.setBitIndex((-390));
      DType dType2 = mockRepository0.getType();
      assertSame(dType2, dType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = new DType(shape0, "", (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dType0, "");
      MockRepository mockRepository0 = new MockRepository(dType0);
      mockRepository0.add(dValueImpl0);
      List<DValue> list0 = mockRepository0.getAll();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl(dType1, object0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      dValueProxy0.forceObject(dValueProxy0);
      // Undeclared exception!
      try { 
        mockRepository0.add(dValueProxy0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRepository mockRepository0 = new MockRepository((DType) null);
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, mockRepository0);
      // Undeclared exception!
      try { 
        mockRepository0.add(dValueImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.MockRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "31C", dType0);
      DValueImpl dValueImpl0 = new DValueImpl(dType1, dType1);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      dValueProxy0.forceObject(dType1);
      // Undeclared exception!
      try { 
        mockRepository0.add(dValueProxy0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dnal.core.DType cannot be cast to class org.dnal.core.DValue (org.dnal.core.DType and org.dnal.core.DValue are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @32aba665)
         //
         verifyException("org.dnal.core.DValueProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRepository mockRepository0 = new MockRepository((DType) null);
      List<DValue> list0 = mockRepository0.getAll();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, list0);
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      boolean boolean0 = mockRepository0.inRepo(dValueProxy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRepository mockRepository0 = new MockRepository((DType) null);
      DType dType0 = mockRepository0.getType();
      assertNull(dType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, (String) null, dType0);
      MockRepository mockRepository0 = new MockRepository(dType1);
      long long0 = mockRepository0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.INTEGER;
      DType dType0 = new DType(shape0, "", (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dType0, "");
      MockRepository mockRepository0 = new MockRepository(dType0);
      mockRepository0.add(dValueImpl0);
      boolean boolean0 = mockRepository0.inRepo(dValueImpl0);
      assertTrue(boolean0);
  }
}
