/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:54:51 GMT 2022
 */

package org.dnal.core.fluent.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.dnal.core.BuiltInTypes;
import org.dnal.core.DStructType;
import org.dnal.core.DType;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.OrderedMap;
import org.dnal.core.Shape;
import org.dnal.core.fluent.type.TypeBuilder;
import org.dnal.core.nrule.ValidationScorer;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeBuilder_ESTest extends TypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      assertNull(typeBuilder0.getPackageName());
      
      typeBuilder0.setPackageName((String) null);
      typeBuilder0.setPackageName("");
      typeBuilder0.setAmBuildingEnum(true);
      // Undeclared exception!
      try { 
        typeBuilder0.fieldNameExists((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(true);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFaYNT2D");
      typeBuilder_Inner0.integer("pFaYNT2D");
      typeBuilder_Inner0.end();
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.string("");
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder0.new Inner();
      typeBuilder0.getType();
      // Undeclared exception!
      try { 
        typeBuilder_InnerString0.number("org.dnal.core.nrule.virtual.VirtualLongMember");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: org.dnal.core.nrule.virtual.VirtualLongMember
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerEnum typeBuilder_InnerEnum0 = typeBuilder_Inner0.enumeration("LIST_ANY_SHAPE", "LIST_ANY_SHAPE");
      assertNotNull(typeBuilder_InnerEnum0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      String string0 = "Y7";
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder_Inner0.stringList("Y7");
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.stringList("Y7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: Y7
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      String string0 = "\\.q=c";
      typeBuilder0.setPackageName(".q=c");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      Shape shape0 = Shape.ENUM;
      Shape shape1 = Shape.MAP;
      String string1 = "";
      dTypeRegistry0.getType("");
      DType dType0 = new DType(shape1, "", (DType) null);
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "qx8", dType0, orderedMap0);
      typeBuilder0.setBaseType(dStructType0);
      typeBuilder_Inner0.currentField = null;
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("qx8");
      typeBuilder_InnerLong0.max(0);
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.stringList(".q=c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: .q=c
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder0.getType();
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.other("RL", (DType) null);
      typeBuilder_InnerString0.minSize(1005);
      // Undeclared exception!
      try { 
        typeBuilder_InnerString0.integer("RL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: RL
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(false);
      assertNull(typeBuilder0.getPackageName());
      
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_Inner0.end();
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.string("");
      typeBuilder_InnerString0.minSize(959);
      DStructType dStructType0 = typeBuilder0.getType();
      assertTrue(dStructType0.isStructShape());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerNumber typeBuilder_InnerNumber0 = typeBuilder_Inner0.number("Y7");
      assertNotNull(typeBuilder_InnerNumber0);
      
      TypeBuilder.InnerNumber typeBuilder_InnerNumber1 = typeBuilder_InnerNumber0.min(6139.7);
      TypeBuilder.InnerNumber typeBuilder_InnerNumber2 = typeBuilder_InnerNumber1.min(6139.7);
      assertSame(typeBuilder_InnerNumber2, typeBuilder_InnerNumber1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerNumber typeBuilder_InnerNumber0 = typeBuilder_Inner0.number("Y7");
      TypeBuilder.InnerNumber typeBuilder_InnerNumber1 = typeBuilder_InnerNumber0.max(6139.7);
      TypeBuilder.InnerNumber typeBuilder_InnerNumber2 = typeBuilder_InnerNumber1.min(6139.7);
      assertSame(typeBuilder_InnerNumber1, typeBuilder_InnerNumber2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setPackageName("Y7");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder0.start("");
      TypeBuilder.InnerNumber typeBuilder_InnerNumber0 = typeBuilder_Inner0.number("Y7");
      typeBuilder_InnerNumber0.max(1001.035415161);
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_InnerNumber0.string("");
      assertNotNull(typeBuilder_InnerString0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerInteger typeBuilder_InnerInteger0 = typeBuilder_Inner0.integer("");
      assertNotNull(typeBuilder_InnerInteger0);
      
      TypeBuilder.InnerInteger typeBuilder_InnerInteger1 = typeBuilder_InnerInteger0.max(1983);
      assertSame(typeBuilder_InnerInteger0, typeBuilder_InnerInteger1);
      
      // Undeclared exception!
      try { 
        typeBuilder_InnerInteger1.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerInteger typeBuilder_InnerInteger0 = typeBuilder_Inner0.integer("");
      typeBuilder_InnerInteger0.min(21);
      // Undeclared exception!
      try { 
        typeBuilder_InnerInteger0.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(false);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      TypeBuilder.InnerInteger typeBuilder_InnerInteger0 = typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_InnerInteger0.min(8);
      typeBuilder_Inner0.end();
      typeBuilder_Inner0.string("");
      typeBuilder_InnerInteger0.resetForNextField();
      // Undeclared exception!
      try { 
        typeBuilder_InnerInteger0.string("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(true);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_Inner0.end();
      String string0 = null;
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.string((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder0.setAmBuildingEnum(true);
      TypeBuilder.InnerInteger typeBuilder_InnerInteger0 = typeBuilder_Inner0.integer("");
      // Undeclared exception!
      try { 
        typeBuilder_InnerInteger0.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      TypeBuilder typeBuilder1 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.setPackageName("org.dnal.core.fluent.type.TypeBuilder$InnerNumber");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      TypeBuilder.InnerLong typeBuilder_InnerLong1 = typeBuilder_InnerLong0.min(0);
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong1.stringList("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      BuiltInTypes builtInTypes0 = BuiltInTypes.BOOLEAN_SHAPE;
      dTypeRegistry0.getType(builtInTypes0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.getType();
      typeBuilder0.setBaseType((DStructType) null);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      dTypeRegistry0.dump();
      typeBuilder_Inner0.date("");
      typeBuilder0.setPackageName("");
      boolean boolean0 = typeBuilder0.fieldNameExists("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      typeBuilder_Inner0.other("", (DType) null);
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.string("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      String string0 = "";
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.string("");
      typeBuilder0.setPackageName("");
      typeBuilder0.getType();
      typeBuilder_Inner0.optional();
      typeBuilder_InnerString0.notEmpty();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.date("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      String string0 = "";
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      typeBuilder_Inner0.unique();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      typeBuilder0.getType();
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.number("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      TypeBuilder.InnerEnum typeBuilder_InnerEnum0 = typeBuilder_Inner0.enumeration("", "ydq!VyYHWhkJ1");
      // Undeclared exception!
      try { 
        typeBuilder_InnerEnum0.string("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      String string0 = "";
      typeBuilder_Inner0.string("");
      typeBuilder0.setPackageName("");
      typeBuilder0.getType();
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder_Inner0.optional();
      // Undeclared exception!
      try { 
        typeBuilder_Inner1.other("", (DType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.other("0", (DType) null);
      TypeBuilder.InnerString typeBuilder_InnerString1 = typeBuilder_InnerString0.notEmpty();
      assertSame(typeBuilder_InnerString1, typeBuilder_InnerString0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.string("");
      assertNotNull(typeBuilder_InnerString0);
      
      typeBuilder0.setPackageName("");
      typeBuilder0.getType();
      typeBuilder0.setAmBuildingEnum(false);
      typeBuilder0.getType();
      typeBuilder_InnerString0.maxSize(16);
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.number("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerString typeBuilder_InnerString0 = typeBuilder_Inner0.other("j", (DType) null);
      typeBuilder_InnerString0.maxSize(11);
      // Undeclared exception!
      try { 
        typeBuilder_InnerString0.number("j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: j
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.start((String) null);
      typeBuilder0.setPackageName("Tr-z&pl45cG$*3=$Zv'");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder0.start((String) null);
      typeBuilder_Inner0.number("");
      // Undeclared exception!
      try { 
        typeBuilder_Inner1.integer("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      typeBuilder_InnerLong0.min((-692));
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.stringList("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      typeBuilder_InnerLong0.max((-692));
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.stringList("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      BuiltInTypes builtInTypes0 = BuiltInTypes.BOOLEAN_SHAPE;
      dTypeRegistry0.getType(builtInTypes0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.getType();
      typeBuilder0.setBaseType((DStructType) null);
      BuiltInTypes builtInTypes1 = BuiltInTypes.DATE_SHAPE;
      dTypeRegistry0.getType(builtInTypes1);
      typeBuilder0.setPackageName("org.dnal.core.DStructHelper");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("DATE");
      typeBuilder_Inner0.date("DATE");
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      typeBuilder_InnerLong0.currentField = (DType) null;
      TypeBuilder.InnerLong typeBuilder_InnerLong1 = typeBuilder_InnerLong0.min(4);
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong1.enumeration((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(false);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_Inner0.end();
      typeBuilder_Inner0.unique = false;
      typeBuilder_Inner0.unique();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("pFYNT2D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: pFYNT2D
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      World.debug = false;
      dTypeRegistry0.getHierarchy();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder0.start("ENUM");
      typeBuilder0.setPackageName("");
      typeBuilder_Inner0.resetForNextField();
      typeBuilder_Inner1.unique();
      typeBuilder_Inner1.stringList("");
      DStructType dStructType0 = typeBuilder0.getType();
      assertNull(dStructType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.stringList("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("2\"J1y2 kh&HX%V)@j");
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.enumeration("X*gDDi4kGxE(cDw0", "X*gDDi4kGxE(cDw0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: X*gDDi4kGxE(cDw0
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.setPackageName(".q=c");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("qx8");
      // Undeclared exception!
      try { 
        typeBuilder_InnerLong0.stringList("P.:+c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: P.:+c
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      TypeBuilder.InnerEnum typeBuilder_InnerEnum0 = typeBuilder_Inner0.enumeration("", "");
      assertNotNull(typeBuilder_InnerEnum0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_Inner0.end();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(false);
      String string0 = "pFYNT2D";
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("pFYNT2D");
      typeBuilder_Inner0.integer("pFYNT2D");
      typeBuilder_Inner0.end();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.enumeration("pFYNT2D", "pFYNT2D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: pFYNT2D
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      assertNotNull(typeBuilder_InnerLong0);
      
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder_Inner0.date("Y7");
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.integer("Y7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: Y7
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      BuiltInTypes builtInTypes0 = BuiltInTypes.BOOLEAN_SHAPE;
      dTypeRegistry0.getType(builtInTypes0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.getType();
      typeBuilder0.setBaseType((DStructType) null);
      String string0 = "";
      typeBuilder0.setPackageName("org.dnal.core.DStructHelper");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("");
      typeBuilder_Inner0.date("");
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder_Inner0.unique();
      TypeBuilder.InnerLong typeBuilder_InnerLong0 = typeBuilder_Inner0.longInteger("");
      assertNotNull(typeBuilder_InnerLong0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      world0.dump();
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start((String) null);
      typeBuilder0.start("S3j($'8O&J");
      typeBuilder0.setPackageName((String) null);
      typeBuilder_Inner0.resetForNextField();
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder_Inner0.unique();
      // Undeclared exception!
      try { 
        typeBuilder_Inner1.stringList("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder_Inner0.optional();
      TypeBuilder.InnerEnum typeBuilder_InnerEnum0 = typeBuilder_Inner0.enumeration("Y7", "Y7");
      assertNotNull(typeBuilder_InnerEnum0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      String string0 = "LIST";
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("LIST");
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.bool("- failed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: - failed
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("vZHNY");
      typeBuilder_Inner0.bool("vZHNY");
      typeBuilder0.setPackageName("vZHNY");
      String string0 = null;
      String string1 = "";
      typeBuilder0.start("STRUCT");
      typeBuilder_Inner0.string("UNKNOWN");
      typeBuilder_Inner0.optional();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.string("%X+oB8LGFAAhaMLPz_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: %X+oB8LGFAAhaMLPz_
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.other("org.dnal.core.nrule.NRuleContext", (DType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: org.dnal.core.nrule.NRuleContext
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      boolean boolean0 = true;
      typeBuilder0.setAmBuildingEnum(true);
      typeBuilder0.start((String) null);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("org.dnal.core.fluent.type.TypeBuilder$InnerEnum");
      typeBuilder0.setAmBuildingEnum(true);
      Shape shape0 = Shape.INTEGER;
      Shape shape1 = Shape.LIST;
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      BuiltInTypes builtInTypes0 = BuiltInTypes.ENUM_SHAPE;
      dTypeRegistry0.getType(builtInTypes0);
      DType dType0 = new DType(shape1, "t38_>k@0gjABs", (DType) null);
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "org.dnal.core.fluent.type.TypeBuilder$InnerEnum", dType0, orderedMap0);
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.other("org.dnal.core.fluent.type.TypeBuilder$InnerEnum", dStructType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: org.dnal.core.fluent.type.TypeBuilder$InnerEnum
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("dVF qa|qE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: dVF qa|qE
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      String string0 = "org.dnal.core.fluent.type.TypeBuilder$InnerString";
      typeBuilder0.setPackageName("org.dnal.core.fluent.type.TypeBuilder$InnerString");
      Shape shape0 = Shape.ANY;
      Shape shape1 = Shape.ANY;
      typeBuilder0.getType();
      DType dType0 = new DType(shape1, "N7O~j.jv`N", (DType) null);
      dType0.isShape(shape1);
      OrderedMap orderedMap0 = new OrderedMap();
      HashMap<String, DType> hashMap0 = new HashMap<String, DType>();
      orderedMap0.map = (Map<String, DType>) hashMap0;
      DStructType dStructType0 = new DStructType(shape0, "org.dnal.core.fluent.type.TypeBuilder$InnerString", dType0, orderedMap0);
      typeBuilder0.setBaseType(dStructType0);
      typeBuilder0.start("<");
      typeBuilder0.start("<");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("|q93'`S]hJCo\"Nz");
      String string1 = "field name already used: ";
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.string("field name already used: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: field name already used: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      ValidationScorer validationScorer0 = new ValidationScorer();
      world0.scoreWorld(validationScorer0);
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      typeBuilder0.setAmBuildingEnum(false);
      typeBuilder0.setAmBuildingEnum(false);
      String string0 = typeBuilder0.getPackageName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      typeBuilder_Inner0.resetForNextField();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.end();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      TypeBuilder typeBuilder0 = new TypeBuilder(dTypeRegistry0, world0);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("TDsR~I");
      typeBuilder_Inner0.resetForNextField();
      Shape shape0 = Shape.BOOLEAN;
      Shape shape1 = Shape.STRUCT;
      typeBuilder0.getType();
      DType dType0 = new DType(shape1, "TDsR~I", (DType) null);
      OrderedMap orderedMap0 = new OrderedMap();
      DStructType dStructType0 = new DStructType(shape0, "TDsR~I", dType0, orderedMap0);
      typeBuilder0.setBaseType(dStructType0);
      String string0 = "";
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.stringList("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      DStructType dStructType0 = typeBuilder0.getType();
      assertNull(dStructType0);
      
      typeBuilder0.setBaseType((DStructType) null);
      DStructType dStructType1 = typeBuilder0.getType();
      assertNull(dStructType1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.getType();
      boolean boolean0 = typeBuilder0.fieldNameExists("org.dnal.core.nrule.ValidationScorer$1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setPackageName((String) null);
      typeBuilder0.setPackageName("");
      typeBuilder0.setAmBuildingEnum(true);
      boolean boolean0 = typeBuilder0.fieldNameExists("ooc|Cz[QnT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      String string0 = "x=X";
      typeBuilder0.setPackageName("x=X");
      typeBuilder0.start("x=X");
      typeBuilder_Inner0.currentFieldName = "x=X";
      String string1 = "aQux`1";
      typeBuilder_Inner0.optional = true;
      String string2 = "";
      boolean boolean0 = false;
      Shape shape0 = Shape.MAP;
      typeBuilder0.getType();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.integer("#cz:Pdz<!oS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: #cz:Pdz<!oS
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      World world0 = new World();
      TypeBuilder typeBuilder0 = new TypeBuilder((DTypeRegistry) null, world0);
      typeBuilder0.setPackageName("org.dnal.core.fluent.type.TypeBuilder$InnerNumber");
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      String string0 = "q<8";
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("q<8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: q<8
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: 
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      // Undeclared exception!
      try { 
        typeBuilder_Inner0.longInteger(";xm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name: ;xm
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
      String string0 = null;
      TypeBuilder.Inner typeBuilder_Inner1 = typeBuilder0.start((String) null);
      // Undeclared exception!
      try { 
        typeBuilder_Inner1.number(" +_UQA#umXg;-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid field name:  +_UQA#umXg;-
         //
         verifyException("org.dnal.core.fluent.type.TypeBuilder$Inner", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.start("/U*<-{9Zm}{,k:");
      assertNotNull(typeBuilder_Inner0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setPackageName("");
      String string0 = typeBuilder0.getPackageName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.setAmBuildingEnum(true);
      typeBuilder0.setPackageName("ANY_SHAPE");
      String string0 = typeBuilder0.getPackageName();
      assertEquals("ANY_SHAPE", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      World world0 = new World();
      TypeBuilder typeBuilder0 = new TypeBuilder((DTypeRegistry) null, world0);
      TypeBuilder.Inner typeBuilder_Inner0 = typeBuilder0.new Inner();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      String string0 = "";
      Shape shape0 = Shape.LONG;
      TypeBuilder typeBuilder0 = new TypeBuilder();
      typeBuilder0.getType();
      DType dType0 = new DType(shape0, "", (DType) null);
      dTypeRegistry0.getChildTypes((DType) null);
      // Undeclared exception!
      try { 
        dTypeRegistry0.add("", dType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // name or type were null
         //
         verifyException("org.dnal.core.DTypeRegistry", e);
      }
  }
}
