/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:19:50 GMT 2022
 */

package org.dnal.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.dnal.core.DListType;
import org.dnal.core.DType;
import org.dnal.core.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DListType_ESTest extends DListType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DListType dListType0 = new DListType(shape0, "", dType0, dType0);
      DListType dListType1 = new DListType(shape0, "org.dnal.core.DListType", dListType0, dListType0);
      DType dType1 = dListType1.getElementType();
      assertSame(dListType0, dType1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "W[0`nk/!=5N", dType0);
      DListType dListType0 = new DListType(shape0, "", dType1, dType1);
      DType dType2 = dListType0.getElementType();
      assertEquals("W[0`nk/!=5N", dType2.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Shape shape0 = Shape.LIST;
      Shape shape1 = Shape.ANY;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, "W[0`nk/!=5N", dType0);
      DListType dListType0 = new DListType(shape1, "", dType1, dType1);
      DListType dListType1 = new DListType(shape0, "W[0`nk/!=5N", dListType0, dListType0);
      DType dType2 = dListType1.getElementType();
      assertNotSame(dListType1, dType2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shape shape0 = Shape.STRUCT;
      DType dType0 = mock(DType.class, new ViolatedAssumptionAnswer());
      DType dType1 = new DType(shape0, ";N_4@xJ08", dType0);
      DListType dListType0 = new DListType(shape0, ";N_4@xJ08", dType1, dType1);
      DType dType2 = dListType0.getElementType();
      assertSame(dType2, dType1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shape shape0 = Shape.STRING;
      DType dType0 = new DType(shape0, "**:#O*2V%Bv`w?SA.j", (DType) null);
      dType0.setBitIndex(1093);
      DListType dListType0 = new DListType(shape0, "**:#O*2V%Bv`w?SA.j", dType0, dType0);
      DType dType1 = dListType0.getElementType();
      assertEquals("**:#O*2V%Bv`w?SA.j", dType1.getCompleteName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Shape shape0 = Shape.LONG;
      DListType dListType0 = new DListType(shape0, "", (DType) null, (DType) null);
      dListType0.setBitIndex((-1));
      DListType dListType1 = new DListType(shape0, "", (DType) null, dListType0);
      DType dType0 = dListType1.getElementType();
      assertSame(dListType0, dType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shape shape0 = Shape.MAP;
      DListType dListType0 = new DListType(shape0, "", (DType) null, (DType) null);
      DType dType0 = dListType0.getElementType();
      assertNull(dType0);
  }
}
