/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:08:08 GMT 2022
 */

package org.dnal.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import org.dnal.core.util.TextFileReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextFileReader_ESTest extends TextFileReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      List<String> list0 = textFileReader0.readFile("\uFFFD\n");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("r5S1cZbuW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      List<String> list0 = textFileReader0.readFile("r5S1cZbuW");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      List<String> list0 = textFileReader0.ReadFileStream(sequenceInputStream0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = textFileReader0.ReadFileStream(byteArrayInputStream0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      // Undeclared exception!
      try { 
        textFileReader0.readFileAsSingleString(")h)_1EPqq+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.util.TextFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        textFileReader0.ReadFileStream(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-265), 1);
      // Undeclared exception!
      try { 
        textFileReader0.ReadFileStream(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        textFileReader0.ReadFileStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("r5S1cZbuW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = textFileReader0.readFileAsSingleString("r5S1cZbuW");
      assertEquals("\u0000\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      // Undeclared exception!
      try { 
        textFileReader0.ReadFileStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextFileReader textFileReader0 = new TextFileReader();
      // Undeclared exception!
      try { 
        textFileReader0.readFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
