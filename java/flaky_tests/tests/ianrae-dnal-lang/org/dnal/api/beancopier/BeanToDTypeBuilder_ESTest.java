/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:44:10 GMT 2022
 */

package org.dnal.api.beancopier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Date;
import org.dnal.api.beancopier.BeanToDTypeBuilder;
import org.dnal.api.beancopier.DnalTypeDiscoverer;
import org.dnal.api.beancopier.FieldInfo;
import org.dnal.compiler.et.XErrorTracker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanToDTypeBuilder_ESTest extends BeanToDTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      String string0 = beanToDTypeBuilder0.generateListType("!\"h3_aX+d28ZD", "|8:&GfX#>UPG");
      assertEquals(" type !\"h3_aX+d28ZD |8:&GfX#>UPG end", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      Class<Date> class0 = Date.class;
      String string0 = beanToDTypeBuilder0.getPrimitive(class0);
      assertEquals("date", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      DnalTypeDiscoverer dnalTypeDiscoverer0 = new DnalTypeDiscoverer(xErrorTracker0);
      // Undeclared exception!
      try { 
        beanToDTypeBuilder0.generateStructType((FieldInfo) null, dnalTypeDiscoverer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.BeanToDTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        beanToDTypeBuilder0.generateEnum(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.BeanToDTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      Class<Date> class0 = Date.class;
      FieldInfo fieldInfo0 = new FieldInfo(class0, "t,__9EHeFyPI>o$!zI&");
      DnalTypeDiscoverer dnalTypeDiscoverer0 = new DnalTypeDiscoverer(xErrorTracker0);
      String string0 = beanToDTypeBuilder0.generateStructType(fieldInfo0, dnalTypeDiscoverer0);
      assertEquals("type null struct {  date int optional, hours int optional, seconds int optional, month int optional, timezoneOffset int optional, year int optional, minutes int optional, time long optional, day int optional } end", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        beanToDTypeBuilder0.getListElementType((Method) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ListTypeFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      BeanToDTypeBuilder beanToDTypeBuilder0 = new BeanToDTypeBuilder(xErrorTracker0);
      Class<Object> class0 = Object.class;
      String string0 = beanToDTypeBuilder0.getPrimitive(class0);
      assertNull(string0);
  }
}
