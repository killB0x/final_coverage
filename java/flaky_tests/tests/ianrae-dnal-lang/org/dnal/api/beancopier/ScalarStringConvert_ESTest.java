/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:27:49 GMT 2022
 */

package org.dnal.api.beancopier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dnal.api.CompilerOptions;
import org.dnal.api.Transaction;
import org.dnal.api.beancopier.ScalarStringConvert;
import org.dnal.api.impl.CompilerContext;
import org.dnal.api.impl.DataSetImpl;
import org.dnal.compiler.impoter.DefaultImportLoader;
import org.dnal.compiler.impoter.MockImportLoader;
import org.dnal.core.DListType;
import org.dnal.core.DMapType;
import org.dnal.core.DType;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.Shape;
import org.dnal.core.ValidationState;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScalarStringConvert_ESTest extends ScalarStringConvert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Object object0 = new Object();
      DValueImpl dValueImpl0 = new DValueImpl((DType) null, object0);
      String string0 = scalarStringConvert0.toString((DValue) dValueImpl0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.STRING;
      DType dType0 = new DType(shape0, (String) null, (DType) null);
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(1169);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("BP{g+lePX>bO+(m'Kd", integer0, mockImportLoader0, "JDr(Y!SlaJ9SA", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Transaction transaction0 = dataSetImpl0.createTransaction();
      DValue dValue0 = scalarStringConvert0.fromString("..hLrE^1", dType0, transaction0);
      assertEquals(ValidationState.UNKNOWN, dValue0.getValState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.ENUM;
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("+ee", (Integer) null, defaultImportLoader0, "+ee", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      DType dType0 = new DType(shape0, "+ee", (DType) null);
      Transaction transaction0 = dataSetImpl0.createTransaction();
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("+ee", dType0, transaction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.dnal.core.DType cannot be cast to class org.dnal.core.DStructType (org.dnal.core.DType and org.dnal.core.DStructType are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @437a40e9)
         //
         verifyException("org.dnal.core.xbuilder.XEnumValueBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.ENUM;
      DListType dListType0 = new DListType(shape0, "bx~'xhn", (DType) null, (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("bx~'xhn", dListType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.STRUCT;
      DListType dListType0 = new DListType(shape0, "bx~'xhn", (DType) null, (DType) null);
      DValue dValue0 = scalarStringConvert0.fromString("bx~'xhn", dListType0, (Transaction) null);
      assertNull(dValue0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.LIST;
      DMapType dMapType0 = new DMapType(shape0, "<g,(+lLz|Q'4q*rxZ", (DType) null, (DType) null);
      DValue dValue0 = scalarStringConvert0.fromString("<g,(+lLz|Q'4q*rxZ", dMapType0, (Transaction) null);
      assertNull(dValue0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.DATE;
      DMapType dMapType0 = new DMapType(shape0, "<g,(+lLz|Q'4q*rxZ", (DType) null, (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("<g,(+lLz|Q'4q*rxZ", dMapType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.BOOLEAN;
      DMapType dMapType0 = new DMapType(shape0, "", (DType) null, (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("", dMapType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.NUMBER;
      DMapType dMapType0 = new DMapType(shape0, "", (DType) null, (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("", dMapType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.LONG;
      DType dType0 = new DType(shape0, "", (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("", dType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.ANY;
      DListType dListType0 = new DListType(shape0, "bx~'xhn", (DType) null, (DType) null);
      DValue dValue0 = scalarStringConvert0.fromString("bx~'xhn", dListType0, (Transaction) null);
      assertNull(dValue0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      Shape shape0 = Shape.INTEGER;
      DType dType0 = new DType(shape0, "", (DType) null);
      // Undeclared exception!
      try { 
        scalarStringConvert0.fromString("", dType0, (Transaction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScalarStringConvert scalarStringConvert0 = new ScalarStringConvert();
      // Undeclared exception!
      try { 
        scalarStringConvert0.toString((DValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.beancopier.ScalarStringConvert", e);
      }
  }
}
