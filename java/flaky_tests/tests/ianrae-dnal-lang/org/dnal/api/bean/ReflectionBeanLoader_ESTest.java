/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 02:45:21 GMT 2022
 */

package org.dnal.api.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dnal.api.CompilerOptions;
import org.dnal.api.DataSet;
import org.dnal.api.bean.FieldConverter;
import org.dnal.api.bean.ReflectionBeanLoader;
import org.dnal.api.impl.CompilerContext;
import org.dnal.api.impl.DataSetImpl;
import org.dnal.compiler.et.XErrorTracker;
import org.dnal.compiler.impoter.MockImportLoader;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.DValue;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectionBeanLoader_ESTest extends ReflectionBeanLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("FMlc47V", integer0, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      FieldConverter fieldConverter0 = mock(FieldConverter.class, new ViolatedAssumptionAnswer());
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader("HiSr7<@HB&Vs", dataSetImpl0, (XErrorTracker) null, fieldConverter0);
      reflectionBeanLoader0.attach(dTypeRegistry0, (World) null, compilerContext0);
      assertEquals(0, dTypeRegistry0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer((-1431));
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      FieldConverter fieldConverter0 = mock(FieldConverter.class, new ViolatedAssumptionAnswer());
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader("", dataSetImpl0, (XErrorTracker) null, fieldConverter0);
      MockDate mockDate0 = new MockDate((-743), (-1431), (int) compilerContext0.runawayCounter, (-743), 1, 1);
      // Undeclared exception!
      try { 
        reflectionBeanLoader0.createDValue(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.bean.BeanMethodBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader("'Cn-QM'rhYYZh7jQ", (DataSet) null, xErrorTracker0, (FieldConverter) null);
      Class<?> class0 = reflectionBeanLoader0.willLoad();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader("2R-?F2)q6&9I4", (DataSet) null, (XErrorTracker) null, (FieldConverter) null);
      Object object0 = reflectionBeanLoader0.create((DValue) null);
      assertNull(object0);
  }
}
