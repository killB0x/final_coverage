/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 04:21:41 GMT 2022
 */

package org.dnal.api.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import org.dnal.api.impl.Internals;
import org.dnal.core.DType;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.Shape;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Internals_ESTest extends Internals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Internals internals0 = new Internals(dTypeRegistry0, world0);
      World world1 = internals0.getWorld();
      assertFalse(World.debug);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Internals internals0 = new Internals((DTypeRegistry) null, (World) null);
      DTypeRegistry dTypeRegistry0 = internals0.getRegistry();
      assertNull(dTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Shape shape0 = Shape.NUMBER;
      DType dType0 = new DType(shape0, "LIST_ANY_SHAPE", (DType) null);
      dTypeRegistry0.add("LIST_ANY_SHAPE", dType0);
      Internals internals0 = new Internals(dTypeRegistry0, world0);
      DTypeRegistry dTypeRegistry1 = internals0.getRegistry();
      assertSame(dTypeRegistry0, dTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Internals internals0 = new Internals((DTypeRegistry) null, (World) null);
      World world0 = internals0.getWorld();
      assertNull(world0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Internals internals0 = new Internals(dTypeRegistry0, world0);
      DTypeRegistry dTypeRegistry1 = internals0.getRegistry();
      assertEquals(0, dTypeRegistry1.size());
  }
}
