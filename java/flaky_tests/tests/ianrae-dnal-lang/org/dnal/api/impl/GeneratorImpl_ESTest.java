/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:55:44 GMT 2022
 */

package org.dnal.api.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dnal.api.CompilerOptions;
import org.dnal.api.impl.CompilerContext;
import org.dnal.api.impl.GeneratorImpl;
import org.dnal.compiler.et.XErrorTracker;
import org.dnal.compiler.generate.DNALTypeGenerator;
import org.dnal.compiler.generate.SimpleFormatOutputGenerator;
import org.dnal.compiler.impoter.DefaultImportLoader;
import org.dnal.compiler.impoter.MockImportLoader;
import org.dnal.compiler.parser.error.LineLocator;
import org.dnal.core.DMapType;
import org.dnal.core.DType;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.DValue;
import org.dnal.core.DValueImpl;
import org.dnal.core.DValueProxy;
import org.dnal.core.NewErrorMessage;
import org.dnal.core.Shape;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeneratorImpl_ESTest extends GeneratorImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      World world0 = new World();
      Integer integer0 = new Integer(3092);
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      LineLocator lineLocator0 = new LineLocator("Vh?(");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("Vh?(", integer0, defaultImportLoader0, "Vh?(", compilerOptions0);
      GeneratorImpl generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, world0, compilerContext0, lineLocator0);
      defaultImportLoader0.importPackage(" %s", compilerContext0);
      List<NewErrorMessage> list0 = generatorImpl0.getErrors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("4", (Integer) null, mockImportLoader0, "4", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("4");
      GeneratorImpl generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, (World) null, compilerContext0, lineLocator0);
      generatorImpl0.context = null;
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      // Undeclared exception!
      try { 
        generatorImpl0.generateValues(simpleFormatOutputGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.GeneratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("4", (Integer) null, mockImportLoader0, "4", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("4");
      GeneratorImpl generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      Shape shape0 = Shape.LONG;
      generatorImpl0.context = null;
      DMapType dMapType0 = new DMapType(shape0, "4", (DType) null, (DType) null);
      DValueImpl dValueImpl0 = new DValueImpl(dMapType0, "4");
      DValueProxy dValueProxy0 = new DValueProxy(dValueImpl0);
      // Undeclared exception!
      try { 
        generatorImpl0.generateValue(simpleFormatOutputGenerator0, dValueProxy0, "4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.GeneratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("4", (Integer) null, mockImportLoader0, "4", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("4");
      GeneratorImpl generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      generatorImpl0.context = null;
      // Undeclared exception!
      try { 
        generatorImpl0.generateTypes(simpleFormatOutputGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.GeneratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      World world0 = new World();
      GeneratorImpl generatorImpl0 = null;
      try {
        generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, world0, (CompilerContext) null, (LineLocator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.GeneratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      boolean boolean0 = generatorImpl0.generateValue(simpleFormatOutputGenerator0, (DValue) null, "nu]Vll");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      compilerContext0.et = xErrorTracker0;
      boolean boolean0 = generatorImpl0.generateValue(simpleFormatOutputGenerator0, (DValue) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      boolean boolean0 = generatorImpl0.generateValues(simpleFormatOutputGenerator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      SimpleFormatOutputGenerator simpleFormatOutputGenerator0 = new SimpleFormatOutputGenerator();
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      compilerContext0.et = xErrorTracker0;
      World world0 = new World();
      generatorImpl0.world = world0;
      boolean boolean0 = generatorImpl0.generateValues(simpleFormatOutputGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      DNALTypeGenerator dNALTypeGenerator0 = new DNALTypeGenerator();
      boolean boolean0 = generatorImpl0.generateTypes(dNALTypeGenerator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      GeneratorImpl generatorImpl0 = new GeneratorImpl(dTypeRegistry0, (World) null, compilerContext0, lineLocator0);
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      compilerContext0.et = xErrorTracker0;
      DNALTypeGenerator dNALTypeGenerator0 = new DNALTypeGenerator();
      boolean boolean0 = generatorImpl0.generateTypes(dNALTypeGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", (Integer) null, mockImportLoader0, "", compilerOptions0);
      compilerContext0.errL = null;
      GeneratorImpl generatorImpl0 = new GeneratorImpl((DTypeRegistry) null, (World) null, compilerContext0, (LineLocator) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1298);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("nu]Vll", integer0, mockImportLoader0, "nu]Vll", compilerOptions0);
      LineLocator lineLocator0 = new LineLocator("nu]Vll");
      GeneratorImpl generatorImpl0 = new GeneratorImpl(compilerContext0.registry, (World) null, compilerContext0, lineLocator0);
      List<NewErrorMessage> list0 = generatorImpl0.getErrors();
      assertTrue(list0.isEmpty());
  }
}
