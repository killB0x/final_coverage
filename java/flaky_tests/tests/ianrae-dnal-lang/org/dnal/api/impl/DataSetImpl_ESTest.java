/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 03:25:51 GMT 2022
 */

package org.dnal.api.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dnal.api.BeanLoader;
import org.dnal.api.CompilerOptions;
import org.dnal.api.Generator;
import org.dnal.api.Transaction;
import org.dnal.api.TypeFilter;
import org.dnal.api.bean.FieldConverter;
import org.dnal.api.bean.ReflectionBeanLoader;
import org.dnal.api.impl.CompilerContext;
import org.dnal.api.impl.DataSetImpl;
import org.dnal.api.impl.Internals;
import org.dnal.compiler.dnalgenerate.ViaFinder;
import org.dnal.compiler.et.XErrorTracker;
import org.dnal.compiler.impoter.DefaultImportLoader;
import org.dnal.compiler.impoter.ImportLoader;
import org.dnal.compiler.impoter.MockImportLoader;
import org.dnal.core.DType;
import org.dnal.core.DTypeRegistry;
import org.dnal.core.DValue;
import org.dnal.core.Shape;
import org.dnal.core.repository.World;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataSetImpl_ESTest extends DataSetImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("org.dnal.api.impl.DataSetImpl", (Integer) null, defaultImportLoader0, "org.dnal.api.impl.DataSetImpl", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Shape shape0 = Shape.MAP;
      DType dType0 = new DType(shape0, "org.dnal.api.impl.DataSetImpl", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl", dType0);
      DataSetImpl dataSetImpl1 = dataSetImpl0.cloneEmptyDataSet();
      assertNotSame(dataSetImpl1, dataSetImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("org.dnal.api.impl.DataSetImpl", (Integer) null, defaultImportLoader0, "org.dnal.api.impl.DataSetImpl", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Shape shape0 = Shape.MAP;
      DType dType0 = new DType(shape0, "org.dnal.api.impl.DataSetImpl", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl", dType0);
      DataSetImpl dataSetImpl1 = dataSetImpl0.cloneDataSet();
      assertNotSame(dataSetImpl1, dataSetImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(1499);
      Shape shape0 = Shape.MAP;
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("org.dnal.api.impl.DataSetImpl$1", integer0, mockImportLoader0, "4h^yR~Ew5fW7G<ULU:e", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      DType dType0 = new DType(shape0, "O", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl$1", dType0);
      DType dType1 = dataSetImpl0.getType("org.dnal.api.impl.DataSetImpl$1");
      assertTrue(dType1.isMapShape());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "NUMBER", (DType) null);
      dTypeRegistry0.add("NUMBER", dType0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      DType dType1 = dataSetImpl0.getType("NUMBER");
      assertFalse(dType1.hasRules());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      CompilerContext compilerContext0 = dataSetImpl0.getCompilerContext();
      assertNull(compilerContext0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.registerBeanLoader((BeanLoader<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.getValue(">aW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl((DTypeRegistry) null, world0, (CompilerContext) null);
      TypeFilter typeFilter0 = TypeFilter.ALL;
      // Undeclared exception!
      try { 
        dataSetImpl0.getTypes(typeFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.getType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      XErrorTracker xErrorTracker0 = new XErrorTracker();
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader((String) null, dataSetImpl0, xErrorTracker0, (FieldConverter) null);
      dataSetImpl0.registerBeanLoader(reflectionBeanLoader0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        dataSetImpl0.getAsBean((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.getAllNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.createViaFinder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.DataSetImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.createTransaction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.TransactionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      // Undeclared exception!
      try { 
        dataSetImpl0.createGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.api.impl.GeneratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(104214);
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("<s9TCW[EX", integer0, defaultImportLoader0, "<s9TCW[EX", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      DValue dValue0 = dataSetImpl0.getValue("");
      assertNull(dValue0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      Shape shape0 = Shape.STRUCT;
      DType dType0 = new DType(shape0, "NUMBER", (DType) null);
      dTypeRegistry0.add("NUMBER", dType0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, (World) null, (CompilerContext) null);
      TypeFilter typeFilter0 = TypeFilter.STRUCT;
      List<DType> list0 = dataSetImpl0.getTypes(typeFilter0);
      assertTrue(list0.contains(dType0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Shape shape0 = Shape.STRING;
      DType dType0 = new DType(shape0, "org.dnal.api.impl.DataSetImpl$1", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl$1", dType0);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", (Integer) null, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      TypeFilter typeFilter0 = TypeFilter.STRUCT;
      List<DType> list0 = dataSetImpl0.getTypes(typeFilter0);
      assertFalse(list0.contains(dType0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      TypeFilter typeFilter0 = TypeFilter.ALL;
      List<DType> list0 = dataSetImpl0.getTypes(typeFilter0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Shape shape0 = Shape.STRING;
      DType dType0 = new DType(shape0, "org.dnal.api.impl.DataSetImpl$1", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl$1", dType0);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", (Integer) null, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      // Undeclared exception!
      try { 
        dataSetImpl0.cloneDataSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Shape shape0 = Shape.STRING;
      Integer integer0 = new Integer(1499);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("org.dnal.api.impl.DataSetImpl$1", integer0, mockImportLoader0, "4h^yR~Ew5fW7G<ULU:e", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      DType dType0 = new DType(shape0, "O", (DType) null);
      dTypeRegistry0.add("org.dnal.api.impl.DataSetImpl$1", dType0);
      // Undeclared exception!
      try { 
        dataSetImpl0.cloneEmptyDataSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dnal.core.repository.World", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      Class<Object> class0 = Object.class;
      Object object0 = dataSetImpl0.getAsBean("VXo", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, (CompilerContext) null);
      Object object0 = dataSetImpl0.getAsBean("Y", (Class<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(1499);
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("org.dnal.api.impl.DataSetImpl$1", integer0, mockImportLoader0, "4h^yR~Ew5fW7G<ULU:e", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      DType dType0 = dataSetImpl0.getType("4h^yR~Ew5fW7G<ULU:e");
      assertNull(dType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      CompilerContext compilerContext1 = dataSetImpl0.getCompilerContext();
      assertSame(compilerContext0, compilerContext1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      int int0 = dataSetImpl0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(104214);
      DefaultImportLoader defaultImportLoader0 = new DefaultImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("<s9TCW[EX", integer0, defaultImportLoader0, "<s9TCW[EX", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Generator generator0 = dataSetImpl0.createGenerator();
      assertNotNull(generator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Internals internals0 = dataSetImpl0.getInternals();
      assertNotNull(internals0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      ViaFinder viaFinder0 = dataSetImpl0.createViaFinder();
      assertNotNull(viaFinder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", (Integer) null, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      FieldConverter fieldConverter0 = mock(FieldConverter.class, new ViolatedAssumptionAnswer());
      ReflectionBeanLoader reflectionBeanLoader0 = new ReflectionBeanLoader("ehX#=6k<e25I)g*f:oV", dataSetImpl0, (XErrorTracker) null, fieldConverter0);
      dataSetImpl0.registerBeanLoader(reflectionBeanLoader0);
      Class<Object> class0 = Object.class;
      Object object0 = dataSetImpl0.getAsBean(">?}jYulF", class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      MockImportLoader mockImportLoader0 = new MockImportLoader();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", (Integer) null, mockImportLoader0, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      Transaction transaction0 = dataSetImpl0.createTransaction();
      assertNotNull(transaction0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DTypeRegistry dTypeRegistry0 = new DTypeRegistry();
      World world0 = new World();
      Integer integer0 = new Integer(0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CompilerContext compilerContext0 = new CompilerContext("", integer0, (ImportLoader) null, "", compilerOptions0);
      DataSetImpl dataSetImpl0 = new DataSetImpl(dTypeRegistry0, world0, compilerContext0);
      List<String> list0 = dataSetImpl0.getAllNames();
      assertEquals(0, list0.size());
  }
}
