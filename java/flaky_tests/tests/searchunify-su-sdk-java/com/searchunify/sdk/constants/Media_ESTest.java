/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:09:17 GMT 2022
 */

package com.searchunify.sdk.constants;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.searchunify.sdk.constants.Media;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Media_ESTest extends Media_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Media[] mediaArray0 = Media.values();
      assertEquals(2, mediaArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Media media0 = Media.valueOf("FORM_URLENCODED");
      assertEquals("application/x-www-form-urlencoded", media0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Media.fromValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.searchunify.sdk.constants.Media", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      try { 
        Media.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create DataType from [] value!
         //
         verifyException("com.searchunify.sdk.constants.Media", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Media media0 = Media.fromValue("application/json");
      assertEquals(Media.JSON, media0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Media media0 = Media.fromValue("application/x-www-form-urlencoded");
      assertEquals(Media.FORM_URLENCODED, media0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Media media0 = Media.JSON;
      String string0 = media0.toString();
      assertEquals("application/json", string0);
  }
}
