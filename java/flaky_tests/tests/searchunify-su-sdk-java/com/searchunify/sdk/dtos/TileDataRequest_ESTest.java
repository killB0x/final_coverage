/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 20:15:02 GMT 2022
 */

package com.searchunify.sdk.dtos;

import org.junit.Test;
import static org.junit.Assert.*;
import com.searchunify.sdk.dtos.TileDataRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TileDataRequest_ESTest extends TileDataRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      String string0 = tileDataRequest0.getUid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TileDataRequest tileDataRequest0 = new TileDataRequest("K[YY&LSSel41", "K[YY&LSSel41", "^oAv");
      String string0 = tileDataRequest0.getUid();
      assertEquals("K[YY&LSSel41", tileDataRequest0.getFrom());
      assertEquals("K[YY&LSSel41", tileDataRequest0.getTo());
      assertEquals("^oAv", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      tileDataRequest_TileDataRequestBuilder0.to("w08IN8H!IP-c{");
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      String string0 = tileDataRequest0.getTo();
      assertEquals("w08IN8H!IP-c{", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      tileDataRequest0.setTo("");
      String string0 = tileDataRequest0.getTo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      String string0 = tileDataRequest_TileDataRequestBuilder0.toString();
      assertEquals("TileDataRequest.TileDataRequestBuilder(from=null, to=null, uid=null)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder1 = tileDataRequest_TileDataRequestBuilder0.uid("&P)UdV6");
      assertSame(tileDataRequest_TileDataRequestBuilder1, tileDataRequest_TileDataRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      tileDataRequest_TileDataRequestBuilder0.from("I&P&Wwv+ySupX_O!");
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      String string0 = tileDataRequest0.getFrom();
      assertEquals("I&P&Wwv+ySupX_O!", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      tileDataRequest0.setUid("");
      assertNull(tileDataRequest0.getMethod());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      String string0 = tileDataRequest0.getFrom();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      tileDataRequest0.setFrom("");
      String string0 = tileDataRequest0.getFrom();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = TileDataRequest.builder();
      assertNotNull(tileDataRequest_TileDataRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TileDataRequest.TileDataRequestBuilder tileDataRequest_TileDataRequestBuilder0 = new TileDataRequest.TileDataRequestBuilder();
      TileDataRequest tileDataRequest0 = tileDataRequest_TileDataRequestBuilder0.build();
      String string0 = tileDataRequest0.getTo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TileDataRequest tileDataRequest0 = new TileDataRequest("", "", "");
      String string0 = tileDataRequest0.getUid();
      assertEquals("", string0);
  }
}
