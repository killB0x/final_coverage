/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 21:32:25 GMT 2022
 */

package com.github.quickhull3d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.quickhull3d.Face;
import com.github.quickhull3d.HalfEdge;
import com.github.quickhull3d.Vertex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HalfEdge_ESTest extends HalfEdge_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      Vertex vertex1 = halfEdge0.prev.tail();
      assertSame(vertex0, vertex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Face face0 = new Face();
      halfEdge0.face = face0;
      halfEdge0.setOpposite(halfEdge0);
      Face face1 = halfEdge0.oppositeFace();
      assertSame(face1, face0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      double double0 = halfEdge0.lengthSquared();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex(0.0, 0.0, (-1864.5158868396), (-1533));
      Face face0 = Face.createTriangle(vertex1, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(0);
      double double0 = halfEdge0.lengthSquared();
      assertEquals(3476419.49227726, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      double double0 = halfEdge0.length();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Vertex vertex0 = halfEdge0.head();
      assertNull(vertex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      Vertex vertex1 = halfEdge0.head();
      assertSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = new HalfEdge(vertex0, face0);
      HalfEdge halfEdge1 = halfEdge0.getPrev();
      assertNull(halfEdge1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      halfEdge0.setPrev(halfEdge0);
      HalfEdge halfEdge1 = halfEdge0.getPrev();
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge((-1533));
      halfEdge0.setOpposite(halfEdge0);
      HalfEdge halfEdge1 = halfEdge0.getOpposite();
      assertSame(halfEdge1, halfEdge0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex(0.0, 0.0, (-1864.5158868396), (-1533));
      Face face0 = Face.createTriangle(vertex1, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(0);
      halfEdge0.setOpposite(halfEdge0);
      HalfEdge halfEdge1 = halfEdge0.getOpposite();
      assertSame(halfEdge1, halfEdge0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge((-1533));
      halfEdge0.setOpposite(halfEdge0);
      HalfEdge halfEdge1 = new HalfEdge();
      halfEdge0.setPrev(halfEdge1);
      halfEdge0.getOpposite();
      assertEquals((-1.0), halfEdge0.length(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      HalfEdge halfEdge1 = halfEdge0.getNext();
      assertNull(halfEdge1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      HalfEdge halfEdge1 = halfEdge0.prev.getNext();
      assertSame(halfEdge1, halfEdge0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      HalfEdge halfEdge1 = new HalfEdge(vertex0, face0);
      halfEdge0.setNext(halfEdge1);
      HalfEdge halfEdge2 = halfEdge0.getNext();
      assertEquals((-1.0), halfEdge2.length(), 0.01);
      assertNotNull(halfEdge2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Face face0 = halfEdge0.getFace();
      assertNull(face0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = new Face();
      HalfEdge halfEdge0 = new HalfEdge(vertex0, face0);
      Face face1 = halfEdge0.getFace();
      assertEquals(0, face1.numVertices());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, 0.0);
      face0.numVerts = (-172);
      HalfEdge halfEdge0 = face0.getFirstEdge();
      Face face1 = halfEdge0.getFace();
      assertSame(face1, face0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      // Undeclared exception!
      try { 
        halfEdge0.setOpposite((HalfEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Vertex vertex0 = new Vertex((-2809.7), 2.220446049250313E-16, (-2809.7), 1520);
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge1 = face0.he0;
      halfEdge0.setPrev(halfEdge1);
      // Undeclared exception!
      try { 
        halfEdge0.lengthSquared();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Vertex vertex0 = new Vertex(0.0, 0.0, 0.0, 934);
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, 0.0);
      HalfEdge halfEdge1 = new HalfEdge(vertex0, face0);
      halfEdge0.setPrev(halfEdge1);
      // Undeclared exception!
      try { 
        halfEdge0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge((-1533));
      HalfEdge halfEdge1 = new HalfEdge();
      halfEdge0.setPrev(halfEdge1);
      double double0 = halfEdge0.lengthSquared();
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex(0.0, 0.0, 3322, 2);
      Face face0 = Face.createTriangle(vertex0, vertex1, vertex1, (double) 458);
      HalfEdge halfEdge0 = face0.he0;
      double double0 = halfEdge0.length();
      assertEquals(3322.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      double double0 = halfEdge0.length();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(0);
      String string0 = halfEdge0.getVertexString();
      assertEquals("0-0", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      // Undeclared exception!
      try { 
        halfEdge0.getVertexString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(0);
      halfEdge0.setOpposite(halfEdge0);
      Face face1 = halfEdge0.oppositeFace();
      assertSame(face1, face0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex(0.0, 0.0, 3322, 2);
      Face face0 = Face.createTriangle(vertex0, vertex1, vertex1, (double) 458);
      HalfEdge halfEdge0 = face0.he0;
      Face face1 = halfEdge0.oppositeFace();
      assertNull(face1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, 0.0);
      HalfEdge halfEdge0 = face0.getFirstEdge();
      Face face1 = halfEdge0.getFace();
      assertSame(face1, face0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HalfEdge halfEdge0 = new HalfEdge();
      Vertex vertex0 = halfEdge0.tail();
      assertNull(vertex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = new Vertex(0.0, 0.0, 3322, 2);
      Face face0 = Face.createTriangle(vertex0, vertex1, vertex1, (double) 458);
      HalfEdge halfEdge0 = face0.he0;
      HalfEdge halfEdge1 = halfEdge0.getNext();
      assertNotNull(halfEdge1);
      
      HalfEdge halfEdge2 = halfEdge1.getPrev();
      assertNotNull(halfEdge2);
      assertEquals(1.1035684E7, halfEdge1.lengthSquared(), 0.01);
      assertEquals(3322.0, halfEdge2.length(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(0);
      HalfEdge halfEdge1 = halfEdge0.getOpposite();
      assertNull(halfEdge1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getEdge(1697);
      HalfEdge halfEdge1 = halfEdge0.getPrev();
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
  }
}
