/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 21:31:14 GMT 2022
 */

package com.github.quickhull3d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.quickhull3d.Vector3d;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector3d_ESTest extends Vector3d_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      vector3d0.toString();
      assertEquals((-1747.78738125031), vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[7];
      mockRandom0.nextBytes(byteArray0);
      vector3d0.setRandom(0.0, (-439.255), mockRandom0);
      assertEquals((-175.702), vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d((-2405.3530462504), (-2405.3530462504), (-2405.3530462504));
      MockRandom mockRandom0 = new MockRandom(1);
      vector3d0.setRandom(3471.079, 0.0, mockRandom0);
      assertEquals(3471.079, vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.normalize();
      vector3d0.cross(vector3d0, vector3d0);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d1.cross(vector3d0, vector3d0);
      assertEquals(0.0, vector3d1.y, 0.01);
      assertEquals(0.0, vector3d1.x, 0.01);
      assertEquals(0.0, vector3d1.normSquared(), 0.01);
      assertEquals(0.0, vector3d1.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d0.cross(vector3d0, vector3d1);
      assertEquals(0.0, vector3d0.y, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set(1.0, 1178.743616, 1.0);
      vector3d0.normalize();
      vector3d0.normalize();
      assertEquals(8.48360293715095E-4, vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.normalize();
      double double0 = vector3d0.distanceSquared(vector3d0);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      double double0 = vector3d0.distance(vector3d0);
      assertEquals(1.0, vector3d0.z, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 1.0, 1.0);
      vector3d0.set((-4.440892098500626E-16), (-404.66478), (-1798.54813));
      double double0 = vector3d0.normSquared();
      assertEquals((-1798.54813), vector3d0.z, 0.01);
      assertEquals(3398528.960098945, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      double double0 = vector3d0.norm();
      assertEquals((-1747.78738125031), vector3d0.x, 0.01);
      assertEquals(1747.7876673262735, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      vector3d0.scale((-2140.670677958562), vector3d0);
      assertEquals(-0.0, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.scale((-2140.670677958562), vector3d0);
      assertEquals(-0.0, vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.scale(1315.99499);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      vector3d0.scale(1315.99499);
      assertEquals((-2300079.4373106277), vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 349.474);
      assertEquals(349.474, vector3d0.z, 0.01);
      
      vector3d0.sub(vector3d0);
      assertEquals(0.0, vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 1.0, 1.0);
      vector3d0.sub(vector3d0);
      assertEquals(0.0, vector3d0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d0.sub(vector3d1, vector3d1);
      assertEquals(0.0, vector3d1.z, 0.01);
      assertEquals(0.0, vector3d1.y, 0.01);
      assertEquals(0.0, vector3d1.x, 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.normSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      vector3d0.sub(vector3d0, vector3d0);
      assertEquals(0.0, vector3d0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d((-306.766), (-306.766), 476.3057379970414);
      Vector3d vector3d1 = new Vector3d((-306.766), 476.3057379970414, (-306.766));
      vector3d0.sub(vector3d1, vector3d0);
      assertEquals(783.0717379970414, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(2783.2826250116036, 2783.2826250116036, 0.0);
      vector3d0.add(vector3d0);
      assertEquals(5566.565250023207, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d0.add(vector3d1);
      assertEquals(0.0, vector3d0.norm(), 0.01);
      assertEquals(0.0, vector3d1.y, 0.01);
      assertEquals(0.0, vector3d1.z, 0.01);
      assertEquals(0.0, vector3d1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      vector3d0.add(vector3d0);
      assertEquals((-3495.57476250062), vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d((-306.766), (-306.766), 476.3057379970414);
      vector3d0.add(vector3d0, vector3d0);
      assertEquals((-613.532), vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d((-306.766), (-306.766), 476.3057379970414);
      Vector3d vector3d1 = new Vector3d((-306.766), 476.3057379970414, (-306.766));
      vector3d0.add(vector3d1, vector3d1);
      assertEquals(952.6114759940828, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 0.0);
      Vector3d vector3d1 = new Vector3d(2, 0.0, 0.0);
      vector3d0.sub(vector3d1);
      vector3d0.add(vector3d0, vector3d0);
      assertEquals((-4.0), vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d();
      vector3d0.add(vector3d1, vector3d0);
      assertEquals(0.0, vector3d0.norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 0.0);
      vector3d0.set(14.114303497830223, (double) 2, 0.0);
      double double0 = vector3d0.get(2);
      assertEquals(14.114303497830223, vector3d0.x, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set(vector3d0);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      double double0 = vector3d0.normSquared();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      MockRandom mockRandom0 = new MockRandom(0L);
      vector3d0.setRandom(0.0, (-439.255), mockRandom0);
      double double0 = vector3d0.norm();
      assertEquals((-87.851), vector3d0.z, 0.01);
      assertEquals(98.220403945667, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(2783.2826250116036, 2783.2826250116036, 0.0);
      double double0 = vector3d0.get(1);
      assertEquals(2783.2826250116036, double0, 0.01);
      assertEquals(1.5493324341382965E7, vector3d0.normSquared(), 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(2783.2826250116036, vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      double double0 = vector3d0.dot(vector3d0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d1.set((-990.49959172), 2.220446049250313E-16, 958.96074381462);
      vector3d0.set(0, 7953354.537618612);
      double double0 = vector3d1.dot(vector3d0);
      assertEquals(2.220446049250313E-16, vector3d1.y, 0.01);
      assertEquals((-7.877794422315644E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      double double0 = vector3d0.distanceSquared(vector3d0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      Vector3d vector3d1 = new Vector3d(0.0, 0.0, (-2065.9587864109));
      Vector3d vector3d2 = new Vector3d(vector3d0);
      double double0 = vector3d1.distanceSquared(vector3d2);
      assertEquals((-2065.9587864109), vector3d1.z, 0.01);
      assertEquals(0.0, vector3d1.x, 0.01);
      assertEquals(4268185.707148398, double0, 0.01);
      assertEquals(0.0, vector3d2.y, 0.01);
      assertEquals(0.0, vector3d1.y, 0.01);
      assertEquals(0.0, vector3d2.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set(2.220446049250313E-16, 1.0, 0.4212);
      Vector3d vector3d1 = new Vector3d(vector3d0);
      vector3d1.scale(0.4212, vector3d0);
      double double0 = vector3d1.distance(vector3d0);
      assertEquals(2.220446049250313E-16, vector3d0.x, 0.01);
      assertEquals(0.6280471934059682, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.sub((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.scale(0.0, (Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.dot((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.distance((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.cross((Vector3d) null, (Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.add((Vector3d) null, (Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.add((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3d vector3d0 = null;
      try {
        vector3d0 = new Vector3d((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set((-1747.78738125031), 0.0, 1.0);
      double double0 = vector3d0.get(0);
      assertEquals(1.0, vector3d0.z, 0.01);
      assertEquals((-1747.78738125031), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.set((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 0.0);
      vector3d0.normalize();
      vector3d0.normalize();
      assertEquals(Double.NaN, vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.normalize();
      double double0 = vector3d0.get(1);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.z = (double) 1;
      vector3d0.scale((-1589.7411851712304));
      vector3d0.normalize();
      assertEquals(-0.0, vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.set((-2816), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 0.0);
      vector3d0.set(2, (-431.9109207));
      assertEquals((-431.9109207), vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.set(1, (double) 1);
      assertEquals(1.0, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 1.0, 1.0);
      // Undeclared exception!
      try { 
        vector3d0.get(1019);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.sub((Vector3d) null, (Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      vector3d0.setZero();
      assertEquals(0.0, vector3d0.normSquared(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 1.0, 1.0);
      double double0 = vector3d0.dot(vector3d0);
      assertEquals(2.0, double0, 0.01);
      assertEquals(1.0, vector3d0.y, 0.01);
      assertEquals(1.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      double double0 = vector3d0.norm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d(0.0, 1.0, 1.0);
      vector3d0.scale(1799.17235027165);
      assertEquals(1799.17235027165, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.distanceSquared((Vector3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3d vector3d0 = new Vector3d();
      // Undeclared exception!
      try { 
        vector3d0.setRandom(0.0, 0.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }
}
