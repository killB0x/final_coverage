/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 21:30:04 GMT 2022
 */

package com.github.quickhull3d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.quickhull3d.Face;
import com.github.quickhull3d.FaceList;
import com.github.quickhull3d.HalfEdge;
import com.github.quickhull3d.Point3d;
import com.github.quickhull3d.Vector3d;
import com.github.quickhull3d.Vertex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Face_ESTest extends Face_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Point3d point3d0 = vertex0.pnt;
      assertNotNull(point3d0);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      
      face0.computeNormal((Vector3d) point3d0, (-169.204));
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, point3d0.normSquared(), 0.01);
      assertEquals(Double.NaN, point3d0.norm(), 0.01);
      assertEquals(Double.NaN, point3d0.y, 0.01);
      assertEquals(Double.NaN, point3d0.x, 0.01);
      assertEquals(Double.NaN, point3d0.z, 0.01);
      
      HalfEdge halfEdge0 = face0.getEdge(0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, halfEdge0.length(), 0.01);
      assertEquals(Double.NaN, halfEdge0.lengthSquared(), 0.01);
      
      double double0 = face0.areaSquared(halfEdge0, halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, halfEdge0.length(), 0.01);
      assertEquals(Double.NaN, halfEdge0.lengthSquared(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vertex vertex0 = new Vertex(0.0, 473.0, 0.0, 120);
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Point3d point3d0 = new Point3d();
      assertNotNull(point3d0);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      
      point3d0.normalize();
      assertEquals(Double.NaN, point3d0.normSquared(), 0.01);
      assertEquals(Double.NaN, point3d0.norm(), 0.01);
      assertEquals(Double.NaN, point3d0.y, 0.01);
      assertEquals(Double.NaN, point3d0.x, 0.01);
      assertEquals(Double.NaN, point3d0.z, 0.01);
      
      double double0 = face0.distanceToPlane(point3d0);
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, point3d0.normSquared(), 0.01);
      assertEquals(Double.NaN, point3d0.norm(), 0.01);
      assertEquals(Double.NaN, point3d0.y, 0.01);
      assertEquals(Double.NaN, point3d0.x, 0.01);
      assertEquals(Double.NaN, point3d0.z, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      Vertex[] vertexArray0 = new Vertex[1];
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      vertexArray0[0] = vertex0;
      Face face0 = Face.create(vertexArray0, intArray0);
      assertNotNull(face0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(5, face0.numVertices());
      
      FaceList faceList0 = new FaceList();
      assertNotNull(faceList0);
      assertTrue(faceList0.isEmpty());
      
      // Undeclared exception!
      try { 
        face0.triangulate(faceList0, (-1882.1911117981708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vertex vertex0 = new Vertex(1384.7, 1384.7, (-39.0), (-900));
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      int int0 = face0.numVertices();
      assertEquals(3, face0.numVertices());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNull(halfEdge0);
      assertEquals(0, face0.numVertices());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Vertex vertex1 = new Vertex(1384.7, (-630.91705), 1384.7, 1028);
      assertNotNull(vertex1);
      assertFalse(vertex1.equals((Object)vertex0));
      
      Face face0 = Face.createTriangle(vertex1, vertex0, vertex0);
      assertNotNull(face0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNotNull(halfEdge0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertEquals(2057.3877864857423, halfEdge0.length(), 0.01);
      assertEquals(4232844.503980703, halfEdge0.lengthSquared(), 0.01);
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      HalfEdge halfEdge1 = new HalfEdge();
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      
      halfEdge0.setPrev(halfEdge1);
      assertFalse(halfEdge0.equals((Object)halfEdge1));
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      
      HalfEdge halfEdge2 = face0.getFirstEdge();
      assertNotNull(halfEdge2);
      assertFalse(halfEdge2.equals((Object)halfEdge1));
      assertEquals(3, face0.numVertices());
      assertEquals((-1.0), halfEdge2.length(), 0.01);
      assertEquals((-1.0), halfEdge2.lengthSquared(), 0.01);
      assertSame(halfEdge2, halfEdge0);
      assertNotSame(halfEdge2, halfEdge1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getEdge(0);
      assertNull(halfEdge0);
      assertEquals(0, face0.numVertices());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vertex vertex0 = new Vertex(1384.7, 1384.7, (-39.0), (-900));
      assertNotNull(vertex0);
      
      Vertex vertex1 = new Vertex(1.0, (-1.0), 1694.5840923825, (-900));
      assertNotNull(vertex1);
      assertFalse(vertex1.equals((Object)vertex0));
      
      Face face0 = Face.createTriangle(vertex1, vertex0, vertex0, (-39.0));
      assertNotNull(face0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
      
      HalfEdge halfEdge0 = face0.getEdge(309);
      assertNotNull(halfEdge0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertEquals(6840103.985361657, halfEdge0.lengthSquared(), 0.01);
      assertEquals(2615.359245947229, halfEdge0.length(), 0.01);
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      HalfEdge halfEdge0 = new HalfEdge();
      assertNotNull(halfEdge0);
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      
      face0.he0 = halfEdge0;
      assertEquals(0, face0.numVertices());
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      assertEquals((-1.0), face0.he0.lengthSquared(), 0.01);
      assertEquals((-1.0), face0.he0.length(), 0.01);
      
      HalfEdge halfEdge1 = face0.getEdge(0);
      assertNotNull(halfEdge1);
      assertEquals(0, face0.numVertices());
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertSame(halfEdge1, halfEdge0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vertex vertex0 = new Vertex((-1.0), (-1.0), 1444.9517373315891, 2232);
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-1.0));
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Point3d point3d0 = face0.getCentroid();
      assertNotNull(point3d0);
      assertEquals(3, face0.numVertices());
      assertEquals(2087887.523217577, point3d0.normSquared(), 0.01);
      assertEquals(1444.9524293960603, point3d0.norm(), 0.01);
      assertEquals(1444.951737331589, point3d0.z, 0.01);
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals((-1.0), point3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Vertex vertex1 = new Vertex(1384.7, (-630.91705), 1384.7, 1028);
      assertNotNull(vertex1);
      assertFalse(vertex1.equals((Object)vertex0));
      
      Face face0 = Face.createTriangle(vertex1, vertex0, vertex0);
      assertNotNull(face0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex1);
      assertNotNull(halfEdge0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertEquals(4232844.503980703, halfEdge0.lengthSquared(), 0.01);
      assertEquals(2057.3877864857423, halfEdge0.length(), 0.01);
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      Face[] faceArray0 = new Face[9];
      faceArray0[6] = face0;
      HalfEdge halfEdge0 = new HalfEdge((Vertex) null, face0);
      assertNotNull(halfEdge0);
      assertEquals(0, face0.numVertices());
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      
      faceArray0[6].he0 = halfEdge0;
      assertEquals(0, face0.numVertices());
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      assertEquals((-1.0), faceArray0[6].he0.lengthSquared(), 0.01);
      assertEquals((-1.0), faceArray0[6].he0.length(), 0.01);
      
      HalfEdge halfEdge1 = face0.findEdge((Vertex) null, (Vertex) null);
      assertNotNull(halfEdge1);
      assertEquals(0, face0.numVertices());
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertSame(halfEdge1, halfEdge0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      face0.planeOffset = 2740.5706952775636;
      assertEquals(0, face0.numVertices());
      
      Point3d point3d0 = new Point3d();
      assertNotNull(point3d0);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      
      double double0 = face0.distanceToPlane(point3d0);
      assertEquals(0, face0.numVertices());
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals((-2740.5706952775636), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      double double0 = face0.areaSquared(halfEdge0, halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      halfEdge0.prev = halfEdge0;
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.prev.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.prev.length(), 0.01);
      
      halfEdge0.setOpposite(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      Face[] faceArray0 = new Face[1];
      // Undeclared exception!
      face0.mergeAdjacentFace(halfEdge0, faceArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      HalfEdge halfEdge0 = new HalfEdge();
      assertNotNull(halfEdge0);
      assertEquals((-1.0), halfEdge0.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge0.length(), 0.01);
      
      Face[] faceArray0 = new Face[0];
      // Undeclared exception!
      try { 
        face0.mergeAdjacentFace(halfEdge0, faceArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.getVertexString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.getVertexIndices((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vertex vertex0 = new Vertex((-39.0), (-39.0), (-39.0), 1370);
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-39.0));
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        face0.getVertexIndices(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.getEdge((-2145555232));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.findEdge((Vertex) null, (Vertex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.distanceToPlane((Point3d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      // Undeclared exception!
      try { 
        Face.createTriangle(vertex0, vertex0, vertex0, (double) 1060);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Face.createTriangle((Vertex) null, (Vertex) null, (Vertex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[7];
      Vertex[] vertexArray0 = new Vertex[5];
      // Undeclared exception!
      try { 
        Face.create(vertexArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[7];
      Vertex[] vertexArray0 = new Vertex[0];
      // Undeclared exception!
      try { 
        Face.create(vertexArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      Point3d point3d0 = new Point3d();
      assertNotNull(point3d0);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      
      // Undeclared exception!
      try { 
        face0.computeCentroid(point3d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      HalfEdge halfEdge1 = halfEdge0.prev;
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertNotSame(halfEdge1, halfEdge0);
      
      HalfEdge halfEdge2 = halfEdge0.next;
      assertNotNull(halfEdge2);
      assertFalse(halfEdge2.equals((Object)halfEdge1));
      assertFalse(halfEdge2.equals((Object)halfEdge0));
      assertEquals(0.0, halfEdge2.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge2.length(), 0.01);
      assertNotSame(halfEdge2, halfEdge1);
      assertNotSame(halfEdge2, halfEdge0);
      
      halfEdge1.setNext(halfEdge2);
      assertFalse(halfEdge0.equals((Object)halfEdge2));
      assertFalse(halfEdge0.equals((Object)halfEdge1));
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertFalse(halfEdge1.equals((Object)halfEdge2));
      assertFalse(halfEdge2.equals((Object)halfEdge1));
      assertFalse(halfEdge2.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge2.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge2.length(), 0.01);
      assertNotSame(halfEdge0, halfEdge2);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      assertNotSame(halfEdge1, halfEdge2);
      assertNotSame(halfEdge2, halfEdge1);
      assertNotSame(halfEdge2, halfEdge0);
      
      // Undeclared exception!
      face0.checkConsistency();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Vertex vertex1 = new Vertex(881.1216425769, 881.1216425769, 197.8599047, 1174);
      assertNotNull(vertex1);
      assertFalse(vertex1.equals((Object)vertex0));
      
      Face face0 = Face.createTriangle(vertex0, vertex1, vertex1, 881.1216425769);
      assertNotNull(face0);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
      
      Vector3d vector3d0 = new Vector3d(1174, 197.8599047, 2794.8246664954686);
      assertNotNull(vector3d0);
      assertEquals(9228469.4583394, vector3d0.normSquared(), 0.01);
      assertEquals(3037.839603787435, vector3d0.norm(), 0.01);
      assertEquals(1174.0, vector3d0.x, 0.01);
      assertEquals(2794.8246664954686, vector3d0.z, 0.01);
      assertEquals(197.8599047, vector3d0.y, 0.01);
      
      face0.computeNormal(vector3d0, Double.NaN);
      assertFalse(vertex0.equals((Object)vertex1));
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, vector3d0.norm(), 0.01);
      assertEquals(Double.NaN, vector3d0.normSquared(), 0.01);
      assertNotSame(vertex0, vertex1);
      assertNotSame(vertex1, vertex0);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
      assertEquals(Double.NaN, vector3d0.x, 0.01);
      assertEquals(Double.NaN, vector3d0.z, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vertex vertex0 = new Vertex((-39.0), (-39.0), (-39.0), 1370);
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-39.0));
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Vector3d vector3d0 = new Vector3d((-77.186405), 2153.75, (-3373.44726605));
      assertNotNull(vector3d0);
      assertEquals(4003.0917127186885, vector3d0.norm(), 0.01);
      assertEquals(1.6024743260437043E7, vector3d0.normSquared(), 0.01);
      assertEquals(2153.75, vector3d0.y, 0.01);
      assertEquals((-3373.44726605), vector3d0.z, 0.01);
      assertEquals((-77.186405), vector3d0.x, 0.01);
      
      // Undeclared exception!
      try { 
        face0.computeNormal(vector3d0, 2807.4574);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vertex vertex0 = new Vertex((-39.0), (-39.0), (-39.0), 1370);
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-39.0));
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Vector3d vector3d0 = face0.getNormal();
      assertNotNull(vector3d0);
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, vector3d0.normSquared(), 0.01);
      assertEquals(Double.NaN, vector3d0.norm(), 0.01);
      assertEquals(Double.NaN, vector3d0.z, 0.01);
      assertEquals(Double.NaN, vector3d0.x, 0.01);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
      
      face0.computeNormal(vector3d0);
      assertEquals(3, face0.numVertices());
      assertEquals(Double.NaN, vector3d0.normSquared(), 0.01);
      assertEquals(Double.NaN, vector3d0.norm(), 0.01);
      assertEquals(Double.NaN, vector3d0.z, 0.01);
      assertEquals(Double.NaN, vector3d0.x, 0.01);
      assertEquals(Double.NaN, vector3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      Vector3d vector3d0 = new Vector3d(0.0, 0.0, 0.0);
      assertNotNull(vector3d0);
      assertEquals(0.0, vector3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.normSquared(), 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
      
      Point3d point3d0 = new Point3d(vector3d0);
      assertNotNull(point3d0);
      assertEquals(0.0, vector3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      
      face0.computeCentroid(point3d0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, vector3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, vector3d0.z, 0.01);
      assertEquals(0.0, vector3d0.x, 0.01);
      assertEquals(0.0, vector3d0.y, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      int int0 = face0.numVertices();
      assertEquals(0, face0.numVertices());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      halfEdge0.setNext(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      halfEdge0.setOpposite(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 numVerts=3 should be 1
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getFirstEdge();
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      HalfEdge halfEdge1 = new HalfEdge(vertex0, face0);
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      
      halfEdge0.setOpposite(halfEdge1);
      assertFalse(halfEdge0.equals((Object)halfEdge1));
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 0 0: half edge 0-0 reflected by ?-0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[7];
      Vertex[] vertexArray0 = new Vertex[1];
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      vertexArray0[0] = vertex0;
      Face face0 = Face.create(vertexArray0, intArray0);
      assertNotNull(face0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getEdge(182);
      assertNotNull(halfEdge0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      HalfEdge halfEdge1 = new HalfEdge();
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      
      halfEdge0.setOpposite(halfEdge1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(halfEdge0.equals((Object)halfEdge1));
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals((-1.0), halfEdge1.lengthSquared(), 0.01);
      assertEquals((-1.0), halfEdge1.length(), 0.01);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      HalfEdge halfEdge1 = halfEdge0.next;
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertNotSame(halfEdge1, halfEdge0);
      
      halfEdge0.opposite = halfEdge1;
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.opposite.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.opposite.length(), 0.01);
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[7];
      Vertex[] vertexArray0 = new Vertex[1];
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      vertexArray0[0] = vertex0;
      Face face0 = Face.create(vertexArray0, intArray0);
      assertNotNull(face0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.getEdge(182);
      assertNotNull(halfEdge0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      halfEdge0.setOpposite(halfEdge0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, vertexArray0.length);
      assertEquals(7, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 0 0 0 0 0 0: unreflected half edge 0-0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.checkConsistency();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[1];
      Vertex[] vertexArray0 = new Vertex[2];
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      vertexArray0[0] = vertex0;
      // Undeclared exception!
      try { 
        Face.create(vertexArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 numVerts=2 should be 1
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      face0.numVerts = 1406;
      assertEquals(1406, face0.numVertices());
      
      // Undeclared exception!
      try { 
        face0.triangulate((FaceList) null, 374.62559589197394);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.HalfEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Face face0 = new Face();
      assertNotNull(face0);
      assertEquals(0, face0.numVertices());
      
      FaceList faceList0 = new FaceList();
      assertNotNull(faceList0);
      assertTrue(faceList0.isEmpty());
      
      face0.triangulate(faceList0, 0);
      assertEquals(0, face0.numVertices());
      assertTrue(faceList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      
      HalfEdge halfEdge1 = halfEdge0.next;
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertNotSame(halfEdge1, halfEdge0);
      
      halfEdge0.opposite = halfEdge1;
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge0.opposite.length(), 0.01);
      assertEquals(0.0, halfEdge0.opposite.lengthSquared(), 0.01);
      
      Face[] faceArray0 = new Face[2];
      // Undeclared exception!
      try { 
        face0.mergeAdjacentFace(halfEdge0, faceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      assertNotNull(face0);
      assertEquals(3, face0.numVertices());
      
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex0);
      assertNotNull(halfEdge0);
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      
      HalfEdge halfEdge1 = halfEdge0.getNext();
      assertNotNull(halfEdge1);
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      
      halfEdge0.setOpposite(halfEdge1);
      assertFalse(halfEdge0.equals((Object)halfEdge1));
      assertFalse(halfEdge1.equals((Object)halfEdge0));
      assertEquals(3, face0.numVertices());
      assertEquals(0.0, halfEdge0.length(), 0.01);
      assertEquals(0.0, halfEdge0.lengthSquared(), 0.01);
      assertEquals(0.0, halfEdge1.length(), 0.01);
      assertEquals(0.0, halfEdge1.lengthSquared(), 0.01);
      assertNotSame(halfEdge0, halfEdge1);
      assertNotSame(halfEdge1, halfEdge0);
      
      Face[] faceArray0 = new Face[1];
      // Undeclared exception!
      try { 
        face0.mergeAdjacentFace(halfEdge1, faceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      String string0 = face0.getVertexString();
      assertEquals("0 0 0", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vertex vertex0 = new Vertex((-39.0), (-39.0), (-39.0), 1370);
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-39.0));
      int[] intArray0 = new int[7];
      face0.getVertexIndices(intArray0);
      assertEquals(3, face0.numVertices());
      assertArrayEquals(new int[] {1370, 1370, 1370, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      // Undeclared exception!
      face0.getEdge((-2144821966));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vertex vertex0 = new Vertex(1384.7, 1384.7, (-39.0), (-900));
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      Vertex vertex1 = new Vertex(1.0, (-1.0), 1694.5840923825, (-900));
      HalfEdge halfEdge0 = face0.findEdge(vertex1, vertex0);
      assertNull(halfEdge0);
      assertEquals(3, face0.numVertices());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      Vertex vertex1 = new Vertex(1.0, (-900), 1.0, 1088);
      HalfEdge halfEdge0 = face0.findEdge(vertex0, vertex1);
      assertEquals(3, face0.numVertices());
      assertNull(halfEdge0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Face face0 = new Face();
      Vector3d vector3d0 = face0.getNormal();
      // Undeclared exception!
      try { 
        face0.computeNormal(vector3d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Face face0 = new Face();
      // Undeclared exception!
      try { 
        face0.areaSquared((HalfEdge) null, (HalfEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex[] vertexArray0 = new Vertex[8];
      vertexArray0[0] = vertex0;
      int[] intArray0 = new int[4];
      Face face0 = Face.create(vertexArray0, intArray0);
      FaceList faceList0 = new FaceList();
      // Undeclared exception!
      try { 
        face0.triangulate(faceList0, 2523.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getFirstEdge();
      HalfEdge halfEdge1 = halfEdge0.getNext();
      halfEdge0.setOpposite(halfEdge1);
      Face[] faceArray0 = new Face[1];
      // Undeclared exception!
      try { 
        face0.mergeAdjacentFace(halfEdge0, faceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Face face0 = new Face();
      Point3d point3d0 = face0.getCentroid();
      double double0 = face0.distanceToPlane(point3d0);
      assertEquals(0.0, double0, 0.01);
  }
}
