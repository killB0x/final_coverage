/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 21:28:08 GMT 2022
 */

package com.github.quickhull3d;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.quickhull3d.Face;
import com.github.quickhull3d.FaceList;
import com.github.quickhull3d.HalfEdge;
import com.github.quickhull3d.Point3d;
import com.github.quickhull3d.QuickHull3D;
import com.github.quickhull3d.Vector3d;
import com.github.quickhull3d.Vertex;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuickHull3D_ESTest extends QuickHull3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.initBuffers((-697));
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      
      boolean boolean0 = quickHull3D0.check((PrintStream) null, (double) (-146));
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertTrue(boolean0);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertNotNull(point3d0);
      
      Point3d point3d1 = new Point3d();
      assertEquals(0.0, point3d1.z, 0.01);
      assertEquals(0.0, point3d1.y, 0.01);
      assertEquals(0.0, point3d1.x, 0.01);
      assertEquals(0.0, point3d1.norm(), 0.01);
      assertEquals(0.0, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      point3d1.setRandom(8, 0.0, mockRandom0);
      assertEquals(6.4, point3d1.z, 0.01);
      assertEquals(8.0, point3d1.x, 0.01);
      assertEquals(7.2, point3d1.y, 0.01);
      assertEquals(12.521980673998822, point3d1.norm(), 0.01);
      assertEquals(156.8, point3d1.normSquared(), 0.01);
      assertNotSame(point3d1, point3d0);
      assertFalse(point3d1.equals((Object)point3d0));
      
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals((-3.6848526309993683E-9), point3d2.x, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(3.6848526309993683E-9, point3d2.norm(), 0.01);
      assertEquals(1.3578138912182967E-17, point3d2.normSquared(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      Point3d[] point3dArray0 = new Point3d[4];
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d1;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1.438849039914203E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      assertEquals(4, point3dArray0.length);
      
      boolean boolean0 = quickHull3D0.checkFaces(0.0, (PrintStream) null);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertFalse(boolean0);
      assertEquals(1.438849039914203E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.initBuffers((-1));
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      quickHull3D0.reindexFacesAndVertices();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      assertEquals((-1.0), point3d0.z, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals(1.4142135623730951, point3d0.norm(), 0.01);
      assertEquals(2.0, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      assertNotNull(vertex0);
      
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.0), (-0.6183973271589135), (-1.0));
      assertEquals((-1.0), point3d1.x, 0.01);
      assertEquals((-1.0), point3d1.z, 0.01);
      assertEquals((-0.6183973271589135), point3d1.y, 0.01);
      assertEquals(2.382415254237288, point3d1.normSquared(), 0.01);
      assertEquals(1.5435074519539218, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(483.573, point3d2.y, 0.01);
      assertEquals((-1.0), point3d2.x, 0.01);
      assertEquals(233843.846329, point3d2.normSquared(), 0.01);
      assertEquals(483.57403396894665, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[4] = point3d3;
      Point3d point3d4 = new Point3d((-1.0), (-1.0), 0.0);
      assertEquals(0.0, point3d4.z, 0.01);
      assertEquals((-1.0), point3d4.y, 0.01);
      assertEquals((-1.0), point3d4.x, 0.01);
      assertEquals(2.0, point3d4.normSquared(), 0.01);
      assertEquals(1.4142135623730951, point3d4.norm(), 0.01);
      assertNotNull(point3d4);
      assertFalse(point3d4.equals((Object)point3d1));
      assertFalse(point3d4.equals((Object)point3d3));
      assertFalse(point3d4.equals((Object)point3d2));
      assertFalse(point3d4.equals((Object)point3d0));
      
      point3dArray0[5] = point3d4;
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.setExplicitDistanceTolerance(0.0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      quickHull3D0.build(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals(6, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(6, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals((-1.0), point3d0.z, 0.01);
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(2.0, point3d0.normSquared(), 0.01);
      assertEquals(1.4142135623730951, point3d0.norm(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      assertNotNull(vertex0);
      
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.0), (-0.6183973271589135), (-1.0));
      assertEquals((-0.6183973271589135), point3d1.y, 0.01);
      assertEquals((-1.0), point3d1.x, 0.01);
      assertEquals((-1.0), point3d1.z, 0.01);
      assertEquals(2.382415254237288, point3d1.normSquared(), 0.01);
      assertEquals(1.5435074519539218, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      assertEquals(483.573, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals((-1.0), point3d2.x, 0.01);
      assertEquals(233843.846329, point3d2.normSquared(), 0.01);
      assertEquals(483.57403396894665, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d0);
      assertNotSame(point3d2, point3d1);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d1));
      
      point3dArray0[4] = point3d3;
      Point3d point3d4 = new Point3d((-1.0), (-1.0), 0.0);
      assertEquals(0.0, point3d4.z, 0.01);
      assertEquals((-1.0), point3d4.x, 0.01);
      assertEquals((-1.0), point3d4.y, 0.01);
      assertEquals(1.4142135623730951, point3d4.norm(), 0.01);
      assertEquals(2.0, point3d4.normSquared(), 0.01);
      assertNotNull(point3d4);
      assertFalse(point3d4.equals((Object)point3d0));
      assertFalse(point3d4.equals((Object)point3d3));
      assertFalse(point3d4.equals((Object)point3d2));
      assertFalse(point3d4.equals((Object)point3d1));
      
      point3dArray0[5] = point3d4;
      point3d4.set(0.0, 1.0, (-3775.409));
      assertEquals((-3775.409), point3d4.z, 0.01);
      assertEquals(0.0, point3d4.x, 0.01);
      assertEquals(1.0, point3d4.y, 0.01);
      assertEquals(1.4253714117281001E7, point3d4.normSquared(), 0.01);
      assertEquals(3775.40913243598, point3d4.norm(), 0.01);
      assertNotSame(point3d4, point3d0);
      assertNotSame(point3d4, point3d3);
      assertNotSame(point3d4, point3d2);
      assertNotSame(point3d4, point3d1);
      assertFalse(point3d4.equals((Object)point3d0));
      assertFalse(point3d4.equals((Object)point3d3));
      assertFalse(point3d4.equals((Object)point3d2));
      assertFalse(point3d4.equals((Object)point3d1));
      
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.setExplicitDistanceTolerance(0.0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      quickHull3D0.build(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(6, quickHull3D0.getNumFaces());
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals(6, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = (-1315);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals((-1315), quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      
      quickHull3D0.print((PrintStream) null);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals((-1315), quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      quickHull3D0.setHull(doubleArray0, 1, (int[][]) null, (-2309));
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(6.661338147750939E-16, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        quickHull3D0.createInitialSimplex();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input points appear to be coincident
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numPoints = (-1732);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("new face: ");
      assertNotNull(mockPrintStream0);
      
      quickHull3D0.printPoints(mockPrintStream0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      Point3d[] point3dArray0 = new Point3d[0];
      quickHull3D0.setPoints(point3dArray0, (-2));
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[6];
      quickHull3D0.setPoints(doubleArray0, (-1));
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      FaceList faceList0 = new FaceList();
      assertTrue(faceList0.isEmpty());
      assertNotNull(faceList0);
      
      quickHull3D0.resolveUnclaimedPoints(faceList0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertTrue(faceList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      Face face0 = new Face();
      assertEquals(0, face0.numVertices());
      assertNotNull(face0);
      
      quickHull3D0.deleteFacePoints(face0, face0);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, face0.numVertices());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.13103072967675), (-0.3333333333333333), 2.220446049250313E-16);
      assertEquals(2.220446049250313E-16, point3d0.z, 0.01);
      assertEquals((-41.13103072967675), point3d0.x, 0.01);
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals(41.13238140439627, point3d0.norm(), 0.01);
      assertEquals(1691.8727999967243, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, 2.220446049250313E-16, (-4.440892098500626E-16));
      assertEquals((-4.440892098500626E-16), point3d1.z, 0.01);
      assertEquals(2.220446049250313E-16, point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals(5168782.476790894, point3d1.normSquared(), 0.01);
      assertEquals(2273.495651368371, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertNotSame(point3d2, point3d0);
      assertNotSame(point3d2, point3d1);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3dArray0[0];
      point3dArray0[4] = point3d1;
      point3dArray0[5] = point3dArray0[2];
      Point3d point3d3 = new Point3d(2273.495651368371, (-1516.8843766502291), 2273.495651368371);
      assertEquals((-1516.8843766502291), point3d3.y, 0.01);
      assertEquals(2273.495651368371, point3d3.z, 0.01);
      assertEquals(2273.495651368371, point3d3.x, 0.01);
      assertEquals(3555.0672519246864, point3d3.norm(), 0.01);
      assertEquals(1.2638503165707342E7, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[6] = point3d3;
      point3dArray0[7] = point3dArray0[5];
      point3dArray0[8] = point3d1;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4.0393526386319575E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      quickHull3D0.computeMaxAndMin();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4.0393526386319575E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(9, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 2;
      doubleArray0[7] = (-1.0);
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(2.6645352591003757E-15, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(16, doubleArray0.length);
      
      quickHull3D0.buildHull();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(8, quickHull3D0.getNumFaces());
      assertEquals(2.6645352591003757E-15, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.1), (-0.3333333333333333), (-0.4500144631906012));
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals((-41.1), point3d0.x, 0.01);
      assertEquals((-0.4500144631906012), point3d0.z, 0.01);
      assertEquals(41.103815201611056, point3d0.norm(), 0.01);
      assertEquals(1689.5236241281918, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, (-0.4500144631906012), (-0.3333333333333333));
      assertEquals((-0.4500144631906012), point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-0.3333333333333333), point3d1.z, 0.01);
      assertEquals(2273.495720342359, point3d1.norm(), 0.01);
      assertEquals(5168782.790415022, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      point3dArray0[2] = point3d0;
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3dArray0[1];
      point3dArray0[6] = point3dArray0[2];
      Point3d point3d3 = new Point3d((-0.11668112985726786), 0.0, (-0.4500144631906012));
      assertEquals((-0.4500144631906012), point3d3.z, 0.01);
      assertEquals((-0.11668112985726786), point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.21612750314549356, point3d3.normSquared(), 0.01);
      assertEquals(0.4648951528522249, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[7] = point3d3;
      point3dArray0[8] = point3dArray0[5];
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.5150518708227383E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      quickHull3D0.build(point3dArray0, 8);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.5150518708227383E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(9, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 4;
      doubleArray0[7] = (double) 1;
      quickHull3D0.build(doubleArray0, 4);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(3.9968028886505635E-15, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals((-1.0), point3d0.z, 0.01);
      assertEquals(1.4142135623730951, point3d0.norm(), 0.01);
      assertEquals(2.0, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      assertNotNull(vertex0);
      
      Point3d point3d1 = vertex0.pnt;
      assertEquals(0.0, point3d1.z, 0.01);
      assertEquals((-1.0), point3d1.x, 0.01);
      assertEquals(483.573, point3d1.y, 0.01);
      assertEquals(233843.846329, point3d1.normSquared(), 0.01);
      assertEquals(483.57403396894665, point3d1.norm(), 0.01);
      assertNotSame(point3d1, point3d0);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Point3d point3d2 = new Point3d((-1.0), (-0.6183973271589135), 0.0);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals((-0.6183973271589135), point3d2.y, 0.01);
      assertEquals((-1.0), point3d2.x, 0.01);
      assertEquals(1.3824152542372883, point3d2.normSquared(), 0.01);
      assertEquals(1.1757615635141712, point3d2.norm(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3dArray0[2];
      Point3d point3d3 = new Point3d(0.0, 0.0, 2.220446049250313E-16);
      assertEquals(2.220446049250313E-16, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(2.220446049250313E-16, point3d3.norm(), 0.01);
      assertEquals(4.930380657631324E-32, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d0));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3dArray0[2];
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      quickHull3D0.build(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(6, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[2] = 2452.786636060282;
      doubleArray0[4] = 2452.786636060282;
      doubleArray0[6] = 1962.2293088482256;
      quickHull3D0.build(doubleArray0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4.574875532382976E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(14, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      Vertex vertex0 = quickHull3D0.nextPointToAdd();
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNull(vertex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.1), (-0.3333333333333333), 2.220446049250313E-16);
      assertEquals(2.220446049250313E-16, point3d0.z, 0.01);
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals((-41.1), point3d0.x, 0.01);
      assertEquals(41.10135169445296, point3d0.norm(), 0.01);
      assertEquals(1689.3211111111111, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, 2.220446049250313E-16, (-0.3333333333333333));
      assertEquals(2.220446049250313E-16, point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-0.3333333333333333), point3d1.z, 0.01);
      assertEquals(5168782.587902005, point3d1.normSquared(), 0.01);
      assertEquals(2273.4956758045537, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      point3dArray0[2] = point3d0;
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d0));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3dArray0[1];
      point3d3.x = (-1612.55213313926);
      assertEquals(2600324.3820919776, point3d3.normSquared(), 0.01);
      assertEquals(1612.55213313926, point3d3.norm(), 0.01);
      
      point3dArray0[6] = point3d2;
      point3dArray0[7] = point3d3;
      Point3d point3d4 = new Point3d(2391.994352773285, 2.220446049250313E-16, (-0.9999999792600736));
      assertEquals((-0.9999999792600736), point3d4.z, 0.01);
      assertEquals(2391.994352773285, point3d4.x, 0.01);
      assertEquals(2.220446049250313E-16, point3d4.y, 0.01);
      assertEquals(2391.9945618038605, point3d4.norm(), 0.01);
      assertEquals(5721637.9836992435, point3d4.normSquared(), 0.01);
      assertNotNull(point3d4);
      assertFalse(point3d4.equals((Object)point3d1));
      assertFalse(point3d4.equals((Object)point3d0));
      assertFalse(point3d4.equals((Object)point3d3));
      assertFalse(point3d4.equals((Object)point3d2));
      
      point3dArray0[8] = point3d4;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1.5942765015392344E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(5, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      quickHull3D0.createInitialSimplex();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(9, quickHull3D0.getNumFaces());
      assertEquals(1.5942765015392344E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(9, point3dArray0.length);
      
      Vertex vertex1 = quickHull3D0.nextPointToAdd();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(9, quickHull3D0.getNumFaces());
      assertEquals(1.5942765015392344E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotSame(vertex1, vertex0);
      assertNotNull(vertex1);
      assertFalse(vertex1.equals((Object)vertex0));
      assertEquals(9, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[16];
      quickHull3D0.numVertices = (-1073);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals((-1073), quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      
      int int0 = quickHull3D0.getVertices(doubleArray0);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals((-1073), int0);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals((-1073), quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals((-1.0), point3d0.z, 0.01);
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals(1.4142135623730951, point3d0.norm(), 0.01);
      assertEquals(2.0, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      assertNotNull(vertex0);
      
      Point3d point3d1 = vertex0.pnt;
      assertEquals(0.0, point3d1.z, 0.01);
      assertEquals(483.573, point3d1.y, 0.01);
      assertEquals((-1.0), point3d1.x, 0.01);
      assertEquals(483.57403396894665, point3d1.norm(), 0.01);
      assertEquals(233843.846329, point3d1.normSquared(), 0.01);
      assertNotSame(point3d1, point3d0);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Point3d point3d2 = new Point3d((-1.0), (-0.6183973271589135), 0.0);
      assertEquals((-0.6183973271589135), point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals((-1.0), point3d2.x, 0.01);
      assertEquals(1.1757615635141712, point3d2.norm(), 0.01);
      assertEquals(1.3824152542372883, point3d2.normSquared(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3dArray0[2];
      Point3d point3d3 = new Point3d(0.0, 0.0, 2.220446049250313E-16);
      assertEquals(2.220446049250313E-16, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(4.930380657631324E-32, point3d3.normSquared(), 0.01);
      assertEquals(2.220446049250313E-16, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3dArray0[1];
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      Point3d[] point3dArray1 = quickHull3D0.getVertices();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotSame(point3dArray0, point3dArray1);
      assertNotSame(point3dArray1, point3dArray0);
      assertNotNull(point3dArray1);
      assertFalse(point3dArray1.equals((Object)point3dArray0));
      assertEquals(6, point3dArray0.length);
      assertEquals(4, point3dArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      int[] intArray0 = quickHull3D0.getVertexPointIndices();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.13103072967675), (-0.3333333333333333), 2.220446049250313E-16);
      assertEquals((-41.13103072967675), point3d0.x, 0.01);
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals(2.220446049250313E-16, point3d0.z, 0.01);
      assertEquals(1691.8727999967243, point3d0.normSquared(), 0.01);
      assertEquals(41.13238140439627, point3d0.norm(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, 2.220446049250313E-16, (-4.440892098500626E-16));
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-4.440892098500626E-16), point3d1.z, 0.01);
      assertEquals(2.220446049250313E-16, point3d1.y, 0.01);
      assertEquals(5168782.476790894, point3d1.normSquared(), 0.01);
      assertEquals(2273.495651368371, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d2;
      point3dArray0[4] = point3dArray0[0];
      point3dArray0[5] = point3dArray0[2];
      point3dArray0[6] = point3dArray0[0];
      point3dArray0[7] = point3d2;
      Point3d point3d3 = new Point3d(2391.994352773285, 2.220446049250313E-16, (-41.13103072967675));
      assertEquals(2.220446049250313E-16, point3d3.y, 0.01);
      assertEquals(2391.994352773285, point3d3.x, 0.01);
      assertEquals((-41.13103072967675), point3d3.z, 0.01);
      assertEquals(5723328.745388171, point3d3.normSquared(), 0.01);
      assertEquals(2392.347956587455, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[8] = point3d3;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(1.6210091381438663E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      int int0 = quickHull3D0.getNumVertices();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, int0);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(1.6210091381438663E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(9, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      int int0 = quickHull3D0.getNumFaces();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, int0);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      int[][] intArray0 = quickHull3D0.getFaces(1);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.13103072967675), (-0.3333333333333333), 2.220446049250313E-16);
      assertEquals(2.220446049250313E-16, point3d0.z, 0.01);
      assertEquals((-41.13103072967675), point3d0.x, 0.01);
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals(41.13238140439627, point3d0.norm(), 0.01);
      assertEquals(1691.8727999967243, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, 2.220446049250313E-16, (-4.440892098500626E-16));
      assertEquals(2.220446049250313E-16, point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-4.440892098500626E-16), point3d1.z, 0.01);
      assertEquals(2273.495651368371, point3d1.norm(), 0.01);
      assertEquals(5168782.476790894, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d2;
      point3dArray0[4] = point3d1;
      point3dArray0[5] = point3dArray0[0];
      point3dArray0[6] = point3dArray0[2];
      point3dArray0[7] = point3dArray0[4];
      Point3d point3d3 = new Point3d(2391.994352773285, 2.220446049250313E-16, (-41.13103072967675));
      assertEquals(2391.994352773285, point3d3.x, 0.01);
      assertEquals((-41.13103072967675), point3d3.z, 0.01);
      assertEquals(2.220446049250313E-16, point3d3.y, 0.01);
      assertEquals(2392.347956587455, point3d3.norm(), 0.01);
      assertEquals(5723328.745388171, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d1));
      
      point3dArray0[8] = point3d3;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.6210091381438663E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      double double0 = quickHull3D0.getDistanceTolerance();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1.6210091381438663E-12, double0, 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.6210091381438663E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(9, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.tolerance = (double) (byte) (-50);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-50.0), quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      
      double double0 = quickHull3D0.getDistanceTolerance();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-50.0), double0, 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-50.0), quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      boolean boolean0 = quickHull3D0.checkFaces((-657.4126), (PrintStream) null);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertTrue(boolean0);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals((-1.0), point3d0.x, 0.01);
      assertEquals((-1.0), point3d0.z, 0.01);
      assertEquals(2.0, point3d0.normSquared(), 0.01);
      assertEquals(1.4142135623730951, point3d0.norm(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      assertNotNull(vertex0);
      
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.0), (-0.6183973271589135), (-1.0));
      assertEquals((-1.0), point3d1.z, 0.01);
      assertEquals((-0.6183973271589135), point3d1.y, 0.01);
      assertEquals((-1.0), point3d1.x, 0.01);
      assertEquals(2.382415254237288, point3d1.normSquared(), 0.01);
      assertEquals(1.5435074519539218, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      assertEquals(483.573, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals((-1.0), point3d2.x, 0.01);
      assertEquals(233843.846329, point3d2.normSquared(), 0.01);
      assertEquals(483.57403396894665, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d0);
      assertNotSame(point3d2, point3d1);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      quickHull3D0.tolerance = (-1.0);
      assertEquals((-1.0), quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      
      boolean boolean0 = quickHull3D0.check((PrintStream) null);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertFalse(boolean0);
      assertEquals((-1.0), quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(6, point3dArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.faces = null;
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        quickHull3D0.triangulate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (double) 8;
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = 8.0;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1.199040866595169E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(18, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        quickHull3D0.setPoints((Point3d[]) null, 2057);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      Point3d[] point3dArray0 = new Point3d[0];
      // Undeclared exception!
      try { 
        quickHull3D0.setPoints(point3dArray0, 670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-979.0), (-1.5775662294928408), (-979.0));
      assertEquals((-979.0), point3d0.z, 0.01);
      assertEquals((-979.0), point3d0.x, 0.01);
      assertEquals((-1.5775662294928408), point3d0.y, 0.01);
      assertEquals(1916884.4887152086, point3d0.normSquared(), 0.01);
      assertEquals(1384.515976330793, point3d0.norm(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.5775662294928408), (-979.0), (-979.0));
      assertEquals((-979.0), point3d1.y, 0.01);
      assertEquals((-1.5775662294928408), point3d1.x, 0.01);
      assertEquals((-979.0), point3d1.z, 0.01);
      assertEquals(1384.515976330793, point3d1.norm(), 0.01);
      assertEquals(1916884.4887152086, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = new Point3d((-979.0), (-979.0), (-1.5775662294928408));
      assertEquals((-979.0), point3d2.y, 0.01);
      assertEquals((-979.0), point3d2.x, 0.01);
      assertEquals((-1.5775662294928408), point3d2.z, 0.01);
      assertEquals(1916884.4887152084, point3d2.normSquared(), 0.01);
      assertEquals(1384.5159763307927, point3d2.norm(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d0));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1.956435013994451E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      // Undeclared exception!
      try { 
        quickHull3D0.setPoints((double[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.setPoints((double[]) null, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.1), (-41.1), (-15.406036106670491));
      assertEquals((-41.1), point3d0.y, 0.01);
      assertEquals((-15.406036106670491), point3d0.z, 0.01);
      assertEquals((-41.1), point3d0.x, 0.01);
      assertEquals(60.13123937289198, point3d0.norm(), 0.01);
      assertEquals(3615.7659485200347, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d((-41.1), (-15.406036106670491), (-41.1));
      assertEquals((-15.406036106670491), point3d1.y, 0.01);
      assertEquals((-41.1), point3d1.x, 0.01);
      assertEquals((-41.1), point3d1.z, 0.01);
      assertEquals(3615.7659485200347, point3d1.normSquared(), 0.01);
      assertEquals(60.13123937289198, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d0;
      point3dArray0[3] = point3d0;
      Point3d point3d2 = new Point3d((-41.1), (-15.406036106670491), (-15.406036106670491));
      assertEquals((-41.1), point3d2.x, 0.01);
      assertEquals((-15.406036106670491), point3d2.y, 0.01);
      assertEquals((-15.406036106670491), point3d2.z, 0.01);
      assertEquals(2163.90189704007, point3d2.normSquared(), 0.01);
      assertEquals(46.51775894258095, point3d2.norm(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3d0;
      point3dArray0[6] = point3d0;
      point3dArray0[7] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d0));
      
      point3dArray0[8] = point3d3;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(8.213429936176909E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      double[] doubleArray0 = new double[3];
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        quickHull3D0.setHull(doubleArray0, (-1), intArray0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 numVerts=2 should be 1
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[20];
      int[][] intArray0 = new int[1][0];
      // Undeclared exception!
      quickHull3D0.setHull(doubleArray0, 51786, intArray0, 8);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-41.1), (-0.3333333333333333), (-0.4500144631906012));
      assertEquals((-41.1), point3d0.x, 0.01);
      assertEquals((-0.3333333333333333), point3d0.y, 0.01);
      assertEquals((-0.4500144631906012), point3d0.z, 0.01);
      assertEquals(41.103815201611056, point3d0.norm(), 0.01);
      assertEquals(1689.5236241281918, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2273.495651368371, (-0.4500144631906012), (-0.3333333333333333));
      assertEquals((-0.4500144631906012), point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-0.3333333333333333), point3d1.z, 0.01);
      assertEquals(2273.495720342359, point3d1.norm(), 0.01);
      assertEquals(5168782.790415022, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      point3dArray0[2] = point3d0;
      point3d0.sub((Vector3d) point3d1);
      assertEquals((-2314.595651368371), point3d0.x, 0.01);
      assertEquals(0.11668112985726786, point3d0.y, 0.01);
      assertEquals((-0.11668112985726786), point3d0.z, 0.01);
      assertEquals((-0.4500144631906012), point3d1.y, 0.01);
      assertEquals(2273.495651368371, point3d1.x, 0.01);
      assertEquals((-0.3333333333333333), point3d1.z, 0.01);
      assertEquals(5357353.0565623455, point3d0.normSquared(), 0.01);
      assertEquals(2314.595657250386, point3d0.norm(), 0.01);
      assertEquals(2273.495720342359, point3d1.norm(), 0.01);
      assertEquals(5168782.790415022, point3d1.normSquared(), 0.01);
      assertNotSame(point3d0, point3d1);
      assertNotSame(point3d1, point3d0);
      assertFalse(point3d0.equals((Object)point3d1));
      assertFalse(point3d1.equals((Object)point3d0));
      
      Point3d point3d2 = vertex0.pnt;
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d0);
      assertNotSame(point3d2, point3d1);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      point3dArray0[3] = point3d2;
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3dArray0[4];
      point3dArray0[6] = point3d1;
      Point3d point3d3 = new Point3d((-0.11668112985726786), 0.0, (-0.4500144631906012));
      assertEquals((-0.11668112985726786), point3d3.x, 0.01);
      assertEquals((-0.4500144631906012), point3d3.z, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.21612750314549356, point3d3.normSquared(), 0.01);
      assertEquals(0.4648951528522249, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d0));
      
      point3dArray0[7] = point3d3;
      point3d0.normalize();
      assertEquals((-0.9999999974587289), point3d0.x, 0.01);
      assertEquals(5.0411020815565996E-5, point3d0.y, 0.01);
      assertEquals((-5.0411020815565996E-5), point3d0.z, 0.01);
      assertEquals(0.9999999999999998, point3d0.normSquared(), 0.01);
      assertEquals(0.9999999999999999, point3d0.norm(), 0.01);
      assertNotSame(point3d0, point3d2);
      assertNotSame(point3d0, point3d3);
      assertNotSame(point3d0, point3d1);
      assertFalse(point3d0.equals((Object)point3d2));
      assertFalse(point3d0.equals((Object)point3d3));
      assertFalse(point3d0.equals((Object)point3d1));
      
      Point3d point3d4 = new Point3d(2391.994352773285, (-0.4500144631906012), (-0.9999999974587289));
      assertEquals((-0.4500144631906012), point3d4.y, 0.01);
      assertEquals(2391.994352773285, point3d4.x, 0.01);
      assertEquals((-0.9999999974587289), point3d4.z, 0.01);
      assertEquals(5721638.1862122975, point3d4.normSquared(), 0.01);
      assertEquals(2391.9946041352805, point3d4.norm(), 0.01);
      assertNotNull(point3d4);
      assertFalse(point3d4.equals((Object)point3d0));
      assertFalse(point3d4.equals((Object)point3d1));
      assertFalse(point3d4.equals((Object)point3d2));
      assertFalse(point3d4.equals((Object)point3d3));
      
      point3dArray0[8] = point3d4;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(6, quickHull3D0.getNumFaces());
      assertEquals(5, quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.5943542267975014E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(9, point3dArray0.length);
      
      // Undeclared exception!
      try { 
        quickHull3D0.resolveUnclaimedPoints((FaceList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numPoints = 946;
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      
      // Undeclared exception!
      try { 
        quickHull3D0.reindexFacesAndVertices();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      assertEquals(0.0, point3d0.y, 0.01);
      assertEquals(0.0, point3d0.x, 0.01);
      assertEquals(0.0, point3d0.z, 0.01);
      assertEquals(0.0, point3d0.norm(), 0.01);
      assertEquals(0.0, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      Point3d point3d1 = new Point3d();
      assertEquals(0.0, point3d1.z, 0.01);
      assertEquals(0.0, point3d1.x, 0.01);
      assertEquals(0.0, point3d1.y, 0.01);
      assertEquals(0.0, point3d1.norm(), 0.01);
      assertEquals(0.0, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      point3d1.setRandom(8, 0.0, mockRandom0);
      assertEquals(8.0, point3d1.x, 0.01);
      assertEquals(6.4, point3d1.z, 0.01);
      assertEquals(7.2, point3d1.y, 0.01);
      assertEquals(156.8, point3d1.normSquared(), 0.01);
      assertEquals(12.521980673998822, point3d1.norm(), 0.01);
      assertNotSame(point3d1, point3d0);
      assertFalse(point3d1.equals((Object)point3d0));
      
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals((-3.6848526309993683E-9), point3d2.x, 0.01);
      assertEquals(1.3578138912182967E-17, point3d2.normSquared(), 0.01);
      assertEquals(3.6848526309993683E-9, point3d2.norm(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d0));
      assertFalse(point3d2.equals((Object)point3d1));
      
      Point3d[] point3dArray0 = new Point3d[4];
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d1;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(1.438849039914203E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      assertEquals(4, point3dArray0.length);
      
      // Undeclared exception!
      try { 
        quickHull3D0.print((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-978.9998), 0.8581537465591058, (-978.9998));
      assertEquals((-978.9998), point3d0.z, 0.01);
      assertEquals((-978.9998), point3d0.x, 0.01);
      assertEquals(0.8581537465591058, point3d0.y, 0.01);
      assertEquals(1384.5150606721231, point3d0.norm(), 0.01);
      assertEquals(1916881.953227933, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d(0.8581537465591058, (-978.9998), (-978.9998));
      assertEquals(0.8581537465591058, point3d1.x, 0.01);
      assertEquals((-978.9998), point3d1.y, 0.01);
      assertEquals((-978.9998), point3d1.z, 0.01);
      assertEquals(1384.5150606721231, point3d1.norm(), 0.01);
      assertEquals(1916881.953227933, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = new Point3d();
      assertEquals(0.0, point3d2.x, 0.01);
      assertEquals(0.0, point3d2.y, 0.01);
      assertEquals(0.0, point3d2.z, 0.01);
      assertEquals(0.0, point3d2.norm(), 0.01);
      assertEquals(0.0, point3d2.normSquared(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d((-978.9998), 0.0, 0.0);
      assertEquals((-978.9998), point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(958440.6084000401, point3d3.normSquared(), 0.01);
      assertEquals(978.9998, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3d3;
      MockPrintStream mockPrintStream0 = new MockPrintStream("%VrrV$:");
      assertNotNull(mockPrintStream0);
      
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1.956434614314162E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(0.8581537465591058));
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) point3d0);
      assertEquals((-978.9998), point3d0.z, 0.01);
      assertEquals((-978.9998), point3d0.x, 0.01);
      assertEquals(0.8581537465591058, point3d0.y, 0.01);
      assertTrue(boolean0);
      assertEquals(1384.5150606721231, point3d0.norm(), 0.01);
      assertEquals(1916881.953227933, point3d0.normSquared(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-978.9998 0.8581537465591058 -978.9998]", vector0.toString());
      assertFalse(vector0.contains(0.8581537465591058));
      assertNotSame(point3d0, point3d3);
      assertNotSame(point3d0, point3d1);
      assertNotSame(point3d0, point3d2);
      assertFalse(point3d0.equals((Object)point3d3));
      assertFalse(point3d0.equals((Object)point3d1));
      assertFalse(point3d0.equals((Object)point3d2));
      
      quickHull3D0.faces = vector0;
      assertEquals(1.956434614314162E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(1, quickHull3D0.getNumFaces());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-978.9998 0.8581537465591058 -978.9998]", vector0.toString());
      assertEquals(1, quickHull3D0.faces.size());
      assertEquals(10, quickHull3D0.faces.capacity());
      assertFalse(quickHull3D0.faces.isEmpty());
      assertEquals("[-978.9998 0.8581537465591058 -978.9998]", quickHull3D0.faces.toString());
      
      // Undeclared exception!
      try { 
        quickHull3D0.print((PrintStream) mockPrintStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.github.quickhull3d.Point3d cannot be cast to class com.github.quickhull3d.Face (com.github.quickhull3d.Point3d and com.github.quickhull3d.Face are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @55df4fbd)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = 1;
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        quickHull3D0.print((PrintStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.oppFaceDistance((HalfEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-977.9218394899253), 2.454604939971651E-22, (-977.9218394899253));
      assertEquals(2.454604939971651E-22, point3d0.y, 0.01);
      assertEquals((-977.9218394899253), point3d0.z, 0.01);
      assertEquals((-977.9218394899253), point3d0.x, 0.01);
      assertEquals(1382.9903283474973, point3d0.norm(), 0.01);
      assertEquals(1912662.2483027186, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d(2.454604939971651E-22, (-977.9218394899253), (-977.9218394899253));
      assertEquals((-977.9218394899253), point3d1.y, 0.01);
      assertEquals(2.454604939971651E-22, point3d1.x, 0.01);
      assertEquals((-977.9218394899253), point3d1.z, 0.01);
      assertEquals(1382.9903283474973, point3d1.norm(), 0.01);
      assertEquals(1912662.2483027186, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = new Point3d((-977.9218394899253), (-977.9218394899253), 2.454604939971651E-22);
      assertEquals((-977.9218394899253), point3d2.x, 0.01);
      assertEquals((-977.9218394899253), point3d2.y, 0.01);
      assertEquals(2.454604939971651E-22, point3d2.z, 0.01);
      assertEquals(1912662.2483027186, point3d2.normSquared(), 0.01);
      assertEquals(1382.9903283474973, point3d2.norm(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(1.954280416473903E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      // Undeclared exception!
      quickHull3D0.initBuffers(46480);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-978.9998), (-1.1103713975056604), (-978.9998));
      assertEquals((-978.9998), point3d0.x, 0.01);
      assertEquals((-978.9998), point3d0.z, 0.01);
      assertEquals((-1.1103713975056604), point3d0.y, 0.01);
      assertEquals(1384.5152399756098, point3d0.norm(), 0.01);
      assertEquals(1916882.4497247206, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.1103713975056604), (-978.9998), (-978.9998));
      assertEquals((-978.9998), point3d1.y, 0.01);
      assertEquals((-978.9998), point3d1.z, 0.01);
      assertEquals((-1.1103713975056604), point3d1.x, 0.01);
      assertEquals(1916882.4497247206, point3d1.normSquared(), 0.01);
      assertEquals(1384.5152399756098, point3d1.norm(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = new Point3d((-978.9998), (-978.9998), (-1.1103713975056604));
      assertEquals((-1.1103713975056604), point3d2.z, 0.01);
      assertEquals((-978.9998), point3d2.y, 0.01);
      assertEquals((-978.9998), point3d2.x, 0.01);
      assertEquals(1384.5152399756098, point3d2.norm(), 0.01);
      assertEquals(1916882.4497247206, point3d2.normSquared(), 0.01);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d2));
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(1.956434614314162E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      // Undeclared exception!
      try { 
        quickHull3D0.getVertices((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = 2;
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(2, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      double[] doubleArray0 = new double[16];
      // Undeclared exception!
      try { 
        quickHull3D0.getVertices(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = (-2);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-2), quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        quickHull3D0.getVertices();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = (-551);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-551), quickHull3D0.getNumVertices());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      
      // Undeclared exception!
      try { 
        quickHull3D0.getVertexPointIndices();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -551
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.numVertices = 1988;
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(1988, quickHull3D0.getNumVertices());
      
      // Undeclared exception!
      try { 
        quickHull3D0.getVertexPointIndices();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      quickHull3D0.faces = null;
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        quickHull3D0.getFaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      quickHull3D0.faces = vector0;
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(10, quickHull3D0.faces.capacity());
      assertTrue(quickHull3D0.faces.isEmpty());
      assertEquals(0, quickHull3D0.faces.size());
      assertEquals("[]", quickHull3D0.faces.toString());
      
      boolean boolean0 = vector0.add((Object) quickHull3D0);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertTrue(boolean0);
      assertEquals(1, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        quickHull3D0.getFaces();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.github.quickhull3d.QuickHull3D cannot be cast to class com.github.quickhull3d.Face (com.github.quickhull3d.QuickHull3D and com.github.quickhull3d.Face are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @55df4fbd)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertNotNull(quickHull3D0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.deleteFacePoints((Face) null, (Face) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.createInitialSimplex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[3];
      quickHull3D0.setHull(doubleArray0, 1, (int[][]) null, (-2309));
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        quickHull3D0.createInitialSimplex();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input points appear to be coincident
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.computeMaxAndMin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-2.50533999964), (-2240.7401469), (-2.50533999964));
      assertEquals((-2.50533999964), point3d0.x, 0.01);
      assertEquals((-2240.7401469), point3d0.y, 0.01);
      assertEquals((-2.50533999964), point3d0.z, 0.01);
      assertEquals(2240.7429480836176, point3d0.norm(), 0.01);
      assertEquals(5020928.959386461, point3d0.normSquared(), 0.01);
      assertNotNull(point3d0);
      
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-2.50533999964), (-2.50533999964), (-2240.7401469), 3701);
      assertNotNull(vertex0);
      
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-2.50533999964), (-2.50533999964), (-2.50533999964));
      assertEquals((-2.50533999964), point3d1.y, 0.01);
      assertEquals((-2.50533999964), point3d1.x, 0.01);
      assertEquals((-2.50533999964), point3d1.z, 0.01);
      assertEquals(4.339376169611072, point3d1.norm(), 0.01);
      assertEquals(18.830185541388463, point3d1.normSquared(), 0.01);
      assertNotNull(point3d1);
      assertFalse(point3d1.equals((Object)point3d0));
      
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      assertEquals((-2.50533999964), point3d2.y, 0.01);
      assertEquals((-2.50533999964), point3d2.x, 0.01);
      assertEquals((-2240.7401469), point3d2.z, 0.01);
      assertEquals(5020928.959386461, point3d2.normSquared(), 0.01);
      assertEquals(2240.7429480836176, point3d2.norm(), 0.01);
      assertNotSame(point3d2, point3d1);
      assertNotSame(point3d2, point3d0);
      assertNotNull(point3d2);
      assertFalse(point3d2.equals((Object)point3d1));
      assertFalse(point3d2.equals((Object)point3d0));
      
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      assertEquals(0.0, point3d3.x, 0.01);
      assertEquals(0.0, point3d3.y, 0.01);
      assertEquals(0.0, point3d3.z, 0.01);
      assertEquals(0.0, point3d3.normSquared(), 0.01);
      assertEquals(0.0, point3d3.norm(), 0.01);
      assertNotNull(point3d3);
      assertFalse(point3d3.equals((Object)point3d0));
      assertFalse(point3d3.equals((Object)point3d1));
      assertFalse(point3d3.equals((Object)point3d2));
      
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(2.986934455639672E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(6, point3dArray0.length);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 8);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.checkFaces((-2.50533999964), mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      Vertex vertex0 = new Vertex();
      assertNotNull(vertex0);
      
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0, (-664.1327271102301));
      assertEquals(3, face0.numVertices());
      assertNotNull(face0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.checkFaceConvexity(face0, (-664.1327271102301), mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 0 0: unreflected half edge 0-0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("olEXD");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.checkFaceConvexity((Face) null, (-2880.4200188885), mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(0, quickHull3D0.getNumFaces());
      assertNotNull(quickHull3D0);
      
      double[] doubleArray0 = new double[3];
      int[][] intArray0 = new int[9][9];
      quickHull3D0.setHull(doubleArray0, 1, intArray0, 8);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, quickHull3D0.getNumFaces());
      assertEquals(0, quickHull3D0.getNumVertices());
      assertEquals(0.0, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, intArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(": unreflected half edge ");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        quickHull3D0.check((PrintStream) mockPrintStream0, (-591.3009999999999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // face 0 0 0 0 0 0 0 0 0: unreflected half edge 0-0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[2] = (double) 8;
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = 8.0;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      assertEquals(4, QuickHull3D.INDEXED_FROM_ZERO);
      assertEquals((-1.0), QuickHull3D.AUTOMATIC_TOLERANCE, 0.01);
      assertEquals(1, QuickHull3D.CLOCKWISE);
      assertEquals(8, QuickHull3D.POINT_RELATIVE);
      assertEquals(2, QuickHull3D.INDEXED_FROM_ONE);
      assertEquals(1.199040866595169E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      assertNotNull(quickHull3D0);
      assertEquals(19, doubleArray0.length);
      
      Vertex[] vertexArray0 = new Vertex[0];
      quickHull3D0.pointBuffer = vertexArray0;
      assertEquals(1.199040866595169E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        quickHull3D0.check((PrintStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-47.097084245210695), (-0.333333), 2.220446049250313E-16);
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2279.624533694647, 2.220446049250313E-16, (-0.333333));
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3d2;
      point3dArray0[6] = point3d1;
      point3dArray0[7] = point3d3;
      Point3d point3d4 = new Point3d(2392.7497471085753, 2.220446049250313E-16, (-0.7071067775583345));
      point3dArray0[8] = point3d4;
      point3d2.set(2.220446049250313E-16, 0.0, (-1611.9379580637428));
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      quickHull3D0.createInitialSimplex();
      // Undeclared exception!
      quickHull3D0.buildHull();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      quickHull3D0.pointBuffer = null;
      // Undeclared exception!
      try { 
        quickHull3D0.buildHull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      // Undeclared exception!
      try { 
        quickHull3D0.buildHull();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d point3d1 = new Point3d((-1.0), 2, 0.0);
      MockRandom mockRandom0 = new MockRandom();
      point3d1.setRandom(2452.786636060282, 0.0, mockRandom0);
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      Point3d[] point3dArray0 = new Point3d[5];
      point3dArray0[0] = point3d1;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d0;
      point3dArray0[4] = point3d0;
      // Undeclared exception!
      try { 
        quickHull3D0.build(point3dArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // degenerate face: 1 0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      // Undeclared exception!
      try { 
        quickHull3D0.build((double[]) null, 209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      // Undeclared exception!
      try { 
        quickHull3D0.build((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      FaceList faceList0 = new FaceList();
      Vertex vertex0 = new Vertex();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        quickHull3D0.addNewFaces(faceList0, vertex0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      FaceList faceList0 = new FaceList();
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      // Undeclared exception!
      try { 
        quickHull3D0.addNewFaces(faceList0, (Vertex) null, vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class com.github.quickhull3d.HalfEdge (java.lang.Object is in module java.base of loader 'bootstrap'; com.github.quickhull3d.HalfEdge is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @55df4fbd)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      Point3d point3d1 = new Point3d();
      MockRandom mockRandom0 = new MockRandom();
      point3d1.setRandom(8, 0.0, mockRandom0);
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      Point3d[] point3dArray0 = new Point3d[5];
      point3dArray0[0] = point3d1;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d1;
      point3dArray0[4] = point3d0;
      QuickHull3D quickHull3D0 = null;
      try {
        quickHull3D0 = new QuickHull3D(point3dArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // degenerate face: 2 0
         //
         verifyException("com.github.quickhull3d.Face", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      QuickHull3D quickHull3D0 = null;
      try {
        quickHull3D0 = new QuickHull3D((Point3d[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[0];
      QuickHull3D quickHull3D0 = null;
      try {
        quickHull3D0 = new QuickHull3D(point3dArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than four input points specified
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      QuickHull3D quickHull3D0 = null;
      try {
        quickHull3D0 = new QuickHull3D((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      Point3d point3d1 = vertex0.pnt;
      point3dArray0[1] = point3d1;
      Point3d point3d2 = new Point3d((-1.0), (-0.6183973271589135), 0.0);
      point3dArray0[2] = point3d2;
      Point3d point3d3 = new Point3d(point3d1);
      point3d1.sub((Vector3d) point3d0, (Vector3d) point3d2);
      point3dArray0[3] = point3d3;
      point3dArray0[4] = point3dArray0[3];
      point3dArray0[5] = point3d2;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      boolean boolean0 = quickHull3D0.check((PrintStream) null, 0.0);
      assertEquals(3.234565948417867E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      HalfEdge halfEdge0 = face0.getFirstEdge();
      Vector<HalfEdge> vector0 = new Vector<HalfEdge>();
      // Undeclared exception!
      try { 
        quickHull3D0.calculateHorizon((Point3d) null, halfEdge0, face0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[2] = (double) 8;
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = 8.0;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Adding point: ");
      quickHull3D0.print((PrintStream) mockPrintStream0, 4);
      assertEquals(1.199040866595169E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[3];
      int[][] intArray0 = new int[9][9];
      quickHull3D0.setHull(doubleArray0, 1, intArray0, 8);
      // Undeclared exception!
      try { 
        quickHull3D0.print((PrintStream) null, (-10406));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d[] point3dArray0 = new Point3d[7];
      // Undeclared exception!
      try { 
        quickHull3D0.build(point3dArray0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      try { 
        quickHull3D0.build((double[]) null, (-907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than four input points specified
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double double0 = quickHull3D0.getDistanceTolerance();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (-1.0);
      doubleArray0[6] = (double) 1;
      doubleArray0[4] = (double) 8;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      boolean boolean0 = quickHull3D0.check((PrintStream) null, (-1.0));
      assertFalse(boolean0);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(6.661338147750939E-15, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[2] = (-1.0);
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = (-1.0);
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      boolean boolean0 = quickHull3D0.check((PrintStream) null);
      assertTrue(boolean0);
      assertEquals(2.6645352591003757E-15, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      Point3d point3d1 = new Point3d();
      MockRandom mockRandom0 = new MockRandom();
      point3d1.setRandom(8, 0.0, mockRandom0);
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      Point3d[] point3dArray0 = new Point3d[5];
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d1;
      point3dArray0[4] = point3d0;
      point3d0.sub((Vector3d) point3d2, (Vector3d) point3d1);
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      boolean boolean0 = quickHull3D0.check((PrintStream) null, 2253.1698965679);
      assertEquals(3, quickHull3D0.getNumVertices());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Point3d point3d0 = new Point3d();
      Point3d point3d1 = new Point3d();
      MockRandom mockRandom0 = new MockRandom();
      point3d1.setRandom(8, 0.0, mockRandom0);
      Point3d point3d2 = new Point3d((-3.6848526309993683E-9), 0.0, 0.0);
      Point3d[] point3dArray0 = new Point3d[5];
      point3dArray0[0] = point3d0;
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d2;
      point3dArray0[3] = point3d1;
      point3dArray0[4] = point3d0;
      point3d0.sub((Vector3d) point3d2, (Vector3d) point3d1);
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      MockFile mockFile0 = new MockFile("Adding point: ", "Adding point: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      boolean boolean0 = quickHull3D0.check((PrintStream) mockPrintStream0, (-3.6848526309993683E-9));
      assertEquals(3, quickHull3D0.getNumVertices());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 7.670938846774, (-1.0));
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), (-1.0), 7.670938846774, 3701);
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.0), (-1.0), (-1.0));
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3d3;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("iteration ");
      boolean boolean0 = quickHull3D0.checkFaces((-1.0), mockPrintStream0);
      assertFalse(boolean0);
      assertEquals(4, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (double) 8;
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = 8.0;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D-J3%E-|PG<q");
      boolean boolean0 = quickHull3D0.check((PrintStream) mockPrintStream0, (-3920065.259496884));
      assertFalse(boolean0);
      assertEquals(1.199040866595169E-14, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-47.097084245210695), (-0.333333), 2.220446049250313E-16);
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2279.624533694647, 2.220446049250313E-16, (-0.333333));
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      point3dArray0[4] = point3d2;
      Point3d point3d4 = new Point3d(0.0, 0.0, 0.0);
      point3dArray0[5] = point3d4;
      point3d0.z = (-2326.721617939858);
      Point3d point3d5 = vertex0.pnt;
      point3dArray0[6] = point3d1;
      point3dArray0[7] = point3d3;
      Point3d point3d6 = new Point3d(2392.7497471085753, 2.220446049250313E-16, (-0.7071067775583345));
      point3d6.scale(2279.624533694647);
      point3dArray0[8] = point3d6;
      point3d2.set(2.220446049250313E-16, 0.0, (-1611.9379580637428));
      point3d2.add((Vector3d) point3d0, (Vector3d) point3d5);
      point3d6.scale(300.8622376093408);
      point3d4.sub((Vector3d) point3d2, (Vector3d) point3d0);
      point3d0.cross(point3d2, point3d1);
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(6, quickHull3D0.getNumVertices());
      assertEquals(1.0994792384475136E-6, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[2] = (-1.0);
      doubleArray0[12] = (double) 2;
      doubleArray0[7] = (-1.0);
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      quickHull3D0.getFaces(8);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(2.6645352591003757E-15, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 4;
      doubleArray0[7] = (double) 1;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      quickHull3D0.getFaces(1);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(3.9968028886505635E-15, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[6];
      Point3d point3d0 = new Point3d((-1.0), 0.0, (-1.0));
      point3dArray0[0] = point3d0;
      Vertex vertex0 = new Vertex((-1.0), 483.573, 0.0, 3701);
      point3dArray0[1] = point3d0;
      Point3d point3d1 = new Point3d((-1.0), (-0.6183973271589135), (-1.0));
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      point3dArray0[3] = point3d2;
      Point3d point3d3 = new Point3d();
      point3dArray0[4] = point3d3;
      point3dArray0[5] = point3dArray0[1];
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      int[] intArray0 = quickHull3D0.getVertexPointIndices();
      assertArrayEquals(new int[] {0, 2, 3, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 4;
      doubleArray0[7] = (double) 1;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      int int0 = quickHull3D0.getVertices(doubleArray0);
      assertEquals(4, int0);
      assertEquals(3.9968028886505635E-15, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[16];
      int int0 = quickHull3D0.getVertices(doubleArray0);
      assertEquals(0, int0);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      quickHull3D0.numVertices = 1367;
      // Undeclared exception!
      try { 
        quickHull3D0.getVertices();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d[] point3dArray0 = quickHull3D0.getVertices();
      try { 
        quickHull3D0.build(point3dArray0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than four input points specified
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[20];
      doubleArray0[2] = (-1.0);
      doubleArray0[7] = (-1.0);
      try { 
        quickHull3D0.build(doubleArray0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input points appear to be coplanar
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (-1.0);
      QuickHull3D quickHull3D0 = null;
      try {
        quickHull3D0 = new QuickHull3D(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input points appear to be colinear
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[3];
      int[][] intArray0 = new int[9][9];
      quickHull3D0.setHull(doubleArray0, 1, intArray0, 8);
      // Undeclared exception!
      try { 
        quickHull3D0.buildHull();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input points appear to be coincident
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[12];
      quickHull3D0.setExplicitDistanceTolerance(1305.0);
      // Undeclared exception!
      try { 
        quickHull3D0.setHull(doubleArray0, 1, (int[][]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (-1.0);
      doubleArray0[12] = (double) 1;
      doubleArray0[4] = (-1.0);
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      int[][] intArray0 = quickHull3D0.getFaces(4);
      // Undeclared exception!
      try { 
        quickHull3D0.setHull(doubleArray0, 8, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 18 out of bounds for length 18
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[9] = (double) 8;
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = 2.0;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      quickHull3D0.triangulate();
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(7.327471962526033E-15, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d[] point3dArray0 = new Point3d[0];
      try { 
        quickHull3D0.build(point3dArray0, 1667);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Point array too small for specified number of points
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d[] point3dArray0 = new Point3d[0];
      try { 
        quickHull3D0.build(point3dArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than four input points specified
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[0];
      try { 
        quickHull3D0.build(doubleArray0, 138);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Coordinate array too small for specified number of points
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (-1.0);
      doubleArray0[6] = (double) 1;
      doubleArray0[4] = (double) 2;
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      // Undeclared exception!
      try { 
        quickHull3D0.printPoints((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      File file0 = MockFile.createTempFile("new face: ", "new face: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      quickHull3D0.printPoints(mockPrintStream0);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      // Undeclared exception!
      try { 
        quickHull3D0.setFromQhull((double[]) null, 1, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // problem during hull calculation
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[18];
      // Undeclared exception!
      try { 
        quickHull3D0.setFromQhull(doubleArray0, 2, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // problem during hull calculation
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[18];
      doubleArray0[2] = (-1.0);
      doubleArray0[6] = (double) 1;
      doubleArray0[4] = (double) 8;
      QuickHull3D quickHull3D1 = new QuickHull3D(doubleArray0);
      int[][] intArray0 = quickHull3D1.getFaces();
      quickHull3D0.setHull(doubleArray0, 4, intArray0, 4);
      assertEquals(4, quickHull3D0.getNumFaces());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-85.93978708147667), (-1.1091560634267967), (-1.1091560634267967));
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-1.1091560634267967));
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d0;
      point3dArray0[3] = point3d1;
      point3dArray0[4] = point3d0;
      Point3d point3d2 = new Point3d();
      point3dArray0[5] = point3d2;
      Point3d point3d3 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-85.93978708147667));
      point3dArray0[6] = point3d3;
      Point3d point3d4 = new Point3d((-1.1091560634267967), (-85.93978708147667), (-85.93978708147667));
      point3dArray0[7] = point3d4;
      point3d3.sub((Vector3d) point3d0);
      point3d0.normalize();
      Point3d point3d5 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-0.9998334716133405));
      point3dArray0[8] = point3d5;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(6, quickHull3D0.getNumVertices());
      assertEquals(1.7100334826891873E-13, quickHull3D0.getDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-85.93978708147667), (-1.1091560634267967), (-1.1091560634267967));
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-1.1091560634267967));
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d0;
      point3dArray0[3] = point3d1;
      point3dArray0[4] = point3d0;
      Point3d point3d2 = new Point3d();
      point3dArray0[5] = point3d2;
      Point3d point3d3 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-85.93978708147667));
      point3dArray0[6] = point3d3;
      Point3d point3d4 = new Point3d((-1.1091560634267967), (-85.93978708147667), (-85.93978708147667));
      point3dArray0[7] = point3d4;
      point3d4.normalize();
      Point3d point3d5 = new Point3d((-1.1091560634267967), (-1.1091560634267967), (-0.9998334716133405));
      point3d5.scale((-1.1091560634267967));
      point3dArray0[8] = point3d5;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(1.153142923389015E-13, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(6, quickHull3D0.getNumVertices());
      assertEquals(7, quickHull3D0.getNumFaces());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Vertex vertex0 = new Vertex();
      Face face0 = Face.createTriangle(vertex0, vertex0, vertex0);
      vertex0.face = face0;
      // Undeclared exception!
      try { 
        quickHull3D0.addPointToHull(vertex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-330.80722384541673), (-330.80722384541673), (-15.406036106670491));
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d((-330.80722384541673), (-15.406036106670491), (-330.80722384541673));
      point3dArray0[1] = point3d1;
      point3dArray0[2] = point3d0;
      point3dArray0[3] = point3d0;
      Point3d point3d2 = new Point3d((-330.80722384541673), (-15.406036106670491), (-15.406036106670491));
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3d0;
      point3dArray0[6] = point3d0;
      point3dArray0[7] = point3d2;
      Point3d point3d3 = new Point3d();
      point3dArray0[8] = point3d3;
      point3d0.scale((-2022.7));
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, quickHull3D0.getNumFaces());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      Point3d[] point3dArray0 = new Point3d[5];
      // Undeclared exception!
      try { 
        quickHull3D0.build(point3dArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.quickhull3d.Vector3d", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      quickHull3D0.setExplicitDistanceTolerance(2.0);
      double double0 = quickHull3D0.getExplicitDistanceTolerance();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[9] = (double) 8;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 2.0;
      doubleArray0[7] = (-1.0);
      QuickHull3D quickHull3D0 = new QuickHull3D(doubleArray0);
      assertEquals(5, quickHull3D0.getNumFaces());
      
      quickHull3D0.triangulate();
      assertEquals(6, quickHull3D0.getNumFaces());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Point3d[] point3dArray0 = new Point3d[9];
      Point3d point3d0 = new Point3d((-47.097084245210695), (-0.333333), 2.220446049250313E-16);
      point3dArray0[0] = point3d0;
      Point3d point3d1 = new Point3d(2279.624533694647, 2.220446049250313E-16, (-0.333333));
      point3dArray0[1] = point3d1;
      Vertex vertex0 = new Vertex();
      point3dArray0[2] = point3d1;
      Point3d point3d2 = vertex0.pnt;
      point3dArray0[3] = point3d2;
      point3dArray0[4] = point3d2;
      point3dArray0[5] = point3d0;
      point3dArray0[6] = point3d1;
      point3dArray0[7] = point3dArray0[3];
      Point3d point3d3 = new Point3d(2392.7497471085753, 2.220446049250313E-16, (-0.7071067775583345));
      point3dArray0[8] = point3d3;
      QuickHull3D quickHull3D0 = new QuickHull3D(point3dArray0);
      int int0 = quickHull3D0.getNumFaces();
      assertEquals(1.5945845889616452E-12, quickHull3D0.getDistanceTolerance(), 0.01);
      assertEquals(4, quickHull3D0.getNumVertices());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      int int0 = quickHull3D0.getNumVertices();
      assertEquals(0, int0);
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double double0 = quickHull3D0.getExplicitDistanceTolerance();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      double[] doubleArray0 = new double[0];
      try { 
        quickHull3D0.build(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Less than four input points specified
         //
         verifyException("com.github.quickhull3d.QuickHull3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      QuickHull3D quickHull3D0 = new QuickHull3D();
      quickHull3D0.getFaces();
      assertEquals((-1.0), quickHull3D0.getExplicitDistanceTolerance(), 0.01);
  }
}
