/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 20:14:47 GMT 2022
 */

package io.fabric8.zjsonpatch.internal.collections4.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.fabric8.zjsonpatch.internal.collections4.sequence.CommandVisitor;
import io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand;
import io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript;
import io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand;
import io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EditScript_ESTest extends EditScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      EditScript<Object> editScript0 = new EditScript<Object>();
      InsertCommand<Object> insertCommand0 = new InsertCommand<Object>(integer0);
      editScript0.append(insertCommand0);
      int int0 = editScript0.getModifications();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      EditScript<Integer> editScript0 = new EditScript<Integer>();
      KeepCommand<Integer> keepCommand0 = new KeepCommand<Integer>(integer0);
      editScript0.append(keepCommand0);
      int int0 = editScript0.getLCSLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EditScript<KeepCommand<Object>> editScript0 = new EditScript<KeepCommand<Object>>();
      KeepCommand<Object> keepCommand0 = new KeepCommand<Object>(editScript0);
      InsertCommand<KeepCommand<Object>> insertCommand0 = new InsertCommand<KeepCommand<Object>>(keepCommand0);
      editScript0.append(insertCommand0);
      CommandVisitor<KeepCommand<Object>> commandVisitor0 = (CommandVisitor<KeepCommand<Object>>) mock(CommandVisitor.class, new ViolatedAssumptionAnswer());
      editScript0.visit(commandVisitor0);
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EditScript<KeepCommand<Integer>> editScript0 = new EditScript<KeepCommand<Integer>>();
      int int0 = editScript0.getLCSLength();
      assertEquals(0, int0);
      assertEquals(0, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EditScript<KeepCommand<Object>> editScript0 = new EditScript<KeepCommand<Object>>();
      KeepCommand<Object> keepCommand0 = new KeepCommand<Object>(editScript0);
      EditScript<Object> editScript1 = new EditScript<Object>();
      KeepCommand<KeepCommand<Object>> keepCommand1 = new KeepCommand<KeepCommand<Object>>(keepCommand0);
      DeleteCommand<Object> deleteCommand0 = new DeleteCommand<Object>(keepCommand1);
      editScript1.append(deleteCommand0);
      assertEquals(1, editScript1.getModifications());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EditScript<Object> editScript0 = new EditScript<Object>();
      int int0 = editScript0.getModifications();
      assertEquals(0, int0);
      assertEquals(0, editScript0.getLCSLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EditScript<Object> editScript0 = new EditScript<Object>();
      InsertCommand<Object> insertCommand0 = new InsertCommand<Object>(editScript0);
      editScript0.append(insertCommand0);
      // Undeclared exception!
      try { 
        editScript0.visit((CommandVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand", e);
      }
  }
}
