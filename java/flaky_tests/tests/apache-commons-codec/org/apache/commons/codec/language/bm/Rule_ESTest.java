/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 17:41:20 GMT 2022
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.codec.language.bm.NameType;
import org.apache.commons.codec.language.bm.Rule;
import org.apache.commons.codec.language.bm.RuleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rule_ESTest extends Rule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rule rule0 = new Rule("", "", "Q+_SOem2l;C7@QaH", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("-xa@4]z3{W40T&b9+", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList((List<Rule.Phoneme>) null);
      Rule rule0 = new Rule("^)$", "^)$", "^)$", rule_PhonemeList0);
      boolean boolean0 = rule0.patternAndContextMatches("^)$", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("qCdWs*sj:^y,P}BC", languages_LanguageSet0);
      Rule rule0 = new Rule("", "qCdWs*sj:^y,P}BC", "", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("qCdWs*sj:^y,P}BC[NO_LANGUAGES]", 22);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme1, languages_LanguageSet0);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = new Rule.Phoneme(rule_Phoneme0, rule_Phoneme0);
      Rule.Phoneme rule_Phoneme2 = new Rule.Phoneme(rule_Phoneme1, rule_Phoneme0);
      assertFalse(rule_Phoneme2.equals((Object)rule_Phoneme0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.mergeWithLanguage(languages_LanguageSet0);
      assertFalse(rule_Phoneme1.equals((Object)rule_Phoneme0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rule rule0 = new Rule("]$iM%<", ";L45n|+#94ELNn\"8:", ";L45n|+#94ELNn\"8:", (Rule.PhonemeExpr) null);
      rule0.getPhoneme();
      assertEquals("]$iM%<", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule rule0 = new Rule((String) null, "7UX8ZjS>?y", ", lcon='", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "", "", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, "any");
      assertEquals(112, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rule rule0 = new Rule("\"q^^}8", "\"q^^}8", "\"q^^}8", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("\"q^^}8", 2147483645);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rule rule0 = new Rule((String) null, (String) null, (String) null, (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches((CharSequence) null, 3398);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("[=g]", "[=g]", "", rule_PhonemeList0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[=g]");
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches(charBuffer0, 2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.RULES;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, (RuleType) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, exact, .
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, "FJ$&Z/9?V/X@riF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, approx, FJ$&Z/9?V/X@riF.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.APPROX;
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, "any");
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.APPROX;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Map<String, List<Rule>> map0 = Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameType nameType0 = NameType.SEPHARDIC;
      RuleType ruleType0 = RuleType.EXACT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      // Undeclared exception!
      try { 
        Rule.getInstanceMap(nameType0, ruleType0, languages_LanguageSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for sep, exact, null.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rule rule0 = new Rule("A", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("A", 4);
      assertEquals("A", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rule rule0 = new Rule("A", "$", "$", (Rule.PhonemeExpr) null);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("$", (-1289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Can not match pattern at negative indexes
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rule rule0 = new Rule("", "-a@4]3{W40A&b9+", "-a@4]3{W40A&b9+", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("-a@4]3{W40A&b9+", 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rule rule0 = new Rule("-xa@4z3{W40T&b9+", "-xa@4z3{W40T&b9+", "-xa@4z3{W40T&b9+", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("-xa@4z3{W40T&b9+", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rule rule0 = new Rule("", "mvu", "mvu", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("-a@4Q]{W40A9+", 0);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList((List<Rule.Phoneme>) null);
      Rule rule0 = new Rule("", "[U]", "[U]", rule_PhonemeList0);
      boolean boolean0 = rule0.patternAndContextMatches("[U]", 1);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList((List<Rule.Phoneme>) null);
      Rule rule0 = new Rule("", "[-U]", "[-U]", rule_PhonemeList0);
      boolean boolean0 = rule0.patternAndContextMatches("[-U]", 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rule rule0 = new Rule("[U]", "[U]", "", (Rule.PhonemeExpr) null);
      rule0.patternAndContextMatches("[U]", 0);
      assertEquals("[U]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rule rule0 = new Rule("[+]", "[+]", "[+]", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("[+]", 0);
      assertFalse(boolean0);
      assertEquals("[+]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rule rule0 = new Rule("oGILN7mv;g^j", "^[]]]", "^", (Rule.PhonemeExpr) null);
      assertEquals("oGILN7mv;g^j", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("[]", "[]", "", rule_PhonemeList0);
      rule0.patternAndContextMatches("[NO_LANGUAGES]", 0);
      assertEquals("[]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rule rule0 = new Rule("vA6!:(k`^~,~G;8", ", lcon='", "[^]]", (Rule.PhonemeExpr) null);
      assertEquals("vA6!:(k`^~,~G;8", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rule rule0 = null;
      try {
        rule0 = new Rule("[[+]", "[[+]", "[[+]", (Rule.PhonemeExpr) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // [[+]$
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("[=U", (Languages.LanguageSet) null);
      Rule rule0 = null;
      try {
        rule0 = new Rule("[=U", "[=U", "[=U", rule_Phoneme0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 3
         // [=U$
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rule rule0 = new Rule("A", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("ALLALL[NO_LANGUAGES]", 0);
      assertEquals("A", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      List<Rule> list0 = Rule.getInstance(nameType0, ruleType0, languages_LanguageSet0);
      assertEquals(15, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("qCdWs*sjy,PBC", languages_LanguageSet0);
      Rule rule0 = new Rule("", "qCdWs*sjy,PBC", "", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("qCdWs*sjy,PBC[NO_LANGUAGES]", 24);
      assertEquals("", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rule rule0 = new Rule("", "$", "$", (Rule.PhonemeExpr) null);
      boolean boolean0 = rule0.patternAndContextMatches("$", 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "&7-T@Zcm", "[NO_LANGUAGES]", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("ALL", 0);
      assertFalse(boolean0);
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("[]]", languages_LanguageSet0);
      Rule rule0 = new Rule("[]]", "any", "[]]", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("[]]any[NO_LANGUAGES]", 0);
      assertFalse(boolean0);
      assertEquals("[]]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      List<Rule.Phoneme> list0 = rule_PhonemeList0.getPhonemes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rule rule0 = new Rule("8[]]", "8[]]", "8[]]", (Rule.PhonemeExpr) null);
      rule0.patternAndContextMatches("8[]]", 0);
      assertEquals("8[]]", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("[]]", languages_LanguageSet0);
      Rule.Phoneme rule_Phoneme1 = rule_Phoneme0.append("any");
      assertSame(rule_Phoneme1, rule_Phoneme0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("\"\"t\"", languages_LanguageSet0);
      CharSequence charSequence0 = rule_Phoneme0.getPhonemeText();
      assertEquals("\"\"t\"", charSequence0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      String string0 = rule_Phoneme0.toString();
      assertEquals("[NO_LANGUAGES]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("ALL", (Languages.LanguageSet) null);
      Languages.LanguageSet languages_LanguageSet0 = rule_Phoneme0.getLanguages();
      assertNull(languages_LanguageSet0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NameType nameType0 = NameType.GENERIC;
      RuleType ruleType0 = RuleType.EXACT;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, "ALL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rules found for gen, exact, ALL.
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("", languages_LanguageSet0);
      Rule rule0 = new Rule("", "", "", rule_Phoneme0);
      rule0.getPhoneme();
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme(charBuffer0, languages_LanguageSet0);
      Rule rule0 = new Rule("Gtj?+:iAQDc#", "^^Gtj?+:iAQDc#$$$$", "Gtj?+:iAQDc#", rule_Phoneme0);
      String string0 = rule0.getPattern();
      assertEquals("Gtj?+:iAQDc#", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Languages.LanguageSet languages_LanguageSet0 = Languages.LanguageSet.from(linkedHashSet0);
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("qCdWs*sj:^y,P6BC", languages_LanguageSet0);
      Rule rule0 = new Rule("", "qCdWs*sj:^y,P6BC", "", rule_Phoneme0);
      rule0.getLContext();
      assertEquals("", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rule rule0 = new Rule("^^#", "^^#", "^^#", (Rule.PhonemeExpr) null);
      rule0.getRContext();
      assertEquals("^^#", rule0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NameType nameType0 = NameType.ASHKENAZI;
      RuleType ruleType0 = RuleType.EXACT;
      // Undeclared exception!
      try { 
        Rule.getInstance(nameType0, ruleType0, (Languages.LanguageSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }
}
