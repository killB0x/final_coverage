/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 02:09:55 GMT 2022
 */

package com.github.qrenfeng.common.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.qrenfeng.common.entity.CommonPageReq;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommonPageReq_ESTest extends CommonPageReq_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      CommonPageReq<Integer> commonPageReq1 = new CommonPageReq<Integer>();
      Integer integer0 = new Integer((-2719));
      commonPageReq0.setQuery(integer0);
      commonPageReq1.setQuery(integer0);
      boolean boolean0 = commonPageReq1.equals(commonPageReq0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long((-1753L));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>(long0, long0, long0);
      Long long1 = new Long((-1753L));
      CommonPageReq<Object> commonPageReq1 = new CommonPageReq<Object>(long0, long1, long0);
      boolean boolean0 = commonPageReq0.equals(commonPageReq1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long((-1726L));
      Long long1 = new Long(0L);
      Integer integer0 = new Integer((-1925));
      CommonPageReq<Integer> commonPageReq0 = new CommonPageReq<Integer>(long0, long1, integer0);
      Long long2 = commonPageReq0.getSize();
      assertEquals(0L, (long)long2);
      assertEquals((-1726L), (long)commonPageReq0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(2366L);
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      commonPageReq0.setSize(long0);
      Long long1 = commonPageReq0.getSize();
      assertEquals(2366L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long((-4184L));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      commonPageReq0.setSize(long0);
      Long long1 = commonPageReq0.getSize();
      assertEquals((-4184L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(464);
      CommonPageReq<Integer> commonPageReq0 = new CommonPageReq<Integer>(long0, long0, integer0);
      Long long1 = commonPageReq0.getIndex();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(677L);
      Integer integer0 = new Integer((-2088));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>(long0, long0, integer0);
      Long long1 = commonPageReq0.getIndex();
      assertEquals(677L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = CommonPageReq.builder();
      Long long0 = new Long((-4416));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>(long0, long0, commonPageReq_CommonPageReqBuilder0);
      Long long1 = commonPageReq0.getIndex();
      assertEquals((-4416L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = new CommonPageReq.CommonPageReqBuilder<Integer>();
      CommonPageReq<Integer> commonPageReq0 = commonPageReq_CommonPageReqBuilder0.build();
      CommonPageReq<CommonPageReq<Integer>> commonPageReq1 = new CommonPageReq<CommonPageReq<Integer>>();
      commonPageReq1.setQuery(commonPageReq0);
      Object object0 = commonPageReq1.getQuery();
      boolean boolean0 = commonPageReq0.canEqual(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>(long0, long0, integer0);
      boolean boolean0 = commonPageReq0.canEqual(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonPageReq<CommonPageReq<Integer>> commonPageReq0 = new CommonPageReq<CommonPageReq<Integer>>();
      Object object0 = commonPageReq0.getQuery();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      Long long0 = commonPageReq0.getIndex();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = CommonPageReq.builder();
      CommonPageReq<Integer> commonPageReq0 = commonPageReq_CommonPageReqBuilder0.build();
      Long long0 = commonPageReq0.getSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      Integer integer0 = new Integer(1);
      CommonPageReq<Integer> commonPageReq1 = new CommonPageReq<Integer>((Long) null, (Long) null, integer0);
      boolean boolean0 = commonPageReq0.equals(commonPageReq1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(1L);
      Integer integer0 = new Integer((-4279));
      CommonPageReq<Integer> commonPageReq0 = new CommonPageReq<Integer>(long0, long0, integer0);
      Long long1 = new Long((-4279));
      CommonPageReq<Object> commonPageReq1 = new CommonPageReq<Object>();
      CommonPageReq<Object> commonPageReq2 = new CommonPageReq<Object>(long0, long1, commonPageReq1);
      boolean boolean0 = commonPageReq2.equals(commonPageReq0);
      assertEquals((-4279L), (long)commonPageReq2.getSize());
      assertFalse(boolean0);
      assertEquals(1L, (long)commonPageReq2.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      Long long0 = Long.valueOf((-1089L));
      commonPageReq0.setSize(long0);
      CommonPageReq<CommonPageReq<Object>> commonPageReq1 = new CommonPageReq<CommonPageReq<Object>>();
      boolean boolean0 = commonPageReq1.equals(commonPageReq0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(1L);
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      CommonPageReq<CommonPageReq<Object>> commonPageReq1 = new CommonPageReq<CommonPageReq<Object>>(long0, long0, commonPageReq0);
      CommonPageReq<Object> commonPageReq2 = new CommonPageReq<Object>(long0, long0, long0);
      boolean boolean0 = commonPageReq1.equals(commonPageReq2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      Long long0 = new Long(0L);
      CommonPageReq<Object> commonPageReq1 = new CommonPageReq<Object>(long0, long0, commonPageReq0);
      boolean boolean0 = commonPageReq0.equals(commonPageReq1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(1L);
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      CommonPageReq<CommonPageReq<Object>> commonPageReq1 = new CommonPageReq<CommonPageReq<Object>>(long0, long0, commonPageReq0);
      boolean boolean0 = commonPageReq1.equals(commonPageReq0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1);
      CommonPageReq<Integer> commonPageReq0 = new CommonPageReq<Integer>((Long) null, (Long) null, integer0);
      Object object0 = new Object();
      boolean boolean0 = commonPageReq0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      boolean boolean0 = commonPageReq0.equals(commonPageReq0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = new CommonPageReq.CommonPageReqBuilder<Integer>();
      Integer integer0 = new Integer(0);
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder1 = commonPageReq_CommonPageReqBuilder0.query(integer0);
      CommonPageReq<Integer> commonPageReq0 = commonPageReq_CommonPageReqBuilder1.build();
      commonPageReq0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = new Long((-4184L));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      commonPageReq0.setSize(long0);
      commonPageReq0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long((-4184L));
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      commonPageReq0.setIndex(long0);
      commonPageReq0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = new CommonPageReq.CommonPageReqBuilder<Integer>();
      Long long0 = new Long((-2719));
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder1 = commonPageReq_CommonPageReqBuilder0.size(long0);
      assertNotNull(commonPageReq_CommonPageReqBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = new CommonPageReq.CommonPageReqBuilder<Integer>();
      String string0 = commonPageReq_CommonPageReqBuilder0.toString();
      assertEquals("CommonPageReq.CommonPageReqBuilder(index=null, size=null, query=null)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder0 = CommonPageReq.builder();
      CommonPageReq.CommonPageReqBuilder<Integer> commonPageReq_CommonPageReqBuilder1 = commonPageReq_CommonPageReqBuilder0.index((Long) null);
      assertSame(commonPageReq_CommonPageReqBuilder1, commonPageReq_CommonPageReqBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommonPageReq<Object> commonPageReq0 = new CommonPageReq<Object>();
      String string0 = commonPageReq0.toString();
      assertEquals("CommonPageReq(index=null, size=null, query=null)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CommonPageReq<CommonPageReq<Object>> commonPageReq0 = new CommonPageReq<CommonPageReq<Object>>();
      CommonPageReq<Object> commonPageReq1 = new CommonPageReq<Object>();
      boolean boolean0 = commonPageReq1.equals(commonPageReq0);
      assertTrue(boolean0);
  }
}
