/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 02:11:48 GMT 2022
 */

package com.github.qrenfeng.common.utils.seq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.qrenfeng.common.utils.seq.Sequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sequence_ESTest extends Sequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sequence sequence0 = new Sequence();
      // Undeclared exception!
      sequence0.tilNextMillis(1392409281320L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sequence sequence0 = new Sequence(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sequence sequence0 = new Sequence(0L, 31L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = Sequence.getDatacenterId((-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sequence sequence0 = new Sequence();
      long long0 = sequence0.timeGen();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = Sequence.getMaxWorkerId((-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = Sequence.getMaxWorkerId(0L, 2359L);
      assertEquals(1003L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sequence.getMaxWorkerId((-1L), (-1L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.github.qrenfeng.common.utils.seq.Sequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sequence sequence0 = new Sequence(0L, 1L);
      long long0 = sequence0.nextId();
      assertEquals(434422128733978625L, long0);
      
      long long1 = sequence0.nextId();
      assertEquals(434422128733978626L, long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sequence sequence0 = null;
      try {
        sequence0 = new Sequence(31L, (-496L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // datacenter Id can't be greater than 31 or less than 0
         //
         verifyException("com.github.qrenfeng.common.utils.seq.Sequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sequence sequence0 = null;
      try {
        sequence0 = new Sequence(1L, 4095L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // datacenter Id can't be greater than 31 or less than 0
         //
         verifyException("com.github.qrenfeng.common.utils.seq.Sequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sequence sequence0 = null;
      try {
        sequence0 = new Sequence((-3196L), (-3196L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // worker Id can't be greater than 31 or less than 0
         //
         verifyException("com.github.qrenfeng.common.utils.seq.Sequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sequence sequence0 = null;
      try {
        sequence0 = new Sequence(434422128733892611L, 434422128733892611L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // worker Id can't be greater than 31 or less than 0
         //
         verifyException("com.github.qrenfeng.common.utils.seq.Sequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sequence sequence0 = new Sequence(0L, 1L);
      long long0 = sequence0.tilNextMillis(0L);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sequence sequence0 = new Sequence();
      // Undeclared exception!
      sequence0.tilNextMillis(434422128733892610L);
  }
}
