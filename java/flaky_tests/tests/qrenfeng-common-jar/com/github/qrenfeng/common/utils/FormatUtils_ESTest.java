/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 02:18:26 GMT 2022
 */

package com.github.qrenfeng.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.qrenfeng.common.utils.FormatUtils;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      int int0 = FormatUtils.getDays("20140214202121", "20140214202121");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = FormatUtils.getDays("20140214.00", "qnB?j");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = FormatUtils.getTimes("20140214202121.00", "20140214202121");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime("4TIA|slLjgnvN&A`QK");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = FormatUtils.getTimes("'z~4'Y", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = FormatUtils.getStepDate("20140214202121", 100);
      assertEquals("20140525", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = FormatUtils.getStepDate("yyyyMMddHHmmssSSS", 100);
      assertEquals("yyyyMMddHHmmssSSS", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = FormatUtils.getStepDate("", (-44));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String string0 = FormatUtils.formatTime((Date) mockDate0, "yyyyMMdd");
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String string0 = FormatUtils.formatTime((Date) mockDate0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = FormatUtils.formatTime((String) null, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = FormatUtils.formatTime("", "0.00", "/U\"~NW/I|-@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime("20140214202121", "20140214202121");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1000);
      String string0 = FormatUtils.centToAmount(integer0);
      assertEquals("10.00", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      int int0 = FormatUtils.amountToCent(bigDecimal0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-1), mathContext0);
      int int0 = FormatUtils.amountToCent(bigDecimal0);
      assertEquals((-100), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FormatUtils.amountToCent("0.00");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = FormatUtils.amountToCent("202121");
      assertEquals(20212100, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = FormatUtils.amountToCent("20140214202121");
      assertEquals((-414031996), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.getDays((String) null, "D~$^$/c.[W8hB$|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatTime((Date) null, "%cdc@zkM1^?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatMoney("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatMoney((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.amountToCent((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.amountToCent("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime("bFM", "yHmkfIh");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = FormatUtils.getTimes("20140214202121.00", "20140214202121");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime("202121");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.centToAmount((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.getStepDate((String) null, 2031);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.formatTime((Date) null, "202121");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.amountToCent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = FormatUtils.getNowDateTime();
      assertEquals("20140214202121", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormatUtils formatUtils0 = new FormatUtils();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = FormatUtils.getDays("20140214", "20140214");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = FormatUtils.getNowTime();
      assertEquals("202121", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = FormatUtils.getNowDate();
      assertEquals("20140214", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = FormatUtils.formatMoney("20140214202121");
      assertEquals("20140214202121.00", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Date date0 = FormatUtils.formatDateTime("20140214202121");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      int int0 = FormatUtils.amountToCent(bigDecimal0);
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = FormatUtils.formatTime("20140214202121", "20140214202121", "20140214202121");
      assertEquals("20140214202121", string0);
  }
}
