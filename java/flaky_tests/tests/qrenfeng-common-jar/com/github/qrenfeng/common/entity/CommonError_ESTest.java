/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 02:13:26 GMT 2022
 */

package com.github.qrenfeng.common.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.qrenfeng.common.entity.CommonError;
import com.github.qrenfeng.common.exception.CommonException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CommonError_ESTest extends CommonError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonError commonError0 = new CommonError(", msg=", "}w%:z;0!~<9F");
      CommonError commonError1 = new CommonError(", msg=", "z}wQ~3 ");
      boolean boolean0 = commonError0.equals(commonError1);
      assertFalse(boolean0);
      assertEquals(", msg=", commonError1.getCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      commonError0.setMsg("udby,uP%^ AbX(el+");
      String string0 = commonError0.getMsg();
      assertEquals("udby,uP%^ AbX(el+", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = new CommonError.CommonErrorBuilder();
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder1 = commonError_CommonErrorBuilder0.msg("");
      CommonError commonError0 = commonError_CommonErrorBuilder1.build();
      String string0 = commonError0.getMsg();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonException commonException0 = new CommonException();
      CommonError commonError0 = new CommonError(commonException0);
      commonError0.setCode("jSq9{&H3t");
      String string0 = commonError0.getCode();
      assertEquals("jSq9{&H3t", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = CommonError.builder();
      CommonError commonError0 = commonError_CommonErrorBuilder0.build();
      commonError0.setCode("");
      String string0 = commonError0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      boolean boolean0 = commonError0.canEqual(commonError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = CommonError.builder();
      boolean boolean0 = commonError0.canEqual(commonError_CommonErrorBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      String string0 = commonError0.getMsg();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      String string0 = commonError0.getCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      commonError0.setMsg("");
      CommonError commonError1 = new CommonError();
      boolean boolean0 = commonError0.equals(commonError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      CommonError commonError1 = new CommonError();
      assertTrue(commonError1.equals((Object)commonError0));
      
      commonError1.setMsg("{");
      boolean boolean0 = commonError0.equals(commonError1);
      assertFalse(commonError1.equals((Object)commonError0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      CommonError commonError1 = new CommonError("Uc0@ :v", "Uc0@ :v");
      boolean boolean0 = commonError1.equals(commonError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      CommonError commonError1 = new CommonError("", "");
      boolean boolean0 = commonError0.equals(commonError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = new CommonError.CommonErrorBuilder();
      CommonError commonError0 = commonError_CommonErrorBuilder0.build();
      CommonError commonError1 = new CommonError();
      boolean boolean0 = commonError0.equals(commonError1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = new CommonError.CommonErrorBuilder();
      CommonError commonError0 = commonError_CommonErrorBuilder0.build();
      boolean boolean0 = commonError0.equals("com.github.qrenfeng.common.entity.CommonError$CommonErrorBuilder");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommonError commonError0 = new CommonError(":~D>H", "com.github.qrenfeng.common.entity.CommonError$CommonErrorBuilder");
      boolean boolean0 = commonError0.equals(commonError0);
      assertTrue(boolean0);
      assertEquals("com.github.qrenfeng.common.entity.CommonError$CommonErrorBuilder", commonError0.getMsg());
      assertEquals(":~D>H", commonError0.getCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = CommonError.builder();
      commonError_CommonErrorBuilder0.msg("CommonError(code=null, msg=null)");
      CommonError commonError0 = commonError_CommonErrorBuilder0.build();
      commonError0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      commonError0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommonError commonError0 = new CommonError();
      commonError0.setCode("com.github.qrenfeng.common.entity.CommonError$CommonErrorBuilder");
      commonError0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = CommonError.builder();
      String string0 = commonError_CommonErrorBuilder0.toString();
      assertEquals("CommonError.CommonErrorBuilder(code=null, msg=null)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = CommonError.builder();
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder1 = commonError_CommonErrorBuilder0.code("com.github.qrenfeng.common.exception.CommonException$CommonExceptionBuilder");
      assertSame(commonError_CommonErrorBuilder0, commonError_CommonErrorBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CommonError commonError0 = null;
      try {
        commonError0 = new CommonError((CommonException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.entity.CommonError", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommonError.CommonErrorBuilder commonError_CommonErrorBuilder0 = new CommonError.CommonErrorBuilder();
      CommonError commonError0 = commonError_CommonErrorBuilder0.build();
      String string0 = commonError0.toString();
      assertEquals("CommonError(code=null, msg=null)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CommonError commonError0 = new CommonError("]X6_", "]X6_");
      CommonError commonError1 = new CommonError("]X6_", "]X6_");
      boolean boolean0 = commonError0.equals(commonError1);
      assertTrue(boolean0);
  }
}
