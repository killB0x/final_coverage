/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 02:19:16 GMT 2022
 */

package com.github.qrenfeng.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.qrenfeng.common.enums.CharSet;
import com.github.qrenfeng.common.utils.CodeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodeUtils_ESTest extends CodeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      String string0 = CodeUtils.urlEncode("com.github.qrenfeng.common.enums.CharSet", charSet0);
      assertEquals("com.github.qrenfeng.common.enums.CharSet", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      String string0 = CodeUtils.urlEncode("", charSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = CodeUtils.urlEncode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      String string0 = CodeUtils.urlDecode("", charSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = CodeUtils.urlDecode("K/VjMq0-2'G^");
      assertEquals("K%2FVjM%7Fq0-2%27G%5E", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        CodeUtils.urlEncode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      try { 
        CodeUtils.urlDecode((String) null, charSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        CodeUtils.urlDecode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeUtils.getCharset((CharSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharSet charSet0 = CharSet.UTF8;
      try { 
        CodeUtils.base64Encode((String) null, charSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        CodeUtils.base64Encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      // Undeclared exception!
      try { 
        CodeUtils.base64Decode("", charSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/codec/binary/Base64
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        CodeUtils.base64Decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      String string0 = CodeUtils.getCharset(charSet0);
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharSet charSet0 = CharSet.UTF8;
      String string0 = CodeUtils.getCharset(charSet0);
      assertEquals("GBK", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      try { 
        CodeUtils.base64Decode((String) null, charSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharSet charSet0 = CharSet.GBK;
      // Undeclared exception!
      try { 
        CodeUtils.base64Encode("UTF-8", charSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/codec/binary/Base64
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = CodeUtils.urlDecode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharSet charSet0 = CharSet.UTF8;
      try { 
        CodeUtils.urlEncode((String) null, charSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeUtils.base64Encode("-*");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/codec/binary/Base64
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodeUtils.base64Decode("3M");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/codec/binary/Base64
         //
         verifyException("com.github.qrenfeng.common.utils.CodeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = CodeUtils.urlEncode("com.github.qrenfeng.common.enums.CharSet");
      assertEquals("com.github.qrenfeng.common.enums.CharSet", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharSet charSet0 = CharSet.UTF8;
      String string0 = CodeUtils.urlDecode("3M", charSet0);
      assertEquals("3M", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CodeUtils codeUtils0 = new CodeUtils();
  }
}
