/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 15:06:03 GMT 2022
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.Filter;
import spark.Route;
import spark.Spark;
import spark.exception.ExceptionHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Spark_ESTest extends Spark_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Spark.setSecure("'k", (String) null, "/:u}MBo0", "");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.setSecure((String) null, "", "HZ", "a<zPXD|yjKmi8\":%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must provide a keystore file to run secured
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.put(route0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.post(route0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.patch(route0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.options(route0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn("").when(route0).getAcceptType();
      doReturn("").when(route0).getPath();
      Spark.head(route0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.get(route0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExceptionHandler exceptionHandler0 = mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(exceptionHandler0).getExceptionClass();
      Spark.exception(exceptionHandler0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.connect((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.before((Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.after((Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.trace(route0);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filter0).toString();
      doReturn((String) null).when(filter0).getAcceptType();
      doReturn((String) null).when(filter0).getPath();
      Spark.before(filter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spark.runFromServlet();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.connect(route0);
      Spark.runFromServlet();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Spark.stop();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.delete(route0);
      // Undeclared exception!
      try { 
        Spark.externalStaticFileLocation("e[T/Ecp1WB&'PT]}ng");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spark.externalStaticFileLocation("V");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Spark.staticFileLocation("Tpr$0o(i");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.trace(route0);
      // Undeclared exception!
      try { 
        Spark.setPort(2273);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Spark.setPort((-2141));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.trace(route0);
      // Undeclared exception!
      try { 
        Spark.setIpAddress(":LcY1fFi085P");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spark.setIpAddress("L%1!uB;=g");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.trace((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.options((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.patch((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.head((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(route0).toString();
      doReturn((String) null).when(route0).getAcceptType();
      doReturn((String) null).when(route0).getPath();
      Spark.connect(route0);
      // Undeclared exception!
      try { 
        Spark.setSecure("", "b", "#9&.G?8yx ]kRG", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filter0).toString();
      doReturn((String) null).when(filter0).getAcceptType();
      doReturn((String) null).when(filter0).getPath();
      Spark.after(filter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.delete((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.post((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.get((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.exception((ExceptionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filter0).toString();
      doReturn((String) null).when(filter0).getAcceptType();
      doReturn((String) null).when(filter0).getPath();
      Spark.before(filter0);
      // Undeclared exception!
      try { 
        Spark.staticFileLocation("F'1YS<R9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.put((Route) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }
}
