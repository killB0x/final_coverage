/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 15:14:13 GMT 2022
 */

package spark.route;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.route.HttpMethod;
import spark.route.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RouteMatch_ESTest extends RouteMatch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.put;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, httpMethod0, (String) null, (String) null, "get");
      Object object0 = routeMatch0.getTarget();
      assertSame(httpMethod0, object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.put;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, httpMethod0, (String) null, (String) null, "get");
      String string0 = routeMatch0.getRequestURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "", "", "spark.route.RouteMatch");
      String string0 = routeMatch0.getRequestURI();
      assertEquals("spark.route.RouteMatch", routeMatch0.getAcceptType());
      assertEquals("", routeMatch0.getMatchUri());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.put;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, httpMethod0, (String) null, (String) null, "get");
      String string0 = routeMatch0.getMatchUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.post;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "", "", "spark.route.RouteMatch");
      String string0 = routeMatch0.getMatchUri();
      assertEquals("spark.route.RouteMatch", routeMatch0.getAcceptType());
      assertEquals("", string0);
      assertEquals("", routeMatch0.getRequestURI());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.put;
      RouteMatch routeMatch0 = new RouteMatch((HttpMethod) null, httpMethod0, "X", (String) null, (String) null);
      routeMatch0.getHttpMethod();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.options;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "!~?{c{Z-r7&]|J:OB7^", "!~?{c{Z-r7&]|J:OB7^", (String) null);
      String string0 = routeMatch0.getAcceptType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.after;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, httpMethod0, "", "Ru", "");
      String string0 = routeMatch0.getAcceptType();
      assertEquals("Ru", routeMatch0.getRequestURI());
      assertEquals("", string0);
      assertEquals("", routeMatch0.getMatchUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.options;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "!~?{c{Z-r7&]|J:OB7^", "!~?{c{Z-r7&]|J:OB7^", (String) null);
      HttpMethod httpMethod1 = routeMatch0.getHttpMethod();
      assertEquals(HttpMethod.options, httpMethod1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.options;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "!~?{c{Z-r7&]|J:OB7^", "!~?{c{Z-r7&]|J:OB7^", (String) null);
      String string0 = routeMatch0.getMatchUri();
      assertEquals("!~?{c{Z-r7&]|J:OB7^", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.options;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "!~?{c{Z-r7&]|J:OB7^", "!~?{c{Z-r7&]|J:OB7^", (String) null);
      Object object0 = routeMatch0.getTarget();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.options;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, (Object) null, "!~?{c{Z-r7&]|J:OB7^", "!~?{c{Z-r7&]|J:OB7^", (String) null);
      String string0 = routeMatch0.getRequestURI();
      assertEquals("!~?{c{Z-r7&]|J:OB7^", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpMethod httpMethod0 = HttpMethod.after;
      RouteMatch routeMatch0 = new RouteMatch(httpMethod0, httpMethod0, "_ux#QFXw", "_ux#QFXw", "_ux#QFXw");
      String string0 = routeMatch0.getAcceptType();
      assertEquals("_ux#QFXw", string0);
  }
}
