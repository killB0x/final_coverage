/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:11:08 GMT 2022
 */

package in.tombo.ponto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import in.tombo.ponto.MethodType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodType_ESTest extends MethodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MethodType.findMethodType("_timestamp");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MethodType methodType0 = MethodType.DATE;
      String string0 = methodType0.toMethodString("B>", "lzy", "");
      assertEquals("B> java.util.Date lzy() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"\")); } catch (Exception e) { throw new RuntimeException(e); } }", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MethodType methodType0 = MethodType.BOOLEAN;
      String string0 = methodType0.toMethodString("_timestamp", "Zu*|Lga4crP(kmw/V", "$VALUES");
      assertEquals("_timestamp boolean Zu*|Lga4crP(kmw/V() { String p = (getProperty(\"$VALUES\")); if (\"true\".equalsIgnoreCase(p)) {return true;} if (\"false\".equalsIgnoreCase(p)) {return false;} throw new RuntimeException(\"$VALUES is showuld be true or false.\"); }", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MethodType methodType0 = MethodType.DOUBLE;
      String string0 = methodType0.toMethodString("L%XnQmF=lO#*XXIl(", "wd2#QOLqw(6r&4", "k;25=4DY,?O6rY`FjL");
      assertEquals("L%XnQmF=lO#*XXIl( double wd2#QOLqw(6r&4() { return Double.valueOf(getProperty(\"k;25=4DY,?O6rY`FjL\")); }", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MethodType methodType0 = MethodType.FLOAT;
      String string0 = methodType0.toMethodString("STRING", ":G-q(L`dR", "4M");
      assertEquals("STRING float :G-q(L`dR() { return Float.valueOf(getProperty(\"4M\")); }", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodType methodType0 = MethodType.LONG;
      String string0 = methodType0.toMethodString("_long", "uOed", "*!$XNL!qC:C^");
      assertEquals("_long long uOed() { return Long.valueOf(getProperty(\"*!$XNL!qC:C^\")); }", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MethodType methodType0 = MethodType.INTEGER;
      String string0 = methodType0.toMethodString("L%XnQmF=lO#*XXIl(", "9E", "");
      assertEquals("L%XnQmF=lO#*XXIl( int 9E() { return Integer.valueOf(getProperty(\"\")); }", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MethodType methodType0 = MethodType.REGEXP;
      String string0 = methodType0.toMethodString("wd2#QOLqw(6r&4", "k;25=4DY,?O6rY`FjL", "w.");
      assertEquals("wd2#QOLqw(6r&4 java.util.regex.Pattern k;25=4DY,?O6rY`FjL() { return java.util.regex.Pattern.compile(getProperty(\"w.\")); }", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MethodType methodType0 = MethodType.findMethodType("YE6");
      String string0 = methodType0.toMethodString("YE6", "*!$XNL!qC:C^", "_long");
      assertEquals("YE6 String *!$XNL!qC:C^() { return getProperty(\"_long\"); }", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodType methodType0 = MethodType.DOUBLE;
      boolean boolean0 = methodType0.isValid("_date");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MethodType methodType0 = MethodType.FLOAT;
      boolean boolean0 = methodType0.isValid("&gHIcQ;d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MethodType methodType0 = MethodType.LONG;
      boolean boolean0 = methodType0.isValid("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MethodType methodType0 = MethodType.INTEGER;
      boolean boolean0 = methodType0.isValid("~hqSL2gNdxgl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MethodType methodType0 = MethodType.REGEXP;
      boolean boolean0 = methodType0.isValid("6wx?dtiC(Ex])H]+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MethodType[] methodTypeArray0 = MethodType.values();
      assertEquals(9, methodTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MethodType.valueOf("STRING");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MethodType methodType0 = MethodType.findMethodType("yyyy-MM-dd");
      String string0 = methodType0.getMethodKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MethodType methodType0 = MethodType.DOUBLE;
      String string0 = methodType0.getMethodKey();
      assertEquals("_double", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MethodType methodType0 = MethodType.DOUBLE;
      // Undeclared exception!
      try { 
        methodType0.isValid((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodType.findMethodType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("in.tombo.ponto.MethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodType.findMethodType(".");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("in.tombo.ponto.MethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MethodType.findMethodType("_date");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MethodType methodType0 = MethodType.BOOLEAN;
      boolean boolean0 = methodType0.isValid("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MethodType methodType0 = MethodType.BOOLEAN;
      boolean boolean0 = methodType0.isValid("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MethodType methodType0 = MethodType.BOOLEAN;
      boolean boolean0 = methodType0.isValid("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MethodType methodType0 = MethodType.REGEXP;
      boolean boolean0 = methodType0.isValid("_double boolean _double() { String p = (getProperty(\"F\")); if (\"true\".equalsIgnoreCase(p)) {return true;} if (\"false\".equalsIgnoreCase(p)) {return false;} throw new RuntimeException(\"F is showuld be true or false.\"); }");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MethodType methodType0 = MethodType.LONG;
      boolean boolean0 = methodType0.isValid("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MethodType methodType0 = MethodType.INTEGER;
      boolean boolean0 = methodType0.isValid("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MethodType methodType0 = MethodType.TIMESTAMP;
      String string0 = methodType0.toMethodString("", "v_ java.util.Date v_() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"\")); } catch (Exception e) { throw new RuntimeException(e); } } java.util.Date v_ java.util.Date v_() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"\")); } catch (Exception e) { throw new RuntimeException(e); } }() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"v_\")); } catch (Exception e) { throw new RuntimeException(e); } }", "\"); }");
      assertEquals(" java.util.Date v_ java.util.Date v_() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"\")); } catch (Exception e) { throw new RuntimeException(e); } } java.util.Date v_ java.util.Date v_() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"\")); } catch (Exception e) { throw new RuntimeException(e); } }() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd\").parse(getProperty(\"v_\")); } catch (Exception e) { throw new RuntimeException(e); } }() { try { return new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(getProperty(\"\"); }\")); } catch (Exception e) { throw new RuntimeException(e); } }", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MethodType methodType0 = MethodType.TIMESTAMP;
      boolean boolean0 = methodType0.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MethodType methodType0 = MethodType.DOUBLE;
      boolean boolean0 = methodType0.isValid(" 69");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MethodType methodType0 = MethodType.FLOAT;
      boolean boolean0 = methodType0.isValid("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MethodType methodType0 = MethodType.DATE;
      boolean boolean0 = methodType0.isValid("~hqSL2gNdxgl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MethodType methodType0 = MethodType.findMethodType("_double boolean _double() { String p = (getProperty(\"F\")); if (\"true\".equalsIgnoreCase(p)) {return true;} if (\"false\".equalsIgnoreCase(p)) {return false;} throw new RuntimeException(\"F is showuld be true or false.\"); }");
      boolean boolean0 = methodType0.isValid("753C(bbyF7{#");
      assertTrue(boolean0);
  }
}
