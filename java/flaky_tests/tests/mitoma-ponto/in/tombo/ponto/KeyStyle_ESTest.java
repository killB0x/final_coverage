/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:10:14 GMT 2022
 */

package in.tombo.ponto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import in.tombo.ponto.KeyStyle;
import java.io.File;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyStyle_ESTest extends KeyStyle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeyStyle[] keyStyleArray0 = KeyStyle.values();
      assertEquals(3, keyStyleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeyStyle.valueOf("Bean");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      KeyStyle keyStyle0 = KeyStyle.Bean;
      // Undeclared exception!
      try { 
        keyStyle0.validateProperties(linkedList0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("in.tombo.ponto.KeyStyle$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyStyle keyStyle0 = KeyStyle.Flat;
      File file0 = MockFile.createTempFile("String p = (getProperty(\"%s\")); ", "String p = (getProperty(\"%s\")); ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Properties properties0 = new Properties();
      properties0.put(keyStyle0, "PBl@2#2{7'NSV!");
      keyStyle0.writeMethods(mockPrintWriter0, properties0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = KeyStyle.commentString("'Z+!6&Y*!/`_", "'Z+!6&Y*!/`_", (-353));
      assertEquals("/**\n * Key<br>\n * <pre>'Z+!6&Y*!/`_</pre><br>\n * Value<br>\n * <pre>'Z+!6&Y*!/`_</pre>\n */", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KeyStyle keyStyle0 = KeyStyle.Bean;
      MockPrintStream mockPrintStream0 = new MockPrintStream("mK");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      properties0.put("w{C}1N(t=<T-<@s", mockPrintWriter0);
      keyStyle0.validateProperties(linkedList0, properties0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put("yZ+!6Y*!/`_", "yZ+!6Y*!/`_");
      KeyStyle keyStyle0 = KeyStyle.Flat;
      // Undeclared exception!
      try { 
        keyStyle0.writeMethods((PrintWriter) null, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("in.tombo.ponto.KeyStyle$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeyStyle keyStyle0 = KeyStyle.Hierarchical;
      Properties properties0 = new Properties();
      properties0.put(keyStyle0, keyStyle0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k_|hwB");
      keyStyle0.writeMethods(mockPrintWriter0, properties0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KeyStyle keyStyle0 = KeyStyle.Hierarchical;
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      keyStyle0.validateProperties(linkedList0, properties0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      KeyStyle keyStyle0 = KeyStyle.Bean;
      Properties properties0 = new Properties();
      properties0.put(keyStyle0, keyStyle0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k_|hwB");
      keyStyle0.writeMethods(mockPrintWriter0, properties0);
  }
}
