/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:07:44 GMT 2022
 */

package in.tombo.ponto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import in.tombo.ponto.PontoProcessor;
import java.lang.annotation.Annotation;
import java.util.LinkedHashSet;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.TypeElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PontoProcessor_ESTest extends PontoProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PontoProcessor pontoProcessor0 = new PontoProcessor();
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn((Annotation) null).when(typeElement0).getAnnotation(any(java.lang.Class.class));
      linkedHashSet0.add(typeElement0);
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Messager) null).when(processingEnvironment0).getMessager();
      pontoProcessor0.init(processingEnvironment0);
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      // Undeclared exception!
      try { 
        pontoProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("in.tombo.ponto.PontoProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PontoProcessor pontoProcessor0 = new PontoProcessor();
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(annotation0).when(typeElement0).getAnnotation(any(java.lang.Class.class));
      linkedHashSet0.add(typeElement0);
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      // Undeclared exception!
      try { 
        pontoProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.evosuite.shaded.org.mockito.codegen.Annotation$MockitoMock$119990813 cannot be cast to class in.tombo.ponto.ConstantResource (org.evosuite.shaded.org.mockito.codegen.Annotation$MockitoMock$119990813 is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @620d58f7; in.tombo.ponto.ConstantResource is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @149691cc)
         //
         verifyException("in.tombo.ponto.PontoProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PontoProcessor pontoProcessor0 = new PontoProcessor();
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(java.lang.Class.class));
      boolean boolean0 = pontoProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertTrue(boolean0);
  }
}
