/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:03:49 GMT 2022
 */

package com.aliyun.openservices.log.flink.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aliyun.openservices.log.flink.internal.ProducerConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProducerConfig_ESTest extends ProducerConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setBuckets(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buckets must be a power of 2, but was 0
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setAdjustShardHash(false);
      assertFalse(producerConfig0.isAdjustShardHash());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setIoThreadNum(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ioThreadNum must be positive
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setProducerQueueSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // producerQueueSize must be > 0
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setFlushInterval(100L);
      assertEquals(100L, producerConfig0.getFlushInterval());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setLogGroupMaxLines(40960);
      assertEquals(40960, producerConfig0.getLogGroupMaxLines());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupMaxLines(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupMaxLines must be within range (0, 40960]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setLogGroupSize(1388);
      assertEquals(1388, producerConfig0.getLogGroupSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupSize(8388608);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupSize must be within range (0, 8388608]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupSize((-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupSize must be within range (0, 8388608]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      assertEquals(0, producerConfig0.getTotalSizeInBytes());
      
      producerConfig0.setTotalSizeInBytes(1);
      int int0 = producerConfig0.getTotalSizeInBytes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setTotalSizeInBytes((-2381));
      int int0 = producerConfig0.getTotalSizeInBytes();
      assertEquals((-2381), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setProject("0,E<");
      String string0 = producerConfig0.getProject();
      assertEquals("0,E<", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setProducerQueueSize(98);
      int int0 = producerConfig0.getProducerQueueSize();
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setLogstore("");
      String string0 = producerConfig0.getLogstore();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      assertEquals(0, producerConfig0.getLogGroupMaxLines());
      
      producerConfig0.setLogGroupMaxLines(1);
      int int0 = producerConfig0.getLogGroupMaxLines();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setIoThreadNum(2866);
      int int0 = producerConfig0.getIoThreadNum();
      assertEquals(2866, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setFlushInterval(2653L);
      long long0 = producerConfig0.getFlushInterval();
      assertEquals(2653L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setEndpoint("buckets must be a power of 2, but was ");
      String string0 = producerConfig0.getEndpoint();
      assertEquals("buckets must be a power of 2, but was ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setEndpoint("");
      String string0 = producerConfig0.getEndpoint();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      assertEquals(0, producerConfig0.getBuckets());
      
      producerConfig0.setBuckets(8388608);
      int int0 = producerConfig0.getBuckets();
      assertEquals(8388608, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setAccessKeySecret("9");
      String string0 = producerConfig0.getAccessKeySecret();
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setAccessKeySecret("");
      String string0 = producerConfig0.getAccessKeySecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setAccessKeyId("bgtE%6r[G|AE`R<OQ");
      String string0 = producerConfig0.getAccessKeyId();
      assertEquals("bgtE%6r[G|AE`R<OQ", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setAccessKeyId("");
      String string0 = producerConfig0.getAccessKeyId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setBuckets((-1675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buckets must be a power of 2, but was -1675
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setBuckets(5000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // buckets must be a power of 2, but was 5000
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setBuckets(1);
      assertEquals(1, producerConfig0.getBuckets());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setAccessKeySecret((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // accessKeySecret cannot be null
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setAccessKeyId((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // accessKeyId cannot be null
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogstore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logstore cannot be null
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setLogstore("buckets must be a power of 2, but was ");
      String string0 = producerConfig0.getLogstore();
      assertEquals("buckets must be a power of 2, but was ", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setProject((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // project cannot be null
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      producerConfig0.setProject("");
      String string0 = producerConfig0.getProject();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setEndpoint((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoint cannot be null
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setIoThreadNum((-619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ioThreadNum must be positive
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setProducerQueueSize((-1823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // producerQueueSize must be > 0
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setFlushInterval(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // flushInterval must be > 100
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupMaxLines(8388608);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupMaxLines must be within range (0, 40960]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupMaxLines((-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupMaxLines must be within range (0, 40960]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupSize(209715200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupSize must be within range (0, 8388608]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      assertEquals(0, producerConfig0.getLogGroupSize());
      
      producerConfig0.setLogGroupSize(1);
      int int0 = producerConfig0.getLogGroupSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      // Undeclared exception!
      try { 
        producerConfig0.setLogGroupSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // logGroupSize must be within range (0, 8388608]
         //
         verifyException("com.aliyun.openservices.log.flink.internal.ProducerConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      assertFalse(producerConfig0.isAdjustShardHash());
      
      producerConfig0.setAdjustShardHash(true);
      boolean boolean0 = producerConfig0.isAdjustShardHash();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getIoThreadNum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.toString();
      assertEquals("ProducerConfig{totalSizeInBytes=0, logGroupSize=0, ioThreadNum=0, logGroupMaxLines=0, flushInterval=0, endpoint='null', project='null', logstore='null'}", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.getEndpoint();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.getLogstore();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.getAccessKeyId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getProducerQueueSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      long long0 = producerConfig0.getFlushInterval();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getLogGroupMaxLines();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getBuckets();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      boolean boolean0 = producerConfig0.isAdjustShardHash();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.getAccessKeySecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getLogGroupSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      String string0 = producerConfig0.getProject();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ProducerConfig producerConfig0 = new ProducerConfig();
      int int0 = producerConfig0.getTotalSizeInBytes();
      assertEquals(0, int0);
  }
}
