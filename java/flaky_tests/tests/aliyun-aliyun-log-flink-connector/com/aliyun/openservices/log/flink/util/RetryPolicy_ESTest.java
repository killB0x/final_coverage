/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:16:49 GMT 2022
 */

package com.aliyun.openservices.log.flink.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.aliyun.openservices.log.flink.util.RetryPolicy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RetryPolicy_ESTest extends RetryPolicy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      retryPolicy_RetryPolicyBuilder0.maxRetryBackoff(961L);
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      long long0 = retryPolicy0.getMaxRetryBackoff();
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
      assertEquals(961L, long0);
      assertEquals(0, retryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      retryPolicy_RetryPolicyBuilder0.maxRetryBackoff((-1410L));
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      long long0 = retryPolicy0.getMaxRetryBackoff();
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
      assertEquals((-1410L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder1 = retryPolicy_RetryPolicyBuilder0.maxRetriesForRetryableError(5);
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder1.build();
      int int0 = retryPolicy0.getMaxRetriesForRetryableError();
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      retryPolicy_RetryPolicyBuilder0.maxRetriesForRetryableError((-3845));
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      int int0 = retryPolicy0.getMaxRetriesForRetryableError();
      assertEquals((-3845), int0);
      assertEquals(0, retryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder1 = retryPolicy_RetryPolicyBuilder0.maxRetries((-1));
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder1.build();
      int int0 = retryPolicy0.getMaxRetries();
      assertEquals((-1), int0);
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      retryPolicy_RetryPolicyBuilder0.baseRetryBackoff(848L);
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      long long0 = retryPolicy0.getBaseRetryBackoff();
      assertEquals(848L, long0);
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder1 = retryPolicy_RetryPolicyBuilder0.baseRetryBackoff((-743L));
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder1.build();
      long long0 = retryPolicy0.getBaseRetryBackoff();
      assertEquals((-743L), long0);
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RetryPolicy retryPolicy0 = new RetryPolicy();
      assertEquals(0, retryPolicy0.getMaxRetries());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      int int0 = retryPolicy0.getMaxRetries();
      assertEquals(0, int0);
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      retryPolicy0.getBaseRetryBackoff();
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      retryPolicy0.getMaxRetryBackoff();
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder1 = retryPolicy_RetryPolicyBuilder0.maxRetries(3548);
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder1.build();
      int int0 = retryPolicy0.getMaxRetries();
      assertEquals(3548, int0);
      assertEquals(0, retryPolicy0.getMaxRetriesForRetryableError());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RetryPolicy.RetryPolicyBuilder retryPolicy_RetryPolicyBuilder0 = RetryPolicy.builder();
      RetryPolicy retryPolicy0 = retryPolicy_RetryPolicyBuilder0.build();
      int int0 = retryPolicy0.getMaxRetriesForRetryableError();
      assertEquals(0, retryPolicy0.getMaxRetries());
      assertEquals(0, int0);
  }
}
