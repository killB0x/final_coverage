/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:17:01 GMT 2022
 */

package com.aliyun.openservices.log.flink.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aliyun.openservices.log.flink.model.DefaultShardAssigner;
import com.aliyun.openservices.log.flink.model.LogstoreShardMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultShardAssigner_ESTest extends DefaultShardAssigner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultShardAssigner defaultShardAssigner0 = new DefaultShardAssigner();
      LogstoreShardMeta logstoreShardMeta0 = new LogstoreShardMeta((String) null, 542, "");
      int int0 = defaultShardAssigner0.assign(logstoreShardMeta0, 542);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultShardAssigner defaultShardAssigner0 = new DefaultShardAssigner();
      LogstoreShardMeta logstoreShardMeta0 = new LogstoreShardMeta((String) null, 542, "");
      int int0 = defaultShardAssigner0.assign(logstoreShardMeta0, (-1822));
      assertEquals(542, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultShardAssigner defaultShardAssigner0 = new DefaultShardAssigner();
      LogstoreShardMeta logstoreShardMeta0 = new LogstoreShardMeta("P&PF-4", (-1576), "P&PF-4");
      int int0 = defaultShardAssigner0.assign(logstoreShardMeta0, 31);
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultShardAssigner defaultShardAssigner0 = new DefaultShardAssigner();
      LogstoreShardMeta logstoreShardMeta0 = new LogstoreShardMeta("", 0, "");
      // Undeclared exception!
      try { 
        defaultShardAssigner0.assign(logstoreShardMeta0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.aliyun.openservices.log.flink.model.DefaultShardAssigner", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultShardAssigner defaultShardAssigner0 = new DefaultShardAssigner();
      // Undeclared exception!
      try { 
        defaultShardAssigner0.assign((LogstoreShardMeta) null, (-1345));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aliyun.openservices.log.flink.model.DefaultShardAssigner", e);
      }
  }
}
