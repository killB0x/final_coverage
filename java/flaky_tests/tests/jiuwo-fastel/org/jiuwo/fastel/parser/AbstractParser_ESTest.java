/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:08:55 GMT 2022
 */

package org.jiuwo.fastel.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.parser.ExpressionParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractParser_ESTest extends AbstractParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("yp:");
      expressionParser0.getElValue();
      assertEquals(0, expressionParser0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("");
      expressionParser0.getElValue();
      assertEquals(0, expressionParser0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("");
      int int0 = expressionParser0.getElSize();
      assertEquals(0, int0);
      assertEquals(0, expressionParser0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("o");
      int int0 = expressionParser0.getElSize();
      assertEquals(1, int0);
      assertEquals(0, expressionParser0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("Ji'q;");
      int int0 = expressionParser0.getCurrentIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("org.jiuwo.fastel.parser.AbstractParser");
      expressionParser0.findNumber();
      int int0 = expressionParser0.getCurrentIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("Ji'q;");
      expressionParser0.currentIndex = (-3541);
      int int0 = expressionParser0.getCurrentIndex();
      assertEquals((-3541), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("\uFEFF\uFEFF<");
      assertEquals(0, expressionParser0.getCurrentIndex());
      assertEquals("\uFEFF<", expressionParser0.getElValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("Ji'q;");
      String string0 = expressionParser0.getUfeff();
      assertEquals(0, expressionParser0.getCurrentIndex());
      assertEquals("\uFEFF", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("");
      expressionParser0.setCurrentIndex(24);
      assertEquals(24, expressionParser0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser("aE]wd<fbc%3@!|^oMB+");
      // Undeclared exception!
      try { 
        expressionParser0.findNumber();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
