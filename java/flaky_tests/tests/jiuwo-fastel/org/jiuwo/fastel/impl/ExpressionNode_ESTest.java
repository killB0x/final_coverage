/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:01:43 GMT 2022
 */

package org.jiuwo.fastel.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.contract.enums.ExpressionEnum;
import org.jiuwo.fastel.impl.ExpressionNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpressionNode_ESTest extends ExpressionNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      ExpressionNode expressionNode1 = new ExpressionNode(expressionEnum_Token0, expressionEnum_Token0);
      expressionNode0.setRight(expressionNode1);
      assertEquals(ExpressionEnum.Token.VALUE_CONSTANTS, expressionNode1.getToken());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionNode expressionNode0 = new ExpressionNode((ExpressionEnum.Token) null, (Object) null);
      expressionNode0.getToken();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionNode expressionNode0 = new ExpressionNode("%");
      ExpressionEnum.Token expressionEnum_Token0 = expressionNode0.getToken();
      assertEquals(354, expressionEnum_Token0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.BRACKET_END;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, (Object) null);
      expressionNode0.setLeft(expressionNode0);
      ExpressionNode expressionNode1 = expressionNode0.getLeft();
      assertSame(expressionNode1, expressionNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionNode.isPrefix((ExpressionEnum.Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.impl.ExpressionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionNode.getArgCount((ExpressionEnum.Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.impl.ExpressionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_BIT_AND;
      int int0 = ExpressionNode.getArgCount(expressionEnum_Token0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      boolean boolean0 = ExpressionNode.isPrefix(expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      int int0 = ExpressionNode.getArgCount(expressionEnum_Token0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_INVOKE_WITH_STATIC_PARAM;
      boolean boolean0 = ExpressionNode.isPrefix(expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionNode expressionNode0 = null;
      try {
        expressionNode0 = new ExpressionNode("!cw5kt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u672A\u77E5\u64CD\u4F5C\u7B26\uFF1A!cw5kt
         //
         verifyException("org.jiuwo.fastel.impl.ExpressionNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionNode expressionNode0 = new ExpressionNode("%");
      Object object0 = expressionNode0.getParam();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_INVOKE;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, expressionEnum_Token0);
      expressionNode0.setLeft((ExpressionNode) null);
      assertEquals(ExpressionEnum.Token.OP_INVOKE, expressionNode0.getToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      ExpressionNode expressionNode1 = expressionNode0.getRight();
      assertNull(expressionNode1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      Object object1 = expressionNode0.getParam();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GET_STATIC;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, expressionEnum_Token0);
      ExpressionNode expressionNode1 = expressionNode0.getLeft();
      assertNull(expressionNode1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      ExpressionEnum.Token expressionEnum_Token1 = expressionNode0.getToken();
      assertSame(expressionEnum_Token1, expressionEnum_Token0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      expressionNode0.setRight(expressionNode0);
      ExpressionNode expressionNode1 = expressionNode0.getRight();
      assertSame(expressionNode1, expressionNode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_CONSTANTS;
      Object object0 = new Object();
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      expressionNode0.setParam(object0);
      assertEquals(ExpressionEnum.Token.VALUE_CONSTANTS, expressionNode0.getToken());
  }
}
