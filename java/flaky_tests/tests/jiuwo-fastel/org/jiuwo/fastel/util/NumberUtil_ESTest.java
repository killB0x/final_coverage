/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:46:25 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.contract.ParserParam;
import org.jiuwo.fastel.contract.enums.ExpressionEnum;
import org.jiuwo.fastel.util.NumberUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtil_ESTest extends NumberUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("2e%(/\"m", 0);
      parserParam0.plusOne();
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(101, parserParam0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("JXAH=6GY=$cjM$Vl", 1);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(3, parserParam0.getCurrentIndex());
      assertEquals((-10L), number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("x99%b$258wqa{T", 0);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(3, parserParam0.getCurrentIndex());
      assertEquals(153L, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("*a}Kxe0oCo?y'/jV", 4);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(7, parserParam0.getCurrentIndex());
      assertEquals((-224L), number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam(".9kHR3wkA'W'q@~M", 0);
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(97, parserParam0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("EXU&+,Es)psd", 5);
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(1150, parserParam0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("G1(z5n:d]y", 5);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("", 0);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = Float.valueOf((-3217.8086F));
      Number number0 = NumberUtil.multiply(float0, float0);
      assertEquals(1.0354292E7F, number0);
      
      Number number1 = NumberUtil.modulus(number0, float0);
      assertEquals(2601.754F, number1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = Long.getLong((String) null, (long) (short)78);
      Long long1 = Long.getLong("kRCq;", (long) (short)69);
      Number number0 = NumberUtil.modulus(long1, long0);
      assertEquals(69L, number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-117));
      Number number0 = NumberUtil.modulus(0, byte0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = Float.valueOf(250.6F);
      Short short0 = Short.valueOf((short)69);
      Number number0 = NumberUtil.divide(float0, short0);
      assertEquals(3.631884F, number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-3823.6079706));
      Number number0 = NumberUtil.multiply(double0, double0);
      assertEquals(1.4619977912835851E7, number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = Float.valueOf((-3217.8086F));
      Short short0 = Short.valueOf((short)322);
      Number number0 = NumberUtil.multiply(short0, float0);
      assertEquals((-1036134.4F), number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("MATH_SQRT2", 0);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      Long long0 = Long.getLong((String) null, (long) (short)78);
      Number number1 = NumberUtil.multiply(number0, long0);
      assertEquals(0L, number1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      ParserParam parserParam0 = new ParserParam("rEQD-#^", 5);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      Number number1 = NumberUtil.multiply(number0, integer0);
      assertEquals(0, number1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = Double.valueOf((-3112.5253998));
      Number number0 = NumberUtil.plus(double0, double0);
      Number number1 = NumberUtil.subtract(double0, number0);
      assertEquals(3112.5253998, number1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = Float.valueOf(250.6F);
      Long long0 = Long.getLong("", 0L);
      Number number0 = NumberUtil.subtract(float0, long0);
      assertEquals(250.6F, number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = Long.getLong("EXU&+,Es)psd", (-3151L));
      Number number0 = NumberUtil.multiply(long0, long0);
      assertEquals(9928801L, number0);
      
      Number number1 = NumberUtil.subtract(long0, number0);
      assertEquals((-9931952L), number1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = Float.valueOf(250.6F);
      Long long0 = Long.getLong("", 0L);
      Number number0 = NumberUtil.plus(float0, long0);
      assertEquals(250.6F, number0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long(3242L);
      Number number0 = NumberUtil.multiply(long0, long0);
      assertEquals(10510564L, number0);
      
      Number number1 = NumberUtil.plus(number0, long0);
      assertEquals(10513806L, number1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(32);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_EQ_STRICT;
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      boolean boolean0 = NumberUtil.compare(number0, integer0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short) (-499));
      Integer integer0 = new Integer((short) (-499));
      Number number0 = NumberUtil.divide(integer0, short0);
      assertEquals(1.0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LT;
      boolean boolean0 = NumberUtil.compare(number0, short0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = Double.valueOf(5978.0);
      Number number0 = NumberUtil.subtract(double0, double0);
      assertEquals(0.0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GTEQ;
      boolean boolean0 = NumberUtil.compare(double0, number0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1333));
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GT;
      ParserParam parserParam0 = new ParserParam("DWk!o\"T7K9pOoP", 5);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(0, number0);
      
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("Z`~*&.6<", 5);
      Number number0 = NumberUtil.parseFloat(5, parserParam0);
      assertEquals(0.6, number0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)45);
      int int0 = NumberUtil.getNumberType(byte0, byte0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.subtract((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.plus((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("", (-1758));
      // Undeclared exception!
      try { 
        NumberUtil.parseZero(true, parserParam0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.parseZero(false, (ParserParam) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat((byte) (-123), (ParserParam) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.multiply((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.modulus((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.getNumberType((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.divide((Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_VAR;
      // Undeclared exception!
      try { 
        NumberUtil.compare((Number) null, (Number) null, expressionEnum_Token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("lN{]fKCGJU5>q!~X", 16);
      parserParam0.subtractOne();
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(16, parserParam0.getCurrentIndex());
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam(".,BKil8QR", 0);
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(0, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("MATH_SQRT2", 0);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(0, number0);
      
      Short short0 = Short.valueOf((short)8480);
      int int0 = NumberUtil.getNumberType(short0, number0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("3&X#-+c9~2[GMgB`8W", 0);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(1, parserParam0.getCurrentIndex());
      assertEquals(3, number0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("3X#-+c9~2[GMgB`8W", 0);
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(0, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("*a}Kxe0oCo?y'/jV", 4);
      parserParam0.plusOne();
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(4, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("BE,=F.,", 0);
      parserParam0.plusOne();
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(0, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("&0@9}.", 5);
      // Undeclared exception!
      try { 
        NumberUtil.parseFloat(5, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("):M-xsu]s?VPE]oK.5X", 16);
      // Undeclared exception!
      try { 
        NumberUtil.parseZero(false, parserParam0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("767{UNZb", 0);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      assertEquals(3, parserParam0.getCurrentIndex());
      assertEquals((-503), number0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("0;tC56Ja)", 0);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(0, parserParam0.getCurrentIndex());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("C5WvZG'Vu2+>9@9<<Le", (byte)70);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Double double0 = Double.valueOf((-0.49419838607806116));
      Number number0 = NumberUtil.modulus(double0, double0);
      assertEquals(-0.0, number0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Short short0 = new Short((short) (-499));
      Number number0 = NumberUtil.modulus(short0, short0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam(".,BKil8QR", 8);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      // Undeclared exception!
      try { 
        NumberUtil.modulus(number0, number0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)70);
      Number number0 = NumberUtil.modulus(byte0, byte0);
      assertEquals(0, number0);
      
      Float float0 = Float.valueOf((float) 5);
      Number number1 = NumberUtil.divide(number0, float0);
      assertEquals(0.0F, number1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Short short0 = Short.valueOf((short)69);
      Number number0 = NumberUtil.divide(short0, short0);
      Number number1 = NumberUtil.modulus(short0, number0);
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      Number number0 = NumberUtil.divide(byte0, byte0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Number number0 = NumberUtil.divide(integer0, integer0);
      Number number1 = NumberUtil.multiply(integer0, number0);
      assertEquals(32.0, number1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Short short0 = Short.valueOf((short)69);
      Number number0 = NumberUtil.multiply(short0, short0);
      assertEquals(4761, number0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-108));
      Number number0 = NumberUtil.multiply(byte0, byte0);
      assertEquals(11664, number0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Float float0 = Float.valueOf((float) 5);
      Number number0 = NumberUtil.subtract(float0, float0);
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)70);
      Number number0 = NumberUtil.modulus(byte0, byte0);
      assertEquals(0, number0);
      
      Number number1 = NumberUtil.subtract(byte0, number0);
      assertEquals(70, number1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      Number number0 = NumberUtil.subtract(short0, short0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("aXXba2Z]k<*tl@E", 2);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      Number number1 = NumberUtil.subtract(number0, number0);
      assertEquals(6, parserParam0.getCurrentIndex());
      assertEquals(0L, number1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      Number number0 = NumberUtil.subtract(byte0, byte0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Float float0 = Float.valueOf((-3217.8086F));
      Number number0 = NumberUtil.plus(float0, float0);
      assertEquals((-6435.617F), number0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)70);
      Number number0 = NumberUtil.modulus(byte0, byte0);
      assertEquals(0, number0);
      
      Number number1 = NumberUtil.plus(number0, byte0);
      assertEquals(70, number1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Short short0 = Short.valueOf((short)69);
      Number number0 = NumberUtil.plus(short0, short0);
      assertEquals(138, number0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Number number0 = NumberUtil.divide(integer0, integer0);
      Number number1 = NumberUtil.plus(number0, integer0);
      assertEquals(33.0, number1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)70);
      Number number0 = NumberUtil.plus(byte0, byte0);
      assertEquals(140, number0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_EQ;
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      Number number0 = NumberUtil.modulus(byte0, byte0);
      assertEquals(0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_MAP;
      boolean boolean0 = NumberUtil.compare(byte0, number0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-3663));
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LT;
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GTEQ;
      boolean boolean0 = NumberUtil.compare(byte0, byte0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("MATH_LN10", 7);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      Integer integer0 = Integer.valueOf(2469);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GT;
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertEquals(9, parserParam0.getCurrentIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-115));
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_BIT_XOR;
      // Undeclared exception!
      try { 
        NumberUtil.compare(byte0, byte0, expressionEnum_Token0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u65E0\u6548\u6BD4\u8F83\u7C7B\u578B:OP_BIT_XOR
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-127));
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_NE_STRICT;
      boolean boolean0 = NumberUtil.compare(byte0, byte0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(956);
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_NE;
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam(".,BKil8QR", 8);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      assertEquals(0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_EQ_STRICT;
      boolean boolean0 = NumberUtil.compare(number0, number0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LTEQ;
      boolean boolean0 = NumberUtil.compare(integer0, integer0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = Integer.valueOf(5);
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_MAP;
      boolean boolean0 = NumberUtil.compare(number0, integer0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Double double0 = new Double(0.0);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GTEQ;
      boolean boolean0 = NumberUtil.compare(double0, 5, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("MATH_LN10", 7);
      Number number0 = NumberUtil.parseZero(false, parserParam0);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GT;
      boolean boolean0 = NumberUtil.compare(number0, number0, expressionEnum_Token0);
      assertEquals(9, parserParam0.getCurrentIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Number number0 = NumberUtil.divide(integer0, integer0);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_NE_STRICT;
      boolean boolean0 = NumberUtil.compare(number0, integer0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LT;
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(Double.NaN, number0);
      
      boolean boolean0 = NumberUtil.compare(integer0, number0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(7);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LT;
      Number number0 = NumberUtil.divide(integer0, integer0);
      assertEquals(1.0, number0);
      
      boolean boolean0 = NumberUtil.compare(number0, number0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Double double0 = new Double(0.0);
      Number number0 = NumberUtil.divide(double0, double0);
      assertEquals(Double.NaN, number0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_NE;
      boolean boolean0 = NumberUtil.compare(number0, double0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserParam parserParam0 = new ParserParam("*2exeFmx0&;", 3);
      Number number0 = NumberUtil.parseZero(true, parserParam0);
      Number number1 = NumberUtil.divide(number0, number0);
      Number number2 = NumberUtil.divide(number0, number1);
      assertEquals(6, parserParam0.getCurrentIndex());
      assertEquals((-239.0), number2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      NumberUtil numberUtil0 = new NumberUtil();
  }
}
