/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:50:37 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.contract.enums.ExpressionEnum;
import org.jiuwo.fastel.util.ObjectUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectUtil_ESTest extends ObjectUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      boolean boolean0 = ObjectUtil.in((Object) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(7);
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_NE_STRICT;
      Integer integer1 = Integer.getInteger("GD0cB_?~n@P3uFE", 1221);
      boolean boolean0 = ObjectUtil.compare(integer0, integer1, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(0);
      boolean boolean0 = ObjectUtil.isEquals(integer0, integer1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ObjectUtil.getStringArg(objectArray0, 0, "x'*)X|ytO5eBbIxS");
      assertEquals("x'*)X|ytO5eBbIxS", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      Object object0 = ObjectUtil.getArg(objectArray0, 0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ObjectUtil.getStringArg(objectArray0, (-111), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = object0;
      Object object1 = ObjectUtil.getArg(objectArray0, 1, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtil.in((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtil.getStringArg((Object[]) null, 4207, "length");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1280);
      // Undeclared exception!
      try { 
        ObjectUtil.getNumberArg((Object[]) null, 1280, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ObjectUtil.getArg((Object[]) null, 22, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GET_STATIC;
      // Undeclared exception!
      try { 
        ObjectUtil.compare(expressionEnum_Token0, expressionEnum_Token0, (ExpressionEnum.Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ObjectUtil.getArg(objectArray0, (-1), objectArray0[0]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectArray0;
      Integer integer0 = new Integer(7);
      boolean boolean0 = ObjectUtil.in(integer0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectArray0;
      Integer integer0 = new Integer(1124);
      boolean boolean0 = ObjectUtil.in(integer0, objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      Integer integer0 = new Integer((-2944));
      boolean boolean0 = ObjectUtil.in(integer0, objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      boolean boolean0 = ObjectUtil.in(object0, objectArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_IN;
      // Undeclared exception!
      try { 
        ObjectUtil.compare(expressionEnum_Token0, objectUtil0, expressionEnum_Token0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // \u65E0\u6548\u6BD4\u8F83\u7C7B\u578B:OP_IN
         //
         verifyException("org.jiuwo.fastel.util.NumberUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LTEQ;
      boolean boolean0 = ObjectUtil.compare(object0, object0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GTEQ;
      boolean boolean0 = ObjectUtil.compare(objectUtil0, objectUtil0, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_AND;
      boolean boolean0 = ObjectUtil.compare(objectUtil0, objectUtil0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-380));
      Object object0 = new Object();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_OR;
      boolean boolean0 = ObjectUtil.compare(integer0, object0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_LTEQ;
      boolean boolean0 = ObjectUtil.compare((Object) null, (Object) null, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GTEQ;
      boolean boolean0 = ObjectUtil.compare((Object) null, (Object) null, expressionEnum_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GT;
      boolean boolean0 = ObjectUtil.compare(objectArray0[6], objectArray0[0], expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GT;
      boolean boolean0 = ObjectUtil.compare(objectArray0[6], objectArray0[0], expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-380));
      Object object0 = new Object();
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_OR;
      boolean boolean0 = ObjectUtil.compare(object0, integer0, expressionEnum_Token0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[2] = object0;
      boolean boolean0 = ObjectUtil.isEquals(objectArray0[2], objectArray0[0], false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = ObjectUtil.isEquals("`6hz$d}I'*P{Cr<ve~", "Ps>qkCb-4", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = ObjectUtil.isEquals("`6hz$d}I'*P{Cr<ve~", integer0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer((-542));
      boolean boolean0 = ObjectUtil.isEquals(integer0, objectArray0[0], false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-380));
      boolean boolean0 = ObjectUtil.isEquals(integer0, integer0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_ADD;
      boolean boolean0 = ObjectUtil.isEquals(expressionEnum_Token0, (Object) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtil.isEquals(object0, object0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = ObjectUtil.isEquals((Object) null, (Object) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ObjectUtil.getStringArg(objectArray0, (-3292), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = ObjectUtil.getArg(objectArray0, 2309, objectArray0[2]);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Number number0 = ObjectUtil.getNumberArg((Object[]) null, (-166), (Number) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Integer integer0 = new Integer((-2944));
      Number number0 = ObjectUtil.getNumberArg(objectArray0, (-2944), integer0);
      assertEquals((-2944), number0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Integer integer0 = new Integer(381);
      boolean boolean0 = ObjectUtil.isEquals(objectUtil0, integer0, true);
      assertFalse(boolean0);
  }
}
