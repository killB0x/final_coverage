/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:42:57 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.util.ReflectUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReflectUtil_ESTest extends ReflectUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Byte byte0 = new Byte((byte)1);
      Class<Byte> class1 = Byte.TYPE;
      // Undeclared exception!
      try { 
        ReflectUtil.setValue(byte0, class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = new Object();
      ReflectUtil.setValue((Object) null, class0, object0);
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Method> hashMap0 = new HashMap<String, Method>();
      Byte byte0 = new Byte((byte) (-115));
      Object object0 = ReflectUtil.getValue(hashMap0, byte0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = ReflectUtil.getValue(class0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Type type0 = ReflectUtil.getPropertyType(class0, (Object) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = ReflectUtil.getParameterizedType((Type) null, (Class<?>) null, (Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = ReflectUtil.getParameterizedType((Type) class0, (Class<?>) class0, 3);
      Class<?> class1 = ReflectUtil.baseClass(type0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.toWrapper((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getValue((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      assertEquals("class java.lang.Boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class class1 = (Class)ReflectUtil.getParameterizedType((Type) class0, (Class<?>) class0, 3);
      Number number0 = ReflectUtil.toValue((Number) null, class1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Byte byte0 = new Byte((byte)1);
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      Number number0 = ReflectUtil.toValue(byte0, class1);
      assertEquals(1.0F, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Byte byte0 = new Byte((byte)0);
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      Number number0 = ReflectUtil.toValue(byte0, class1);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      // Undeclared exception!
      try { 
        ReflectUtil.toValue((Number) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Byte byte0 = new Byte((byte) (-61));
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      Number number0 = ReflectUtil.toValue(byte0, class1);
      assertNotNull(number0);
      assertEquals((-61), number0);
      assertEquals("class java.lang.Integer", class1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<?> class0 = ReflectUtil.baseClass((Type) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ReflectUtil.baseClass(class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ReflectUtil.getParameterizedType((Type) class0, (Class<?>) class1, (-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u67E5\u627E\u771F\u5B9E\u7C7B\u578B\u5931\u8D25:boolean
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Map<String, Field> map0 = ReflectUtil.getFieldMap(class0);
      assertEquals(7, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = ReflectUtil.getParameterizedType((Type) class0, (Class<?>) class0, (Type) class0);
      Class<?> class1 = ReflectUtil.getPropertyClass(type0, class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Map<String, Method> map0 = ReflectUtil.getSetterMap(class0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Map<String, Method> map0 = ReflectUtil.getGetterMap(class0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ReflectUtil.toWrapper(class0);
      assertEquals("class java.lang.Byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        ReflectUtil.toValue((Number) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ReflectUtil.toValue((Number) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ReflectUtil.toValue((Number) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        ReflectUtil.setValue(class0, class0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = ReflectUtil.getPropertyType((Type) null, class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type type0 = ReflectUtil.getParameterizedType((Type) null, (Class<?>) class0, (Type) class0);
      Class<?> class1 = ReflectUtil.getValueType(type0);
      // Undeclared exception!
      try { 
        ReflectUtil.getParameterizedType((Type) class0, class1, (-522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u67E5\u627E\u771F\u5B9E\u7C7B\u578B\u5931\u8D25:interface java.lang.reflect.Member
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ReflectUtil.getParameterizedType((Type) class1, (Class<?>) class0, (-2962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u67E5\u627E\u771F\u5B9E\u7C7B\u578B\u5931\u8D25:class java.lang.Byte
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class class1 = (Class)ReflectUtil.getParameterizedType((Type) class0, (Class<?>) class0, 3814);
      Class<?> class2 = ReflectUtil.toWrapper(class0);
      // Undeclared exception!
      try { 
        ReflectUtil.getParameterizedType((Type) class2, (Class<?>) class1, 3814);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u67E5\u627E\u771F\u5B9E\u7C7B\u578B\u5931\u8D25:java.lang.Comparable<java.lang.Short>
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        ReflectUtil.getParameterizedType((Type) null, (Class<?>) class0, (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectUtil.getValueType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ReflectUtil reflectUtil0 = new ReflectUtil();
  }
}
