/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 02:02:50 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.util.ReferenceUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceUtil_ESTest extends ReferenceUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil((Object) null, object0);
      Object object1 = referenceUtil0.setValue(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      referenceUtil0.next((Object) null);
      Object object1 = referenceUtil0.getName();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil((Object) null, object0);
      Object object1 = referenceUtil0.getBase();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      ReferenceUtil referenceUtil1 = new ReferenceUtil(referenceUtil0, "null");
      // Undeclared exception!
      try { 
        referenceUtil1.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"null\"
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      ReferenceUtil referenceUtil1 = referenceUtil0.next("null");
      // Undeclared exception!
      try { 
        referenceUtil1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, "null");
      // Undeclared exception!
      try { 
        referenceUtil0.next(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"null\"
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, "null");
      // Undeclared exception!
      try { 
        referenceUtil0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"null\"
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      ReferenceUtil referenceUtil1 = referenceUtil0.next(object0);
      // Undeclared exception!
      try { 
        referenceUtil1.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      String string0 = referenceUtil0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      Object object1 = referenceUtil0.getValue();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      Object object1 = referenceUtil0.getName();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      // Undeclared exception!
      try { 
        referenceUtil0.setValue(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      Object object1 = referenceUtil0.getBase();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReferenceUtil referenceUtil0 = new ReferenceUtil((Object) null, (Object) null);
      ReferenceUtil referenceUtil1 = new ReferenceUtil(referenceUtil0, referenceUtil0);
      // Undeclared exception!
      try { 
        referenceUtil1.next(referenceUtil0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      ReferenceUtil referenceUtil0 = new ReferenceUtil(object0, object0);
      referenceUtil0.next(object0);
      ReferenceUtil referenceUtil1 = referenceUtil0.next(object0);
      assertSame(referenceUtil1, referenceUtil0);
  }
}
