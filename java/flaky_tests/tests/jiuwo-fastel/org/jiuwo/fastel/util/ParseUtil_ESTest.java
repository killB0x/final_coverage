/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:48:40 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jiuwo.fastel.util.ParseUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParseUtil_ESTest extends ParseUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = Float.valueOf((-1833.0F));
      String string0 = ParseUtil.parseToString((Number) float0, 3469);
      assertEquals("-1833", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      String string0 = ParseUtil.parseToString((Number) float0, 4);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-1));
      String string0 = ParseUtil.parseToString((Number) short0, (int) (short) (-1));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Number number0 = ParseUtil.parseToNumber(object0);
      String string0 = ParseUtil.parseToString(number0, 36);
      assertEquals("NaN", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParseUtil.parseToString((Number) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ParseUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(211, 211);
      Number number0 = ParseUtil.parseToNumber(localDate0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber(".0");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ParseUtil.parseToString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Number number0 = ParseUtil.parseToNumber(mockDate0);
      String string0 = ParseUtil.parseToString(number0, (-1));
      assertEquals("NaN", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<String> class0 = String.class;
      Object object0 = ParseUtil.parseToPrimitive(mockDate0, class0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = ParseUtil.parseToPrimitive("NaN", class0);
      assertEquals("NaN", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Number number0 = ParseUtil.parseToNumber(mockDate0);
      assertEquals(Double.NaN, number0);
      
      Class<String> class0 = String.class;
      Object object0 = ParseUtil.parseToPrimitive(number0, class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Float float0 = new Float((float) (short)15);
      String string0 = ParseUtil.parseToString((Number) float0, (int) (short)15);
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = ParseUtil.parseToString(float0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = Float.valueOf("Infinity");
      String string0 = ParseUtil.parseToString(float0);
      assertEquals("Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float((-4311.5F));
      String string0 = ParseUtil.parseToString(float0);
      assertEquals("-4311.5", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Float float0 = Float.valueOf("-Infinity");
      String string0 = ParseUtil.parseToString(float0);
      assertEquals("-Infinity", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber(")|t\"XhSiI)");
      String string0 = ParseUtil.parseToString(number0);
      assertEquals("NaN", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ParseUtil.parseToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Object object0 = ParseUtil.parseToValue(class0, class0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class)ParseUtil.parseToValue(class0, class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = ParseUtil.parseToValue((Object) null, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = ParseUtil.parseToValue("", class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParseUtil.parseToValue((Object) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ReflectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Object object0 = ParseUtil.parseToPrimitive(mockDate0, (Class<?>) null);
      assertNotNull(object0);
      assertEquals(1392409281320L, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ParseUtil.parseToPrimitive(class0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedType \u53EA\u80FD\u662F Number\u6216\u8005String
         //
         verifyException("org.jiuwo.fastel.util.ParseUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = ParseUtil.parseToPrimitive((Object) null, (Class<?>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber("-1");
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber("a JD8^2i:EniD");
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber("-Infinity");
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Number number0 = ParseUtil.parseToNumber(object0);
      Number number1 = ParseUtil.parseToNumber(number0);
      assertEquals(Double.NaN, number1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = ParseUtil.parseToBoolean(")|t\"XhSiI)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ParseUtil.parseToBoolean(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber((Object) null);
      assertEquals(0, number0);
      
      boolean boolean0 = ParseUtil.parseToBoolean(number0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float(1.0F);
      boolean boolean0 = ParseUtil.parseToBoolean(float0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = ParseUtil.parseToBoolean((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = ParseUtil.parseToBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Number number0 = ParseUtil.parseToNumber("");
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParseUtil parseUtil0 = new ParseUtil();
      Number number0 = ParseUtil.parseToNumber(parseUtil0);
      assertEquals(Double.NaN, number0);
      
      boolean boolean0 = ParseUtil.parseToBoolean(number0);
      assertFalse(boolean0);
  }
}
