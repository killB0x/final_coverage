/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:57:29 GMT 2022
 */

package org.jiuwo.fastel.util.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.contract.enums.ExpressionEnum;
import org.jiuwo.fastel.util.function.JsExpressionFunction;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsExpressionFunction_ESTest extends JsExpressionFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_E;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.tan();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_LN2;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.sqrt();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.asin(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.IS_FINITE;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.sin();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.JSON_PARSE;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.log();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.atan(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.IS_NAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.exp();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ACOS;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.cos();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_MIN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.asin();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_RANDOM;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.acos();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_PI;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.abs();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.IS_FINITE;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      jsExpressionFunction0.random();
      jsExpressionFunction0.random();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Float.NaN, jsExpressionFunction0.parseFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.INFINITY;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.pow();
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.acos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_COS;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.round();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_RANDOM;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.parseInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI_COMPONENT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.parseFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI_COMPONENT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) expressionEnum_JsToken0;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.parse();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ABS;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ATAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_TAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.floor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.JSON_PARSE;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.enOrDeCodeURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_SQRT2;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.enOrDeCodeURI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Double cannot be cast to class java.lang.Integer (java.lang.Double and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.JSON;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.ceil();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DECODE_URI;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.atan2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.INFINITY;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.atan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI;
      JsExpressionFunction jsExpressionFunction0 = null;
      try {
        jsExpressionFunction0 = new JsExpressionFunction((Object[]) null, expressionEnum_JsToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_MIN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      Number number0 = jsExpressionFunction0.max();
      assertEquals(0L, jsExpressionFunction0.round());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ACOS;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      Number number0 = jsExpressionFunction0.min();
      assertEquals(0, number0);
      assertFalse(jsExpressionFunction0.parseIsFinite());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.enOrDeCodeURI();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: null
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DECODE_URI_COMPONENT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      Object object0 = jsExpressionFunction0.enOrDeCodeURI();
      assertEquals("null", object0);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.atan2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ACOS;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.parseInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Double@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_MIN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      boolean boolean0 = jsExpressionFunction0.parseIsFinite();
      assertTrue(boolean0);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.acos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.PARSE_FLOAT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) expressionEnum_JsToken0;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      boolean boolean0 = jsExpressionFunction0.parseIsFinite();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_MIN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      boolean boolean0 = jsExpressionFunction0.parseIsNaN();
      assertFalse(boolean0);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.PARSE_FLOAT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) expressionEnum_JsToken0;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      boolean boolean0 = jsExpressionFunction0.parseIsNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_LN10;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.tan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI_COMPONENT;
      Object[] objectArray0 = new Object[1];
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_ATAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.asin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.PARSE_FLOAT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.sqrt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DEFAULT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.sin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.JSON_PARSE;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.ceil();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_CEIL;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      long long0 = jsExpressionFunction0.round();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, jsExpressionFunction0.atan(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.PARSE_INT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.pow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_TAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.acos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DECODE_URI_COMPONENT;
      Object[] objectArray0 = new Object[1];
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.cos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_CEIL;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.atan2();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_EXP;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.floor();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_TAN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.abs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DECODE_URI;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.stringify();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_LOG;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.exp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.DECODE_URI;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      // Undeclared exception!
      try { 
        jsExpressionFunction0.log();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.function.JsExpressionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.MATH_MIN;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      double double0 = jsExpressionFunction0.atan();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ExpressionEnum.JsToken expressionEnum_JsToken0 = ExpressionEnum.JsToken.ENCODE_URI_COMPONENT;
      JsExpressionFunction jsExpressionFunction0 = new JsExpressionFunction(objectArray0, expressionEnum_JsToken0);
      float float0 = jsExpressionFunction0.parseFloat();
      assertEquals(1.0, jsExpressionFunction0.pow(), 0.01);
      assertEquals(Float.NaN, float0, 0.01F);
  }
}
