/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 01:52:17 GMT 2022
 */

package org.jiuwo.fastel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jiuwo.fastel.Executable;
import org.jiuwo.fastel.contract.enums.ExpressionEnum;
import org.jiuwo.fastel.impl.ExpressionNode;
import org.jiuwo.fastel.util.ExecutableUtil;
import org.jiuwo.fastel.util.MethodExecutable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutableUtil_ESTest extends ExecutableUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Method[] methodArray0 = new Method[0];
      Executable executable0 = ExecutableUtil.createProxy(methodArray0);
      assertNotNull(executable0);
      assertEquals(0, methodArray0.length);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_GET;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      assertEquals(ExpressionEnum.Token.OP_GET, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      Executable executable1 = ExecutableUtil.getExecutable((Object) expressionNode0, "getLeft", (Object[]) ((MethodExecutable) executable0).methods);
      assertNotSame(executable0, executable1);
      assertNotSame(executable1, executable0);
      assertFalse(executable1.equals((Object)executable0));
      assertEquals(ExpressionEnum.Token.OP_GET, expressionNode0.getToken());
      assertNotNull(executable1);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      Executable executable0 = ExecutableUtil.getExecutable(object0, "18[8k-", objectArray0);
      assertNull(executable0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExecutableUtil.isMapMethod((ArrayList<ExpressionNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ExecutableUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExecutableUtil.getExecutable((Object) "getChars", "getChars", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ExecutableUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExecutableUtil.getExecutable((Class<?>) null, " (f_", 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ExecutableUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExecutableUtil.createProxy((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jiuwo.fastel.util.ExecutableUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Method[] methodArray0 = new Method[2];
      Executable executable0 = ExecutableUtil.createProxy(methodArray0);
      assertNotNull(executable0);
      assertEquals(2, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      Executable executable0 = ExecutableUtil.getExecutable(class0, "contentEquals", 16);
      assertNull(executable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_EQ;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, expressionEnum_Token0);
      assertEquals(ExpressionEnum.Token.OP_EQ, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(expressionNode0));
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertEquals(ExpressionEnum.Token.OP_EQ, expressionNode0.getToken());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = ExecutableUtil.isMapMethod(arrayList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_JOIN;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, "geLtCha^oS");
      assertEquals(ExpressionEnum.Token.OP_JOIN, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(ExpressionEnum.Token.OP_JOIN, expressionNode0.getToken());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = ExecutableUtil.isMapMethod(arrayList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.VALUE_MAP;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, "getChaor");
      assertEquals(ExpressionEnum.Token.VALUE_MAP, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(expressionNode0));
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertEquals(ExpressionEnum.Token.VALUE_MAP, expressionNode0.getToken());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = ExecutableUtil.isMapMethod(arrayList0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.OP_PUT;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      assertEquals(ExpressionEnum.Token.OP_PUT, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(expressionNode0));
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertEquals(ExpressionEnum.Token.OP_PUT, expressionNode0.getToken());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = ExecutableUtil.isMapMethod(arrayList0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.BRACKET_BEGIN;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, object0);
      assertEquals(ExpressionEnum.Token.BRACKET_BEGIN, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(expressionNode0));
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertEquals(ExpressionEnum.Token.BRACKET_BEGIN, expressionNode0.getToken());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = arrayList0.add(expressionNode0);
      assertEquals(ExpressionEnum.Token.BRACKET_BEGIN, expressionNode0.getToken());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean2 = ExecutableUtil.isMapMethod(arrayList0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<ExpressionNode> arrayList0 = new ArrayList<ExpressionNode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Class<String> class0 = String.class;
      ExpressionEnum.Token expressionEnum_Token0 = ExpressionEnum.Token.BRACKET_END;
      ExpressionNode expressionNode0 = new ExpressionNode(expressionEnum_Token0, class0);
      assertEquals(ExpressionEnum.Token.BRACKET_END, expressionNode0.getToken());
      assertNotNull(expressionNode0);
      
      boolean boolean0 = arrayList0.add(expressionNode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(ExpressionEnum.Token.BRACKET_END, expressionNode0.getToken());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(expressionNode0));
      
      boolean boolean1 = ExecutableUtil.isMapMethod(arrayList0);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(expressionNode0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Method[] methodArray0 = new Method[0];
      Executable executable0 = ExecutableUtil.getExecutable((Object) "equals", "equals", (Object[]) methodArray0);
      assertNull(executable0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Executable executable0 = ExecutableUtil.getExecutable((Object) "INFINITY", (String) null, objectArray0);
      assertNull(executable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      Executable executable0 = ExecutableUtil.getExecutable((Object) class0, "{", objectArray0);
      assertNull(executable0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Executable executable0 = ExecutableUtil.getExecutable(class0, "length", (-2663));
      assertNotNull(executable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutableUtil executableUtil0 = new ExecutableUtil();
  }
}
