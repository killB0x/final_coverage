/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 07:43:36 GMT 2022
 */

package io.vertx.spi.cluster.consul.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import io.vertx.spi.cluster.consul.impl.ConsulEntry;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConsulEntry_ESTest extends ConsulEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long((-2063L));
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).toString();
      Optional<Long> optional0 = Optional.empty();
      ConsulEntry<Long, Throwable> consulEntry0 = new ConsulEntry<Long, Throwable>(long0, throwable0, "", optional0);
      Throwable throwable1 = consulEntry0.getValue();
      assertNull(throwable1.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, ">1*e$.T", (Optional<Long>) null);
      Optional<Long> optional1 = consulEntry0.getTtl();
      assertNull(optional1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(342L);
      Optional<Long> optional0 = Optional.ofNullable(long0);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, "iVP7nTC[a0#", optional0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      ConsulEntry<Long, Throwable> consulEntry1 = new ConsulEntry<Long, Throwable>(long0, throwable0, "iVP7nTC[a0#", optional0);
      ConsulEntry<ConsulEntry<Long, Throwable>, ConsulEntry<Long, Long>> consulEntry2 = new ConsulEntry<ConsulEntry<Long, Throwable>, ConsulEntry<Long, Long>>(consulEntry1, consulEntry0, (String) null, optional0);
      String string0 = consulEntry2.getNodeId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(0L);
      Optional<Long> optional0 = Optional.of(long0);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, "", optional0);
      String string0 = consulEntry0.getNodeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(0L);
      Optional<Long> optional0 = Optional.of(long0);
      Optional<Throwable> optional1 = Optional.ofNullable((Throwable) null);
      ConsulEntry<Throwable, Optional<Throwable>> consulEntry0 = new ConsulEntry<Throwable, Optional<Throwable>>((Throwable) null, optional1, "", optional0);
      Throwable throwable0 = consulEntry0.getKey();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(0L);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).toString();
      Optional<Long> optional0 = Optional.of(long0);
      ConsulEntry<Long, Throwable> consulEntry0 = new ConsulEntry<Long, Throwable>(long0, throwable0, "", optional0);
      ConsulEntry<ConsulEntry<Long, Throwable>, Long> consulEntry1 = new ConsulEntry<ConsulEntry<Long, Throwable>, Long>(consulEntry0, long0, "", optional0);
      ConsulEntry<Long, Throwable> consulEntry2 = consulEntry1.getKey();
      assertSame(consulEntry2, consulEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      Optional<Long> optional0 = Optional.ofNullable(long0);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, "", optional0);
      ConsulEntry<ConsulEntry<Long, Long>, Long> consulEntry1 = new ConsulEntry<ConsulEntry<Long, Long>, Long>(consulEntry0, (Long) null, "", optional0);
      Long long1 = consulEntry1.getValue();
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, "", (Optional<Long>) null);
      ConsulEntry<Throwable, Optional<Throwable>> consulEntry1 = new ConsulEntry<Throwable, Optional<Throwable>>((Throwable) null, optional0, "", (Optional<Long>) null);
      boolean boolean0 = consulEntry1.equals(consulEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(0L);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, "$39\"", (Optional<Long>) null);
      ConsulEntry<Long, Long> consulEntry1 = new ConsulEntry<Long, Long>(long0, long0, "", (Optional<Long>) null);
      boolean boolean0 = consulEntry0.equals(consulEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(throwable0).toString();
      Long long0 = new Long(0L);
      Optional<Long> optional0 = Optional.ofNullable(long0);
      ConsulEntry<Throwable, Long> consulEntry0 = new ConsulEntry<Throwable, Long>(throwable0, long0, "", optional0);
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      ConsulEntry<Long, Throwable> consulEntry1 = new ConsulEntry<Long, Throwable>(long0, throwable1, "q/XNw\"K:XWa#J<~", (Optional<Long>) null);
      boolean boolean0 = consulEntry0.equals(consulEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, ">1*$.T", (Optional<Long>) null);
      boolean boolean0 = consulEntry0.equals(optional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, "{Q", (Optional<Long>) null);
      boolean boolean0 = consulEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long(511L);
      Optional<Long> optional0 = Optional.ofNullable(long0);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, (String) null, optional0);
      boolean boolean0 = consulEntry0.equals(consulEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, ">1*$.T", (Optional<Long>) null);
      consulEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(0L);
      Optional<Long> optional0 = Optional.ofNullable(long0);
      ConsulEntry<Long, Long> consulEntry0 = new ConsulEntry<Long, Long>(long0, long0, "", optional0);
      Optional<Long> optional1 = consulEntry0.getTtl();
      assertSame(optional1, optional0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Optional<Throwable> optional0 = Optional.empty();
      ConsulEntry<Optional<Long>, Optional<Throwable>> consulEntry0 = new ConsulEntry<Optional<Long>, Optional<Throwable>>((Optional<Long>) null, optional0, "", (Optional<Long>) null);
      ConsulEntry<Optional<Long>, Optional<Long>> consulEntry1 = new ConsulEntry<Optional<Long>, Optional<Long>>((Optional<Long>) null, (Optional<Long>) null, "", (Optional<Long>) null);
      boolean boolean0 = consulEntry1.equals(consulEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optional<Long> optional0 = Optional.empty();
      Long long0 = new Long((-1843L));
      ConsulEntry<Optional<Long>, Long> consulEntry0 = new ConsulEntry<Optional<Long>, Long>(optional0, long0, ", nodeId'", optional0);
      String string0 = consulEntry0.getNodeId();
      assertEquals(", nodeId'", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConsulEntry<Throwable, Throwable> consulEntry0 = new ConsulEntry<Throwable, Throwable>((Throwable) null, (Throwable) null, ">1*$.T", (Optional<Long>) null);
      String string0 = consulEntry0.toString();
      assertEquals("ConsulEntry{key=null, value=null, nodeId='>1*$.T'}", string0);
  }
}
