/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:50:28 GMT 2022
 */

package com.github.misterchangray.core.intf.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.clazz.FieldMetaInfo;
import com.github.misterchangray.core.intf.impl.FloatReader;
import com.github.misterchangray.core.util.DynamicByteBuffer;
import java.nio.BufferUnderflowException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatReader_ESTest extends FloatReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FloatReader floatReader0 = new FloatReader((FieldMetaInfo) null);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.flip();
      // Undeclared exception!
      try { 
        floatReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FloatReader floatReader0 = new FloatReader((FieldMetaInfo) null);
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        floatReader0.readFormBuffer(dynamicByteBuffer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FloatReader floatReader0 = new FloatReader((FieldMetaInfo) null);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        floatReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      FloatReader floatReader0 = new FloatReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      Object object0 = new Object();
      Object object1 = floatReader0.readFormBuffer(dynamicByteBuffer0, object0);
      assertEquals(0.0F, object1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FloatReader floatReader0 = new FloatReader((FieldMetaInfo) null);
      // Undeclared exception!
      try { 
        floatReader0.readFormObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.FloatReader", e);
      }
  }
}
