/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:26:36 GMT 2022
 */

package com.github.misterchangray.core.intf.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.clazz.ClassMetaInfo;
import com.github.misterchangray.core.clazz.FieldMetaInfo;
import com.github.misterchangray.core.enums.TypeEnum;
import com.github.misterchangray.core.intf.impl.ByteReader;
import com.github.misterchangray.core.intf.impl.CollectionReader;
import com.github.misterchangray.core.intf.impl.DoubleReader;
import com.github.misterchangray.core.util.DynamicByteBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionReader_ESTest extends CollectionReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setElementBytes(1);
      fieldMetaInfo0.setType(typeEnum0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      Class<Integer> class0 = Integer.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      fieldMetaInfo0.setClazzMetaInfo(classMetaInfo0);
      fieldMetaInfo0.setDynamicSize(true);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      Class<Integer> class0 = Integer.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      fieldMetaInfo0.setClazzMetaInfo(classMetaInfo0);
      fieldMetaInfo0.setDynamicSize(true);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putChar('v');
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, fieldMetaInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setElementBytes((-1));
      Class<Integer> class0 = Integer.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      fieldMetaInfo0.setClazzMetaInfo(classMetaInfo0);
      fieldMetaInfo0.setDynamicSize(true);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      Object object0 = collectionReader0.readFormBuffer(dynamicByteBuffer0, classMetaInfo0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setType(typeEnum0);
      ByteReader byteReader0 = new ByteReader(fieldMetaInfo0);
      fieldMetaInfo0.setReader(byteReader0);
      Class<Integer> class0 = Integer.class;
      fieldMetaInfo0.setClazz(class0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      fieldMetaInfo0.setSize(1);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      fieldMetaInfo0.setClazzMetaInfo(classMetaInfo0);
      fieldMetaInfo0.setDynamicSize(true);
      classMetaInfo0.setParent(classMetaInfo0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      collectionReader0.readFormBuffer(dynamicByteBuffer0, fieldMetaInfo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setType(typeEnum0);
      Class<Integer> class0 = Integer.class;
      fieldMetaInfo0.setClazz(class0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      fieldMetaInfo0.setSize((-25));
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, typeEnum0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -25
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.LIST;
      fieldMetaInfo0.setType(typeEnum0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      fieldMetaInfo0.setSize((-2));
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, fieldMetaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      DoubleReader doubleReader0 = new DoubleReader(fieldMetaInfo0);
      fieldMetaInfo0.setReader(doubleReader0);
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setType(typeEnum0);
      Class<Integer> class0 = Integer.class;
      fieldMetaInfo0.setClazz(class0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      fieldMetaInfo0.setSize(1);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.LIST;
      fieldMetaInfo0.setType(typeEnum0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      fieldMetaInfo0.setSize(1);
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, fieldMetaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.LIST;
      fieldMetaInfo0.setType(typeEnum0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ArrayList arrayList0 = (ArrayList)collectionReader0.readFormBuffer(dynamicByteBuffer0, typeEnum0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setGenericsField(fieldMetaInfo0);
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setType(typeEnum0);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      Class<Integer> class0 = Integer.class;
      fieldMetaInfo0.setClazz(class0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      Object object0 = collectionReader0.readFormBuffer(dynamicByteBuffer0, dynamicByteBuffer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      Class<Integer> class0 = Integer.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes(5098);
      fieldMetaInfo0.setClazzMetaInfo(classMetaInfo0);
      fieldMetaInfo0.setDynamicSize(true);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      Object object0 = collectionReader0.readFormBuffer(dynamicByteBuffer0, class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setDynamic(true);
      CollectionReader collectionReader0 = new CollectionReader(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        collectionReader0.readFormBuffer(dynamicByteBuffer0, fieldMetaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CollectionReader collectionReader0 = new CollectionReader((FieldMetaInfo) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        collectionReader0.readFormObject(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionReader", e);
      }
  }
}
