/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:28:27 GMT 2022
 */

package com.github.misterchangray.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.MagicByte;
import com.github.misterchangray.core.MagicChecker;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicByte_ESTest extends MagicByte_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Class<Object> class0 = Object.class;
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      Object object0 = MagicByte.pack(byteArray0, (Class<?>) class0, magicChecker0);
      byte[] byteArray1 = MagicByte.unpackToByte(object0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Class<Object> class0 = Object.class;
      Object object0 = MagicByte.pack(byteArray0, (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1803));
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MagicByte.unpackToByte(integer0, magicChecker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.UnPacker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1024);
      // Undeclared exception!
      try { 
        MagicByte.unpack((Object) integer0, (MagicChecker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.UnPacker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1879);
      // Undeclared exception!
      try { 
        MagicByte.unpack(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.UnPacker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = MagicByte.unpack(object0, magicChecker0);
      assertEquals(0, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Integer> class0 = Integer.class;
      try { 
        MagicByte.pack(byteArray0, (Class<?>) class0, (MagicChecker) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no public and no arguments constructor; at: null
         //
         verifyException("com.github.misterchangray.core.Packer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      Object object0 = MagicByte.pack((byte[]) null, (Class<?>) class0, magicChecker0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object object0 = MagicByte.pack(byteArray0, (Class<?>) null, (MagicChecker) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = MagicByte.unpack((Object) null, magicChecker0);
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = MagicByte.unpackToByte((Object) null, magicChecker0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = MagicByte.unpackToByte((Object) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3726);
      // Undeclared exception!
      try { 
        MagicByte.unpackToByte(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.UnPacker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = MagicByte.unpack((Integer) null);
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<Integer> class0 = Integer.class;
      try { 
        MagicByte.pack(byteArray0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no public and no arguments constructor; at: null
         //
         verifyException("com.github.misterchangray.core.Packer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Integer integer0 = MagicByte.pack(byteArray0, (Class<?>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = MagicByte.unpackToByte(object0, magicChecker0);
      Class<Object> class0 = Object.class;
      MagicChecker magicChecker1 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      Integer integer0 = MagicByte.pack(byteArray0, (Class<?>) class0, magicChecker1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      MagicByte.configMagicChecker(magicChecker0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MagicByte magicByte0 = new MagicByte();
      ByteBuffer byteBuffer0 = MagicByte.unpack((Object) magicByte0);
      assertTrue(byteBuffer0.hasArray());
  }
}
