/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:31:27 GMT 2022
 */

package com.github.misterchangray.core.clazz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.clazz.ClassMetaInfo;
import com.github.misterchangray.core.clazz.FieldMetaInfo;
import java.lang.annotation.Annotation;
import java.nio.ByteOrder;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassMetaInfo_ESTest extends ClassMetaInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      linkedList0.add(fieldMetaInfo0);
      classMetaInfo0.setFields(linkedList0);
      FieldMetaInfo fieldMetaInfo1 = classMetaInfo0.getFieldMetaInfoByOrderId((-1));
      assertNull(fieldMetaInfo1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      ClassMetaInfo classMetaInfo1 = new ClassMetaInfo(class0);
      classMetaInfo0.setParent(classMetaInfo1);
      ClassMetaInfo classMetaInfo2 = classMetaInfo0.getRoot();
      assertNotSame(classMetaInfo2, classMetaInfo0);
      assertNotNull(classMetaInfo2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setStrict(true);
      boolean boolean0 = classMetaInfo0.isStrict();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setStrict(true);
      classMetaInfo0.getRoot();
      assertTrue(classMetaInfo0.isStrict());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setDynamic(true);
      classMetaInfo0.getRoot();
      assertTrue(classMetaInfo0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes(214);
      classMetaInfo0.getRoot();
      assertEquals(214, classMetaInfo0.getElementBytes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes((-1));
      classMetaInfo0.getRoot();
      assertEquals((-1), classMetaInfo0.getElementBytes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setParent(classMetaInfo0);
      classMetaInfo0.setStrict(true);
      classMetaInfo0.getParent();
      assertTrue(classMetaInfo0.isStrict());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setDynamic(true);
      classMetaInfo0.setParent(classMetaInfo0);
      classMetaInfo0.getParent();
      assertTrue(classMetaInfo0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes(1034);
      classMetaInfo0.setParent(classMetaInfo0);
      classMetaInfo0.getParent();
      assertEquals(1034, classMetaInfo0.getElementBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setFullName("L\")x@^>F~");
      String string0 = classMetaInfo0.getFullName();
      assertEquals("L\")x@^>F~", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setFlatFields((List<FieldMetaInfo>) null);
      List<FieldMetaInfo> list0 = classMetaInfo0.getFlatFields();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      linkedList0.add((FieldMetaInfo) null);
      classMetaInfo0.setFlatFields(linkedList0);
      List<FieldMetaInfo> list0 = classMetaInfo0.getFlatFields();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      linkedList0.add(fieldMetaInfo0);
      classMetaInfo0.setFields(linkedList0);
      List<FieldMetaInfo> list0 = classMetaInfo0.getFields();
      assertTrue(list0.contains(fieldMetaInfo0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      List<FieldMetaInfo> list0 = classMetaInfo0.getFlatFields();
      classMetaInfo0.setFields(list0);
      List<FieldMetaInfo> list1 = classMetaInfo0.getFields();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setSize(1191);
      linkedList0.add(fieldMetaInfo0);
      classMetaInfo0.setFields(linkedList0);
      FieldMetaInfo fieldMetaInfo1 = classMetaInfo0.getFieldMetaInfoByOrderId(0);
      assertFalse(fieldMetaInfo1.isCalcCheckCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setElementBytes(2115);
      linkedList0.add(fieldMetaInfo0);
      classMetaInfo0.setFields(linkedList0);
      FieldMetaInfo fieldMetaInfo1 = classMetaInfo0.getFieldMetaInfoByOrderId(0);
      assertNull(fieldMetaInfo1.getCharset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes(1034);
      int int0 = classMetaInfo0.getElementBytes();
      assertEquals(1034, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes((-2404));
      int int0 = classMetaInfo0.getElementBytes();
      assertEquals((-2404), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo((Class<?>) null);
      Class<?> class0 = classMetaInfo0.getClazz();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      Class<?> class1 = classMetaInfo0.getClazz();
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      classMetaInfo0.setByteOrder(byteOrder0);
      ByteOrder byteOrder1 = classMetaInfo0.getByteOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      List<FieldMetaInfo> list0 = classMetaInfo0.getFields();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      LinkedList<FieldMetaInfo> linkedList0 = new LinkedList<FieldMetaInfo>();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      linkedList0.add(fieldMetaInfo0);
      classMetaInfo0.setFields(linkedList0);
      FieldMetaInfo fieldMetaInfo1 = classMetaInfo0.getFieldMetaInfoByOrderId(2837);
      assertNull(fieldMetaInfo1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.getRoot();
      ClassMetaInfo classMetaInfo1 = classMetaInfo0.getRoot();
      assertNull(classMetaInfo1.getFullName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setElementBytes((-2707));
      classMetaInfo0.setParent(classMetaInfo0);
      classMetaInfo0.getParent();
      assertEquals((-2707), classMetaInfo0.getElementBytes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setParent(classMetaInfo0);
      // Undeclared exception!
      classMetaInfo0.getRoot();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      ByteOrder byteOrder0 = classMetaInfo0.getByteOrder();
      assertNull(byteOrder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      int int0 = classMetaInfo0.getElementBytes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      String string0 = classMetaInfo0.getFullName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setDynamic(true);
      boolean boolean0 = classMetaInfo0.isDynamic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      boolean boolean0 = classMetaInfo0.isStrict();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setClazz(class0);
      assertFalse(classMetaInfo0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      ClassMetaInfo classMetaInfo1 = classMetaInfo0.getParent();
      assertNull(classMetaInfo1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      // Undeclared exception!
      try { 
        classMetaInfo0.getFieldMetaInfoByOrderId((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.clazz.ClassMetaInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<FieldMetaInfo> class0 = FieldMetaInfo.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      classMetaInfo0.setFullName("");
      String string0 = classMetaInfo0.getFullName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      boolean boolean0 = classMetaInfo0.isDynamic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassMetaInfo classMetaInfo0 = new ClassMetaInfo(class0);
      Class<?> class1 = classMetaInfo0.getClazz();
      assertFalse(class1.isArray());
  }
}
