/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:24:42 GMT 2022
 */

package com.github.misterchangray.core.intf.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.clazz.FieldMetaInfo;
import com.github.misterchangray.core.enums.TypeEnum;
import com.github.misterchangray.core.intf.impl.CollectionWriter;
import com.github.misterchangray.core.util.DynamicByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionWriter_ESTest extends CollectionWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      TypeEnum typeEnum0 = TypeEnum.ARRAY;
      fieldMetaInfo0.setType(typeEnum0);
      // Undeclared exception!
      try { 
        collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) typeEnum0, (Object) dynamicByteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      fieldMetaInfo0.setDynamicRef(fieldMetaInfo0);
      fieldMetaInfo0.setDynamic(true);
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) null, (Object) fieldMetaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      fieldMetaInfo0.setSize(2712);
      // Undeclared exception!
      try { 
        collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) dynamicByteBuffer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setDynamicSize(true);
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) dynamicByteBuffer0, (Object) fieldMetaInfo0);
      assertNull(fieldMetaInfo0.getFullName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      TypeEnum typeEnum0 = TypeEnum.LIST;
      fieldMetaInfo0.setType(typeEnum0);
      // Undeclared exception!
      try { 
        collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) typeEnum0, (Object) dynamicByteBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.github.misterchangray.core.enums.TypeEnum cannot be cast to class java.util.List (com.github.misterchangray.core.enums.TypeEnum is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @71e64aff; java.util.List is in module java.base of loader 'bootstrap')
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) dynamicByteBuffer0, (Object) dynamicByteBuffer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      Object object0 = new Object();
      collectionWriter0.writeToBuffer(dynamicByteBuffer0, (Object) null, object0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        collectionWriter0.writeToObject(object0, fieldMetaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.intf.impl.CollectionWriter", e);
      }
  }
}
