/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:13:11 GMT 2022
 */

package com.github.misterchangray.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.misterchangray.core.MagicChecker;
import com.github.misterchangray.core.clazz.FieldMetaInfo;
import com.github.misterchangray.core.clazz.FieldMetaInfoWrapper;
import com.github.misterchangray.core.enums.TypeEnum;
import com.github.misterchangray.core.intf.impl.ByteWriter;
import com.github.misterchangray.core.intf.impl.CollectionWriter;
import com.github.misterchangray.core.util.DynamicByteBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DynamicByteBuffer_ESTest extends DynamicByteBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      byte[] byteArray0 = new byte[0];
      dynamicByteBuffer0.get(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(509);
      dynamicByteBuffer0.getInt();
      byte[] byteArray0 = new byte[3];
      dynamicByteBuffer0.get(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(8);
      double double0 = dynamicByteBuffer0.getDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(13);
      dynamicByteBuffer0.getLong();
      dynamicByteBuffer0.get();
      float float0 = dynamicByteBuffer0.getFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putFloat((-2007.15F));
      float float0 = dynamicByteBuffer0.getFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(8);
      long long0 = dynamicByteBuffer0.getLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt((int) (byte) (-43), (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(8);
      dynamicByteBuffer0.putInt(4);
      int int0 = dynamicByteBuffer0.getInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putShort((int) (short)1017, (short)1017);
      assertEquals(1022, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(2);
      short short0 = dynamicByteBuffer0.getShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putLong((-2378L));
      short short0 = dynamicByteBuffer0.getShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(2);
      char char0 = dynamicByteBuffer0.getChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putInt((int) (byte)2);
      char char0 = dynamicByteBuffer0.getChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putLong(4, (long) 4);
      byte byte0 = dynamicByteBuffer0.get();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1020);
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putInt(1020, 1020);
      assertEquals("java.nio.HeapByteBuffer[pos=1024 lim=1024 cap=1024]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.put((byte)43);
      assertEquals(1023, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      CollectionWriter collectionWriter0 = new CollectionWriter(fieldMetaInfo0);
      fieldMetaInfo0.setWriter(collectionWriter0);
      TypeEnum typeEnum0 = TypeEnum.LIST;
      fieldMetaInfo0.setType(typeEnum0);
      fieldMetaInfo0.setCalcCheckCode(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(magicChecker0).calcCheckCode(any(byte[].class));
      dynamicByteBuffer0.delayCalc(magicChecker0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      TypeEnum typeEnum0 = TypeEnum.STRING;
      fieldMetaInfo0.setType(typeEnum0);
      fieldMetaInfo0.setCalcCheckCode(true);
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(magicChecker0).calcCheckCode(any(byte[].class));
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.delayCalc(magicChecker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(721);
      int int0 = dynamicByteBuffer0.position();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putLong((-2378L));
      int int0 = dynamicByteBuffer0.position();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      DynamicByteBuffer dynamicByteBuffer1 = dynamicByteBuffer0.order(byteOrder0);
      assertSame(dynamicByteBuffer0, dynamicByteBuffer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(26);
      dynamicByteBuffer0.fill((byte)82);
      short short0 = dynamicByteBuffer0.getShort();
      assertEquals((short)21074, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      short short0 = dynamicByteBuffer0.getShort();
      assertEquals((short) (-6940), short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(509);
      dynamicByteBuffer0.fill((byte)102);
      long long0 = dynamicByteBuffer0.getLong();
      assertEquals(7378697629483820646L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      long long0 = dynamicByteBuffer0.getLong();
      assertEquals((-1953184666628070172L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcLength(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getLengthFieldWrapper();
      assertEquals(0, fieldMetaInfoWrapper0.getStartOffset());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcLength(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putLong(4, (long) 4);
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=1024 cap=1024]", byteBuffer0.toString());
      
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getLengthFieldWrapper();
      assertNotNull(fieldMetaInfoWrapper0);
      assertEquals(8, fieldMetaInfoWrapper0.getStartOffset());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)6);
      int int0 = dynamicByteBuffer0.getInt();
      assertEquals(101058054, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      int int0 = dynamicByteBuffer0.getInt();
      assertEquals((-454761244), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)118);
      float float0 = dynamicByteBuffer0.getFloat();
      assertEquals(1.24971455E33F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      float float0 = dynamicByteBuffer0.getFloat();
      assertEquals((-3.3778808E22F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.putDouble(665.302144257973);
      dynamicByteBuffer0.getLong();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      dynamicByteBuffer0.put(byteArray0);
      dynamicByteBuffer0.fill((byte)0);
      dynamicByteBuffer0.putDouble(6, 2999.7451105246187);
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putFloat(0.0F);
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=1024 cap=1024]", byteBuffer0.toString());
      
      double double0 = dynamicByteBuffer0.getDouble();
      assertEquals(1.268224047E-314, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      double double0 = dynamicByteBuffer0.getDouble();
      assertEquals((-1.0583553036438193E178), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcCheckCode(true);
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getCheckCodeFieldWrapper();
      assertEquals(0, fieldMetaInfoWrapper0.getStartOffset());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcCheckCode(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.getFloat();
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getCheckCodeFieldWrapper();
      assertEquals(4, fieldMetaInfoWrapper0.getStartOffset());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)24);
      char char0 = dynamicByteBuffer0.getChar();
      assertEquals('\u1818', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)2);
      char char0 = dynamicByteBuffer0.getChar();
      assertEquals('\u0202', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)8);
      byte byte0 = dynamicByteBuffer0.get(495);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      byte byte0 = dynamicByteBuffer0.get(6);
      assertEquals((byte) (-28), byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte)118);
      byte byte0 = dynamicByteBuffer0.get();
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      int int0 = dynamicByteBuffer0.capacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putInt((int) (byte)124, (-3290));
      assertEquals(1024, byteBuffer0.limit());
      
      byte[] byteArray0 = dynamicByteBuffer0.array();
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-13), (byte)38}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.setLengthFieldWrapper((FieldMetaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.setCheckCodeFieldWrapper((FieldMetaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((short) (-596));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((short)945);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((short) (-681));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((int) (byte)4, (short) (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((-263), (short)1010);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort(1024, (short) (-681));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong((long) 0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1021);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong((long) 1021);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)4);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong((int) (byte)4, (long) (byte)4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong(1076, (long) 1076);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong(1024, (long) 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(0, 0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(1024, 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putInt(1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat(1, (float) 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat(3217, (float) 3217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1021);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat(1021, (float) 1021);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat((float) 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat(1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat((float) 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(7);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble(7, (double) 7);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble(2, (double) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble((-3512), (double) (-3512));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble(1024, (double) 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(7);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble((double) 7);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1021);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putDouble((double) 1021);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar(0, '2');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar(1331, 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar((-1390), '0');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar(1024, 'U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.flip();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar('n');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar('i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put(byteArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      dynamicByteBuffer0.get();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put(1, (byte)0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((int) (byte)1, (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put(1024, (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.position(1178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.position(1032);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition > limit: (1032 > 1024)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.array();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getShort();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.array();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getLong();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.flip();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getInt();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getFloat();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getDouble();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.array();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getChar();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      byte[] byteArray0 = new byte[1];
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)16);
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.fill((byte)16);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.fill((byte) (-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      ByteWriter byteWriter0 = new ByteWriter(fieldMetaInfo0);
      fieldMetaInfo0.setWriter(byteWriter0);
      TypeEnum typeEnum0 = TypeEnum.OBJECT;
      fieldMetaInfo0.setType(typeEnum0);
      fieldMetaInfo0.setCalcLength(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.delayCalc(magicChecker0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class java.lang.Byte (java.lang.Integer and java.lang.Byte are in module java.base of loader 'bootstrap')
         //
         verifyException("com.github.misterchangray.core.intf.impl.ByteWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.capacity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.buffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicByteBuffer.allocate((-166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-166 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        DynamicByteBuffer.allocate(2745);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer allocate field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(7);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((byte)0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.array();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.position();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putShort((short) (-596));
      assertEquals(1024, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcCheckCode(true);
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      dynamicByteBuffer0.delayCalc((MagicChecker) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      MagicChecker magicChecker0 = mock(MagicChecker.class, new ViolatedAssumptionAnswer());
      dynamicByteBuffer0.delayCalc(magicChecker0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcCheckCode(true);
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      assertEquals(0, fieldMetaInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.setCheckCodeFieldWrapper(fieldMetaInfo0);
      assertEquals(0, fieldMetaInfo0.getSuffixBytes());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      fieldMetaInfo0.setCalcLength(true);
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      assertEquals(0, fieldMetaInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfo fieldMetaInfo0 = new FieldMetaInfo();
      dynamicByteBuffer0.setLengthFieldWrapper(fieldMetaInfo0);
      assertEquals(0, fieldMetaInfo0.getDefaultVal());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.fill((byte) (-28));
      byte byte0 = dynamicByteBuffer0.get();
      assertEquals((byte) (-28), byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)0);
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.buffer();
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.buffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get();
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(6);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getDouble();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putFloat(1021, (float) 1021);
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=1024 cap=1024]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putFloat((-6639), (float) (-6639));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getFloat();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putLong((-961), (long) (-961));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getShort();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putChar(1024, 'U');
      assertEquals(1022, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(1);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.getChar();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate(0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      byte byte0 = dynamicByteBuffer0.get(310);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.put((int) (byte) (-7), (byte) (-7));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.get();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing data
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      byte byte0 = dynamicByteBuffer0.get();
      byte byte1 = dynamicByteBuffer0.get(990);
      assertTrue(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.put(1020, (byte) (-26));
      assertEquals(1023, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getLengthFieldWrapper();
      assertNull(fieldMetaInfoWrapper0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      ByteBuffer byteBuffer0 = dynamicByteBuffer0.putChar('H');
      assertEquals(1024, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      int int0 = dynamicByteBuffer0.capacity();
      assertEquals(1024, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      dynamicByteBuffer0.position(1024);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putChar('H');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // detected OutOfMemory, no have enough free space allocate! at: DynamicByteBuffer Auto Grow field!
         //
         verifyException("com.github.misterchangray.core.util.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.order(byteOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate((int) (byte)0);
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.putShort((int) (byte)0, (short) (byte)0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = DynamicByteBuffer.allocate();
      FieldMetaInfoWrapper fieldMetaInfoWrapper0 = dynamicByteBuffer0.getCheckCodeFieldWrapper();
      assertNull(fieldMetaInfoWrapper0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DynamicByteBuffer dynamicByteBuffer0 = new DynamicByteBuffer();
      // Undeclared exception!
      try { 
        dynamicByteBuffer0.flip();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.misterchangray.core.util.DynamicByteBuffer", e);
      }
  }
}
