/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:32:00 GMT 2022
 */

package org.mk300.marshal.minimum.registry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.registry.ShortCMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortCMap_ESTest extends ShortCMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class<Object> class0 = Object.class;
      shortCMap0.put((short)3581, class0);
      Class class1 = shortCMap0.put((short)3581, (Class) null);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class<Object> class0 = Object.class;
      shortCMap0.put((short)0, class0);
      shortCMap0.fix();
      // Undeclared exception!
      try { 
        shortCMap0.get((short)87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 87 out of bounds for length 1
         //
         verifyException("org.mk300.marshal.minimum.registry.ShortCMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      // Undeclared exception!
      try { 
        shortCMap0.fix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.registry.ShortCMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Integer integer0 = new Integer((-777));
      Class<Object> class0 = Object.class;
      shortCMap0.put(integer0, class0);
      // Undeclared exception!
      try { 
        shortCMap0.fix();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -776
         //
         verifyException("org.mk300.marshal.minimum.registry.ShortCMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Integer integer0 = new Integer((-777));
      Class<Object> class0 = Object.class;
      shortCMap0.put(integer0, class0);
      shortCMap0.put((short)0, class0);
      // Undeclared exception!
      try { 
        shortCMap0.fix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -777 out of bounds for length 1
         //
         verifyException("org.mk300.marshal.minimum.registry.ShortCMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class class0 = shortCMap0.get((short)1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class<Object> class0 = Object.class;
      shortCMap0.put((short) (-1), class0);
      shortCMap0.fix();
      Class class1 = shortCMap0.get((short) (-1));
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class<Object> class0 = Object.class;
      shortCMap0.put((short) (-1361), class0);
      shortCMap0.remove((short) (-1361));
      assertEquals(0, shortCMap0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShortCMap shortCMap0 = new ShortCMap();
      Class class0 = shortCMap0.remove((short) (-1401));
      assertNull(class0);
  }
}
