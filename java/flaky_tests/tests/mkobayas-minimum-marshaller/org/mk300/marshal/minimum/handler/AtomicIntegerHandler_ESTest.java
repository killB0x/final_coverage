/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:56:28 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.AtomicIntegerHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicIntegerHandler_ESTest extends AtomicIntegerHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[6];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      byteArray0[4] = (byte) (-1);
      oInputImpl0.readChar();
      AtomicInteger atomicInteger0 = atomicIntegerHandler0.readObject(oInputImpl0, class0);
      assertEquals(65280, atomicInteger0.get());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = atomicIntegerHandler0.readObject(oInputImpl0, class0);
      assertEquals((-889192448), atomicInteger0.intValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[6];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = atomicIntegerHandler0.readObject(oInputImpl0, class0);
      OOutputImpl oOutputImpl0 = new OOutputImpl(3603);
      atomicIntegerHandler0.writeObject((OOutput) oOutputImpl0, atomicInteger0);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = atomicIntegerHandler0.readObject(oInputImpl0, class0);
      assertEquals(1, atomicInteger0.get());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-80);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      AtomicInteger atomicInteger0 = atomicIntegerHandler0.readObject(oInputImpl0, class0);
      assertEquals(176.0, atomicInteger0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      byte[] byteArray0 = new byte[0];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      // Undeclared exception!
      try { 
        atomicIntegerHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      // Undeclared exception!
      try { 
        atomicIntegerHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.AtomicIntegerHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AtomicIntegerHandler atomicIntegerHandler0 = new AtomicIntegerHandler();
      // Undeclared exception!
      try { 
        atomicIntegerHandler0.writeObject((OOutput) null, (AtomicInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.AtomicIntegerHandler", e);
      }
  }
}
