/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:27:27 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.LinkedBlockingQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.LinkedBlockingQueueHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkedBlockingQueueHandler_ESTest extends LinkedBlockingQueueHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-20);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      LinkedBlockingQueue linkedBlockingQueue0 = linkedBlockingQueueHandler0.readObject(oInputImpl0, class0);
      assertNotNull(linkedBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>();
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.writeObject((OOutput) null, linkedBlockingQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      byte[] byteArray0 = new byte[9];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      byte[] byteArray0 = new byte[0];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedBlockingQueue> class0 = LinkedBlockingQueue.class;
      LinkedBlockingQueue linkedBlockingQueue0 = linkedBlockingQueueHandler0.readObject(oInputImpl0, class0);
      assertNotNull(linkedBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(1);
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>();
      Object object0 = new Object();
      linkedBlockingQueue0.add(object0);
      // Undeclared exception!
      try { 
        linkedBlockingQueueHandler0.writeObject((OOutput) oOutputImpl0, (LinkedBlockingQueue) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedBlockingQueueHandler linkedBlockingQueueHandler0 = new LinkedBlockingQueueHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(119);
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = new LinkedBlockingQueue<Integer>();
      linkedBlockingQueueHandler0.writeObject((OOutput) oOutputImpl0, (LinkedBlockingQueue) linkedBlockingQueue0);
      assertEquals(6, oOutputImpl0.size());
  }
}
