/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:57:08 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.ClassHandler;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassHandler_ESTest extends ClassHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassHandler classHandler0 = new ClassHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(2047);
      Class<Object> class0 = Object.class;
      classHandler0.writeObject((OOutput) oOutputImpl0, (Class) class0);
      assertEquals(18, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassHandler classHandler0 = new ClassHandler();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classHandler0.writeObject((OOutput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.ClassHandler", e);
      }
  }
}
