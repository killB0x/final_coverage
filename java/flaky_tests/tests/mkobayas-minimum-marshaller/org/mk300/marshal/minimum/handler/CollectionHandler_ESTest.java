/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:36:12 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.CollectionHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionHandler_ESTest extends CollectionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CollectionHandler collectionHandler0 = new CollectionHandler();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        collectionHandler0.writeObject((OOutput) null, (Collection) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Collection> class0 = Collection.class;
      CollectionHandler collectionHandler0 = new CollectionHandler();
      try { 
        collectionHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable instantiate: interface java.util.Collection
         //
         verifyException("org.mk300.marshal.minimum.handler.CollectionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CollectionHandler collectionHandler0 = new CollectionHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      // Undeclared exception!
      try { 
        collectionHandler0.writeObject((OOutput) oOutputImpl0, (Collection) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CollectionHandler collectionHandler0 = new CollectionHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      collectionHandler0.writeObject((OOutput) oOutputImpl0, (Collection) linkedList0);
      assertEquals(0, linkedList0.size());
  }
}
