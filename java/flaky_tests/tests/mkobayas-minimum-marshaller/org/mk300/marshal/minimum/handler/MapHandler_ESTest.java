/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:38:16 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.MapHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapHandler_ESTest extends MapHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      // Undeclared exception!
      try { 
        mapHandler0.writeObject((OOutput) null, (Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.MapHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Function<Object, Object> function0 = Function.identity();
      Object object0 = new Object();
      hashMap0.put(function0, object0);
      MapHandler mapHandler0 = new MapHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(723);
      try { 
        mapHandler0.writeObject((OOutput) oOutputImpl0, (Map) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.NoSuchMethodException: java.util.function.Function$$Lambda$139/0x000000084019dc40.writeReplace()
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      Class<Map> class0 = Map.class;
      try { 
        mapHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable instantiate: interface java.util.Map
         //
         verifyException("org.mk300.marshal.minimum.handler.MapHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(64);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(mapHandler0, oOutputImpl0);
      // Undeclared exception!
      try { 
        mapHandler0.writeObject((OOutput) oOutputImpl0, (Map) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MapHandler mapHandler0 = new MapHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      mapHandler0.writeObject((OOutput) oOutputImpl0, (Map) hashMap0);
      assertEquals(1, oOutputImpl0.size());
  }
}
