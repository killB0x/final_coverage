/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:10:34 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.PrimitiveWrapperHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveWrapperHandler_ESTest extends PrimitiveWrapperHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      // Undeclared exception!
      try { 
        primitiveWrapperHandler0.writeObject((OOutput) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.PrimitiveWrapperHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        primitiveWrapperHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.PrimitiveWrapperHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      Class<Character> class0 = Character.class;
      byte[] byteArray0 = new byte[1];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      // Undeclared exception!
      try { 
        primitiveWrapperHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[2];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      try { 
        primitiveWrapperHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \u3053\u306E\u30B3\u30FC\u30C9\u306F\u5230\u9054\u3057\u306A\u3044.
         //
         verifyException("org.mk300.marshal.minimum.handler.PrimitiveWrapperHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(2156);
      primitiveWrapperHandler0.writeObject(oOutputImpl0, oOutputImpl0);
      assertEquals(0, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(2635);
      byte[] byteArray0 = new byte[5];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<Character> class0 = Character.class;
      Object object0 = primitiveWrapperHandler0.readObject(oInputImpl0, class0);
      primitiveWrapperHandler0.writeObject(oOutputImpl0, object0);
      assertEquals(2, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PrimitiveWrapperHandler primitiveWrapperHandler0 = new PrimitiveWrapperHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(4754);
      primitiveWrapperHandler0.writeObject(oOutputImpl0, (byte)0);
      assertEquals(1, oOutputImpl0.size());
  }
}
