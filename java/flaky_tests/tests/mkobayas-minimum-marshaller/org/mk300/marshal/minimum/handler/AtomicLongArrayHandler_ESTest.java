/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:39:21 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.AtomicLongArrayHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicLongArrayHandler_ESTest extends AtomicLongArrayHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = atomicLongArrayHandler0.readObject(oInputImpl0, class0);
      assertEquals(1, atomicLongArray0.length());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(16384);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(16384);
      // Undeclared exception!
      atomicLongArrayHandler0.writeObject((OOutput) oOutputImpl0, atomicLongArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      // Undeclared exception!
      try { 
        atomicLongArrayHandler0.writeObject((OOutput) null, (AtomicLongArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.AtomicLongArrayHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-95);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      atomicLongArrayHandler0.readObject(oInputImpl0, class0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        atomicLongArrayHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-21);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        atomicLongArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1655289344
         //
         verifyException("java.util.concurrent.atomic.AtomicLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      // Undeclared exception!
      try { 
        atomicLongArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      byte[] byteArray0 = new byte[5];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      AtomicLongArray atomicLongArray0 = atomicLongArrayHandler0.readObject(oInputImpl0, class0);
      assertEquals("[]", atomicLongArray0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AtomicLongArrayHandler atomicLongArrayHandler0 = new AtomicLongArrayHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(0);
      long[] longArray0 = new long[9];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      atomicLongArrayHandler0.writeObject((OOutput) oOutputImpl0, atomicLongArray0);
      assertEquals(73, oOutputImpl0.size());
  }
}
