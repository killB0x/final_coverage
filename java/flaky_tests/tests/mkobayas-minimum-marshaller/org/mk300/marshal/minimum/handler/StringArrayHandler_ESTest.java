/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:34:06 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.UTFDataFormatException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.StringArrayHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringArrayHandler_ESTest extends StringArrayHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        stringArrayHandler0.writeObject((OOutput) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)16;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      // Undeclared exception!
      try { 
        stringArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)50;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      // Undeclared exception!
      stringArrayHandler0.readObject(oInputImpl0, class0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      Class<String[]> class0 = String[].class;
      // Undeclared exception!
      try { 
        stringArrayHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-111);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      // Undeclared exception!
      try { 
        stringArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -408160512
         //
         verifyException("org.mk300.marshal.minimum.handler.StringArrayHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-64);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      stringArrayHandler0.readObject(oInputImpl0, class0);
      // Undeclared exception!
      try { 
        stringArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[7] = (byte) (-126);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      try { 
        stringArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: UTFDataFormatException");
      
      } catch(UTFDataFormatException e) {
         //
         // malformed input around byte 7
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      try { 
        stringArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unkwown marker(String). mark=7
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringArrayHandler stringArrayHandler0 = new StringArrayHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<String[]> class0 = String[].class;
      String[] stringArray0 = stringArrayHandler0.readObject(oInputImpl0, class0);
      OOutputImpl oOutputImpl0 = new OOutputImpl((byte)7);
      stringArrayHandler0.writeObject((OOutput) oOutputImpl0, stringArray0);
      assertEquals(8, oOutputImpl0.size());
  }
}
