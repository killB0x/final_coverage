/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:42:29 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicIntegerArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.AtomicIntegerArrayHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicIntegerArrayHandler_ESTest extends AtomicIntegerArrayHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = atomicIntegerArrayHandler0.readObject(oInputImpl0, class0);
      assertEquals(1, atomicIntegerArray0.length());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(16384);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(16384);
      // Undeclared exception!
      atomicIntegerArrayHandler0.writeObject((OOutput) oOutputImpl0, atomicIntegerArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      byte[] byteArray0 = new byte[2];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      AtomicIntegerArray atomicIntegerArray0 = atomicIntegerArrayHandler0.readObject(oInputImpl0, class0);
      // Undeclared exception!
      try { 
        atomicIntegerArrayHandler0.writeObject((OOutput) null, atomicIntegerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-82);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      // Undeclared exception!
      atomicIntegerArrayHandler0.readObject(oInputImpl0, class0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      // Undeclared exception!
      try { 
        atomicIntegerArrayHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-124);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      // Undeclared exception!
      try { 
        atomicIntegerArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1121878656
         //
         verifyException("java.util.concurrent.atomic.AtomicIntegerArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicIntegerArray> class0 = AtomicIntegerArray.class;
      // Undeclared exception!
      try { 
        atomicIntegerArrayHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AtomicIntegerArrayHandler atomicIntegerArrayHandler0 = new AtomicIntegerArrayHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(585);
      AtomicIntegerArray atomicIntegerArray0 = new AtomicIntegerArray(781);
      atomicIntegerArrayHandler0.writeObject((OOutput) oOutputImpl0, atomicIntegerArray0);
      assertEquals(3126, oOutputImpl0.size());
  }
}
