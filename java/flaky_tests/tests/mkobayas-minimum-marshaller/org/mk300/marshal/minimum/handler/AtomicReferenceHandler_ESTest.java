/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:53:32 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.AtomicReferenceHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AtomicReferenceHandler_ESTest extends AtomicReferenceHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AtomicReferenceHandler atomicReferenceHandler0 = new AtomicReferenceHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(82);
      AtomicReference<Integer> atomicReference0 = new AtomicReference<Integer>();
      // Undeclared exception!
      try { 
        atomicReferenceHandler0.writeObject((OOutput) oOutputImpl0, (AtomicReference) atomicReference0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      AtomicReferenceHandler atomicReferenceHandler0 = new AtomicReferenceHandler();
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicReference> class0 = AtomicReference.class;
      // Undeclared exception!
      try { 
        atomicReferenceHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AtomicReferenceHandler atomicReferenceHandler0 = new AtomicReferenceHandler();
      byte[] byteArray0 = new byte[0];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<AtomicReference> class0 = AtomicReference.class;
      // Undeclared exception!
      try { 
        atomicReferenceHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AtomicReferenceHandler atomicReferenceHandler0 = new AtomicReferenceHandler();
      Class<AtomicReference> class0 = AtomicReference.class;
      // Undeclared exception!
      try { 
        atomicReferenceHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.AtomicReferenceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AtomicReferenceHandler atomicReferenceHandler0 = new AtomicReferenceHandler();
      AtomicReference<Object> atomicReference0 = new AtomicReference<Object>();
      // Undeclared exception!
      try { 
        atomicReferenceHandler0.writeObject((OOutput) null, atomicReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.AtomicReferenceHandler", e);
      }
  }
}
