/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:46:42 GMT 2022
 */

package org.mk300.marshal.minimum.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.LinkedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.handler.LinkedHashMapHandler;
import org.mk300.marshal.minimum.io.OInput;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkedHashMapHandler_ESTest extends LinkedHashMapHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.writeObject((OOutput) null, linkedHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.LinkedHashMapHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      try { 
        linkedHashMapHandler0.writeObject((OOutput) null, (LinkedHashMap) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.mk300.marshal.minimum.handler.LinkedHashMapHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.readObject((OInput) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.handler.LinkedHashMapHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      byte[] byteArray0 = new byte[8];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-26);
      byteArray0[5] = (byte) (-26);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)14;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      Class<LinkedHashMap> class0 = LinkedHashMap.class;
      linkedHashMapHandler0.readObject(oInputImpl0, class0);
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.readObject(oInputImpl0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(16);
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMapHandler0, linkedHashMapHandler0);
      // Undeclared exception!
      try { 
        linkedHashMapHandler0.writeObject((OOutput) oOutputImpl0, (LinkedHashMap) linkedHashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.mk300.marshal.minimum.registry.HandlerRegistry
         //
         verifyException("org.mk300.marshal.minimum.io.OOutputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedHashMapHandler linkedHashMapHandler0 = new LinkedHashMapHandler();
      OOutputImpl oOutputImpl0 = new OOutputImpl(127);
      LinkedHashMap<Integer, Object> linkedHashMap0 = new LinkedHashMap<Integer, Object>();
      linkedHashMapHandler0.writeObject((OOutput) oOutputImpl0, (LinkedHashMap) linkedHashMap0);
      assertEquals(6, oOutputImpl0.size());
  }
}
