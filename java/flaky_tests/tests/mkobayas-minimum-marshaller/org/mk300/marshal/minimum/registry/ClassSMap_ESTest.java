/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:17:29 GMT 2022
 */

package org.mk300.marshal.minimum.registry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.registry.ClassSMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassSMap_ESTest extends ClassSMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object> class0 = Object.class;
      classSMap0.put(class0, (short)1);
      classSMap0.put(class0, (short) (-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object> class0 = Object.class;
      classSMap0.put(class0, (short)3);
      classSMap0.get(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object> class0 = Object.class;
      classSMap0.keyTable = null;
      // Undeclared exception!
      try { 
        classSMap0.put(class0, (short) (-988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object>[][] classArray0 = (Class<Object>[][]) Array.newInstance(Class.class, new int[] {7, 2});
      Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray1[0] = class0;
      classArray0[0] = classArray1;
      Class<Object>[] classArray2 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      classArray2[5] = class0;
      classArray0[2] = classArray2;
      classSMap0.keyTable = classArray0;
      // Undeclared exception!
      try { 
        classSMap0.put(classArray2[7], (short)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 3
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object>[][] classArray0 = (Class<Object>[][]) Array.newInstance(Class.class, new int[] {0, 9});
      classSMap0.keyTable = classArray0;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classSMap0.put(class0, (short) (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      classSMap0.keyTable = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        classSMap0.get(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object>[][] classArray0 = (Class<Object>[][]) Array.newInstance(Class.class, new int[] {3, 2});
      Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray1[0] = class0;
      classArray0[0] = classArray1;
      short[][] shortArray0 = new short[0][8];
      classSMap0.valueTable = shortArray0;
      classArray0[2] = classArray0[0];
      classSMap0.keyTable = classArray0;
      // Undeclared exception!
      try { 
        classSMap0.get(class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 0
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object>[][] classArray0 = (Class<Object>[][]) Array.newInstance(Class.class, new int[] {0, 7});
      classSMap0.keyTable = classArray0;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classSMap0.get(class0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.mk300.marshal.minimum.registry.ClassSMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object>[][] classArray0 = (Class<Object>[][]) Array.newInstance(Class.class, new int[] {7, 2});
      Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray1[0] = class0;
      classArray0[0] = classArray1;
      Class<Object>[] classArray2 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      classArray2[0] = class0;
      classArray2[1] = class0;
      classArray2[2] = class0;
      classArray0[2] = classArray2;
      classSMap0.keyTable = classArray0;
      // Undeclared exception!
      classSMap0.put(classArray2[7], (short)18);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<Integer>[][] classArray1 = (Class<Integer>[][]) Array.newInstance(Class.class, new int[] {6, 8});
      classArray1[3] = classArray0;
      classSMap0.keyTable = classArray1;
      classSMap0.put(class1, (short) (-1));
      short short0 = classSMap0.put(class0, (short)1100);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      short short0 = classSMap0.put(classArray0[1], (short) (-1));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      short short0 = classSMap0.get(classArray0[1]);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassSMap classSMap0 = new ClassSMap();
      Class<Object> class0 = Object.class;
      short short0 = classSMap0.get(class0);
      assertEquals((short) (-1), short0);
  }
}
