/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 13:19:57 GMT 2022
 */

package org.mk300.marshal.minimum.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mk300.marshal.minimum.io.NaturalNumberIoHelper;
import org.mk300.marshal.minimum.io.OInputImpl;
import org.mk300.marshal.minimum.io.OOutput;
import org.mk300.marshal.minimum.io.OOutputImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NaturalNumberIoHelper_ESTest extends NaturalNumberIoHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      oInputImpl0.readShort();
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(33526401, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)81;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(2108753, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)1;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(15105, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(2097141);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 2097141);
      assertEquals(3, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(128);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 128);
      assertEquals(2, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        NaturalNumberIoHelper.writeNaturalNumber((OOutput) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OInputImpl oInputImpl0 = new OInputImpl((byte[]) null);
      // Undeclared exception!
      try { 
        NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      oInputImpl0.readFully(byteArray0);
      // Undeclared exception!
      try { 
        NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("org.mk300.marshal.minimum.io.OInputImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(2097152, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-17);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(1820672, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      OInputImpl oInputImpl0 = new OInputImpl(byteArray0);
      int int0 = NaturalNumberIoHelper.readNaturalNumber(oInputImpl0);
      assertEquals(14208, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(268435456);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 268435456);
      assertEquals(5, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(2097141);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 16384);
      assertEquals(3, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(2097152);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 2097152);
      assertEquals(4, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(128);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 0);
      assertEquals(1, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(128);
      try { 
        NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, (byte) (-17));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // -17 is not natural number
         //
         verifyException("org.mk300.marshal.minimum.io.NaturalNumberIoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OOutputImpl oOutputImpl0 = new OOutputImpl(128);
      NaturalNumberIoHelper.writeNaturalNumber(oOutputImpl0, 443);
      assertEquals(2, oOutputImpl0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaturalNumberIoHelper naturalNumberIoHelper0 = new NaturalNumberIoHelper();
  }
}
