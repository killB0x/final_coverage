/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:49:17 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.ws.client.CounterPayloadGenerator;
import com.neovisionaries.ws.client.PayloadGenerator;
import com.neovisionaries.ws.client.PingSender;
import com.neovisionaries.ws.client.PongSender;
import com.neovisionaries.ws.client.WebSocket;
import com.neovisionaries.ws.client.WebSocketFactory;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicalFrameSender_ESTest extends PeriodicalFrameSender_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      pingSender0.setTimerName((String) null);
      String string0 = pingSender0.getTimerName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PingSender pingSender0 = new PingSender((WebSocket) null, (PayloadGenerator) null);
      PayloadGenerator payloadGenerator0 = pingSender0.getPayloadGenerator();
      assertNull(payloadGenerator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      // Undeclared exception!
      try { 
        pingSender0.setInterval(2022L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.PeriodicalFrameSender", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PongSender pongSender0 = new PongSender((WebSocket) null, counterPayloadGenerator0);
      long long0 = pongSender0.getInterval();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      URI uRI0 = MockURI.aHttpURI;
      WebSocket webSocket0 = webSocketFactory0.createSocket(uRI0, 471);
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender(webSocket0, counterPayloadGenerator0);
      pingSender0.setInterval(471);
      long long0 = pingSender0.getInterval();
      assertEquals(471L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      pingSender0.setInterval((-1820L));
      assertEquals(0L, pingSender0.getInterval());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      pingSender0.stop();
      assertEquals("PingSender", pingSender0.getTimerName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      String string0 = pingSender0.getTimerName();
      assertEquals("PingSender", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      pingSender0.setPayloadGenerator(counterPayloadGenerator0);
      assertEquals("PingSender", pingSender0.getTimerName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PongSender pongSender0 = new PongSender((WebSocket) null, counterPayloadGenerator0);
      pongSender0.setTimerName("");
      String string0 = pongSender0.getTimerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PingSender pingSender0 = new PingSender((WebSocket) null, counterPayloadGenerator0);
      PayloadGenerator payloadGenerator0 = pingSender0.getPayloadGenerator();
      assertSame(counterPayloadGenerator0, payloadGenerator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      PongSender pongSender0 = new PongSender((WebSocket) null, counterPayloadGenerator0);
      pongSender0.start();
      assertEquals(0L, pongSender0.getInterval());
  }
}
