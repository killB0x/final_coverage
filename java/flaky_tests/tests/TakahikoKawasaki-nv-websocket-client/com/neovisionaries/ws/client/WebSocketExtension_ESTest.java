/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:39:13 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.ws.client.PerMessageDeflateExtension;
import com.neovisionaries.ws.client.WebSocketExtension;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebSocketExtension_ESTest extends WebSocketExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      WebSocketExtension webSocketExtension0 = perMessageDeflateExtension0.setParameter("S", "S");
      Map<String, String> map0 = webSocketExtension0.getParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("server_max_window_bits");
      webSocketExtension0.setParameter("server_max_window_bits", "permessage-deflate");
      String string0 = webSocketExtension0.getParameter("server_max_window_bits");
      assertNotNull(string0);
      assertEquals("permessage-deflate", string0);
      assertEquals("server_max_window_bits", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      PerMessageDeflateExtension perMessageDeflateExtension1 = (PerMessageDeflateExtension)perMessageDeflateExtension0.setParameter("permessage-deflate", "permessage-deflate");
      try { 
        perMessageDeflateExtension1.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // permessage-deflate extension contains an unsupported parameter: permessage-deflate
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      PerMessageDeflateExtension perMessageDeflateExtension1 = (PerMessageDeflateExtension)perMessageDeflateExtension0.setParameter("r", (String) null);
      assertFalse(perMessageDeflateExtension1.isServerNoContextTakeover());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = (PerMessageDeflateExtension)WebSocketExtension.parse("permessage-deflate; S=S");
      assertFalse(perMessageDeflateExtension0.isClientNoContextTakeover());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("'yc;}_P1)4");
      assertEquals("'yc", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("peresag;-deflat|; -'-ERYYKjbhmHgIV;=&");
      assertEquals("peresag", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("_\"~EHc3T!<,d");
      assertNull(webSocketExtension0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("; ");
      assertNull(webSocketExtension0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse((String) null);
      assertNull(webSocketExtension0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      WebSocketExtension webSocketExtension0 = perMessageDeflateExtension0.setParameter("S", "S");
      String string0 = webSocketExtension0.toString();
      assertEquals("permessage-deflate; S=S", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("permessage-deflate");
      // Undeclared exception!
      try { 
        webSocketExtension0.setParameter("permessage-deflate", "!+x#<~SUR 9.4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' is not a valid token.
         //
         verifyException("com.neovisionaries.ws.client.WebSocketExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("hs*;U");
      assertNotNull(webSocketExtension0);
      
      String string0 = webSocketExtension0.toString();
      assertEquals("hs*; U", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("FA;Xd9=)Z#j4N?3");
      // Undeclared exception!
      try { 
        webSocketExtension0.setParameter("FA;Xd9=)Z#j4N?3", "FA;Xd9=)Z#j4N?3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'key' is not a valid token.
         //
         verifyException("com.neovisionaries.ws.client.WebSocketExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("permessage-deflate");
      assertNotNull(webSocketExtension0);
      
      WebSocketExtension webSocketExtension1 = webSocketExtension0.setParameter("server_max_window_bits", "permessage-deflate");
      boolean boolean0 = webSocketExtension1.containsParameter("server_max_window_bits");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      boolean boolean0 = perMessageDeflateExtension0.containsParameter("permessage-deflate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = null;
      try {
        webSocketExtension0 = new WebSocketExtension((WebSocketExtension) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'source' is null.
         //
         verifyException("com.neovisionaries.ws.client.WebSocketExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("4");
      WebSocketExtension webSocketExtension1 = new WebSocketExtension(webSocketExtension0);
      assertEquals("4", webSocketExtension1.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = null;
      try {
        webSocketExtension0 = new WebSocketExtension("PE2/-5>@g2g$,v[t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'name' is not a valid token.
         //
         verifyException("com.neovisionaries.ws.client.WebSocketExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("server_max_window_bits");
      webSocketExtension0.validate();
      assertEquals("server_max_window_bits", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      Map<String, String> map0 = perMessageDeflateExtension0.getParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("server_max_window_bits");
      webSocketExtension0.getParameter("");
      assertEquals("server_max_window_bits", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("server_max_window_bits");
      String string0 = webSocketExtension0.getName();
      assertEquals("server_max_window_bits", string0);
  }
}
