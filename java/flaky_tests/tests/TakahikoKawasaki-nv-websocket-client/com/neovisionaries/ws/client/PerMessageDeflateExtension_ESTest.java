/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:27:37 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.ws.client.PerMessageDeflateExtension;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PerMessageDeflateExtension_ESTest extends PerMessageDeflateExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("server_max_window_bits", "FRAGMENTED_CONTROL_FRAME");
      try { 
        perMessageDeflateExtension0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The value of server_max_window_bits parameter of permessage-deflate extension is invalid: FRAGMENTED_CONTROL_FRAME
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("server_no_context_takeover", "server_no_context_takeover");
      perMessageDeflateExtension0.validate();
      boolean boolean0 = perMessageDeflateExtension0.isServerNoContextTakeover();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byte[] byteArray1 = perMessageDeflateExtension0.decompress(byteArray0);
      assertEquals(32768, perMessageDeflateExtension0.getServerWindowSize());
      assertEquals(1, byteArray1.length);
      assertEquals(32768, perMessageDeflateExtension0.getClientWindowSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      // Undeclared exception!
      try { 
        perMessageDeflateExtension0.decompress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = null;
      try {
        perMessageDeflateExtension0 = new PerMessageDeflateExtension("c/ient_max_window_bits");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'name' is not a valid token.
         //
         verifyException("com.neovisionaries.ws.client.WebSocketExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        perMessageDeflateExtension0.compress(byteArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("com.neovisionaries.ws.client.DeflateCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = perMessageDeflateExtension0.decompress(byteArray0);
      try { 
        perMessageDeflateExtension0.decompress(byteArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to decompress the message: null
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("client_max_window_bits", (String) null);
      try { 
        perMessageDeflateExtension0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The value of client_max_window_bits parameter of permessage-deflate extension is invalid: null
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("permessage-deflate", "client_no_context_takeover");
      try { 
        perMessageDeflateExtension0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // permessage-deflate extension contains an unsupported parameter: permessage-deflate
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("client_no_context_takeover", "client_no_context_takeover");
      perMessageDeflateExtension0.validate();
      boolean boolean0 = perMessageDeflateExtension0.isClientNoContextTakeover();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("server_no_context_takeover", "server_no_context_takeover");
      perMessageDeflateExtension0.validate();
      byte[] byteArray0 = new byte[1];
      perMessageDeflateExtension0.decompress(byteArray0);
      assertTrue(perMessageDeflateExtension0.isServerNoContextTakeover());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.setParameter("client_max_window_bits", "1");
      try { 
        perMessageDeflateExtension0.validate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The value of client_max_window_bits parameter of permessage-deflate extension is invalid: 1
         //
         verifyException("com.neovisionaries.ws.client.PerMessageDeflateExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      int int0 = perMessageDeflateExtension0.getClientWindowSize();
      assertEquals(32768, perMessageDeflateExtension0.getServerWindowSize());
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.isServerNoContextTakeover();
      assertEquals(32768, perMessageDeflateExtension0.getClientWindowSize());
      assertEquals(32768, perMessageDeflateExtension0.getServerWindowSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      perMessageDeflateExtension0.isClientNoContextTakeover();
      assertEquals(32768, perMessageDeflateExtension0.getServerWindowSize());
      assertEquals(32768, perMessageDeflateExtension0.getClientWindowSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension("permessage-deflate");
      assertEquals(32768, perMessageDeflateExtension0.getServerWindowSize());
      assertEquals(32768, perMessageDeflateExtension0.getClientWindowSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PerMessageDeflateExtension perMessageDeflateExtension0 = new PerMessageDeflateExtension();
      int int0 = perMessageDeflateExtension0.getServerWindowSize();
      assertEquals(32768, perMessageDeflateExtension0.getClientWindowSize());
      assertEquals(32768, int0);
  }
}
