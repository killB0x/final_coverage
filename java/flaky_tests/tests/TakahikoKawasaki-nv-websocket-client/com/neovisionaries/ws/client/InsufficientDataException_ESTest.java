/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:58:54 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.neovisionaries.ws.client.InsufficientDataException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InsufficientDataException_ESTest extends InsufficientDataException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException(0, 0);
      int int0 = insufficientDataException0.getRequestedByteCount();
      assertEquals(0, insufficientDataException0.getReadByteCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException((-2717), (-7138));
      int int0 = insufficientDataException0.getRequestedByteCount();
      assertEquals((-7138), insufficientDataException0.getReadByteCount());
      assertEquals((-2717), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException(0, 0);
      int int0 = insufficientDataException0.getReadByteCount();
      assertEquals(0, int0);
      assertEquals(0, insufficientDataException0.getRequestedByteCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException((-2717), (-7138));
      int int0 = insufficientDataException0.getReadByteCount();
      assertEquals((-7138), int0);
      assertEquals((-2717), insufficientDataException0.getRequestedByteCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException(764, 29);
      int int0 = insufficientDataException0.getReadByteCount();
      assertEquals(764, insufficientDataException0.getRequestedByteCount());
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InsufficientDataException insufficientDataException0 = new InsufficientDataException(764, 29);
      int int0 = insufficientDataException0.getRequestedByteCount();
      assertEquals(764, int0);
      assertEquals(29, insufficientDataException0.getReadByteCount());
  }
}
