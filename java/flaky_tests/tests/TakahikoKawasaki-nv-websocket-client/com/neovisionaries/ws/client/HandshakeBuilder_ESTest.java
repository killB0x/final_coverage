/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:13:17 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.ws.client.HandshakeBuilder;
import com.neovisionaries.ws.client.WebSocketExtension;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HandshakeBuilder_ESTest extends HandshakeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol("U0wrC~Bf@DS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "Zn/iQ46KM", (String) null, (String) null);
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol("SkOvC7vb!nXe<#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HandshakeBuilder.build("o", (List<String[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = null;
      try {
        handshakeBuilder0 = new HandshakeBuilder(true, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected authority at index 6: wss://
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = null;
      try {
        handshakeBuilder0 = new HandshakeBuilder((HandshakeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "DRL_Y", "DRL_Y", "DRL_Y");
      handshakeBuilder0.addExtension("-Ey");
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("com.neovisionaries.ws.client.HandshakeBuilder");
      handshakeBuilder0.addExtension(webSocketExtension0);
      assertEquals("com.neovisionaries.ws.client.HandshakeBuilder", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "", "", "server_max_window_bits");
      handshakeBuilder0.addExtension((WebSocketExtension) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addExtension("ZK-6VGsARU'");
      HandshakeBuilder handshakeBuilder1 = new HandshakeBuilder(handshakeBuilder0);
      assertFalse(handshakeBuilder1.equals((Object)handshakeBuilder0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addProtocol("4");
      HandshakeBuilder handshakeBuilder1 = new HandshakeBuilder(handshakeBuilder0);
      assertFalse(handshakeBuilder1.equals((Object)handshakeBuilder0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String[]> linkedList0 = new LinkedList<String[]>();
      String[] stringArray0 = new String[5];
      linkedList0.add(stringArray0);
      String string0 = HandshakeBuilder.build("p=dZ)", linkedList0);
      assertEquals("p=dZ)\r\nnull: null\r\n\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "", "Zn/iQ46KM", "l");
      handshakeBuilder0.addHeader("[[(lR9sIAZ^%j,;[Y", "Zn/iQ46KM");
      List<String[]> list0 = handshakeBuilder0.buildHeaders();
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, (String) null, (String) null, "");
      List<String[]> list0 = handshakeBuilder0.buildHeaders();
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.addExtension("l");
      List<String[]> list0 = handshakeBuilder0.buildHeaders();
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "", "Zn/iQ46KM", "l");
      handshakeBuilder0.addProtocol("L");
      List<String[]> list0 = handshakeBuilder0.buildHeaders();
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "com.neovisionaries.ws.client.WebSocketExtension", "com.neovisionaries.ws.client.WebSocketExtension", (String) null);
      handshakeBuilder0.setUserInfo((String) null, "com.neovisionaries.ws.client.PerMessageCompressionExtension");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "C", "C", "C");
      handshakeBuilder0.setUserInfo("C", (String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.addHeader("l", "l");
      handshakeBuilder0.removeHeaders("l");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "p=dZ)", "0)", "Authorization");
      handshakeBuilder0.addHeader("wss", "");
      handshakeBuilder0.removeHeaders("Authorization");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.removeHeaders("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.removeHeaders("G");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, (String) null, (String) null, (String) null);
      handshakeBuilder0.removeHeaders((String) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.addHeader("l", "l");
      handshakeBuilder0.addHeader("l", "l");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "Sec-WebSocket-Protocol", "Sec-WebSocket-Protocol", (String) null);
      handshakeBuilder0.addHeader("Sec-WebSocket-Protocol", (String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "Authorization", "Authorization", "Authorization");
      handshakeBuilder0.addHeader("", "");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, (String) null, (String) null, (String) null);
      handshakeBuilder0.addHeader((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addExtension("ZK-6VGsARU'");
      boolean boolean0 = handshakeBuilder0.containsExtension("m\"@\u0001KZ1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.addExtension("l");
      boolean boolean0 = handshakeBuilder0.containsExtension("l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, (String) null, (String) null, (String) null);
      boolean boolean0 = handshakeBuilder0.containsExtension((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      boolean boolean0 = handshakeBuilder0.containsExtension("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "l", "l", "l");
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("l");
      handshakeBuilder0.addExtension(webSocketExtension0);
      boolean boolean0 = handshakeBuilder0.containsExtension(webSocketExtension0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addExtension("ZK-6VGsARU'");
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("Authorization");
      boolean boolean0 = handshakeBuilder0.containsExtension(webSocketExtension0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "l", "l", "l");
      boolean boolean0 = handshakeBuilder0.containsExtension((WebSocketExtension) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("Authorization");
      boolean boolean0 = handshakeBuilder0.containsExtension(webSocketExtension0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "l", "l", "l");
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("l");
      handshakeBuilder0.addExtension(webSocketExtension0);
      handshakeBuilder0.removeExtensions("permessage-deflate");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, (String) null, (String) null, (String) null);
      handshakeBuilder0.removeExtensions((String) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.removeExtensions("l");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, "l", "l", "l");
      WebSocketExtension webSocketExtension0 = new WebSocketExtension("l");
      handshakeBuilder0.addExtension(webSocketExtension0);
      handshakeBuilder0.removeExtension(webSocketExtension0);
      assertEquals("l", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addExtension("ZK-6VGsARU'");
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("Authorization");
      handshakeBuilder0.removeExtension(webSocketExtension0);
      assertEquals("Authorization", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, ";Authorization", ";Authorization", ";Authorization");
      handshakeBuilder0.removeExtension((WebSocketExtension) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("Authorization");
      handshakeBuilder0.removeExtension(webSocketExtension0);
      assertEquals("Authorization", webSocketExtension0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.addProtocol("permessage-deflate");
      boolean boolean0 = handshakeBuilder0.containsProtocol("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "p=dZ)", "0)", "Authorization");
      boolean boolean0 = handshakeBuilder0.containsProtocol("wss");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "", "Zn/iQ46KM", "l");
      handshakeBuilder0.addProtocol("L");
      boolean boolean0 = handshakeBuilder0.containsProtocol("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "D0", "D0", "D0");
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol("ms$vk`*3VE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "j", "j", "j");
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol(" cn,xo\\6PcO;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, (String) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        handshakeBuilder0.addProtocol((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'protocol' must be a non-empty string with characters in the range U+0021 to U+007E not including separator characters.
         //
         verifyException("com.neovisionaries.ws.client.HandshakeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "M", "M", "M");
      handshakeBuilder0.addProtocol("M");
      handshakeBuilder0.removeProtocol("M");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, (String) null, (String) null, (String) null);
      handshakeBuilder0.removeProtocol((String) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.removeProtocol("l");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "Authorization", "Authorization", "Authorization");
      handshakeBuilder0.addProtocol("Authorization");
      handshakeBuilder0.addProtocol("Authorization");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.addProtocol("4");
      handshakeBuilder0.removeProtocol("");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(true, (String) null, (String) null, "");
      URI uRI0 = handshakeBuilder0.getURI();
      assertEquals("wss://null", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "Authorization", "Authorization", "Authorization");
      handshakeBuilder0.clearUserInfo();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "j", "j", "j");
      handshakeBuilder0.addHeader("j", "j");
      HandshakeBuilder handshakeBuilder1 = new HandshakeBuilder(handshakeBuilder0);
      assertFalse(handshakeBuilder1.equals((Object)handshakeBuilder0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "", "Zn/iQ46KM", "l");
      String string0 = handshakeBuilder0.buildRequestLine();
      assertEquals("GET l HTTP/1.1", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.clearExtensions();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.setUserInfo("%~");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.setKey("l");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "G", "l");
      handshakeBuilder0.addExtension("l");
      handshakeBuilder0.removeExtensions("l");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "ws", "ws", "Authorization");
      handshakeBuilder0.clearHeaders();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HandshakeBuilder handshakeBuilder0 = new HandshakeBuilder(false, "l", "l", "l");
      handshakeBuilder0.clearProtocols();
  }
}
