/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:25:45 GMT 2022
 */

package com.neovisionaries.ws.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.neovisionaries.ws.client.Address;
import com.neovisionaries.ws.client.CounterPayloadGenerator;
import com.neovisionaries.ws.client.SocketConnector;
import com.neovisionaries.ws.client.WebSocket;
import com.neovisionaries.ws.client.WebSocketExtension;
import com.neovisionaries.ws.client.WebSocketFactory;
import com.neovisionaries.ws.client.WebSocketFrame;
import com.neovisionaries.ws.client.WebSocketListener;
import com.neovisionaries.ws.client.WritingThread;
import java.net.URL;
import java.util.LinkedList;
import javax.net.SocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WritingThread_ESTest extends WritingThread_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      Address address0 = new Address((String) null, 1013);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "e0";
      stringArray0[7] = null;
      SocketConnector socketConnector0 = new SocketConnector(socketFactory0, address0, (-2336), stringArray0, 3723);
      WebSocket webSocket0 = new WebSocket(webSocketFactory0, false, (String) null, (String) null, (String) null, socketConnector0);
      WebSocket webSocket1 = webSocket0.removeHeaders((String) null);
      WebSocket webSocket2 = webSocket1.sendClose(1013);
      WebSocket webSocket3 = webSocket2.setPongSenderName("");
      webSocket2.sendText(stringArray0[0], true);
      WritingThread writingThread0 = new WritingThread(webSocket3);
      writingThread0.queueFlush();
      writingThread0.runMain();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      WebSocketFactory webSocketFactory1 = new WebSocketFactory(webSocketFactory0);
      URL uRL0 = MockURL.getHttpExample();
      WebSocket webSocket0 = webSocketFactory1.createSocket(uRL0);
      WebSocket webSocket1 = webSocket0.setAutoFlush(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      WebSocketFrame webSocketFrame0 = WebSocketFrame.createBinaryFrame(byteArray0);
      webSocket0.sendFrame(webSocketFrame0);
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      WebSocket webSocket2 = webSocket1.setPingPayloadGenerator(counterPayloadGenerator0);
      WritingThread writingThread0 = new WritingThread(webSocket2);
      WebSocketFrame webSocketFrame1 = new WebSocketFrame();
      webSocketFrame1.getCloseReason();
      writingThread0.queueFrame(webSocketFrame1);
      writingThread0.requestStop();
      writingThread0.runMain();
      writingThread0.queueFrame(webSocketFrame1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      Address address0 = new Address("", 56);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "rmcgF:G8~EF@t^";
      stringArray0[2] = "9*JS$,l^*G0G";
      stringArray0[3] = "";
      SocketConnector socketConnector0 = new SocketConnector(socketFactory0, address0, 937, stringArray0, 56);
      WebSocket webSocket0 = new WebSocket(webSocketFactory0, true, "", "UNEXPECTED_RESERVED_BIT", "8S", socketConnector0);
      WritingThread writingThread0 = new WritingThread(webSocket0);
      WritingThread writingThread1 = new WritingThread(webSocket0);
      // Undeclared exception!
      try { 
        writingThread1.queueFrame((WebSocketFrame) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.WritingThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      WebSocketFactory webSocketFactory1 = new WebSocketFactory(webSocketFactory0);
      URL uRL0 = MockURL.getHttpExample();
      WebSocket webSocket0 = webSocketFactory1.createSocket(uRL0);
      WebSocket webSocket1 = webSocket0.setAutoFlush(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      WebSocketFrame webSocketFrame0 = WebSocketFrame.createBinaryFrame(byteArray0);
      webSocket0.sendFrame(webSocketFrame0);
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      webSocket0.setPingPayloadGenerator(counterPayloadGenerator0);
      WritingThread writingThread0 = new WritingThread(webSocket1);
      WebSocketFrame webSocketFrame1 = new WebSocketFrame();
      webSocketFrame0.getCloseReason();
      writingThread0.queueFrame(webSocketFrame0);
      writingThread0.runMain();
      writingThread0.queueFrame(webSocketFrame0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      WebSocketFactory webSocketFactory1 = new WebSocketFactory(webSocketFactory0);
      URL uRL0 = MockURL.getHttpExample();
      WebSocket webSocket0 = webSocketFactory1.createSocket(uRL0);
      WebSocket webSocket1 = webSocket0.setAutoFlush(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      WebSocketFrame webSocketFrame0 = WebSocketFrame.createBinaryFrame(byteArray0);
      webSocket0.sendFrame(webSocketFrame0);
      CounterPayloadGenerator counterPayloadGenerator0 = new CounterPayloadGenerator();
      WebSocket webSocket2 = webSocket1.setPingPayloadGenerator(counterPayloadGenerator0);
      WritingThread writingThread0 = new WritingThread(webSocket2);
      WebSocketFrame webSocketFrame1 = new WebSocketFrame();
      webSocketFrame1.getCloseReason();
      writingThread0.queueFrame(webSocketFrame1);
      writingThread0.runMain();
      boolean boolean0 = writingThread0.queueFrame(webSocketFrame1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WritingThread writingThread0 = null;
      try {
        writingThread0 = new WritingThread((WebSocket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.neovisionaries.ws.client.WritingThread", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      Address address0 = new Address("wjs0u)*}z/)\"'{W", 1000);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wjs0u)*}z/)\"'{W";
      SocketConnector socketConnector0 = new SocketConnector(socketFactory0, address0, (-2013), stringArray0, 1000);
      WebSocket webSocket0 = new WebSocket(webSocketFactory0, true, "a}4^Z9n{+M-", "w4XM$d)sA5B3s", "w4XM$d)sA5B3s", socketConnector0);
      WebSocket webSocket1 = webSocket0.disconnect(640, (String) null);
      WebSocket webSocket2 = webSocket1.setDirectTextMessage(true);
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocket webSocket3 = webSocket2.removeListeners(linkedList0);
      WritingThread writingThread0 = new WritingThread(webSocket3);
      writingThread0.requestStop();
      assertFalse(writingThread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      WebSocketFactory webSocketFactory1 = new WebSocketFactory(webSocketFactory0);
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      Address address0 = new Address("Sqpe`VwOm8k06&0b", 1604);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Sqpe`VwOm8k06&0b";
      SocketConnector socketConnector0 = new SocketConnector(socketFactory0, address0, 1604, stringArray0, 1604);
      WebSocket webSocket0 = new WebSocket(webSocketFactory1, false, "?V(8+}-b+PCX`", "WritingThread", "", socketConnector0);
      WritingThread writingThread0 = new WritingThread(webSocket0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WebSocketFactory webSocketFactory0 = new WebSocketFactory();
      SocketFactory socketFactory0 = SocketFactory.getDefault();
      Address address0 = new Address("", (-635));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UNEXPECTED_RESERVED_BIT";
      stringArray0[1] = "UNEXPECTED_RESERVED_BIT";
      stringArray0[2] = "UNEXPECTED_RESERVED_BIT";
      stringArray0[3] = "UNEXPECTED_RESERVED_BIT";
      SocketConnector socketConnector0 = new SocketConnector(socketFactory0, address0, 0, stringArray0, (-635));
      WebSocket webSocket0 = new WebSocket(webSocketFactory0, false, "i^", "UNEXPECTED_RESERVED_BIT", "", socketConnector0);
      WebSocket webSocket1 = webSocket0.setUserInfo("UNEXPECTED_RESERVED_BIT");
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocket webSocket2 = webSocket1.addListeners(linkedList0);
      WebSocketExtension webSocketExtension0 = WebSocketExtension.parse("UNEXPECTED_RESERVED_BIT");
      WebSocket webSocket3 = webSocket2.addExtension(webSocketExtension0);
      WritingThread writingThread0 = new WritingThread(webSocket3);
      writingThread0.queueFlush();
      assertEquals(0, writingThread0.countStackFrames());
  }
}
