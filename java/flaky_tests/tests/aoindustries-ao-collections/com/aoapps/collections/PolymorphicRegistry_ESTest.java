/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:11:38 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.PolymorphicRegistry;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PolymorphicRegistry_ESTest extends PolymorphicRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.getLast((Class<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.getLast((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.getFirst((Class<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.getFirst((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.get((Class<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicRegistry<Integer> polymorphicRegistry0 = new PolymorphicRegistry<Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.get((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.PolymorphicRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicRegistry0.add(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/aoapps/lang/reflect/Classes
         //
         verifyException("com.aoapps.collections.PolymorphicRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      List<Object> list0 = polymorphicRegistry0.get(class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicRegistry<Integer> polymorphicRegistry0 = new PolymorphicRegistry<Integer>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Integer integer0 = polymorphicRegistry0.getLast(class0, (Predicate<? super Integer>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Object object0 = polymorphicRegistry0.getFirst(class0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      Object object0 = polymorphicRegistry0.getFirst(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicRegistry<Integer> polymorphicRegistry0 = new PolymorphicRegistry<Integer>(class0);
      Integer integer0 = polymorphicRegistry0.getLast(class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicRegistry<Object> polymorphicRegistry0 = new PolymorphicRegistry<Object>(class0);
      List<Object> list0 = polymorphicRegistry0.get(class0, (Predicate<? super Object>) null);
      assertTrue(list0.isEmpty());
  }
}
