/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 10:56:26 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.AoArrays;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AoArrays_ESTest extends AoArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Object[][] objectArray0 = new Object[1][6];
      Object[] objectArray1 = new Object[0];
      objectArray0[0] = objectArray1;
      // Undeclared exception!
      try { 
        AoArrays.sortParallelArrays(integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatched array lengths
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (int)'a';
      integerArray0[1] = (Integer) (-1);
      Integer integer0 = AoArrays.maxNonNull(integerArray0);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)45;
      AoArrays.hashCode(byteArray0, (int) (byte)5, 1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        AoArrays.hashCode(byteArray0, (int) (byte)0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      AoArrays.hashCode(byteArray0, 806, (int) (byte) (-110));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'G';
      int int0 = AoArrays.lastIndexOf(charArray0, 'D');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'I';
      int int0 = AoArrays.indexOf(charArray0, 'A', 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = AoArrays.indexOf(charArray0, '@', 1274);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = (-771.7F);
      floatArray0[1] = 1.0F;
      int int0 = AoArrays.indexOf(floatArray0, 0.0F);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = AoArrays.indexOf(longArray0, (-1207L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[6] = (-2899);
      int int0 = AoArrays.indexOf(intArray0, (-1544));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)50;
      shortArray0[1] = (short) (byte) (-1);
      int int0 = AoArrays.indexOf(shortArray0, (short)0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)125;
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)3, (int) (byte)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = AoArrays.indexOf(byteArray0, (byte)0, 1531);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = AoArrays.allEquals(byteArray0, (byte)0, 5, (byte)30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = AoArrays.allEquals(byteArray0, (byte)27, (byte) (-58), (byte) (-98));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)2;
      boolean boolean0 = AoArrays.equals(byteArray0, (int) (byte)0, byteArray0, (int) (byte)2, 221);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = AoArrays.equals(byteArray0, (int) (byte) (-75), byteArray0, 0, (int) (byte) (-75));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      boolean boolean0 = AoArrays.equals(byteArray0, byteArray1, 0, 2195);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = AoArrays.equals(byteArray0, byteArray0, (int) (byte)0, (int) (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 9);
      AoArrays.UnmodifiableArraySet<Collection<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Collection<Integer>>(collectionArray0);
      Object[] objectArray0 = aoArrays_UnmodifiableArraySet0.toArray();
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>((Integer[]) null);
      // Undeclared exception!
      try { 
        aoArrays_UnmodifiableArraySet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Iterator<LinkedList<Integer>> iterator0 = aoArrays_UnmodifiableArraySet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)10;
      int int0 = AoArrays.lastIndexOf(shortArray0, (short)10, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1;
      int int0 = AoArrays.lastIndexOf(shortArray0, (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[1] = integer0;
      int int1 = AoArrays.lastIndexOf(integerArray0, integer0, int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(255);
      integerArray0[0] = integer0;
      int int0 = AoArrays.lastIndexOf(integerArray0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[13];
      longArray0[2] = (long) (-2432);
      int int0 = AoArrays.lastIndexOf(longArray0, (-2432L), 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1861L);
      int int0 = AoArrays.lastIndexOf(longArray0, (-1861L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      int int0 = AoArrays.lastIndexOf(intArray0, 1, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-68);
      int int0 = AoArrays.lastIndexOf(intArray0, (-68));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = AoArrays.lastIndexOf(intArray0, (int) (byte)0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = AoArrays.lastIndexOf(floatArray0, 0.0F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 2;
      int int0 = AoArrays.lastIndexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 2;
      int int0 = AoArrays.lastIndexOf(floatArray0, 2.0F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = AoArrays.lastIndexOf(doubleArray0, (double) (byte)0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      int int0 = AoArrays.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) (byte) (-58);
      int int0 = AoArrays.lastIndexOf(doubleArray0, (-58.0));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      int int0 = AoArrays.lastIndexOf(charArray0, 'Z', 5);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      int int0 = AoArrays.lastIndexOf(charArray0, 'D');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'f';
      int int0 = AoArrays.lastIndexOf(charArray0, 'f');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)1, 4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = AoArrays.indexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = AoArrays.indexOf((short[]) null, (short) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = AoArrays.compare(byteArray0, byteArray0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      int int1 = AoArrays.indexOf(integerArray0, integer0, int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 3450L;
      int int0 = AoArrays.indexOf(longArray0, 3450L, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1864L);
      int int0 = AoArrays.indexOf(longArray0, (-1864L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[4] = 384L;
      int int0 = AoArrays.indexOf(longArray0, 384L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = AoArrays.indexOf(intArray0, 0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-68);
      int int0 = AoArrays.indexOf(intArray0, (-68));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = (-1700);
      int int0 = AoArrays.indexOf(intArray0, (-1700));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      int int0 = AoArrays.indexOf(floatArray0, 1.0F, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = AoArrays.indexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (-1.0);
      int int0 = AoArrays.indexOf(doubleArray0, (-1.0), 2);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4192.0F);
      int int0 = AoArrays.indexOf(doubleArray0, (double) 0.0F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = AoArrays.indexOf(doubleArray0, (double) 3409);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'A';
      int int0 = AoArrays.indexOf(charArray0, 'A', 1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      int int0 = AoArrays.indexOf(charArray0, 'a');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '[';
      int int0 = AoArrays.indexOf(charArray0, '[');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = AoArrays.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      int int0 = AoArrays.indexOf(byteArray0, (byte) (-64));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      int int0 = AoArrays.indexOf(byteArray0, (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 4);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoCollections$PeekIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(shortArray0, (short) (-137), 1901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1901 out of bounds for length 1
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(integerArray0, (Integer) null, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 240 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(intArray0, 1178, 1178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1178 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(floatArray0, 532.0F, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(doubleArray0, 4082.4380755, 4221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4221 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(charArray0, ':', (int) ':');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 58 out of bounds for length 1
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(byteArray0, (byte)100, (int) (byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 100 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(shortArray0, (short) (-2890), (int) (short) (-2890));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2890 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(integerArray0, integerArray0[0], (-190));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -190 out of bounds for length 4
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(longArray0, 3432L, (-233));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -233 out of bounds for length 4
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(intArray0, (-274), (-4255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4255 out of bounds for length 1
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(doubleArray0, (-3299.5900445397638), (-1264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1264 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(charArray0, '6', (-1522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1522 out of bounds for length 3
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(byteArray0, (byte)0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        AoArrays.equals((byte[]) null, (byte[]) null, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        AoArrays.equals((byte[]) null, 120, (byte[]) null, (-3995), 120);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        AoArrays.equals(byteArray0, 0, byteArray0, 0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 15 out of bounds for length 15
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        AoArrays.compare((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = AoArrays.lastIndexOf(doubleArray0, 1.0, (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = AoArrays.indexOf(doubleArray0, 0.0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = AoArrays.lastIndexOf(floatArray0, 1.0F, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[7] = (float) 105;
      int int0 = AoArrays.indexOf(floatArray0, 105.0F, 5);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = AoArrays.indexOf(floatArray0, 105.0F, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = AoArrays.indexOf((float[]) null, (float) (-1), 1883);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      int int0 = AoArrays.lastIndexOf(longArray0, (-1L), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = AoArrays.lastIndexOf(longArray0, (-1816L), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        AoArrays.lastIndexOf(longArray0, (-2376L), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 2
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = AoArrays.indexOf((long[]) null, 46L, 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = AoArrays.lastIndexOf(intArray0, 1483, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = AoArrays.indexOf(intArray0, (int) (short)0, 1412);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-331);
      int int1 = AoArrays.lastIndexOf(shortArray0, (short) (-331), int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-2291);
      int int0 = AoArrays.indexOf(shortArray0, (short) (-2291), 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = AoArrays.indexOf(byteArray0, (byte)56, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = AoArrays.lastIndexOf(integerArray0, integerArray0[3], 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      integerArray0[3] = integer0;
      int int0 = AoArrays.indexOf(integerArray0, integer0, 2);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2);
      int int0 = AoArrays.indexOf(integerArray0, integer0, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = AoArrays.indexOf((Integer[]) null, (Integer) null, 1178);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(846);
      integerArray0[0] = integer0;
      Object[][] objectArray0 = new Object[1][8];
      objectArray0[0] = (Object[]) integerArray0;
      AoArrays.sortParallelArrays(integerArray0, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(348);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Object[][] objectArray0 = new Object[0][3];
      // Undeclared exception!
      try { 
        AoArrays.sortParallelArrays(integerArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object[][] objectArray0 = new Object[1][8];
      // Undeclared exception!
      try { 
        AoArrays.sortParallelArrays(integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatched array lengths
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1689));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-215));
      integerArray0[1] = integer1;
      Integer integer2 = AoArrays.maxNonNull(integerArray0);
      assertNotNull(integer2);
      assertEquals((-215), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = AoArrays.maxNonNull(integerArray0);
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(7);
      integerArray0[0] = integer0;
      Integer integer1 = AoArrays.maxNonNull(integerArray0);
      assertEquals(7, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = AoArrays.maxNonNull(integerArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = AoArrays.maxNonNull((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AoArrays.hashCode((byte[]) null, (-3220), (-3220));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      int int0 = AoArrays.lastIndexOf(charArray0, 'j', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = AoArrays.lastIndexOf(charArray0, 'j', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((char[]) null, '7', (int) '7');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((char[]) null, 'F');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      int int0 = AoArrays.indexOf(charArray0, '|', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = AoArrays.indexOf((char[]) null, '|', 2521);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = AoArrays.lastIndexOf(doubleArray0, (double) 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((double[]) null, (-1334.92607315606), 1973);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = AoArrays.lastIndexOf(doubleArray0, (-3555.27016106642));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((double[]) null, (-2169.930249));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = AoArrays.indexOf(doubleArray0, (-849.8845575096), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = AoArrays.indexOf(doubleArray0, (double) (-83), 1069);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = AoArrays.indexOf((double[]) null, (-1.0), 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 2918.59F;
      int int0 = AoArrays.lastIndexOf(floatArray0, 2918.59F, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((float[]) null, (float) (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = AoArrays.lastIndexOf(floatArray0, 2.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((float[]) null, 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(255);
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[0];
      int int0 = AoArrays.indexOf(floatArray0, (float) integerArray0[0], 255);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        AoArrays.indexOf(floatArray0, (float) (byte) (-65), (-1696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1696 out of bounds for length 2
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1861L);
      longArray0[1] = (-1861L);
      int int0 = AoArrays.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((long[]) null, 1007L, (-2084));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = AoArrays.lastIndexOf(longArray0, 0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((long[]) null, (-11L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = AoArrays.indexOf(longArray0, 3450L, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = AoArrays.indexOf(longArray0, (-309L), (int) (byte)13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = AoArrays.indexOf(longArray0, 0L, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = AoArrays.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((int[]) null, (int) (byte)1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = AoArrays.lastIndexOf(intArray0, (-68));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((int[]) null, (-2088));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1003);
      int int0 = AoArrays.indexOf(intArray0, (-1003), 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(255);
      integerArray0[0] = integer0;
      int int0 = AoArrays.indexOf((int[]) null, 8, (int) integerArray0[0]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = AoArrays.lastIndexOf(shortArray0, (short)10, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((short[]) null, (short) (-3560), 6643);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = AoArrays.lastIndexOf(shortArray0, (short)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((short[]) null, (short)1652);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = AoArrays.indexOf(shortArray0, (short) (-2291), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = AoArrays.indexOf(shortArray0, (short) (-1), 169);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = AoArrays.indexOf((short[]) null, (short)401, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)1, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((byte[]) null, (byte)10, (int) (byte)10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = AoArrays.lastIndexOf(byteArray0, (byte)4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = AoArrays.lastIndexOf((byte[]) null, (byte)34);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)56;
      int int0 = AoArrays.indexOf(byteArray0, (byte)56, (int) (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = AoArrays.indexOf((byte[]) null, (byte)56, 229);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      int int0 = AoArrays.lastIndexOf(integerArray0, integer0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer((-2353));
      int int0 = AoArrays.lastIndexOf((Integer[]) null, integer0, (-2353));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = AoArrays.lastIndexOf(integerArray0, (Integer) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(674);
      int int0 = AoArrays.lastIndexOf((Integer[]) null, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((byte)113);
      integerArray0[0] = integer0;
      int int0 = AoArrays.indexOf(integerArray0, integerArray0[8]);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) null);
      Integer integer0 = new Integer(3560);
      int int0 = AoArrays.indexOf(integerArray0, integer0, 3560);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = AoArrays.indexOf((Integer[]) null, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Set<Integer> set0 = AoArrays.asUnmodifiableSet((Integer[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.containsAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer[] integerArray1 = new Integer[0];
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray1);
      Integer[] integerArray2 = aoArrays_UnmodifiableArraySet0.toArray(integerArray0);
      assertEquals(5, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      Integer[] integerArray1 = aoArrays_UnmodifiableArraySet0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      Collection<Integer>[] collectionArray0 = (Collection<Integer>[]) Array.newInstance(Collection.class, 0);
      Collection<Integer>[] collectionArray1 = aoArrays_UnmodifiableArraySet0.toArray(collectionArray0);
      assertEquals(7, collectionArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.contains(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      assertNotNull(set0);
      
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.containsAll(set0);
      assertEquals(2, set0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 9);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[11];
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer integer0 = new Integer(31);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 5);
      linkedListArray0[0] = linkedList0;
      linkedList0.add((Integer) null);
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(31, 31, (-116), (-116), 31).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedListArray0[6] = linkedList0;
      linkedListArray0[7] = linkedList0;
      Integer integer0 = new Integer(929);
      linkedList0.add(integer0);
      linkedListArray0[8] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      linkedList0.add(integer0);
      Class<Integer> class0 = Integer.class;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(197, (-1165), 1, 0, (-1210)).when(comparator0).compare(anyInt() , anyInt());
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
      assertEquals(18, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      Object object0 = new Object();
      Integer integer0 = new Integer(1208);
      linkedList0.add(integer0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      assertTrue(aoArrays_UnmodifiableArraySet0.contains(linkedList0));
      
      boolean boolean0 = aoArrays_UnmodifiableArraySet0.contains((Object) null);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      Integer integer1 = new Integer(1069);
      linkedList0.add(integer1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1069, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger("", 228);
      linkedList0.add(integer0);
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(comparator0).compare(anyInt() , anyInt());
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedListArray0[0];
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Integer integer0 = new Integer((-361));
      linkedListArray0[0].add(integer0);
      Class<Integer> class0 = Integer.class;
      linkedListArray0[0].add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = AoArrays.maxNonNull(integerArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 2);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 1);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        AoArrays.merge(class0, (Collection<? extends Collection<? extends Integer>>) aoArrays_UnmodifiableArraySet0, (Comparator<? super Integer>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class [I cannot be cast to class [Ljava.lang.Object; ([I and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[0];
      int int0 = AoArrays.compare(byteArray1, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[0];
      int int0 = AoArrays.compare(byteArray0, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-38);
      int int0 = AoArrays.compare(byteArray1, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-24);
      int int0 = AoArrays.compare(byteArray0, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = AoArrays.allEquals(byteArray0, 0, 5, (byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        AoArrays.allEquals(byteArray0, 0, 5, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        AoArrays.allEquals((byte[]) null, 1969, 25, (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = AoArrays.allEquals(byteArray0, (-1), (byte)0, (byte)11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      boolean boolean0 = AoArrays.equals(byteArray0, 1, byteArray0, 4, 229);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = AoArrays.equals(byteArray0, 0, byteArray0, 0, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)125;
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = AoArrays.equals(byteArray0, byteArray1, (int) (byte)6, 1178);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        AoArrays.equals(byteArray0, byteArray0, (int) (byte)6, 1178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("com.aoapps.collections.AoArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      boolean boolean0 = AoArrays.equals(byteArray0, byteArray0, (-1), (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 0);
      AoArrays.UnmodifiableArraySet<LinkedList<Integer>> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<LinkedList<Integer>>(linkedListArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.remove(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.removeAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.addAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.add((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Set<Integer> set0 = AoArrays.asUnmodifiableSet(integerArray0);
      AoArrays.UnmodifiableArraySet<Integer> aoArrays_UnmodifiableArraySet0 = new AoArrays.UnmodifiableArraySet<Integer>(integerArray0);
      try { 
        aoArrays_UnmodifiableArraySet0.retainAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AoArrays$UnmodifiableArraySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = AoArrays.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = AoArrays.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = AoArrays.indexOf((float[]) null, 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = AoArrays.indexOf(integerArray0, integerArray0[8]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = AoArrays.indexOf(charArray0, '5');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = AoArrays.indexOf(byteArray0, (byte) (-29));
      assertEquals((-1), int0);
  }
}
