/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:17:26 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.AutoGrowArrayList;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AutoGrowArrayList_ESTest extends AutoGrowArrayList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      AutoGrowArrayList<Integer> autoGrowArrayList0 = new AutoGrowArrayList<Integer>(1);
      autoGrowArrayList0.set(1240, integer0);
      // Undeclared exception!
      try { 
        autoGrowArrayList0.addAll((-293), (Collection<? extends Integer>) autoGrowArrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -293, Size: 1241
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AutoGrowArrayList<Integer> autoGrowArrayList0 = new AutoGrowArrayList<Integer>();
      Integer integer0 = new Integer(0);
      autoGrowArrayList0.add(0, integer0);
      autoGrowArrayList0.add(0, integer0);
      assertEquals(2, autoGrowArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AutoGrowArrayList<Object> autoGrowArrayList0 = new AutoGrowArrayList<Object>();
      AutoGrowArrayList<Object> autoGrowArrayList1 = new AutoGrowArrayList<Object>(autoGrowArrayList0);
      autoGrowArrayList1.addAll(1, (Collection<?>) autoGrowArrayList0);
      assertEquals(1, autoGrowArrayList1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AutoGrowArrayList<Object> autoGrowArrayList0 = new AutoGrowArrayList<Object>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        autoGrowArrayList0.set((-768), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AutoGrowArrayList<Object> autoGrowArrayList0 = new AutoGrowArrayList<Object>(0);
      // Undeclared exception!
      try { 
        autoGrowArrayList0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.AutoGrowArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AutoGrowArrayList<Integer> autoGrowArrayList0 = null;
      try {
        autoGrowArrayList0 = new AutoGrowArrayList<Integer>((-487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -487
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AutoGrowArrayList<Object> autoGrowArrayList0 = new AutoGrowArrayList<Object>();
      boolean boolean0 = autoGrowArrayList0.addAll(1, (Collection<?>) autoGrowArrayList0);
      assertFalse(autoGrowArrayList0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AutoGrowArrayList<Object> autoGrowArrayList0 = new AutoGrowArrayList<Object>();
      autoGrowArrayList0.add(1, (Object) autoGrowArrayList0);
      Integer integer0 = new Integer((-1254));
      autoGrowArrayList0.set(1, integer0);
      assertEquals(2, autoGrowArrayList0.size());
  }
}
