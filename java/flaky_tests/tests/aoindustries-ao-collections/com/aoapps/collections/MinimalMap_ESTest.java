/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:09:12 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.MinimalMap;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MinimalMap_ESTest extends MinimalMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<MinimalMap, MinimalMap> map0 = MinimalMap.emptyMap();
      Map<Object, String> map1 = MinimalMap.copy((Map<Object, String>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<Object, String> map2 = MinimalMap.put(map1, (Object) hashMap0, "");
      Map<Object, String> map3 = MinimalMap.put(map2, (Object) map0, "|\",f4$W{=FbJ0t_");
      assertEquals(1, map3.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) null, (Object) null, (Object) null);
      Map<Object, Object> map1 = MinimalMap.put(map0, (Object) null, (Object) map0);
      assertFalse(map1.equals((Object)map0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<MinimalMap, Comparable<MinimalMap>> hashMap0 = new HashMap<MinimalMap, Comparable<MinimalMap>>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Map<MinimalMap, Comparable<MinimalMap>> map0 = MinimalMap.put((Map<MinimalMap, Comparable<MinimalMap>>) hashMap0, (MinimalMap) null, comparable0);
      Comparable<MinimalMap> comparable1 = MinimalMap.get(map0, (MinimalMap) null);
      assertNotNull(comparable1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      HashMap<Object, MinimalMap> hashMap1 = new HashMap<Object, MinimalMap>();
      Object object0 = MinimalMap.get((Map<HashMap<Object, MinimalMap>, Object>) null, hashMap1);
      Map<Object, Object> map1 = MinimalMap.put(map0, (Object) null, (Object) hashMap0);
      Map<Object, Object> map2 = MinimalMap.unmodifiable(map1);
      // Undeclared exception!
      try { 
        MinimalMap.remove(map2, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      hashMap0.putIfAbsent(map0, map0);
      // Undeclared exception!
      try { 
        MinimalMap.remove((Map<Object, Object>) hashMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      hashMap0.putIfAbsent(map0, map0);
      // Undeclared exception!
      try { 
        MinimalMap.put(map0, (Object) map0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put((Object) null, object0);
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      Map<Object, Object> map1 = MinimalMap.put(map0, (Object) map0, (Object) hashMap0);
      // Undeclared exception!
      try { 
        MinimalMap.get(map1, (Object) map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = hashMap0.put(object0, object0);
      hashMap0.put(object1, object1);
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      // Undeclared exception!
      try { 
        MinimalMap.copy(map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, HashMap<MinimalMap, Object>> hashMap0 = new HashMap<Object, HashMap<MinimalMap, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put(hashMap0, hashMap0);
      HashMap<MinimalMap, Object> hashMap2 = new HashMap<MinimalMap, Object>();
      hashMap0.put(hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        MinimalMap.containsKey((Map<Object, HashMap<MinimalMap, Object>>) hashMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Map<Object, AbstractMap.SimpleImmutableEntry<String, String>> map0 = MinimalMap.unmodifiable((Map<Object, AbstractMap.SimpleImmutableEntry<String, String>>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key: ").when(comparable0).toString();
      hashMap0.put(comparable0, (MinimalMap) null);
      Comparable<MinimalMap> comparable1 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key: ").when(comparable1).toString();
      hashMap0.put(comparable1, (MinimalMap) null);
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.copy((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key: ").when(comparable0).toString();
      hashMap0.put(comparable0, (MinimalMap) null);
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.copy((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.copy((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, (String) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      hashMap0.put("uUm5{7^DG", (String) null);
      hashMap0.put(abstractMap_SimpleImmutableEntry1, "uUm5{7^DG");
      Collection<String> collection0 = MinimalMap.valuesCopy((Map<Object, String>) hashMap0);
      assertTrue(collection0.contains("uUm5{7^DG"));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<MinimalMap, MinimalMap> hashMap0 = new HashMap<MinimalMap, MinimalMap>();
      Collection<MinimalMap> collection0 = MinimalMap.valuesCopy((Map<MinimalMap, MinimalMap>) hashMap0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Collection<AbstractMap.SimpleImmutableEntry<Comparable, MinimalMap>> collection0 = MinimalMap.valuesCopy((Map<MinimalMap, AbstractMap.SimpleImmutableEntry<Comparable, MinimalMap>>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Collection<Comparable<Object>> collection0 = MinimalMap.values((Map<MinimalMap, Comparable<Object>>) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, Object> map0 = MinimalMap.put((Map<Object, Object>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      boolean boolean0 = MinimalMap.containsKey(map0, (Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<MinimalMap, MinimalMap> hashMap0 = new HashMap<MinimalMap, MinimalMap>();
      Map<Object, HashMap<Object, Object>> map0 = MinimalMap.emptyMap();
      boolean boolean0 = MinimalMap.containsKey(map0, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = MinimalMap.containsKey((Map<Comparable<MinimalMap>, MinimalMap>) null, comparable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("2,SH;xOPpx@?}E:F=4", "").when(comparable0).toString();
      hashMap0.put(comparable0, (MinimalMap) null);
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.put((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0, (Comparable<MinimalMap>) null, (MinimalMap) null);
      assertEquals(1, hashMap0.size());
      
      Map<Comparable<MinimalMap>, MinimalMap> map1 = MinimalMap.remove(map0, (Comparable<MinimalMap>) null);
      assertTrue(map1.equals((Object)map0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<MinimalMap, MinimalMap> hashMap0 = new HashMap<MinimalMap, MinimalMap>();
      hashMap0.put((MinimalMap) null, (MinimalMap) null);
      Map<MinimalMap, MinimalMap> map0 = MinimalMap.remove((Map<MinimalMap, MinimalMap>) hashMap0, (MinimalMap) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key: ").when(comparable0).toString();
      hashMap0.put(comparable0, (MinimalMap) null);
      Comparable<MinimalMap> comparable1 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate key: ").when(comparable1).toString();
      hashMap0.put(comparable1, (MinimalMap) null);
      Comparable<MinimalMap> comparable2 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.remove((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0, comparable2);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Comparable<MinimalMap>, MinimalMap> hashMap0 = new HashMap<Comparable<MinimalMap>, MinimalMap>();
      Comparable<MinimalMap> comparable0 = (Comparable<MinimalMap>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Map<Comparable<MinimalMap>, MinimalMap> map0 = MinimalMap.remove((Map<Comparable<MinimalMap>, MinimalMap>) hashMap0, comparable0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Comparable<Object>> hashMap0 = new HashMap<Object, Comparable<Object>>();
      Map<Object, String> map0 = MinimalMap.remove((Map<Object, String>) null, (Object) hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<MinimalMap, MinimalMap> hashMap0 = new HashMap<MinimalMap, MinimalMap>();
      Map<MinimalMap, MinimalMap> map0 = MinimalMap.put((Map<MinimalMap, MinimalMap>) hashMap0, (MinimalMap) null, (MinimalMap) null);
      MinimalMap.valuesCopy(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Map<Object, MinimalMap> map0 = MinimalMap.put((Map<Object, MinimalMap>) null, (Object) null, (MinimalMap) null);
      Map<Object, MinimalMap> map1 = MinimalMap.remove(map0, (Object) map0);
      assertSame(map1, map0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Map<ArrayList<MinimalMap>, MinimalMap> map0 = MinimalMap.emptyMap();
      Collection<MinimalMap> collection0 = MinimalMap.values(map0);
      assertNotNull(collection0);
  }
}
