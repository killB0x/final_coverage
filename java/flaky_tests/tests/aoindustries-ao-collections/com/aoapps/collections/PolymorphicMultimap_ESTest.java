/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 10:58:56 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.PolymorphicMultimap;
import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PolymorphicMultimap_ESTest extends PolymorphicMultimap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Object, Integer>(class0);
      PolymorphicMultimap.Lists<Object, Integer> polymorphicMultimap_Lists0 = polymorphicMultimap0.getLists(class0);
      assertNull(polymorphicMultimap_Lists0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.put((Object) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aoapps.collections.PolymorphicMultimap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.put(class0, class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/aoapps/lang/reflect/Classes
         //
         verifyException("com.aoapps.collections.PolymorphicMultimap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getValuesFilterKey((Class<Object>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getValuesFilterEntry((Class<Integer>) null, (Predicate<? super Map.Entry<Integer, Class<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-691));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Object, Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getValues((Class<?>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getValues((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLists((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastValueFilterKey((Class<Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastValueFilterEntry((Class<Object>) null, (Predicate<? super Map.Entry<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastValue((Class<?>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastValue((Class<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Predicate<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Predicate<Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastKeyFilterValue((Class<Object>) null, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastKeyFilterEntry((Class<Integer>) null, (Predicate<? super Map.Entry<Integer, Class<Integer>>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastKey((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastKey((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastEntryFilterValue((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastEntryFilterKey((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Object, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Object, Integer>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastEntry((Class<Integer>) null, (Predicate<? super Map.Entry<Integer, Integer>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>((Class<Integer>) null);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getLastEntry((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>>(class0);
      List<Integer> list0 = polymorphicMultimap0.getKeys(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) list0);
      PolymorphicMultimap<Integer, PolymorphicMultimap<Integer, Integer>> polymorphicMultimap1 = new PolymorphicMultimap<Integer, PolymorphicMultimap<Integer, Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getKeysFilterValue((Class<Integer>) null, (Predicate<? super PolymorphicMultimap<Integer, Integer>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      Class<Integer> class1 = polymorphicMultimap0.getFirstValue(class0);
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap1 = new PolymorphicMultimap<Integer, Integer>(class1);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getKeys((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstValueFilterKey((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      PolymorphicMultimap<Object, Object> polymorphicMultimap1 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getFirstValueFilterEntry((Class<Object>) null, (Predicate<? super Map.Entry<Object, Object>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Class<Integer> class1 = polymorphicMultimap0.getFirstValue(class0);
      PolymorphicMultimap<Integer, Class<Object>> polymorphicMultimap1 = new PolymorphicMultimap<Integer, Class<Object>>(class1);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getFirstValue((Class<? extends Integer>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, PolymorphicMultimap.Lists<Object, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, PolymorphicMultimap.Lists<Object, Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      PolymorphicMultimap<Object, Object> polymorphicMultimap1 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getFirstKeyFilterValue((Class<Object>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstKeyFilterEntry((Class<Integer>) null, (Predicate<? super Map.Entry<Integer, Integer>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstKey((Class<PolymorphicMultimap.Lists<Object, PolymorphicMultimap.Lists>>) null, (Predicate<? super PolymorphicMultimap.Lists<Object, PolymorphicMultimap.Lists>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstKey((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>((Class<Integer>) null);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstEntryFilterValue((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Object>>(class0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstEntryFilterKey((Class<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, AbstractMap.SimpleEntry<Object, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, AbstractMap.SimpleEntry<Object, Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstEntry((Class<AbstractMap.SimpleEntry<Predicate, Predicate>>) null, (Predicate<? super Map.Entry<AbstractMap.SimpleEntry<Predicate, Predicate>, AbstractMap.SimpleEntry<Object, Object>>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>((Class<Integer>) null);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getFirstEntry((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getEntriesFilterKey((Class<Object>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      PolymorphicMultimap<Object, Object> polymorphicMultimap1 = new PolymorphicMultimap<Object, Object>((Class<Object>) null);
      // Undeclared exception!
      try { 
        polymorphicMultimap1.getEntries((Class<Object>) null, (Predicate<? super Map.Entry<Object, Object>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PolymorphicMultimap<Integer, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Object>>((Class<Integer>) null);
      // Undeclared exception!
      try { 
        polymorphicMultimap0.getEntries((Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Map.Entry<Integer, Integer> map_Entry0 = polymorphicMultimap0.getLastEntry(class0, (Predicate<? super Map.Entry<Integer, Integer>>) predicate0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      Map.Entry<Integer, Integer> map_Entry0 = polymorphicMultimap0.getFirstEntry(class0, (Predicate<? super Map.Entry<Integer, Integer>>) predicate0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      List<Map.Entry<Integer, Integer>> list0 = (List<Map.Entry<Integer, Integer>>)polymorphicMultimap0.getEntries(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Integer, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Integer, Object>>(class0);
      List<PolymorphicMultimap.Lists<Integer, Object>> list0 = polymorphicMultimap0.getValues(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      Map.Entry<Integer, Integer> map_Entry0 = polymorphicMultimap0.getLastEntryFilterValue(class0, (Predicate<? super Integer>) null);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      Map.Entry<Object, Class<Object>> map_Entry0 = polymorphicMultimap0.getLastEntryFilterKey(class0, (Predicate<? super Object>) predicate0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>((Class<Object>) null);
      Map.Entry<Integer, Object> map_Entry0 = polymorphicMultimap0.getLastEntry(class0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      Object object0 = polymorphicMultimap0.getLastValueFilterEntry(class0, (Predicate<? super Map.Entry<Object, Object>>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Class<Integer> class1 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      Class<Object> class2 = polymorphicMultimap0.getLastValueFilterKey(class1, (Predicate<? super Integer>) predicate0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>>(class1);
      List<Integer> list0 = polymorphicMultimap0.getKeys(class1);
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap1 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) list0);
      Class<Integer> class2 = polymorphicMultimap1.getLastValue(class1, predicate0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      Class<Integer> class1 = Integer.class;
      Class<Integer> class2 = polymorphicMultimap0.getLastValue(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Object, PolymorphicMultimap.Lists<Object, Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, PolymorphicMultimap.Lists<Object, Object>>((Class<Object>) null);
      Object object0 = polymorphicMultimap0.getLastKeyFilterEntry(class0, (Predicate<? super Map.Entry<Object, PolymorphicMultimap.Lists<Object, Object>>>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Object>>(class0);
      Integer integer0 = polymorphicMultimap0.getLastKeyFilterValue(class0, (Predicate<? super Class<Object>>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>>(class0);
      List<Integer> list0 = polymorphicMultimap0.getKeys(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) list0);
      Integer integer0 = polymorphicMultimap0.getLastKey(class0, (Predicate<? super Integer>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Object>>(class0);
      Integer integer0 = polymorphicMultimap0.getLastKey(class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      Map.Entry<Integer, Class<Integer>> map_Entry0 = polymorphicMultimap0.getFirstEntryFilterValue(class0, (Predicate<? super Class<Integer>>) predicate0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>>(class1);
      List<Integer> list0 = polymorphicMultimap0.getKeys(class1);
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap1 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) list0);
      Map.Entry<Object, Class<Integer>> map_Entry0 = polymorphicMultimap1.getFirstEntryFilterKey(class0, (Predicate<? super Object>) predicate0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      Map.Entry<Integer, Class<Integer>> map_Entry0 = polymorphicMultimap0.getFirstEntry(class0);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      Class<Object> class1 = polymorphicMultimap0.getFirstValueFilterKey(class0, (Predicate<? super Object>) predicate0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      Integer integer0 = new Integer((-691));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Class<Integer> class1 = polymorphicMultimap0.getFirstValue(class0, predicate0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>(class0);
      Integer integer0 = polymorphicMultimap0.getFirstKeyFilterEntry(class0, (Predicate<? super Map.Entry<Integer, Integer>>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      Class<Integer> class1 = Integer.class;
      Integer integer0 = polymorphicMultimap0.getFirstKeyFilterValue(class1, (Predicate<? super Class<Object>>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Integer> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Integer>((Class<Integer>) null);
      Integer integer0 = polymorphicMultimap0.getFirstKey(class0, (Predicate<? super Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Integer>>(class0);
      Class<Integer> class1 = Integer.class;
      Integer integer0 = polymorphicMultimap0.getFirstKey(class1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Object> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Object>(class0);
      List<Map.Entry<Integer, Object>> list0 = (List<Map.Entry<Integer, Object>>)polymorphicMultimap0.getEntriesFilterValue(class0, (Predicate<? super Object>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      List<Map.Entry<Integer, Class<Integer>>> list0 = (List<Map.Entry<Integer, Class<Integer>>>)polymorphicMultimap0.getEntriesFilterKey(class0, (Predicate<? super Integer>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      List<Map.Entry<Object, Object>> list0 = (List<Map.Entry<Object, Object>>)polymorphicMultimap0.getEntries(class0, (Predicate<? super Map.Entry<Object, Object>>) predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Class<Object> class1 = polymorphicMultimap0.getFirstValueFilterEntry(class0, (Predicate<? super Map.Entry<Object, Class<Object>>>) predicate0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      Class<Integer> class1 = Integer.class;
      PolymorphicMultimap<Object, Predicate<Object>> polymorphicMultimap1 = new PolymorphicMultimap<Object, Predicate<Object>>(class0);
      List<Predicate<Object>> list0 = polymorphicMultimap1.getValuesFilterEntry(class1, (Predicate<? super Map.Entry<Integer, Predicate<Object>>>) predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Class<Object>> polymorphicMultimap0 = new PolymorphicMultimap<Object, Class<Object>>(class0);
      Class<Integer> class1 = Integer.class;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      List<Class<Object>> list0 = polymorphicMultimap0.getValuesFilterKey(class1, (Predicate<? super Integer>) predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      List<Object> list0 = polymorphicMultimap0.getValues(class0, predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, Class<Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, Class<Integer>>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      List<Integer> list0 = polymorphicMultimap0.getKeysFilterEntry(class0, (Predicate<? super Map.Entry<Integer, Class<Integer>>>) predicate0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PolymorphicMultimap<Object, Object> polymorphicMultimap0 = new PolymorphicMultimap<Object, Object>(class0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Class<Integer> class1 = Integer.class;
      List<Integer> list0 = polymorphicMultimap0.getKeysFilterValue(class1, (Predicate<? super Object>) predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>> polymorphicMultimap0 = new PolymorphicMultimap<Integer, PolymorphicMultimap.Lists<Object, Integer>>(class0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) polymorphicMultimap0);
      List<Integer> list0 = polymorphicMultimap0.getKeys(class0, (Predicate<? super Integer>) predicate0);
      assertTrue(list0.isEmpty());
  }
}
