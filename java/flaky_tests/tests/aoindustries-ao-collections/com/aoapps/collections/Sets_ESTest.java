/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:13:45 GMT 2022
 */

package com.aoapps.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aoapps.collections.Sets;
import java.lang.reflect.Array;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sets_ESTest extends Sets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      Set<Integer> set0 = Sets.union((Set<? extends Integer>[]) setArray0);
      Integer[] integerArray0 = new Integer[3];
      Set<Integer> set1 = Sets.union((Set<? extends Integer>) set0, integerArray0);
      setArray0[2] = set1;
      Set<Integer> set2 = Sets.union((Set<? extends Integer>[]) setArray0);
      assertFalse(set2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Set<Object> set0 = Sets.union((Set<?>) null, (Set<?>) null);
      assertNotNull(set0);
      
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Set<Object> set1 = Sets.union((Set<?>) linkedHashSet0, (Object[]) setArray0);
      Set<Object> set2 = Sets.union((Set<?>) set0, (Set<?>) set1);
      assertFalse(set2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 9);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      setArray0[0] = (Set<Object>) linkedHashSet0;
      linkedHashSet0.add(setArray0[0]);
      // Undeclared exception!
      try { 
        Sets.union((Set<?>[]) setArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedHashSet0;
      linkedHashSet0.add(objectArray0[0]);
      // Undeclared exception!
      try { 
        Sets.union((Set<?>) linkedHashSet0, objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 2);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(linkedHashSet0);
      // Undeclared exception!
      try { 
        Sets.union((Set<?>) linkedHashSet0, (Set<?>) setArray0[1]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 1);
      Set<Object> set0 = Sets.union((Set<?>) null, (Object[]) setArray0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Set<Integer> set0 = Sets.union((Set<? extends Integer>[]) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Set<Object> set0 = Sets.union((Set<?>) null, (Set<?>) null);
      assertNotNull(set0);
      
      Set<Object> set1 = Sets.union((Set<?>) set0, (Object[]) null);
      assertNotSame(set1, set0);
  }
}
