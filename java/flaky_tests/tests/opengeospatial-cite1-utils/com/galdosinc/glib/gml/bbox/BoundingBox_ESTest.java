/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 07:50:30 GMT 2022
 */

package com.galdosinc.glib.gml.bbox;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.galdosinc.glib.gml.bbox.BoundingBox;
import com.galdosinc.glib.gml.coord.CoordinateTupleLinkedList;
import com.galdosinc.glib.gml.coord.CoordinateTupleList;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundingBox_ESTest extends BoundingBox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      boundingBox0.setBoundingBox(boundingBox1);
      assertEquals(3, boundingBox0.getDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      BoundingBox boundingBox1 = new BoundingBox(doubleArray1, doubleArray0);
      boundingBox0.setBoundingBox(boundingBox1);
      assertEquals(2, boundingBox0.getDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 206.27374;
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      BoundingBox boundingBox1 = new BoundingBox(doubleArray1, doubleArray1);
      boundingBox0.union(boundingBox1);
      assertEquals(0.0, boundingBox0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      BoundingBox boundingBox1 = new BoundingBox(doubleArray1, doubleArray1);
      try { 
        boundingBox0.union(boundingBox1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot union bounding boxes of different dimensions 2 and 5
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BoundingBox boundingBox0 = new BoundingBox();
      boundingBox0.union(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      double[] doubleArray0 = boundingBox0.getUpperRight();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1003.3;
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMinY();
      assertEquals(1003.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2166.4042121310285);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMinY();
      assertEquals((-2166.4042121310285), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMinX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1051.105200221;
      doubleArray0[0] = doubleArray1;
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, true);
      BoundingBox boundingBox0 = new BoundingBox(coordinateTupleLinkedList0);
      double double0 = boundingBox0.getMinX();
      assertEquals(1051.105200221, boundingBox0.getMaxX(), 0.01);
      assertEquals(1051.105200221, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1902.55039764679);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMinX();
      assertEquals((-1902.55039764679), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMaxY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 206.27374;
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMaxY();
      assertEquals(206.27374, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1260.38418536);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMaxY();
      assertEquals((-1260.38418536), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMaxX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1051.105200221;
      doubleArray0[0] = doubleArray1;
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, true);
      BoundingBox boundingBox0 = new BoundingBox(coordinateTupleLinkedList0);
      assertFalse(boundingBox0.isEmpty());
      
      double double0 = boundingBox0.getMaxX();
      assertEquals(1051.105200221, double0, 0.01);
      assertEquals(1051.105200221, boundingBox0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-805.455559);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMaxX();
      assertEquals((-805.455559), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = boundingBox0.getLowerLeftTuple();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      int int0 = boundingBox0.getDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 206.27374;
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      assertEquals(206.27374, boundingBox1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1.0);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      assertEquals(0.0, boundingBox1.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 206.27374;
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      assertEquals(206.27374, boundingBox1.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2166.4042121310285);
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      assertEquals(0.0, boundingBox1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      assertFalse(boundingBox1.equals((Object)boundingBox0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.union((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.union((BoundingBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[4];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        boundingBox0.union(boundingBox0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.setBoundingBox((BoundingBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        boundingBox0.setBoundingBox(boundingBox0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinateUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.getMinY();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("coord");
      try { 
        BoundingBox.generateFromGmlObject(iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not compute the bounding box of GML object coord
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox((CoordinateTupleList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      BoundingBox boundingBox1 = new BoundingBox(coordinateTupleLinkedList0);
      boundingBox1.setBoundingBox(boundingBox0);
      assertFalse(boundingBox1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Could not instantiate a bounding box.");
      BoundingBox boundingBox0 = BoundingBox.generateFromGmlObject(iIOMetadataNode0);
      boolean boolean0 = boundingBox0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      boolean boolean0 = boundingBox0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      double[] doubleArray0 = boundingBox0.getLowerLeftTuple();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      int int0 = boundingBox0.getDimension();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = boundingBox0.getUpperRight();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray1);
      boundingBox0.pad();
      assertEquals(0.0, boundingBox0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[3][6];
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, true);
      BoundingBox boundingBox0 = new BoundingBox(coordinateTupleLinkedList0);
      assertFalse(boundingBox0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      boundingBox0.setBoundingBox(boundingBox0);
      assertTrue(boundingBox0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 532.73;
      doubleArray0[0] = doubleArray1;
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, false);
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox(coordinateTupleLinkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      boundingBox0.pad();
      double[] doubleArray0 = new double[0];
      try { 
        boundingBox0.union(doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The bounding box was padded because it was a point and now it is invalid to use it in bbox unions.
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.union(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      BoundingBox boundingBox1 = new BoundingBox(doubleArray1, doubleArray0);
      try { 
        boundingBox0.union(boundingBox1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot union bounding boxes of different dimensions 18 and 5
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = new BoundingBox();
      boundingBox1.union(boundingBox0);
      assertEquals(8, boundingBox1.getDimension());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      boundingBox0.pad();
      try { 
        boundingBox0.union(boundingBox0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The bounding box was padded because it was a point and now it is invalid to use it in bbox unions.
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("_k9vd~m0dW:OUTu6P");
      BoundingBox boundingBox0 = BoundingBox.generateFromGmlObject(iIOMetadataNode0);
      boundingBox0.union(boundingBox0);
      assertTrue(boundingBox0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("EZvelope");
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox(iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // The passed element EZvelope is neither gml:Box nor gml:Envelope
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Envelope");
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Box");
      BoundingBox boundingBox0 = null;
      try {
        boundingBox0 = new BoundingBox(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        BoundingBox.generateFromGmlObject(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        boundingBox0.getMaxY();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.getMaxX();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      double double0 = boundingBox0.getMinY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox();
      // Undeclared exception!
      try { 
        boundingBox0.getMinX();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.galdosinc.glib.gml.bbox.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      BoundingBox boundingBox0 = new BoundingBox(doubleArray0, doubleArray0);
      BoundingBox boundingBox1 = boundingBox0.cloneBBox();
      boundingBox1.pad();
      boundingBox0.union(boundingBox1);
      assertEquals(1.0E-6, boundingBox1.getMaxX(), 0.01);
      assertEquals(1.0E-6, boundingBox0.getMaxX(), 0.01);
  }
}
