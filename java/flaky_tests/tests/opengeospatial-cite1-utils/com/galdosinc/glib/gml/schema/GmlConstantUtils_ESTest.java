/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 08:06:10 GMT 2022
 */

package com.galdosinc.glib.gml.schema;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.galdosinc.glib.gml.schema.GmlConstantUtils;
import com.galdosinc.glib.gml.schema.GmlConstants;
import com.galdosinc.glib.gml.schema.GmlVersion;
import com.galdosinc.glib.xml.QName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GmlConstantUtils_ESTest extends GmlConstantUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(GmlVersion.GML_3);
      QName qName0 = GmlConstants.TOPO_POINT_TYPE_QNAME;
      boolean boolean0 = gmlConstantUtils0.isGeometryElement(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GmlVersion gmlVersion0 = GmlVersion.GML_3;
      QName qName0 = GmlConstants.MULTIGEOMETRY_TYPE_QNAME;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      boolean boolean0 = gmlConstantUtils0.isGeometryType(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GmlVersion gmlVersion0 = GmlVersion.GML_2;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      QName qName0 = GmlConstants.MULTIPOINT_TYPE_QNAME;
      boolean boolean0 = gmlConstantUtils0.isGeometryElement(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = GmlConstants.ARC_TYPE_QNAME;
      GmlVersion gmlVersion0 = GmlVersion.GML_2;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      boolean boolean0 = gmlConstantUtils0.isGeometryType(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(GmlVersion.GML_3);
      GmlVersion gmlVersion0 = GmlVersion.GML_2;
      GmlVersion.GML_3 = gmlVersion0;
      QName qName0 = GmlConstants.CIRCLE_BY_CENTER_POINT_TYPE_QNAME;
      // Undeclared exception!
      try { 
        gmlConstantUtils0.isGeometryElement(qName0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot work with GML version 3
         //
         verifyException("com.galdosinc.glib.gml.schema.GmlConstantUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = GmlConstantUtils.getGmlTopologyCode("tr^lmDB. <J!z[");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GmlVersion gmlVersion0 = GmlVersion.GML_2;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      QName qName0 = GmlConstants.ABS_FEATURE_COLLECTION_ELEMENT_QNAME;
      boolean boolean0 = gmlConstantUtils0.isGeometryElement(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GmlVersion gmlVersion0 = GmlVersion.GML_3;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      QName qName0 = GmlConstants.ENVELOPE_ELEMENT_QNAME;
      boolean boolean0 = gmlConstantUtils0.isGeometryElement(qName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = GmlConstantUtils.getGmlGeometryCode("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GmlVersion gmlVersion0 = GmlVersion.GML_3;
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(gmlVersion0);
      QName qName0 = GmlConstants.MULTIGEOMETRY_ELEMENT_QNAME;
      boolean boolean0 = gmlConstantUtils0.isGeometryType(qName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GmlConstantUtils gmlConstantUtils0 = new GmlConstantUtils(GmlVersion.GML_3);
      GmlVersion gmlVersion0 = GmlVersion.GML_2;
      GmlVersion.GML_3 = gmlVersion0;
      QName qName0 = GmlConstants.ARC_BY_BULGE_TYPE_QNAME;
      // Undeclared exception!
      try { 
        gmlConstantUtils0.isGeometryType(qName0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot work with GML version 3
         //
         verifyException("com.galdosinc.glib.gml.schema.GmlConstantUtils", e);
      }
  }
}
