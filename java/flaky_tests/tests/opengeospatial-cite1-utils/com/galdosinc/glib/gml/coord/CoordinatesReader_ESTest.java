/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 07:54:22 GMT 2022
 */

package com.galdosinc.glib.gml.coord;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.galdosinc.glib.gml.coord.CoordinateTupleLinkedList;
import com.galdosinc.glib.gml.coord.CoordinateTupleList;
import com.galdosinc.glib.gml.coord.CoordinatesFormat;
import com.galdosinc.glib.gml.coord.CoordinatesReader;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoordinatesReader_ESTest extends CoordinatesReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("mR7E,k?&on4UA7B[8");
      coordinatesReader0.read((Element) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        coordinatesReader0.read("mR7E,k?&on4UA7B[8", (CoordinatesFormat) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesFormat0.setDecimalPoint("^");
      coordinatesFormat0.setCoordinateSeparator("^");
      CoordinatesFormat coordinatesFormat1 = coordinatesReader0.getCoordinatesFormat();
      assertEquals(" ", coordinatesFormat1.getDefaultTupleSeparator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesFormat0.setMaxDecimalDigits(0);
      CoordinatesFormat coordinatesFormat1 = coordinatesReader0.getCoordinatesFormat();
      assertEquals(" ", coordinatesFormat1.getDefaultTupleSeparator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesFormat0.setMaxDecimalDigits((-11));
      CoordinatesFormat coordinatesFormat1 = coordinatesReader0.getCoordinatesFormat();
      assertEquals(".", coordinatesFormat1.getDecimalPoint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[3][5];
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, false);
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      CoordinateTupleList coordinateTupleList0 = coordinatesReader0.getCoordinateTupleList();
      assertEquals(3, coordinateTupleList0.getCoordinateTupleCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      CoordinateTupleList coordinateTupleList0 = coordinatesReader0.getCoordinateTupleList();
      assertEquals((-1), coordinateTupleList0.getDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      // Undeclared exception!
      try { 
        coordinatesReader0.useCoordinateTupleList((CoordinateTupleList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      // Undeclared exception!
      try { 
        coordinatesReader0.read((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.xml.dom.DomChildAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      CoordinatesFormat coordinatesFormat0 = new CoordinatesFormat();
      // Undeclared exception!
      try { 
        coordinatesReader0.read("''0i:Aw+Q94", coordinatesFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesReader0.read("", coordinatesFormat0);
      assertEquals(".", coordinatesFormat0.getDecimalPoint());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      try { 
        coordinatesReader0.read("", (CoordinatesFormat) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // CoordinatesReader: The desired CoordinateTupleList must be set prior to reading coordinates.
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = new CoordinatesFormat();
      try { 
        coordinatesReader0.read(", 5mu<;?PF%b$Z|n<", coordinatesFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The coordinate tuple 5mu<;?PF%b$Z|n< has more coordinates than expected 0
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS(".", "decimal", ".");
      try { 
        coordinatesReader0.read((Element) iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // CoordinatesReader: The desired CoordinateTupleList must be set prior to reading coordinates.
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttributeNS("decimal", "decimal", " ");
      try { 
        coordinatesReader0.read((Element) iIOMetadataNode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // CoordinatesReader: The desired CoordinateTupleList must be set prior to reading coordinates.
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttribute("ts", "ts");
      // Undeclared exception!
      try { 
        coordinatesReader0.read((Element) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (ts) cannot be the coordinate tuple separator in coordinates.
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.setAttributeNS("cs", "cs", "cs");
      // Undeclared exception!
      try { 
        coordinatesReader0.read((Element) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (cs) cannot be the coordinate separator in coordinates.
         //
         verifyException("com.galdosinc.glib.gml.coord.CoordinatesFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = new CoordinatesFormat();
      // Undeclared exception!
      try { 
        coordinatesReader0.read("1 kb-@h,c;yrNX0", coordinatesFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesFormat0.setCoordinateSeparator("^");
      coordinatesReader0.read("^", coordinatesFormat0);
      CoordinateTupleList coordinateTupleList0 = coordinatesReader0.getCoordinateTupleList();
      assertEquals(0, coordinateTupleList0.getDimension());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleLinkedList coordinateTupleLinkedList0 = new CoordinateTupleLinkedList();
      double[][] doubleArray0 = new double[3][5];
      coordinateTupleLinkedList0.setCoordinateTuples(doubleArray0, false);
      coordinatesReader0.useCoordinateTupleList(coordinateTupleLinkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      coordinatesReader0.read((Element) iIOMetadataNode0);
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      coordinatesFormat0.setCoordinateSeparator("^");
      coordinatesReader0.read("^", coordinatesFormat0);
      assertEquals(Integer.MAX_VALUE, CoordinatesFormat.NO_MAX_DECIMAL_DIGITS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinatesFormat coordinatesFormat0 = coordinatesReader0.getCoordinatesFormat();
      assertNull(coordinatesFormat0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CoordinatesReader coordinatesReader0 = new CoordinatesReader();
      CoordinateTupleList coordinateTupleList0 = coordinatesReader0.getCoordinateTupleList();
      assertNull(coordinateTupleList0);
  }
}
