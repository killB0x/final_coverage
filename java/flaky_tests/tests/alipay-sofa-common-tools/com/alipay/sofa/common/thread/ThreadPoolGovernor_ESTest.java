/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 19:38:07 GMT 2022
 */

package com.alipay.sofa.common.thread;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.thread.NamedThreadFactory;
import com.alipay.sofa.common.thread.ThreadPoolConfig;
import com.alipay.sofa.common.thread.ThreadPoolGovernor;
import com.alipay.sofa.common.thread.ThreadPoolMonitorWrapper;
import com.alipay.sofa.common.thread.ThreadPoolStatistics;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadPoolGovernor_ESTest extends ThreadPoolGovernor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.stopMonitorThreadPoolBySpaceName("Reschedule {} with period: {} SECONDS");
      threadPoolGovernor0.startGovernorSchedule();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolGovernor.GovernorInfoDumper threadPoolGovernor_GovernorInfoDumper0 = threadPoolGovernor0.new GovernorInfoDumper();
      threadPoolGovernor_GovernorInfoDumper0.run();
      threadPoolGovernor0.setGovernorLoggable(false);
      assertFalse(threadPoolGovernor0.isGovernorLoggable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      String string0 = "Reschedule {} with period: {} SECONDS";
      threadPoolGovernor0.stopMonitorThreadPoolBySpaceName("Reschedule {} with period: {} SECONDS");
      threadPoolGovernor0.startGovernorSchedule();
      boolean boolean0 = threadPoolGovernor0.isGlobalMonitorLoggable();
      int int0 = (-755);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      NamedThreadFactory namedThreadFactory0 = new NamedThreadFactory(string0, boolean0);
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedBlockingDeque0, namedThreadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.setMonitorThreadPoolBySpaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor", (-991L));
      assertFalse(threadPoolGovernor0.isGovernorLoggable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolGovernor.CLASS_NAME = "KrE(";
      threadPoolGovernor0.setGlobalMonitorLoggable(false);
      threadPoolGovernor0.startMonitorThreadPool("");
      ThreadPoolGovernor threadPoolGovernor1 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor1.getThreadPoolExecutor("KrE(");
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder1 = threadPoolConfig_SofaThreadConfigBuilder0.threadPoolName("KrE(");
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder2 = threadPoolConfig_SofaThreadConfigBuilder1.spaceName("_z}v\",");
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder2);
      threadPoolGovernor1.registerThreadPoolExecutor((ThreadPoolExecutor) null, threadPoolConfig0, (ThreadPoolStatistics) null);
      threadPoolGovernor0.setGovernorPeriod(6031L);
      assertFalse(threadPoolGovernor0.isGlobalMonitorLoggable());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.getSpaceNameThreadPoolNumber("('xyN)");
      boolean boolean0 = threadPoolGovernor0.isGovernorLoggable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.unregisterThreadPoolExecutor((ThreadPoolConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolGovernor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.stopMonitorThreadPoolBySpaceName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.stopMonitorThreadPool((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.startMonitorThreadPoolBySpaceName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.startMonitorThreadPool((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.setMonitorThreadPoolBySpaceName((String) null, 5000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      // Undeclared exception!
      try { 
        threadPoolGovernor0.registerThreadPoolExecutor((ThreadPoolExecutor) null, (ThreadPoolConfig) null, threadPoolStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolGovernor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.getThreadPoolMonitorWrapper((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.getThreadPoolExecutor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      // Undeclared exception!
      try { 
        threadPoolGovernor0.getSpaceNameThreadPoolNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.restartMonitorThreadPool("mF(z/_M");
      int int0 = threadPoolGovernor0.getSpaceNameThreadPoolNumber("m(<|d$q8C]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.stopMonitorThreadPool("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolGovernor threadPoolGovernor1 = ThreadPoolGovernor.getInstance();
      assertEquals((-1L), threadPoolGovernor1.getGovernorPeriod());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.getThreadPoolMonitorWrapper("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      threadPoolGovernor0.startGovernorSchedule();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.getThreadPoolExecutor("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder1 = threadPoolConfig_SofaThreadConfigBuilder0.threadPoolName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      threadPoolConfig_SofaThreadConfigBuilder1.threadPoolName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder1);
      threadPoolGovernor0.registerThreadPoolExecutor((ThreadPoolExecutor) null, threadPoolConfig0, (ThreadPoolStatistics) null);
      threadPoolGovernor0.startMonitorThreadPoolBySpaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      assertEquals((-1L), threadPoolGovernor0.getGovernorPeriod());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      assertEquals(6031L, threadPoolGovernor0.getGovernorPeriod());
      
      // Undeclared exception!
      try { 
        threadPoolGovernor0.setGovernorPeriod((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolGovernor.GovernorInfoDumper threadPoolGovernor_GovernorInfoDumper0 = threadPoolGovernor0.new GovernorInfoDumper();
      ThreadPoolGovernor threadPoolGovernor1 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor1.setMonitorThreadPoolBySpaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor", 4088L);
      threadPoolGovernor0.stopMonitorThreadPoolBySpaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      threadPoolGovernor1.startMonitorThreadPool("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolGovernor threadPoolGovernor2 = ThreadPoolGovernor.getInstance();
      assertSame(threadPoolGovernor2, threadPoolGovernor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.stopMonitorThreadPoolBySpaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      threadPoolGovernor0.startMonitorThreadPoolBySpaceName("");
      assertFalse(threadPoolGovernor0.isGlobalMonitorLoggable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.startMonitorThreadPoolBySpaceName("logging.level.");
      assertFalse(threadPoolGovernor0.isGlobalMonitorLoggable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.setGlobalMonitorLoggable(false);
      threadPoolGovernor0.startMonitorThreadPool("");
      // Undeclared exception!
      try { 
        threadPoolGovernor0.restartMonitorThreadPool((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder1 = threadPoolConfig_SofaThreadConfigBuilder0.spaceName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolConfig threadPoolConfig0 = threadPoolConfig_SofaThreadConfigBuilder1.build();
      threadPoolGovernor0.unregisterThreadPoolExecutor(threadPoolConfig0);
      assertTrue(threadPoolGovernor0.isGlobalMonitorLoggable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      threadPoolConfig_SofaThreadConfigBuilder0.taskTimeout((-1L));
      threadPoolConfig_SofaThreadConfigBuilder0.spaceName("[/C,[O~@{:");
      threadPoolConfig_SofaThreadConfigBuilder0.threadPoolName("SOFA-Thread-Pool-Governor");
      ThreadPoolConfig threadPoolConfig0 = threadPoolConfig_SofaThreadConfigBuilder0.build();
      threadPoolConfig0.toString();
      threadPoolGovernor0.unregisterThreadPoolExecutor(threadPoolConfig0);
      ThreadPoolGovernor threadPoolGovernor1 = ThreadPoolGovernor.getInstance();
      assertEquals(6031L, threadPoolGovernor1.getGovernorPeriod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder0);
      threadPoolConfig0.setThreadPoolName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      threadPoolGovernor0.unregisterThreadPoolExecutor(threadPoolConfig0);
      assertFalse(threadPoolGovernor0.isGovernorLoggable());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder0);
      threadPoolGovernor0.unregisterThreadPoolExecutor(threadPoolConfig0);
      assertTrue(threadPoolGovernor0.isGlobalMonitorLoggable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder1 = threadPoolConfig_SofaThreadConfigBuilder0.threadPoolName("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder1);
      threadPoolGovernor0.registerThreadPoolExecutor((ThreadPoolExecutor) null, threadPoolConfig0, (ThreadPoolStatistics) null);
      assertEquals(30L, threadPoolGovernor0.getGovernorPeriod());
      
      threadPoolGovernor0.setGovernorPeriod(6031L);
      assertEquals(6031L, threadPoolGovernor0.getGovernorPeriod());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder0);
      threadPoolGovernor0.registerThreadPoolExecutor((ThreadPoolExecutor) null, threadPoolConfig0, (ThreadPoolStatistics) null);
      ScheduledExecutorService scheduledExecutorService0 = threadPoolGovernor0.getMonitorScheduler();
      assertNotNull(scheduledExecutorService0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.getThreadPoolExecutor("com.alipay.sofa.common.thread.ThreadPoolGovernor");
      ThreadPoolGovernor.GovernorInfoDumper threadPoolGovernor_GovernorInfoDumper0 = threadPoolGovernor0.new GovernorInfoDumper();
      threadPoolGovernor_GovernorInfoDumper0.run();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.startMonitorThreadPoolBySpaceName("");
      threadPoolGovernor0.stopGovernorSchedule();
      ThreadPoolMonitorWrapper threadPoolMonitorWrapper0 = threadPoolGovernor0.getThreadPoolMonitorWrapper("wV");
      assertNull(threadPoolMonitorWrapper0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.isGlobalMonitorLoggable();
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolGovernor0.getThreadPoolExecutor(threadPoolGovernor0.CLASS_NAME);
      assertNull(threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreadPoolGovernor threadPoolGovernor0 = ThreadPoolGovernor.getInstance();
      threadPoolGovernor0.getGovernorPeriod();
      threadPoolGovernor0.setGovernorLoggable(false);
      assertFalse(threadPoolGovernor0.isGovernorLoggable());
      
      ThreadPoolGovernor threadPoolGovernor1 = ThreadPoolGovernor.getInstance();
      assertFalse(threadPoolGovernor1.isGovernorLoggable());
  }
}
