/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:17:58 GMT 2022
 */

package com.alipay.sofa.common.log.factory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.core.LogbackException;
import com.alipay.sofa.common.log.LogSpace;
import com.alipay.sofa.common.log.SpaceInfo;
import com.alipay.sofa.common.log.factory.LoggerSpaceFactory4LogbackBuilder;
import com.alipay.sofa.common.space.SpaceId;
import java.net.URL;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoggerSpaceFactory4LogbackBuilder_ESTest extends LoggerSpaceFactory4LogbackBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SpaceId spaceId0 = new SpaceId("J1<!8p7O]2c");
      SpaceInfo spaceInfo0 = mock(SpaceInfo.class, new ViolatedAssumptionAnswer());
      LoggerSpaceFactory4LogbackBuilder loggerSpaceFactory4LogbackBuilder0 = new LoggerSpaceFactory4LogbackBuilder(spaceId0, spaceInfo0);
      String string0 = loggerSpaceFactory4LogbackBuilder0.getLoggingToolName();
      assertEquals("logback", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SpaceId spaceId0 = SpaceId.withSpaceName("lf~)5):X");
      SpaceInfo spaceInfo0 = mock(SpaceInfo.class, new ViolatedAssumptionAnswer());
      doReturn((Properties) null).when(spaceInfo0).properties();
      LoggerSpaceFactory4LogbackBuilder loggerSpaceFactory4LogbackBuilder0 = new LoggerSpaceFactory4LogbackBuilder(spaceId0, spaceInfo0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        loggerSpaceFactory4LogbackBuilder0.doBuild("lf~)5):X", classLoader0, uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.log.factory.LogbackLoggerSpaceFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SpaceId spaceId0 = new SpaceId(")nB]EGmxW");
      LogSpace logSpace0 = new LogSpace();
      LoggerSpaceFactory4LogbackBuilder loggerSpaceFactory4LogbackBuilder0 = new LoggerSpaceFactory4LogbackBuilder(spaceId0, logSpace0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        loggerSpaceFactory4LogbackBuilder0.doBuild(")nB]EGmxW", classLoader0, (URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL argument cannot be null
         //
         verifyException("ch.qos.logback.classic.util.ContextInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SpaceId spaceId0 = new SpaceId("`Qf]");
      LoggerSpaceFactory4LogbackBuilder loggerSpaceFactory4LogbackBuilder0 = null;
      try {
        loggerSpaceFactory4LogbackBuilder0 = new LoggerSpaceFactory4LogbackBuilder(spaceId0, (LogSpace) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.alipay.sofa.common.utils.AssertUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SpaceId spaceId0 = SpaceId.withSpaceName("");
      LogSpace logSpace0 = new LogSpace();
      LoggerSpaceFactory4LogbackBuilder loggerSpaceFactory4LogbackBuilder0 = new LoggerSpaceFactory4LogbackBuilder(spaceId0, logSpace0);
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        loggerSpaceFactory4LogbackBuilder0.doBuild("", (ClassLoader) null, uRL0);
        fail("Expecting exception: LogbackException");
      
      } catch(LogbackException e) {
         //
         // Unexpected filename extension of file [http://www.someFakeButWellFormedURL.org/fooExample]. Should be either .groovy or .xml
         //
         verifyException("ch.qos.logback.classic.util.ContextInitializer", e);
      }
  }
}
