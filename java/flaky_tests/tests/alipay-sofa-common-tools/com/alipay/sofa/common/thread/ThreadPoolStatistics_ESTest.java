/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:02:56 GMT 2022
 */

package com.alipay.sofa.common.thread;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.thread.ExecutingRunnable;
import com.alipay.sofa.common.thread.ThreadPoolStatistics;
import java.util.Map;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadPoolStatistics_ESTest extends ThreadPoolStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<ExecutingRunnable> linkedTransferQueue0 = new LinkedTransferQueue<ExecutingRunnable>();
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>(linkedTransferQueue0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 55, 0, timeUnit0, priorityBlockingQueue0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      threadPoolStatistics0.addTotalTaskCount();
      threadPoolStatistics0.addTotalTaskCount();
      threadPoolStatistics0.addTotalStayInQueueTime(446L);
      long long0 = threadPoolStatistics0.getAverageStayInQueueTime();
      assertEquals(2L, threadPoolStatistics0.getTotalTaskCount());
      assertEquals(223L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<ExecutingRunnable> linkedTransferQueue0 = new LinkedTransferQueue<ExecutingRunnable>();
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>(linkedTransferQueue0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 55, 0, timeUnit0, priorityBlockingQueue0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      AtomicLong atomicLong0 = threadPoolStatistics0.totalTaskCount;
      threadPoolStatistics0.totalRunningTime = atomicLong0;
      threadPoolStatistics0.addTotalTaskCount();
      threadPoolStatistics0.addTotalTaskCount();
      long long0 = threadPoolStatistics0.getAverageRunningTime();
      assertEquals(0L, threadPoolStatistics0.getAverageStayInQueueTime());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      AtomicLong atomicLong0 = threadPoolStatistics0.totalTaskCount;
      atomicLong0.set((-4248L));
      long long0 = threadPoolStatistics0.getAverageRunningTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      threadPoolStatistics0.addTotalTaskCount();
      long long0 = threadPoolStatistics0.getTotalTaskCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      AtomicLong atomicLong0 = threadPoolStatistics0.totalTaskCount;
      atomicLong0.set((-1L));
      long long0 = threadPoolStatistics0.getTotalTaskCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1978, 1, timeUnit0, linkedTransferQueue0, threadPoolExecutor_DiscardPolicy0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      long long0 = threadPoolStatistics0.getQueueSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      LinkedTransferQueue<ExecutingRunnable> linkedTransferQueue0 = new LinkedTransferQueue<ExecutingRunnable>();
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>(linkedTransferQueue0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 55, 0, timeUnit0, priorityBlockingQueue0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      long long0 = threadPoolStatistics0.getPoolSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      threadPoolStatistics0.totalTaskCount = null;
      // Undeclared exception!
      try { 
        threadPoolStatistics0.addTotalTaskCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      long long0 = threadPoolStatistics0.getAverageStayInQueueTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      AtomicLong atomicLong0 = new AtomicLong((-4247L));
      threadPoolStatistics0.totalTaskCount = atomicLong0;
      long long0 = threadPoolStatistics0.getAverageStayInQueueTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      long long0 = threadPoolStatistics0.getAverageRunningTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      Map<ExecutingRunnable, Long> map0 = threadPoolStatistics0.getExecutingTasks();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      long long0 = threadPoolStatistics0.getTotalTaskCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      threadPoolStatistics0.resetAverageStatics();
      assertEquals((-1L), threadPoolStatistics0.getAverageRunningTime());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      // Undeclared exception!
      try { 
        threadPoolStatistics0.getQueueSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      // Undeclared exception!
      try { 
        threadPoolStatistics0.getPoolSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics((ThreadPoolExecutor) null);
      threadPoolStatistics0.addTotalRunningTime(2L);
      assertEquals((-1L), threadPoolStatistics0.getAverageRunningTime());
  }
}
