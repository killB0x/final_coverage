/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:01:05 GMT 2022
 */

package com.alipay.sofa.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.utils.TimeWaitRunner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeWaitRunner_ESTest extends TimeWaitRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeWaitRunner timeWaitRunner0 = new TimeWaitRunner(1L);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      timeWaitRunner0.doWithRunnable(mockThread0);
      timeWaitRunner0.doWithRunnable(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeWaitRunner timeWaitRunner0 = new TimeWaitRunner((-1100L));
      // Undeclared exception!
      try { 
        timeWaitRunner0.doWithRunnable((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.utils.TimeWaitRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeWaitRunner timeWaitRunner0 = new TimeWaitRunner(0L);
      MockThread mockThread0 = new MockThread();
      timeWaitRunner0.doWithRunnable(mockThread0);
      timeWaitRunner0.doWithRunnable(mockThread0);
      assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeWaitRunner timeWaitRunner0 = new TimeWaitRunner(0L, true);
      MockThread mockThread0 = new MockThread();
      timeWaitRunner0.doWithRunnable(mockThread0);
      assertFalse(mockThread0.isInterrupted());
  }
}
