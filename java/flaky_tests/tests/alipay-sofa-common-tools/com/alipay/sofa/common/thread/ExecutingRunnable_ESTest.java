/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 19:53:21 GMT 2022
 */

package com.alipay.sofa.common.thread;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.thread.ExecutingRunnable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutingRunnable_ESTest extends ExecutingRunnable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      executingRunnable0.setDequeueTime((-1L));
      long long0 = executingRunnable0.getRunningTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setPrinted(true);
      boolean boolean0 = executingRunnable0.isPrinted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setThread(mockThread0);
      Thread thread0 = executingRunnable0.getThread();
      assertEquals(0, thread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThread mockThread0 = new MockThread((Runnable) null, "com.alipay.sofa.common.thread.ExecutingRunnable");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setEnqueueTime((-1L));
      long long0 = executingRunnable0.getStayInQueueTime();
      assertEquals((-1L), executingRunnable0.getEnqueueTime());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      executingRunnable0.setDequeueTime((-1L));
      long long0 = executingRunnable0.getStayInQueueTime();
      assertEquals((-1L), executingRunnable0.getDequeueTime());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "GLi6v");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setFinishTime(1673L);
      long long0 = executingRunnable0.getFinishTime();
      assertEquals(1673L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setEnqueueTime((-168L));
      long long0 = executingRunnable0.getEnqueueTime();
      assertEquals((-168L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, ".a&,8Q`[YQ;");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setDequeueTime(2819L);
      long long0 = executingRunnable0.getDequeueTime();
      assertEquals(2819L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      executingRunnable0.setDequeueTime((-1L));
      long long0 = executingRunnable0.getDequeueTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      String string0 = executingRunnable0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setThread(mockThread0);
      String string0 = executingRunnable0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      Object object0 = new Object();
      boolean boolean0 = executingRunnable0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      ExecutingRunnable executingRunnable1 = new ExecutingRunnable(executingRunnable0);
      boolean boolean0 = executingRunnable0.equals(executingRunnable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "GLi6v");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.hashCode();
      executingRunnable0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutingRunnable executingRunnable0 = null;
      try {
        executingRunnable0 = new ExecutingRunnable((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ExecutingRunnable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.setThread(mockThread0);
      ExecutingRunnable executingRunnable1 = new ExecutingRunnable(mockThread0);
      boolean boolean0 = executingRunnable0.equals(executingRunnable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      Thread thread0 = executingRunnable0.getThread();
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      long long0 = executingRunnable0.getRunningTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThread mockThread0 = new MockThread("");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      boolean boolean0 = executingRunnable0.isPrinted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      long long0 = executingRunnable0.getEnqueueTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockThread mockThread0 = new MockThread("jS");
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(mockThread0);
      executingRunnable0.run();
      assertEquals(0L, executingRunnable0.getFinishTime());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      long long0 = executingRunnable0.getStayInQueueTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      long long0 = executingRunnable0.getFinishTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      ExecutingRunnable executingRunnable0 = new ExecutingRunnable(thread0);
      long long0 = executingRunnable0.getDequeueTime();
      assertEquals(0L, long0);
  }
}
