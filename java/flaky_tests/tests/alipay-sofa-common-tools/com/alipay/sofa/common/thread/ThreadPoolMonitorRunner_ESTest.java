/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 19:52:14 GMT 2022
 */

package com.alipay.sofa.common.thread;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.thread.ThreadPoolConfig;
import com.alipay.sofa.common.thread.ThreadPoolMonitorRunner;
import com.alipay.sofa.common.thread.ThreadPoolStatistics;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadPoolMonitorRunner_ESTest extends ThreadPoolMonitorRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadPoolMonitorRunner threadPoolMonitorRunner0 = new ThreadPoolMonitorRunner((ThreadPoolConfig) null, (ThreadPoolStatistics) null);
      // Undeclared exception!
      try { 
        threadPoolMonitorRunner0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alipay.sofa.common.thread.ThreadPoolMonitorRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 2, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_AbortPolicy0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      threadPoolStatistics0.addTotalTaskCount();
      ThreadPoolMonitorRunner threadPoolMonitorRunner0 = new ThreadPoolMonitorRunner(threadPoolConfig0, threadPoolStatistics0);
      threadPoolMonitorRunner0.run();
      assertEquals((-1L), threadPoolStatistics0.getAverageRunningTime());
      assertEquals(0L, threadPoolStatistics0.getTotalTaskCount());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThreadPoolConfig.SofaThreadConfigBuilder threadPoolConfig_SofaThreadConfigBuilder0 = ThreadPoolConfig.newBuilder();
      ThreadPoolConfig threadPoolConfig0 = new ThreadPoolConfig(threadPoolConfig_SofaThreadConfigBuilder0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 2, 2, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_AbortPolicy0);
      ThreadPoolStatistics threadPoolStatistics0 = new ThreadPoolStatistics(threadPoolExecutor0);
      ThreadPoolMonitorRunner threadPoolMonitorRunner0 = new ThreadPoolMonitorRunner(threadPoolConfig0, threadPoolStatistics0);
      threadPoolMonitorRunner0.run();
  }
}
