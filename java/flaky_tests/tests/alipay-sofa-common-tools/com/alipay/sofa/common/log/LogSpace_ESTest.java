/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 20:08:41 GMT 2022
 */

package com.alipay.sofa.common.log;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alipay.sofa.common.log.LogSpace;
import com.alipay.sofa.common.log.factory.AbstractLoggerSpaceFactory;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogSpace_ESTest extends LogSpace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      ClassLoader classLoader0 = logSpace0.getSpaceClassloader();
      assertNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      logSpace0.setProperty("", "uF");
      String string0 = logSpace0.getProperty("");
      assertEquals("uF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace(hashMap0, classLoader0);
      LogSpace logSpace1 = logSpace0.setProperty("", "");
      String string0 = logSpace1.getProperty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      // Undeclared exception!
      try { 
        logSpace0.setProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      // Undeclared exception!
      try { 
        logSpace0.putAll(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      // Undeclared exception!
      try { 
        logSpace0.getProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", (String) null);
      LogSpace logSpace0 = null;
      try {
        logSpace0 = new LogSpace(hashMap0, (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      LogSpace logSpace1 = logSpace0.putAll((Map<String, String>) null);
      assertSame(logSpace1, logSpace0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      String string0 = logSpace0.getProperty("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      ClassLoader classLoader1 = logSpace0.getSpaceClassloader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      logSpace0.setAbstractLoggerSpaceFactory((AbstractLoggerSpaceFactory) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LogSpace logSpace0 = new LogSpace((Map<String, String>) null, classLoader0);
      logSpace0.setSpaceClassloader(classLoader0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      AbstractLoggerSpaceFactory abstractLoggerSpaceFactory0 = logSpace0.getAbstractLoggerSpaceFactory();
      assertNull(abstractLoggerSpaceFactory0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogSpace logSpace0 = new LogSpace();
      Properties properties0 = logSpace0.properties();
      assertNotNull(properties0);
  }
}
