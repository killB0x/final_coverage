/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:44:52 GMT 2022
 */

package org.opengis.cite.om20.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.opengis.cite.om20.util.NamespaceResolver;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamespaceResolver_ESTest extends NamespaceResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).lookupPrefix(anyString());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      String string0 = namespaceResolver0.getPrefix("lxH7d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("LmBUv7Z=HI(7h`4Jz/", "").when(document0).lookupPrefix(anyString());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      namespaceResolver0.getPrefix("");
      String string0 = namespaceResolver0.getPrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((Document) null);
      // Undeclared exception!
      try { 
        namespaceResolver0.getPrefix("8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opengis.cite.om20.util.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NamespaceResolver namespaceResolver0 = new NamespaceResolver((Document) null);
      // Undeclared exception!
      try { 
        namespaceResolver0.getNamespaceURI("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opengis.cite.om20.util.NamespaceResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("").when(document0).lookupNamespaceURI(anyString());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      String string0 = namespaceResolver0.getNamespaceURI("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      String string0 = namespaceResolver0.getNamespaceURI("abc");
      assertEquals("http://www.w3.org/1999/xhtml", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("").when(document0).lookupNamespaceURI(anyString());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      String string0 = namespaceResolver0.getNamespaceURI("LmBUv7Z=HI(7h`4Jz/");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      NamespaceResolver namespaceResolver0 = new NamespaceResolver(document0);
      Iterator iterator0 = namespaceResolver0.getPrefixes("abc");
      assertNull(iterator0);
  }
}
