/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:22:08 GMT 2022
 */

package sk.antons.sprops.alg;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.alg.SimpleAesSpropsAlg;
import sk.antons.sprops.model.SpropsData;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleAesSpropsAlg_ESTest extends SimpleAesSpropsAlg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      byte[] byteArray0 = new byte[7];
      simpleAesSpropsAlg0.password(byteArray0);
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.decode(byteArray0, (byte)1, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to decode
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      simpleAesSpropsAlg0.password("sk.antons.sprops.model.SpropsData$Property");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      byte[] byteArray0 = new byte[9];
      SpropsData spropsData0 = simpleAesSpropsAlg0.prepare(byteArray0);
      simpleAesSpropsAlg0.password(byteArray0);
      byte[] byteArray1 = simpleAesSpropsAlg0.encode(spropsData0);
      assertEquals(52, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.password(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.password((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.password("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password - encoding
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.password((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleAesSpropsAlg simpleAesSpropsAlg0 = new SimpleAesSpropsAlg();
      byte[] byteArray0 = new byte[9];
      SpropsData spropsData0 = simpleAesSpropsAlg0.prepare(byteArray0);
      // Undeclared exception!
      try { 
        simpleAesSpropsAlg0.encode(spropsData0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to encode
         //
         verifyException("sk.antons.sprops.alg.SimpleAesSpropsAlg", e);
      }
  }
}
