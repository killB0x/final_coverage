/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:10:26 GMT 2022
 */

package sk.antons.sprops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.PropertiesEncoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertiesEncoder_ESTest extends PropertiesEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      String string0 = propertiesEncoder0.getProperty("Bad password", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      String string0 = propertiesEncoder0.getProperty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        PropertiesEncoder.instance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesEncoder.instance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password - encoding
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      // Undeclared exception!
      try { 
        propertiesEncoder0.getProperty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      // Undeclared exception!
      try { 
        propertiesEncoder0.getProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      // Undeclared exception!
      try { 
        propertiesEncoder0.decode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        propertiesEncoder0.addProperties((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to load properties
         //
         verifyException("sk.antons.sprops.PropertiesEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      String string0 = propertiesEncoder0.getProperty("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      Properties properties0 = propertiesEncoder0.decode();
      propertiesEncoder0.addProperties(properties0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      String string0 = propertiesEncoder0.getProperty("#J+e_y1[u~H\"", "#J+e_y1[u~H\"");
      assertEquals("#J+e_y1[u~H\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      propertiesEncoder0.addProperties((Properties) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance("aAZ,Y(bWZxX");
      assertNotNull(propertiesEncoder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      propertiesEncoder0.addProperties((InputStream) byteArrayInputStream0);
      Properties properties0 = propertiesEncoder0.decode();
      propertiesEncoder0.addProperties(properties0);
  }
}
