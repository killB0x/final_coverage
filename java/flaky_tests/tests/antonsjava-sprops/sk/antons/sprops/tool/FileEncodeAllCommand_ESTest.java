/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:14:50 GMT 2022
 */

package sk.antons.sprops.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.tool.Args;
import sk.antons.sprops.tool.FileEncodeAllCommand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileEncodeAllCommand_ESTest extends FileEncodeAllCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileEncodeAllCommand fileEncodeAllCommand0 = new FileEncodeAllCommand();
      Args args0 = new Args();
      // Undeclared exception!
      try { 
        fileEncodeAllCommand0.realize(args0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sk.antons.sprops.tool.FileEncodeAllCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileEncodeAllCommand fileEncodeAllCommand0 = new FileEncodeAllCommand();
      // Undeclared exception!
      try { 
        fileEncodeAllCommand0.checkInput((Args) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sk.antons.sprops.tool.FileEncodeAllCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileEncodeAllCommand fileEncodeAllCommand0 = new FileEncodeAllCommand();
      Args args0 = new Args();
      // Undeclared exception!
      try { 
        fileEncodeAllCommand0.checkInput(args0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // sk/antons/jaul/Is
         //
         verifyException("sk.antons.sprops.tool.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileEncodeAllCommand fileEncodeAllCommand0 = new FileEncodeAllCommand();
      boolean boolean0 = fileEncodeAllCommand0.requirePassword();
      assertTrue(boolean0);
  }
}
