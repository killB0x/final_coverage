/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:23:17 GMT 2022
 */

package sk.antons.sprops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.PropertiesEncoder;
import sk.antons.sprops.SimpleEncoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractEncoder_ESTest extends AbstractEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      propertiesEncoder0.password(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleEncoder simpleEncoder0 = new SimpleEncoder();
      simpleEncoder0.password("Bad password");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesEncoder.instance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password - encoding
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        propertiesEncoder0.password(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      // Undeclared exception!
      try { 
        propertiesEncoder0.password((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PropertiesEncoder propertiesEncoder0 = new PropertiesEncoder();
      // Undeclared exception!
      try { 
        propertiesEncoder0.decode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad password
         //
         verifyException("sk.antons.sprops.AbstractEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      PropertiesEncoder propertiesEncoder0 = PropertiesEncoder.instance(byteArray0);
      propertiesEncoder0.algorithm((byte)0);
  }
}
