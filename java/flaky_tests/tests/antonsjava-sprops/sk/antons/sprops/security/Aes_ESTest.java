/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:17:26 GMT 2022
 */

package sk.antons.sprops.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.security.Aes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Aes_ESTest extends Aes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[4];
      // Undeclared exception!
      try { 
        Aes.encode(byteArray0, byteArray1, byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to encode Aes
         //
         verifyException("sk.antons.sprops.security.Aes", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Aes.decode(byteArray0, byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Aes.decode(byteArray2, byteArray0, byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unable to decode Aes
         //
         verifyException("sk.antons.sprops.security.Aes", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        Aes.decode(byteArray0, byteArray0, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to decode Aes - null data
         //
         verifyException("sk.antons.sprops.security.Aes", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        Aes.encode(byteArray0, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to encode Aes - null iv
         //
         verifyException("sk.antons.sprops.security.Aes", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Aes.decode((byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to decode Aes - null key
         //
         verifyException("sk.antons.sprops.security.Aes", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Aes aes0 = new Aes();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Aes.encode(byteArray0, byteArray0, byteArray0);
      assertEquals(32, byteArray1.length);
  }
}
