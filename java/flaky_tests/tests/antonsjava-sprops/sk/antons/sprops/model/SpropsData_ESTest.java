/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 13:30:30 GMT 2022
 */

package sk.antons.sprops.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sk.antons.sprops.model.SpropsData;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpropsData_ESTest extends SpropsData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      SpropsData.Header spropsData_Header0 = SpropsData.Header.fromByteArray(byteArray0, 0, 2487);
      assertNotNull(spropsData_Header0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[21];
      spropsData_Header0.addProperty(1, byteArray0);
      SpropsData.Property spropsData_Property0 = spropsData_Header0.first((-1535));
      assertNull(spropsData_Property0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = spropsData_Header0.toByteArray();
      spropsData_Header0.addProperty((-1788), byteArray0);
      List<SpropsData.Property> list0 = spropsData_Header0.all(484);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SpropsData.Property spropsData_Property0 = SpropsData.Property.instance(867, byteArray0);
      int int0 = spropsData_Property0.getType();
      assertEquals(867, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      spropsData0.setVersion((-4606));
      int int0 = spropsData0.getVersion();
      assertEquals((-4606), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      byte[] byteArray0 = new byte[1];
      spropsData0.setData(byteArray0);
      byte[] byteArray1 = spropsData0.getData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      SpropsData.Header spropsData_Header0 = SpropsData.Header.fromByteArray(byteArray0, 9, 1261);
      assertNotNull(spropsData_Header0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[21];
      spropsData_Header0.addProperty(256, byteArray0);
      byte[] byteArray1 = spropsData_Header0.toByteArray();
      // Undeclared exception!
      try { 
        SpropsData.Header.fromByteArray(byteArray1, 1, 1178);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to parse header from bytes
         //
         verifyException("sk.antons.sprops.model.SpropsData$Header", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[0];
      spropsData_Header0.addProperty((-5096), byteArray0);
      SpropsData.Property spropsData_Property0 = spropsData_Header0.first((-5096));
      assertEquals((-5096), spropsData_Property0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[21];
      spropsData_Header0.addProperty(256, byteArray0);
      SpropsData.Property spropsData_Property0 = spropsData_Header0.first(67196928);
      assertNull(spropsData_Property0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[21];
      spropsData_Header0.addProperty(256, byteArray0);
      List<SpropsData.Property> list0 = spropsData_Header0.all((byte)0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      spropsData0.setVersion(1);
      int int0 = spropsData0.getVersion();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      SpropsData spropsData0 = new SpropsData();
      spropsData0.setHeader(spropsData_Header0);
      SpropsData.Header spropsData_Header1 = spropsData0.getHeader();
      assertSame(spropsData_Header1, spropsData_Header0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      byte[] byteArray0 = spropsData0.getData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      SpropsData.Header spropsData_Header0 = spropsData0.getHeader();
      assertNull(spropsData_Header0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      byte[] byteArray0 = new byte[0];
      spropsData0.setData(byteArray0);
      byte[] byteArray1 = spropsData0.getData();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpropsData spropsData0 = new SpropsData();
      int int0 = spropsData0.getVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      SpropsData.Property spropsData_Property0 = SpropsData.Property.instance(2259, byteArray0);
      spropsData_Property0.setType((byte)104);
      assertEquals(104, spropsData_Property0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = new byte[0];
      spropsData_Header0.addProperty((-2300), byteArray0);
      List<SpropsData.Property> list0 = spropsData_Header0.all((-2300));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SpropsData.Property spropsData_Property0 = new SpropsData.Property((-1), byteArray0);
      spropsData_Property0.setValue(byteArray0);
      assertEquals((-1), spropsData_Property0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      byte[] byteArray0 = spropsData_Header0.toByteArray();
      SpropsData.Property spropsData_Property0 = new SpropsData.Property(2482, byteArray0);
      byte[] byteArray1 = spropsData_Property0.getValue();
      assertEquals(2482, spropsData_Property0.getType());
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      List<SpropsData.Property> list0 = spropsData_Header0.getProperties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpropsData.Header spropsData_Header0 = new SpropsData.Header();
      spropsData_Header0.addProperty(1882, (byte[]) null);
  }
}
