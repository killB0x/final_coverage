/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 16:36:02 GMT 2022
 */

package com.imdnd.common.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.imdnd.common.util.SnowFlake;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SnowFlake_ESTest extends SnowFlake_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SnowFlake snowFlake0 = new SnowFlake(17L, 0L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SnowFlake snowFlake0 = new SnowFlake(31L, 31L);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SnowFlake snowFlake0 = new SnowFlake(0L, 0L);
      System.setCurrentTimeMillis(1480166465631L);
      long long0 = snowFlake0.nextId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SnowFlake snowFlake0 = new SnowFlake(15L, 15L);
      System.setCurrentTimeMillis(1480166465631L);
      long long0 = snowFlake0.nextId();
      assertEquals(2027520L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SnowFlake snowFlake0 = null;
      try {
        snowFlake0 = new SnowFlake(1L, (-3091L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // machineId can't be greater than MAX_MACHINE_NUM or less than 0
         //
         verifyException("com.imdnd.common.util.SnowFlake", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SnowFlake snowFlake0 = null;
      try {
        snowFlake0 = new SnowFlake(1L, 3052L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // machineId can't be greater than MAX_MACHINE_NUM or less than 0
         //
         verifyException("com.imdnd.common.util.SnowFlake", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SnowFlake snowFlake0 = null;
      try {
        snowFlake0 = new SnowFlake((-671L), (-671L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataCenterId can't be greater than MAX_DATA_CENTER_NUM or less than 0
         //
         verifyException("com.imdnd.common.util.SnowFlake", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SnowFlake snowFlake0 = null;
      try {
        snowFlake0 = new SnowFlake(2117L, 2117L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataCenterId can't be greater than MAX_DATA_CENTER_NUM or less than 0
         //
         verifyException("com.imdnd.common.util.SnowFlake", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SnowFlake snowFlake0 = new SnowFlake(15L, 15L);
      long long0 = snowFlake0.nextId();
      assertEquals((-368080309182337024L), long0);
      
      long long1 = snowFlake0.nextId();
      assertEquals((-368080309182337023L), long1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SnowFlake snowFlake0 = SnowFlake.getInstance();
      long long0 = snowFlake0.nextId();
      assertEquals((-368080309184229376L), long0);
  }
}
