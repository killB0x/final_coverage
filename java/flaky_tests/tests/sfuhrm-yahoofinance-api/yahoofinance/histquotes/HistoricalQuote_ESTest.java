/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:47:44 GMT 2022
 */

package yahoofinance.histquotes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import yahoofinance.histquotes.HistoricalQuote;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HistoricalQuote_ESTest extends HistoricalQuote_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      Long long0 = new Long((-255L));
      HistoricalQuote historicalQuote0 = new HistoricalQuote("w/#z]e.j", calendar0, bigDecimal0, bigDecimal0, bigDecimal1, bigDecimal1, bigDecimal1, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4101.025335819492));
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      Long long0 = new Long(1L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("@", (Calendar) null, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal1, bigDecimal0, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1232);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      HistoricalQuote historicalQuote0 = new HistoricalQuote("QK!ke@:M= G", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal1, (Long) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = new BigDecimal(2442L);
      Long long0 = new Long(574L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("t4B[kuID", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getVolume();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getVolume();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      Long long0 = new Long((-131L));
      historicalQuote0.setVolume(long0);
      historicalQuote0.getVolume();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getSymbol();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.setSymbol("");
      historicalQuote0.getSymbol();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getOpen();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = new BigDecimal(2442L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal1 = bigDecimal0.negate(mathContext0);
      Long long0 = new Long(574L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("t4B[kuID", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.setOpen(bigDecimal1);
      historicalQuote0.getOpen();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      Long long0 = new Long(1L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("um ", calendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getOpen();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = new BigDecimal(2442L);
      Long long0 = new Long(574L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("t4B[kuID", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getOpen();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getLow();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2202.40306935));
      Long long0 = new Long(0L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("k}Csn20A.!4", gregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getLow();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = new BigDecimal(2442L);
      Long long0 = new Long(574L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("t4B[kuID", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getLow();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getHigh();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = new BigDecimal(2442L);
      Long long0 = new Long(574L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("t4B[kuID", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getHigh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      historicalQuote0.setHigh(bigDecimal0);
      historicalQuote0.getHigh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = new BigDecimal((-461.48127));
      Long long0 = new Long(445L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("", calendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getHigh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-4101.025335819492));
      Long long0 = new Long(1L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("@", (Calendar) null, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      historicalQuote0.getDate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1232);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("QK!ke@:M= G", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, (Long) null);
      mockGregorianCalendar0.setLenient(false);
      historicalQuote0.getDate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6qtN;\"|L/3PEx");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("", mockGregorianCalendar0, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (Long) null);
      historicalQuote0.getDate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6qtN;\"|L/3PEx");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("", mockGregorianCalendar0, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (Long) null);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2737));
      historicalQuote0.getDate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      BigDecimal bigDecimal0 = new BigDecimal((-1523));
      Long long0 = new Long(1L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote(", ", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      mockGregorianCalendar0.setFirstDayOfWeek((-3115));
      historicalQuote0.getDate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getClose();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, (byte) (-49));
      HistoricalQuote historicalQuote0 = new HistoricalQuote("Y_Ul$nN", mockGregorianCalendar0, bigDecimal0, (BigDecimal) null, (BigDecimal) null, bigDecimal0, bigDecimal0, (Long) null);
      historicalQuote0.getClose();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      BigInteger bigInteger0 = BigInteger.valueOf((-5627L));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      historicalQuote0.setClose(bigDecimal0);
      historicalQuote0.getClose();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      historicalQuote0.getAdjClose();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("", calendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, (Long) null);
      historicalQuote0.getAdjClose();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      historicalQuote0.setAdjClose(bigDecimal0);
      historicalQuote0.getAdjClose();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      // Undeclared exception!
      try { 
        historicalQuote0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes.HistoricalQuote", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3846), (-3846), (-3846), 1570, (-3846), 1365);
      assertNotNull(mockGregorianCalendar0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1434L);
      assertEquals((byte) (-102), bigDecimal0.byteValue());
      assertEquals((short)1434, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      HistoricalQuote historicalQuote0 = new HistoricalQuote("BXCK)L", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3846,MONTH=-3846,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3846,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1570,HOUR_OF_DAY=1570,MINUTE=-3846,SECOND=1365,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((byte) (-102), bigDecimal0.byteValue());
      assertEquals((short)1434, bigDecimal0.shortValue());
      assertEquals("BXCK)L", historicalQuote0.getSymbol());
      assertEquals(0L, (long)historicalQuote0.getVolume());
      assertNotNull(historicalQuote0);
      
      BigDecimal bigDecimal1 = historicalQuote0.getClose();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3846,MONTH=-3846,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3846,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1570,HOUR_OF_DAY=1570,MINUTE=-3846,SECOND=1365,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals((byte) (-102), bigDecimal0.byteValue());
      assertEquals((short)1434, bigDecimal0.shortValue());
      assertEquals("BXCK)L", historicalQuote0.getSymbol());
      assertEquals(0L, (long)historicalQuote0.getVolume());
      assertEquals((byte) (-102), bigDecimal1.byteValue());
      assertEquals((short)1434, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = new Long((-255L));
      HistoricalQuote historicalQuote0 = new HistoricalQuote("w/#z]e.j", calendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      BigDecimal bigDecimal1 = historicalQuote0.getOpen();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = new Long((-255L));
      HistoricalQuote historicalQuote0 = new HistoricalQuote("w/#z]e.j", calendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      BigDecimal bigDecimal1 = historicalQuote0.getLow();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 1419, 0, 1419);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1));
      Long long0 = new Long(1419);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("A*o5E}<", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      BigDecimal bigDecimal1 = historicalQuote0.getAdjClose();
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6qtN;\"|L/3PEx");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("", mockGregorianCalendar0, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (BigDecimal) null, (Long) null);
      String string0 = historicalQuote0.toString();
      assertEquals("@2014-02-14: null-null, null->null (null)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      BigDecimal bigDecimal0 = new BigDecimal(2804L);
      Long long0 = new Long(0L);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("f<$\"KC`e,2oL", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      Long long1 = historicalQuote0.getVolume();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 1419, 0, 1419);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1));
      Long long0 = new Long(1419);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("A*o5E}<", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, long0);
      String string0 = historicalQuote0.getSymbol();
      assertEquals("A*o5E}<", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HistoricalQuote historicalQuote0 = new HistoricalQuote();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      historicalQuote0.setLow(bigDecimal0);
      BigDecimal bigDecimal1 = historicalQuote0.getLow();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1232);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      HistoricalQuote historicalQuote0 = new HistoricalQuote("QK!ke@:M= G", mockGregorianCalendar0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, bigDecimal0, (Long) null);
      historicalQuote0.setDate(mockGregorianCalendar0);
      assertNull(historicalQuote0.getVolume());
  }
}
