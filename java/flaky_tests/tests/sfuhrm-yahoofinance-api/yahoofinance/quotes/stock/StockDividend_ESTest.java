/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:39:40 GMT 2022
 */

package yahoofinance.quotes.stock;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import yahoofinance.quotes.stock.StockDividend;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StockDividend_ESTest extends StockDividend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      StockDividend stockDividend0 = new StockDividend("TD#|tBQv~4", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal1);
      assertEquals("TD#|tBQv~4", stockDividend0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      StockDividend stockDividend0 = new StockDividend("N,-", mockGregorianCalendar0, mockGregorianCalendar1, bigDecimal0, bigDecimal0);
      assertEquals("N,-", stockDividend0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("[");
      String string0 = stockDividend0.getSymbol();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      String string0 = stockDividend0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("[");
      Calendar calendar0 = stockDividend0.getPayDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("$9E=3_9BK5_HRKQP");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 979, 0);
      mockGregorianCalendar0.setLenient(false);
      stockDividend0.setPayDate(mockGregorianCalendar0);
      Calendar calendar0 = stockDividend0.getPayDate();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=979,HOUR_OF_DAY=979,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-1829), 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getPayDate();
      assertTrue(calendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1918));
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getPayDate();
      assertSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1095), 0, 0, 1);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(2461L, 1);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getPayDate();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-474), (-1854), 0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      StockDividend stockDividend0 = new StockDividend("o", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1854));
      Calendar calendar0 = stockDividend0.getPayDate();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1854,minimalDaysInFirstWeek=1,ERA=?,YEAR=-474,MONTH=-1854,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("@xS6*6p");
      Calendar calendar0 = stockDividend0.getExDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      mockGregorianCalendar0.setLenient(false);
      StockDividend stockDividend0 = new StockDividend("TD#|tBQv~4", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getExDate();
      assertFalse(calendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("%", "%");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      stockDividend0.setExDate(mockGregorianCalendar0);
      Calendar calendar0 = stockDividend0.getExDate();
      assertEquals(2, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1918));
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getExDate();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1918,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1095), 0, 0, 1);
      BigDecimal bigDecimal0 = BigDecimal.valueOf(2461L, 1);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = stockDividend0.getExDate();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      StockDividend stockDividend0 = new StockDividend("N,-", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      mockGregorianCalendar0.setFirstDayOfWeek((-1));
      Calendar calendar0 = stockDividend0.getExDate();
      assertSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      stockDividend0.setAnnualYieldPercent(bigDecimal0);
      BigDecimal bigDecimal1 = stockDividend0.getAnnualYieldPercent();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("[");
      BigDecimal bigDecimal0 = new BigDecimal(288.8863971909);
      stockDividend0.setAnnualYieldPercent(bigDecimal0);
      BigDecimal bigDecimal1 = stockDividend0.getAnnualYieldPercent();
      assertEquals((short)288, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      BigDecimal bigDecimal0 = new BigDecimal((-1543L));
      stockDividend0.setAnnualYieldPercent(bigDecimal0);
      BigDecimal bigDecimal1 = stockDividend0.getAnnualYieldPercent();
      assertEquals((byte) (-7), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      BigDecimal bigDecimal0 = stockDividend0.getAnnualYield();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("[");
      BigDecimal bigDecimal0 = new BigDecimal(288.8863971909);
      stockDividend0.setAnnualYield(bigDecimal0);
      BigDecimal bigDecimal1 = stockDividend0.getAnnualYield();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      StockDividend stockDividend0 = new StockDividend("", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = stockDividend0.getAnnualYield();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-1), 0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((-1227));
      StockDividend stockDividend0 = new StockDividend("o", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((-1));
      stockDividend0.setAnnualYield(bigDecimal1);
      BigDecimal bigDecimal2 = stockDividend0.getAnnualYield();
      assertNotSame(bigDecimal0, bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      StockDividend stockDividend0 = new StockDividend("N,-", mockGregorianCalendar0, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      String string0 = stockDividend0.toString();
      assertEquals("Pay date: Fri Feb 14 20:21:21 GMT 2014, Ex date: Fri Feb 14 20:21:21 GMT 2014, Annual yield: 0%", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("");
      String string0 = stockDividend0.toString();
      assertEquals("Pay date: /, Ex date: /, Annual yield: /", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend((String) null);
      String string0 = stockDividend0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StockDividend stockDividend0 = new StockDividend("&p{<*|zOW:adg|Dx");
      BigDecimal bigDecimal0 = stockDividend0.getAnnualYieldPercent();
      assertNull(bigDecimal0);
  }
}
