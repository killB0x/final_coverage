/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:50:31 GMT 2022
 */

package yahoofinance.histquotes2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import yahoofinance.histquotes2.HistoricalSplit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HistoricalSplit_ESTest extends HistoricalSplit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HistoricalSplit historicalSplit0 = new HistoricalSplit("D^'$ Nv29", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      String string0 = historicalSplit0.getSymbol();
      assertEquals("D^'$ Nv29", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = new Locale("");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("", calendar0, bigDecimal0, bigDecimal0);
      String string0 = historicalSplit0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-1298));
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(1137, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 0, mathContext0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HistoricalSplit historicalSplit0 = new HistoricalSplit((String) null, mockGregorianCalendar0, bigDecimal0, bigDecimal1);
      BigDecimal bigDecimal2 = historicalSplit0.getSplitFactor();
      assertEquals((byte) (-103), bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(477, 477, 477);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("q04rWdFp{7b1M", mockGregorianCalendar0, bigDecimal0, bigDecimal1);
      BigDecimal bigDecimal2 = historicalSplit0.getSplitFactor();
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals((byte)0, bigDecimal2.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1306, 1177, 1177, 1306, 10);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      HistoricalSplit historicalSplit0 = new HistoricalSplit("RQCE4D:(VfRW", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getSplitFactor();
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10, (-1), (-1), 10, (-1), (-1));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("z0K+", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getNumerator();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(868, 868, 0, 0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("Ep7", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getNumerator();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      BigDecimal bigDecimal0 = new BigDecimal((-1548));
      historicalSplit0.setNumerator(bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getNumerator();
      assertEquals((byte) (-12), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      BigDecimal bigDecimal0 = historicalSplit0.getDenominator();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      HistoricalSplit historicalSplit0 = new HistoricalSplit("yqZmKrTj_", calendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getDenominator();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(868, 868, 0, 0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("Ep7", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getDenominator();
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      Calendar calendar0 = historicalSplit0.getDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(868, 868, 0, 0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("Ep7", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      mockGregorianCalendar0.setLenient(false);
      Calendar calendar0 = historicalSplit0.getDate();
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      HistoricalSplit historicalSplit0 = new HistoricalSplit("", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = historicalSplit0.getDate();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 10);
      BigDecimal bigDecimal0 = new BigDecimal((long) 10);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2055));
      HistoricalSplit historicalSplit0 = new HistoricalSplit(" / ", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      Calendar calendar0 = historicalSplit0.getDate();
      assertSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1792, 1, 1792, 0, (-1720));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("*Rc~se@{i", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      Calendar calendar0 = historicalSplit0.getDate();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit(".'ZVM(", (Calendar) null, (BigDecimal) null, (BigDecimal) null);
      // Undeclared exception!
      try { 
        historicalSplit0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistoricalSplit", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      // Undeclared exception!
      try { 
        historicalSplit0.getSplitFactor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistoricalSplit", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      String string0 = historicalSplit0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 10);
      BigDecimal bigDecimal0 = new BigDecimal((long) 10);
      HistoricalSplit historicalSplit0 = new HistoricalSplit(" / ", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      historicalSplit0.setDenominator(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      historicalSplit0.setDate(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HistoricalSplit historicalSplit0 = new HistoricalSplit();
      BigDecimal bigDecimal0 = historicalSplit0.getNumerator();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HistoricalSplit historicalSplit0 = new HistoricalSplit("", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      String string0 = historicalSplit0.toString();
      assertEquals("SPLIT: @2014-02-14: 1 / 1", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1306, 1177, 1177, 1306, 10);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      HistoricalSplit historicalSplit0 = new HistoricalSplit("RQCE4D:(VfRW", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalSplit0.getDenominator();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-1298));
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(1137, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 0, mathContext0);
      HistoricalSplit historicalSplit0 = new HistoricalSplit((String) null, mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      // Undeclared exception!
      try { 
        historicalSplit0.getSplitFactor();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 10);
      BigDecimal bigDecimal0 = new BigDecimal((long) 10);
      HistoricalSplit historicalSplit0 = new HistoricalSplit(" / ", mockGregorianCalendar0, bigDecimal0, bigDecimal0);
      historicalSplit0.setSymbol(" / ");
      assertEquals(" / ", historicalSplit0.getSymbol());
  }
}
