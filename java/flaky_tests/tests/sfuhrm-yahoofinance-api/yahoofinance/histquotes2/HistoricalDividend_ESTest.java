/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:51:25 GMT 2022
 */

package yahoofinance.histquotes2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import yahoofinance.histquotes2.HistoricalDividend;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HistoricalDividend_ESTest extends HistoricalDividend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4297, 4297, 4297, (-1514), (-1514), 1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HistoricalDividend historicalDividend0 = new HistoricalDividend("qG\"ME{$yb=~TC7", mockGregorianCalendar0, bigDecimal0);
      String string0 = historicalDividend0.getSymbol();
      assertEquals("qG\"ME{$yb=~TC7", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("RO;TDsLcDdP*f fmkD");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HistoricalDividend historicalDividend0 = new HistoricalDividend("shKI/?plWH", mockGregorianCalendar0, bigDecimal0);
      historicalDividend0.setSymbol("");
      String string0 = historicalDividend0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HistoricalDividend historicalDividend0 = new HistoricalDividend();
      Calendar calendar0 = historicalDividend0.getDate();
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1);
      BigDecimal bigDecimal0 = new BigDecimal(1832.419253);
      mockGregorianCalendar0.setLenient(false);
      HistoricalDividend historicalDividend0 = new HistoricalDividend("m.AZc4$^'d<k", mockGregorianCalendar0, bigDecimal0);
      Calendar calendar0 = historicalDividend0.getDate();
      assertSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      HistoricalDividend historicalDividend0 = new HistoricalDividend("", mockGregorianCalendar0, bigDecimal0);
      Calendar calendar0 = historicalDividend0.getDate();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4297, 4297, 4297, (-1514), (-1514), 1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-489));
      HistoricalDividend historicalDividend0 = new HistoricalDividend("qG\"ME{$yb=~TC7", mockGregorianCalendar0, bigDecimal0);
      Calendar calendar0 = historicalDividend0.getDate();
      assertEquals((-489), calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      HistoricalDividend historicalDividend0 = new HistoricalDividend("ucIDP", mockGregorianCalendar0, (BigDecimal) null);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      Calendar calendar0 = historicalDividend0.getDate();
      assertSame(mockGregorianCalendar0, calendar0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1540), (-2341), 1185);
      HistoricalDividend historicalDividend0 = new HistoricalDividend("SvzB ", mockGregorianCalendar0, (BigDecimal) null);
      mockGregorianCalendar0.setFirstDayOfWeek((-1540));
      Calendar calendar0 = historicalDividend0.getDate();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1540,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1540,MONTH=-2341,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1185,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistoricalDividend historicalDividend0 = new HistoricalDividend();
      BigDecimal bigDecimal0 = historicalDividend0.getAdjDividend();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HistoricalDividend historicalDividend0 = new HistoricalDividend();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      historicalDividend0.setAdjDividend(bigDecimal0);
      BigDecimal bigDecimal1 = historicalDividend0.getAdjDividend();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      HistoricalDividend historicalDividend0 = new HistoricalDividend("wk)QYLL>s", gregorianCalendar0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalDividend0.getAdjDividend();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HistoricalDividend historicalDividend0 = new HistoricalDividend();
      // Undeclared exception!
      try { 
        historicalDividend0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistoricalDividend", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("RO;TDsLcDdP*f fmkD");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HistoricalDividend historicalDividend0 = new HistoricalDividend("shKI/?plWH", mockGregorianCalendar0, bigDecimal0);
      BigDecimal bigDecimal1 = historicalDividend0.getAdjDividend();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1540), (-2341), 1185);
      HistoricalDividend historicalDividend0 = new HistoricalDividend("SvzB ", mockGregorianCalendar0, (BigDecimal) null);
      historicalDividend0.setDate(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      HistoricalDividend historicalDividend0 = new HistoricalDividend("ucIDP", mockGregorianCalendar0, (BigDecimal) null);
      String string0 = historicalDividend0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HistoricalDividend historicalDividend0 = new HistoricalDividend();
      String string0 = historicalDividend0.getSymbol();
      assertNull(string0);
  }
}
