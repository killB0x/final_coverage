/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:41:49 GMT 2022
 */

package yahoofinance.histquotes2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import yahoofinance.histquotes.Interval;
import yahoofinance.histquotes2.HistQuotes2Request;
import yahoofinance.histquotes2.QueryInterval;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HistQuotes2Request_ESTest extends HistQuotes2Request_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 12, 12, 0, 662);
      QueryInterval queryInterval0 = QueryInterval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("", calendar0, mockGregorianCalendar0, queryInterval0);
      histQuotes2Request0.getResult();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      QueryInterval queryInterval0 = QueryInterval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("", calendar0, calendar0, queryInterval0);
      try { 
        histQuotes2Request0.getResult();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: finance.yahoo.com
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(75, 75, 2269, 2269, 2269, 2269);
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      Interval interval0 = Interval.DAILY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request((String) null, mockDate0, mockDate1, interval0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      QueryInterval queryInterval0 = QueryInterval.DAILY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("Z+8d[kc[u=.y", mockDate0, mockDate0, queryInterval0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)HistQuotes2Request.DEFAULT_FROM;
      Interval interval0 = Interval.DAILY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("", mockGregorianCalendar0, mockGregorianCalendar0, interval0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=0,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=15,DAY_OF_YEAR=278,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QueryInterval queryInterval0 = QueryInterval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("", (Date) null, (Date) null, queryInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = Interval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("r )", (Date) null, (Date) null, interval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("$Mh", (Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QueryInterval queryInterval0 = QueryInterval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("https://guce.oath.com", (Calendar) null, (Calendar) null, queryInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistQuotes2Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = Interval.WEEKLY;
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("6", (Calendar) null, (Calendar) null, interval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistQuotes2Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HistQuotes2Request histQuotes2Request0 = null;
      try {
        histQuotes2Request0 = new HistQuotes2Request("J?j['W?", (Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistQuotes2Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("https://guce.oath.com/consent");
      try { 
        histQuotes2Request0.getResult();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: finance.yahoo.com
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("Nk#", (QueryInterval) null);
      // Undeclared exception!
      try { 
        histQuotes2Request0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.histquotes2.HistQuotes2Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = Interval.DAILY;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request((String) null, interval0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("1d", date0, date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)HistQuotes2Request.DEFAULT_FROM;
      HistQuotes2Request histQuotes2Request0 = new HistQuotes2Request("_kzT=$rqsfakZ ", mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=20,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }
}
