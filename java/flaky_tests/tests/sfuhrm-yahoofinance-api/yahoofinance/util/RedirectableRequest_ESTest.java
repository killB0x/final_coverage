/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 17:33:04 GMT 2022
 */

package yahoofinance.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import yahoofinance.util.RedirectableRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RedirectableRequest_ESTest extends RedirectableRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setProtocolRedirectLimit(0);
      // Undeclared exception!
      try { 
        redirectableRequest0.openConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("yahoofinance.util.RedirectableRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RedirectableRequest redirectableRequest0 = new RedirectableRequest((URL) null, 5880);
      redirectableRequest0.getRequest();
      assertEquals(5880, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Location", "kbg%q", 1979, "kbg%q", uRLStreamHandler0);
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-5841));
      redirectableRequest0.getRequest();
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals((-5841), redirectableRequest0.getProtocolRedirectLimit());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-873));
      redirectableRequest0.getRequest();
      assertEquals((-873), redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      
      redirectableRequest0.setReadTimeout(0);
      int int0 = redirectableRequest0.getReadTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setReadTimeout((-880));
      int int0 = redirectableRequest0.getReadTimeout();
      assertEquals((-880), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      int int0 = redirectableRequest0.getProtocolRedirectLimit();
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-297));
      int int0 = redirectableRequest0.getProtocolRedirectLimit();
      assertEquals((-297), int0);
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      
      redirectableRequest0.setConnectTimeout(0);
      int int0 = redirectableRequest0.getConnectTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RedirectableRequest redirectableRequest0 = new RedirectableRequest((URL) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        redirectableRequest0.openConnection((Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setConnectTimeout((-348));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        redirectableRequest0.openConnection((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setConnectTimeout((-1934));
      // Undeclared exception!
      try { 
        redirectableRequest0.openConnection();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Location", "kbg%q", 1979, "kbg%q", uRLStreamHandler0);
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-5841));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        redirectableRequest0.openConnection((Map<String, String>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol redirect count exceeded for url: null
         //
         verifyException("yahoofinance.util.RedirectableRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      URLConnection uRLConnection0 = redirectableRequest0.openConnection((Map<String, String>) hashMap0);
      assertEquals(10000, uRLConnection0.getConnectTimeout());
      assertEquals(2, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, uRLConnection0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "Gtuwl?f@klv^u[/", uRLStreamHandler0);
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-1));
      redirectableRequest0.setProtocolRedirectLimit(301);
      assertEquals(301, redirectableRequest0.getProtocolRedirectLimit());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setProtocolRedirectLimit((-1234));
      assertEquals(2, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", (String) null);
      try { 
        redirectableRequest0.openConnection((Map<String, String>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-873));
      try { 
        redirectableRequest0.openConnection();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Protocol redirect count exceeded for url: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("yahoofinance.util.RedirectableRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, " [fljg/2}U_");
      URLConnection uRLConnection0 = redirectableRequest0.openConnection();
      assertEquals(10000, uRLConnection0.getReadTimeout());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(10000, uRLConnection0.getConnectTimeout());
      assertEquals(2, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, 0);
      int int0 = redirectableRequest0.getProtocolRedirectLimit();
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(0, int0);
      assertEquals(10000, redirectableRequest0.getReadTimeout());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      int int0 = redirectableRequest0.getConnectTimeout();
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(2, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, 0);
      redirectableRequest0.setRequest(uRL0);
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals(0, redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-1394));
      int int0 = redirectableRequest0.getReadTimeout();
      assertEquals(10000, int0);
      assertEquals((-1394), redirectableRequest0.getProtocolRedirectLimit());
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "Gtuwl?f@klv^u[/", uRLStreamHandler0);
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0, (-1));
      redirectableRequest0.getRequest();
      assertEquals(10000, redirectableRequest0.getConnectTimeout());
      assertEquals(10000, redirectableRequest0.getReadTimeout());
      assertEquals((-1), redirectableRequest0.getProtocolRedirectLimit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      RedirectableRequest redirectableRequest0 = new RedirectableRequest(uRL0);
      redirectableRequest0.setConnectTimeout((-1234));
      int int0 = redirectableRequest0.getConnectTimeout();
      assertEquals((-1234), int0);
  }
}
