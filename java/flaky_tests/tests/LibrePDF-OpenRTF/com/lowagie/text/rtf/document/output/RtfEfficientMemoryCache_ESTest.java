/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 07:29:20 GMT 2022
 */

package com.lowagie.text.rtf.document.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.rtf.document.output.RtfEfficientMemoryCache;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RtfEfficientMemoryCache_ESTest extends RtfEfficientMemoryCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RtfEfficientMemoryCache rtfEfficientMemoryCache0 = new RtfEfficientMemoryCache();
      // Undeclared exception!
      try { 
        rtfEfficientMemoryCache0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lowagie.text.rtf.document.output.RtfByteArrayBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RtfEfficientMemoryCache rtfEfficientMemoryCache0 = new RtfEfficientMemoryCache();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OutputStream outputStream0 = rtfEfficientMemoryCache0.getOutputStream();
      byte[] byteArray0 = new byte[6];
      pipedOutputStream0.close();
      outputStream0.write(byteArray0);
      try { 
        rtfEfficientMemoryCache0.writeTo(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RtfEfficientMemoryCache rtfEfficientMemoryCache0 = new RtfEfficientMemoryCache();
      MockPrintStream mockPrintStream0 = new MockPrintStream("LR'Qf");
      rtfEfficientMemoryCache0.writeTo(mockPrintStream0);
  }
}
