/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 07:26:27 GMT 2022
 */

package com.lowagie.text.rtf.parser.ctrlwords;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.rtf.parser.ctrlwords.RtfCtrlWordData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RtfCtrlWordData_ESTest extends RtfCtrlWordData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      assertFalse(rtfCtrlWordData0.hasParam);
      
      rtfCtrlWordData0.hasParam = true;
      rtfCtrlWordData0.param = "t";
      String string0 = rtfCtrlWordData0.toString();
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.prefix = null;
      String string0 = rtfCtrlWordData0.toString();
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
      assertFalse(rtfCtrlWordData0.isNeg);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertNotNull(string0);
      assertFalse(rtfCtrlWordData0.modified);
      assertFalse(rtfCtrlWordData0.newGroup);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.specialHandler = "Pkm4";
      String string0 = rtfCtrlWordData0.toString();
      assertFalse(rtfCtrlWordData0.modified);
      assertFalse(rtfCtrlWordData0.newGroup);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.isNeg);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.suffix = "";
      rtfCtrlWordData0.toString();
      assertFalse(rtfCtrlWordData0.newGroup);
      assertFalse(rtfCtrlWordData0.modified);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.isNeg);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      Long long0 = rtfCtrlWordData0.toLong();
      assertEquals(9L, (long)long0);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
      assertFalse(rtfCtrlWordData0.modified);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.newGroup);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      Integer integer0 = rtfCtrlWordData0.toInteger();
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.newGroup);
      assertFalse(rtfCtrlWordData0.modified);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      assertFalse(rtfCtrlWordData0.isNeg);
      
      rtfCtrlWordData0.isNeg = true;
      rtfCtrlWordData0.param = "9";
      Integer integer0 = rtfCtrlWordData0.toInteger();
      assertEquals((-9), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      // Undeclared exception!
      try { 
        rtfCtrlWordData0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      // Undeclared exception!
      try { 
        rtfCtrlWordData0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      assertEquals(9, (int)rtfCtrlWordData0.toInteger());
      
      rtfCtrlWordData0.isNeg = true;
      long long0 = rtfCtrlWordData0.longValue();
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      assertFalse(rtfCtrlWordData0.isNeg);
      
      rtfCtrlWordData0.hasParam = true;
      rtfCtrlWordData0.isNeg = true;
      String string0 = rtfCtrlWordData0.toString();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      assertEquals(9, rtfCtrlWordData0.intValue());
      
      rtfCtrlWordData0.isNeg = true;
      Long long0 = rtfCtrlWordData0.toLong();
      assertEquals((-9L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      long long0 = rtfCtrlWordData0.longValue();
      assertFalse(rtfCtrlWordData0.newGroup);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.modified);
      assertEquals(9L, long0);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      assertEquals(9L, (long)rtfCtrlWordData0.toLong());
      
      rtfCtrlWordData0.isNeg = true;
      int int0 = rtfCtrlWordData0.intValue();
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      rtfCtrlWordData0.param = "9";
      int int0 = rtfCtrlWordData0.intValue();
      assertEquals(9, int0);
      assertFalse(rtfCtrlWordData0.modified);
      assertFalse(rtfCtrlWordData0.hasParam);
      assertFalse(rtfCtrlWordData0.newGroup);
      assertEquals((-1), rtfCtrlWordData0.ctrlWordType);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      RtfCtrlWordData rtfCtrlWordData1 = (RtfCtrlWordData)rtfCtrlWordData0.clone();
      assertFalse(rtfCtrlWordData1.newGroup);
      assertFalse(rtfCtrlWordData1.hasParam);
      assertFalse(rtfCtrlWordData1.modified);
      assertEquals((-1), rtfCtrlWordData1.ctrlWordType);
      assertFalse(rtfCtrlWordData1.isNeg);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      // Undeclared exception!
      try { 
        rtfCtrlWordData0.toInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RtfCtrlWordData rtfCtrlWordData0 = new RtfCtrlWordData();
      // Undeclared exception!
      try { 
        rtfCtrlWordData0.toLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
