/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:32:12 GMT 2022
 */

package com.adamldavis.ga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adamldavis.ga.FitnessCalcImpl;
import com.adamldavis.ga.FitnessCalculator;
import com.adamldavis.ga.Individual;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Individual_ESTest extends Individual_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.mutateGene(0);
      assertEquals(64, individual0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual.setDefaultGeneLength(0);
      Individual individual0 = new Individual(fitnessCalcImpl0);
      int int0 = individual0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual.setDefaultGeneLength(0);
      Individual individual0 = new Individual(fitnessCalcImpl0);
      byte[] byteArray0 = individual0.getGenes();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.getGene(1);
      assertEquals(64, individual0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.setGene((byte)0, (byte)64);
      byte byte0 = individual0.getGene((byte)0);
      assertEquals((byte)64, byte0);
      assertEquals(64, individual0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.setGene(1, (byte) (-36));
      byte byte0 = individual0.getGene(1);
      assertEquals((byte) (-36), byte0);
      assertEquals(64, individual0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)64;
      fitnessCalcImpl0.solution = byteArray0;
      Individual individual0 = new Individual(fitnessCalcImpl0);
      int int0 = individual0.getFitness();
      assertEquals(64, individual0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual.setDefaultGeneLength(6102);
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.toString();
      // Undeclared exception!
      individual0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual.setDefaultGeneLength(0);
      Individual individual0 = new Individual(fitnessCalcImpl0);
      // Undeclared exception!
      try { 
        individual0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      // Undeclared exception!
      try { 
        individual0.setGene(1345, (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1345 out of bounds for length 64
         //
         verifyException("com.adamldavis.ga.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Individual individual0 = new Individual((FitnessCalculator) null);
      // Undeclared exception!
      try { 
        individual0.getFitness();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adamldavis.ga.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Individual.setDefaultGeneLength((-1));
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = null;
      try {
        individual0 = new Individual(fitnessCalcImpl0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.adamldavis.ga.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      // Undeclared exception!
      try { 
        individual0.getGene(3906);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      int int0 = individual0.size();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      byte[] byteArray0 = individual0.getGenes();
      assertEquals(64, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.generateIndividual();
      assertEquals(64, individual0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      // Undeclared exception!
      try { 
        individual0.mutateGene((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 64
         //
         verifyException("com.adamldavis.ga.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      individual0.getFitness();
      int int0 = individual0.getFitness();
      assertEquals(64, individual0.size());
      assertEquals(64, int0);
  }
}
