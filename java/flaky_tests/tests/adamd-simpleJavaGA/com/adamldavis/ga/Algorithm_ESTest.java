/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:28:35 GMT 2022
 */

package com.adamldavis.ga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adamldavis.ga.Algorithm;
import com.adamldavis.ga.FitnessCalcImpl;
import com.adamldavis.ga.Individual;
import com.adamldavis.ga.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Algorithm_ESTest extends Algorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertNotNull(fitnessCalcImpl0);
      
      Population population0 = new Population(fitnessCalcImpl0, 611, true);
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertEquals(611, population0.size());
      assertNotNull(population0);
      assertEquals(100, Population.defaultPopSize);
      
      // Undeclared exception!
      Algorithm.evolvePopulation(population0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Algorithm.evolvePopulation((Population) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adamldavis.ga.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertNotNull(fitnessCalcImpl0);
      
      Population population0 = new Population(fitnessCalcImpl0);
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertEquals(100, population0.size());
      assertNotNull(population0);
      assertEquals(100, Population.defaultPopSize);
      
      Individual.setDefaultGeneLength((-1059));
      // Undeclared exception!
      try { 
        Algorithm.evolvePopulation(population0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1059
         //
         verifyException("com.adamldavis.ga.Individual", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertNotNull(fitnessCalcImpl0);
      
      Population population0 = new Population(fitnessCalcImpl0);
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertEquals(100, population0.size());
      assertNotNull(population0);
      assertEquals(100, Population.defaultPopSize);
      
      Individual[] individualArray0 = new Individual[0];
      population0.individuals = individualArray0;
      assertEquals(64, fitnessCalcImpl0.getMaxFitness());
      assertEquals(0, population0.size());
      
      // Undeclared exception!
      try { 
        Algorithm.evolvePopulation(population0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0);
      Population population1 = Algorithm.evolvePopulation(population0);
      assertNotSame(population1, population0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Algorithm algorithm0 = new Algorithm();
  }
}
