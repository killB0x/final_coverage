/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:31:12 GMT 2022
 */

package com.adamldavis.ga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adamldavis.ga.FitnessCalcImpl;
import com.adamldavis.ga.FitnessCalculator;
import com.adamldavis.ga.Individual;
import com.adamldavis.ga.Population;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Population_ESTest extends Population_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population();
      population0.setFitnessCalculator(fitnessCalcImpl0);
      assertEquals(100, population0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[5] = (byte) (-108);
      fitnessCalcImpl0.solution = byteArray0;
      Population population0 = new Population(fitnessCalcImpl0);
      population0.getFittest();
      assertEquals(100, population0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0);
      int int0 = population0.size();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Population population0 = new Population();
      Individual individual0 = population0.getIndividual(63);
      assertEquals(100, population0.size());
      assertNull(individual0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Population population0 = new Population();
      population0.getFitnessCalculator();
      assertEquals(100, population0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      byte[] byteArray0 = new byte[0];
      fitnessCalcImpl0.solution = byteArray0;
      Population population0 = new Population(fitnessCalcImpl0, 0, false);
      FitnessCalculator fitnessCalculator0 = population0.getFitnessCalculator();
      assertNotNull(fitnessCalculator0);
      assertEquals(0, population0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Population population0 = new Population();
      population0.individuals = null;
      // Undeclared exception!
      try { 
        population0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population();
      Individual individual0 = new Individual(fitnessCalcImpl0);
      // Undeclared exception!
      try { 
        population0.saveIndividual(100, individual0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Population population0 = new Population(64);
      population0.individuals = null;
      // Undeclared exception!
      try { 
        population0.getIndividual(64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0, 0, false);
      // Undeclared exception!
      try { 
        population0.getIndividual(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0, 522, true);
      // Undeclared exception!
      population0.getFittest();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = null;
      try {
        population0 = new Population(fitnessCalcImpl0, (-651), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -651
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population.defaultPopSize = (-565);
      Population population0 = null;
      try {
        population0 = new Population(fitnessCalcImpl0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -565
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Population population0 = null;
      try {
        population0 = new Population((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Population.defaultPopSize = (-1169);
      Population population0 = null;
      try {
        population0 = new Population();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1169
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0, 0, false);
      int int0 = population0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0, 1834, true);
      population0.getIndividual((byte)1);
      assertEquals(1834, population0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0);
      FitnessCalculator fitnessCalculator0 = population0.getFitnessCalculator();
      assertNotNull(fitnessCalculator0);
      assertEquals(100, population0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Population population0 = new Population(0);
      // Undeclared exception!
      try { 
        population0.getFittest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Population population0 = new Population();
      // Undeclared exception!
      try { 
        population0.getFittest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adamldavis.ga.Population", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FitnessCalcImpl fitnessCalcImpl0 = new FitnessCalcImpl();
      Population population0 = new Population(fitnessCalcImpl0);
      Individual individual0 = population0.getFittest();
      population0.saveIndividual(0, individual0);
      assertEquals(100, population0.size());
  }
}
