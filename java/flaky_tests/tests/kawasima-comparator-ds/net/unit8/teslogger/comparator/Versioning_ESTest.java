/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 22:08:46 GMT 2022
 */

package net.unit8.teslogger.comparator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.Statement;
import net.unit8.teslogger.comparator.Versioning;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Versioning_ESTest extends Versioning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Versioning versioning0 = null;
      try {
        versioning0 = new Versioning((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.unit8.teslogger.comparator.Versioning", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      Versioning versioning0 = null;
      try {
        versioning0 = new Versioning(connection0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/h2/util/IOUtils
         //
         verifyException("net.unit8.teslogger.comparator.Versioning", e);
      }
  }
}
