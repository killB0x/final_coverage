/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:44:27 GMT 2022
 */

package com.mxw.protocol.request.messages.builder.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.request.messages.builder.fungibleToken.FungibleTokenCreateBuilder;
import com.mxw.protocol.response.TransactionValue;
import com.mxw.protocol.response.fungibleToken.FungibleTokenCreate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleTokenCreateBuilder_ESTest extends FungibleTokenCreateBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", "(-&JHP\"#", "", "(-&JHP\"#", "(-&JHP\"#", "To0cN*C\"1)", false, (String) null);
      FungibleTokenCreateBuilder fungibleTokenCreateBuilder0 = new FungibleTokenCreateBuilder(fungibleTokenCreate0, "com.mxw.protocol.response.TransactionFee");
      TransactionValue transactionValue0 = fungibleTokenCreateBuilder0.build();
      assertEquals("com.mxw.protocol.response.TransactionFee", transactionValue0.getMemo());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", (String) null, "yme%", "", (String) null, "yme%", false, "");
      FungibleTokenCreateBuilder fungibleTokenCreateBuilder0 = new FungibleTokenCreateBuilder(fungibleTokenCreate0, (String) null);
      TransactionValue transactionValue0 = fungibleTokenCreateBuilder0.build();
      assertEquals("", transactionValue0.getMemo());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", (String) null, "yme%", "", (String) null, "yme%", false, "");
      FungibleTokenCreateBuilder fungibleTokenCreateBuilder0 = new FungibleTokenCreateBuilder(fungibleTokenCreate0, (String) null);
      String string0 = fungibleTokenCreateBuilder0.getTransactionType();
      assertEquals("token-createFungibleToken", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FungibleTokenCreateBuilder fungibleTokenCreateBuilder0 = new FungibleTokenCreateBuilder((FungibleTokenCreate) null, "token/createFungibleToken");
      String string0 = fungibleTokenCreateBuilder0.getRoute();
      assertEquals("token", string0);
  }
}
