/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:46:31 GMT 2022
 */

package com.mxw.protocol.request.messages.builder.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.request.messages.builder.fungibleToken.FungibleTokenBurnBuilder;
import com.mxw.protocol.response.TransactionValue;
import com.mxw.protocol.response.fungibleToken.FungibleTokenBurn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleTokenBurnBuilder_ESTest extends FungibleTokenBurnBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("com.mxw.protocol.response.fungibleToken.FungibleTokenBurn", "com.mxw.protocol.response.fungibleToken.FungibleTokenBurn");
      FungibleTokenBurnBuilder fungibleTokenBurnBuilder0 = new FungibleTokenBurnBuilder(fungibleTokenBurn0, "com.mxw.protocol.response.fungibleToken.FungibleTokenBurn");
      TransactionValue transactionValue0 = fungibleTokenBurnBuilder0.build();
      assertEquals("com.mxw.protocol.response.fungibleToken.FungibleTokenBurn", transactionValue0.getMemo());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("~1", (String) null);
      FungibleTokenBurnBuilder fungibleTokenBurnBuilder0 = new FungibleTokenBurnBuilder(fungibleTokenBurn0, (String) null);
      TransactionValue transactionValue0 = fungibleTokenBurnBuilder0.build();
      assertEquals("", transactionValue0.getMemo());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("~1", (String) null);
      FungibleTokenBurnBuilder fungibleTokenBurnBuilder0 = new FungibleTokenBurnBuilder(fungibleTokenBurn0, (String) null);
      String string0 = fungibleTokenBurnBuilder0.getTransactionType();
      assertEquals("token-burnFungibleToken", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("]-'<E{SVO61;\"", "]-'<E{SVO61;\"");
      FungibleTokenBurnBuilder fungibleTokenBurnBuilder0 = new FungibleTokenBurnBuilder(fungibleTokenBurn0, "]-'<E{SVO61;\"");
      String string0 = fungibleTokenBurnBuilder0.getRoute();
      assertEquals("token", string0);
  }
}
