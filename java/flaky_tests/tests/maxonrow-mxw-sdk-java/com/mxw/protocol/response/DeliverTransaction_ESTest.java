/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:11:50 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.DeliverTransaction;
import com.mxw.protocol.response.TransactionLog;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeliverTransaction_ESTest extends DeliverTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      deliverTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getNonce();
      assertEquals((short) (-14336), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      BigInteger bigInteger0 = BigInteger.ZERO;
      deliverTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getNonce();
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      BigInteger bigInteger0 = BigInteger.TEN;
      deliverTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getNonce();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      deliverTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getNonce();
      assertEquals((byte) (-56), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      TransactionLog transactionLog0 = new TransactionLog();
      deliverTransaction0.setLog(transactionLog0);
      TransactionLog transactionLog1 = deliverTransaction0.getLog();
      assertNull(transactionLog1.getLog());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      deliverTransaction0.setHash("");
      String string0 = deliverTransaction0.getHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      deliverTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getGasUsed();
      assertEquals((short) (-512), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      BigInteger bigInteger0 = BigInteger.ZERO;
      deliverTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getGasUsed();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      deliverTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getGasUsed();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-92);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      deliverTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = deliverTransaction0.getGasUsed();
      assertEquals((short)164, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      TransactionLog transactionLog0 = deliverTransaction0.getLog();
      assertNull(transactionLog0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      BigInteger bigInteger0 = deliverTransaction0.getNonce();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      String string0 = deliverTransaction0.getHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      BigInteger bigInteger0 = deliverTransaction0.getGasUsed();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      deliverTransaction0.setHash("O]iB`=t@uGe4_m2");
      String string0 = deliverTransaction0.getHash();
      assertEquals("O]iB`=t@uGe4_m2", string0);
  }
}
