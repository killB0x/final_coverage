/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:16:47 GMT 2022
 */

package com.mxw.protocol.response.kyc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.PublicKey;
import com.mxw.protocol.response.Signature;
import com.mxw.protocol.response.kyc.KycData;
import com.mxw.protocol.response.kyc.KycWhitelistModel;
import com.mxw.protocol.response.kyc.KycWhitelistPayload;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KycData_ESTest extends KycData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("KFX<}(d2", "2nE/M,Ij", bigInteger0);
      PublicKey publicKey0 = new PublicKey();
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "$*lf+g+]fvJDW>Q:0rc");
      KycData kycData0 = new KycData(kycWhitelistPayload0);
      LinkedList<Signature> linkedList0 = new LinkedList<Signature>();
      Signature signature0 = new Signature(publicKey0, "2nE/M,Ij");
      linkedList0.add(signature0);
      kycData0.setSignatureList(linkedList0);
      List<Signature> list0 = kycData0.getSignatureList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload", bigInteger0);
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, " |t;or&<T>t?-Fpjf^");
      KycData kycData0 = new KycData(kycWhitelistPayload0);
      KycWhitelistPayload kycWhitelistPayload1 = kycData0.getKycWhitelistPayload();
      assertSame(kycWhitelistPayload1, kycWhitelistPayload0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload", bigInteger0);
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, " |t;or&<T>t?-Fpjf^");
      KycData kycData0 = new KycData(kycWhitelistPayload0);
      kycData0.setKycWhitelistPayload(kycWhitelistPayload0);
      assertEquals(" |t;or&<T>t?-Fpjf^", kycWhitelistPayload0.getSignature());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload", bigInteger0);
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, " |t;or&<T>t?-Fpjf^");
      KycData kycData0 = new KycData(kycWhitelistPayload0);
      kycData0.setSignatureList((List<Signature>) null);
      List<Signature> list0 = kycData0.getSignatureList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload", bigInteger0);
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.kyc.KycWhitelistPayload", "com.mxw.protocol.response.kyc.KycWhitelistPayload");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, " |t;or&<T>t?-Fpjf^");
      KycData kycData0 = new KycData(kycWhitelistPayload0);
      List<Signature> list0 = kycData0.getSignatureList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KycData kycData0 = new KycData((KycWhitelistPayload) null);
      KycWhitelistPayload kycWhitelistPayload0 = kycData0.getKycWhitelistPayload();
      assertNull(kycWhitelistPayload0);
  }
}
