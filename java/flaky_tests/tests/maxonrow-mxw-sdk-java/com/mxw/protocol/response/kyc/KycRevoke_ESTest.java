/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:55:14 GMT 2022
 */

package com.mxw.protocol.response.kyc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.PublicKey;
import com.mxw.protocol.response.Signature;
import com.mxw.protocol.response.kyc.KycRevoke;
import com.mxw.protocol.response.kyc.KycRevokeModel;
import com.mxw.protocol.response.kyc.KycRevokePayload;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KycRevoke_ESTest extends KycRevoke_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey("g,y4~", "com.mxw.protocol.response.kyc.KycRevokeModel");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload((KycRevokeModel) null, publicKey0, "g,y4~");
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke("g,y4~", kycRevokePayload0, signature0);
      kycRevoke0.setSignatureList((List<Signature>) null);
      List<Signature> list0 = kycRevoke0.getSignatureList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      KycRevokeModel kycRevokeModel0 = new KycRevokeModel((String) null, bigInteger0, "com.mxw.protocol.response.kyc.KycRevoke");
      PublicKey publicKey0 = new PublicKey((String) null, "");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload(kycRevokeModel0, publicKey0, "");
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke((String) null, kycRevokePayload0, signature0);
      LinkedList<Signature> linkedList0 = new LinkedList<Signature>();
      kycRevoke0.setSignatureList(linkedList0);
      List<Signature> list0 = kycRevoke0.getSignatureList();
      assertFalse(list0.contains(signature0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey("g,y4~", "com.mxw.protocol.response.kyc.KycRevokeModel");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload((KycRevokeModel) null, publicKey0, "g,y4~");
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke("g,y4~", kycRevokePayload0, signature0);
      KycRevokePayload kycRevokePayload1 = kycRevoke0.getKycRevokePayload();
      assertSame(kycRevokePayload1, kycRevokePayload0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      KycRevokeModel kycRevokeModel0 = new KycRevokeModel((String) null, bigInteger0, "com.mxw.protocol.response.kyc.KycRevoke");
      PublicKey publicKey0 = new PublicKey((String) null, "");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload(kycRevokeModel0, publicKey0, "");
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke((String) null, kycRevokePayload0, signature0);
      String string0 = kycRevoke0.getKycOwner();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-446L));
      KycRevokeModel kycRevokeModel0 = new KycRevokeModel("", bigInteger0, "");
      PublicKey publicKey0 = new PublicKey("", "");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload(kycRevokeModel0, publicKey0, "");
      Signature signature0 = new Signature(publicKey0, "yT7Oop`y^{D}oG$F");
      KycRevoke kycRevoke0 = new KycRevoke("", kycRevokePayload0, signature0);
      String string0 = kycRevoke0.getKycOwner();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey("g,y4~", "com.mxw.protocol.response.kyc.KycRevokeModel");
      KycRevokePayload kycRevokePayload0 = new KycRevokePayload((KycRevokeModel) null, publicKey0, "g,y4~");
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke("g,y4~", kycRevokePayload0, signature0);
      kycRevoke0.setKycOwner((String) null);
      assertNull(kycRevoke0.getKycOwner());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KycRevoke kycRevoke0 = new KycRevoke("com.mxw.protocol.response.kyc.KycRevoke", (KycRevokePayload) null, (Signature) null);
      kycRevoke0.setKycRevokePayload((KycRevokePayload) null);
      assertEquals("com.mxw.protocol.response.kyc.KycRevoke", kycRevoke0.getKycOwner());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KycRevoke kycRevoke0 = new KycRevoke("com.mxw.protocol.response.kyc.KycRevoke", (KycRevokePayload) null, (Signature) null);
      String string0 = kycRevoke0.getKycOwner();
      assertEquals("com.mxw.protocol.response.kyc.KycRevoke", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KycRevoke kycRevoke0 = new KycRevoke("com.mxw.protocol.response.kyc.KycRevoke", (KycRevokePayload) null, (Signature) null);
      List<Signature> list0 = kycRevoke0.getSignatureList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Signature signature0 = new Signature();
      KycRevoke kycRevoke0 = new KycRevoke("X%CRWu4>~8>", (KycRevokePayload) null, signature0);
      KycRevokePayload kycRevokePayload0 = kycRevoke0.getKycRevokePayload();
      assertNull(kycRevokePayload0);
  }
}
