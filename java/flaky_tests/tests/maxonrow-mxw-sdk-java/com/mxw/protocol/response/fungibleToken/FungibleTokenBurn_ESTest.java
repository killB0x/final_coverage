/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:05:55 GMT 2022
 */

package com.mxw.protocol.response.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.fungibleToken.FungibleTokenBurn;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleTokenBurn_ESTest extends FungibleTokenBurn_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn((String) null, (String) null);
      String string0 = fungibleTokenBurn0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("<", "<");
      String string0 = fungibleTokenBurn0.getValue();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn((String) null, (String) null);
      String string0 = fungibleTokenBurn0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("", "");
      String string0 = fungibleTokenBurn0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("<", "<");
      fungibleTokenBurn0.setFrom("<");
      String string0 = fungibleTokenBurn0.getFrom();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("", "");
      String string0 = fungibleTokenBurn0.getFrom();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("", "");
      fungibleTokenBurn0.setFrom("");
      String string0 = fungibleTokenBurn0.getFrom();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("", "");
      String string0 = fungibleTokenBurn0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FungibleTokenBurn fungibleTokenBurn0 = new FungibleTokenBurn("com.mxw.protocol.response.fungibleToken.FungibleTokenBurn", "BPHg^W+0YX7jmzWz*");
      String string0 = fungibleTokenBurn0.getSymbol();
      assertEquals("BPHg^W+0YX7jmzWz*", fungibleTokenBurn0.getValue());
      assertEquals("com.mxw.protocol.response.fungibleToken.FungibleTokenBurn", string0);
  }
}
