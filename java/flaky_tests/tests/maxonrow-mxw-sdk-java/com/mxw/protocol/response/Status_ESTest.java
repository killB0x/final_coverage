/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:14:52 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.protocol.response.NodeInfo;
import com.mxw.protocol.response.PublicKey;
import com.mxw.protocol.response.Status;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Status_ESTest extends Status_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Status status0 = new Status();
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.PublicKey", "com.mxw.protocol.response.PublicKey");
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo("&0(Dtuh", publicKey0, (BigInteger) null);
      status0.setValidatorInfo(status_ValidatorInfo0);
      Status.ValidatorInfo status_ValidatorInfo1 = status0.getValidatorInfo();
      assertSame(status_ValidatorInfo1, status_ValidatorInfo0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Status status0 = new Status();
      Status.ValidatorInfo status_ValidatorInfo0 = status0.getValidatorInfo();
      assertNull(status_ValidatorInfo0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Status status0 = new Status();
      Status.SyncInfo status_SyncInfo0 = status0.getSyncInfo();
      assertNull(status_SyncInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Status status0 = new Status();
      NodeInfo nodeInfo0 = status0.getNodeInfo();
      assertNull(nodeInfo0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      Status status0 = new Status();
      status0.setSyncInfo(status_SyncInfo0);
      Status.SyncInfo status_SyncInfo1 = status0.getSyncInfo();
      assertNull(status_SyncInfo1.getLatestAppHash());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Status status0 = new Status();
      NodeInfo nodeInfo0 = new NodeInfo();
      status0.setNodeInfo(nodeInfo0);
      NodeInfo nodeInfo1 = status0.getNodeInfo();
      assertNull(nodeInfo1.getVersion());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      status_SyncInfo0.setLatestBlockTime((String) null);
      assertNull(status_SyncInfo0.getCatchingUp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      String string0 = status_SyncInfo0.getLatestBlockHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      // Undeclared exception!
      try { 
        status_SyncInfo0.getLatestBlockTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      status_SyncInfo0.setLatestAppHash("<NK5");
      assertEquals("<NK5", status_SyncInfo0.getLatestAppHash());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      status_SyncInfo0.setCatchingUp((Boolean) null);
      assertNull(status_SyncInfo0.getLatestAppHash());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      Boolean boolean0 = status_SyncInfo0.getCatchingUp();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      status_SyncInfo0.setLatestBlockHeight("~");
      assertNull(status_SyncInfo0.getLatestBlockHash());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      // Undeclared exception!
      try { 
        status_SyncInfo0.getLatestBlockHeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      String string0 = status_SyncInfo0.getLatestAppHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Status.SyncInfo status_SyncInfo0 = new Status.SyncInfo();
      status_SyncInfo0.setLatestBlockHash("<NK5");
      assertNull(status_SyncInfo0.getLatestAppHash());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.PublicKey", "com.mxw.protocol.response.PublicKey");
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo("&0(Dtuh", publicKey0, (BigInteger) null);
      status_ValidatorInfo0.setPubKey(publicKey0);
      assertEquals("com.mxw.protocol.response.PublicKey", publicKey0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo();
      BigInteger bigInteger0 = status_ValidatorInfo0.getVotingPower();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo();
      String string0 = status_ValidatorInfo0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo();
      PublicKey publicKey0 = status_ValidatorInfo0.getPubKey();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo();
      BigInteger bigInteger0 = BigInteger.TEN;
      status_ValidatorInfo0.setVotingPower(bigInteger0);
      assertNull(status_ValidatorInfo0.getAddress());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey("com.mxw.protocol.response.PublicKey", "com.mxw.protocol.response.PublicKey");
      Status.ValidatorInfo status_ValidatorInfo0 = new Status.ValidatorInfo("&0(Dtuh", publicKey0, (BigInteger) null);
      status_ValidatorInfo0.setAddress("com.mxw.protocol.response.Status");
      assertEquals("com.mxw.protocol.response.Status", status_ValidatorInfo0.getAddress());
  }
}
