/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:49:22 GMT 2022
 */

package com.mxw.protocol.response.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.fungibleToken.FungibleTokenCreate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleTokenCreate_ESTest extends FungibleTokenCreate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("H{X]a,(g$?6,b<", "H{X]a,(g$?6,b<", "", "Rwi", "", "", true, "");
      FungibleTokenCreate.Fee fungibleTokenCreate_Fee0 = fungibleTokenCreate0.getFee();
      assertEquals("H{X]a,(g$?6,b<", fungibleTokenCreate_Fee0.getValue());
      
      fungibleTokenCreate_Fee0.value = "";
      String string0 = fungibleTokenCreate_Fee0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", false, "com.mxw.protocol.response.fungibleToken.FungibleTokenCreate");
      fungibleTokenCreate0.getSymbol();
      assertEquals("com.mxw.protocol.response.fungibleToken.FungibleTokenCreate", fungibleTokenCreate0.getMetadata());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", "", "x-yii?s~", "", "", "x-yii?s~", true, "q");
      String string0 = fungibleTokenCreate0.getSymbol();
      assertEquals("", fungibleTokenCreate0.getMetadata());
      assertEquals("", string0);
      assertEquals("x-yii?s~", fungibleTokenCreate0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("H{X]a,(g$?6,b<", "H{X]a,(g$?6,b<", "", "Rwi", "", "", true, "");
      fungibleTokenCreate0.setOwner("H{X]a,(g$?6,b<");
      fungibleTokenCreate0.getOwner();
      assertEquals("Rwi", fungibleTokenCreate0.getMetadata());
      assertEquals("", fungibleTokenCreate0.getSymbol());
      assertEquals("", fungibleTokenCreate0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", "", "x-yii?s~", "", "", "x-yii?s~", true, "q");
      fungibleTokenCreate0.setOwner("");
      fungibleTokenCreate0.getOwner();
      assertEquals("x-yii?s~", fungibleTokenCreate0.getName());
      assertEquals("", fungibleTokenCreate0.getMetadata());
      assertEquals("", fungibleTokenCreate0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("", "", "x-yii?s~", "", "", "x-yii?s~", true, "q");
      String string0 = fungibleTokenCreate0.getName();
      assertEquals("x-yii?s~", string0);
      assertEquals("", fungibleTokenCreate0.getSymbol());
      assertEquals("", fungibleTokenCreate0.getMetadata());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, "", "", (String) null, "", "", false, "");
      String string0 = fungibleTokenCreate0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate("2)7^hmw`ZU6BUK", "2)7^hmw`ZU6BUK", "2)7^hmw`ZU6BUK", "2)7^hmw`ZU6BUK", "2)7^hmw`ZU6BUK", "2)7^hmw`ZU6BUK", true, "2)7^hmw`ZU6BUK");
      String string0 = fungibleTokenCreate0.getMetadata();
      assertEquals("2)7^hmw`ZU6BUK", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FungibleTokenCreate.Fee fungibleTokenCreate_Fee0 = new FungibleTokenCreate.Fee();
      fungibleTokenCreate_Fee0.value = "";
      String string0 = fungibleTokenCreate_Fee0.getTo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, (String) null, (String) null, (String) null, (String) null, "1d", false, "");
      FungibleTokenCreate.Fee fungibleTokenCreate_Fee0 = fungibleTokenCreate0.getFee();
      String string0 = fungibleTokenCreate_Fee0.getTo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, (String) null, (String) null, (String) null, (String) null, "1d", false, "");
      String string0 = fungibleTokenCreate0.getMetadata();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, (String) null, (String) null, (String) null, (String) null, "1d", false, "");
      String string0 = fungibleTokenCreate0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, (String) null, (String) null, (String) null, (String) null, "1d", false, "");
      String string0 = fungibleTokenCreate0.getOwner();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FungibleTokenCreate fungibleTokenCreate0 = new FungibleTokenCreate((String) null, (String) null, (String) null, (String) null, (String) null, (String) null, false, (String) null);
      String string0 = fungibleTokenCreate0.getName();
      assertNull(string0);
  }
}
