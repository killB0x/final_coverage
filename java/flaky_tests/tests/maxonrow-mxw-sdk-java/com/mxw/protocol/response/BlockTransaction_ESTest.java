/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:53:12 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.BlockTransaction;
import com.mxw.protocol.response.TransactionEvent;
import com.mxw.protocol.response.TransactionLog;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockTransaction_ESTest extends BlockTransaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      Integer integer0 = new Integer(0);
      blockTransaction0.setTransactionIndex(integer0);
      Integer integer1 = blockTransaction0.getTransactionIndex();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      Integer integer0 = new Integer(318);
      blockTransaction0.setTransactionIndex(integer0);
      Integer integer1 = blockTransaction0.getTransactionIndex();
      assertEquals(318, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      Integer integer0 = new Integer((byte) (-11));
      blockTransaction0.setTransactionIndex(integer0);
      Integer integer1 = blockTransaction0.getTransactionIndex();
      assertEquals((-11), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      blockTransaction0.setRawLog("");
      String string0 = blockTransaction0.getRawLog();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      BigInteger bigInteger0 = BigInteger.ONE;
      blockTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getNonce();
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      blockTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getNonce();
      assertEquals((short) (-11), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      LinkedList<TransactionLog> linkedList0 = new LinkedList<TransactionLog>();
      blockTransaction0.setLogs(linkedList0);
      List<TransactionLog> list0 = blockTransaction0.getLogs();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      LinkedList<TransactionLog> linkedList0 = new LinkedList<TransactionLog>();
      TransactionLog transactionLog0 = new TransactionLog();
      linkedList0.add(transactionLog0);
      blockTransaction0.setLogs(linkedList0);
      List<TransactionLog> list0 = blockTransaction0.getLogs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      blockTransaction0.setHash("GW");
      String string0 = blockTransaction0.getHash();
      assertEquals("GW", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      blockTransaction0.setHash("");
      String string0 = blockTransaction0.getHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      BigInteger bigInteger0 = BigInteger.ZERO;
      blockTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getGasUsed();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      blockTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getGasUsed();
      assertEquals((short)18, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      blockTransaction0.setGasUsed(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getGasUsed();
      assertEquals((short) (-11), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      LinkedList<TransactionEvent> linkedList0 = new LinkedList<TransactionEvent>();
      blockTransaction0.setEvents(linkedList0);
      List<TransactionEvent> list0 = blockTransaction0.getEvents();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      LinkedList<TransactionEvent> linkedList0 = new LinkedList<TransactionEvent>();
      TransactionEvent transactionEvent0 = new TransactionEvent();
      linkedList0.add(transactionEvent0);
      blockTransaction0.setEvents(linkedList0);
      List<TransactionEvent> list0 = blockTransaction0.getEvents();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      Integer integer0 = blockTransaction0.getTransactionIndex();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      BigInteger bigInteger0 = BigInteger.ZERO;
      blockTransaction0.setNonce(bigInteger0);
      BigInteger bigInteger1 = blockTransaction0.getNonce();
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      blockTransaction0.setRawLog("8z(>lq[pv0_eos");
      String string0 = blockTransaction0.getRawLog();
      assertEquals("8z(>lq[pv0_eos", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      String string0 = blockTransaction0.getHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      List<TransactionEvent> list0 = blockTransaction0.getEvents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      String string0 = blockTransaction0.getRawLog();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      BigInteger bigInteger0 = blockTransaction0.getGasUsed();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      BigInteger bigInteger0 = blockTransaction0.getNonce();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockTransaction blockTransaction0 = new BlockTransaction();
      List<TransactionLog> list0 = blockTransaction0.getLogs();
      assertNull(list0);
  }
}
