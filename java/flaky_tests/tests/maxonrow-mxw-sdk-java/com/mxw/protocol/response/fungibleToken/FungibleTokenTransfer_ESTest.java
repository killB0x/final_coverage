/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:05:45 GMT 2022
 */

package com.mxw.protocol.response.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.fungibleToken.FungibleTokenTransfer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleTokenTransfer_ESTest extends FungibleTokenTransfer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("EI9vj8", (String) null);
      fungibleTokenTransfer0.setTo("(YHu'>v");
      String string0 = fungibleTokenTransfer0.getTo();
      assertEquals("(YHu'>v", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("EI9vj8", (String) null);
      fungibleTokenTransfer0.setTo("");
      String string0 = fungibleTokenTransfer0.getTo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer((String) null, (String) null);
      String string0 = fungibleTokenTransfer0.getSymbol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("", "");
      String string0 = fungibleTokenTransfer0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("}gGPL!VKo(SD", "");
      fungibleTokenTransfer0.setFrom("");
      fungibleTokenTransfer0.getFrom();
      assertEquals("}gGPL!VKo(SD", fungibleTokenTransfer0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer((String) null, (String) null);
      fungibleTokenTransfer0.setFrom("df#I^");
      String string0 = fungibleTokenTransfer0.getFrom();
      assertEquals("df#I^", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("Nvpq,i", "");
      String string0 = fungibleTokenTransfer0.getSymbol();
      assertEquals("Nvpq,i", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer("Nvpq,i", "");
      fungibleTokenTransfer0.getTo();
      assertEquals("Nvpq,i", fungibleTokenTransfer0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FungibleTokenTransfer fungibleTokenTransfer0 = new FungibleTokenTransfer((String) null, (String) null);
      String string0 = fungibleTokenTransfer0.getFrom();
      assertNull(string0);
  }
}
