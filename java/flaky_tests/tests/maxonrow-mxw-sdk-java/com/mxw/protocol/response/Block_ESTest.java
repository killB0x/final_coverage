/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:08:37 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.Block;
import com.mxw.protocol.response.BlockTransaction;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Block_ESTest extends Block_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Block.Results block_Results0 = new Block.Results();
      Block block0 = new Block();
      block0.setResults(block_Results0);
      Block.Results block_Results1 = block0.getResults();
      assertSame(block_Results1, block_Results0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Block block0 = new Block();
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      block0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = block0.getBlockNumber();
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Block block0 = new Block();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.not();
      block0.setBlockNumber(bigInteger1);
      BigInteger bigInteger2 = block0.getBlockNumber();
      assertNotSame(bigInteger2, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Block.Results block_Results0 = new Block.Results();
      block_Results0.setTransactions((List<BlockTransaction>) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Block.Results block_Results0 = new Block.Results();
      LinkedList<BlockTransaction> linkedList0 = new LinkedList<BlockTransaction>();
      block_Results0.setTransactions(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Block block0 = new Block();
      BigInteger bigInteger0 = BigInteger.TEN;
      block0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = block0.getBlockNumber();
      assertEquals((byte)10, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Block block0 = new Block();
      Block.Results block_Results0 = block0.getResults();
      assertNull(block_Results0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Block block0 = new Block();
      BigInteger bigInteger0 = block0.getBlockNumber();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Block.Results block_Results0 = new Block.Results();
      List<BlockTransaction> list0 = block_Results0.getTransactions();
      assertEquals(0, list0.size());
  }
}
