/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:19:20 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.protocol.response.NodeInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeInfo_ESTest extends NodeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other("", "B/hIzNky:>~");
      assertEquals("B/hIzNky:>~", nodeInfo_Other0.getRpcAddress());
      assertEquals("", nodeInfo_Other0.getTxIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setVersion("k3wa|");
      String string0 = nodeInfo0.getVersion();
      assertEquals("k3wa|", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setVersion("");
      String string0 = nodeInfo0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion();
      nodeInfo0.setProtocolVersion(nodeInfo_ProtocolVersion0);
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion1 = nodeInfo0.getProtocolVersion();
      assertSame(nodeInfo_ProtocolVersion1, nodeInfo_ProtocolVersion0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other("", "");
      nodeInfo0.setOther(nodeInfo_Other0);
      NodeInfo.Other nodeInfo_Other1 = nodeInfo0.getOther();
      assertEquals("", nodeInfo_Other1.getTxIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setNetwork("com.mxw.protocol.response.NodeInfo");
      String string0 = nodeInfo0.getNetwork();
      assertEquals("com.mxw.protocol.response.NodeInfo", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setMoniker("x>F#`FiM@8N%=.H.");
      String string0 = nodeInfo0.getMoniker();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setListenAddr("");
      String string0 = nodeInfo0.getListenAddr();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setId("com.mxw.utils.Numeric");
      String string0 = nodeInfo0.getId();
      assertEquals("com.mxw.utils.Numeric", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setId("");
      String string0 = nodeInfo0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setChannels("?Gm8_S;:>x4B");
      String string0 = nodeInfo0.getChannels();
      assertEquals("?Gm8_S;:>x4B", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setChannels("");
      String string0 = nodeInfo0.getChannels();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion();
      // Undeclared exception!
      try { 
        nodeInfo_ProtocolVersion0.getP2p();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be in format 0x[1-9]+[0-9]* or 0x0
         //
         verifyException("com.mxw.utils.Numeric", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion();
      // Undeclared exception!
      try { 
        nodeInfo_ProtocolVersion0.getApp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be in format 0x[1-9]+[0-9]* or 0x0
         //
         verifyException("com.mxw.utils.Numeric", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion("_}Zr8w8*,B?h", (String) null, "_}Zr8w8*,B?h");
      nodeInfo_ProtocolVersion0.setApp("1n8Q");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion();
      nodeInfo_ProtocolVersion0.setBlock("is larger then length ");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion();
      // Undeclared exception!
      try { 
        nodeInfo_ProtocolVersion0.getBlock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Value must be in format 0x[1-9]+[0-9]* or 0x0
         //
         verifyException("com.mxw.utils.Numeric", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = new NodeInfo.ProtocolVersion("", (String) null, (String) null);
      nodeInfo_ProtocolVersion0.setP2p("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setMoniker("");
      String string0 = nodeInfo0.getMoniker();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getChannels();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other();
      nodeInfo0.setOther(nodeInfo_Other0);
      assertNull(nodeInfo0.getMoniker());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getMoniker();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getNetwork();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      NodeInfo.ProtocolVersion nodeInfo_ProtocolVersion0 = nodeInfo0.getProtocolVersion();
      assertNull(nodeInfo_ProtocolVersion0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getListenAddr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setListenAddr("Input is too large to put in byte array of size ");
      String string0 = nodeInfo0.getListenAddr();
      assertEquals("Input is too large to put in byte array of size ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      String string0 = nodeInfo0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      NodeInfo.Other nodeInfo_Other0 = nodeInfo0.getOther();
      assertNull(nodeInfo_Other0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeInfo nodeInfo0 = new NodeInfo();
      nodeInfo0.setNetwork("");
      String string0 = nodeInfo0.getNetwork();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other();
      nodeInfo_Other0.setRpcAddress((String) null);
      assertNull(nodeInfo_Other0.getTxIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other("", "");
      String string0 = nodeInfo_Other0.getTxIndex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other();
      nodeInfo_Other0.setTxIndex((String) null);
      assertNull(nodeInfo_Other0.getRpcAddress());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NodeInfo.Other nodeInfo_Other0 = new NodeInfo.Other();
      String string0 = nodeInfo_Other0.getRpcAddress();
      assertNull(string0);
  }
}
