/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:58:56 GMT 2022
 */

package com.mxw.protocol.response.nonFungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NFTokenAcceptOwnership_ESTest extends NFTokenAcceptOwnership_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", "\"J:D/kXX`");
      assertEquals("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", nFTokenAcceptOwnership0.getSymbol());
      
      nFTokenAcceptOwnership0.setSymbol((String) null);
      nFTokenAcceptOwnership0.getSymbol();
      assertEquals("\"J:D/kXX`", nFTokenAcceptOwnership0.getFrom());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("?Y/9J]<YDr+\u0005/iX&", "?Y/9J]<YDr+\u0005/iX&");
      nFTokenAcceptOwnership0.setSymbol("");
      String string0 = nFTokenAcceptOwnership0.getSymbol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", "\"J:D/kXX`");
      assertEquals("\"J:D/kXX`", nFTokenAcceptOwnership0.getFrom());
      
      nFTokenAcceptOwnership0.setFrom((String) null);
      nFTokenAcceptOwnership0.getFrom();
      assertEquals("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", nFTokenAcceptOwnership0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", "\"J:D/kXX`");
      assertEquals("\"J:D/kXX`", nFTokenAcceptOwnership0.getFrom());
      
      nFTokenAcceptOwnership0.setFrom("");
      nFTokenAcceptOwnership0.getFrom();
      assertEquals("com.mxw.protocol.response.nonFungibleToken.NFTokenAcceptOwnership", nFTokenAcceptOwnership0.getSymbol());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("FX))I_?", "FX))I_?");
      String string0 = nFTokenAcceptOwnership0.getSymbol();
      assertEquals("FX))I_?", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NFTokenAcceptOwnership nFTokenAcceptOwnership0 = new NFTokenAcceptOwnership("FX))I_?", "FX))I_?");
      String string0 = nFTokenAcceptOwnership0.getFrom();
      assertEquals("FX))I_?", string0);
  }
}
