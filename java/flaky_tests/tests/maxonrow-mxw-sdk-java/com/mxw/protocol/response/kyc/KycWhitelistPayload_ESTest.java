/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:15:56 GMT 2022
 */

package com.mxw.protocol.response.kyc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.PublicKey;
import com.mxw.protocol.response.kyc.KycWhitelistModel;
import com.mxw.protocol.response.kyc.KycWhitelistPayload;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KycWhitelistPayload_ESTest extends KycWhitelistPayload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel(")", ")", bigInteger0);
      PublicKey publicKey0 = new PublicKey();
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, ")");
      kycWhitelistPayload0.setSignature((String) null);
      String string0 = kycWhitelistPayload0.getSignature();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("", "~", bigInteger0);
      PublicKey publicKey0 = new PublicKey();
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "");
      String string0 = kycWhitelistPayload0.getSignature();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("[", "", (BigInteger) null);
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, (PublicKey) null, "com.mxw.protocol.response.PublicKey");
      PublicKey publicKey0 = kycWhitelistPayload0.getPubKey();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("", "", bigInteger0);
      PublicKey publicKey0 = new PublicKey();
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "OD]");
      KycWhitelistModel kycWhitelistModel1 = kycWhitelistPayload0.getKycWhitelistModel();
      assertEquals("", kycWhitelistModel1.getFrom());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey", bigInteger0);
      PublicKey publicKey0 = new PublicKey("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "/N}P!bU*#~4");
      kycWhitelistPayload0.setKycWhitelistModel(kycWhitelistModel0);
      assertEquals("/N}P!bU*#~4", kycWhitelistModel0.getFrom());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey", bigInteger0);
      PublicKey publicKey0 = new PublicKey("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "/N}P!bU*#~4");
      kycWhitelistPayload0.setPubKey(publicKey0);
      assertEquals("/N}P!bU*#~4", kycWhitelistPayload0.getSignature());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey", bigInteger0);
      PublicKey publicKey0 = new PublicKey("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "/N}P!bU*#~4");
      String string0 = kycWhitelistPayload0.getSignature();
      assertEquals("/N}P!bU*#~4", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PublicKey publicKey0 = new PublicKey();
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload((KycWhitelistModel) null, publicKey0, "com.mxw.protocol.response.kyc.KycWhitelistModel");
      KycWhitelistModel kycWhitelistModel0 = kycWhitelistPayload0.getKycWhitelistModel();
      assertNull(kycWhitelistModel0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      KycWhitelistModel kycWhitelistModel0 = new KycWhitelistModel("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey", bigInteger0);
      PublicKey publicKey0 = new PublicKey("/N}P!bU*#~4", "com.mxw.protocol.response.PublicKey");
      KycWhitelistPayload kycWhitelistPayload0 = new KycWhitelistPayload(kycWhitelistModel0, publicKey0, "/N}P!bU*#~4");
      PublicKey publicKey1 = kycWhitelistPayload0.getPubKey();
      assertEquals("com.mxw.protocol.response.PublicKey", publicKey1.getValue());
  }
}
