/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:01:43 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.Coin;
import com.mxw.protocol.response.TransactionFee;
import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransactionFee_ESTest extends TransactionFee_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionFee0.setGas(bigInteger0);
      BigInteger bigInteger1 = transactionFee0.getGas();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      BigInteger bigInteger0 = BigInteger.ZERO;
      transactionFee0.setGas(bigInteger0);
      BigInteger bigInteger1 = transactionFee0.getGas();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)28;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionFee0.setGas(bigInteger0);
      BigInteger bigInteger1 = transactionFee0.getGas();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionFee0.setGas(bigInteger0);
      BigInteger bigInteger1 = transactionFee0.getGas();
      assertEquals((byte) (-1), bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      LinkedList<Coin> linkedList0 = new LinkedList<Coin>();
      transactionFee0.setAmount(linkedList0);
      List<Coin> list0 = transactionFee0.getAmount();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      LinkedList<Coin> linkedList0 = new LinkedList<Coin>();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Coin coin0 = new Coin(bigInteger0, "\"KUIj)I");
      linkedList0.add(coin0);
      transactionFee0.setAmount(linkedList0);
      List<Coin> list0 = transactionFee0.getAmount();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      BigInteger bigInteger0 = transactionFee0.getGas();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TransactionFee transactionFee0 = new TransactionFee();
      List<Coin> list0 = transactionFee0.getAmount();
      assertNull(list0);
  }
}
