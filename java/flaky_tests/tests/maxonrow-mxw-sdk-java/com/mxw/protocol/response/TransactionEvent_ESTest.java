/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:50:43 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.TransactionEvent;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransactionEvent_ESTest extends TransactionEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer(0);
      transactionEvent0.setTransactionIndex(integer0);
      Integer integer1 = transactionEvent0.getTransactionIndex();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer((-49));
      transactionEvent0.setTransactionIndex(integer0);
      Integer integer1 = transactionEvent0.getTransactionIndex();
      assertEquals((-49), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("d5D@,O#p.=+[nfu:K");
      transactionEvent0.setParams(linkedList0);
      List<String> list0 = transactionEvent0.getParams();
      assertTrue(list0.contains("d5D@,O#p.=+[nfu:K"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      transactionEvent0.setHash("com.mxw.protocol.response.TransactionEvent");
      String string0 = transactionEvent0.getHash();
      assertEquals("com.mxw.protocol.response.TransactionEvent", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer(0);
      transactionEvent0.setEventIndex(integer0);
      Integer integer1 = transactionEvent0.getEventIndex();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer((-1));
      transactionEvent0.setEventIndex(integer0);
      Integer integer1 = transactionEvent0.getEventIndex();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      transactionEvent0.setAddress("eA5^B0$AZV2:T");
      String string0 = transactionEvent0.getAddress();
      assertEquals("eA5^B0$AZV2:T", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      transactionEvent0.setAddress("");
      String string0 = transactionEvent0.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      String string0 = transactionEvent0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      List<String> list0 = transactionEvent0.getParams();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      String string0 = transactionEvent0.getHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      transactionEvent0.setParams((List<String>) null);
      List<String> list0 = transactionEvent0.getParams();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer(243);
      transactionEvent0.setTransactionIndex(integer0);
      Integer integer1 = transactionEvent0.getTransactionIndex();
      assertEquals(243, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      transactionEvent0.setHash("");
      String string0 = transactionEvent0.getHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = new Integer(243);
      transactionEvent0.setEventIndex(integer0);
      Integer integer1 = transactionEvent0.getEventIndex();
      assertEquals(243, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = transactionEvent0.getEventIndex();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransactionEvent transactionEvent0 = new TransactionEvent();
      Integer integer0 = transactionEvent0.getTransactionIndex();
      assertNull(integer0);
  }
}
