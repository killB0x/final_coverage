/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 10:18:10 GMT 2022
 */

package com.mxw.protocol.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.mxw.protocol.response.DeliverTransaction;
import com.mxw.protocol.response.TransactionEvent;
import com.mxw.protocol.response.TransactionLog;
import com.mxw.protocol.response.TransactionReceipt;
import java.math.BigInteger;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransactionReceipt_ESTest extends TransactionReceipt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      Integer integer0 = new Integer(0);
      transactionReceipt0.setStatus(integer0);
      Integer integer1 = transactionReceipt0.getStatus();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      Integer integer0 = new Integer(1496);
      transactionReceipt0.setStatus(integer0);
      Integer integer1 = transactionReceipt0.getStatus();
      assertEquals(1496, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      Integer integer0 = new Integer((-1));
      transactionReceipt0.setStatus(integer0);
      Integer integer1 = transactionReceipt0.getStatus();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      transactionReceipt0.setResult(transactionReceipt_Result0);
      TransactionReceipt.Result transactionReceipt_Result1 = transactionReceipt0.getResult();
      assertNull(transactionReceipt_Result1.getRawLog());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      transactionReceipt0.setRawPayload("");
      String string0 = transactionReceipt0.getRawPayload();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      transactionReceipt0.setPayload(transactionReceipt_Result0);
      TransactionReceipt.Result transactionReceipt_Result1 = (TransactionReceipt.Result)transactionReceipt0.getPayload();
      assertNull(transactionReceipt_Result1.getRawLog());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-73);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setNonce(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getNonce();
      assertEquals((short) (-18688), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setNonce(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getNonce();
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      transactionReceipt0.setNonce(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getNonce();
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setNonce(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getNonce();
      assertEquals((short)255, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      transactionReceipt0.setHash("BtDG");
      String string0 = transactionReceipt0.getHash();
      assertEquals("BtDG", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      transactionReceipt0.setHash("");
      String string0 = transactionReceipt0.getHash();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      DeliverTransaction deliverTransaction0 = new DeliverTransaction();
      transactionReceipt0.setDeliverTransaction(deliverTransaction0);
      DeliverTransaction deliverTransaction1 = transactionReceipt0.getDeliverTransaction();
      assertNull(deliverTransaction1.getHash());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-73);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TransactionReceipt<TransactionLog> transactionReceipt0 = new TransactionReceipt<TransactionLog>();
      transactionReceipt0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getBlockNumber();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getBlockNumber();
      assertEquals((byte)0, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)43;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getBlockNumber();
      assertEquals((byte)43, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-36);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      transactionReceipt0.setBlockNumber(bigInteger0);
      BigInteger bigInteger1 = transactionReceipt0.getBlockNumber();
      assertEquals((short)220, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      transactionReceipt_Result0.setEvents((List<TransactionEvent>) null);
      assertNull(transactionReceipt_Result0.getRawLog());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      transactionReceipt_Result0.setRawLog("EzYF8_0x-*");
      assertEquals("EzYF8_0x-*", transactionReceipt_Result0.getRawLog());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      transactionReceipt_Result0.setLogs((List<TransactionLog>) null);
      assertNull(transactionReceipt_Result0.getRawLog());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      List<TransactionLog> list0 = transactionReceipt_Result0.getLogs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      String string0 = transactionReceipt_Result0.getRawLog();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransactionReceipt.Result transactionReceipt_Result0 = new TransactionReceipt.Result();
      List<TransactionEvent> list0 = transactionReceipt_Result0.getEvents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      BigInteger bigInteger0 = transactionReceipt0.getNonce();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      DeliverTransaction deliverTransaction0 = transactionReceipt0.getDeliverTransaction();
      assertNull(deliverTransaction0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      BigInteger bigInteger0 = transactionReceipt0.getBlockNumber();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      TransactionReceipt.Result transactionReceipt_Result0 = transactionReceipt0.getResult();
      assertNull(transactionReceipt_Result0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      transactionReceipt0.setRawPayload("-[H");
      String string0 = transactionReceipt0.getRawPayload();
      assertEquals("-[H", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TransactionReceipt<Integer> transactionReceipt0 = new TransactionReceipt<Integer>();
      Integer integer0 = transactionReceipt0.getStatus();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      String string0 = transactionReceipt0.getHash();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      Object object0 = transactionReceipt0.getPayload();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TransactionReceipt<Object> transactionReceipt0 = new TransactionReceipt<Object>();
      String string0 = transactionReceipt0.getRawPayload();
      assertNull(string0);
  }
}
