/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:51:24 GMT 2022
 */

package com.mxw.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.utils.Convert;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Convert_ESTest extends Convert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.fromString("MXW");
      assertEquals(Convert.Unit.MXW, convert_Unit0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.GCIN;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 2);
      BigDecimal bigDecimal1 = Convert.toCIN(bigDecimal0, convert_Unit0);
      assertEquals((short) (-27008), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1007L));
      Convert.Unit convert_Unit0 = Convert.Unit.GCIN;
      BigDecimal bigDecimal1 = Convert.toCIN(bigDecimal0, convert_Unit0);
      BigDecimal bigDecimal2 = Convert.toCIN(bigDecimal1, convert_Unit0);
      assertNotSame(bigDecimal1, bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.JCIN;
      BigDecimal bigDecimal0 = Convert.toCIN("7", convert_Unit0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.MCIN;
      BigDecimal bigDecimal0 = Convert.toCIN("-2", convert_Unit0);
      assertEquals((short)31616, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Convert.Unit convert_Unit0 = Convert.Unit.KCIN;
      BigDecimal bigDecimal1 = Convert.fromCIN(bigDecimal0, convert_Unit0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1722870790));
      Convert.Unit convert_Unit0 = Convert.Unit.GCIN;
      BigDecimal bigDecimal1 = Convert.fromCIN(bigDecimal0, convert_Unit0);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.KCIN;
      BigDecimal bigDecimal0 = Convert.fromCIN("10", convert_Unit0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      BigDecimal bigDecimal0 = Convert.fromCIN("6", convert_Unit0);
      assertEquals((short)6, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      // Undeclared exception!
      try { 
        Convert.toCIN((BigDecimal) null, convert_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.utils.Convert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.MCIN;
      // Undeclared exception!
      try { 
        Convert.toCIN("", convert_Unit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      // Undeclared exception!
      try { 
        Convert.toCIN((String) null, convert_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.GCIN;
      // Undeclared exception!
      try { 
        Convert.fromCIN((BigDecimal) null, convert_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.utils.Convert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      // Undeclared exception!
      try { 
        Convert.fromCIN((String) null, convert_Unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.MCIN;
      BigDecimal bigDecimal0 = convert_Unit0.getFactor();
      assertEquals((byte)64, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = Convert.toCIN(bigDecimal0, convert_Unit0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Convert.Unit.fromString("m8|k;#Umj[K|l!kTp=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.mxw.utils.Convert.Unit.m8|k;#Umj[K|l!kTp=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Convert.Unit.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Convert convert0 = new Convert();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = Convert.fromCIN(bigDecimal0, convert_Unit0);
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.fromString("jcin");
      // Undeclared exception!
      try { 
        Convert.fromCIN("op|'v:5Kkf0vRpHKh", convert_Unit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character  is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.fromString("jcin");
      assertEquals(Convert.Unit.JCIN, convert_Unit0);
      
      Convert.toCIN("0", convert_Unit0);
      assertEquals("Jcin", convert_Unit0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Convert.Unit convert_Unit0 = Convert.Unit.CIN;
      String string0 = convert_Unit0.toString();
      assertEquals("cin", string0);
  }
}
