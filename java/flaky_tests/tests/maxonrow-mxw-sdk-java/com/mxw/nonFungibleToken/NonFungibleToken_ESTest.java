/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 08:42:31 GMT 2022
 */

package com.mxw.nonFungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.Signer;
import com.mxw.Wallet;
import com.mxw.nonFungibleToken.NonFungibleToken;
import com.mxw.nonFungibleToken.NonFungibleTokenEnum;
import com.mxw.protocol.common.Bundle;
import com.mxw.protocol.response.nonFungibleToken.NFTokenCreate;
import com.mxw.protocol.response.nonFungibleToken.NFTokenStatusPayload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NonFungibleToken_ESTest extends NonFungibleToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NonFungibleToken nonFungibleToken0 = null;
      try {
        nonFungibleToken0 = new NonFungibleToken((String) null, (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NFTokenStatusPayload nFTokenStatusPayload0 = new NFTokenStatusPayload();
      try { 
        NonFungibleToken.signNonFungibleTokenStatusTransaction(nFTokenStatusPayload0, (Wallet) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set non fungible token status transaction require signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NonFungibleTokenEnum.NonFungibleTokenStatusActions nonFungibleTokenEnum_NonFungibleTokenStatusActions0 = NonFungibleTokenEnum.NonFungibleTokenStatusActions.APPROVE_TRANSFER_TOKEN_OWNERSHIP;
      try { 
        NonFungibleToken.createNFTokenStatusPayload("9H)x>P%$UlXNqKg", nonFungibleTokenEnum_NonFungibleTokenStatusActions0, (Wallet) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set non fungible token status transaction require signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NonFungibleTokenEnum.NonFungibleTokenStatusActions nonFungibleTokenEnum_NonFungibleTokenStatusActions0 = NonFungibleTokenEnum.NonFungibleTokenStatusActions.APPROVE_TRANSFER_TOKEN_OWNERSHIP;
      Bundle bundle0 = new Bundle();
      try { 
        NonFungibleToken.createNFTokenStatusPayload("9H)x>P%$UlXNqKg", nonFungibleTokenEnum_NonFungibleTokenStatusActions0, (Wallet) null, bundle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set non fungible token status transaction require signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      try { 
        NonFungibleToken.create((NFTokenCreate) null, (Signer) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // create non fungible token transaction require signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bundle bundle0 = new Bundle();
      try { 
        NonFungibleToken.create((NFTokenCreate) null, (Signer) null, bundle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // create non fungible token transaction require signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NonFungibleToken nonFungibleToken0 = null;
      try {
        nonFungibleToken0 = new NonFungibleToken("", (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NonFungibleToken nonFungibleToken0 = null;
      try {
        nonFungibleToken0 = new NonFungibleToken("gjzuu,R9`Sk-DD", (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // invalid signer
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      try { 
        NonFungibleToken.fromSymbol((String) null, (Signer) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.nonFungibleToken.NonFungibleToken", e);
      }
  }
}
