/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 09:04:03 GMT 2022
 */

package com.mxw.crypto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.crypto.Bech32;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Bech32_ESTest extends Bech32_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byte[] byteArray1 = Bech32.toWords(byteArray0);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Bech32.decode("s90v;hZ(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character 'Z' at position 6
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        Bech32.decode("9&DA]L1}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data part too short: 1
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Bech32.Bech32Data bech32_Bech32Data0 = Bech32.decode("com.xw.exueptions.addressformat+xception$invalifdatalength1qqqqqqqqqwdsc051qqqqqqqqqsa0f8a");
      assertNotNull(bech32_Bech32Data0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      String string0 = Bech32.encode("co.mxw.exceptions.addressformatexception$invaliddatalength1qqqqqqqqqqqqqqqqqq9sw4jv", byteArray0);
      assertEquals("co.mxw.exceptions.addressformatexception$invaliddatalength1qqqqqqqqqqqqqqqqqq9sw4jv1qqqqqqqqqqqqqqqqqqsuqqdt", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Bech32.toWords(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Bech32.fromWords(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bech32.toWords((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bech32.fromWords((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        Bech32.encode("com.mxw.exceptions.AddressFormatException$InvalidDataLength", byteArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Bech32.encode((String) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bech32.encode((Bech32.Bech32Data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Bech32.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        Bech32.fromWords(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not convert bits, invalid padding
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Bech32.fromWords(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)39;
      // Undeclared exception!
      try { 
        Bech32.fromWords(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input value '27' exceeds '5' bit size
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        Bech32.decode("qpry9x8gf2tvdw0s3jn14khce.mua76");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character '.' at position 25
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Bech32.decode("$949)x+8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing human-readable part
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        Bech32.decode("~g4{\"HSR}YXxC4m}YE8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character 'H' at position 5
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        Bech32.decode("!2Q#a^Bi2\u0002M:D'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character 'a' at position 4
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        Bech32.decode("GG#r:o`V&J:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character '' at position 0
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        Bech32.decode("' at position ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character ' ' at position 1
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        Bech32.decode("com.mxw.exceptions.addressformatexception$invaliddatalength1qqqqqqqqqqqqqt4yxul1qqqqqqqqqqqqqp2fj4t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input too long: 99
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        Bech32.decode(":$:Mg ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input too short: 6
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        Bech32.encode("com.mxw.exceptions.addressformatexception$invaliddatalength1qqqqqqqqp2r4p81qqqqqqqqdls5ck", byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Human-readable part is too long
         //
         verifyException("com.mxw.utils.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Bech32.encode("", byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Human-readable part is too short
         //
         verifyException("com.mxw.utils.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        Bech32.decode("qpzry9x8gf2vdw0s3jn!4khc16mua7l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Checksum does not validate
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Bech32.Bech32Data bech32_Bech32Data0 = Bech32.decode("=hkg3pr[hbe},1qqq9n4lsr");
      String string0 = Bech32.encode(bech32_Bech32Data0);
      assertEquals("=hkg3pr[hbe},1qqq9n4lsr", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Bech32 bech32_0 = new Bech32();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Bech32.Bech32Data bech32_Bech32Data0 = Bech32.decode("=hkg3pr[hbe},1qqq9n4lsr");
      // Undeclared exception!
      try { 
        Bech32.fromWords(bech32_Bech32Data0.data);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not convert bits, invalid padding
         //
         verifyException("com.mxw.crypto.Bech32", e);
      }
  }
}
