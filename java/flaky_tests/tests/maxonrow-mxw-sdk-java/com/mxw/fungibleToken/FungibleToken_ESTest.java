/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 04 08:56:16 GMT 2022
 */

package com.mxw.fungibleToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mxw.Signer;
import com.mxw.Wallet;
import com.mxw.fungibleToken.FungibleToken;
import com.mxw.fungibleToken.FungibleTokenEnum;
import com.mxw.protocol.common.Bundle;
import com.mxw.protocol.response.fungibleToken.FungibleTokenCreate;
import com.mxw.protocol.response.fungibleToken.FungibleTokenStatusPayload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FungibleToken_ESTest extends FungibleToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FungibleToken fungibleToken0 = null;
      try {
        fungibleToken0 = new FungibleToken("", (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bundle bundle0 = new Bundle();
      FungibleTokenStatusPayload fungibleTokenStatusPayload0 = new FungibleTokenStatusPayload();
      try { 
        FungibleToken.signFungibleTokenStatusTransaction(fungibleTokenStatusPayload0, (Wallet) null, bundle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set fungible token status transaction require signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FungibleTokenEnum.FungibleTokenStatusActions fungibleTokenEnum_FungibleTokenStatusActions0 = FungibleTokenEnum.FungibleTokenStatusActions.FREEZE;
      try { 
        FungibleToken.createFungibleTokenStatusPayload((String) null, fungibleTokenEnum_FungibleTokenStatusActions0, (Wallet) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set fungible token status transaction require signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Bundle bundle0 = new Bundle();
      FungibleTokenEnum.FungibleTokenStatusActions fungibleTokenEnum_FungibleTokenStatusActions0 = FungibleTokenEnum.FungibleTokenStatusActions.APPROVE_TRANSFER_TOKEN_OWNERSHIP;
      try { 
        FungibleToken.createFungibleTokenStatusPayload((String) null, fungibleTokenEnum_FungibleTokenStatusActions0, (Wallet) null, bundle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // set fungible token status transaction require signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      try { 
        FungibleToken.create((FungibleTokenCreate) null, (Signer) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // create fungible token transaction require signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bundle bundle0 = new Bundle();
      try { 
        FungibleToken.create((FungibleTokenCreate) null, (Signer) null, bundle0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // create fungible token transaction require signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FungibleToken fungibleToken0 = null;
      try {
        fungibleToken0 = new FungibleToken("F", (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // invalid signer
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FungibleToken fungibleToken0 = null;
      try {
        fungibleToken0 = new FungibleToken((String) null, (Signer) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      try { 
        FungibleToken.fromSymbol("", (Signer) null, (Bundle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // symbol is required
         //
         verifyException("com.mxw.fungibleToken.FungibleToken", e);
      }
  }
}
