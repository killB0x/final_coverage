/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:19:08 GMT 2022
 */

package au.com.anthonybruno.creator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.creator.FixedWidthFactory;
import au.com.anthonybruno.definition.FieldData;
import au.com.anthonybruno.record.factory.ClassRecordFactory;
import au.com.anthonybruno.record.factory.FieldsRecordFactory;
import au.com.anthonybruno.settings.FixedWidthField;
import au.com.anthonybruno.settings.FixedWidthSettings;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedWidthFactory_ESTest extends FixedWidthFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<FixedWidthField> linkedList0 = new LinkedList<FixedWidthField>();
      FixedWidthSettings fixedWidthSettings0 = new FixedWidthSettings(true, linkedList0);
      Class<Object> class0 = Object.class;
      ClassRecordFactory classRecordFactory0 = new ClassRecordFactory(class0);
      FixedWidthFactory fixedWidthFactory0 = new FixedWidthFactory(fixedWidthSettings0, classRecordFactory0);
      // Undeclared exception!
      try { 
        fixedWidthFactory0.createString(1228);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/univocity/parsers/fixed/FixedWidthFields
         //
         verifyException("au.com.anthonybruno.writer.fixedwidth.UnivocityFixedWidthWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<FixedWidthField> linkedList0 = new LinkedList<FixedWidthField>();
      FixedWidthSettings fixedWidthSettings0 = new FixedWidthSettings(false, linkedList0);
      LinkedList<FieldData> linkedList1 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList1);
      FixedWidthFactory fixedWidthFactory0 = new FixedWidthFactory(fixedWidthSettings0, fieldsRecordFactory0);
      // Undeclared exception!
      try { 
        fixedWidthFactory0.createFile((File) null, 1843);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FixedWidthSettings fixedWidthSettings0 = new FixedWidthSettings(true, (List<FixedWidthField>) null);
      Class<FixedWidthSettings> class0 = FixedWidthSettings.class;
      ClassRecordFactory classRecordFactory0 = new ClassRecordFactory(class0);
      FixedWidthFactory fixedWidthFactory0 = new FixedWidthFactory(fixedWidthSettings0, classRecordFactory0);
      File file0 = MockFile.createTempFile(" is larger than the number of fields ", " is larger than the number of fields ");
      // Undeclared exception!
      try { 
        fixedWidthFactory0.createFile(file0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/univocity/parsers/fixed/FixedWidthFields
         //
         verifyException("au.com.anthonybruno.writer.fixedwidth.UnivocityFixedWidthWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FixedWidthSettings fixedWidthSettings0 = new FixedWidthSettings(true, (List<FixedWidthField>) null);
      Class<FixedWidthSettings> class0 = FixedWidthSettings.class;
      ClassRecordFactory classRecordFactory0 = new ClassRecordFactory(class0);
      FixedWidthFactory fixedWidthFactory0 = new FixedWidthFactory(fixedWidthSettings0, classRecordFactory0);
      MockFile mockFile0 = new MockFile(" is l=rger t&an tUP number of fields ", " is l=rger t&an tUP number of fields ");
      // Undeclared exception!
      try { 
        fixedWidthFactory0.createFile(mockFile0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/user/ is l=rger t&an tUP number of fields / is l=rger t&an tUP number of fields  does not exist.
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<FieldData> linkedList0 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList0);
      FixedWidthFactory fixedWidthFactory0 = null;
      try {
        fixedWidthFactory0 = new FixedWidthFactory((FixedWidthSettings) null, fieldsRecordFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Settings cannot be null!
         //
         verifyException("au.com.anthonybruno.creator.FlatFileFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FixedWidthSettings fixedWidthSettings0 = new FixedWidthSettings(false, (List<FixedWidthField>) null);
      LinkedList<FieldData> linkedList0 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList0);
      FixedWidthFactory fixedWidthFactory0 = new FixedWidthFactory(fixedWidthSettings0, fieldsRecordFactory0);
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        fixedWidthFactory0.createFile(mockFile0, (-1760));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }
}
