/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:21:58 GMT 2022
 */

package au.com.anthonybruno.creator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.creator.CsvFactory;
import au.com.anthonybruno.definition.FieldData;
import au.com.anthonybruno.record.factory.ClassRecordFactory;
import au.com.anthonybruno.record.factory.FieldsRecordFactory;
import au.com.anthonybruno.record.factory.RecordFactory;
import au.com.anthonybruno.settings.CsvSettings;
import java.io.File;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CsvFactory_ESTest extends CsvFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(false);
      LinkedList<FieldData> linkedList0 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList0);
      CsvFactory csvFactory0 = new CsvFactory(csvSettings0, fieldsRecordFactory0);
      // Undeclared exception!
      try { 
        csvFactory0.createString(',');
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/univocity/parsers/csv/CsvWriterSettings
         //
         verifyException("au.com.anthonybruno.writer.csv.UnivocityCsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(false);
      Class<FieldData> class0 = FieldData.class;
      ClassRecordFactory classRecordFactory0 = new ClassRecordFactory(class0);
      CsvFactory csvFactory0 = new CsvFactory(csvSettings0, classRecordFactory0);
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        csvFactory0.createFile(mockFile0, ',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(true);
      LinkedList<FieldData> linkedList0 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList0);
      CsvFactory csvFactory0 = new CsvFactory(csvSettings0, fieldsRecordFactory0);
      File file0 = MockFile.createTempFile(":B&k6!R#", ":B&k6!R#");
      // Undeclared exception!
      try { 
        csvFactory0.createFile(file0, ',');
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/univocity/parsers/csv/CsvWriterSettings
         //
         verifyException("au.com.anthonybruno.writer.csv.UnivocityCsvWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(false);
      LinkedList<FieldData> linkedList0 = new LinkedList<FieldData>();
      FieldsRecordFactory fieldsRecordFactory0 = new FieldsRecordFactory(linkedList0);
      CsvFactory csvFactory0 = new CsvFactory(csvSettings0, fieldsRecordFactory0);
      MockFile mockFile0 = new MockFile("C", "C");
      // Undeclared exception!
      try { 
        csvFactory0.createFile(mockFile0, ',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /home/user/C/C does not exist.
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(true);
      CsvFactory csvFactory0 = null;
      try {
        csvFactory0 = new CsvFactory(csvSettings0, (RecordFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // recordFactory cannot be null!
         //
         verifyException("au.com.anthonybruno.creator.FlatFileFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CsvSettings csvSettings0 = new CsvSettings(false);
      Class<FieldData> class0 = FieldData.class;
      ClassRecordFactory classRecordFactory0 = new ClassRecordFactory(class0);
      CsvFactory csvFactory0 = new CsvFactory(csvSettings0, classRecordFactory0);
      // Undeclared exception!
      try { 
        csvFactory0.createFile((File) null, ',');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("au.com.anthonybruno.utils.TextFile", e);
      }
  }
}
