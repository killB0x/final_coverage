/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:29:50 GMT 2022
 */

package au.com.anthonybruno.generator.defaults;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.generator.defaults.ShortGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortGenerator_ESTest extends ShortGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)1);
      ShortGenerator shortGenerator0 = new ShortGenerator(short0, short1);
      Short short2 = shortGenerator0.generate();
      assertFalse(short2.equals((Object)short1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShortGenerator shortGenerator0 = null;
      try {
        shortGenerator0 = new ShortGenerator((Short) null, (Short) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("au.com.anthonybruno.generator.defaults.ShortGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShortGenerator shortGenerator0 = new ShortGenerator();
      Short short0 = shortGenerator0.generate();
      Short short1 = shortGenerator0.generate();
      assertFalse(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Short short0 = new Short((short)0);
      ShortGenerator shortGenerator0 = new ShortGenerator(short0, short0);
      // Undeclared exception!
      try { 
        shortGenerator0.generate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }
}
