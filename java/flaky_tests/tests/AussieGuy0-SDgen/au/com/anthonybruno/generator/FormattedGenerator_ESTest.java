/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:28:47 GMT 2022
 */

package au.com.anthonybruno.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.generator.FormattedGenerator;
import au.com.anthonybruno.generator.OptionGenerator;
import au.com.anthonybruno.generator.format.Formatter;
import au.com.anthonybruno.generator.format.ToStringFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormattedGenerator_ESTest extends FormattedGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      ToStringFormatter<Object> toStringFormatter0 = new ToStringFormatter<Object>();
      FormattedGenerator<Object> formattedGenerator0 = new FormattedGenerator<Object>(optionGenerator0, toStringFormatter0);
      Formatter<String> formatter0 = (Formatter<String>) mock(Formatter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(formatter0).format(anyString());
      FormattedGenerator<String> formattedGenerator1 = new FormattedGenerator<String>(formattedGenerator0, formatter0);
      String string0 = formattedGenerator1.generate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      ToStringFormatter<Object> toStringFormatter0 = new ToStringFormatter<Object>();
      FormattedGenerator<Object> formattedGenerator0 = new FormattedGenerator<Object>(optionGenerator0, toStringFormatter0);
      Formatter<String> formatter0 = (Formatter<String>) mock(Formatter.class, new ViolatedAssumptionAnswer());
      FormattedGenerator<String> formattedGenerator1 = new FormattedGenerator<String>(formattedGenerator0, formatter0);
      // Undeclared exception!
      try { 
        formattedGenerator1.generate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      ToStringFormatter<Object> toStringFormatter0 = new ToStringFormatter<Object>();
      FormattedGenerator<Object> formattedGenerator0 = new FormattedGenerator<Object>(optionGenerator0, toStringFormatter0);
      // Undeclared exception!
      try { 
        formattedGenerator0.generate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }
}
