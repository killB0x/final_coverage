/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:30:14 GMT 2022
 */

package au.com.anthonybruno.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.generator.OptionGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionGenerator_ESTest extends OptionGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      Object object0 = optionGenerator0.generate();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      Object object1 = optionGenerator0.generate();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OptionGenerator<Integer> optionGenerator0 = null;
      try {
        optionGenerator0 = new OptionGenerator<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("au.com.anthonybruno.generator.OptionGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      OptionGenerator<Object> optionGenerator0 = new OptionGenerator<Object>(objectArray0);
      // Undeclared exception!
      try { 
        optionGenerator0.generate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }
}
