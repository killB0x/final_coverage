/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 05:33:21 GMT 2022
 */

package au.com.anthonybruno.record;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import au.com.anthonybruno.record.DefaultRecordSupplier;
import au.com.anthonybruno.record.Record;
import au.com.anthonybruno.utils.Lazy;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultRecordSupplier_ESTest extends DefaultRecordSupplier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DefaultRecordSupplier defaultRecordSupplier0 = new DefaultRecordSupplier(linkedList0, (Supplier<Record>) null);
      // Undeclared exception!
      try { 
        defaultRecordSupplier0.supplyRecords(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Supplier<Record> supplier0 = (Supplier<Record>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Lazy<Record> lazy0 = new Lazy<Record>(supplier0);
      DefaultRecordSupplier defaultRecordSupplier0 = new DefaultRecordSupplier(linkedList0, lazy0);
      // Undeclared exception!
      try { 
        defaultRecordSupplier0.supplyRecords((-1396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1396
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Supplier<Record> supplier0 = (Supplier<Record>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Lazy<Record> lazy0 = new Lazy<Record>(supplier0);
      DefaultRecordSupplier defaultRecordSupplier0 = new DefaultRecordSupplier(linkedList0, lazy0);
      Stream<Record> stream0 = defaultRecordSupplier0.supplyRecords(0);
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DefaultRecordSupplier defaultRecordSupplier0 = new DefaultRecordSupplier(linkedList0, (Supplier<Record>) null);
      List<String> list0 = defaultRecordSupplier0.getFields();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultRecordSupplier defaultRecordSupplier0 = null;
      try {
        defaultRecordSupplier0 = new DefaultRecordSupplier((List<String>) null, (Supplier<Record>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
}
