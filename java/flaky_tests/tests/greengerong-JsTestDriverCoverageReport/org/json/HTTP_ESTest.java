/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:55:05 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.json.HTTP;
import org.json.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HTTP_ESTest extends HTTP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        HTTP.toString((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.HTTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      try { 
        HTTP.toJSONObject("] is not a JSONObject.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected ':' and instead saw '\u0000' at 24 [character 25 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        HTTP.toJSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSONObject jSONObject0 = HTTP.toJSONObject("java.lang.String@0000000003");
      jSONObject0.accumulate("java.lang.String@0000000003", "7RwX4JcFYpYJlP&G.hd");
      String string0 = HTTP.toString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        HTTP.toString(jSONObject0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not enough material for an HTTP header.
         //
         verifyException("org.json.HTTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSONObject jSONObject0 = HTTP.toJSONObject("");
      jSONObject0.accumulate("Status-Code", "Status-Code");
      assertEquals(4, jSONObject0.length());
      
      String string0 = HTTP.toString(jSONObject0);
      assertEquals(" \"\" \r\n\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSONObject jSONObject0 = HTTP.toJSONObject("] is not a :SONObject.");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JSONObject jSONObject0 = HTTP.toJSONObject("HTTPJAVA.LANG.STRING@0000000020");
      String string0 = HTTP.toString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HTTP hTTP0 = new HTTP();
  }
}
