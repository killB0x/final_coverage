/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:49:55 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.json.CDL;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CDL_ESTest extends CDL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((-0.4268082860990083));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[0] = (byte)3;
      byteArray0[4] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 448);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONArray jSONArray2 = CDL.toJSONArray(jSONArray1, jSONTokener0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNull(jSONArray2);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jSONTokener0.end());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)47, (byte)7, (byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)47, (byte)7, (byte)0}, byteArray0);
      
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing close quote '\"'. at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONTokener jSONTokener0 = new JSONTokener("Dxfn");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray1 = jSONArray0.put((Map) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      JSONArray jSONArray2 = CDL.rowToJSONArray(jSONTokener0);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray2.length());
      
      String string0 = CDL.toString(jSONArray2, jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(string0);
      assertEquals("\n", string0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertEquals(1, jSONArray0.length());
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(",]tKe~n]u8");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, ",]tKe~n]u8");
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      String string0 = CDL.toString(jSONArray1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertFalse(jSONArray0.equals((Object)jSONArray1));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(110, 1L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(111, jSONArray0.length());
      assertEquals(111, jSONArray1.length());
      
      String string0 = jSONArray0.join("java.lang.Boolean@0000000002\n");
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      assertEquals(111, jSONArray0.length());
      
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      assertNotNull(jSONTokener0);
      assertEquals(111, jSONArray0.length());
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray2 = CDL.toJSONArray(jSONTokener0);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(111, jSONArray0.length());
      assertTrue(jSONTokener0.end());
      assertEquals(110, jSONArray2.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("i");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      
      // Undeclared exception!
      try { 
        CDL.toString(jSONArray0, (JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toString((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("' (");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      try { 
        CDL.toJSONArray(jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing close quote '''. at 4 [character 5 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toJSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2438), (byte)27);
      assertNotNull(byteArrayInputStream0);
      assertEquals(27, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(27, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -2438 out of bounds for byte[1]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(10L);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      JSONTokener jSONTokener0 = new JSONTokener("c-O}ts$v");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      try { 
        CDL.toJSONArray(jSONArray1, jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(200, 200);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(201, jSONArray0.length());
      assertEquals(201, jSONArray1.length());
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONArray0, (JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((-0.4268082860990083));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3168), (byte)108);
      assertNotNull(byteArrayInputStream0);
      assertEquals(108, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(108, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONArray0, jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -3168 out of bounds for byte[8]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      // Undeclared exception!
      try { 
        CDL.toJSONArray(jSONArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(286, true);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(287, jSONArray0.length());
      assertEquals(287, jSONArray1.length());
      
      String string0 = CDL.rowToString(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      assertEquals(287, jSONArray0.length());
      
      // Undeclared exception!
      CDL.toJSONArray(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.toJSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.rowToString((JSONArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.CDL", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JSONTokener jSONTokener0 = new JSONTokener(pipedInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(jSONTokener0.end());
      
      try { 
        CDL.rowToJSONObject(jSONArray0, jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(1417, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      
      String string0 = CDL.rowToString(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      assertNotNull(jSONTokener0);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      assertFalse(jSONTokener0.end());
      
      // Undeclared exception!
      CDL.rowToJSONObject(jSONArray0, jSONTokener0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      // Undeclared exception!
      try { 
        CDL.rowToJSONObject(jSONArray0, (JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1497), 3094);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1498, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(1498, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        CDL.rowToJSONObject(jSONArray0, jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -1497 out of bounds for byte[1]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put(1417, 0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      
      String string0 = CDL.rowToString(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(string0);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      assertNotNull(jSONTokener0);
      assertEquals(1418, jSONArray0.length());
      assertEquals(1418, jSONArray1.length());
      assertFalse(jSONTokener0.end());
      
      // Undeclared exception!
      CDL.rowToJSONArray(jSONTokener0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        CDL.rowToJSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2161), (byte)108);
      assertNotNull(byteArrayInputStream0);
      assertEquals(108, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(108, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // arraycopy: source index -2161 out of bounds for byte[0]
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, jSONArray1.length());
      
      try { 
        CDL.toString(jSONArray0, jSONArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONTokener jSONTokener0 = new JSONTokener("_H}b`N=lM\"m[slv47F");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener0);
      assertNull(jSONArray1);
      assertEquals(0, jSONArray0.length());
      assertFalse(jSONTokener0.end());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("i");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.toJSONArray((JSONArray) null, jSONTokener0);
      assertNull(jSONArray0);
      assertFalse(jSONTokener0.end());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("i");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      
      JSONTokener jSONTokener1 = new JSONTokener("1y@k)-~/");
      assertNotNull(jSONTokener1);
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertFalse(jSONTokener1.end());
      
      JSONObject jSONObject0 = CDL.rowToJSONObject(jSONArray0, jSONTokener1);
      assertNotSame(jSONTokener0, jSONTokener1);
      assertNotSame(jSONTokener1, jSONTokener0);
      assertNotNull(jSONObject0);
      assertFalse(jSONTokener0.equals((Object)jSONTokener1));
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      assertTrue(jSONTokener1.end());
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("veZ%Aa");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      
      JSONObject jSONObject0 = CDL.rowToJSONObject((JSONArray) null, jSONTokener0);
      assertNull(jSONObject0);
      assertTrue(jSONTokener0.end());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,java.lang.Double@0000000010,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,org.json.JSONObject$Null@0000000009,java.lang.Double@0000000011,java.lang.Boolean@0000000012,java.lang.Long@0000000013\n");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertFalse(jSONTokener0.end());
      assertEquals(18, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\"~#H\"HgmF#wyBW\"Vb_");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad character 'H' (72). at 6 [character 7 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("\n");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNull(jSONArray0);
      assertFalse(jSONTokener0.end());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = CDL.toJSONArray(" Ln0:W9VEk*c(2F");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)44, (byte)78, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      assertNotNull(jSONTokener0);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(jSONTokener0.end());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)44, (byte)78, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)44, (byte)78, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = CDL.toString(jSONArray0, jSONArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jSONTokener0.end());
      assertEquals(2, jSONArray0.length());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)44, (byte)78, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      String string0 = CDL.toString(jSONArray0, jSONArray0);
      assertNull(string0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = CDL.toString((JSONArray) null, (JSONArray) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = hashMap0.put(fileSystemHandling0, jSONArray0);
      assertNull(object0);
      assertEquals(0, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, jSONArray1.length());
      
      try { 
        CDL.toString(jSONArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, jSONArray1.length());
      
      String string0 = CDL.toString(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNull(string0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      String string0 = CDL.toString(jSONArray0);
      assertNull(string0);
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(").");
      assertNotNull(jSONTokener0);
      assertFalse(jSONTokener0.end());
      
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      
      JSONTokener jSONTokener1 = new JSONTokener(").");
      assertNotNull(jSONTokener1);
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertFalse(jSONTokener1.end());
      
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, jSONTokener1);
      assertNotSame(jSONTokener0, jSONTokener1);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONTokener1, jSONTokener0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertFalse(jSONTokener0.equals((Object)jSONTokener1));
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONTokener0.end());
      assertEquals(1, jSONArray0.length());
      assertTrue(jSONTokener1.end());
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(0, jSONArray0.length());
      
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray0.length());
      assertEquals(1, jSONArray1.length());
      
      String string0 = CDL.rowToString(jSONArray0);
      assertSame(jSONArray0, jSONArray1);
      assertNotNull(string0);
      assertEquals("\n", string0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3294, (long) 3294);
      String string0 = CDL.rowToString(jSONArray0);
      // Undeclared exception!
      CDL.toJSONArray(jSONArray0, string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNotNull(jSONArray0);
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1L);
      try { 
        CDL.toJSONArray(jSONArray1, "java.lang.Long@0000000002\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JSONArray[0] not a string.
         //
         verifyException("org.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      try { 
        CDL.rowToJSONArray(jSONTokener0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing close quote '\"'. at 2 [character 3 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",]tKe~n]u8");
      JSONTokener jSONTokener0 = new JSONTokener(stringReader0);
      CDL.rowToJSONArray(jSONTokener0);
      JSONArray jSONArray0 = CDL.toJSONArray(jSONTokener0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONTokener jSONTokener0 = new JSONTokener(byteArrayInputStream0);
      JSONArray jSONArray0 = CDL.rowToJSONArray(jSONTokener0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      try { 
        CDL.toJSONArray("Expected a ',' or '}'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad character '}' (125). at 20 [character 21 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CDL cDL0 = new CDL();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = CDL.rowToString(jSONArray0);
      JSONArray jSONArray1 = CDL.toJSONArray(jSONArray0, string0);
      assertNull(jSONArray1);
  }
}
