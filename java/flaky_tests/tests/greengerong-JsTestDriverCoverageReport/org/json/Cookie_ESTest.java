/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 23:52:45 GMT 2022
 */

package org.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.json.Cookie;
import org.json.JSONObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cookie_ESTest extends Cookie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Cookie.unescape("%3bexpires%3d");
      assertEquals(";expires=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Cookie.unescape("[yOKpyS%_");
      assertEquals("[yOKpyS%_", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Cookie.unescape("*0m %G-\"S?ZS4GD%");
      assertEquals("*0m %G-\"S?ZS4GD%", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Cookie.escape("Bad value from toJSONString: ");
      assertEquals("Bad value from toJSONString:", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Cookie.unescape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Cookie.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cookie.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cookie.toString((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cookie.toJSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Cookie.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.json.Cookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Cookie.unescape("%dlprUWLfnn{d}a");
      assertEquals("%dlprUWLfnn{d}a", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Cookie.unescape("o@S%D3ss+n|");
      assertEquals("o@S\u00D3ss n|", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = Cookie.toJSONObject("Cb\"E5~0Ol~V=5");
      jSONObject0.put("path", 0L);
      try { 
        Cookie.toString(jSONObject0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // JSONObject[java.io.StringWriter@0000000010] not a string.
         //
         verifyException("org.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        Cookie.toJSONObject("rr=JC2$mz%>z;O");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing '=' in cookie parameter. at 16 [character 17 line 1]
         //
         verifyException("org.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = Cookie.toJSONObject("Cb\"E5~0Ol~V=5");
      String string0 = Cookie.toString(jSONObject0);
      assertEquals("Cb\"E5~0Ol~V=5", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Cookie.escape("e%qj[");
      assertEquals("e%25qj[", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Cookie.escape("(C1.~4CB>+_");
      assertEquals("(C1.~4CB>%2b_", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = Cookie.escape(";expires=");
      assertEquals("%3bexpires%3d", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cookie cookie0 = new Cookie();
  }
}
