/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:04:25 GMT 2022
 */

package io.resourcepool.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.resourcepool.generator.Query;
import io.resourcepool.model.Language;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Query_ESTest extends Query_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Query.Builder query_Builder0 = Query.builder();
      // Undeclared exception!
      try { 
        query_Builder0.count(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count must be greater than zero
         //
         verifyException("io.resourcepool.generator.Query$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Query query0 = new Query((-145), (Language[]) null);
      assertEquals(1, query0.count);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Language[] languageArray0 = new Language[3];
      Query query0 = new Query(0, languageArray0);
      assertEquals(1, query0.count);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Query.Builder query_Builder0 = Query.builder();
      // Undeclared exception!
      try { 
        query_Builder0.count((-3418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count must be greater than zero
         //
         verifyException("io.resourcepool.generator.Query$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Query.Builder query_Builder0 = Query.builder();
      Query.Builder query_Builder1 = query_Builder0.count(1);
      assertSame(query_Builder1, query_Builder0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Language[] languageArray0 = new Language[5];
      Query query0 = new Query(1, languageArray0);
      assertEquals(1, query0.count);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Language[] languageArray0 = new Language[0];
      Query query0 = new Query(2, languageArray0);
      Query.Builder query_Builder0 = Query.builder();
      query_Builder0.languages(query0.languages);
      assertEquals(2, query0.count);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Query.Builder query_Builder0 = Query.builder();
      Query query0 = query_Builder0.build();
      assertEquals(1, query0.count);
  }
}
