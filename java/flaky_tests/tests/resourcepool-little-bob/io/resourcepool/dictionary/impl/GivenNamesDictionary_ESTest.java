/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 18 00:02:21 GMT 2022
 */

package io.resourcepool.dictionary.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.resourcepool.dictionary.impl.GivenNamesDictionary;
import io.resourcepool.generator.Query;
import io.resourcepool.model.GivenName;
import io.resourcepool.model.Language;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GivenNamesDictionary_ESTest extends GivenNamesDictionary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      assertEquals(4305, givenNamesDictionary0.size());
      
      GivenName givenName0 = givenNamesDictionary0.pick();
      assertNotNull(givenName0);
      
      givenNamesDictionary0.pick((-390));
      givenNamesDictionary0.pick((-2340));
      Language language0 = Language.ENGLISH;
      givenNamesDictionary0.pick(language0);
      Language[] languageArray0 = new Language[8];
      languageArray0[0] = language0;
      languageArray0[1] = language0;
      Language language1 = Language.ENGLISH;
      languageArray0[3] = language1;
      Language language2 = Language.FRENCH;
      languageArray0[4] = language2;
      languageArray0[5] = language0;
      languageArray0[6] = language0;
      languageArray0[7] = language0;
      Query query0 = new Query((-390), languageArray0);
      Query.builder();
      Query.builder();
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(languageArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      GivenNamesDictionary givenNamesDictionary1 = new GivenNamesDictionary();
      GivenNamesDictionary givenNamesDictionary2 = new GivenNamesDictionary();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Query query0 = new Query(4860, (Language[]) null);
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(query0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pick more than 4305 elements in GivenNames Dictionary
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Language[] languageArray0 = new Language[9];
      Language language0 = Language.ENGLISH;
      languageArray0[0] = language0;
      Language language1 = Language.FRENCH;
      languageArray0[1] = language1;
      Language language2 = Language.FRENCH;
      languageArray0[2] = language2;
      Language language3 = Language.ENGLISH;
      languageArray0[3] = language3;
      Language language4 = Language.FRENCH;
      languageArray0[4] = language4;
      Language language5 = Language.FRENCH;
      languageArray0[5] = language5;
      Language language6 = Language.FRENCH;
      languageArray0[6] = language6;
      givenNamesDictionary0.pick(39);
      Language language7 = Language.ENGLISH;
      languageArray0[7] = language7;
      Query query0 = new Query(19525, languageArray0);
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(query0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pick more than 4305 elements in GivenNames Dictionary
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      // Undeclared exception!
      try { 
        givenNamesDictionary0.size((Language[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Language[] languageArray0 = new Language[1];
      Language language0 = Language.ENGLISH;
      languageArray0[0] = language0;
      Query query0 = new Query(3908, languageArray0);
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(query0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3908
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      givenNamesDictionary0.pick((-1));
      givenNamesDictionary0.pick(1489);
      // Undeclared exception!
      givenNamesDictionary0.pick(1489);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(4743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pick more than 4305 elements in GivenNames Dictionary
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      int int0 = (-2882);
      givenNamesDictionary0.pick((-2882));
      Language[] languageArray0 = new Language[3];
      Language language0 = Language.ENGLISH;
      languageArray0[0] = language0;
      Language language1 = Language.FRENCH;
      languageArray0[1] = language1;
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick(4860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pick more than 4305 elements in GivenNames Dictionary
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Language[] languageArray0 = new Language[1];
      Language language0 = Language.ENGLISH;
      languageArray0[0] = language0;
      Query query0 = new Query(0, languageArray0);
      Query.builder();
      Query.builder();
      givenNamesDictionary0.pick(0);
      Query.builder();
      Query.builder();
      Query.builder();
      List<GivenName> list0 = givenNamesDictionary0.pick(query0);
      assertEquals(1, list0.size());
      
      Query.builder();
      Language language1 = Language.FRENCH;
      givenNamesDictionary0.pick(language1);
      int int0 = givenNamesDictionary0.size(query0.languages);
      assertEquals(2000, int0);
      
      givenNamesDictionary0.getGivenNames();
      givenNamesDictionary0.pick(language0);
      assertEquals(4305, givenNamesDictionary0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Language language0 = Language.FRENCH;
      givenNamesDictionary0.pick(language0);
      givenNamesDictionary0.pick(language0);
      Language language1 = Language.FRENCH;
      givenNamesDictionary0.pick(language1);
      givenNamesDictionary0.pick(language0);
      Language[] languageArray0 = new Language[0];
      int int0 = givenNamesDictionary0.size(languageArray0);
      assertEquals(4305, givenNamesDictionary0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Map<Language, List<GivenName>> map0 = givenNamesDictionary0.getGivenNames();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      givenNamesDictionary0.pick();
      givenNamesDictionary0.size();
      Language[] languageArray0 = new Language[5];
      Language language0 = Language.FRENCH;
      languageArray0[0] = language0;
      Language language1 = Language.ENGLISH;
      languageArray0[1] = language1;
      Language language2 = Language.FRENCH;
      Language language3 = Language.FRENCH;
      givenNamesDictionary0.pick(language3);
      languageArray0[2] = language2;
      Language language4 = Language.FRENCH;
      givenNamesDictionary0.pick(language4);
      givenNamesDictionary0.pick(language1);
      Language language5 = Language.ENGLISH;
      languageArray0[3] = language5;
      Language language6 = Language.FRENCH;
      languageArray0[4] = language6;
      givenNamesDictionary0.size(languageArray0);
      givenNamesDictionary0.pick();
      givenNamesDictionary0.size(languageArray0);
      givenNamesDictionary0.getGivenNames();
      givenNamesDictionary0.pick(language3);
      givenNamesDictionary0.pick(4305);
      Query query0 = new Query(0, languageArray0);
      // Undeclared exception!
      givenNamesDictionary0.pick(query0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      // Undeclared exception!
      try { 
        givenNamesDictionary0.pick((Query) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.resourcepool.dictionary.impl.GivenNamesDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      givenNamesDictionary0.pick(1696);
      givenNamesDictionary0.pick((-913));
      Language[] languageArray0 = new Language[1];
      Language language0 = Language.ENGLISH;
      languageArray0[0] = language0;
      Query query0 = new Query(1696, languageArray0);
      // Undeclared exception!
      givenNamesDictionary0.pick(query0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      List<GivenName> list0 = givenNamesDictionary0.pick(0);
      assertEquals(1, list0.size());
      
      Language language0 = Language.ENGLISH;
      givenNamesDictionary0.pick(language0);
      givenNamesDictionary0.pick();
      assertEquals(4305, givenNamesDictionary0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      List<GivenName> list0 = givenNamesDictionary0.pick(652);
      assertEquals(652, list0.size());
      assertEquals(4305, givenNamesDictionary0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      Language[] languageArray0 = new Language[7];
      Language language0 = Language.FRENCH;
      languageArray0[0] = language0;
      Language language1 = Language.FRENCH;
      languageArray0[1] = language1;
      Language language2 = Language.FRENCH;
      languageArray0[2] = language2;
      Language language3 = Language.FRENCH;
      languageArray0[3] = language3;
      Language language4 = Language.FRENCH;
      languageArray0[4] = language4;
      Language language5 = Language.ENGLISH;
      languageArray0[5] = language5;
      Language language6 = Language.FRENCH;
      languageArray0[6] = language6;
      Query query0 = new Query(0, languageArray0);
      // Undeclared exception!
      givenNamesDictionary0.pick(query0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GivenNamesDictionary givenNamesDictionary0 = new GivenNamesDictionary();
      int int0 = givenNamesDictionary0.size();
      assertEquals(4305, int0);
  }
}
