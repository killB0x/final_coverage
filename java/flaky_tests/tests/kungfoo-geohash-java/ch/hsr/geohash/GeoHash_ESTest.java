/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:32:14 GMT 2022
 */

package ch.hsr.geohash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.hsr.geohash.BoundingBox;
import ch.hsr.geohash.GeoHash;
import ch.hsr.geohash.WGS84Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeoHash_ESTest extends GeoHash_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-623), 17);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-87679455245369344L), geoHash0.longValue());
      assertEquals(130449L, geoHash0.ord());
      assertEquals(17, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      int int0 = geoHash0.compareTo(geoHash0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, int0);
      assertEquals((-87679455245369344L), geoHash0.longValue());
      assertEquals(130449L, geoHash0.ord());
      assertEquals(17, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-1749L), 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-1749L), geoHash0.longValue());
      assertEquals((-1749L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      geoHash0.hashCode();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-1749L), geoHash0.longValue());
      assertEquals((-1749L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withCharacterPrecision(2.0, 2.0, (-1291));
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash1.ord());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertNotNull(geoHash1);
      
      geoHash1.bits = 125L;
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(125L, geoHash1.ord());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(125L, geoHash1.longValue());
      
      boolean boolean0 = geoHash1.equals(geoHash0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertFalse(boolean0);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(125L, geoHash1.ord());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(125L, geoHash1.longValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = GeoHash.fromLongValue(64, 12);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash1.ord());
      assertEquals(12, geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertNotNull(geoHash1);
      
      boolean boolean0 = geoHash1.equals(geoHash0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertFalse(boolean0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals(12, geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 64;
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertArrayEquals(new long[] {0L, 64L, 0L, 0L, 0L}, longArray0);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, longArray0.length);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals((-128), geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      String string0 = geoHash1.toBinaryString();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertArrayEquals(new long[] {0L, 64L, 0L, 0L, 0L}, longArray0);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, longArray0.length);
      assertEquals("", string0);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals((-128), geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("e");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getSouthernNeighbour();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(7L, geoHash1.ord());
      assertEquals(5, geoHash1.significantBits());
      assertEquals(4035225266123964416L, geoHash1.longValue());
      assertNotNull(geoHash1);
      
      geoHash1.significantBits = (byte) (-9);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(7881299347898368L, geoHash1.ord());
      assertEquals((-9), geoHash1.significantBits());
      assertEquals(4035225266123964416L, geoHash1.longValue());
      
      long[] longArray0 = geoHash1.getRightAlignedLongitudeBits();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertArrayEquals(new long[] {0L, (-3L)}, longArray0);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(2, longArray0.length);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(7881299347898368L, geoHash1.ord());
      assertEquals((-9), geoHash1.significantBits());
      assertEquals(4035225266123964416L, geoHash1.longValue());
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = (-9223372036854775808L);
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray1);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-9223372036854775808L), 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals(0, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = GeoHash.fromOrd(12, 64);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash1, geoHash0);
      assertEquals(12L, geoHash1.longValue());
      assertEquals(12L, geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
      
      boolean boolean0 = geoHash0.within(geoHash1);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertFalse(boolean0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(12L, geoHash1.longValue());
      assertEquals(12L, geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      geoHash0.significantBits = (byte) (-87);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals((-87), geoHash0.significantBits());
      
      // Undeclared exception!
      try { 
        geoHash0.toBase32();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot convert a geohash to base32 if the precision is not a multiple of 5.
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(84L, (-2129));
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = 84L;
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertArrayEquals(new long[] {0L, 84L, 0L}, longArray0);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(3, longArray0.length);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals((-88), geoHash1.significantBits());
      assertNotNull(geoHash1);
      
      // Undeclared exception!
      try { 
        geoHash1.getCharacterPrecision();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // precision of GeoHash is not divisble by 5: 0000000000000000000000000000000000000000000000000000000000000000 -> (-90.0,-180.0) -> (-90.0,-180.0), bits: -88
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromGeohashString("0?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character character '?' in geohash '0?'!
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromGeohashString("{[JnGUXu6axu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character character '{' in geohash '{[JnGUXu6axu'!
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromBinaryString("j?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // j? is not a valid geohash as a binary string
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withBitPrecision(12, 180.0, 29);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(494237045L, geoHash0.ord());
      assertEquals(29, geoHash0.significantBits());
      assertEquals((-1464888515736109056L), geoHash0.longValue());
      assertNotNull(geoHash0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withBitPrecision(90.0, 1169.1249308798958, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have lat/lon values out of (-90,90)/(-180/180)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withCharacterPrecision(64.16015625, (-180.0), 12);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(5856104482651242496L, geoHash0.longValue());
      assertEquals(60, geoHash0.significantBits());
      assertEquals(366006530165702656L, geoHash0.ord());
      assertNotNull(geoHash0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withBitPrecision(2.0, 0.0, 0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withBitPrecision(16, (-125.612142), 12);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(5273715163650850816L, geoHash0.longValue());
      assertEquals(12, geoHash0.significantBits());
      assertEquals(1171L, geoHash0.ord());
      assertNotNull(geoHash0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      String string0 = geoHash0.toBinaryString();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals("", string0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      geoHash0.addOnBitToEnd();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(1L, geoHash0.longValue());
      
      GeoHash geoHash1 = geoHash0.getEasternNeighbour();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(1L, geoHash0.longValue());
      assertEquals(1, geoHash1.significantBits());
      assertEquals((-9223372036854775808L), geoHash1.longValue());
      assertEquals(1L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      long long0 = GeoHash.stepsBetween(geoHash1, geoHash0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-1L), long0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(1L, geoHash0.longValue());
      assertEquals(1, geoHash1.significantBits());
      assertEquals((-9223372036854775808L), geoHash1.longValue());
      assertEquals(1L, geoHash1.ord());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withCharacterPrecision((-90.0), 180.0, 0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 64;
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertArrayEquals(new long[] {0L, 64L, 0L, 0L, 0L}, longArray0);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, longArray0.length);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals((-128), geoHash1.significantBits());
      assertNotNull(geoHash1);
      
      int int0 = geoHash1.significantBits();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertArrayEquals(new long[] {0L, 64L, 0L, 0L, 0L}, longArray0);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, longArray0.length);
      assertEquals((-128), int0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals((-128), geoHash1.significantBits());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-4415L), 0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-4415L);
      longArray0[1] = (long) 12;
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray1);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertArrayEquals(new long[] {288230376151711744L, 12L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(12, geoHash1.significantBits());
      assertEquals(1349L, geoHash1.ord());
      assertEquals(6075355897322799104L, geoHash1.longValue());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withCharacterPrecision(63.999481201171875, 63.999481201171875, 0);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 64;
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-2073432486);
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray1);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertArrayEquals(new long[] {0L, 64L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-8905324717833977856L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(8, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(64, geoHash1.significantBits());
      assertEquals((-6148914691236517206L), geoHash1.longValue());
      assertEquals((-6148914691236517206L), geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.prev();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(0L, 64);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.prev();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-1L), geoHash1.ord());
      assertEquals((-1L), geoHash1.longValue());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(12, 64);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12L, geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals(12L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.prev();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(12L, geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals(12L, geoHash0.ord());
      assertEquals(11L, geoHash1.longValue());
      assertEquals(64, geoHash1.significantBits());
      assertEquals(11L, geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(29L, 35);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(35, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.prev();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(35, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals((-536870912L), geoHash1.longValue());
      assertEquals(35, geoHash1.significantBits());
      assertEquals(34359738367L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      long long0 = GeoHash.stepsBetween(geoHash0, geoHash1);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(34359738367L, long0);
      assertEquals(35, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals((-536870912L), geoHash1.longValue());
      assertEquals(35, geoHash1.significantBits());
      assertEquals(34359738367L, geoHash1.ord());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long long0 = geoHash0.ord();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, long0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withBitPrecision(64, 6, 64);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-3358242550612741787L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-3358242550612741787L), geoHash0.ord());
      assertNotNull(geoHash0);
      
      long long0 = geoHash0.ord();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-3358242550612741787L), long0);
      assertEquals((-3358242550612741787L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-3358242550612741787L), geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(0L, 32);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(32, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next(12);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(32, geoHash0.significantBits());
      assertEquals(32, geoHash1.significantBits());
      assertEquals(12L, geoHash1.ord());
      assertEquals(51539607552L, geoHash1.longValue());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-9223372036854775808L), 64);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next(64);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertEquals((-9223372036854775744L), geoHash1.longValue());
      assertEquals((-9223372036854775744L), geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      geoHash1.addOnBitToEnd();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(1L, geoHash1.longValue());
      assertEquals(1, geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      
      // Undeclared exception!
      try { 
        GeoHash.stepsBetween(geoHash1, geoHash0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // It is only valid to compare the number of steps between two hashes if they have the same number of significant bits
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(64, 12);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, geoHash0.significantBits());
      assertEquals(64L, geoHash0.ord());
      assertEquals(288230376151711744L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(12, geoHash0.significantBits());
      assertEquals(64L, geoHash0.ord());
      assertEquals(288230376151711744L, geoHash0.longValue());
      assertEquals(292733975779082240L, geoHash1.longValue());
      assertEquals(12, geoHash1.significantBits());
      assertEquals(65L, geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-9223372036854775808L), 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.next();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775807L), geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
      assertEquals((-9223372036854775807L), geoHash1.longValue());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(12, 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12L, geoHash0.ord());
      assertEquals(12L, geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long long0 = geoHash0.longValue();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12L, long0);
      assertEquals(12L, geoHash0.ord());
      assertEquals(12L, geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-693L), 64);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-693L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-693L), geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getWesternNeighbour();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-693L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-693L), geoHash0.longValue());
      assertEquals((-695L), geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
      assertEquals((-695L), geoHash1.longValue());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("e");
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getWesternNeighbour();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(13L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(6917529027641081856L, geoHash1.longValue());
      assertEquals(5, geoHash1.significantBits());
      assertEquals(12L, geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-1520L), 64);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-1520L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-1520L), geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getSouthernNeighbour();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-1520L), geoHash0.ord());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-1520L), geoHash0.longValue());
      assertEquals((-1531L), geoHash1.ord());
      assertEquals((-1531L), geoHash1.longValue());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-1530L), (-4703));
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long[] longArray0 = geoHash0.getRightAlignedLatitudeBits();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-273L), 37);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(137438953199L, geoHash0.ord());
      assertEquals(37, geoHash0.significantBits());
      assertEquals((-36641439744L), geoHash0.longValue());
      assertNotNull(geoHash0);
      
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(137438953199L, geoHash0.ord());
      assertEquals(37, geoHash0.significantBits());
      assertEquals((-36641439744L), geoHash0.longValue());
      assertEquals(179.98592376708984, wGS84Point0.getLongitude(), 0.01);
      assertEquals(89.9996566772461, wGS84Point0.getLatitude(), 0.01);
      assertNotNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-9223372036854775808L), 12);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(12, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(12, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals((-177.1875), wGS84Point0.getLongitude(), 0.01);
      assertEquals((-88.59375), wGS84Point0.getLatitude(), 0.01);
      assertNotNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      int[] intArray0 = geoHash0.getNumberOfLatLonBits();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-693L), 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-693L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-693L), geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getNorthernNeighbour();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-693L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-693L), geoHash0.ord());
      assertEquals((-690L), geoHash1.ord());
      assertEquals((-690L), geoHash1.longValue());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getNorthernNeighbour();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0, geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("j");
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(5, geoHash0.significantBits());
      assertEquals((-8646911284551352320L), geoHash0.longValue());
      assertEquals(17L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getNorthernNeighbour();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(5, geoHash0.significantBits());
      assertEquals((-8646911284551352320L), geoHash0.longValue());
      assertEquals(17L, geoHash0.ord());
      assertEquals((-7493989779944505344L), geoHash1.longValue());
      assertEquals(19L, geoHash1.ord());
      assertEquals(5, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-9223372036854775808L), 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getEasternNeighbour();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertTrue(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertEquals((-9223372036854775806L), geoHash1.longValue());
      assertEquals((-9223372036854775806L), geoHash1.ord());
      assertEquals(64, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(29L, 35);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(35, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getEasternNeighbour();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(35, geoHash0.significantBits());
      assertEquals(1L, geoHash1.ord());
      assertEquals(536870912L, geoHash1.longValue());
      assertEquals(35, geoHash1.significantBits());
      assertNotNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      int int0 = geoHash0.getCharacterPrecision();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0, int0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      geoHash0.significantBits = (byte) (-35);
      assertEquals((-35), geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      
      int int0 = geoHash0.getCharacterPrecision();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals((-7), int0);
      assertEquals((-35), geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(0L, 16);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(16, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getSouthernNeighbour();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(16, geoHash0.significantBits());
      assertEquals(16, geoHash1.significantBits());
      assertEquals(6148820866244280320L, geoHash1.longValue());
      assertEquals(21845L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      WGS84Point wGS84Point0 = geoHash1.getBoundingBoxCenter();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(16, geoHash0.significantBits());
      assertEquals(16, geoHash1.significantBits());
      assertEquals(6148820866244280320L, geoHash1.longValue());
      assertEquals(21845L, geoHash1.ord());
      assertEquals(89.6484375, wGS84Point0.getLatitude(), 0.01);
      assertEquals((-179.296875), wGS84Point0.getLongitude(), 0.01);
      assertNotNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNull(boundingBox0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(84L, (-2129));
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = 84L;
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertArrayEquals(new long[] {0L, 84L, 0L}, longArray0);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(3, longArray0.length);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals((-88), geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertEquals(0L, geoHash1.longValue());
      assertNotNull(geoHash1);
      
      BoundingBox boundingBox0 = geoHash1.getBoundingBox();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertArrayEquals(new long[] {0L, 84L, 0L}, longArray0);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(3, longArray0.length);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals((-88), geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-180.0), boundingBox0.getEastLongitude(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(0.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-90.0), boundingBox0.getNorthLatitude(), 0.01);
      assertNotNull(boundingBox0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("e");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(13L, geoHash0.ord());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(5, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(13L, geoHash0.ord());
      assertEquals(7493989779944505344L, geoHash0.longValue());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(45.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertEquals((-45.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(0.0, boundingBox0.getEastLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(45.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(45.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBox0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = GeoHash.geoHashStringWithCharacterPrecision(12, 12, 12);
      assertEquals("s60s30d1h60s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-1273L), 64);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-1273L), geoHash0.longValue());
      assertEquals((-1273L), geoHash0.ord());
      assertNotNull(geoHash0);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-1273L), geoHash0.longValue());
      assertEquals((-1273L), geoHash0.ord());
      assertEquals(179.99999874271452, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(89.9999981559813, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(89.99999811407179, boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(8.381903171539307E-8, boundingBox0.getLongitudeSize(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(179.99999882653356, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(4.190951585769653E-8, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBox0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-576460752303423488L), 1);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1L, geoHash0.ord());
      assertEquals(1, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1L, geoHash0.ord());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(180.0, boundingBox0.getLongitudeSize(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(0.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBox0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("j");
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(17L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals((-8646911284551352320L), geoHash0.longValue());
      assertNotNull(geoHash0);
      
      WGS84Point wGS84Point0 = geoHash0.getBoundingBoxCenter();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(17L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
      assertEquals((-8646911284551352320L), geoHash0.longValue());
      assertEquals((-67.5), wGS84Point0.getLatitude(), 0.01);
      assertEquals(67.5, wGS84Point0.getLongitude(), 0.01);
      assertNotNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1000000000000000000000000000000000000000000000000000000000000000");
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, geoHash0.significantBits());
      assertEquals((-9223372036854775808L), geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertNotNull(geoHash0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("");
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0.0, wGS84Point0.getLongitude(), 0.01);
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
      assertNotNull(wGS84Point0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1");
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(1L, geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = geoHash0.getWesternNeighbour();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals(1L, geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(1, geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertNotNull(geoHash1);
      
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertNotSame(geoHash0, geoHash1);
      assertEquals(1L, geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
      assertEquals(90.0, wGS84Point0.getLongitude(), 0.01);
      assertNotNull(wGS84Point0);
      
      boolean boolean0 = geoHash1.contains(wGS84Point0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertFalse(boolean0);
      assertEquals(1L, geoHash0.ord());
      assertEquals((-9223372036854775808L), geoHash0.longValue());
      assertEquals(1, geoHash0.significantBits());
      assertEquals(1, geoHash1.significantBits());
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
      assertEquals(90.0, wGS84Point0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      GeoHash geoHash1 = GeoHash.fromOrd(12, 44);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash1, geoHash0);
      assertEquals(44, geoHash1.significantBits());
      assertEquals(12L, geoHash1.ord());
      assertEquals(12582912L, geoHash1.longValue());
      assertNotNull(geoHash1);
      
      int int0 = geoHash0.compareTo(geoHash1);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertFalse(geoHash0.equals((Object)geoHash1));
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertEquals((-1), int0);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(44, geoHash1.significantBits());
      assertEquals(12L, geoHash1.ord());
      assertEquals(12582912L, geoHash1.longValue());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.stepsBetween((GeoHash) null, (GeoHash) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withBitPrecision(2.0, 2.0, 60);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(864805056764419584L, geoHash0.ord());
      assertEquals(60, geoHash0.significantBits());
      assertEquals((-4609863165478838272L), geoHash0.longValue());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 7016L;
      // Undeclared exception!
      geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      // Undeclared exception!
      try { 
        geoHash0.recombineLatLonBitsToHash((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      geoHash0.significantBits = (byte)116;
      assertEquals(116, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      
      // Undeclared exception!
      try { 
        geoHash0.prev();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(0L, 60);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(60, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      geoHash0.significantBits = (byte)114;
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0L, geoHash0.ord());
      assertEquals(114, geoHash0.significantBits());
      
      // Undeclared exception!
      try { 
        geoHash0.next();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      // Undeclared exception!
      try { 
        geoHash0.getBoundingBoxCenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromOrd(1L, 1672);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromLongValue((-792L), 974);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromGeohashString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromBinaryString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      
      // Undeclared exception!
      try { 
        geoHash0.contains((WGS84Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.BoundingBox", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      
      // Undeclared exception!
      try { 
        geoHash0.compareTo((GeoHash) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(30L, 16);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(30L, geoHash0.ord());
      assertEquals(8444249301319680L, geoHash0.longValue());
      assertEquals(16, geoHash0.significantBits());
      assertNotNull(geoHash0);
      
      String string0 = geoHash0.toString();
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals("0000000000011110000000000000000000000000000000000000000000000000 -> (-85.078125,-175.78125) -> (-85.78125,-174.375), bits: 16", string0);
      assertEquals(30L, geoHash0.ord());
      assertEquals(8444249301319680L, geoHash0.longValue());
      assertEquals(16, geoHash0.significantBits());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("e");
      String string0 = geoHash0.toBase32();
      assertEquals("e", string0);
      assertEquals(5, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(0L, (-623));
      assertEquals(0, geoHash0.significantBits());
      
      String string0 = geoHash0.toBase32();
      assertEquals(0L, geoHash0.ord());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.withCharacterPrecision(0.703125, 0.703125, 1);
      long long0 = geoHash0.longValue();
      assertEquals(24L, geoHash0.ord());
      assertEquals((-4611686018427387904L), long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withCharacterPrecision((-9223372036854775808L), 12, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A geohash can only be 12 character long.
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(0L, 0);
      int int0 = geoHash0.significantBits();
      assertEquals(0, int0);
      assertEquals(0L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = geoHash0.getSouthernNeighbour();
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash1.significantBits());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = geoHash0.getWesternNeighbour();
      assertEquals(0L, geoHash1.longValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-51L), 30);
      long long0 = geoHash0.ord();
      assertEquals(30, geoHash0.significantBits());
      assertEquals(1073741773L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = GeoHash.fromOrd(12, 12);
      int int0 = geoHash1.compareTo(geoHash0);
      assertEquals(12L, geoHash1.ord());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = geoHash0.next(64);
      geoHash1.bits = (-9223372036854775808L);
      boolean boolean0 = geoHash1.equals(geoHash0);
      assertEquals((-9223372036854775808L), geoHash1.ord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = geoHash0.next(64);
      boolean boolean0 = geoHash1.equals(geoHash0);
      assertTrue(boolean0);
      assertEquals(0L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      Object object0 = new Object();
      boolean boolean0 = geoHash0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0L, geoHash0.longValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      boolean boolean0 = geoHash0.equals(geoHash0);
      assertTrue(boolean0);
      assertEquals(0L, geoHash0.longValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = GeoHash.fromOrd(64, 12);
      boolean boolean0 = geoHash0.equals(geoHash1);
      assertFalse(boolean0);
      assertEquals(12, geoHash1.significantBits());
      assertEquals(64L, geoHash1.ord());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("1");
      String string0 = geoHash0.toBinaryString();
      assertEquals("00001", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      GeoHash geoHash1 = geoHash0.getEasternNeighbour();
      geoHash1.significantBits = (byte)88;
      int int0 = geoHash1.significantBits();
      assertEquals(88, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("1");
      GeoHash geoHash1 = geoHash0.getNorthernNeighbour();
      BoundingBox boundingBox0 = geoHash1.getBoundingBox();
      assertEquals(45.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals(3L, geoHash1.ord());
      assertEquals(45.0, boundingBox0.getLongitudeSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      boolean boolean0 = geoHash0.within(geoHash0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("e");
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 64;
      GeoHash geoHash1 = geoHash0.recombineLatLonBitsToHash(longArray0, longArray0);
      boolean boolean0 = geoHash0.within(geoHash1);
      assertFalse(boolean0);
      assertEquals((-128), geoHash1.significantBits());
      assertEquals(0L, geoHash1.ord());
      assertEquals(7493989779944505344L, geoHash0.longValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1");
      // Undeclared exception!
      try { 
        geoHash0.toBase32();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot convert a geohash to base32 if the precision is not a multiple of 5.
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GeoHash geoHash0 = new GeoHash();
      GeoHash geoHash1 = GeoHash.fromLongValue(12, 64);
      // Undeclared exception!
      try { 
        GeoHash.stepsBetween(geoHash0, geoHash1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // It is only valid to compare the number of steps between two hashes if they have the same number of significant bits
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(84L, (-2129));
      geoHash0.addOffBitToEnd();
      // Undeclared exception!
      try { 
        geoHash0.getCharacterPrecision();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // precision of GeoHash is not divisble by 5: 0000000000000000000000000000000000000000000000000000000000000000 -> (90.0,-180.0) -> (-90.0,180.0), bits: 1
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-51L), 30);
      int int0 = geoHash0.getCharacterPrecision();
      assertEquals(6, int0);
      assertEquals(30, geoHash0.significantBits());
      assertEquals((-876173328384L), geoHash0.longValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd(12, 12);
      geoHash0.significantBits = (byte) (-100);
      geoHash0.toString();
      assertEquals(786432L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-9223372036854775808L), 64);
      geoHash0.addOnBitToEnd();
      // Undeclared exception!
      try { 
        geoHash0.next(12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromGeohashString("~!i'O:21tnHhW=~sE;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character character '~' in geohash '~!i'O:21tnHhW=~sE;'!
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.fromBinaryString("0000000000011110000000000000000000000000000000000000000000000000 -> (-85.078125,-175.78125) -> (-85.78125,-174.375), bits: 16");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0000000000011110000000000000000000000000000000000000000000000000 -> (-85.078125,-175.78125) -> (-85.78125,-174.375), bits: 16 is not a valid geohash as a binary string
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("00001");
      assertEquals(1L, geoHash0.ord());
      assertEquals(5, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withBitPrecision(1369.26068659, 12, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have lat/lon values out of (-90,90)/(-180/180)
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withBitPrecision(12, (-9223372036854775808L), 1368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Geohash can only be 64 bits long!
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withBitPrecision(63.995361328125, 63.995361328125, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Geohash can't be of negative bits long!
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.withCharacterPrecision((-9223372036854775808L), 12, (-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied coordinates (-9.223372036854776E18,12.0) are out of range.
         //
         verifyException("ch.hsr.geohash.WGS84Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeoHash.geoHashStringWithCharacterPrecision(645.8056852028226, 12, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A geohash can only be 12 character long.
         //
         verifyException("ch.hsr.geohash.GeoHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("1");
      long long0 = GeoHash.stepsBetween(geoHash0, geoHash0);
      assertEquals(5, geoHash0.significantBits());
      assertEquals(0L, long0);
      assertEquals(1L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      WGS84Point wGS84Point0 = geoHash0.getBoundingBoxCenter();
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0.0, wGS84Point0.getLongitude(), 0.01);
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
      assertEquals(0, geoHash0.significantBits());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1");
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      geoHash0.enclosesCircleAroundPoint(wGS84Point0, (-1254.9306));
      assertEquals(90.0, wGS84Point0.getLongitude(), 0.01);
      assertEquals(1L, geoHash0.ord());
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      long long0 = geoHash0.longValue();
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = GeoHash.geoHashStringWithCharacterPrecision(12, (-125.612142), (-958));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1");
      WGS84Point wGS84Point0 = geoHash0.getOriginatingPoint();
      geoHash0.contains(wGS84Point0);
      assertEquals(0.0, wGS84Point0.getLatitude(), 0.01);
      assertEquals(90.0, wGS84Point0.getLongitude(), 0.01);
      assertEquals(1L, geoHash0.ord());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("1");
      geoHash0.getAdjacent();
      assertEquals(1L, geoHash0.ord());
  }
}
