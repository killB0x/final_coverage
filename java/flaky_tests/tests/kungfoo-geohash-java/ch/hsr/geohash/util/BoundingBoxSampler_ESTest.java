/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:35:38 GMT 2022
 */

package ch.hsr.geohash.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.hsr.geohash.BoundingBox;
import ch.hsr.geohash.GeoHash;
import ch.hsr.geohash.util.BoundingBoxSampler;
import ch.hsr.geohash.util.TwoGeoHashBoundingBox;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundingBoxSampler_ESTest extends BoundingBoxSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromOrd((-1397), (-1397));
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertNotNull(geoHash0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertNotNull(boundingBox0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 12);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertNotNull(twoGeoHashBoundingBox0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0, (-9223372036854775808L));
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertNotNull(boundingBoxSampler0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      
      GeoHash geoHash1 = boundingBoxSampler0.next();
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertEquals(0L, geoHash0.ord());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(0L, geoHash1.longValue());
      assertEquals(0L, geoHash1.ord());
      assertEquals(12, geoHash1.significantBits());
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertNotNull(geoHash1);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(0L, (-1));
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertNotNull(geoHash0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertNotNull(boundingBox0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 18);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertNotNull(twoGeoHashBoundingBox0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0);
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertNotNull(boundingBoxSampler0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      Random.setNextRandom(12);
      GeoHash geoHash1 = boundingBoxSampler0.next();
      assertFalse(geoHash1.equals((Object)geoHash0));
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(0L, geoHash0.ord());
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(12L, geoHash1.ord());
      assertEquals(18, geoHash1.significantBits());
      assertEquals(844424930131968L, geoHash1.longValue());
      assertNotSame(geoHash0, geoHash1);
      assertNotSame(geoHash1, geoHash0);
      assertNotNull(geoHash1);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("");
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertNotNull(geoHash0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertNotNull(boundingBox0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 64);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertNotNull(twoGeoHashBoundingBox0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0, 12);
      assertEquals(0L, geoHash0.ord());
      assertEquals(0L, geoHash0.longValue());
      assertEquals(0, geoHash0.significantBits());
      assertEquals(180.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(360.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(180.0, boundingBox0.getLatitudeSize(), 0.01);
      assertEquals((-180.0), boundingBox0.getWestLongitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals((-90.0), boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(90.0, boundingBox0.getNorthLatitude(), 0.01);
      assertNotNull(boundingBoxSampler0);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      // Undeclared exception!
      try { 
        boundingBoxSampler0.next();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoundingBoxSampler boundingBoxSampler0 = null;
      try {
        boundingBoxSampler0 = new BoundingBoxSampler((TwoGeoHashBoundingBox) null, 127L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.util.BoundingBoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("s");
      assertEquals(24L, geoHash0.ord());
      assertEquals((-4611686018427387904L), geoHash0.longValue());
      assertEquals(5, geoHash0.significantBits());
      assertNotNull(geoHash0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      assertEquals(24L, geoHash0.ord());
      assertEquals((-4611686018427387904L), geoHash0.longValue());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(0.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(45.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(45.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(45.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(45.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBox0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 64);
      assertEquals(24L, geoHash0.ord());
      assertEquals((-4611686018427387904L), geoHash0.longValue());
      assertEquals(5, geoHash0.significantBits());
      assertEquals(0.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(45.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals(45.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(45.0, boundingBox0.getEastLongitude(), 0.01);
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertFalse(boundingBox0.intersects180Meridian());
      assertEquals(45.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(twoGeoHashBoundingBox0);
      assertEquals(64, GeoHash.MAX_BIT_PRECISION);
      assertEquals((-9223372036854775808L), GeoHash.FIRST_BIT_FLAGGED);
      assertEquals(12, GeoHash.MAX_CHARACTER_PRECISION);
      
      BoundingBoxSampler boundingBoxSampler0 = null;
      try {
        boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This bounding box is too big too sample using this algorithm
         //
         verifyException("ch.hsr.geohash.util.BoundingBoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoundingBoxSampler boundingBoxSampler0 = null;
      try {
        boundingBoxSampler0 = new BoundingBoxSampler((TwoGeoHashBoundingBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.hsr.geohash.util.BoundingBoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoundingBox boundingBox0 = new BoundingBox(0.0, 5.0, 5.0, (-1));
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(5.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-1.0), boundingBox0.getEastLongitude(), 0.01);
      assertTrue(boundingBox0.intersects180Meridian());
      assertEquals(5.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(354.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(5.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBox0);
      
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withCharacterPrecision(boundingBox0, 1);
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(5.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-1.0), boundingBox0.getEastLongitude(), 0.01);
      assertTrue(boundingBox0.intersects180Meridian());
      assertEquals(5.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(354.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(5.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(twoGeoHashBoundingBox0);
      
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0);
      assertEquals(0.0, boundingBox0.getSouthLatitude(), 0.01);
      assertEquals(5.0, boundingBox0.getNorthLatitude(), 0.01);
      assertEquals((-1.0), boundingBox0.getEastLongitude(), 0.01);
      assertTrue(boundingBox0.intersects180Meridian());
      assertEquals(5.0, boundingBox0.getWestLongitude(), 0.01);
      assertEquals(354.0, boundingBox0.getLongitudeSize(), 0.01);
      assertEquals(5.0, boundingBox0.getLatitudeSize(), 0.01);
      assertNotNull(boundingBoxSampler0);
      
      // Undeclared exception!
      boundingBoxSampler0.next();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-9223372036854775808L), 15);
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 15);
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0, 277L);
      boundingBoxSampler0.next();
      // Undeclared exception!
      boundingBoxSampler0.next();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromGeohashString("");
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = new TwoGeoHashBoundingBox(geoHash0, geoHash0);
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0);
      GeoHash geoHash1 = boundingBoxSampler0.next();
      assertNull(geoHash1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromBinaryString("");
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withCharacterPrecision(boundingBox0, 12);
      BoundingBoxSampler boundingBoxSampler0 = null;
      try {
        boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This bounding box is too big too sample using this algorithm
         //
         verifyException("ch.hsr.geohash.util.BoundingBoxSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue(0L, (-1));
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 18);
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0);
      TwoGeoHashBoundingBox twoGeoHashBoundingBox1 = boundingBoxSampler0.getBoundingBox();
      assertSame(twoGeoHashBoundingBox0, twoGeoHashBoundingBox1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeoHash geoHash0 = GeoHash.fromLongValue((-2212L), 37);
      BoundingBox boundingBox0 = geoHash0.getBoundingBox();
      TwoGeoHashBoundingBox twoGeoHashBoundingBox0 = TwoGeoHashBoundingBox.withBitPrecision(boundingBox0, 64);
      BoundingBoxSampler boundingBoxSampler0 = new BoundingBoxSampler(twoGeoHashBoundingBox0, 12);
      GeoHash geoHash1 = boundingBoxSampler0.next();
      assertNotNull(geoHash1);
      assertEquals((-134217728L), geoHash1.longValue());
  }
}
