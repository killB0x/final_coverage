/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:06:35 GMT 2022
 */

package de.javawi.jstun.header;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.javawi.jstun.attribute.Dummy;
import de.javawi.jstun.attribute.MessageAttribute;
import de.javawi.jstun.attribute.MessageAttributeInterface;
import de.javawi.jstun.attribute.Password;
import de.javawi.jstun.attribute.Username;
import de.javawi.jstun.header.MessageHeader;
import de.javawi.jstun.header.MessageHeaderInterface;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MessageHeader_ESTest extends MessageHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      Username username0 = new Username("is not supported");
      messageHeader0.addMessageAttribute(username0);
      int int0 = messageHeader0.getLength();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      messageHeader0.generateTransactionID();
      MessageHeader messageHeader1 = new MessageHeader();
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-10);
      MessageHeader messageHeader0 = new MessageHeader();
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretResponse;
      MessageHeader messageHeader1 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      messageHeader1.id = byteArray0;
      boolean boolean0 = messageHeader1.equalTransactionID(messageHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      messageHeader0.generateTransactionID();
      byte[] byteArray0 = messageHeader0.getBytes();
      messageHeader0.generateTransactionID();
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      messageHeader0.equalTransactionID(messageHeader1);
      assertEquals(MessageHeaderInterface.MessageHeaderType.BindingResponse, messageHeader1.getType());
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      Password password0 = Password.parse(byteArray0);
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.UnknownAttribute;
      password0.setType(messageAttributeInterface_MessageAttributeType0);
      messageHeader0.addMessageAttribute(password0);
      byte[] byteArray1 = messageHeader0.getBytes();
      try { 
        messageHeader0.parseAttributes(byteArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing error
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType1 = messageHeader0.getType();
      assertEquals(MessageHeaderInterface.MessageHeaderType.BindingResponse, messageHeaderInterface_MessageHeaderType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      byte[] byteArray1 = messageHeader0.getTransactionID();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      TreeMap<MessageAttributeInterface.MessageAttributeType, MessageAttribute> treeMap0 = messageHeader0.ma;
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.Dummy;
      Dummy dummy0 = new Dummy();
      treeMap0.put(messageAttributeInterface_MessageAttributeType0, dummy0);
      MessageAttribute messageAttribute0 = messageHeader0.getMessageAttribute(messageAttributeInterface_MessageAttributeType0);
      assertSame(messageAttribute0, dummy0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      // Undeclared exception!
      try { 
        messageHeader0.setTransactionID((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MessageHeader messageHeader0 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.setTransactionID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageHeader.parseHeader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MessageHeader.parseHeader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = new byte[0];
      Password password0 = Password.parse(byteArray0);
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.MessageIntegrity;
      password0.setType(messageAttributeInterface_MessageAttributeType0);
      messageHeader0.addMessageAttribute(password0);
      byte[] byteArray1 = messageHeader0.getBytes();
      // Undeclared exception!
      messageHeader0.parseAttributes(byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.parseAttributes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MessageHeader messageHeader0 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.parseAttributes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      Dummy dummy0 = new Dummy();
      messageHeader0.addMessageAttribute(dummy0);
      byte[] byteArray0 = messageHeader0.getBytes();
      try { 
        messageHeader0.parseAttributes(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unkown mandatory message attribute
         //
         verifyException("de.javawi.jstun.attribute.MessageAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.id = null;
      // Undeclared exception!
      try { 
        messageHeader0.getTransactionID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      messageHeader0.ma = null;
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.UnknownAttribute;
      // Undeclared exception!
      try { 
        messageHeader0.getMessageAttribute(messageAttributeInterface_MessageAttributeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      Password password0 = new Password();
      messageHeader0.addMessageAttribute(password0);
      // Undeclared exception!
      try { 
        messageHeader0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.attribute.Password", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      TreeMap<MessageAttributeInterface.MessageAttributeType, MessageAttribute> treeMap0 = messageHeader0.ma;
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.Dummy;
      Dummy dummy0 = new Dummy();
      dummy0.setLengthValue((-36));
      treeMap0.put(messageAttributeInterface_MessageAttributeType0, dummy0);
      // Undeclared exception!
      try { 
        messageHeader0.getLength();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -32
         //
         verifyException("de.javawi.jstun.attribute.Dummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      messageHeader0.setType(messageHeaderInterface_MessageHeaderType0);
      // Undeclared exception!
      try { 
        messageHeader0.getLength();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try { 
        messageHeader0.getBytes();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integer value -1 is larger than 2^31
         //
         verifyException("de.javawi.jstun.util.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.ma = null;
      // Undeclared exception!
      try { 
        messageHeader0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      TreeMap<MessageAttributeInterface.MessageAttributeType, MessageAttribute> treeMap0 = messageHeader0.ma;
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.Dummy;
      Dummy dummy0 = new Dummy();
      dummy0.setLengthValue((-36));
      treeMap0.put(messageAttributeInterface_MessageAttributeType0, dummy0);
      // Undeclared exception!
      try { 
        messageHeader0.getBytes();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -32
         //
         verifyException("de.javawi.jstun.attribute.Dummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      // Undeclared exception!
      try { 
        messageHeader0.getBytes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.id = null;
      // Undeclared exception!
      try { 
        messageHeader0.generateTransactionID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      // Undeclared exception!
      try { 
        messageHeader0.generateTransactionID();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.equalTransactionID((MessageHeader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = new byte[0];
      messageHeader0.id = byteArray0;
      MessageHeader messageHeader1 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.equalTransactionID(messageHeader1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      // Undeclared exception!
      try { 
        messageHeader0.addMessageAttribute((MessageAttribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = MessageHeader.typeToInteger((MessageHeaderInterface.MessageHeaderType) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretResponse;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(273, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(257, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingRequest;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      byte[] byteArray0 = messageHeader0.getTransactionID();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      try { 
        MessageHeader.parseHeader(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Message type 0is not supported
         //
         verifyException("de.javawi.jstun.header.MessageHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretErrorResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      assertEquals(20, byteArray0.length);
      assertEquals(MessageHeaderInterface.MessageHeaderType.SharedSecretErrorResponse, messageHeader1.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      MessageHeader messageHeader1 = new MessageHeader();
      messageHeader1.generateTransactionID();
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      MessageHeader messageHeader1 = new MessageHeader();
      messageHeader1.generateTransactionID();
      messageHeader1.generateTransactionID();
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      assertEquals(20, byteArray0.length);
      
      MessageHeader messageHeader1 = new MessageHeader();
      messageHeader1.id = byteArray0;
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretErrorResponse;
      int int0 = MessageHeader.typeToInteger(messageHeaderInterface_MessageHeaderType0);
      assertEquals(274, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      assertEquals(20, byteArray0.length);
      assertEquals(MessageHeaderInterface.MessageHeaderType.SharedSecretResponse, messageHeader1.getType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      messageHeader0.id = byteArray0;
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader1);
      assertEquals(20, byteArray0.length);
      assertEquals(MessageHeaderInterface.MessageHeaderType.SharedSecretRequest, messageHeader1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      assertEquals(MessageHeaderInterface.MessageHeaderType.BindingErrorResponse, messageHeader1.getType());
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      MessageHeader messageHeader1 = MessageHeader.parseHeader(byteArray0);
      assertEquals(MessageHeaderInterface.MessageHeaderType.BindingRequest, messageHeader1.getType());
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      try { 
        messageHeader0.getLength();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integer value -1 is larger than 2^31
         //
         verifyException("de.javawi.jstun.util.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MessageHeader messageHeader0 = new MessageHeader();
      messageHeader0.getType();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      boolean boolean0 = messageHeader0.equalTransactionID(messageHeader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingErrorResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = new byte[7];
      Password password0 = Password.parse(byteArray0);
      messageHeader0.addMessageAttribute(password0);
      byte[] byteArray1 = messageHeader0.getBytes();
      messageHeader0.parseAttributes(byteArray1);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.BindingResponse;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      byte[] byteArray0 = messageHeader0.getBytes();
      messageHeader0.setTransactionID(byteArray0);
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MessageHeaderInterface.MessageHeaderType messageHeaderInterface_MessageHeaderType0 = MessageHeaderInterface.MessageHeaderType.SharedSecretRequest;
      MessageHeader messageHeader0 = new MessageHeader(messageHeaderInterface_MessageHeaderType0);
      MessageAttributeInterface.MessageAttributeType messageAttributeInterface_MessageAttributeType0 = MessageAttributeInterface.MessageAttributeType.Dummy;
      MessageAttribute messageAttribute0 = messageHeader0.getMessageAttribute(messageAttributeInterface_MessageAttributeType0);
      assertNull(messageAttribute0);
  }
}
