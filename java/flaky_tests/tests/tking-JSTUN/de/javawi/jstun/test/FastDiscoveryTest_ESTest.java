/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:04:00 GMT 2022
 */

package de.javawi.jstun.test;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.javawi.jstun.attribute.ChangedAddress;
import de.javawi.jstun.test.DiscoveryInfo;
import de.javawi.jstun.test.FastDiscoveryTest;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDiscoveryTest_ESTest extends FastDiscoveryTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 3232, "", 0);
      FastDiscoveryTest.Test3Thread fastDiscoveryTest_Test3Thread0 = fastDiscoveryTest0.new Test3Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test3Thread0.run();
      assertEquals(0, fastDiscoveryTest_Test3Thread0.getReturnTest3());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test1Thread fastDiscoveryTest_Test1Thread0 = fastDiscoveryTest0.new Test1Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test1Thread0.run();
      assertFalse(fastDiscoveryTest_Test1Thread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 21, "F.^X?}%p'+Rkt", 21);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 21);
      byte[] byteArray0 = new byte[6];
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      ChangedAddress changedAddress0 = new ChangedAddress();
      fastDiscoveryTest0.ca = changedAddress0;
      FastDiscoveryTest.Test3Thread fastDiscoveryTest_Test3Thread0 = fastDiscoveryTest0.new Test3Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test3Thread0.run();
      //  // Unstable assertion: assertFalse(fastDiscoveryTest_Test3Thread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("t");
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 0, " ,m\")Drhv7~w)", (-897));
      FastDiscoveryTest.Test2Thread fastDiscoveryTest_Test2Thread0 = fastDiscoveryTest0.new Test2Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test2Thread0.run();
      assertEquals(0, fastDiscoveryTest_Test2Thread0.getReturnTest2());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("127.0.0.1", 22);
      byte[] byteArray0 = new byte[2];
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 22, "", 22);
      FastDiscoveryTest.Test1Thread fastDiscoveryTest_Test1Thread0 = fastDiscoveryTest0.new Test1Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test1Thread0.run();
      assertFalse(fastDiscoveryTest_Test1Thread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test1Thread fastDiscoveryTest_Test1Thread0 = fastDiscoveryTest0.new Test1Thread(fastDiscoveryTest0);
      boolean boolean0 = fastDiscoveryTest_Test1Thread0.getReturnTest1();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-2158), "<z([Y", (-2158));
      // Undeclared exception!
      try { 
        fastDiscoveryTest0.test();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.test.FastDiscoveryTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test2Thread fastDiscoveryTest_Test2Thread0 = fastDiscoveryTest0.new Test2Thread(fastDiscoveryTest0);
      int int0 = fastDiscoveryTest_Test2Thread0.getReturnTest2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test2Thread fastDiscoveryTest_Test2Thread0 = fastDiscoveryTest0.new Test2Thread(fastDiscoveryTest0);
      fastDiscoveryTest_Test2Thread0.run();
      assertFalse(fastDiscoveryTest_Test2Thread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("t");
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 0, " ,m\")Drhv7~w)", (-897));
      FastDiscoveryTest.Test3Thread fastDiscoveryTest_Test3Thread0 = fastDiscoveryTest0.new Test3Thread(fastDiscoveryTest0);
      int int0 = fastDiscoveryTest_Test3Thread0.getReturnTest3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test1RedoThread fastDiscoveryTest_Test1RedoThread0 = fastDiscoveryTest0.new Test1RedoThread(fastDiscoveryTest0);
      fastDiscoveryTest_Test1RedoThread0.run();
      assertFalse(fastDiscoveryTest_Test1RedoThread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, (-71), (String) null, (-4298));
      FastDiscoveryTest.Test1RedoThread fastDiscoveryTest_Test1RedoThread0 = fastDiscoveryTest0.new Test1RedoThread(fastDiscoveryTest0);
      boolean boolean0 = fastDiscoveryTest_Test1RedoThread0.getReturnTest1Redo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      FastDiscoveryTest fastDiscoveryTest0 = new FastDiscoveryTest(inetAddress0, 21, "F.^X?}%p'+Rkt", 21);
      DiscoveryInfo discoveryInfo0 = fastDiscoveryTest0.test();
      assertFalse(discoveryInfo0.isSymmetric());
  }
}
