/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:10:40 GMT 2022
 */

package de.javawi.jstun.test;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.javawi.jstun.test.DiscoveryInfo;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DiscoveryInfo_ESTest extends DiscoveryInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      
      discoveryInfo0.setSymmetricUDPFirewall();
      boolean boolean0 = discoveryInfo0.isSymmetricUDPFirewall();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("Firewall blocks UDP.\n");
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isSymmetric());
      
      discoveryInfo0.setSymmetric();
      boolean boolean0 = discoveryInfo0.isSymmetric();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isRestrictedCone());
      
      discoveryInfo0.setRestrictedCone();
      boolean boolean0 = discoveryInfo0.isRestrictedCone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isOpenAccess());
      
      discoveryInfo0.setOpenAccess();
      boolean boolean0 = discoveryInfo0.isOpenAccess();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isFullCone());
      
      discoveryInfo0.setFullCone();
      boolean boolean0 = discoveryInfo0.isFullCone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(514, "unkown\n");
      boolean boolean0 = discoveryInfo0.isError();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isBlockedUDP());
      
      discoveryInfo0.setBlockedUDP();
      boolean boolean0 = discoveryInfo0.isBlockedUDP();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertEquals((-1), discoveryInfo0.getPublicPort());
      
      discoveryInfo0.setPublicPort(0);
      int int0 = discoveryInfo0.getPublicPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.setPublicPort(2106);
      int int0 = discoveryInfo0.getPublicPort();
      assertEquals(2106, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.setPublicIP(inetAddress0);
      discoveryInfo0.getPublicIP();
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isFullCone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.setPublicIP(inetAddress0);
      discoveryInfo0.getPublicIP();
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isError());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo((InetAddress) null);
      discoveryInfo0.getLocalIP();
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isError());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.getLocalIP();
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("Firewall blocks UDP.\n");
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      // Undeclared exception!
      try { 
        discoveryInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockNetworkInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      
      discoveryInfo0.setSymmetricUDPFirewall();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isSymmetricUDPFirewall());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isSymmetric());
      
      discoveryInfo0.setSymmetric();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      
      discoveryInfo0.setPortRestrictedCone();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isPortRestrictedCone());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isRestrictedCone());
      
      discoveryInfo0.setRestrictedCone();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isRestrictedCone());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isOpenAccess());
      
      discoveryInfo0.setOpenAccess();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isOpenAccess());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(0, "");
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isError());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      String string0 = discoveryInfo0.toString();
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertEquals("Network interface: Evo_en0\nLocal IP address: 192.168.1.42\nResult: unkown\nPublic IP address: unknown\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(0, "");
      boolean boolean0 = discoveryInfo0.isSymmetricUDPFirewall();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(0, "");
      boolean boolean0 = discoveryInfo0.isSymmetric();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(0, "");
      boolean boolean0 = discoveryInfo0.isRestrictedCone();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(2106, "Network interface: Evo_lo0\nLocal IP address: 127.0.0.1\nResult: Open access to the Internet.\nPublic IP address: unknown\n");
      boolean boolean0 = discoveryInfo0.isPortRestrictedCone();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      boolean boolean0 = discoveryInfo0.isPortRestrictedCone();
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isFullCone());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(boolean0);
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isRestrictedCone());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      boolean boolean0 = discoveryInfo0.isFullCone();
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(boolean0);
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isError());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(514, "unkown\n");
      boolean boolean0 = discoveryInfo0.isBlockedUDP();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(514, "unkown\n");
      boolean boolean0 = discoveryInfo0.isOpenAccess();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isError());
      
      discoveryInfo0.setError(503, "ke*G62;UJ&Z; Z}Zccc");
      boolean boolean0 = discoveryInfo0.isFullCone();
      assertTrue(discoveryInfo0.isError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.getLocalIP();
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isSymmetric());
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isRestrictedCone());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.getPublicIP();
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertEquals((-1), discoveryInfo0.getPublicPort());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      discoveryInfo0.setPublicIP(inetAddress0);
      String string0 = discoveryInfo0.toString();
      assertEquals("Network interface: Evo_en0\nLocal IP address: 192.168.1.42\nResult: unkown\nPublic IP address: 192.168.1.42\n", string0);
      assertEquals((-1), discoveryInfo0.getPublicPort());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      boolean boolean0 = discoveryInfo0.isError();
      assertEquals((-1), discoveryInfo0.getPublicPort());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
      assertFalse(boolean0);
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isSymmetric());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      int int0 = discoveryInfo0.getPublicPort();
      assertFalse(discoveryInfo0.isError());
      assertFalse(discoveryInfo0.isOpenAccess());
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      assertFalse(discoveryInfo0.isSymmetric());
      assertFalse(discoveryInfo0.isBlockedUDP());
      assertFalse(discoveryInfo0.isFullCone());
      assertFalse(discoveryInfo0.isRestrictedCone());
      assertEquals((-1), int0);
      assertFalse(discoveryInfo0.isSymmetricUDPFirewall());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isPortRestrictedCone());
      
      discoveryInfo0.setPortRestrictedCone();
      boolean boolean0 = discoveryInfo0.isPortRestrictedCone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isFullCone());
      
      discoveryInfo0.setFullCone();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isFullCone());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DiscoveryInfo discoveryInfo0 = new DiscoveryInfo(inetAddress0);
      assertFalse(discoveryInfo0.isBlockedUDP());
      
      discoveryInfo0.setBlockedUDP();
      discoveryInfo0.toString();
      assertTrue(discoveryInfo0.isBlockedUDP());
  }
}
