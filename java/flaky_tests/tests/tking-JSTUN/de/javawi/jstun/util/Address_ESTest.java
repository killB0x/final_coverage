/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 00:12:42 GMT 2022
 */

package de.javawi.jstun.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.javawi.jstun.util.Address;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Address_ESTest extends Address_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-1);
      Address address0 = new Address(byteArray0);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      Address address0 = new Address(byteArray0);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)107;
      Address address0 = new Address(byteArray0);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)53;
      Address address0 = new Address(byteArray0);
      address0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      Address address1 = new Address(byteArray0);
      assertTrue(address1.equals((Object)address0));
      
      address1.fourthOctet = 1554;
      boolean boolean0 = address0.equals(address1);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)107;
      Address address0 = new Address(byteArray0);
      Address address1 = new Address(byteArray0);
      assertTrue(address1.equals((Object)address0));
      
      address1.thirdOctet = 1554;
      boolean boolean0 = address1.equals(address0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      Address address1 = new Address(byteArray0);
      assertTrue(address1.equals((Object)address0));
      
      address1.secondOctet = 1921;
      boolean boolean0 = address0.equals(address1);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Address address0 = new Address(255, 255, 255, 255);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      Address address1 = new Address(byteArray0);
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)16;
      Address address0 = new Address(byteArray0);
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("/0.16.0.0", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.thirdOctet = 101;
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("0.0.101.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.secondOctet = (-2189);
      String string0 = address0.toString();
      assertEquals("0.-2189.0.0", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.thirdOctet = 101;
      String string0 = address0.toString();
      assertEquals("0.0.101.0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Address address0 = new Address(255, 255, 255, 255);
      address0.firstOctet = 77;
      String string0 = address0.toString();
      assertEquals("77.255.255.255", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Address address0 = new Address("0.0.0.107");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Address address0 = new Address("0.0.101.0");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Address address0 = new Address("77.255.255.255");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address("de.javawi.jstun.util.UtilityException");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // 4 octets in address string are required.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Address address0 = new Address(2, 0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Address address0 = new Address(0, 0, 0, 0);
      address0.firstOctet = (-2950);
      Object object0 = new Object();
      boolean boolean0 = address0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Address address0 = new Address(byteArray0);
      address0.firstOctet = 10;
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("10.0.0.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Address address0 = new Address(237, 237, 237, 237);
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("/237.237.237.237", inetAddress0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      Address address0 = new Address(byteArray0);
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("127.0.0.0", inetAddress0.getHostAddress());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.secondOctet = (-2189);
      try { 
        address0.getInetAddress();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integer value -2189 is larger than 2^15
         //
         verifyException("de.javawi.jstun.util.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.thirdOctet = (-920);
      try { 
        address0.getBytes();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integer value -920 is larger than 2^15
         //
         verifyException("de.javawi.jstun.util.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Address address0 = new Address(237, 237, 237, 237);
      // Undeclared exception!
      try { 
        address0.equals("237.237.237.237");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class de.javawi.jstun.util.Address (java.lang.String is in module java.base of loader 'bootstrap'; de.javawi.jstun.util.Address is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @1c608afc)
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address("1.5.QT.:c )d6c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      byte[] byteArray1 = address0.getBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      address0.fourthOctet = 3052;
      Address address1 = new Address("0.0.0.0");
      boolean boolean0 = address1.equals(address0);
      assertFalse(address0.equals((Object)address1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Address address0 = new Address(byteArray0);
      address0.thirdOctet = 18;
      Address address1 = new Address(byteArray0);
      boolean boolean0 = address0.equals(address1);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      Address address1 = new Address("0.0.0.0");
      assertTrue(address1.equals((Object)address0));
      
      address1.secondOctet = 1;
      boolean boolean0 = address0.equals(address1);
      assertFalse(address1.equals((Object)address0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      boolean boolean0 = address0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Address address0 = null;
      try {
        address0 = new Address(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // 4 bytes are required.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address("0.507.0.0");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is in incorrect format.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address("0.-2189.0.0");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is in incorrect format.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address("CVn}M\"");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // 4 octets in address string are required.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(2, 2, 2, 2114);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address((byte)53, 1, (byte)107, (-2346));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(172, 220, 3077, 3077);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(25, 25, (-325), 25);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(18, 400, 18, 18);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(18, (-369), 18, 18);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(4586, 4586, 4586, 4586);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Address address0 = new Address(1, 1, 1, 4);
      Address address1 = new Address(4, 1, 4, 4);
      boolean boolean0 = address0.equals(address1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address((-2108), (-2108), (-2108), (-2108));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Address is malformed.
         //
         verifyException("de.javawi.jstun.util.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      boolean boolean0 = address0.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Address address0 = new Address(byteArray0);
      InetAddress inetAddress0 = address0.getInetAddress();
      assertEquals("/0.0.0.0", inetAddress0.toString());
  }
}
