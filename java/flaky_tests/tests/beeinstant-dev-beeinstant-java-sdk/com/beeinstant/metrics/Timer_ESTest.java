/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 05:36:37 GMT 2022
 */

package com.beeinstant.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.beeinstant.metrics.Metric;
import com.beeinstant.metrics.Timer;
import com.beeinstant.metrics.Unit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Timer_ESTest extends Timer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Timer timer0 = new Timer();
      Timer timer1 = new Timer();
      Metric metric0 = timer1.merge(timer0);
      assertSame(timer1, metric0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.stopTimer(0L);
      assertEquals(1392409281320L, timer0.startTimer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Timer timer0 = new Timer();
      System.setCurrentTimeMillis(0L);
      long long0 = timer0.startTimer();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1448L));
      Timer timer0 = new Timer();
      long long0 = timer0.startTimer();
      assertEquals((-1448L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.stopTimer(446L);
      String string0 = timer0.flushToString();
      assertEquals("1.392409280874E12ms", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Timer timer0 = new Timer();
      // Undeclared exception!
      try { 
        timer0.merge((Metric) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Merge with an invalid Timer
         //
         verifyException("com.beeinstant.metrics.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.stopTimer(1L);
      // Undeclared exception!
      timer0.merge(timer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Timer timer0 = new Timer();
      timer0.stopTimer((-682L));
      assertEquals(1392409281320L, timer0.startTimer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Timer timer0 = new Timer();
      String string0 = timer0.flushToString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Timer timer0 = new Timer();
      // Undeclared exception!
      try { 
        timer0.incCounter((-2145898788));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot increase a counter in a Timer
         //
         verifyException("com.beeinstant.metrics.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Timer timer0 = new Timer();
      Unit unit0 = Unit.BIT_PER_SEC;
      // Undeclared exception!
      try { 
        timer0.record(1.0, unit0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot record measurements in a Counter
         //
         verifyException("com.beeinstant.metrics.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Timer timer0 = new Timer();
      long long0 = timer0.startTimer();
      assertEquals(1392409281320L, long0);
  }
}
