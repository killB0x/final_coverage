/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 05:28:21 GMT 2022
 */

package com.beeinstant.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.beeinstant.metrics.Metric;
import com.beeinstant.metrics.MetricsCollector;
import com.beeinstant.metrics.TimerMetric;
import com.beeinstant.metrics.Unit;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MetricsCollector_ESTest extends MetricsCollector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MetricsCollector metricsCollector0 = new MetricsCollector();
      TimerMetric timerMetric0 = metricsCollector0.startTimer("YDV1IJc");
      assertEquals(0L, timerMetric0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      System.setCurrentTimeMillis((-1753L));
      TimerMetric timerMetric0 = metricsCollector0.startTimer("us");
      assertEquals((-1753L), timerMetric0.getStartTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.incCounter("Tp_N", 3);
      // Undeclared exception!
      try { 
        metricsCollector0.stopTimer("Tp_N", 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot stop a timer in a Counter
         //
         verifyException("com.beeinstant.metrics.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.stopTimer((String) null, (-2238L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.incCounter("MICRO_SECOND", 0);
      // Undeclared exception!
      try { 
        metricsCollector0.startTimer("MICRO_SECOND");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot start a timer in a Counter
         //
         verifyException("com.beeinstant.metrics.Counter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.startTimer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.startTimer("beeinstant.endpoint");
      Unit unit0 = Unit.TERA_BYTE;
      // Undeclared exception!
      try { 
        metricsCollector0.record("beeinstant.endpoint", (-720.087198), unit0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot record measurements in a Counter
         //
         verifyException("com.beeinstant.metrics.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      Unit unit0 = Unit.KILO_BIT_PER_SEC;
      // Undeclared exception!
      try { 
        metricsCollector0.record((String) null, 0.0, unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      MetricsCollector metricsCollector1 = new MetricsCollector();
      Unit unit0 = Unit.GIGA_BIT_PER_SEC;
      metricsCollector0.record("P", 476.289, unit0);
      metricsCollector1.merge(metricsCollector0);
      // Undeclared exception!
      metricsCollector0.merge(metricsCollector1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      MetricsCollector metricsCollector1 = new MetricsCollector();
      metricsCollector1.stopTimer("P", (-1977L));
      Unit unit0 = Unit.TERA_BIT_PER_SEC;
      metricsCollector0.record("P", 476.289, unit0);
      // Undeclared exception!
      try { 
        metricsCollector0.merge(metricsCollector1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Merge with an invalid Recorder
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.merge((MetricsCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.beeinstant.metrics.MetricsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.startTimer("MICROf_SEND");
      // Undeclared exception!
      try { 
        metricsCollector0.incCounter("MICROf_SEND", 7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot increase a counter in a Timer
         //
         verifyException("com.beeinstant.metrics.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.incCounter((String) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.merge(metricsCollector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.startTimer("ahD");
      String string0 = metricsCollector0.flushToString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      Unit unit0 = Unit.HOUR;
      // Undeclared exception!
      try { 
        metricsCollector0.record("", (-1727.8829595), unit0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/conn/HttpClientConnectionManager
         //
         verifyException("com.beeinstant.metrics.MetricsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      metricsCollector0.stopTimer("ahD", 1249L);
      String string0 = metricsCollector0.flushToString();
      assertEquals("m.ahD=1.392409280071E12ms", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.stopTimer("Invalid recorder name ", 1370L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/conn/HttpClientConnectionManager
         //
         verifyException("com.beeinstant.metrics.MetricsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.startTimer("Mt] mEw-gA");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/conn/HttpClientConnectionManager
         //
         verifyException("com.beeinstant.metrics.MetricsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      // Undeclared exception!
      try { 
        metricsCollector0.incCounter("pz'_~r9Q)|q7Vu", (-307));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/conn/HttpClientConnectionManager
         //
         verifyException("com.beeinstant.metrics.MetricsCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MetricsCollector metricsCollector0 = new MetricsCollector();
      Map<String, Metric> map0 = metricsCollector0.getMetrics();
      assertTrue(map0.isEmpty());
  }
}
