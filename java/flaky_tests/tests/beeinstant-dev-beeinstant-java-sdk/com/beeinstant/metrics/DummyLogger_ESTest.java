/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 05:38:56 GMT 2022
 */

package com.beeinstant.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.beeinstant.metrics.DummyLogger;
import com.beeinstant.metrics.Metrics;
import com.beeinstant.metrics.MetricsCollector;
import com.beeinstant.metrics.TimerMetric;
import com.beeinstant.metrics.Unit;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DummyLogger_ESTest extends DummyLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Map<String, String> map0 = dummyLogger0.getRootDimensions();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Metrics metrics0 = dummyLogger0.extendDimensions((String) null);
      assertNotNull(metrics0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Unit unit0 = Unit.KILO_BIT_PER_SEC;
      dummyLogger0.record("&", (-1517.645119), unit0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      dummyLogger0.incCounter("tnxZoA", 0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      dummyLogger0.flush(0L);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dummyLogger0.flushToString(consumer0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Consumer<MetricsCollector> consumer0 = (Consumer<MetricsCollector>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dummyLogger0.updateMetricsCollector("l5XM[`kf~%b=#", consumer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      TimerMetric timerMetric0 = dummyLogger0.startTimer("");
      assertNull(timerMetric0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      String[] stringArray0 = new String[9];
      Metrics metrics0 = dummyLogger0.extendMultipleDimensionsIncludeRoot(stringArray0);
      assertNotNull(metrics0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DummyLogger dummyLogger0 = new DummyLogger();
      Metrics metrics0 = dummyLogger0.extendMultipleDimensions((String[]) null);
      assertNotNull(metrics0);
  }
}
