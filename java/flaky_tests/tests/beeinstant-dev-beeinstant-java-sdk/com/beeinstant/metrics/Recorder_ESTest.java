/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 05:32:14 GMT 2022
 */

package com.beeinstant.metrics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.beeinstant.metrics.Metric;
import com.beeinstant.metrics.Recorder;
import com.beeinstant.metrics.Timer;
import com.beeinstant.metrics.Unit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Recorder_ESTest extends Recorder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Unit unit0 = Unit.KILO_BYTE;
      Recorder recorder0 = new Recorder((Unit) null);
      // Undeclared exception!
      try { 
        recorder0.record((-777.1923930333), unit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Unit unit0 = Unit.MEGA_BIT_PER_SEC;
      Recorder recorder0 = new Recorder(unit0);
      recorder0.record((-2294.7845154750585), unit0);
      Recorder recorder1 = new Recorder((Unit) null);
      // Undeclared exception!
      try { 
        recorder1.merge(recorder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Unit unit0 = Unit.MEGA_BYTE;
      Recorder recorder0 = new Recorder(unit0);
      recorder0.record((-328.85668801), unit0);
      // Undeclared exception!
      recorder0.merge(recorder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Unit unit0 = Unit.SECOND;
      Recorder recorder0 = new Recorder(unit0);
      Metric metric0 = recorder0.merge(recorder0);
      assertSame(recorder0, metric0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Unit unit0 = Unit.MICRO_SECOND;
      Recorder recorder0 = new Recorder(unit0);
      Timer timer0 = new Timer();
      // Undeclared exception!
      try { 
        recorder0.merge(timer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Merge with an invalid Recorder
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Unit unit0 = Unit.SECOND;
      Recorder recorder0 = new Recorder(unit0);
      String string0 = recorder0.flushToString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Unit unit0 = Unit.SECOND;
      Recorder recorder0 = new Recorder(unit0);
      recorder0.record(0.0, unit0);
      String string0 = recorder0.flushToString();
      assertEquals("0.0s", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Unit unit0 = Unit.SECOND;
      Recorder recorder0 = new Recorder(unit0);
      Unit unit1 = Unit.TERA_BYTE;
      recorder0.record(4738.0149235, unit1);
      assertFalse(unit1.equals((Object)unit0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Unit unit0 = Unit.GIGA_BIT_PER_SEC;
      Recorder recorder0 = new Recorder(unit0);
      // Undeclared exception!
      try { 
        recorder0.startTimer();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot start a timer in a Recorder
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Unit unit0 = Unit.SECOND;
      Recorder recorder0 = new Recorder(unit0);
      // Undeclared exception!
      try { 
        recorder0.incCounter(577);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot increase a counter in a Recorder
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Unit unit0 = Unit.BYTE;
      Recorder recorder0 = new Recorder(unit0);
      // Undeclared exception!
      try { 
        recorder0.stopTimer((-1388L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot stop a timer in a Recorder
         //
         verifyException("com.beeinstant.metrics.Recorder", e);
      }
  }
}
