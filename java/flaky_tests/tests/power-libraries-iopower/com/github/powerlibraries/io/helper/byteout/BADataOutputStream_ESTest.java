/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:34:35 GMT 2022
 */

package com.github.powerlibraries.io.helper.byteout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.helper.byteout.BADataOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BADataOutputStream_ESTest extends BADataOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&k");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream(mockPrintStream0, byteArrayOutputStream0);
      byteArrayOutputStream0.write(3061);
      String string0 = bADataOutputStream0.toString();
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&k");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream(mockPrintStream0, byteArrayOutputStream0);
      String string0 = bADataOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream(byteArrayOutputStream0, byteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = bADataOutputStream0.getUnderlyingOutput();
      assertEquals("", byteArrayOutputStream1.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("&k");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream(mockPrintStream0, byteArrayOutputStream0);
      byteArrayOutputStream0.write(3061);
      ByteArrayOutputStream byteArrayOutputStream1 = bADataOutputStream0.getUnderlyingOutput();
      assertEquals(1, byteArrayOutputStream1.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile("y/<b");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream(mockFileOutputStream0, (ByteArrayOutputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = bADataOutputStream0.getUnderlyingOutput();
      assertNull(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BADataOutputStream bADataOutputStream0 = new BADataOutputStream((OutputStream) null, (ByteArrayOutputStream) null);
      // Undeclared exception!
      try { 
        bADataOutputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.helper.byteout.BADataOutputStream", e);
      }
  }
}
