/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:14:47 GMT 2022
 */

package com.github.powerlibraries.io.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.builder.ByteOutBuilder;
import com.github.powerlibraries.io.builder.OutBuilder;
import com.github.powerlibraries.io.builder.StringOutBuilder;
import com.github.powerlibraries.io.builder.targets.ByteArrayTarget;
import com.github.powerlibraries.io.builder.targets.FileTarget;
import com.github.powerlibraries.io.builder.targets.OutputStreamTarget;
import com.github.powerlibraries.io.builder.targets.Target;
import com.github.powerlibraries.io.functions.OutputStreamWrapper;
import com.github.powerlibraries.io.functions.WriterWrapper;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.NotSerializableException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseOutBuilder_ESTest extends BaseOutBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutBuilder outBuilder0 = new OutBuilder((Target) null);
      Target target0 = outBuilder0.getTarget();
      assertNull(target0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileTarget fileTarget0 = new FileTarget((File) null);
      OutBuilder outBuilder0 = new OutBuilder(fileTarget0);
      Target target0 = outBuilder0.getTarget();
      assertSame(target0, fileTarget0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      Base64.Encoder base64_Encoder0 = mock(Base64.Encoder.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(base64_Encoder0).wrap(any(java.io.OutputStream.class));
      byteOutBuilder0.encodeBase64(base64_Encoder0);
      OutputStream outputStream0 = byteOutBuilder0.createOutputStream();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      OutputStream outputStream0 = byteOutBuilder0.createOutputStream();
      assertEquals("", outputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      BufferedWriter bufferedWriter0 = stringOutBuilder0.asWriter();
      assertNotNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      PrintWriter printWriter0 = stringOutBuilder0.asPrint();
      assertNotNull(printWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutBuilder outBuilder0 = new OutBuilder((Target) null);
      // Undeclared exception!
      try { 
        outBuilder0.createOutputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.compress();
      // Undeclared exception!
      try { 
        stringOutBuilder1.createOutputStream();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.wrap((OutputStreamWrapper) null);
      // Undeclared exception!
      try { 
        stringOutBuilder1.asZip();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.asZip();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.ZipOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutBuilder outBuilder0 = new OutBuilder((Target) null);
      // Undeclared exception!
      try { 
        outBuilder0.asWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      stringOutBuilder0.compress();
      // Undeclared exception!
      try { 
        stringOutBuilder0.asWriter();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileTarget fileTarget0 = new FileTarget(mockFile0);
      OutBuilder outBuilder0 = new OutBuilder(fileTarget0);
      try { 
        outBuilder0.asWriter();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutBuilder outBuilder0 = new OutBuilder((Target) null);
      // Undeclared exception!
      try { 
        outBuilder0.asStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileTarget fileTarget0 = new FileTarget(mockFile0);
      OutBuilder outBuilder0 = new OutBuilder(fileTarget0);
      try { 
        outBuilder0.asPrint();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutBuilder outBuilder0 = new OutBuilder((Target) null);
      // Undeclared exception!
      try { 
        outBuilder0.asObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.compress();
      // Undeclared exception!
      try { 
        stringOutBuilder1.asObjects();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.wrap((OutputStreamWrapper) null);
      // Undeclared exception!
      try { 
        stringOutBuilder1.asData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.BaseOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.compress();
      // Undeclared exception!
      try { 
        stringOutBuilder1.asData();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileTarget fileTarget0 = new FileTarget(mockFile0);
      OutBuilder outBuilder0 = new OutBuilder(fileTarget0);
      try { 
        outBuilder0.asData();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      OutputStreamWrapper outputStreamWrapper0 = mock(OutputStreamWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputStreamWrapper0).wrap(any(java.io.OutputStream.class));
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.wrap(outputStreamWrapper0);
      // Undeclared exception!
      try { 
        stringOutBuilder1.asZip();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.ZipOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      OutputStreamWrapper outputStreamWrapper0 = mock(OutputStreamWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputStreamWrapper0).wrap(any(java.io.OutputStream.class));
      stringOutBuilder0.compress(outputStreamWrapper0);
      // Undeclared exception!
      try { 
        stringOutBuilder0.asPrint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      Target target0 = byteOutBuilder0.getTarget();
      OutBuilder outBuilder0 = new OutBuilder(target0);
      OutputStream outputStream0 = outBuilder0.asStream();
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      stringOutBuilder0.encodeBase64();
      try { 
        stringOutBuilder0.writeObject(outputStream0);
        fail("Expecting exception: NotSerializableException");
      
      } catch(NotSerializableException e) {
         //
         // java.io.ByteArrayOutputStream
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      WriterWrapper writerWrapper0 = mock(WriterWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(writerWrapper0).wrap(any(java.io.Writer.class));
      byteOutBuilder0.wrap(writerWrapper0);
      // Undeclared exception!
      try { 
        byteOutBuilder0.asPrint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      WriterWrapper writerWrapper0 = mock(WriterWrapper.class, new ViolatedAssumptionAnswer());
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.wrap(writerWrapper0);
      WriterWrapper writerWrapper1 = mock(WriterWrapper.class, new ViolatedAssumptionAnswer());
      ByteOutBuilder byteOutBuilder2 = byteOutBuilder0.wrap(writerWrapper1);
      assertSame(byteOutBuilder2, byteOutBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      OutputStreamWrapper outputStreamWrapper0 = mock(OutputStreamWrapper.class, new ViolatedAssumptionAnswer());
      stringOutBuilder0.wrap(outputStreamWrapper0);
      OutputStreamWrapper outputStreamWrapper1 = mock(OutputStreamWrapper.class, new ViolatedAssumptionAnswer());
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.wrap(outputStreamWrapper1);
      assertSame(stringOutBuilder1, stringOutBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputStreamTarget outputStreamTarget0 = new OutputStreamTarget((OutputStream) null);
      OutBuilder outBuilder0 = new OutBuilder(outputStreamTarget0);
      OutputStream outputStream0 = outBuilder0.asStream();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayTarget byteArrayTarget0 = new ByteArrayTarget();
      OutBuilder outBuilder0 = new OutBuilder(byteArrayTarget0);
      ObjectOutputStream objectOutputStream0 = outBuilder0.asObjects();
      assertNotNull(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      StringOutBuilder stringOutBuilder1 = stringOutBuilder0.compress();
      // Undeclared exception!
      try { 
        stringOutBuilder1.asPrint();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      Target target0 = byteOutBuilder0.getTarget();
      OutBuilder outBuilder0 = new OutBuilder(target0);
      DataOutputStream dataOutputStream0 = outBuilder0.asData();
      assertNotNull(dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileTarget fileTarget0 = new FileTarget(mockFile0);
      OutBuilder outBuilder0 = new OutBuilder(fileTarget0);
      try { 
        outBuilder0.asZip();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
