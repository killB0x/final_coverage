/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:17:21 GMT 2022
 */

package com.github.powerlibraries.io.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.builder.ByteOutBuilder;
import com.github.powerlibraries.io.builder.InBuilder;
import com.github.powerlibraries.io.builder.StringOutBuilder;
import com.github.powerlibraries.io.builder.sources.URLSource;
import com.github.powerlibraries.io.helper.byteout.BAWriter;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharsetHolder_ESTest extends CharsetHolder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s*r=m8:]ns", (String) null, 0, "s*r=m8:]ns", uRLStreamHandler0);
      URLSource uRLSource0 = new URLSource(uRL0);
      InBuilder inBuilder0 = new InBuilder(uRLSource0);
      Charset charset0 = Charset.defaultCharset();
      inBuilder0.setCharset(charset0);
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      Charset charset0 = byteOutBuilder0.getCharset();
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withUTF8();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withUTF16LE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withUTF16BE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withUTF16();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withISO88591();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withCharset(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      // Undeclared exception!
      try { 
        byteOutBuilder0.withCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringOutBuilder stringOutBuilder0 = new StringOutBuilder();
      // Undeclared exception!
      try { 
        stringOutBuilder0.withASCII();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.builder.StringOutBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      // Undeclared exception!
      try { 
        byteOutBuilder0.withCharset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset can not be null
         //
         verifyException("com.github.powerlibraries.io.builder.CharsetHolder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      Charset charset0 = Charset.defaultCharset();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withCharset(charset0);
      assertSame(byteOutBuilder0, byteOutBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withUTF16LE();
      assertSame(byteOutBuilder0, byteOutBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withUTF16();
      assertSame(byteOutBuilder0, byteOutBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withUTF8();
      assertSame(byteOutBuilder1, byteOutBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withASCII();
      assertSame(byteOutBuilder1, byteOutBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      // Undeclared exception!
      try { 
        byteOutBuilder0.withCharset("com.github.powerlibraries.io.builder.sources.StringSource");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.github.powerlibraries.io.builder.sources.StringSource
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      ByteOutBuilder byteOutBuilder1 = byteOutBuilder0.withUTF16BE();
      assertSame(byteOutBuilder1, byteOutBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOutBuilder byteOutBuilder0 = new ByteOutBuilder();
      byteOutBuilder0.withISO88591();
      BAWriter bAWriter0 = byteOutBuilder0.asWriter();
      assertEquals(0, bAWriter0.bufferSize());
  }
}
