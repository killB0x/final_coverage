/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:10:39 GMT 2022
 */

package com.github.powerlibraries.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.In;
import com.github.powerlibraries.io.builder.InBuilder;
import com.github.powerlibraries.io.builder.sources.ByteArraySource;
import com.github.powerlibraries.io.builder.sources.Source;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.URL;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class In_ESTest extends In_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      InBuilder inBuilder0 = In.bytes(byteArray0, (int) (byte) (-30), 0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InBuilder inBuilder0 = In.file("", "");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      InBuilder inBuilder0 = In.resource(class0, "");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.resource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.resource("{;~uy*iK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given resource was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        In.resource(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.resource((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given resource was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      InBuilder inBuilder0 = In.resource(uRL0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The given source was null");
      InBuilder inBuilder0 = In.file((File) mockFile0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.bytes((byte[]) null, (-2020), 3073);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given bytes were null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.bytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given bytes were null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InBuilder inBuilder0 = In.bytes(byteArray0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.source((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given source was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArraySource byteArraySource0 = new ByteArraySource(byteArray0);
      InBuilder inBuilder0 = In.source(byteArraySource0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.string((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given string was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InBuilder inBuilder0 = In.string("Q&_h8{u", charset0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.string((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given string was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InBuilder inBuilder0 = In.string("The giv%n byteskwpre null");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.stream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given inputstream was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InBuilder inBuilder0 = In.stream(pipedInputStream0);
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.file((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.file("charset can not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.file((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("C6ZVxX(f@6", "C6ZVxX(f@6");
      // Undeclared exception!
      try { 
        In.file((File) mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      InBuilder inBuilder0 = In.file((File) mockFile0, "");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.file((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        In.file((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given file was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InBuilder inBuilder0 = In.file("AzMC;");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InBuilder inBuilder0 = In.resource("");
      assertNotNull(inBuilder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        In.resource(class0, "Th)eIM;=/j{yR`R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The given resource was null
         //
         verifyException("com.github.powerlibraries.io.In", e);
      }
  }
}
