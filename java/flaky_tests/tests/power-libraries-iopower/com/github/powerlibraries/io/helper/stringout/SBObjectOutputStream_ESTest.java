/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:29:06 GMT 2022
 */

package com.github.powerlibraries.io.helper.stringout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.helper.stringout.SBObjectOutputStream;
import com.github.powerlibraries.io.helper.stringout.StringBuilderOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SBObjectOutputStream_ESTest extends SBObjectOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringBuilderOutputStream0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(mockPrintStream0, stringBuilderOutputStream0);
      String string0 = sBObjectOutputStream0.toString();
      assertEquals("\uFFFD\uFFFD\u0000\u0005", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "iq5$VWZ:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(mockPrintStream0, stringBuilderOutputStream0);
      String string0 = sBObjectOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "iq5$VWZ:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(mockPrintStream0, stringBuilderOutputStream0);
      StringBuilderOutputStream stringBuilderOutputStream1 = sBObjectOutputStream0.getUnderlyingOutput();
      assertSame(stringBuilderOutputStream1, stringBuilderOutputStream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringBuilderOutputStream0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(mockPrintStream0, stringBuilderOutputStream0);
      StringBuilderOutputStream stringBuilderOutputStream1 = sBObjectOutputStream0.getUnderlyingOutput();
      assertSame(stringBuilderOutputStream0, stringBuilderOutputStream1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      SBObjectOutputStream sBObjectOutputStream0 = null;
      try {
        sBObjectOutputStream0 = new SBObjectOutputStream((OutputStream) null, stringBuilderOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream$BlockDataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SBObjectOutputStream sBObjectOutputStream0 = null;
      try {
        sBObjectOutputStream0 = new SBObjectOutputStream(pipedOutputStream0, stringBuilderOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringBuilderOutputStream0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(mockPrintStream0, (StringBuilderOutputStream) null);
      StringBuilderOutputStream stringBuilderOutputStream1 = sBObjectOutputStream0.getUnderlyingOutput();
      assertNull(stringBuilderOutputStream1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      SBObjectOutputStream sBObjectOutputStream0 = new SBObjectOutputStream(stringBuilderOutputStream0, (StringBuilderOutputStream) null);
      // Undeclared exception!
      try { 
        sBObjectOutputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.helper.stringout.SBObjectOutputStream", e);
      }
  }
}
