/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:27:47 GMT 2022
 */

package com.github.powerlibraries.io.helper.byteout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.helper.byteout.BAObjectOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BAObjectOutputStream_ESTest extends BAObjectOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(mockPrintStream0, byteArrayOutputStream0);
      String string0 = bAObjectOutputStream0.toString();
      assertEquals("\uFFFD\uFFFD\u0000\u0005", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]?Mhgqb f5)", "]?Mhgqb f5)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4751);
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(mockPrintStream0, byteArrayOutputStream0);
      String string0 = bAObjectOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(mockPrintStream0, (ByteArrayOutputStream) null);
      ByteArrayOutputStream byteArrayOutputStream1 = bAObjectOutputStream0.getUnderlyingOutput();
      assertNull(byteArrayOutputStream1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]?Mhgqb f5)", "]?Mhgqb f5)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4751);
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(mockPrintStream0, byteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = bAObjectOutputStream0.getUnderlyingOutput();
      assertSame(byteArrayOutputStream1, byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BAObjectOutputStream bAObjectOutputStream0 = null;
      try {
        bAObjectOutputStream0 = new BAObjectOutputStream((OutputStream) null, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BAObjectOutputStream bAObjectOutputStream0 = null;
      try {
        bAObjectOutputStream0 = new BAObjectOutputStream(pipedOutputStream0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(mockPrintStream0, byteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = bAObjectOutputStream0.getUnderlyingOutput();
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream1.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BAObjectOutputStream bAObjectOutputStream0 = new BAObjectOutputStream(byteArrayOutputStream0, (ByteArrayOutputStream) null);
      // Undeclared exception!
      try { 
        bAObjectOutputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.powerlibraries.io.helper.byteout.BAObjectOutputStream", e);
      }
  }
}
