/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 13 23:26:56 GMT 2022
 */

package com.github.powerlibraries.io.helper.stringout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.powerlibraries.io.helper.stringout.StringBuilderOutputStream;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringBuilderOutputStream_ESTest extends StringBuilderOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      stringBuilderOutputStream0.write(0);
      String string0 = stringBuilderOutputStream0.getResult(charset0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      String string0 = stringBuilderOutputStream0.getResult(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      stringBuilderOutputStream0.write((-352));
      String string0 = stringBuilderOutputStream0.getResult();
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      String string0 = stringBuilderOutputStream0.getResult();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream(charset0);
      stringBuilderOutputStream0.setCharset(charset0);
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream((Charset) null);
      // Undeclared exception!
      try { 
        stringBuilderOutputStream0.getResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringBuilderOutputStream stringBuilderOutputStream0 = new StringBuilderOutputStream((Charset) null);
      // Undeclared exception!
      try { 
        stringBuilderOutputStream0.getResult((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
