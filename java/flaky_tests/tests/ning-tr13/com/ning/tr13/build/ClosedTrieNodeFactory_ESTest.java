/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:22:58 GMT 2022
 */

package com.ning.tr13.build;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.TrieConstants;
import com.ning.tr13.build.ClosedTrieNode;
import com.ning.tr13.build.ClosedTrieNodeFactory;
import com.ning.tr13.impl.vint.VIntNodeFactory;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClosedTrieNodeFactory_ESTest extends ClosedTrieNodeFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tw", true);
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 5);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-1), byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[1] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[2] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[3] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[4] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-95), closedTrieNodeArray0);
      closedTrieNodeFactory_SimpleBranch0.serializeTo(mockFileOutputStream0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)5, closedTrieNodeArray0);
      byte[] byteArray0 = new byte[5];
      int int0 = closedTrieNodeFactory_SimpleBranch0.serialize(byteArray0, 1);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-96), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 5);
      byte[] byteArray0 = new byte[1];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)6, byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      byte[] byteArray1 = new byte[8];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode1 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)6, byteArray1);
      closedTrieNodeArray0[1] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      closedTrieNodeArray0[2] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      closedTrieNodeArray0[3] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      closedTrieNodeArray0[4] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)6, closedTrieNodeArray0);
      byte[] byteArray2 = closedTrieNodeFactory_SimpleBranch0.serialize();
      assertEquals(40, byteArray2.length);
      assertEquals(2, closedTrieNodeFactory_SimpleBranch0.typeBits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 9);
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)1, byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[1] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[2] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[3] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[4] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[5] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[6] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[7] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[8] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte) (-16), closedTrieNodeArray0);
      long long0 = closedTrieNodeFactory_SimpleBranch0.length();
      assertEquals(56L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 5);
      byte[] byteArray0 = new byte[1];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)6, byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      byte[] byteArray1 = new byte[8];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode1 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)6, byteArray1);
      closedTrieNodeArray0[1] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      closedTrieNodeArray0[2] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode1;
      closedTrieNodeArray0[3] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[4] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)6, closedTrieNodeArray0);
      byte[] byteArray2 = closedTrieNodeFactory_SimpleBranch0.serialize();
      assertEquals(2, closedTrieNodeFactory_SimpleBranch0.typeBits());
      assertEquals(25, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)2, closedTrieNodeArray0);
      byte[] byteArray0 = new byte[0];
      int int0 = closedTrieNodeFactory_SimpleBranch0.serializeChildren(byteArray0, (byte)2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-115), closedTrieNodeArray0);
      long long0 = closedTrieNodeFactory_SimpleBranch0.lengthOfContent();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-4), byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      closedTrieNodeFactory_SerializedNode0.serializeTo(byteArrayOutputStream0, byteArray0);
      assertEquals(0, TrieConstants.TYPE_LEAF_SIMPLE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      byte[] byteArray1 = closedTrieNodeFactory_SerializedNode0.serialize();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 3);
      byte[] byteArray0 = new byte[3];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)3, byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[1] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[2] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)52, closedTrieNodeArray0);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SimpleBranch0.serialize(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-44), byteArray0);
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 1);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte) (-44), closedTrieNodeArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tw", true);
      closedTrieNodeFactory_SimpleBranch0.serializeTo(mockFileOutputStream0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-116), (byte[]) null);
      int int0 = closedTrieNodeFactory_SerializedNode0.typeBits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VIntNodeFactory vIntNodeFactory0 = new VIntNodeFactory();
      byte[] byteArray0 = new byte[2];
      ClosedTrieNodeFactory.SerializedNode<Long> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Long>((byte)3, byteArray0);
      ClosedTrieNode<Long> closedTrieNode0 = vIntNodeFactory0.serialized(closedTrieNodeFactory_SerializedNode0);
      assertEquals(6, TrieConstants.FIRST_BYTE_BITS_FOR_BRANCHES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)0, byteArray0);
      boolean boolean0 = closedTrieNodeFactory_SerializedNode0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VIntNodeFactory vIntNodeFactory0 = new VIntNodeFactory();
      Long long0 = new Long((byte)5);
      ClosedTrieNode<Long> closedTrieNode0 = vIntNodeFactory0.simpleLeaf((byte)5, long0);
      assertEquals(64, ClosedTrieNode.MINIMUM_TEMP_BUFFER_LENGTH);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 6);
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte) (-1), closedTrieNodeArray0);
      boolean boolean0 = closedTrieNodeFactory_SimpleBranch0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)2, closedTrieNodeArray0);
      byte[] byteArray0 = new byte[8];
      int int0 = closedTrieNodeFactory_SimpleBranch0.serialize(byteArray0, (int) (byte)2);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-96), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }
}
