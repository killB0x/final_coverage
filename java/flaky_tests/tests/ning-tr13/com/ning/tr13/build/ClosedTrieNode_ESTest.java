/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:13:44 GMT 2022
 */

package com.ning.tr13.build;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.build.ClosedTrieNode;
import com.ning.tr13.build.ClosedTrieNodeFactory;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClosedTrieNode_ESTest extends ClosedTrieNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[] closedTrieNodeArray0 = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[]) Array.newInstance(ClosedTrieNode.class, 5);
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte)0, byteArray0);
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
      
      closedTrieNodeArray0[2] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[2]._addTypeBits(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)0, byteArray0);
      File file0 = MockFile.createTempFile(")kCyy2AQ", "z~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      closedTrieNodeFactory_SerializedNode0.serializeTo(mockFileOutputStream0, byteArray0);
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[] closedTrieNodeArray0 = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte) (-113), closedTrieNodeArray0);
      closedTrieNodeFactory_SimpleBranch0._addTypeBits(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-113), closedTrieNodeFactory_SimpleBranch0.nextByte());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte)0, byteArray0);
      closedTrieNodeFactory_SerializedNode0.typeBits();
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 2);
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)90, closedTrieNodeArray0);
      closedTrieNodeFactory_SimpleBranch0.typeBits();
      assertEquals((byte)90, closedTrieNodeFactory_SimpleBranch0.nextByte());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)0, byteArray0);
      closedTrieNodeFactory_SerializedNode0.serialize(byteArray0, (int) (byte)0);
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-48), (byte[]) null);
      closedTrieNodeFactory_SerializedNode0.serialize();
      assertEquals((byte) (-48), closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      closedTrieNodeFactory_SerializedNode0.serialize();
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)85, byteArray0);
      closedTrieNodeFactory_SerializedNode0.serialize();
      assertEquals((byte)85, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)0, byteArray0);
      byte byte0 = closedTrieNodeFactory_SerializedNode0.nextByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[] closedTrieNodeArray0 = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[]) Array.newInstance(ClosedTrieNode.class, 6);
      ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte)67, closedTrieNodeArray0);
      byte byte0 = closedTrieNodeFactory_SimpleBranch0.nextByte();
      assertEquals((byte)67, byte0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte)0, byteArray0);
      closedTrieNodeFactory_SerializedNode0.length();
      assertEquals((byte)0, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[] closedTrieNodeArray0 = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[]) Array.newInstance(ClosedTrieNode.class, 5);
      ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte) (-93), byteArray0);
      assertEquals((byte) (-93), closedTrieNodeFactory_SerializedNode0.nextByte());
      
      closedTrieNodeArray0[0] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[1] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[2] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[3] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      closedTrieNodeArray0[4] = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte)0, closedTrieNodeArray0);
      closedTrieNodeFactory_SimpleBranch0.length();
      assertEquals((byte)0, closedTrieNodeFactory_SimpleBranch0.nextByte());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Integer>> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Integer>>((byte) (-73), byteArray0);
      closedTrieNodeFactory_SerializedNode0.isLeaf();
      assertEquals((byte) (-73), closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-87), byteArray0);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0.serializeTo((OutputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.ClosedTrieNodeFactory$SerializedNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)28, closedTrieNodeArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SimpleBranch0.serializeTo(pipedOutputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.ning.tr13.util.VInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte) (-87), byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        closedTrieNodeFactory_SerializedNode0.serializeTo(pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNode<Object>[] closedTrieNodeArray0 = (ClosedTrieNode<Object>[]) Array.newInstance(ClosedTrieNode.class, 3);
      ClosedTrieNodeFactory.SimpleBranch<Object> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Object>((byte)0, closedTrieNodeArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Object>) closedTrieNodeFactory_SimpleBranch0;
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SimpleBranch0.serialize(byteArray0, 3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-87), byteArray0);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0.serialize((byte[]) null, (int) (byte) (-87));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-87), byteArray0);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0.serialize(byteArray0, (int) (byte) (-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 1);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)64, closedTrieNodeArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0;
      // Undeclared exception!
      closedTrieNodeArray0[0].serialize();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-48), (ClosedTrieNode<Integer>[]) null);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SimpleBranch0.serialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.ClosedTrieNodeFactory$SimpleBranch", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 4);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-55), closedTrieNodeArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0;
      // Undeclared exception!
      closedTrieNodeArray0[0].length();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)1, (byte[]) null);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.ClosedTrieNodeFactory$SerializedNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 1);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)96, closedTrieNodeArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0;
      // Undeclared exception!
      closedTrieNodeFactory_SimpleBranch0.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)90, (ClosedTrieNode<Integer>[]) null);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SimpleBranch0.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-69), (byte[]) null);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0._addTypeBits((byte[]) null, (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.ClosedTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-87), byteArray0);
      // Undeclared exception!
      try { 
        closedTrieNodeFactory_SerializedNode0._addTypeBits(byteArray0, (byte) (-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -87 out of bounds for length 5
         //
         verifyException("com.ning.tr13.build.ClosedTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)0, closedTrieNodeArray0);
      int int0 = closedTrieNodeFactory_SimpleBranch0.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SimpleBranch0);
      assertEquals(0, int0);
      assertEquals((byte)0, closedTrieNodeFactory_SimpleBranch0.nextByte());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)0, closedTrieNodeArray0);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)24, byteArray0);
      int int0 = closedTrieNodeFactory_SimpleBranch0.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0);
      assertEquals(1, int0);
      assertEquals((byte)24, closedTrieNodeFactory_SerializedNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)0, closedTrieNodeArray0);
      byte[] byteArray0 = closedTrieNodeFactory_SimpleBranch0.serialize();
      ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[] closedTrieNodeArray1 = (ClosedTrieNode<ClosedTrieNodeFactory.SimpleBranch<Object>>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>> closedTrieNodeFactory_SimpleBranch1 = new ClosedTrieNodeFactory.SimpleBranch<ClosedTrieNodeFactory.SimpleBranch<Object>>((byte) (-113), closedTrieNodeArray1);
      closedTrieNodeFactory_SimpleBranch1._addTypeBits(byteArray0, 0);
      assertEquals((byte) (-113), closedTrieNodeFactory_SimpleBranch1.nextByte());
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ClosedTrieNodeFactory.SerializedNode<Object> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Object>((byte) (-103), byteArray0);
      byte byte0 = closedTrieNodeFactory_SerializedNode0.nextByte();
      assertEquals((byte) (-103), byte0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-49), closedTrieNodeArray0);
      byte[] byteArray0 = new byte[0];
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-49), byteArray0);
      int int0 = closedTrieNodeFactory_SimpleBranch0.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0);
      assertEquals((-1), int0);
      assertEquals((byte) (-49), closedTrieNodeFactory_SerializedNode0.nextByte());
  }
}
