/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:05:05 GMT 2022
 */

package com.ning.tr13.build;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.build.ClosedTrieNode;
import com.ning.tr13.build.ClosedTrieNodeFactory;
import com.ning.tr13.build.OpenTrieNode;
import java.lang.reflect.Array;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OpenTrieNode_ESTest extends OpenTrieNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-46), (Integer) null);
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      Integer integer0 = new Integer((-2283));
      OpenTrieNode<Object> openTrieNode1 = new OpenTrieNode<Object>((byte)0, integer0);
      openTrieNode1.getNodeByte();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-22));
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Integer integer1 = new Integer((-2147450090));
      Integer integer2 = new Integer((-2147450090));
      OpenTrieNode<Integer> openTrieNode2 = new OpenTrieNode<Integer>((byte)64, integer2);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)64, byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory1, openTrieNode2, true);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode1 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-29), byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      boolean boolean0 = true;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(closedTrieNode0).isLeaf();
      doReturn("").when(closedTrieNode0).toString();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((byte) (-45));
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte)6, integer0);
      Integer integer2 = new Integer(49);
      OpenTrieNode<Integer> openTrieNode2 = new OpenTrieNode<Integer>((byte) (-45), (Integer) null);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)22, byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode2.close(closedTrieNodeFactory1, false);
      openTrieNode0.getCurrentChild();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode1.close(closedTrieNodeFactory2, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((byte) (-45));
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte)6, integer0);
      boolean boolean0 = false;
      OpenTrieNode<Integer> openTrieNode2 = new OpenTrieNode<Integer>((byte)0, integer1);
      openTrieNode2.addNode(closedTrieNodeFactory0, openTrieNode1, false);
      Integer integer2 = new Integer((byte) (-1));
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode2.addNode(closedTrieNodeFactory1, openTrieNode0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-45);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode2.close(closedTrieNodeFactory2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-40), integer0);
      boolean boolean0 = true;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory1, openTrieNode1, true);
      OpenTrieNode<Integer> openTrieNode2 = new OpenTrieNode<Integer>((byte) (-1), (Integer) null);
      byte byte1 = openTrieNode2._nodeByte;
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 0);
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-1), closedTrieNodeArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-40), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(closedTrieNode0).isLeaf();
      doReturn(1170L).when(closedTrieNode0).length();
      doReturn("cW |=/VwvRm,mS!>n0C").when(closedTrieNode0).toString();
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 1);
      closedTrieNodeArray0[0] = closedTrieNode0;
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-1), closedTrieNodeArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      ClosedTrieNode<Integer> closedTrieNode1 = openTrieNode1.close(closedTrieNodeFactory1, false);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory2).serialized(any(com.ning.tr13.build.ClosedTrieNode.class));
      doReturn(closedTrieNode0).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      doReturn(closedTrieNode1).when(closedTrieNodeFactory2).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      ClosedTrieNode<Integer> closedTrieNode2 = openTrieNode0.close(closedTrieNodeFactory2, false);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNode2).when(closedTrieNodeFactory3).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory3, openTrieNode1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory4 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory4).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory4).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-22));
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      openTrieNode1._nodeByte = (byte)1;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Integer integer1 = new Integer((-2147450090));
      Integer integer2 = new Integer((-2147450090));
      OpenTrieNode<Integer> openTrieNode2 = new OpenTrieNode<Integer>((byte)64, integer2);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)64, byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory1, openTrieNode2, true);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode1 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-29), byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory2).serialized(any(com.ning.tr13.build.ClosedTrieNode.class));
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      doReturn(closedTrieNodeFactory_SerializedNode1).when(closedTrieNodeFactory2).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      closedTrieNodeFactory_SerializedNode1.compareTo((ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0);
      openTrieNode0.close(closedTrieNodeFactory2, false);
      openTrieNode2.getCurrentChild();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory3).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory3).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      boolean boolean0 = true;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 1);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode1.close(closedTrieNodeFactory1, true);
      closedTrieNodeArray0[0] = null;
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)98, closedTrieNodeArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      openTrieNode0.getNodeByte();
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-45), (byte[]) null);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode1.close(closedTrieNodeFactory1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory2, openTrieNode1, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      openTrieNode1.addNode(closedTrieNodeFactory1, openTrieNode0, true);
      openTrieNode0.getNodeByte();
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-45), (byte[]) null);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        openTrieNode0.addNode(closedTrieNodeFactory3, openTrieNode1, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(closedTrieNode0).isLeaf();
      doReturn(1170L).when(closedTrieNode0).length();
      doReturn("cW |=/VwvRm,mS!>n0C").when(closedTrieNode0).toString();
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 1);
      closedTrieNodeArray0[0] = closedTrieNode0;
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte) (-1), closedTrieNodeArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      ClosedTrieNode<Integer> closedTrieNode1 = openTrieNode1.close(closedTrieNodeFactory1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory2).serialized(any(com.ning.tr13.build.ClosedTrieNode.class));
      doReturn(closedTrieNode0).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      doReturn(closedTrieNode1).when(closedTrieNodeFactory2).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory2, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      openTrieNode0.getNodeByte();
      byte[] byteArray0 = new byte[7];
      ArrayList<ClosedTrieNode<Integer>> arrayList0 = new ArrayList<ClosedTrieNode<Integer>>();
      openTrieNode0._closedChildren = arrayList0;
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)121, byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory1, openTrieNode1, true);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory1, false);
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      ArrayList<ClosedTrieNode<Integer>> arrayList0 = new ArrayList<ClosedTrieNode<Integer>>();
      openTrieNode1._closedChildren = arrayList0;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      openTrieNode0.getNodeByte();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      openTrieNode1.addNode(closedTrieNodeFactory2, openTrieNode0, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        openTrieNode1.addNode(closedTrieNodeFactory3, openTrieNode0, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode1.close(closedTrieNodeFactory1, false);
      openTrieNode0.getCurrentChild();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode1.close(closedTrieNodeFactory2, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((byte)0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte)0, integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      ClosedTrieNode<Integer>[] closedTrieNodeArray0 = (ClosedTrieNode<Integer>[]) Array.newInstance(ClosedTrieNode.class, 6);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      closedTrieNodeArray0[0] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode0;
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory2, true);
      closedTrieNodeArray0[1] = null;
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode1 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      closedTrieNodeArray0[2] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode1;
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode2 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      closedTrieNodeArray0[3] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode2;
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory3 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory3).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory3, true);
      closedTrieNodeArray0[4] = null;
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode3 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte)0, byteArray0);
      closedTrieNodeArray0[5] = (ClosedTrieNode<Integer>) closedTrieNodeFactory_SerializedNode3;
      ClosedTrieNodeFactory.SimpleBranch<Integer> closedTrieNodeFactory_SimpleBranch0 = new ClosedTrieNodeFactory.SimpleBranch<Integer>((byte)0, closedTrieNodeArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory4 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SimpleBranch0).when(closedTrieNodeFactory4).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory4, true);
      openTrieNode0.addNode(closedTrieNodeFactory1, (OpenTrieNode<Integer>) null, false);
      Integer integer1 = new Integer((byte)0);
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte)0, integer1);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode1._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(closedTrieNode0).isLeaf();
      doReturn(")T2(7.OwQ[").when(closedTrieNode0).toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-45), byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).serialized(any(com.ning.tr13.build.ClosedTrieNode.class));
      doReturn(closedTrieNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode<Integer>) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory2, openTrieNode1, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-67), (Integer) null);
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-120);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((byte) (-120));
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-120), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, false);
      byteArray0[8] = (byte) (-120);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-120), byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).serialized(any(com.ning.tr13.build.ClosedTrieNode.class));
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class));
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory1, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory2).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory2, openTrieNode1, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      boolean boolean0 = true;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(closedTrieNode0).isLeaf();
      doReturn((String) null).when(closedTrieNode0).toString();
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn(closedTrieNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).valueBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      boolean boolean0 = true;
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0._nodeByte;
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = null;
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-67), (Integer) null);
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-120);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((byte) (-120));
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-120), integer1);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, false);
      byteArray0[8] = (byte) (-120);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-120), byteArray0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleBranch(any(byte.class) , any(com.ning.tr13.build.ClosedTrieNode[].class));
      doReturn(closedTrieNodeFactory_SerializedNode0).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        openTrieNode0.close(closedTrieNodeFactory1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode1._nodeByte;
      ClosedTrieNode<Integer> closedTrieNode0 = (ClosedTrieNode<Integer>) mock(ClosedTrieNode.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      openTrieNode1.addNode(closedTrieNodeFactory1, openTrieNode0, true);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory2 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        openTrieNode1.close(closedTrieNodeFactory2, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((byte)2);
      OpenTrieNode<Object> openTrieNode0 = new OpenTrieNode<Object>((byte)2, integer0);
      ClosedTrieNodeFactory<Object> closedTrieNodeFactory0 = null;
      openTrieNode0._nodeValue = (Object) integer0;
      Object object0 = new Object();
      OpenTrieNode<Object> openTrieNode1 = new OpenTrieNode<Object>((byte)20, object0);
      openTrieNode0._nodeByte = (byte) (-36);
      boolean boolean0 = true;
      openTrieNode1.addNode((ClosedTrieNodeFactory<Object>) null, openTrieNode0, true);
      // Undeclared exception!
      try { 
        openTrieNode1.close((ClosedTrieNodeFactory<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-67));
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-67), integer0);
      Integer integer1 = new Integer((-1209));
      byte byte0 = (byte) (-39);
      Integer integer2 = new Integer((byte) (-67));
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-39), integer2);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = null;
      openTrieNode0.addNode((ClosedTrieNodeFactory<Integer>) null, openTrieNode1, false);
      ClosedTrieNodeFactory.SerializedNode<Integer> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<Integer>((byte) (-67), (byte[]) null);
      // Undeclared exception!
      try { 
        openTrieNode0.close((ClosedTrieNodeFactory<Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-28), integer1);
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-28), integer0);
      openTrieNode0.addNode((ClosedTrieNodeFactory<Integer>) null, openTrieNode1, true);
      // Undeclared exception!
      try { 
        openTrieNode0.addNode((ClosedTrieNodeFactory<Integer>) null, openTrieNode1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-1), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-45), integer0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, true);
      byte byte0 = openTrieNode0.getNodeByte();
      assertEquals((byte) (-1), byte0);
      
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory1 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory1).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.addNode(closedTrieNodeFactory1, openTrieNode1, true);
      assertEquals((byte) (-1), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-89));
      OpenTrieNode<Object> openTrieNode0 = new OpenTrieNode<Object>((byte) (-89), integer0);
      ClosedTrieNodeFactory<Object> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Object>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Object> openTrieNode1 = new OpenTrieNode<Object>((byte) (-97), openTrieNode0);
      openTrieNode0.addNode(closedTrieNodeFactory0, openTrieNode1, false);
      assertEquals((byte) (-97), openTrieNode1.getNodeByte());
      assertEquals((byte) (-89), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-67), (Integer) null);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory0).simpleLeaf(any(byte.class) , anyInt());
      openTrieNode0.close(closedTrieNodeFactory0, false);
      openTrieNode0._nodeValue = null;
      openTrieNode0.getCurrentChild();
      assertEquals((byte) (-67), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte)0, integer0);
      openTrieNode0.getCurrentChild();
      assertEquals((byte)0, openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-4519));
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-28), integer0);
      OpenTrieNode<Integer> openTrieNode1 = new OpenTrieNode<Integer>((byte) (-5), integer0);
      openTrieNode1.addNode((ClosedTrieNodeFactory<Integer>) null, openTrieNode0, false);
      byte byte0 = openTrieNode1.getNodeByte();
      assertEquals((byte) (-5), byte0);
      
      openTrieNode0.addNode((ClosedTrieNodeFactory<Integer>) null, openTrieNode1, false);
      assertEquals((byte) (-28), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte) (-85), integer0);
      ClosedTrieNodeFactory<Integer> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Integer>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      OpenTrieNode<Integer> openTrieNode1 = openTrieNode0._currentChild;
      openTrieNode0.addNode(closedTrieNodeFactory0, (OpenTrieNode<Integer>) null, true);
      assertEquals((byte) (-85), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((byte)88);
      OpenTrieNode<Object> openTrieNode0 = new OpenTrieNode<Object>((byte)88, integer0);
      byte byte0 = openTrieNode0.getNodeByte();
      assertEquals((byte)88, byte0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer((byte)88);
      OpenTrieNode<Integer> openTrieNode0 = new OpenTrieNode<Integer>((byte)88, integer0);
      openTrieNode0.getCurrentChild();
      // Undeclared exception!
      try { 
        openTrieNode0.close((ClosedTrieNodeFactory<Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.OpenTrieNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OpenTrieNode<Object> openTrieNode0 = new OpenTrieNode<Object>((byte)1, (Object) null);
      ClosedTrieNodeFactory<Object> closedTrieNodeFactory0 = (ClosedTrieNodeFactory<Object>) mock(ClosedTrieNodeFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ClosedTrieNode) null).when(closedTrieNodeFactory0).simpleLeaf(any(byte.class) , any());
      openTrieNode0.close(closedTrieNodeFactory0, true);
      assertEquals((byte)1, openTrieNode0.getNodeByte());
  }
}
