/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 09:49:30 GMT 2022
 */

package com.ning.tr13.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.util.UTF8Codec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8Codec_ESTest extends UTF8Codec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("", 0, 74, false);
      assertEquals(74, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("\u0001\uFFFD\uF314\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000", 525930, 111, true);
      assertEquals(526067, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("3BFq(5v<V(NT@& xnx", 56320, 56320, true);
      assertEquals(112659, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("Vdmm2}/g(lO", 0, 56320, false);
      assertEquals(56331, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "@?");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(56331, byteArray0.length);
      assertEquals(56333, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("", 262144, 262144, true);
      assertEquals(524288, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "[o");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(524288, byteArray0.length);
      assertEquals(524290, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("", 1, 1, true);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0, 0, 0);
      assertEquals(2, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("tPwEh*Seno/}:trm", 56324, 56324, false);
      assertEquals(112664, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      assertEquals(112664, byteArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      UTF8Codec.encodeAsUTF8(string0, 1, 1, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8((String) null, (-1067), (-1067), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.util.UTF8Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8("", (-546), (-546), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1092
         //
         verifyException("com.ning.tr13.util.UTF8Codec$ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        UTF8Codec.decodeFromUTF8(byteArray0, 706, 706);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UTF8Codec uTF8Codec0 = new UTF8Codec(1097);
      assertNotNull(uTF8Codec0);
      
      byte[] byteArray0 = uTF8Codec0.encodeNonReentrant("\u0000\u10C3\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("tPwEh*Seno/}:trm", 56324, 56324, false);
      assertEquals(112664, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      assertEquals(112664, byteArray0.length);
      assertNotNull(string0);
      
      String string1 = UTF8Codec.decodeFromUTF8(byteArray0);
      assertEquals(112664, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      UTF8Codec uTF8Codec0 = new UTF8Codec(56324);
      assertNotNull(uTF8Codec0);
      
      // Undeclared exception!
      uTF8Codec0.encodeNonReentrant(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UTF8Codec uTF8Codec0 = new UTF8Codec(400);
      assertNotNull(uTF8Codec0);
      
      byte[] byteArray0 = uTF8Codec0.encodeNonReentrant("");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8("", (-2654), 65536, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: total len assumed to be 62882, copied 65536 bytes
         //
         verifyException("com.ning.tr13.util.UTF8Codec$ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("", 0, 0, false);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8("\uFFFD", 525974, (int) (byte) (-16), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-17);
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("\uFFFD\u0005\uFFFD\uFFFD", string0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-87), (byte)5, (byte) (-1), (byte) (-17)}, byteArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "\uFFFD\u0005\uFFFD\uFFFD");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-87), (byte)5, (byte) (-1), (byte) (-17)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = UTF8Codec.encodeAsUTF8("\uFFFD\u0005\uFFFD\uFFFD", 525930, 57364, false);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(583304, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      UTF8Codec uTF8Codec0 = null;
      try {
        uTF8Codec0 = new UTF8Codec((byte) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("com.ning.tr13.util.UTF8Codec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("\u0000\u0365\u0000\u0000\u0000", 2006, 240, true);
      assertEquals(2252, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("\uFFFD\uFFFD\u0000\uFFFD\uFFFD", 525930, 57343, false);
      assertEquals(583286, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "\u0000\u0000\u60C3\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(22, byteArray0.length);
      assertEquals(44, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("\uFFFD", 363, 525974, false);
      assertEquals(526340, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "\uFFFD");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(526340, byteArray0.length);
      assertEquals(526343, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("", 56320, 56320, false);
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      // Undeclared exception!
      UTF8Codec.encodeAsUTF8(byteArray0, string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "");
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("\"vp%x@");
      byte[] byteArray1 = UTF8Codec.encodeAsUTF8(byteArray0, "\"vp%x@");
      assertArrayEquals(new byte[] {(byte)34, (byte)118, (byte)112, (byte)37, (byte)120, (byte)64}, byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UTF8Codec uTF8Codec0 = new UTF8Codec(103);
      uTF8Codec0._encodingBuffer = byteArray0;
      byte[] byteArray1 = uTF8Codec0.encodeNonReentrant("\uFFFD\u0000");
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-65), (byte) (-67), (byte)0}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UTF8Codec uTF8Codec0 = new UTF8Codec((byte)0);
      byte[] byteArray0 = new byte[1];
      uTF8Codec0._encodingBuffer = byteArray0;
      byte[] byteArray1 = uTF8Codec0.encodeNonReentrant("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UTF8Codec uTF8Codec0 = new UTF8Codec((byte)0);
      byte[] byteArray0 = uTF8Codec0.encodeNonReentrant("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("w~~$_w-m", 0, 2058, false);
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0, 0, 2058);
      UTF8Codec uTF8Codec0 = new UTF8Codec(1);
      byte[] byteArray1 = uTF8Codec0.encodeNonReentrant(string0);
      assertEquals(2058, byteArray1.length);
      assertEquals(2066, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("tPwEh*Seno/}:trm", 56320, 56320, false);
      String string0 = UTF8Codec.decodeFromUTF8(byteArray0);
      // Undeclared exception!
      UTF8Codec.encodeAsUTF8(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = UTF8Codec.decodeFromUTF8((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8("!PT;;+8", (-3152), 127, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-3152)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.encodeAsUTF8((byte[]) null, "twwEh*Seno/}:trm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        UTF8Codec.decodeFromUTF8((byte[]) null, 3464, 3464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UTF8Codec uTF8Codec0 = new UTF8Codec();
      // Undeclared exception!
      try { 
        uTF8Codec0.encodeNonReentrant((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = UTF8Codec.encodeAsUTF8("");
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }
}
