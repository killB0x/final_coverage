/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:10:12 GMT 2022
 */

package com.ning.tr13;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.KeyValueReader;
import com.ning.tr13.KeyValueSource;
import com.ning.tr13.build.KeyStringValueReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyValueReader_ESTest extends KeyValueReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0);
      KeyValueSource.ValueCallback<String> keyValueSource_ValueCallback0 = (KeyValueSource.ValueCallback<String>) mock(KeyValueSource.ValueCallback.class, new ViolatedAssumptionAnswer());
      keyStringValueReader0.readAll(keyValueSource_ValueCallback0);
      assertEquals(1, keyStringValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-49);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0, ';');
      KeyValueSource.ValueCallback<String> keyValueSource_ValueCallback0 = (KeyValueSource.ValueCallback<String>) mock(KeyValueSource.ValueCallback.class, new ViolatedAssumptionAnswer());
      keyStringValueReader0.readAll(keyValueSource_ValueCallback0);
      assertEquals(1, keyStringValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = MockFile.createTempFile("c}mPZfW;)aA.N0f", "{QlW~Q>d");
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(file0);
      keyStringValueReader0.setCloseWhenDone(false);
      assertEquals(0, keyStringValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)65);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0, '0');
      // Undeclared exception!
      try { 
        keyStringValueReader0.readAll((KeyValueSource.ValueCallback<String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0);
      keyStringValueReader0.close();
      try { 
        keyStringValueReader0.readAll((KeyValueSource.ValueCallback<String>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0);
      KeyValueSource.ValueCallback<String> keyValueSource_ValueCallback0 = (KeyValueSource.ValueCallback<String>) mock(KeyValueSource.ValueCallback.class, new ViolatedAssumptionAnswer());
      keyStringValueReader0.readAll(keyValueSource_ValueCallback0);
      assertEquals(1, keyStringValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(byteArrayInputStream0);
      keyStringValueReader0.readAll((KeyValueSource.ValueCallback<String>) null);
      assertEquals(1, keyStringValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      File file0 = MockFile.createTempFile("#\uFFFD(\uFFFDu\u0181", "#\uFFFD(\uFFFDu\u0181");
      KeyStringValueReader keyStringValueReader0 = new KeyStringValueReader(file0);
      keyStringValueReader0.readAll((KeyValueSource.ValueCallback<String>) null);
      assertEquals('|', KeyValueReader.DEFAULT_SEPARATOR_CHAR);
  }
}
