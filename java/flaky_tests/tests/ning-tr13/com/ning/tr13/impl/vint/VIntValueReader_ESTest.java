/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:19:00 GMT 2022
 */

package com.ning.tr13.impl.vint;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.impl.vint.VIntValueReader;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VIntValueReader_ESTest extends VIntValueReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      VIntValueReader vIntValueReader0 = new VIntValueReader(pipedInputStream0);
      Long long0 = vIntValueReader0.toValue("5");
      assertEquals(5L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile("&;(IC", "&;(IC");
      VIntValueReader vIntValueReader0 = new VIntValueReader(file0);
      assertEquals(0, vIntValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      VIntValueReader vIntValueReader0 = new VIntValueReader(pipedInputStream0, 'H');
      try { 
        vIntValueReader0.toValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid line #0, unrecognized number ''
         //
         verifyException("com.ning.tr13.impl.vint.VIntValueReader", e);
      }
  }
}
