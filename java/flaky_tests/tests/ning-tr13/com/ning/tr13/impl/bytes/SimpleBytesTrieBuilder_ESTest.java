/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:16:38 GMT 2022
 */

package com.ning.tr13.impl.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.KeyValueSource;
import com.ning.tr13.build.ClosedTrieNodeFactory;
import com.ning.tr13.build.OpenTrieNode;
import com.ning.tr13.impl.bytes.SimpleBytesTrieBuilder;
import java.io.FileNotFoundException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleBytesTrieBuilder_ESTest extends SimpleBytesTrieBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SimpleBytesTrieBuilder.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeyValueSource<byte[]> keyValueSource0 = (KeyValueSource<byte[]>) mock(KeyValueSource.class, new ViolatedAssumptionAnswer());
      SimpleBytesTrieBuilder simpleBytesTrieBuilder0 = new SimpleBytesTrieBuilder(keyValueSource0);
      byte[] byteArray0 = new byte[3];
      OpenTrieNode<byte[]> openTrieNode0 = simpleBytesTrieBuilder0.constructOpenNode((byte)0, byteArray0);
      assertEquals((byte)0, openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeyValueSource<byte[]> keyValueSource0 = (KeyValueSource<byte[]>) mock(KeyValueSource.class, new ViolatedAssumptionAnswer());
      SimpleBytesTrieBuilder simpleBytesTrieBuilder0 = new SimpleBytesTrieBuilder(keyValueSource0, true);
      byte[] byteArray0 = new byte[4];
      OpenTrieNode<byte[]> openTrieNode0 = simpleBytesTrieBuilder0.constructOpenNode((byte) (-79), byteArray0);
      assertEquals((byte) (-79), openTrieNode0.getNodeByte());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com.ning.tr13.build.ClosedTrieNodeFactory$Leaf";
      try { 
        SimpleBytesTrieBuilder.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SimpleBytesTrieBuilder.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        SimpleBytesTrieBuilder.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KeyValueSource<byte[]> keyValueSource0 = (KeyValueSource<byte[]>) mock(KeyValueSource.class, new ViolatedAssumptionAnswer());
      SimpleBytesTrieBuilder simpleBytesTrieBuilder0 = new SimpleBytesTrieBuilder(keyValueSource0);
      ClosedTrieNodeFactory<byte[]> closedTrieNodeFactory0 = simpleBytesTrieBuilder0.closedTrieNodeFactory();
      assertNotNull(closedTrieNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KeyValueSource<byte[]> keyValueSource0 = (KeyValueSource<byte[]>) mock(KeyValueSource.class, new ViolatedAssumptionAnswer());
      SimpleBytesTrieBuilder simpleBytesTrieBuilder0 = new SimpleBytesTrieBuilder(keyValueSource0);
      byte[] byteArray0 = new byte[7];
      OpenTrieNode<byte[]> openTrieNode0 = simpleBytesTrieBuilder0.constructOpenNode((byte)81, byteArray0);
      assertEquals((byte)81, openTrieNode0.getNodeByte());
  }
}
