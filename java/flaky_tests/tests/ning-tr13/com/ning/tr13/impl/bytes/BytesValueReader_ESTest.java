/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:23:16 GMT 2022
 */

package com.ning.tr13.impl.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ning.tr13.impl.bytes.BytesValueReader;
import java.io.File;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesValueReader_ESTest extends BytesValueReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BytesValueReader bytesValueReader0 = new BytesValueReader(pipedInputStream0);
      byte[] byteArray0 = bytesValueReader0.toValue((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BytesValueReader bytesValueReader0 = new BytesValueReader(pipedInputStream0);
      byte[] byteArray0 = bytesValueReader0.toValue("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = MockFile.createTempFile(")tp?3:1", ")tp?3:1");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BytesValueReader bytesValueReader0 = new BytesValueReader(mockFileInputStream0, '[');
      assertEquals(0, bytesValueReader0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "R\"@S8?btQ#~Cdli", (File) null);
      BytesValueReader bytesValueReader0 = new BytesValueReader(file0);
      byte[] byteArray0 = bytesValueReader0.toValue("{K\u0001egx`CRX^3!C");
      assertEquals(15, byteArray0.length);
  }
}
