/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:15:47 GMT 2022
 */

package com.ning.tr13.impl.bytes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.build.ClosedTrieNode;
import com.ning.tr13.build.ClosedTrieNodeFactory;
import com.ning.tr13.impl.bytes.BytesNodeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BytesNodeFactory_ESTest extends BytesNodeFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      byte[] byteArray0 = new byte[2];
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleLeaf((byte)0, byteArray0);
      ClosedTrieNode<byte[]> closedTrieNode1 = bytesNodeFactory0.suffixLeaf((byte)0, closedTrieNode0);
      ClosedTrieNode<byte[]> closedTrieNode2 = bytesNodeFactory0.suffixLeaf((byte) (-25), closedTrieNode1);
      ClosedTrieNode<byte[]> closedTrieNode3 = bytesNodeFactory0.serialized(closedTrieNode2);
      assertEquals((byte)0, closedTrieNode1.nextByte());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-25), closedTrieNode3.nextByte());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      byte[] byteArray0 = new byte[35];
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleLeaf((byte)103, byteArray0);
      ClosedTrieNode<byte[]> closedTrieNode1 = bytesNodeFactory0.suffixLeaf((byte)103, closedTrieNode0);
      ClosedTrieNode<byte[]> closedTrieNode2 = bytesNodeFactory0.serialized(closedTrieNode1);
      assertEquals((byte)103, closedTrieNode0.nextByte());
      assertEquals((byte)103, closedTrieNode2.nextByte());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      byte[] byteArray0 = new byte[2];
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleLeaf((byte)0, byteArray0);
      ClosedTrieNode<byte[]> closedTrieNode1 = bytesNodeFactory0.serialized(closedTrieNode0);
      assertEquals((byte)0, closedTrieNode1.nextByte());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleBranch((byte)0, (ClosedTrieNode<byte[]>[]) null);
      assertEquals((byte)0, closedTrieNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleBranch((byte) (-48), (ClosedTrieNode<byte[]>[]) null);
      assertEquals((byte) (-48), closedTrieNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = BytesNodeFactory.copyBytes(byteArray0, byteArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = BytesNodeFactory.copyBytes(byteArray0, byteArray0, 0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      // Undeclared exception!
      try { 
        bytesNodeFactory0.suffixLeaf((byte)6, (ClosedTrieNode<byte[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.impl.bytes.BytesNodeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      ClosedTrieNodeFactory.SerializedNode<byte[]> closedTrieNodeFactory_SerializedNode0 = new ClosedTrieNodeFactory.SerializedNode<byte[]>((byte)6, byteArray0);
      // Undeclared exception!
      try { 
        bytesNodeFactory0.suffixLeaf((byte)6, closedTrieNodeFactory_SerializedNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.ning.tr13.build.ClosedTrieNodeFactory$SerializedNode cannot be cast to class com.ning.tr13.impl.bytes.BytesNodeFactory$SuffixLeaf (com.ning.tr13.build.ClosedTrieNodeFactory$SerializedNode and com.ning.tr13.impl.bytes.BytesNodeFactory$SuffixLeaf are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @e592f54)
         //
         verifyException("com.ning.tr13.impl.bytes.BytesNodeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BytesNodeFactory.copyBytes((byte[]) null, (byte[]) null, (-309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.impl.bytes.BytesNodeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      byte[] byteArray0 = new byte[5];
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleLeaf((byte)0, byteArray0);
      ClosedTrieNode<byte[]> closedTrieNode1 = bytesNodeFactory0.serialized(closedTrieNode0);
      assertEquals((byte)0, closedTrieNode1.nextByte());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        BytesNodeFactory.copyBytes(byteArray0, byteArray0, (-132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.simpleBranch((byte)3, (ClosedTrieNode<byte[]>[]) null);
      assertEquals((byte)3, closedTrieNode0.nextByte());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BytesNodeFactory bytesNodeFactory0 = new BytesNodeFactory();
      byte[] byteArray0 = new byte[0];
      ClosedTrieNode<byte[]> closedTrieNode0 = bytesNodeFactory0.valueBranch((byte)1, (ClosedTrieNode<byte[]>[]) null, byteArray0);
      // Undeclared exception!
      try { 
        bytesNodeFactory0.serialized(closedTrieNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.build.ClosedTrieNodeFactory$SimpleBranch", e);
      }
  }
}
