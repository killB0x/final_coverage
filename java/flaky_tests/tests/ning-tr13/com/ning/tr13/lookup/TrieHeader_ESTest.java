/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:09:01 GMT 2022
 */

package com.ning.tr13.lookup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ning.tr13.lookup.TrieHeader;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TrieHeader_ESTest extends TrieHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.VINT;
      int int0 = TrieHeader.fillHeaderInfo(byteArray0, trieHeader_ValueType0, (-16L));
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)87;
      try { 
        TrieHeader.read(byteArray0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Malformed input: no valid trie header found (first 6 bytes wrong)
         //
         verifyException("com.ning.tr13.lookup.TrieHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.BYTE_ARRAY;
      TrieHeader trieHeader0 = new TrieHeader(trieHeader_ValueType0, 3619L);
      trieHeader0.getValueType();
      assertEquals(3619L, trieHeader0.getPayloadLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.VINT;
      TrieHeader trieHeader0 = new TrieHeader(trieHeader_ValueType0, 0L);
      long long0 = trieHeader0.getPayloadLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.BYTE_ARRAY;
      TrieHeader trieHeader0 = new TrieHeader(trieHeader_ValueType0, 1L);
      long long0 = trieHeader0.getPayloadLength();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TrieHeader.read((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ning.tr13.lookup.TrieHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        TrieHeader.read(byteArray0, 4825);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4825 out of bounds for length 4
         //
         verifyException("com.ning.tr13.lookup.TrieHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.BYTE_ARRAY;
      // Undeclared exception!
      try { 
        TrieHeader.fillHeaderInfo((byte[]) null, trieHeader_ValueType0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.BYTE_ARRAY;
      // Undeclared exception!
      try { 
        TrieHeader.fillHeaderInfo(byteArray0, trieHeader_ValueType0, (-1706L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)84;
      try { 
        TrieHeader.read(byteArray0, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Malformed input: no valid trie header found (first 6 bytes wrong)
         //
         verifyException("com.ning.tr13.lookup.TrieHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrieHeader.ValueType.valueOf(803);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrieHeader.ValueType trieHeader_ValueType0 = TrieHeader.ValueType.BYTE_ARRAY;
      TrieHeader trieHeader0 = new TrieHeader(trieHeader_ValueType0, (-985L));
      long long0 = trieHeader0.getPayloadLength();
      assertEquals((-985L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrieHeader trieHeader0 = new TrieHeader((TrieHeader.ValueType) null, (-2341));
      trieHeader0.getValueType();
      assertEquals((-2341L), trieHeader0.getPayloadLength());
  }
}
