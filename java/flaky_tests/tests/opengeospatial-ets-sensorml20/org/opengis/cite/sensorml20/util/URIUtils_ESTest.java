/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 01:26:43 GMT 2022
 */

package org.opengis.cite.sensorml20.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.opengis.cite.sensorml20.util.URIUtils;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URIUtils_ESTest extends URIUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URIUtils.getAbsoluteUri("", uRI0);
      File file0 = URIUtils.resolveURIAsFile(uRI1);
      assertEquals("/tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.xml");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "entity-");
      URI uRI1 = URIUtils.getAbsoluteUri(".xml", uRI0);
      File file0 = URIUtils.resolveURIAsFile(uRI1);
      assertEquals(8L, file0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI("http://apacheorgxxml/feaures/xinclude/fixup-bVse-uris", "a:rWL559");
      assertTrue(uRI0.isOpaque());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI((String) null, "org.opengis.cite.sensorml20.util.TestSuiteLogger");
      assertEquals((-1), uRI0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = URIUtils.isAbsoluteURL("qft-+.becesoMt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.URI("xml", "xml", "Qqle", 0, "", "Qqle", "Qqle");
      URI uRI1 = URIUtils.getAbsoluteUri("Qqle", uRI0);
      assertEquals("xml://xml@Qqle:0Qqle", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.URI("xml", "xml", "Qqle", 15, "", "Qqle", "Qqle");
      URI uRI1 = URIUtils.getAbsoluteUri("Qqle", uRI0);
      assertEquals("Qqle", uRI1.getRawPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "a-wP-z2");
      URI uRI0 = MockURI.aFileURI;
      File file0 = URIUtils.dereferenceURI(uRI0);
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URIUtils.getAbsoluteUri(".xml", uRI0);
      URIUtils.dereferenceURI(uRI1);
      assertEquals("/tmp/.xml", uRI1.getRawPath());
      assertNotSame(uRI0, uRI1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = MockURI.resolve(uRI0, uRI1);
      File file0 = URIUtils.dereferenceURI(uRI2);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.URI("file", "file", "file");
      // Undeclared exception!
      try { 
        URIUtils.resolveURIAsFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI("pzb4x{G9]p", "pzb4x{G9]p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: pzb4x{G9]p
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      try { 
        URIUtils.parseURI(uRI1);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.URI("org.opengis.cite.sensorml20.util.TestSuiteLogger", "org.opengis.cite.sensorml20.util.TestSuiteLogger", "org.opengis.cite.sensorml20.util.TestSuiteLogger");
      try { 
        URIUtils.parseURI(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: org.opengis.cite.sensorml20.util.testsuitelogger
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URI uRI0 = MockURI.create("http:-/apacheorgxxml/feaures/xinclude/fixup-bVse-uris");
          // Undeclared exception!
          try { 
            URIUtils.parseURI(uRI0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        URIUtils.getAbsoluteUri("pgr{23}O^", uRI0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: pgr{23}O^
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.getAbsoluteUri("org.opengis.cite.sensorml20.util.uriutils", (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      // Undeclared exception!
      try { 
        URIUtils.getAbsoluteUri("", uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base URI has no scheme component: 
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.URI("file", "file", "file");
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = URIUtils.getAbsoluteUri("http:-/apacheorgxxml/feaures/xinclude/fixup-bVse-uris", uRI0);
      assertEquals("http:-/apacheorgxxml/feaures/xinclude/fixup-bVse-uris", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = URIUtils.isAbsoluteURL("http://apacheorgxxm/feaures1xinclud9fixup-base-uris");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        URIUtils.resolveURIAsFile(uRI0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/sun/jersey/api/client/Client
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.URI("file", "file", "org.opengis.cite.sensorml20.util.TestSuiteLogger");
      URI uRI1 = URIUtils.getAbsoluteUri("org.opengis.cite.sensorml20.util.TestSuiteLogger", uRI0);
      // Undeclared exception!
      try { 
        URIUtils.resolveURIAsFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received org.opengis.cite.sensorml20.util.TestSuiteLogger
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      File file0 = URIUtils.resolveURIAsFile(uRI0);
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveURIAsFile((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received null
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI("", ".xml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base URI has no scheme component: 
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.resolveRelativeURI((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URI uRI0 = URIUtils.resolveRelativeURI("http://apache.org/xml/features/xinclude/fixup-base-uris", "http://apache.org/xml/features/xinclude/fixup-base-uris");
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/sun/jersey/api/client/Client
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received 
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.dereferenceURI((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received null
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      // Undeclared exception!
      try { 
        URIUtils.parseURI(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received 
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      try { 
        URIUtils.parseURI(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /tmp/foo.bar (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        URIUtils.parseURI((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Absolute URI is required, but received null
         //
         verifyException("org.opengis.cite.sensorml20.util.URIUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URIUtils uRIUtils0 = new URIUtils();
  }
}
