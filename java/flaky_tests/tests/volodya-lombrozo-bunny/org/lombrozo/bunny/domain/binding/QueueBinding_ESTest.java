/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:25:57 GMT 2022
 */

package org.lombrozo.bunny.domain.binding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.connection.Channel;
import org.lombrozo.bunny.connection.Connection;
import org.lombrozo.bunny.connection.TestChannel;
import org.lombrozo.bunny.connection.TestConnection;
import org.lombrozo.bunny.domain.binding.QueueBinding;
import org.lombrozo.bunny.domain.exchange.DirectExchange;
import org.lombrozo.bunny.domain.exchange.Exchange;
import org.lombrozo.bunny.domain.exchange.ExchangeDescription;
import org.lombrozo.bunny.domain.exchange.ExchangeType;
import org.lombrozo.bunny.domain.exchange.FanoutExchange;
import org.lombrozo.bunny.domain.exchange.NamedExchange;
import org.lombrozo.bunny.domain.exchange.TopicExchange;
import org.lombrozo.bunny.domain.queue.Exclusive;
import org.lombrozo.bunny.domain.queue.NamedQueue;
import org.lombrozo.bunny.domain.queue.Parameterized;
import org.lombrozo.bunny.domain.queue.Queue;
import org.lombrozo.bunny.domain.queue.QueueDescription;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueueBinding_ESTest extends QueueBinding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      TopicExchange topicExchange0 = new TopicExchange(connection_Fake0, (String) null, (ExchangeDescription) null);
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0);
      TestChannel testChannel0 = new TestChannel();
      TestConnection testConnection0 = new TestConnection(testChannel0);
      QueueBinding queueBinding0 = new QueueBinding(topicExchange0, namedQueue0, (String) null, testConnection0);
      String string0 = queueBinding0.source();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      ExchangeType exchangeType0 = ExchangeType.FANOUT;
      ExchangeDescription.Default exchangeDescription_Default0 = new ExchangeDescription.Default();
      NamedExchange namedExchange0 = new NamedExchange(testConnection0, "", exchangeType0, exchangeDescription_Default0);
      QueueDescription.Default queueDescription_Default0 = new QueueDescription.Default();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "", queueDescription_Default0);
      QueueBinding queueBinding0 = new QueueBinding(namedExchange0, namedQueue0, "", testConnection0);
      String string0 = queueBinding0.source();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Channel.Fake channel_Fake0 = new Channel.Fake();
      TestConnection testConnection0 = new TestConnection(channel_Fake0);
      DirectExchange directExchange0 = new DirectExchange(testConnection0, "$2Rr}E]L[m");
      Exclusive exclusive0 = new Exclusive();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "priority", exclusive0);
      QueueBinding queueBinding0 = new QueueBinding(directExchange0, namedQueue0, "r3!8q{Z", testConnection0);
      String string0 = queueBinding0.routingKey();
      assertEquals("r3!8q{Z", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      ExchangeType exchangeType0 = ExchangeType.FANOUT;
      ExchangeDescription.Default exchangeDescription_Default0 = new ExchangeDescription.Default();
      NamedExchange namedExchange0 = new NamedExchange(testConnection0, "", exchangeType0, exchangeDescription_Default0);
      QueueDescription.Default queueDescription_Default0 = new QueueDescription.Default();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "", queueDescription_Default0);
      QueueBinding queueBinding0 = new QueueBinding(namedExchange0, namedQueue0, "", testConnection0);
      String string0 = queueBinding0.routingKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      TopicExchange topicExchange0 = new TopicExchange(connection_Fake0, (String) null, (ExchangeDescription) null);
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0);
      TestChannel testChannel0 = new TestChannel();
      TestConnection testConnection0 = new TestConnection(testChannel0);
      QueueBinding queueBinding0 = new QueueBinding(topicExchange0, namedQueue0, (String) null, testConnection0);
      String string0 = queueBinding0.destination();
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      ExchangeType exchangeType0 = ExchangeType.FANOUT;
      ExchangeDescription.Default exchangeDescription_Default0 = new ExchangeDescription.Default();
      NamedExchange namedExchange0 = new NamedExchange(testConnection0, "", exchangeType0, exchangeDescription_Default0);
      QueueDescription.Default queueDescription_Default0 = new QueueDescription.Default();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "", queueDescription_Default0);
      QueueBinding queueBinding0 = new QueueBinding(namedExchange0, namedQueue0, "", testConnection0);
      String string0 = queueBinding0.destination();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "t(2CmDPZcI");
      QueueBinding queueBinding0 = new QueueBinding((Exchange) null, namedQueue0, "t(2CmDPZcI", testConnection0);
      // Undeclared exception!
      try { 
        queueBinding0.source();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.binding.QueueBinding", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      TopicExchange topicExchange0 = new TopicExchange(testConnection0, "bz95-Dr\"<mq@C1");
      QueueBinding queueBinding0 = new QueueBinding(topicExchange0, (Queue) null, "", testConnection0);
      // Undeclared exception!
      try { 
        queueBinding0.destination();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.binding.QueueBinding", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      DirectExchange directExchange0 = new DirectExchange(connection_Fake0, "org.lombrozo.bunny.domain.binding.QueueBinding");
      Parameterized parameterized0 = new Parameterized();
      NamedQueue namedQueue0 = new NamedQueue((Connection) null, parameterized0);
      QueueBinding queueBinding0 = new QueueBinding(directExchange0, namedQueue0, "Empty correlation id for message: ", (Connection) null);
      // Undeclared exception!
      try { 
        queueBinding0.declare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.binding.QueueBinding", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      FanoutExchange fanoutExchange0 = new FanoutExchange(testConnection0, "org.lombrozo.bunny.util.RandomString");
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, (String) null);
      QueueBinding queueBinding0 = new QueueBinding(fanoutExchange0, namedQueue0, "NonPersistent{}", testConnection0);
      queueBinding0.declare();
      assertEquals("org.lombrozo.bunny.util.RandomString", queueBinding0.source());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      FanoutExchange fanoutExchange0 = new FanoutExchange(testConnection0, "org.lombrozo.bunny.util.RandomString");
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, (String) null);
      QueueBinding queueBinding0 = new QueueBinding(fanoutExchange0, namedQueue0, "NonPersistent{}", testConnection0);
      String string0 = queueBinding0.destination();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Exchange.Fake exchange_Fake0 = new Exchange.Fake();
      TestChannel testChannel0 = new TestChannel();
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueBinding queueBinding0 = new QueueBinding(exchange_Fake0, namedQueue0, (String) null, testConnection0);
      String string0 = queueBinding0.routingKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Exchange.Fake exchange_Fake0 = new Exchange.Fake();
      TestChannel testChannel0 = new TestChannel();
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueBinding queueBinding0 = new QueueBinding(exchange_Fake0, namedQueue0, (String) null, testConnection0);
      String string0 = queueBinding0.source();
      assertEquals("fake", string0);
  }
}
