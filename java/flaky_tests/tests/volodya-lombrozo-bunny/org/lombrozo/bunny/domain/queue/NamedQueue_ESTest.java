/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:38:00 GMT 2022
 */

package org.lombrozo.bunny.domain.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.connection.Connection;
import org.lombrozo.bunny.connection.TestConnection;
import org.lombrozo.bunny.connection.subscription.Consumer;
import org.lombrozo.bunny.domain.queue.AutoDelete;
import org.lombrozo.bunny.domain.queue.Durable;
import org.lombrozo.bunny.domain.queue.Exclusive;
import org.lombrozo.bunny.domain.queue.NamedQueue;
import org.lombrozo.bunny.domain.queue.Parameterized;
import org.lombrozo.bunny.domain.queue.QueueDescription;
import org.lombrozo.bunny.function.CompositeWork;
import org.lombrozo.bunny.function.ConsumedWork;
import org.lombrozo.bunny.function.LatchWork;
import org.lombrozo.bunny.function.RunnableWork;
import org.lombrozo.bunny.function.TypedWork;
import org.lombrozo.bunny.function.Work;
import org.lombrozo.bunny.message.Message;
import org.lombrozo.bunny.message.RPCMessage;
import org.lombrozo.bunny.message.RabbitMessage;
import org.lombrozo.bunny.message.body.Body;
import org.lombrozo.bunny.message.body.ByteBody;
import org.lombrozo.bunny.message.body.StringBody;
import org.lombrozo.bunny.message.delivery.DeliveryMode;
import org.lombrozo.bunny.message.header.EmptyHeaders;
import org.lombrozo.bunny.message.header.HeadersMap;
import org.lombrozo.bunny.message.properties.AppId;
import org.lombrozo.bunny.message.properties.ApplicationJson;
import org.lombrozo.bunny.message.properties.ClusterId;
import org.lombrozo.bunny.message.properties.ContentEncoding;
import org.lombrozo.bunny.message.properties.EmptyProperties;
import org.lombrozo.bunny.message.properties.Expiration;
import org.lombrozo.bunny.message.properties.Priority;
import org.lombrozo.bunny.message.properties.Properties;
import org.lombrozo.bunny.message.properties.PropertiesSet;
import org.lombrozo.bunny.message.properties.Property;
import org.lombrozo.bunny.message.properties.PropertyKey;
import org.lombrozo.bunny.message.properties.ReplyTo;
import org.lombrozo.bunny.message.routing.EmptyRoutingKey;
import org.lombrozo.bunny.message.routing.RoutingKey;
import org.lombrozo.bunny.util.subscription.Subscription;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedQueue_ESTest extends NamedQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      connection_Fake0.channel();
      Parameterized parameterized0 = new Parameterized();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, parameterized0);
      namedQueue0.description();
      LinkedHashSet<TypedWork> linkedHashSet0 = new LinkedHashSet<TypedWork>();
      CompositeWork compositeWork0 = new CompositeWork(linkedHashSet0);
      Class<Object> class0 = Object.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      compositeWork0.addWorkForMessageType((Class<?>) class0, (Work) consumedWork0);
      namedQueue0.subscribe((Work) compositeWork0);
      namedQueue0.declare();
      Subscription subscription0 = namedQueue0.subscribe((Work) compositeWork0);
      Subscription subscription1 = namedQueue0.subscribe((Consumer) null);
      assertNotSame(subscription1, subscription0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, (String) null);
      MockThread mockThread0 = new MockThread();
      RunnableWork runnableWork0 = new RunnableWork(mockThread0);
      namedQueue0.subscribe((Work) runnableWork0);
      namedQueue0.name();
      Body.Fake body_Fake0 = new Body.Fake();
      EmptyProperties emptyProperties0 = new EmptyProperties();
      Property[] propertyArray0 = new Property[2];
      ContentEncoding contentEncoding0 = new ContentEncoding((String) null);
      propertyArray0[0] = (Property) contentEncoding0;
      ContentEncoding contentEncoding1 = new ContentEncoding("=d7Q");
      propertyArray0[1] = (Property) contentEncoding1;
      Properties properties0 = emptyProperties0.addAll(propertyArray0);
      HeadersMap headersMap0 = new HeadersMap();
      Message.Fake message_Fake0 = new Message.Fake();
      DeliveryMode deliveryMode0 = message_Fake0.deliveryMode();
      RoutingKey.Fake routingKey_Fake0 = new RoutingKey.Fake();
      RabbitMessage rabbitMessage0 = new RabbitMessage(body_Fake0, properties0, headersMap0, deliveryMode0, routingKey_Fake0);
      namedQueue0.send(rabbitMessage0);
      assertNull(namedQueue0.name());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamedQueue namedQueue0 = new NamedQueue((Connection) null);
      ConsumedWork consumedWork0 = new ConsumedWork();
      StringBody stringBody0 = new StringBody();
      HashMap<PropertyKey, Property> hashMap0 = new HashMap<PropertyKey, Property>();
      PropertiesSet propertiesSet0 = new PropertiesSet(hashMap0);
      QueueDescription.Default queueDescription_Default0 = new QueueDescription.Default();
      Map<String, Object> map0 = queueDescription_Default0.params();
      HeadersMap headersMap0 = new HeadersMap(map0);
      RoutingKey.Fake routingKey_Fake0 = new RoutingKey.Fake();
      RabbitMessage rabbitMessage0 = new RabbitMessage(stringBody0, propertiesSet0, headersMap0, routingKey_Fake0);
      RabbitMessage rabbitMessage1 = new RabbitMessage(rabbitMessage0, routingKey_Fake0);
      consumedWork0.doWork(rabbitMessage1);
      String string0 = "-,^_%pKb%V=";
      // Undeclared exception!
      try { 
        namedQueue0.declare();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.queue.NamedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamedQueue namedQueue0 = new NamedQueue((Connection) null, "");
      RabbitMessage rabbitMessage0 = new RabbitMessage("2", (RoutingKey) null);
      rabbitMessage0.toString();
      // Undeclared exception!
      try { 
        namedQueue0.send(rabbitMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.queue.NamedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      testConnection0.allocateChannels();
      testConnection0.allocateChannels();
      Durable durable0 = new Durable();
      testConnection0.allocateChannels();
      durable0.params();
      testConnection0.allocateChannels();
      Durable durable1 = new Durable(durable0);
      durable0.params();
      durable0.params();
      durable1.params();
      durable1.params();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, durable1);
      namedQueue0.description();
      EmptyRoutingKey emptyRoutingKey0 = new EmptyRoutingKey();
      durable1.params();
      Property[] propertyArray0 = new Property[0];
      durable0.params();
      RabbitMessage rabbitMessage0 = new RabbitMessage("", emptyRoutingKey0, propertyArray0);
      rabbitMessage0.toString();
      namedQueue0.send(rabbitMessage0);
      namedQueue0.name();
      namedQueue0.declare();
      namedQueue0.description();
      namedQueue0.declare();
      namedQueue0.name();
      LinkedHashSet<TypedWork> linkedHashSet0 = new LinkedHashSet<TypedWork>(4650);
      CompositeWork compositeWork0 = new CompositeWork(linkedHashSet0);
      // Undeclared exception!
      try { 
        namedQueue0.subscribe((Work) compositeWork0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/rabbitmq/client/DefaultConsumer
         //
         verifyException("org.lombrozo.bunny.domain.queue.NamedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      connection_Fake0.channel();
      connection_Fake0.channel();
      connection_Fake0.channel();
      String string0 = "";
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, "");
      Work work0 = null;
      namedQueue0.subscribe((Work) null);
      Property[] propertyArray0 = new Property[8];
      ClusterId clusterId0 = new ClusterId("org.lombrozo.bunny.domain.queue.NamedQueue");
      propertyArray0[0] = (Property) clusterId0;
      Expiration expiration0 = new Expiration("");
      propertyArray0[1] = (Property) expiration0;
      ApplicationJson applicationJson0 = new ApplicationJson();
      propertyArray0[2] = (Property) applicationJson0;
      ReplyTo replyTo0 = new ReplyTo(namedQueue0);
      propertyArray0[3] = (Property) replyTo0;
      ClusterId clusterId1 = new ClusterId("");
      propertyArray0[4] = (Property) clusterId1;
      try { 
        Integer.valueOf("org.lombrozo.bunny.domain.queue.NamedQueue", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      Parameterized parameterized0 = new Parameterized();
      Object object0 = new Object();
      testConnection0.allocateChannels();
      Parameterized parameterized1 = parameterized0.add("", object0);
      Parameterized parameterized2 = parameterized0.add("", (Object) null);
      parameterized0.add("", parameterized1);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "", parameterized2);
      testConnection0.allocateChannels();
      namedQueue0.description();
      testConnection0.allocateChannels();
      parameterized2.add("", testConnection0);
      namedQueue0.declare();
      namedQueue0.declare();
      namedQueue0.declare();
      namedQueue0.declare();
      testConnection0.allocateChannels();
      CountDownLatch countDownLatch0 = null;
      try {
        countDownLatch0 = new CountDownLatch((-1124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count < 0
         //
         verifyException("java.util.concurrent.CountDownLatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      Parameterized parameterized0 = new Parameterized();
      testConnection0.allocateChannels();
      Parameterized parameterized1 = parameterized0.add((String) null, (Object) null);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, parameterized1);
      ConsumedWork consumedWork0 = new ConsumedWork();
      // Undeclared exception!
      try { 
        namedQueue0.subscribe((Work) consumedWork0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/rabbitmq/client/DefaultConsumer
         //
         verifyException("org.lombrozo.bunny.domain.queue.NamedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      Parameterized parameterized0 = new Parameterized();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, parameterized0);
      NamedQueue namedQueue1 = new NamedQueue(connection_Fake0, "");
      String string0 = namedQueue0.name();
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      Parameterized parameterized0 = new Parameterized();
      parameterized0.add("C\"S'.bML>49l1{", "C\"S'.bML>49l1{");
      testConnection0.allocateChannels();
      Exclusive exclusive0 = new Exclusive(parameterized0);
      testConnection0.allocateChannels();
      AutoDelete autoDelete0 = new AutoDelete(exclusive0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, autoDelete0);
      namedQueue0.declare();
      namedQueue0.name();
      namedQueue0.description();
      LatchWork latchWork0 = new LatchWork();
      // Undeclared exception!
      try { 
        namedQueue0.subscribe((Work) latchWork0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/rabbitmq/client/DefaultConsumer
         //
         verifyException("org.lombrozo.bunny.domain.queue.NamedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0);
      namedQueue0.declare();
      ByteBody byteBody0 = new ByteBody();
      LinkedHashSet<Property> linkedHashSet0 = new LinkedHashSet<Property>();
      PropertiesSet propertiesSet0 = new PropertiesSet(linkedHashSet0);
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      EmptyRoutingKey emptyRoutingKey0 = new EmptyRoutingKey();
      RabbitMessage rabbitMessage0 = new RabbitMessage(byteBody0, propertiesSet0, emptyHeaders0, emptyRoutingKey0);
      namedQueue0.send(rabbitMessage0);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", namedQueue0.name());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      connection_Fake0.channel();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, "org.lombrozo.bunny.domain.queue.NamedQueue");
      namedQueue0.declare();
      ConsumedWork consumedWork0 = new ConsumedWork();
      Subscription subscription0 = namedQueue0.subscribe((Work) consumedWork0);
      assertNotNull(subscription0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "");
      QueueDescription queueDescription0 = namedQueue0.description();
      assertFalse(queueDescription0.durable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      NamedQueue namedQueue0 = new NamedQueue(testConnection0, "");
      String string0 = namedQueue0.name();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      connection_Fake0.channel();
      connection_Fake0.channel();
      connection_Fake0.channel();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-78);
      connection_Fake0.channel();
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteBody byteBody0 = new ByteBody(byteArray0);
      namedQueue0.declare();
      RabbitMessage rabbitMessage0 = new RabbitMessage(byteBody0);
      rabbitMessage0.toString();
      namedQueue0.send(rabbitMessage0);
      QueueDescription queueDescription0 = namedQueue0.description();
      QueueDescription queueDescription1 = namedQueue0.description();
      assertSame(queueDescription1, queueDescription0);
  }
}
