/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 23:51:47 GMT 2022
 */

package org.lombrozo.bunny.domain.destination;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.concurrent.BlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.connection.Connection;
import org.lombrozo.bunny.connection.TestChannel;
import org.lombrozo.bunny.connection.TestConnection;
import org.lombrozo.bunny.domain.destination.QueueDestination;
import org.lombrozo.bunny.domain.queue.AutoDelete;
import org.lombrozo.bunny.domain.queue.Durable;
import org.lombrozo.bunny.domain.queue.NamedQueue;
import org.lombrozo.bunny.domain.queue.Queue;
import org.lombrozo.bunny.domain.queue.QueueDescription;
import org.lombrozo.bunny.message.Message;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueueDestination_ESTest extends QueueDestination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, (String) null);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      String string0 = queueDestination0.routingKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      String string0 = queueDestination0.routingKey();
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Queue.Fake queue_Fake0 = new Queue.Fake();
      QueueDestination queueDestination0 = new QueueDestination(queue_Fake0);
      String string0 = queueDestination0.routingKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QueueDestination queueDestination0 = new QueueDestination((Queue) null);
      // Undeclared exception!
      try { 
        queueDestination0.routingKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.domain.destination.QueueDestination", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      QueueDestination queueDestination1 = new QueueDestination(namedQueue0);
      boolean boolean0 = queueDestination0.equals(queueDestination1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      QueueDescription.Default queueDescription_Default0 = new QueueDescription.Default();
      AutoDelete autoDelete0 = new AutoDelete(queueDescription_Default0);
      Durable durable0 = new Durable(autoDelete0);
      NamedQueue namedQueue0 = new NamedQueue(connection_Fake0, durable0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      boolean boolean0 = queueDestination0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      boolean boolean0 = queueDestination0.equals(queueDestination0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      Object object0 = new Object();
      boolean boolean0 = queueDestination0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      queueDestination0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      testChannel0.declare((Queue) namedQueue0);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", namedQueue0.name());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      TestConnection testConnection0 = new TestConnection(testChannel0);
      NamedQueue namedQueue0 = new NamedQueue(testConnection0);
      QueueDestination queueDestination0 = new QueueDestination(namedQueue0);
      String string0 = queueDestination0.exchangeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QueueDestination queueDestination0 = new QueueDestination((Queue) null);
      String string0 = queueDestination0.toString();
      assertEquals("QueueDestination{queue=null}", string0);
  }
}
