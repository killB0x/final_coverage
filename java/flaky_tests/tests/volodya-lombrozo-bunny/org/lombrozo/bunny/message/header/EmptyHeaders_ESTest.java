/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:27:26 GMT 2022
 */

package org.lombrozo.bunny.message.header;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.message.header.EmptyHeaders;
import org.lombrozo.bunny.message.header.Header;
import org.lombrozo.bunny.message.header.Headers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmptyHeaders_ESTest extends EmptyHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      Map<String, Object> map0 = emptyHeaders0.toMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      Optional<Header> optional0 = emptyHeaders0.header("org.lombrozo.bunny.message.header.EmptyHeaders");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      Headers.Fake headers_Fake0 = new Headers.Fake();
      Headers headers0 = emptyHeaders0.add((Headers) headers_Fake0);
      assertSame(emptyHeaders0, headers0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      String string0 = emptyHeaders0.toString();
      assertEquals("EmptyHeaders{}", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmptyHeaders emptyHeaders0 = new EmptyHeaders();
      Header.Fake header_Fake0 = new Header.Fake();
      EmptyHeaders emptyHeaders1 = (EmptyHeaders)emptyHeaders0.add((Header) header_Fake0);
      assertEquals("EmptyHeaders{}", emptyHeaders1.toString());
  }
}
