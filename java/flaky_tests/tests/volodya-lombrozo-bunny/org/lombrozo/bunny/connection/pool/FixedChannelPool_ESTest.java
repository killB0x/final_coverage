/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:05:54 GMT 2022
 */

package org.lombrozo.bunny.connection.pool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.BlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.connection.Channel;
import org.lombrozo.bunny.connection.ChannelFactory;
import org.lombrozo.bunny.connection.TestChannel;
import org.lombrozo.bunny.connection.pool.FixedChannelPool;
import org.lombrozo.bunny.message.Message;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedChannelPool_ESTest extends FixedChannelPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(3546);
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      ChannelFactory channelFactory0 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(testChannel0, testChannel0, testChannel0, testChannel0, testChannel0).when(channelFactory0).newChannel();
      fixedChannelPool0.allocateChannels(channelFactory0);
      Channel channel0 = fixedChannelPool0.nextChannel();
      assertSame(channel0, testChannel0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(1395);
      // Undeclared exception!
      try { 
        fixedChannelPool0.allocateChannels((ChannelFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = null;
      try {
        fixedChannelPool0 = new FixedChannelPool((-2466));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2466
         //
         verifyException("org.lombrozo.bunny.connection.pool.FixedChannelPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(3546);
      HashMap<String, BlockingDeque<Message>> hashMap0 = new HashMap<String, BlockingDeque<Message>>();
      TestChannel testChannel0 = new TestChannel(hashMap0);
      ChannelFactory channelFactory0 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(testChannel0, testChannel0, testChannel0, testChannel0, testChannel0).when(channelFactory0).newChannel();
      fixedChannelPool0.allocateChannels(channelFactory0);
      ChannelFactory channelFactory1 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(testChannel0, testChannel0, testChannel0, testChannel0, testChannel0).when(channelFactory1).newChannel();
      fixedChannelPool0.allocateChannels(channelFactory1);
      ChannelFactory channelFactory2 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn(testChannel0, testChannel0, testChannel0, testChannel0, testChannel0).when(channelFactory2).newChannel();
      // Undeclared exception!
      fixedChannelPool0.allocateChannels(channelFactory2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(3546);
      List<Channel> list0 = fixedChannelPool0.toList();
      assertEquals(3546, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(449);
      Channel channel0 = fixedChannelPool0.nextChannel();
      assertNull(channel0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FixedChannelPool fixedChannelPool0 = new FixedChannelPool(0);
      // Undeclared exception!
      try { 
        fixedChannelPool0.nextChannel();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.lombrozo.bunny.connection.pool.FixedChannelPool", e);
      }
  }
}
