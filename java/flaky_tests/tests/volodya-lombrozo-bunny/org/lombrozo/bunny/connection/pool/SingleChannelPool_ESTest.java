/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:02:56 GMT 2022
 */

package org.lombrozo.bunny.connection.pool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.connection.Channel;
import org.lombrozo.bunny.connection.ChannelFactory;
import org.lombrozo.bunny.connection.Connection;
import org.lombrozo.bunny.connection.TestConnection;
import org.lombrozo.bunny.connection.pool.SingleChannelPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SingleChannelPool_ESTest extends SingleChannelPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(testConnection0);
      Channel channel0 = singleChannelPool0.nextChannel();
      assertNull(channel0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Channel.Fake channel_Fake0 = new Channel.Fake();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(channel_Fake0);
      // Undeclared exception!
      try { 
        singleChannelPool0.allocateChannels((ChannelFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.connection.pool.SingleChannelPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      Channel channel0 = connection_Fake0.channel();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(channel0);
      ChannelFactory channelFactory0 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelFactory0).newChannel();
      singleChannelPool0.allocateChannels(channelFactory0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TestConnection testConnection0 = new TestConnection();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(testConnection0);
      ChannelFactory channelFactory0 = mock(ChannelFactory.class, new ViolatedAssumptionAnswer());
      singleChannelPool0.allocateChannels(channelFactory0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Connection.Fake connection_Fake0 = new Connection.Fake();
      Channel channel0 = connection_Fake0.channel();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(channel0);
      List<Channel> list0 = singleChannelPool0.toList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Channel.Fake channel_Fake0 = new Channel.Fake();
      SingleChannelPool singleChannelPool0 = new SingleChannelPool(channel_Fake0);
      Channel channel0 = singleChannelPool0.nextChannel();
      assertSame(channel_Fake0, channel0);
  }
}
