/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 00:03:46 GMT 2022
 */

package org.lombrozo.bunny.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.lombrozo.bunny.function.CompositeWork;
import org.lombrozo.bunny.function.ConsumedWork;
import org.lombrozo.bunny.function.LatchWork;
import org.lombrozo.bunny.function.TypedWork;
import org.lombrozo.bunny.function.Work;
import org.lombrozo.bunny.message.Message;
import org.lombrozo.bunny.message.RabbitMessage;
import org.lombrozo.bunny.message.body.Body;
import org.lombrozo.bunny.message.properties.EmptyProperties;
import org.lombrozo.bunny.message.properties.Properties;
import org.lombrozo.bunny.message.properties.Property;
import org.lombrozo.bunny.message.routing.EmptyRoutingKey;
import org.lombrozo.bunny.message.routing.RoutingKey;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypedWork_ESTest extends TypedWork_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      TypedWork typedWork0 = new TypedWork(class0, consumedWork0);
      Message.Fake message_Fake0 = new Message.Fake();
      RoutingKey routingKey0 = message_Fake0.routingKey();
      RabbitMessage rabbitMessage0 = new RabbitMessage("java.lang.Integer", routingKey0);
      typedWork0.doWork(rabbitMessage0);
      assertEquals("java.lang.Integer", typedWork0.type());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      TypedWork typedWork0 = new TypedWork(class0, consumedWork0);
      String string0 = typedWork0.type();
      assertEquals("java.lang.Integer", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LatchWork latchWork0 = new LatchWork();
      TypedWork typedWork0 = new TypedWork(class0, latchWork0);
      TypedWork typedWork1 = new TypedWork("", typedWork0);
      String string0 = typedWork1.type();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      TypedWork typedWork0 = new TypedWork(class0, consumedWork0);
      boolean boolean0 = typedWork0.match("org.lombrozo.bunny.function.LatchWork");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Work> hashMap0 = new HashMap<String, Work>();
      CompositeWork compositeWork0 = new CompositeWork(hashMap0);
      TypedWork typedWork0 = new TypedWork("St", compositeWork0);
      // Undeclared exception!
      try { 
        typedWork0.doWork((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.lombrozo.bunny.function.CompositeWork", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties.Fake properties_Fake0 = new Properties.Fake();
      RabbitMessage rabbitMessage0 = new RabbitMessage(", headers=", properties_Fake0);
      TypedWork typedWork0 = new TypedWork((String) null, (Work) null);
      // Undeclared exception!
      try { 
        typedWork0.doIfMatch("org.lombrozo.bunny.message.properties.Type", rabbitMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Work> hashMap0 = new HashMap<String, Work>();
      CompositeWork compositeWork0 = new CompositeWork(hashMap0);
      TypedWork typedWork0 = new TypedWork("org.lombrozo.bunny.message.RabbitMessage", compositeWork0);
      EmptyProperties emptyProperties0 = new EmptyProperties();
      RabbitMessage rabbitMessage0 = new RabbitMessage((Body) null, emptyProperties0);
      // Undeclared exception!
      try { 
        typedWork0.doIfMatch("org.lombrozo.bunny.message.RabbitMessage", rabbitMessage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lombrozo.bunny.message.properties.PropertyKey
         //
         verifyException("org.lombrozo.bunny.function.CompositeWork", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      TypedWork typedWork0 = new TypedWork(class0, consumedWork0);
      boolean boolean0 = typedWork0.match("java.lang.Integer");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ConsumedWork consumedWork0 = new ConsumedWork();
      TypedWork typedWork0 = new TypedWork(class0, consumedWork0);
      Message.Fake message_Fake0 = new Message.Fake();
      typedWork0.doIfMatch("java.lang.Integer", message_Fake0);
      assertTrue(consumedWork0.isFinished());
      assertFalse(consumedWork0.isNotFinished());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LatchWork latchWork0 = new LatchWork();
      TypedWork typedWork0 = new TypedWork(class0, latchWork0);
      Message.Fake message_Fake0 = new Message.Fake();
      typedWork0.doIfMatch("", message_Fake0);
      assertEquals("java.lang.Integer", typedWork0.type());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Work> hashMap0 = new HashMap<String, Work>();
      CompositeWork compositeWork0 = new CompositeWork(hashMap0);
      TypedWork typedWork0 = new TypedWork((String) null, compositeWork0);
      String string0 = typedWork0.type();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, Work> hashMap0 = new HashMap<String, Work>();
      CompositeWork compositeWork0 = new CompositeWork(hashMap0);
      TypedWork typedWork0 = new TypedWork(class0, compositeWork0);
      EmptyRoutingKey emptyRoutingKey0 = new EmptyRoutingKey();
      Property[] propertyArray0 = new Property[0];
      RabbitMessage rabbitMessage0 = new RabbitMessage((String) null, emptyRoutingKey0, propertyArray0);
      // Undeclared exception!
      try { 
        typedWork0.doWork(rabbitMessage0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.lombrozo.bunny.message.properties.PropertyKey
         //
         verifyException("org.lombrozo.bunny.function.CompositeWork", e);
      }
  }
}
