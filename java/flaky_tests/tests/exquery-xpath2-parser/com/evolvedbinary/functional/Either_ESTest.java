/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:20:56 GMT 2022
 */

package com.evolvedbinary.functional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.functional.Either;
import com.evolvedbinary.functional.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Either_ESTest extends Either_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Function<Object, Either.Right<Object, Object>> function0 = (Function<Object, Either.Right<Object, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Either.Right<Object, Object>> function1 = (Function<Object, Either.Right<Object, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Either.Right<Object, Object> either_Right0 = either0.fold(function0, function1);
      assertNull(either_Right0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Right(object0);
      boolean boolean0 = either0.isLeft();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Either<Object, Object> either0 = Either.Right((Object) null);
      Function<Object, Either<Object, Object>> function0 = (Function<Object, Either<Object, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Either<Object, Object> either1 = either0.flatMap(function0);
      assertNull(either1);
      assertSame(either1, either0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Either<Either.Right<Object, Object>, Object> either0 = Either.Left((Either.Right<Object, Object>) null);
      // Undeclared exception!
      try { 
        either0.valueOr((Function<Either.Right<Object, Object>, Either.Right<Either.Right, Either.Right<Object, Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.functional.Either", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      // Undeclared exception!
      try { 
        either0.leftMap((Function<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.functional.Either", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Either<Object, Object> either0 = Either.Right((Object) null);
      // Undeclared exception!
      try { 
        either0.equals(either0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.functional.Either", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Either<Either.Right<Object, Object>, Object> either0 = Either.Right(object0);
      boolean boolean0 = either0.isRight();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Function<Object, Object> function0 = (Function<Object, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(either0).when(function0).apply(any());
      Object object1 = either0.valueOr(function0);
      Either<Object, Either.Right<Object, Object>> either1 = Either.Left(object1);
      boolean boolean0 = either1.isLeft();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Either<Object, Object> either0 = Either.Right((Object) null);
      Either<Object, Object> either1 = Either.Left((Object) null);
      boolean boolean0 = either1.equals(either0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Either<Object, Either.Left<Object, Object>> either0 = Either.Left((Object) null);
      Function<Either.Left<Object, Object>, Either.Right<Object, Object>> function0 = (Function<Either.Left<Object, Object>, Either.Right<Object, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Either<Object, Either.Right<Object, Object>> either1 = either0.map(function0);
      Object object0 = new Object();
      Either<Object, Object> either2 = Either.Right(object0);
      Function<Object, Either.Left<Object, Either.Right<Object, Object>>> function1 = (Function<Object, Either.Left<Object, Either.Right<Object, Object>>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Either<Object, Either.Left<Object, Either.Right<Object, Object>>> either3 = either2.map(function1);
      boolean boolean0 = either3.equals(either1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      boolean boolean0 = either0.equals(either0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Function<Object, Object> function0 = (Function<Object, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(either0).when(function0).apply(any());
      Object object1 = either0.valueOr(function0);
      Either<Object, Either.Right<Object, Object>> either1 = Either.Left(object1);
      boolean boolean0 = either1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Function<Object, Object> function0 = (Function<Object, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Object object1 = either0.valueOr(function0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Either<Object, Either.Left<Object, Object>> either0 = Either.Left((Object) null);
      // Undeclared exception!
      try { 
        either0.fold((Function<Object, Object>) null, (Function<Either.Left<Object, Object>, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.functional.Either", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Function<Object, Object> function0 = (Function<Object, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(function0).apply(any());
      Either<Object, Object> either1 = either0.leftMap(function0);
      boolean boolean0 = either0.equals(either1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Either<Either.Right<Object, Object>, Either.Right<Object, Object>> either0 = Either.Right((Either.Right<Object, Object>) null);
      Function<Either.Right<Object, Object>, Either.Right<Object, Object>> function0 = (Function<Either.Right<Object, Object>, Either.Right<Object, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Either<Either.Right<Object, Object>, Either.Right<Object, Object>> either1 = either0.leftMap(function0);
      assertFalse(either1.isLeft());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Either<Either.Right<Object, Object>, Object> either0 = Either.Left((Either.Right<Object, Object>) null);
      Function<Object, Either<Either.Right<Object, Object>, Object>> function0 = (Function<Object, Either<Either.Right<Object, Object>, Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Either<Either.Right<Object, Object>, Object> either1 = either0.flatMap(function0);
      assertSame(either1, either0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      Either<Object, Object> either0 = Either.Left(object0);
      Either<Object, Object> either1 = Either.Right(object0);
      Either<Either.Right<Object, Object>, Object> either2 = Either.Right((Object) either0);
      assertTrue(either2.isRight());
      
      boolean boolean0 = either2.equals(either1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Either<Object, Object> either0 = Either.Left((Object) null);
      boolean boolean0 = either0.isRight();
      assertFalse(boolean0);
  }
}
