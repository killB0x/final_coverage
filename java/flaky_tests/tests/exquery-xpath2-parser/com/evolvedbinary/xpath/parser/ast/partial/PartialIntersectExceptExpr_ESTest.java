/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:38:31 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.IntersectExceptExpr;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import com.evolvedbinary.xpath.parser.ast.partial.PartialIntersectExceptExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialIntersectExceptExpr_ESTest extends PartialIntersectExceptExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PartialIntersectExceptExpr partialIntersectExceptExpr0 = new PartialIntersectExceptExpr((AbstractOperand) null);
      String string0 = partialIntersectExceptExpr0.describe();
      assertEquals("IntersectExceptExpr(null, ?...)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[9];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[2], abstractOperandArray0);
      abstractOperandArray0[3] = (AbstractOperand) andExpr0;
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, abstractOperandArray0);
      PartialIntersectExceptExpr partialIntersectExceptExpr0 = new PartialIntersectExceptExpr(unionExpr0);
      // Undeclared exception!
      try { 
        partialIntersectExceptExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(generalComp0);
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = new IntersectExceptExpr(valueExpr0, linkedList0);
      IntersectExceptExpr.IntersectExcept intersectExceptExpr_IntersectExcept0 = IntersectExceptExpr.IntersectExcept.INTERSECT;
      IntersectExceptExpr.IntersectExceptOp intersectExceptExpr_IntersectExceptOp0 = new IntersectExceptExpr.IntersectExceptOp(intersectExceptExpr_IntersectExcept0, intersectExceptExpr0);
      linkedList0.add(intersectExceptExpr_IntersectExceptOp0);
      PartialIntersectExceptExpr partialIntersectExceptExpr0 = new PartialIntersectExceptExpr(intersectExceptExpr0);
      // Undeclared exception!
      try { 
        partialIntersectExceptExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdditiveExpr additiveExpr0 = new AdditiveExpr((AbstractOperand) null, (List<AdditiveExpr.AdditiveOp>) null);
      PartialIntersectExceptExpr partialIntersectExceptExpr0 = new PartialIntersectExceptExpr(additiveExpr0);
      // Undeclared exception!
      try { 
        partialIntersectExceptExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PartialIntersectExceptExpr partialIntersectExceptExpr0 = new PartialIntersectExceptExpr((AbstractOperand) null);
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = partialIntersectExceptExpr0.complete((List<IntersectExceptExpr.IntersectExceptOp>) linkedList0);
      assertNotNull(intersectExceptExpr0);
  }
}
