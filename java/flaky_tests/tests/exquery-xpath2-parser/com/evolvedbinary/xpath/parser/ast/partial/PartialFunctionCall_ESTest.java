/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:58:04 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import com.evolvedbinary.xpath.parser.ast.AbstractASTNode;
import com.evolvedbinary.xpath.parser.ast.FunctionCall;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.partial.PartialFunctionCall;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialFunctionCall_ESTest extends PartialFunctionCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QNameW qNameW0 = new QNameW("");
      PartialFunctionCall partialFunctionCall0 = new PartialFunctionCall(qNameW0);
      String string0 = partialFunctionCall0.describe();
      assertEquals("FunctionCall(AST_QNameW()(?...))", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PartialFunctionCall partialFunctionCall0 = new PartialFunctionCall((QNameW) null);
      LinkedList<AbstractASTNode> linkedList0 = new LinkedList<AbstractASTNode>();
      FunctionCall functionCall0 = partialFunctionCall0.complete((List<AbstractASTNode>) linkedList0);
      assertNotNull(functionCall0);
  }
}
