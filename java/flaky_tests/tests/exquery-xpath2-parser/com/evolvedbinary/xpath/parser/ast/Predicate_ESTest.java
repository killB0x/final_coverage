/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:28:00 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ASTNode;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.ComparisonExpr;
import com.evolvedbinary.xpath.parser.ast.Expr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.NodeComp;
import com.evolvedbinary.xpath.parser.ast.Predicate;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SchemaAttributeTest;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Predicate_ESTest extends Predicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValueExpr valueExpr0 = new ValueExpr((ASTNode) null);
      Predicate predicate0 = new Predicate(valueExpr0);
      // Undeclared exception!
      try { 
        predicate0.equals(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.ValueExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[9];
      MultiplicativeExpr.MultiplicativeOp[] multiplicativeExpr_MultiplicativeOpArray0 = new MultiplicativeExpr.MultiplicativeOp[1];
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr(abstractOperandArray0[4], multiplicativeExpr_MultiplicativeOpArray0);
      AndExpr andExpr0 = new AndExpr(multiplicativeExpr0, abstractOperandArray0);
      abstractOperandArray0[7] = (AbstractOperand) andExpr0;
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, abstractOperandArray0);
      GeneralComp generalComp0 = GeneralComp.EQUAL;
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(unionExpr0, generalComp0, abstractOperandArray0[0]);
      Predicate predicate0 = new Predicate(comparisonExpr0);
      // Undeclared exception!
      predicate0.describe();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<AdditiveExpr.AdditiveOp> linkedList0 = new LinkedList<AdditiveExpr.AdditiveOp>();
      AdditiveExpr additiveExpr0 = new AdditiveExpr((AbstractOperand) null, linkedList0);
      Predicate predicate0 = new Predicate(additiveExpr0);
      AdditiveExpr.Additive additiveExpr_Additive0 = AdditiveExpr.Additive.SUBTRACT;
      AdditiveExpr.AdditiveOp additiveExpr_AdditiveOp0 = new AdditiveExpr.AdditiveOp(additiveExpr_Additive0, additiveExpr0);
      linkedList0.add(additiveExpr_AdditiveOp0);
      // Undeclared exception!
      try { 
        predicate0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SchemaAttributeTest schemaAttributeTest0 = new SchemaAttributeTest((QNameW) null);
      Predicate predicate0 = new Predicate(schemaAttributeTest0);
      // Undeclared exception!
      try { 
        predicate0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.SchemaAttributeTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Predicate> linkedList0 = new LinkedList<Predicate>();
      Expr expr0 = new Expr(linkedList0);
      Predicate predicate0 = new Predicate(expr0);
      boolean boolean0 = predicate0.equals(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Predicate> linkedList0 = new LinkedList<Predicate>();
      Expr expr0 = new Expr(linkedList0);
      Predicate predicate0 = new Predicate(expr0);
      boolean boolean0 = predicate0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Axis axis0 = Axis.DESCENDANT_OR_SELF;
      Predicate predicate0 = new Predicate(axis0);
      boolean boolean0 = predicate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.FOLLOWS;
      Predicate predicate0 = new Predicate(nodeComp0);
      String string0 = predicate0.describe();
      assertEquals("Predicate(AST_NodeComp(FOLLOWS))", string0);
  }
}
