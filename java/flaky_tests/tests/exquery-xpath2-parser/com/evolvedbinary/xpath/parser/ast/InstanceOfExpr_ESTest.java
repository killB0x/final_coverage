/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:11:46 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.AttributeTest;
import com.evolvedbinary.xpath.parser.ast.ElementTest;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.OccurrenceIndicator;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.SequenceType;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InstanceOfExpr_ESTest extends InstanceOfExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QNameW qNameW0 = new QNameW("RangeExpr(");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(elementTest0);
      RangeExpr rangeExpr0 = new RangeExpr(valueExpr0, valueExpr0);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(rangeExpr0, sequenceType0);
      String string0 = instanceOfExpr0.describe();
      assertEquals("InstanceOf(AST_RangeExpr(AST_ValueExpr(AST_element(AST_QNameW(RangeExpr())) to AST_ValueExpr(AST_element(AST_QNameW(RangeExpr()))) instance of AST_empty-sequence())", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[4];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[0], abstractOperandArray0);
      abstractOperandArray0[3] = (AbstractOperand) andExpr0;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      AttributeTest attributeTest0 = new AttributeTest();
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ONE_OR_MORE;
      SequenceType sequenceType0 = new SequenceType(attributeTest0, occurrenceIndicator0);
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(orExpr0, sequenceType0);
      // Undeclared exception!
      try { 
        instanceOfExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[8];
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, abstractOperandArray0);
      abstractOperandArray0[0] = (AbstractOperand) unionExpr0;
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(abstractOperandArray0[0], sequenceType0);
      // Undeclared exception!
      try { 
        instanceOfExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QNameW qNameW0 = new QNameW("RangeExpr(");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(elementTest0);
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(valueExpr0, (SequenceType) null);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr1 = new InstanceOfExpr(valueExpr0, sequenceType0);
      boolean boolean0 = instanceOfExpr0.equals(instanceOfExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QNameW qNameW0 = new QNameW("RangeExpr(");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(elementTest0);
      RangeExpr rangeExpr0 = new RangeExpr(valueExpr0, valueExpr0);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(rangeExpr0, sequenceType0);
      boolean boolean0 = instanceOfExpr0.equals(instanceOfExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QNameW qNameW0 = new QNameW("RangeExpr(");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(elementTest0);
      RangeExpr rangeExpr0 = new RangeExpr(valueExpr0, valueExpr0);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(rangeExpr0, sequenceType0);
      InstanceOfExpr instanceOfExpr1 = new InstanceOfExpr(instanceOfExpr0, sequenceType0);
      boolean boolean0 = instanceOfExpr0.equals(instanceOfExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QNameW qNameW0 = new QNameW("RangeExpr(");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(elementTest0);
      RangeExpr rangeExpr0 = new RangeExpr(valueExpr0, valueExpr0);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(rangeExpr0, sequenceType0);
      boolean boolean0 = instanceOfExpr0.equals(sequenceType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr((AbstractOperand) null, sequenceType0);
      // Undeclared exception!
      try { 
        instanceOfExpr0.equals(instanceOfExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.InstanceOfExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr((AbstractOperand) null, sequenceType0);
      boolean boolean0 = instanceOfExpr0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, (List<? extends AbstractOperand>) null);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(andExpr0, sequenceType0);
      // Undeclared exception!
      try { 
        instanceOfExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }
}
