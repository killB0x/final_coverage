/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:57:23 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.partial.PartialAdditiveExpr;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialAdditiveExpr_ESTest extends PartialAdditiveExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[6];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[3], abstractOperandArray0);
      abstractOperandArray0[5] = (AbstractOperand) andExpr0;
      PartialAdditiveExpr partialAdditiveExpr0 = new PartialAdditiveExpr(abstractOperandArray0[5]);
      // Undeclared exception!
      partialAdditiveExpr0.describe();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, (List<? extends AbstractOperand>) null);
      PartialAdditiveExpr partialAdditiveExpr0 = new PartialAdditiveExpr(orExpr0);
      // Undeclared exception!
      try { 
        partialAdditiveExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PartialAdditiveExpr partialAdditiveExpr0 = new PartialAdditiveExpr((AbstractOperand) null);
      AdditiveExpr additiveExpr0 = partialAdditiveExpr0.complete((List<AdditiveExpr.AdditiveOp>) null);
      assertNotNull(additiveExpr0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PartialAdditiveExpr partialAdditiveExpr0 = new PartialAdditiveExpr((AbstractOperand) null);
      String string0 = partialAdditiveExpr0.describe();
      assertEquals("AdditiveExpr(null, ?...)", string0);
  }
}
