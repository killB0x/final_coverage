/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:49:02 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.partial.PartialDoubleLiteral;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialDoubleLiteral_ESTest extends PartialDoubleLiteral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral((String) null);
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete((String) null);
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.new PartialDoubleLiteral2('^');
      // Undeclared exception!
      try { 
        partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0.complete((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character n is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("com.evolvedbinary.xpath.parser.ast.partial.PartialDoubleLiteral");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete("?");
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.complete("?");
      // Undeclared exception!
      try { 
        partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0.complete((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Character array is missing \"e\" notation exponential mark.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("DoubleLiteral(");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.new PartialDoubleLiteral1((String) null);
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.complete("]rH8h^9CP");
      String string0 = partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0.toString();
      assertEquals("P_AST_DoubleLiteral(DoubleLiteral(.0)e]?", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("com.evolvedbinary.xpath.parser.ast.partial.PartialDoubleLiteral");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete("?");
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.complete("?");
      String string0 = partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0.describe();
      assertEquals("DoubleLiteral(com.evolvedbinary.xpath.parser.ast.partial.PartialDoubleLiteral.?)e??", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete("");
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.complete("");
      assertNotNull(partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral((String) null);
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete((String) null);
      PartialDoubleLiteral.PartialDoubleLiteral1.PartialDoubleLiteral2 partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0 = partialDoubleLiteral_PartialDoubleLiteral1_0.complete((String) null);
      assertNotNull(partialDoubleLiteral_PartialDoubleLiteral1_PartialDoubleLiteral2_0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("DoubleLiteral(");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.new PartialDoubleLiteral1((String) null);
      String string0 = partialDoubleLiteral_PartialDoubleLiteral1_0.describe();
      assertEquals("DoubleLiteral(DoubleLiteral(.0)e??", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("=ucrr:WH2)f/");
      PartialDoubleLiteral.PartialDoubleLiteral1 partialDoubleLiteral_PartialDoubleLiteral1_0 = partialDoubleLiteral0.complete("@nu}8O,[:wtxI2^v");
      String string0 = partialDoubleLiteral_PartialDoubleLiteral1_0.toString();
      assertEquals("P_AST_DoubleLiteral(=ucrr:WH2)f/.@nu}8O,[:wtxI2^v)e??", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PartialDoubleLiteral partialDoubleLiteral0 = new PartialDoubleLiteral("DoubleLiteral(");
      String string0 = partialDoubleLiteral0.describe();
      assertEquals("DoubleLiteral(DoubleLiteral(.?)e??", string0);
  }
}
