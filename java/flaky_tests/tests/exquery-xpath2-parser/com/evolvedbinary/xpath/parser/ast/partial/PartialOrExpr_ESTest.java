/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:43:26 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.AnyKindTest;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.OccurrenceIndicator;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.SequenceType;
import com.evolvedbinary.xpath.parser.ast.TreatExpr;
import com.evolvedbinary.xpath.parser.ast.partial.PartialOrExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialOrExpr_ESTest extends PartialOrExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[5];
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, linkedList0);
      AndExpr andExpr1 = new AndExpr(andExpr0, abstractOperandArray0);
      abstractOperandArray0[1] = (AbstractOperand) andExpr1;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      AnyKindTest anyKindTest0 = AnyKindTest.instance();
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      SequenceType sequenceType0 = new SequenceType(anyKindTest0, occurrenceIndicator0);
      TreatExpr treatExpr0 = new TreatExpr(orExpr0, sequenceType0);
      PartialOrExpr partialOrExpr0 = new PartialOrExpr(treatExpr0);
      LinkedList<AbstractOperand> linkedList1 = new LinkedList<AbstractOperand>();
      partialOrExpr0.complete((List<AbstractOperand>) linkedList1);
      // Undeclared exception!
      try { 
        partialOrExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[5];
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, linkedList0);
      AndExpr andExpr1 = new AndExpr(andExpr0, abstractOperandArray0);
      abstractOperandArray0[1] = (AbstractOperand) andExpr1;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      AnyKindTest anyKindTest0 = AnyKindTest.instance();
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      SequenceType sequenceType0 = new SequenceType(anyKindTest0, occurrenceIndicator0);
      TreatExpr treatExpr0 = new TreatExpr(orExpr0, sequenceType0);
      PartialOrExpr partialOrExpr0 = new PartialOrExpr(treatExpr0);
      // Undeclared exception!
      try { 
        partialOrExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdditiveExpr additiveExpr0 = new AdditiveExpr((AbstractOperand) null, (List<AdditiveExpr.AdditiveOp>) null);
      PartialOrExpr partialOrExpr0 = new PartialOrExpr(additiveExpr0);
      // Undeclared exception!
      try { 
        partialOrExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PartialOrExpr partialOrExpr0 = new PartialOrExpr((AbstractOperand) null);
      String string0 = partialOrExpr0.describe();
      assertEquals("OrExpr(null, ?...)", string0);
  }
}
