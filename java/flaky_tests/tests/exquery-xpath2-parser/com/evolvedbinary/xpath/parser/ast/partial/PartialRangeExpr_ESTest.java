/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:42:07 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import com.evolvedbinary.xpath.parser.ast.VarRef;
import com.evolvedbinary.xpath.parser.ast.partial.PartialRangeExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialRangeExpr_ESTest extends PartialRangeExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<AdditiveExpr.AdditiveOp> linkedList0 = new LinkedList<AdditiveExpr.AdditiveOp>();
      AdditiveExpr additiveExpr0 = new AdditiveExpr((AbstractOperand) null, linkedList0);
      AdditiveExpr.Additive additiveExpr_Additive0 = AdditiveExpr.Additive.SUBTRACT;
      AdditiveExpr.AdditiveOp additiveExpr_AdditiveOp0 = new AdditiveExpr.AdditiveOp(additiveExpr_Additive0, additiveExpr0);
      linkedList0.add(additiveExpr_AdditiveOp0);
      PartialRangeExpr partialRangeExpr0 = new PartialRangeExpr(additiveExpr0);
      // Undeclared exception!
      try { 
        partialRangeExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, (List<MultiplicativeExpr.MultiplicativeOp>) null);
      PartialRangeExpr partialRangeExpr0 = new PartialRangeExpr(multiplicativeExpr0);
      // Undeclared exception!
      try { 
        partialRangeExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QNameW qNameW0 = new QNameW("No such general comparison: '");
      VarRef varRef0 = new VarRef(qNameW0);
      ValueExpr valueExpr0 = new ValueExpr(varRef0);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[7];
      OrExpr orExpr0 = new OrExpr(valueExpr0, abstractOperandArray0);
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      AndExpr andExpr0 = new AndExpr(orExpr0, linkedList0);
      PartialRangeExpr partialRangeExpr0 = new PartialRangeExpr(andExpr0);
      RangeExpr rangeExpr0 = partialRangeExpr0.complete(abstractOperandArray0[4]);
      assertNotNull(rangeExpr0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PartialRangeExpr partialRangeExpr0 = new PartialRangeExpr((AbstractOperand) null);
      String string0 = partialRangeExpr0.describe();
      assertEquals("RangeExpr(null to ?)", string0);
  }
}
