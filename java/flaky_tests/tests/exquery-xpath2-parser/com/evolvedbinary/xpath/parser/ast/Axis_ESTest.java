/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:53:04 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.Axis;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Axis axis0 = Axis.CHILD;
      Axis axis1 = Axis.NAMESPACE;
      boolean boolean0 = axis1.equals(axis0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Axis axis0 = Axis.ANCESTOR_OR_SELF;
      boolean boolean0 = axis0.equals(axis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Axis axis0 = Axis.ANCESTOR_OR_SELF;
      Object object0 = new Object();
      boolean boolean0 = axis0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Axis axis0 = Axis.CHILD;
      boolean boolean0 = axis0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Axis axis0 = Axis.fromSyntax("descendant");
      assertEquals(Axis.Direction.DESCENDANT, axis0.getDirection());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Axis.fromSyntax("QDAzj]0IXX8tp+{1Da");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such axis: 'QDAzj]0IXX8tp+{1Da'
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Axis axis0 = Axis.SELF;
      String string0 = axis0.ANCESTOR_OR_SELF.describe();
      assertEquals("Axis(ancestor-or-self)", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Axis axis0 = Axis.ANCESTOR_OR_SELF;
      String string0 = axis0.getSyntax();
      assertEquals("ancestor-or-self", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Axis axis0 = Axis.SELF;
      String string0 = axis0.getName();
      assertEquals("SELF", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Axis axis0 = Axis.SELF;
      Axis.Direction axis_Direction0 = axis0.getDirection();
      assertEquals(Axis.Direction.SELF, axis_Direction0);
  }
}
