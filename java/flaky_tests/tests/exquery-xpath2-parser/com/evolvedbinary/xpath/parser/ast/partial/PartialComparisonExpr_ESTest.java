/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:36:45 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.Comparison;
import com.evolvedbinary.xpath.parser.ast.ComparisonExpr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.IntersectExceptExpr;
import com.evolvedbinary.xpath.parser.ast.NodeComp;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.SequenceType;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import com.evolvedbinary.xpath.parser.ast.partial.PartialComparisonExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialComparisonExpr_ESTest extends PartialComparisonExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[9];
      RangeExpr rangeExpr0 = new RangeExpr(abstractOperandArray0[1], abstractOperandArray0[5]);
      UnionExpr unionExpr0 = new UnionExpr(rangeExpr0, abstractOperandArray0);
      abstractOperandArray0[7] = (AbstractOperand) unionExpr0;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(orExpr0);
      // Undeclared exception!
      partialComparisonExpr0.describe();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = new IntersectExceptExpr((AbstractOperand) null, linkedList0);
      IntersectExceptExpr.IntersectExcept intersectExceptExpr_IntersectExcept0 = IntersectExceptExpr.IntersectExcept.EXCEPT;
      IntersectExceptExpr.IntersectExceptOp intersectExceptExpr_IntersectExceptOp0 = new IntersectExceptExpr.IntersectExceptOp(intersectExceptExpr_IntersectExcept0, intersectExceptExpr0);
      linkedList0.add(intersectExceptExpr_IntersectExceptOp0);
      RangeExpr rangeExpr0 = new RangeExpr(intersectExceptExpr0, (AbstractOperand) null);
      ValueExpr valueExpr0 = new ValueExpr(rangeExpr0);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(valueExpr0);
      // Undeclared exception!
      try { 
        partialComparisonExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, (List<? extends AbstractOperand>) null);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(unionExpr0);
      // Undeclared exception!
      try { 
        partialComparisonExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr((AbstractOperand) null, sequenceType0);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(instanceOfExpr0);
      GeneralComp generalComp0 = GeneralComp.NOT_EQUAL;
      PartialComparisonExpr.PartialComparisonExpr1 partialComparisonExpr_PartialComparisonExpr1_0 = partialComparisonExpr0.new PartialComparisonExpr1(generalComp0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr((AbstractOperand) null, sequenceType0);
      ValueExpr valueExpr0 = new ValueExpr(instanceOfExpr0);
      UnaryExpr unaryExpr0 = new UnaryExpr("G!IJH<O}J_jr", valueExpr0);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(unaryExpr0);
      String string0 = partialComparisonExpr0.describe();
      assertEquals("ComparisonExpr(AST_UnaryExpr(G!IJH<O}J_jrAST_ValueExpr(AST_InstanceOf(null instance of AST_empty-sequence()))), ?, ?)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr((AbstractOperand) null, sequenceType0);
      ValueExpr valueExpr0 = new ValueExpr(instanceOfExpr0);
      UnaryExpr unaryExpr0 = new UnaryExpr("G!IJH<O}J_jr", valueExpr0);
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr(unaryExpr0);
      NodeComp nodeComp0 = NodeComp.IS;
      PartialComparisonExpr.PartialComparisonExpr1 partialComparisonExpr_PartialComparisonExpr1_0 = partialComparisonExpr0.complete((Comparison) nodeComp0);
      ComparisonExpr comparisonExpr0 = partialComparisonExpr_PartialComparisonExpr1_0.complete((AbstractOperand) unaryExpr0);
      assertNotNull(comparisonExpr0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PartialComparisonExpr partialComparisonExpr0 = new PartialComparisonExpr((AbstractOperand) null);
      GeneralComp generalComp0 = GeneralComp.NOT_EQUAL;
      PartialComparisonExpr.PartialComparisonExpr1 partialComparisonExpr_PartialComparisonExpr1_0 = partialComparisonExpr0.complete((Comparison) generalComp0);
      String string0 = partialComparisonExpr_PartialComparisonExpr1_0.describe();
      assertEquals("ComparisonExpr(null != ?)", string0);
  }
}
