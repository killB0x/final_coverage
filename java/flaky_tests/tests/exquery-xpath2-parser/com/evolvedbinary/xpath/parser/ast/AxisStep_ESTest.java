/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:10:00 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.AxisStep;
import com.evolvedbinary.xpath.parser.ast.ElementTest;
import com.evolvedbinary.xpath.parser.ast.PITest;
import com.evolvedbinary.xpath.parser.ast.Predicate;
import com.evolvedbinary.xpath.parser.ast.PredicateList;
import com.evolvedbinary.xpath.parser.ast.Step;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AxisStep_ESTest extends AxisStep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AxisStep axisStep0 = AxisStep.SLASH_SLASH_ABBREV;
      Step step0 = axisStep0.getStep();
      PredicateList predicateList0 = axisStep0.getPredicateList();
      AxisStep axisStep1 = new AxisStep(step0, predicateList0);
      boolean boolean0 = AxisStep.SLASH_SLASH_ABBREV.equals(axisStep1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Axis axis0 = Axis.DESCENDANT;
      ElementTest elementTest0 = new ElementTest();
      Step step0 = new Step(axis0, elementTest0);
      AxisStep axisStep0 = new AxisStep(step0, (PredicateList) null);
      PredicateList predicateList0 = axisStep0.getPredicateList();
      assertNull(predicateList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AxisStep axisStep0 = AxisStep.SLASH_SLASH_ABBREV;
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep1 = new AxisStep((Step) null, predicateList0);
      // Undeclared exception!
      try { 
        axisStep0.equals(axisStep1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AxisStep", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Axis axis0 = Axis.FOLLOWING_SIBLING;
      PITest pITest0 = new PITest();
      Step step0 = new Step(axis0, pITest0);
      LinkedList<Predicate> linkedList0 = new LinkedList<Predicate>();
      PredicateList predicateList0 = new PredicateList(linkedList0);
      Predicate predicate0 = new Predicate(predicateList0);
      linkedList0.add(predicate0);
      AxisStep axisStep0 = new AxisStep(step0, predicateList0);
      // Undeclared exception!
      try { 
        axisStep0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PredicateList predicateList0 = new PredicateList((List<Predicate>) null);
      AxisStep axisStep0 = new AxisStep((Step) null, predicateList0);
      // Undeclared exception!
      try { 
        axisStep0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.PredicateList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AxisStep axisStep0 = AxisStep.SLASH_SLASH_ABBREV;
      Step step0 = axisStep0.getStep();
      Predicate[] predicateArray0 = new Predicate[1];
      PredicateList predicateList0 = new PredicateList(predicateArray0);
      AxisStep axisStep1 = new AxisStep(step0, predicateList0);
      boolean boolean0 = axisStep1.equals(axisStep0);
      assertFalse(axisStep0.equals((Object)axisStep1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AxisStep axisStep0 = AxisStep.SLASH_SLASH_ABBREV;
      PITest pITest0 = new PITest();
      Step step0 = new Step((Axis) null, pITest0);
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep1 = new AxisStep(step0, predicateList0);
      boolean boolean0 = axisStep0.equals(axisStep1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep0 = new AxisStep((Step) null, predicateList0);
      Object object0 = new Object();
      boolean boolean0 = axisStep0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep0 = new AxisStep((Step) null, predicateList0);
      boolean boolean0 = axisStep0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep0 = new AxisStep((Step) null, predicateList0);
      Step step0 = axisStep0.getStep();
      assertNull(step0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PredicateList predicateList0 = PredicateList.EMPTY;
      AxisStep axisStep0 = new AxisStep((Step) null, predicateList0);
      String string0 = axisStep0.SLASH_SLASH_ABBREV.describe();
      assertEquals("AxisStep(AST_Step(descendant-or-self::AST_node()), AST_PredicateList())", string0);
  }
}
