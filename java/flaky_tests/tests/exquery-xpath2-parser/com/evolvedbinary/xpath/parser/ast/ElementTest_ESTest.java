/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:17:10 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ElementTest;
import com.evolvedbinary.xpath.parser.ast.KindTest;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ElementTest_ESTest extends ElementTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest();
      elementTest0.typeName = qNameW0;
      String string0 = elementTest0.describe();
      assertEquals("element(, AST_QNameW(dsDZT;cha?:)n$hk}d))", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      String string0 = elementTest0.describe();
      assertEquals("element(AST_QNameW(dsDZT;cha?:)n$hk}d))", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      QNameW qNameW1 = elementTest0.getName();
      assertEquals(")n$hk}d", qNameW1.getLocalPart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QNameW qNameW0 = new QNameW("com.evolvedbinary.xpath.parser.ast.ElementTest", "com.evolvedbinary.xpath.parser.ast.ElementTest");
      Boolean boolean0 = Boolean.TRUE;
      ElementTest elementTest0 = new ElementTest(qNameW0, qNameW0, boolean0);
      ElementTest elementTest1 = new ElementTest(elementTest0.typeName);
      elementTest1.typeName = qNameW0;
      boolean boolean1 = elementTest0.equals(elementTest1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QNameW qNameW0 = new QNameW("", "");
      ElementTest elementTest0 = new ElementTest(qNameW0, qNameW0);
      ElementTest elementTest1 = new ElementTest(qNameW0);
      boolean boolean0 = elementTest0.equals(elementTest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ElementTest elementTest1 = new ElementTest(qNameW0, qNameW0);
      // Undeclared exception!
      try { 
        elementTest0.equals(elementTest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.ElementTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QNameW qNameW0 = new QNameW("", "");
      ElementTest elementTest0 = new ElementTest(qNameW0, qNameW0);
      boolean boolean0 = elementTest0.equals(elementTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      ElementTest elementTest1 = new ElementTest();
      boolean boolean0 = elementTest0.equals(elementTest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QNameW qNameW0 = new QNameW("D$v*{2@-t", "D$v*{2@-t");
      ElementTest elementTest0 = new ElementTest();
      Boolean boolean0 = Boolean.valueOf(true);
      ElementTest elementTest1 = new ElementTest(qNameW0, qNameW0, boolean0);
      // Undeclared exception!
      try { 
        elementTest0.equals(elementTest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.ElementTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest();
      boolean boolean0 = elementTest0.equals(elementTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      boolean boolean0 = elementTest0.equals(elementTest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QNameW qNameW0 = new QNameW("dsDZT;cha?", ")n$hk}d");
      ElementTest elementTest0 = new ElementTest(qNameW0);
      boolean boolean0 = elementTest0.equals("AST_QNameW(dsDZT;cha?:)n$hk}d)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest();
      boolean boolean0 = elementTest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest();
      elementTest0.optionalType = true;
      String string0 = elementTest0.describeParams();
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest();
      String string0 = elementTest0.describeParams();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest((QNameW) null, (QNameW) null, (Boolean) null);
      assertEquals(KindTest.Kind.ELEMENT, elementTest0.getKind());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElementTest elementTest0 = new ElementTest();
      QNameW qNameW0 = elementTest0.getName();
      assertNull(qNameW0);
  }
}
