/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:41:08 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.Comparison;
import com.evolvedbinary.xpath.parser.ast.ComparisonExpr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.ValueComp;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComparisonExpr_ESTest extends ComparisonExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      String string0 = comparisonExpr0.describe();
      assertEquals("ComparisonExpr(AST_ValueExpr(AST_ValueComp(GREATER_THAN)) AST_ValueComp(GREATER_THAN) AST_ValueExpr(AST_ValueComp(GREATER_THAN)))", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, (AbstractOperand) null);
      // Undeclared exception!
      try { 
        comparisonExpr0.equals(comparisonExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.ComparisonExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[5];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[0], abstractOperandArray0);
      abstractOperandArray0[1] = (AbstractOperand) andExpr0;
      ValueComp valueComp0 = ValueComp.NOT_EQUAL;
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(abstractOperandArray0[1], valueComp0, abstractOperandArray0[1]);
      // Undeclared exception!
      try { 
        comparisonExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      ComparisonExpr comparisonExpr1 = new ComparisonExpr(valueExpr0, valueComp0, comparisonExpr0);
      boolean boolean0 = comparisonExpr1.equals(comparisonExpr0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.EQUAL;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      ValueComp valueComp1 = ValueComp.LESS_THAN;
      ComparisonExpr comparisonExpr1 = new ComparisonExpr(valueExpr0, valueComp1, comparisonExpr0);
      boolean boolean0 = comparisonExpr0.equals(comparisonExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      ComparisonExpr comparisonExpr1 = new ComparisonExpr(comparisonExpr0, valueComp0, comparisonExpr0);
      boolean boolean0 = comparisonExpr0.equals(comparisonExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      Object object0 = new Object();
      boolean boolean0 = comparisonExpr0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN;
      ValueExpr valueExpr0 = new ValueExpr(valueComp0);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(valueExpr0, valueComp0, valueExpr0);
      boolean boolean0 = comparisonExpr0.equals(comparisonExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, (List<MultiplicativeExpr.MultiplicativeOp>) null);
      ComparisonExpr comparisonExpr0 = new ComparisonExpr(multiplicativeExpr0, (Comparison) null, (AbstractOperand) null);
      // Undeclared exception!
      try { 
        comparisonExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.GREATER_THAN_OR_EQUAL;
      ComparisonExpr comparisonExpr0 = new ComparisonExpr((AbstractOperand) null, generalComp0, (AbstractOperand) null);
      boolean boolean0 = comparisonExpr0.equals((Object) null);
      assertFalse(boolean0);
  }
}
