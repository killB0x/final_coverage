/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:48:36 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ASTNode;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.AtomicType;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.CastExpr;
import com.evolvedbinary.xpath.parser.ast.ContextItemExpr;
import com.evolvedbinary.xpath.parser.ast.Expr;
import com.evolvedbinary.xpath.parser.ast.IfExpr;
import com.evolvedbinary.xpath.parser.ast.NameTest;
import com.evolvedbinary.xpath.parser.ast.NodeComp;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.PITest;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SingleType;
import com.evolvedbinary.xpath.parser.ast.Step;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IfExpr_ESTest extends IfExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<IfExpr> linkedList0 = new LinkedList<IfExpr>();
      Expr expr0 = new Expr(linkedList0);
      IfExpr ifExpr0 = new IfExpr(expr0, (ASTNode) null, expr0);
      // Undeclared exception!
      try { 
        ifExpr0.equals(ifExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.IfExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[1];
      ContextItemExpr contextItemExpr0 = ContextItemExpr.instance();
      ValueExpr valueExpr0 = new ValueExpr(contextItemExpr0);
      QNameW qNameW0 = new QNameW("", "");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastExpr castExpr0 = new CastExpr(valueExpr0, singleType0);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[9];
      UnionExpr unionExpr0 = new UnionExpr(abstractOperandArray0[2], abstractOperandArray0);
      abstractOperandArray0[6] = (AbstractOperand) unionExpr0;
      OrExpr orExpr0 = new OrExpr(castExpr0, abstractOperandArray0);
      aSTNodeArray0[0] = (ASTNode) orExpr0;
      Expr expr0 = new Expr(aSTNodeArray0);
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[3], abstractOperandArray0);
      NodeComp nodeComp0 = NodeComp.IS;
      IfExpr ifExpr0 = new IfExpr(expr0, andExpr0, nodeComp0);
      // Undeclared exception!
      try { 
        ifExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<AndExpr> linkedList0 = new LinkedList<AndExpr>();
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, linkedList0);
      linkedList0.add(andExpr0);
      Expr expr0 = new Expr(linkedList0);
      IfExpr ifExpr0 = new IfExpr(expr0, (ASTNode) null, andExpr0);
      // Undeclared exception!
      try { 
        ifExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[3];
      Expr expr0 = new Expr(aSTNodeArray0);
      IfExpr ifExpr0 = new IfExpr(expr0, expr0, expr0);
      // Undeclared exception!
      try { 
        ifExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[3];
      QNameW qNameW0 = new QNameW("");
      NameTest nameTest0 = new NameTest(qNameW0);
      aSTNodeArray0[1] = (ASTNode) nameTest0;
      Expr expr0 = new Expr(aSTNodeArray0);
      IfExpr ifExpr0 = new IfExpr(expr0, nameTest0, aSTNodeArray0[2]);
      IfExpr ifExpr1 = new IfExpr(expr0, nameTest0, aSTNodeArray0[1]);
      boolean boolean0 = ifExpr0.equals(ifExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<IfExpr> linkedList0 = new LinkedList<IfExpr>();
      Expr expr0 = new Expr(linkedList0);
      IfExpr ifExpr0 = new IfExpr(expr0, (ASTNode) null, expr0);
      IfExpr ifExpr1 = new IfExpr(expr0, expr0, ifExpr0);
      boolean boolean0 = ifExpr0.equals(ifExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[10];
      Expr expr0 = new Expr(aSTNodeArray0);
      IfExpr ifExpr0 = new IfExpr((Expr) null, expr0, aSTNodeArray0[1]);
      IfExpr ifExpr1 = new IfExpr(expr0, (ASTNode) null, ifExpr0);
      boolean boolean0 = ifExpr0.equals(ifExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<IfExpr> linkedList0 = new LinkedList<IfExpr>();
      Expr expr0 = new Expr(linkedList0);
      Axis axis0 = Axis.PRECEDING_SIBLING;
      PITest pITest0 = new PITest();
      Step step0 = new Step(axis0, pITest0);
      IfExpr ifExpr0 = new IfExpr(expr0, step0, axis0);
      boolean boolean0 = ifExpr0.equals(expr0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<IfExpr> linkedList0 = new LinkedList<IfExpr>();
      Expr expr0 = new Expr(linkedList0);
      Axis axis0 = Axis.PRECEDING_SIBLING;
      PITest pITest0 = new PITest();
      Step step0 = new Step(axis0, pITest0);
      IfExpr ifExpr0 = new IfExpr(expr0, step0, axis0);
      boolean boolean0 = ifExpr0.equals(ifExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IfExpr ifExpr0 = new IfExpr((Expr) null, (ASTNode) null, (ASTNode) null);
      boolean boolean0 = ifExpr0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IfExpr ifExpr0 = new IfExpr((Expr) null, (ASTNode) null, (ASTNode) null);
      String string0 = ifExpr0.describe();
      assertEquals("IfExpr(null then null else null)", string0);
  }
}
