/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:36:03 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ASTNode;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.AtomicType;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.CastExpr;
import com.evolvedbinary.xpath.parser.ast.Expr;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.PITest;
import com.evolvedbinary.xpath.parser.ast.Predicate;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SequenceType;
import com.evolvedbinary.xpath.parser.ast.SingleType;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractASTNode_ESTest extends AbstractASTNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Axis axis0 = Axis.ATTRIBUTE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("ccHR", valueExpr0);
      LinkedList<AdditiveExpr.AdditiveOp> linkedList0 = new LinkedList<AdditiveExpr.AdditiveOp>();
      AdditiveExpr additiveExpr0 = new AdditiveExpr(unaryExpr0, linkedList0);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[6];
      abstractOperandArray0[0] = (AbstractOperand) additiveExpr0;
      MultiplicativeExpr.MultiplicativeOp[] multiplicativeExpr_MultiplicativeOpArray0 = new MultiplicativeExpr.MultiplicativeOp[2];
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.MULTIPLY;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, unaryExpr0);
      multiplicativeExpr_MultiplicativeOpArray0[0] = multiplicativeExpr_MultiplicativeOp0;
      multiplicativeExpr_MultiplicativeOpArray0[1] = multiplicativeExpr_MultiplicativeOp0;
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr(valueExpr0, multiplicativeExpr_MultiplicativeOpArray0);
      abstractOperandArray0[1] = (AbstractOperand) multiplicativeExpr0;
      abstractOperandArray0[2] = (AbstractOperand) valueExpr0;
      QNameW qNameW0 = new QNameW("ccHR");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      AndExpr andExpr0 = new AndExpr(unaryExpr0, abstractOperandArray0);
      abstractOperandArray0[5] = (AbstractOperand) andExpr0;
      OrExpr orExpr0 = new OrExpr(additiveExpr0, abstractOperandArray0);
      // Undeclared exception!
      orExpr0.toString();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[1];
      Expr expr0 = new Expr(aSTNodeArray0);
      // Undeclared exception!
      try { 
        expr0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTNode[] aSTNodeArray0 = new ASTNode[0];
      Expr expr0 = new Expr(aSTNodeArray0);
      String string0 = expr0.toString();
      assertEquals("AST_Expr()", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      Predicate predicate0 = new Predicate(sequenceType0);
      sequenceType0.toString();
      predicate0.describe();
      predicate0.describe();
      PITest pITest0 = new PITest("i(j+'lty&EHr");
      pITest0.describeParams();
      ValueExpr valueExpr0 = new ValueExpr(predicate0);
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(valueExpr0, sequenceType0);
      QNameW qNameW0 = new QNameW("B0l{W<FQ5l3Q)");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, false);
      CastExpr castExpr0 = new CastExpr(instanceOfExpr0, singleType0);
      Object object0 = new Object();
      boolean boolean0 = castExpr0.equals(object0);
      assertFalse(boolean0);
  }
}
