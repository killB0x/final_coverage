/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:20:41 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ASTNode;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.NodeComp;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RangeExpr_ESTest extends RangeExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.PRECEDES;
      ValueExpr valueExpr0 = new ValueExpr(nodeComp0);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr0, valueExpr0);
      String string0 = rangeExpr0.describe();
      assertEquals("RangeExpr(AST_UnionExpr(AST_ValueExpr(AST_NodeComp(PRECEDES))) to AST_ValueExpr(AST_NodeComp(PRECEDES)))", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RangeExpr rangeExpr0 = new RangeExpr((AbstractOperand) null, (AbstractOperand) null);
      // Undeclared exception!
      try { 
        rangeExpr0.equals(rangeExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.RangeExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ValueExpr valueExpr0 = new ValueExpr((ASTNode) null);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[9];
      OrExpr orExpr0 = new OrExpr(abstractOperandArray0[2], abstractOperandArray0);
      abstractOperandArray0[8] = (AbstractOperand) orExpr0;
      UnionExpr unionExpr1 = new UnionExpr(unionExpr0, abstractOperandArray0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr1, abstractOperandArray0[7]);
      // Undeclared exception!
      rangeExpr0.describe();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(orExpr0, (AbstractOperand) null);
      linkedList0.offerFirst(rangeExpr0);
      // Undeclared exception!
      try { 
        rangeExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.PRECEDES;
      ValueExpr valueExpr0 = new ValueExpr(nodeComp0);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr0, valueExpr0);
      RangeExpr rangeExpr1 = new RangeExpr(unionExpr0, unionExpr0);
      boolean boolean0 = rangeExpr0.equals(rangeExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.PRECEDES;
      ValueExpr valueExpr0 = new ValueExpr(nodeComp0);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr0, valueExpr0);
      RangeExpr rangeExpr1 = new RangeExpr(rangeExpr0, unionExpr0);
      boolean boolean0 = rangeExpr0.equals(rangeExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.PRECEDES;
      ValueExpr valueExpr0 = new ValueExpr(nodeComp0);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr0, valueExpr0);
      boolean boolean0 = rangeExpr0.equals(rangeExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NodeComp nodeComp0 = NodeComp.PRECEDES;
      ValueExpr valueExpr0 = new ValueExpr(nodeComp0);
      LinkedList<RangeExpr> linkedList0 = new LinkedList<RangeExpr>();
      UnionExpr unionExpr0 = new UnionExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(unionExpr0, valueExpr0);
      boolean boolean0 = rangeExpr0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, (List<MultiplicativeExpr.MultiplicativeOp>) null);
      RangeExpr rangeExpr0 = new RangeExpr((AbstractOperand) null, multiplicativeExpr0);
      // Undeclared exception!
      try { 
        rangeExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RangeExpr rangeExpr0 = new RangeExpr((AbstractOperand) null, (AbstractOperand) null);
      boolean boolean0 = rangeExpr0.equals((Object) null);
      assertFalse(boolean0);
  }
}
