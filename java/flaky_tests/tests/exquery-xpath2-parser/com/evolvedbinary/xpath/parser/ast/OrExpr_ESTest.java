/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:54:40 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AdditiveExpr;
import com.evolvedbinary.xpath.parser.ast.CastableExpr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SingleType;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import com.evolvedbinary.xpath.parser.ast.VarRef;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrExpr_ESTest extends OrExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VarRef varRef0 = new VarRef((QNameW) null);
      ValueExpr valueExpr0 = new ValueExpr(varRef0);
      AdditiveExpr.AdditiveOp[] additiveExpr_AdditiveOpArray0 = new AdditiveExpr.AdditiveOp[8];
      AdditiveExpr.Additive additiveExpr_Additive0 = AdditiveExpr.Additive.ADD;
      AdditiveExpr.AdditiveOp additiveExpr_AdditiveOp0 = new AdditiveExpr.AdditiveOp(additiveExpr_Additive0, valueExpr0);
      additiveExpr_AdditiveOpArray0[0] = additiveExpr_AdditiveOp0;
      additiveExpr_AdditiveOpArray0[1] = additiveExpr_AdditiveOpArray0[0];
      additiveExpr_AdditiveOpArray0[2] = additiveExpr_AdditiveOp0;
      additiveExpr_AdditiveOpArray0[3] = additiveExpr_AdditiveOpArray0[0];
      additiveExpr_AdditiveOpArray0[4] = additiveExpr_AdditiveOp0;
      additiveExpr_AdditiveOpArray0[5] = additiveExpr_AdditiveOpArray0[3];
      additiveExpr_AdditiveOpArray0[6] = additiveExpr_AdditiveOp0;
      additiveExpr_AdditiveOpArray0[7] = additiveExpr_AdditiveOp0;
      AdditiveExpr additiveExpr0 = new AdditiveExpr(valueExpr0, additiveExpr_AdditiveOpArray0);
      CastableExpr castableExpr0 = new CastableExpr(additiveExpr0, (SingleType) null);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[1];
      OrExpr orExpr0 = new OrExpr(castableExpr0, abstractOperandArray0);
      StringBuilder stringBuilder0 = new StringBuilder(13);
      orExpr0.describeOp(stringBuilder0, castableExpr0);
      assertEquals(" or AST_CastableExpr(AST_AdditiveExpr(AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null)) ADD AST_ValueExpr(AST_VarRef(null))) castable as null)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VarRef varRef0 = new VarRef((QNameW) null);
      ValueExpr valueExpr0 = new ValueExpr(varRef0);
      AdditiveExpr.AdditiveOp[] additiveExpr_AdditiveOpArray0 = new AdditiveExpr.AdditiveOp[8];
      AdditiveExpr additiveExpr0 = new AdditiveExpr(valueExpr0, additiveExpr_AdditiveOpArray0);
      CastableExpr castableExpr0 = new CastableExpr(additiveExpr0, (SingleType) null);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[1];
      OrExpr orExpr0 = new OrExpr(castableExpr0, abstractOperandArray0);
      StringBuilder stringBuilder0 = new StringBuilder(13);
      // Undeclared exception!
      try { 
        orExpr0.describeOp(stringBuilder0, castableExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AdditiveExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.EQUAL;
      ValueExpr valueExpr0 = new ValueExpr(generalComp0);
      UnaryExpr unaryExpr0 = new UnaryExpr("b2cEEn;w|", valueExpr0);
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      OrExpr orExpr0 = new OrExpr(unaryExpr0, linkedList0);
      OrExpr orExpr1 = null;
      try {
        orExpr1 = new OrExpr(orExpr0, (AbstractOperand[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
