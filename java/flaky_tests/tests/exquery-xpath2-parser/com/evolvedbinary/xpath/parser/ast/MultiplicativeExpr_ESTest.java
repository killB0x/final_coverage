/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:44:09 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.FilterExpr;
import com.evolvedbinary.xpath.parser.ast.IntersectExceptExpr;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.PathExpr;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiplicativeExpr_ESTest extends MultiplicativeExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiplicativeExpr multiplicativeExpr0 = null;
      try {
        multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, (MultiplicativeExpr.MultiplicativeOp[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterExpr filterExpr0 = (FilterExpr)PathExpr.SLASH_ABBREV;
      ValueExpr valueExpr0 = new ValueExpr(filterExpr0);
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = new IntersectExceptExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(intersectExceptExpr0, intersectExceptExpr0);
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.DIVIDE;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, rangeExpr0);
      UnaryExpr unaryExpr0 = new UnaryExpr("MULTIPLY", valueExpr0);
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp1 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, unaryExpr0);
      boolean boolean0 = multiplicativeExpr_MultiplicativeOp0.equals(multiplicativeExpr_MultiplicativeOp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.INTEGER_DIVIDE;
      Axis axis0 = Axis.FOLLOWING;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, valueExpr0);
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative1 = MultiplicativeExpr.Multiplicative.DIVIDE;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp1 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative1, valueExpr0);
      boolean boolean0 = multiplicativeExpr_MultiplicativeOp0.equals(multiplicativeExpr_MultiplicativeOp1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.fromSyntax("mod");
      assertEquals(MultiplicativeExpr.Multiplicative.MODULUS, multiplicativeExpr_Multiplicative0);
      
      MultiplicativeExpr.MultiplicativeOp[] multiplicativeExpr_MultiplicativeOpArray0 = new MultiplicativeExpr.MultiplicativeOp[1];
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, (AbstractOperand) null);
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, multiplicativeExpr_MultiplicativeOpArray0);
      boolean boolean0 = multiplicativeExpr_MultiplicativeOp0.equals(multiplicativeExpr0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.MULTIPLY;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, (AbstractOperand) null);
      boolean boolean0 = multiplicativeExpr_MultiplicativeOp0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.fromSyntax("*");
      assertEquals(MultiplicativeExpr.Multiplicative.MULTIPLY, multiplicativeExpr_Multiplicative0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiplicativeExpr.Multiplicative.fromSyntax("MULTIPLY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such Additive: 'MULTIPLY'
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr$Multiplicative", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<MultiplicativeExpr.MultiplicativeOp> linkedList0 = new LinkedList<MultiplicativeExpr.MultiplicativeOp>();
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, linkedList0);
      StringBuilder stringBuilder0 = new StringBuilder("DIVIDE");
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.DIVIDE;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, multiplicativeExpr0);
      multiplicativeExpr0.describeOp(stringBuilder0, multiplicativeExpr_MultiplicativeOp0);
      assertEquals("DIVIDE DIVIDE AST_MultiplicativeExpr(null)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiplicativeExpr.MultiplicativeOp[] multiplicativeExpr_MultiplicativeOpArray0 = new MultiplicativeExpr.MultiplicativeOp[1];
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr((AbstractOperand) null, multiplicativeExpr_MultiplicativeOpArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.MULTIPLY;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, multiplicativeExpr0);
      // Undeclared exception!
      try { 
        multiplicativeExpr0.describeOp(stringBuilder0, multiplicativeExpr_MultiplicativeOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.MULTIPLY;
      String string0 = multiplicativeExpr_Multiplicative0.getSyntax();
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterExpr filterExpr0 = (FilterExpr)PathExpr.SLASH_ABBREV;
      ValueExpr valueExpr0 = new ValueExpr(filterExpr0);
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = new IntersectExceptExpr(valueExpr0, linkedList0);
      RangeExpr rangeExpr0 = new RangeExpr(intersectExceptExpr0, intersectExceptExpr0);
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.DIVIDE;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, rangeExpr0);
      boolean boolean0 = multiplicativeExpr_MultiplicativeOp0.equals(multiplicativeExpr_MultiplicativeOp0);
      assertTrue(boolean0);
  }
}
