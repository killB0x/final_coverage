/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:17:03 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AtomicType;
import com.evolvedbinary.xpath.parser.ast.CastExpr;
import com.evolvedbinary.xpath.parser.ast.GeneralComp;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SingleType;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CastExpr_ESTest extends CastExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CastExpr castExpr0 = new CastExpr((AbstractOperand) null, (SingleType) null);
      // Undeclared exception!
      try { 
        castExpr0.equals(castExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.CastExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[8];
      OrExpr orExpr0 = new OrExpr(abstractOperandArray0[2], abstractOperandArray0);
      abstractOperandArray0[3] = (AbstractOperand) orExpr0;
      CastExpr castExpr0 = new CastExpr(orExpr0, (SingleType) null);
      // Undeclared exception!
      try { 
        castExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[8];
      OrExpr orExpr0 = new OrExpr(abstractOperandArray0[2], abstractOperandArray0);
      abstractOperandArray0[1] = (AbstractOperand) orExpr0;
      CastExpr castExpr0 = new CastExpr(orExpr0, (SingleType) null);
      // Undeclared exception!
      try { 
        castExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, (List<? extends AbstractOperand>) null);
      CastExpr castExpr0 = new CastExpr(unionExpr0, (SingleType) null);
      // Undeclared exception!
      try { 
        castExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.LESS_THAN;
      ValueExpr valueExpr0 = new ValueExpr(generalComp0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastExpr castExpr0 = new CastExpr(valueExpr0, singleType0);
      SingleType singleType1 = new SingleType(atomicType0, false);
      CastExpr castExpr1 = new CastExpr(valueExpr0, singleType1);
      boolean boolean0 = castExpr0.equals(castExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CastExpr castExpr0 = new CastExpr((AbstractOperand) null, (SingleType) null);
      CastExpr castExpr1 = new CastExpr(castExpr0, (SingleType) null);
      boolean boolean0 = castExpr0.equals(castExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.LESS_THAN;
      ValueExpr valueExpr0 = new ValueExpr(generalComp0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastExpr castExpr0 = new CastExpr(valueExpr0, singleType0);
      boolean boolean0 = castExpr0.equals(castExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GeneralComp generalComp0 = GeneralComp.LESS_THAN;
      ValueExpr valueExpr0 = new ValueExpr(generalComp0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastExpr castExpr0 = new CastExpr(valueExpr0, singleType0);
      Object object0 = new Object();
      boolean boolean0 = castExpr0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CastExpr castExpr0 = new CastExpr((AbstractOperand) null, (SingleType) null);
      boolean boolean0 = castExpr0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CastExpr castExpr0 = new CastExpr((AbstractOperand) null, (SingleType) null);
      String string0 = castExpr0.describe();
      assertEquals("CastExpr(null cast as null)", string0);
  }
}
