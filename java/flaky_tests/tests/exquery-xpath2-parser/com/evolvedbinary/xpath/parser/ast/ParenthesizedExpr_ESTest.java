/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:24:21 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.ASTNode;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.IntersectExceptExpr;
import com.evolvedbinary.xpath.parser.ast.ParenthesizedExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.RelativePathExpr;
import com.evolvedbinary.xpath.parser.ast.SchemaElementTest;
import com.evolvedbinary.xpath.parser.ast.StepExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParenthesizedExpr_ESTest extends ParenthesizedExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr((ASTNode) null);
      // Undeclared exception!
      try { 
        parenthesizedExpr0.equals(parenthesizedExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.ParenthesizedExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[8];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[4], abstractOperandArray0);
      abstractOperandArray0[6] = (AbstractOperand) andExpr0;
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(andExpr0);
      // Undeclared exception!
      try { 
        parenthesizedExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<IntersectExceptExpr.IntersectExceptOp> linkedList0 = new LinkedList<IntersectExceptExpr.IntersectExceptOp>();
      IntersectExceptExpr intersectExceptExpr0 = new IntersectExceptExpr((AbstractOperand) null, linkedList0);
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(intersectExceptExpr0);
      IntersectExceptExpr.IntersectExcept intersectExceptExpr_IntersectExcept0 = IntersectExceptExpr.IntersectExcept.EXCEPT;
      IntersectExceptExpr.IntersectExceptOp intersectExceptExpr_IntersectExceptOp0 = new IntersectExceptExpr.IntersectExceptOp(intersectExceptExpr_IntersectExcept0, intersectExceptExpr0);
      linkedList0.add(intersectExceptExpr_IntersectExceptOp0);
      // Undeclared exception!
      try { 
        parenthesizedExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RelativePathExpr relativePathExpr0 = new RelativePathExpr((List<? extends StepExpr>) null);
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(relativePathExpr0);
      // Undeclared exception!
      try { 
        parenthesizedExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.RelativePathExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QNameW qNameW0 = new QNameW(")");
      SchemaElementTest schemaElementTest0 = new SchemaElementTest(qNameW0);
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(schemaElementTest0);
      boolean boolean0 = parenthesizedExpr0.equals(parenthesizedExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QNameW qNameW0 = new QNameW(")");
      SchemaElementTest schemaElementTest0 = new SchemaElementTest(qNameW0);
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(schemaElementTest0);
      Object object0 = new Object();
      boolean boolean0 = parenthesizedExpr0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr(axis0);
      String string0 = parenthesizedExpr0.describe();
      assertEquals("ParenthesizedExpr(AST_Axis(namespace))", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParenthesizedExpr parenthesizedExpr0 = new ParenthesizedExpr((ASTNode) null);
      boolean boolean0 = parenthesizedExpr0.equals((Object) null);
      assertFalse(boolean0);
  }
}
