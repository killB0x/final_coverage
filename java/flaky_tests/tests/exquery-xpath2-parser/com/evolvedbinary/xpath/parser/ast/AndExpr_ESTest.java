/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 09:00:16 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.ComparisonExpr;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.MultiplicativeExpr;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.ValueComp;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AndExpr_ESTest extends AndExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValueComp valueComp0 = ValueComp.GREATER_THAN_OR_EQUAL;
      ComparisonExpr comparisonExpr0 = new ComparisonExpr((AbstractOperand) null, valueComp0, (AbstractOperand) null);
      RangeExpr rangeExpr0 = new RangeExpr(comparisonExpr0, comparisonExpr0);
      LinkedList<MultiplicativeExpr.MultiplicativeOp> linkedList0 = new LinkedList<MultiplicativeExpr.MultiplicativeOp>();
      MultiplicativeExpr multiplicativeExpr0 = new MultiplicativeExpr(rangeExpr0, linkedList0);
      LinkedList<InstanceOfExpr> linkedList1 = new LinkedList<InstanceOfExpr>();
      AndExpr andExpr0 = new AndExpr(multiplicativeExpr0, linkedList1);
      MultiplicativeExpr.Multiplicative multiplicativeExpr_Multiplicative0 = MultiplicativeExpr.Multiplicative.DIVIDE;
      MultiplicativeExpr.MultiplicativeOp multiplicativeExpr_MultiplicativeOp0 = new MultiplicativeExpr.MultiplicativeOp(multiplicativeExpr_Multiplicative0, andExpr0);
      linkedList0.add(multiplicativeExpr_MultiplicativeOp0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        andExpr0.describeOp(stringBuilder0, multiplicativeExpr0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnaryExpr unaryExpr0 = new UnaryExpr(" and ", (ValueExpr) null);
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      AndExpr andExpr0 = new AndExpr(unaryExpr0, linkedList0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      andExpr0.describeOp(stringBuilder0, (AbstractOperand) null);
      assertEquals(" and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[7];
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, abstractOperandArray0);
      // Undeclared exception!
      try { 
        andExpr0.describeOp((StringBuilder) null, abstractOperandArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AndExpr", e);
      }
  }
}
