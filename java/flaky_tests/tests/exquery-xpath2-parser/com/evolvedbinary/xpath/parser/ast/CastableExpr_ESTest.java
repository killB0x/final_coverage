/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:06:26 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AtomicType;
import com.evolvedbinary.xpath.parser.ast.Axis;
import com.evolvedbinary.xpath.parser.ast.CastableExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.QNameW;
import com.evolvedbinary.xpath.parser.ast.SimpleForClause;
import com.evolvedbinary.xpath.parser.ast.SingleType;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.UnionExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CastableExpr_ESTest extends CastableExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      String string0 = castableExpr0.describe();
      assertEquals("CastableExpr(AST_UnaryExpr(AST_ValueExpr(AST_Axis(namespace))) castable as AST_SingleType(AST_AtomicType(AST_QNameW())?))", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CastableExpr castableExpr0 = new CastableExpr((AbstractOperand) null, (SingleType) null);
      // Undeclared exception!
      try { 
        castableExpr0.equals(castableExpr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.CastableExpr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[6];
      UnionExpr unionExpr0 = new UnionExpr((AbstractOperand) null, abstractOperandArray0);
      abstractOperandArray0[3] = (AbstractOperand) unionExpr0;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      CastableExpr castableExpr0 = new CastableExpr(orExpr0, (SingleType) null);
      // Undeclared exception!
      try { 
        castableExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<CastableExpr> linkedList0 = new LinkedList<CastableExpr>();
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, linkedList0);
      CastableExpr castableExpr0 = new CastableExpr(orExpr0, (SingleType) null);
      linkedList0.add(castableExpr0);
      // Undeclared exception!
      try { 
        castableExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleForClause simpleForClause0 = new SimpleForClause((List<SimpleForClause.RangeVariable>) null);
      ValueExpr valueExpr0 = new ValueExpr(simpleForClause0);
      CastableExpr castableExpr0 = new CastableExpr(valueExpr0, (SingleType) null);
      // Undeclared exception!
      try { 
        castableExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.SimpleForClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      CastableExpr castableExpr1 = new CastableExpr(castableExpr0, singleType0);
      SingleType singleType1 = new SingleType(atomicType0, false);
      CastableExpr castableExpr2 = new CastableExpr(castableExpr0, singleType1);
      boolean boolean0 = castableExpr2.equals(castableExpr1);
      assertFalse(boolean0);
      assertFalse(castableExpr1.equals((Object)castableExpr0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      CastableExpr castableExpr1 = new CastableExpr(castableExpr0, singleType0);
      boolean boolean0 = castableExpr0.equals(castableExpr1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      boolean boolean0 = castableExpr0.equals(castableExpr0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      Object object0 = new Object();
      boolean boolean0 = castableExpr0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Axis axis0 = Axis.NAMESPACE;
      ValueExpr valueExpr0 = new ValueExpr(axis0);
      UnaryExpr unaryExpr0 = new UnaryExpr("", valueExpr0);
      QNameW qNameW0 = new QNameW("");
      AtomicType atomicType0 = new AtomicType(qNameW0);
      SingleType singleType0 = new SingleType(atomicType0, true);
      CastableExpr castableExpr0 = new CastableExpr(unaryExpr0, singleType0);
      boolean boolean0 = castableExpr0.equals((Object) null);
      assertFalse(boolean0);
  }
}
