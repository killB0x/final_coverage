/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 08:40:46 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.AbstractOperand;
import com.evolvedbinary.xpath.parser.ast.AndExpr;
import com.evolvedbinary.xpath.parser.ast.InstanceOfExpr;
import com.evolvedbinary.xpath.parser.ast.OrExpr;
import com.evolvedbinary.xpath.parser.ast.RangeExpr;
import com.evolvedbinary.xpath.parser.ast.SequenceType;
import com.evolvedbinary.xpath.parser.ast.UnaryExpr;
import com.evolvedbinary.xpath.parser.ast.ValueExpr;
import com.evolvedbinary.xpath.parser.ast.partial.PartialAndExpr;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartialAndExpr_ESTest extends PartialAndExpr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnaryExpr unaryExpr0 = new UnaryExpr("AndExpr(", (ValueExpr) null);
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[5];
      AndExpr andExpr0 = new AndExpr(unaryExpr0, abstractOperandArray0);
      PartialAndExpr partialAndExpr0 = new PartialAndExpr(andExpr0);
      String string0 = partialAndExpr0.describe();
      assertEquals("AndExpr(AST_AndExpr(AST_UnaryExpr(AndExpr(null) and null and null and null and null and null), ?...)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractOperand[] abstractOperandArray0 = new AbstractOperand[7];
      AndExpr andExpr0 = new AndExpr(abstractOperandArray0[3], abstractOperandArray0);
      abstractOperandArray0[4] = (AbstractOperand) andExpr0;
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, abstractOperandArray0);
      RangeExpr rangeExpr0 = new RangeExpr(orExpr0, abstractOperandArray0[1]);
      PartialAndExpr partialAndExpr0 = new PartialAndExpr(rangeExpr0);
      // Undeclared exception!
      try { 
        partialAndExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<InstanceOfExpr> linkedList0 = new LinkedList<InstanceOfExpr>();
      OrExpr orExpr0 = new OrExpr((AbstractOperand) null, linkedList0);
      SequenceType sequenceType0 = SequenceType.EMPTY_SEQUENCE;
      InstanceOfExpr instanceOfExpr0 = new InstanceOfExpr(orExpr0, sequenceType0);
      linkedList0.add(instanceOfExpr0);
      PartialAndExpr partialAndExpr0 = new PartialAndExpr(orExpr0);
      // Undeclared exception!
      try { 
        partialAndExpr0.describe();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AndExpr andExpr0 = new AndExpr((AbstractOperand) null, (List<? extends AbstractOperand>) null);
      PartialAndExpr partialAndExpr0 = new PartialAndExpr(andExpr0);
      // Undeclared exception!
      try { 
        partialAndExpr0.describe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.AbstractOperandWithOps", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PartialAndExpr partialAndExpr0 = new PartialAndExpr((AbstractOperand) null);
      LinkedList<AbstractOperand> linkedList0 = new LinkedList<AbstractOperand>();
      AndExpr andExpr0 = partialAndExpr0.complete((List<AbstractOperand>) linkedList0);
      assertNotNull(andExpr0);
  }
}
