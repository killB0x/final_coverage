/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 07:42:59 GMT 2022
 */

package com.evolvedbinary.xpath.parser.ast;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.evolvedbinary.xpath.parser.ast.OccurrenceIndicator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OccurrenceIndicator_ESTest extends OccurrenceIndicator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      String string0 = occurrenceIndicator0.describe();
      assertEquals("OccurrenceIndicator(?)", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      char char0 = occurrenceIndicator0.getSyntax();
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      OccurrenceIndicator occurrenceIndicator1 = OccurrenceIndicator.ONE_OR_MORE;
      boolean boolean0 = occurrenceIndicator0.equals(occurrenceIndicator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_ONE;
      boolean boolean0 = occurrenceIndicator0.equals("OccurrenceIndicator(?)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.ZERO_OR_MORE;
      boolean boolean0 = occurrenceIndicator0.equals(OccurrenceIndicator.ZERO_OR_MORE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = OccurrenceIndicator.ZERO_OR_MORE.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OccurrenceIndicator occurrenceIndicator0 = OccurrenceIndicator.fromSyntax('+');
      assertEquals('+', occurrenceIndicator0.getSyntax());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        OccurrenceIndicator.fromSyntax('m');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such occurrence: 'm'
         //
         verifyException("com.evolvedbinary.xpath.parser.ast.OccurrenceIndicator", e);
      }
  }
}
