/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:00:43 GMT 2022
 */

package org.immregistries.mqe.vxu.code;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.vxu.code.NokRelationship;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NokRelationship_ESTest extends NokRelationship_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NokRelationship[] nokRelationshipArray0 = NokRelationship.values();
      assertEquals(16, nokRelationshipArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.valueOf("RELATIONSHIP_MOTHER");
      assertTrue(nokRelationship0.isResponsibleRelationship());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.valueOf("RELATIONSHIP_CHILD");
      assertFalse(nokRelationship0.isResponsibleRelationship());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.get("*^J-'(88_{iEv");
      assertEquals(NokRelationship.UNKNOWN, nokRelationship0);
      
      NokRelationship nokRelationship1 = NokRelationship.RELATIONSHIP_SELF;
      boolean boolean0 = nokRelationship0.isSelf(nokRelationship1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_STEPCHILD;
      boolean boolean0 = nokRelationship0.isResponsibleRelationship();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.get("CGV");
      assertEquals(NokRelationship.RELATIONSHIP_CARE_GIVER, nokRelationship0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = NokRelationship.isResponsibleRelationship("PAR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_STEPCHILD;
      boolean boolean0 = nokRelationship0.isChildRelationship();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_FOSTER_CHILD;
      boolean boolean0 = nokRelationship0.isChildRelationship();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_PARENT;
      boolean boolean0 = nokRelationship0.isChildRelationship();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_CHILD;
      boolean boolean0 = nokRelationship0.isChildRelationship();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = NokRelationship.isResponsibleRelationship("'Ft.c0>a1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.get((String) null);
      assertEquals(NokRelationship.UNKNOWN, nokRelationship0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.RELATIONSHIP_GUARDIAN;
      boolean boolean0 = nokRelationship0.isResponsibleRelationship();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = NokRelationship.getResponsibleCodes();
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NokRelationship nokRelationship0 = NokRelationship.get("'Ft.c0>a1");
      assertEquals(NokRelationship.UNKNOWN, nokRelationship0);
      
      boolean boolean0 = nokRelationship0.isSelf(nokRelationship0);
      assertFalse(boolean0);
  }
}
