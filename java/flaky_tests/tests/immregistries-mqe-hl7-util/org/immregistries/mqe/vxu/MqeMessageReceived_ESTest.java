/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:21:30 GMT 2022
 */

package org.immregistries.mqe.vxu;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.vxu.MqeMessageHeader;
import org.immregistries.mqe.vxu.MqeMessageReceived;
import org.immregistries.mqe.vxu.MqeNextOfKin;
import org.immregistries.mqe.vxu.MqePatient;
import org.immregistries.mqe.vxu.MqeVaccination;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MqeMessageReceived_ESTest extends MqeMessageReceived_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setPatient((MqePatient) null);
      String string0 = mqeMessageReceived0.toString();
      assertEquals("MqeMessageReceived{receivedDate=Fri Feb 14 20:21:21 GMT 2014, messageHeader=\nMqeMessageHeader----------------------------------------------{\n headerId=0\n , ackTypeAccept=''\n , ackTypeApplication=''\n , characterSet=''\n , characterSetAlt=''\n , country=''\n , messageControl=''\n , messageDate=null\n , messageDateString='null'\n , messageProfile=''\n , messageStructure=''\n , messageTrigger=''\n , messageType=''\n , processingStatus=''\n , receivingApplication=''\n , receivingFacility=''\n , sendingApplication=''\n , sendingFacility=''\n , messageVersion=''}\n, patient=null, nextOfKins=[], vaccinations=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setVaccinations((List<MqeVaccination>) null);
      List<MqeVaccination> list0 = mqeMessageReceived0.getVaccinations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      LinkedList<MqeVaccination> linkedList0 = new LinkedList<MqeVaccination>();
      linkedList0.add((MqeVaccination) null);
      mqeMessageReceived0.setVaccinations(linkedList0);
      List<MqeVaccination> list0 = mqeMessageReceived0.getVaccinations();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setReceivedDate((Date) null);
      Date date0 = mqeMessageReceived0.getReceivedDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setPatient((MqePatient) null);
      MqePatient mqePatient0 = mqeMessageReceived0.getPatient();
      assertNull(mqePatient0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqePatient mqePatient0 = new MqePatient();
      mqePatient0.setSkipped(true);
      mqeMessageReceived0.setPatient(mqePatient0);
      MqePatient mqePatient1 = mqeMessageReceived0.getPatient();
      assertEquals("", mqePatient1.getPrimaryLanguageCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqePatient mqePatient0 = new MqePatient();
      mqePatient0.setPositionId((-2831));
      mqeMessageReceived0.setPatient(mqePatient0);
      MqePatient mqePatient1 = mqeMessageReceived0.getPatient();
      assertEquals("", mqePatient1.getRegistryStatus());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqePatient mqePatient0 = new MqePatient();
      mqePatient0.setPatientId((-2831));
      mqeMessageReceived0.setPatient(mqePatient0);
      MqePatient mqePatient1 = mqeMessageReceived0.getPatient();
      assertEquals("", mqePatient1.getPatientClassCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setNextOfKins((List<MqeNextOfKin>) null);
      List<MqeNextOfKin> list0 = mqeMessageReceived0.getNextOfKins();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      LinkedList<MqeNextOfKin> linkedList0 = new LinkedList<MqeNextOfKin>();
      MqeNextOfKin mqeNextOfKin0 = new MqeNextOfKin();
      linkedList0.add(mqeNextOfKin0);
      mqeMessageReceived0.setNextOfKins(linkedList0);
      List<MqeNextOfKin> list0 = mqeMessageReceived0.getNextOfKins();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setMessageHeader((MqeMessageHeader) null);
      MqeMessageHeader mqeMessageHeader0 = mqeMessageReceived0.getMessageHeader();
      assertNull(mqeMessageHeader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqeMessageHeader mqeMessageHeader0 = mqeMessageReceived0.getMessageHeader();
      mqeMessageHeader0.setPositionId(163);
      MqeMessageHeader mqeMessageHeader1 = mqeMessageReceived0.getMessageHeader();
      assertEquals("", mqeMessageHeader1.getAckTypeAcceptCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqeMessageHeader mqeMessageHeader0 = new MqeMessageHeader();
      mqeMessageHeader0.setHeaderId((-2679));
      mqeMessageReceived0.setMessageHeader(mqeMessageHeader0);
      MqeMessageHeader mqeMessageHeader1 = mqeMessageReceived0.getMessageHeader();
      assertEquals("", mqeMessageHeader1.getProcessingStatusCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      mqeMessageReceived0.setDetectionsOverride((HashMap<String, String>) null);
      HashMap<String, String> hashMap0 = mqeMessageReceived0.getDetectionsOverride();
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      HashMap<String, String> hashMap0 = mqeMessageReceived0.getDetectionsOverride();
      hashMap0.put("", "");
      HashMap<String, String> hashMap1 = mqeMessageReceived0.getDetectionsOverride();
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      MqePatient mqePatient0 = mqeMessageReceived0.getPatient();
      mqePatient0.setPatientId(1L);
      MqePatient mqePatient1 = mqeMessageReceived0.getPatient();
      assertEquals("", mqePatient1.getPrimaryLanguageCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      List<MqeNextOfKin> list0 = mqeMessageReceived0.getNextOfKins();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      List<MqeVaccination> list0 = mqeMessageReceived0.getVaccinations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      Date date0 = mqeMessageReceived0.getReceivedDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MqeMessageReceived mqeMessageReceived0 = new MqeMessageReceived();
      // Undeclared exception!
      try { 
        mqeMessageReceived0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.immregistries.mqe.vxu.MqePhoneNumber", e);
      }
  }
}
