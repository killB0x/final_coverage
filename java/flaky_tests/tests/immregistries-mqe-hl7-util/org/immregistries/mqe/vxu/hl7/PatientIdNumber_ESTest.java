/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:17:26 GMT 2022
 */

package org.immregistries.mqe.vxu.hl7;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.vxu.hl7.Id;
import org.immregistries.mqe.vxu.hl7.PatientIdNumber;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatientIdNumber_ESTest extends PatientIdNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      patientIdNumber0.setPositionId((-984));
      int int0 = patientIdNumber0.getPositionId();
      assertEquals((-984), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      patientIdNumber0.setIdNumberId(3463);
      int int0 = patientIdNumber0.getIdNumberId();
      assertEquals(3463, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      patientIdNumber0.setIdNumberId((-3475));
      int int0 = patientIdNumber0.getIdNumberId();
      assertEquals((-3475), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = null;
      try {
        patientIdNumber0 = new PatientIdNumber((Id) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.immregistries.mqe.vxu.hl7.PatientIdNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Id id0 = new Id();
      PatientIdNumber patientIdNumber0 = new PatientIdNumber(id0, 0);
      assertEquals(0, patientIdNumber0.getIdNumberId());
      assertFalse(patientIdNumber0.isSkipped());
      assertEquals(0, patientIdNumber0.getPositionId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      int int0 = patientIdNumber0.getIdNumberId();
      assertEquals(0, patientIdNumber0.getPositionId());
      assertFalse(patientIdNumber0.isSkipped());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      boolean boolean0 = patientIdNumber0.isSkipped();
      assertFalse(boolean0);
      assertEquals(0, patientIdNumber0.getPositionId());
      assertEquals(0, patientIdNumber0.getIdNumberId());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      assertEquals(0, patientIdNumber0.getPositionId());
      
      patientIdNumber0.setPositionId(1);
      int int0 = patientIdNumber0.getPositionId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      int int0 = patientIdNumber0.getPositionId();
      assertEquals(0, int0);
      assertFalse(patientIdNumber0.isSkipped());
      assertEquals(0, patientIdNumber0.getIdNumberId());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PatientIdNumber patientIdNumber0 = new PatientIdNumber();
      assertFalse(patientIdNumber0.isSkipped());
      
      patientIdNumber0.setSkipped(true);
      boolean boolean0 = patientIdNumber0.isSkipped();
      assertTrue(boolean0);
  }
}
