/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:30:28 GMT 2022
 */

package org.immregistries.mqe.hl7util.parser.profile.intf;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement;
import org.immregistries.mqe.hl7util.parser.profile.generated.Predicate;
import org.immregistries.mqe.hl7util.parser.profile.intf.SubComponent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubComponent_ESTest extends SubComponent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      ConformanceStatement conformanceStatement0 = new ConformanceStatement();
      subComponent0.setConformanceStatement(conformanceStatement0);
      assertNull(subComponent0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setUsage("org.immregistries.mqe.hl7util.parser.profile.generated.Predicate");
      String string0 = subComponent0.getUsage();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.generated.Predicate", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.usage = "q&4vBNd)A:emWol";
      subComponent0.usage = "org.immregistries.mqe.hl7util.parser.profile.intf.SubComponent";
      subComponent0.usage = "";
      String string0 = subComponent0.getUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short)0);
      subComponent0.table = short0;
      Short short1 = subComponent0.getTable();
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short) (-3369));
      subComponent0.table = short0;
      Short short1 = subComponent0.getTable();
      assertEquals((short) (-3369), (short)short1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setPredicateTrueUsage("org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement");
      String string0 = subComponent0.getPredicateTrueUsage();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.predicateTrueUsage = "";
      String string0 = subComponent0.getPredicateTrueUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setPredicateFalseUsage("U<Qw.>N-Y6iF<`*");
      String string0 = subComponent0.getPredicateFalseUsage();
      assertEquals("U<Qw.>N-Y6iF<`*", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setPredicateFalseUsage("");
      String string0 = subComponent0.getPredicateFalseUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Predicate predicate0 = new Predicate();
      subComponent0.setPredicate(predicate0);
      Predicate predicate1 = subComponent0.getPredicate();
      assertNull(predicate1.getEnglishDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setName("org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement");
      String string0 = subComponent0.getName();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setName("");
      String string0 = subComponent0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Byte byte0 = Byte.valueOf((byte)0);
      subComponent0.setMinLength(byte0);
      Byte byte1 = subComponent0.getMinLength();
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Byte byte0 = Byte.valueOf((byte)1);
      subComponent0.setMinLength(byte0);
      Byte byte1 = subComponent0.getMinLength();
      assertEquals((byte)1, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Byte byte0 = Byte.valueOf((byte) (-55));
      subComponent0.setMinLength(byte0);
      Byte byte1 = subComponent0.getMinLength();
      assertEquals((byte) (-55), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short)10);
      subComponent0.setMaxLength(short0);
      Short short1 = subComponent0.getMaxLength();
      assertEquals((short)10, (short)short1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short) (-3369));
      subComponent0.table = short0;
      subComponent0.setMaxLength(subComponent0.table);
      Short short1 = subComponent0.getMaxLength();
      assertEquals((short) (-3369), (short)short1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.datatype = "!hFi";
      String string0 = subComponent0.getDatatype();
      assertEquals("!hFi", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.datatype = "";
      String string0 = subComponent0.getDatatype();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      ConformanceStatement conformanceStatement0 = new ConformanceStatement();
      subComponent0.conformanceStatement = conformanceStatement0;
      ConformanceStatement conformanceStatement1 = subComponent0.getConformanceStatement();
      assertNull(conformanceStatement1.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      ConformanceStatement conformanceStatement0 = subComponent0.getConformanceStatement();
      assertNull(conformanceStatement0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = subComponent0.getMaxLength();
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Byte byte0 = subComponent0.getMinLength();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      String string0 = subComponent0.getPredicateTrueUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      subComponent0.setDatatype(".J");
      assertNull(subComponent0.getPredicateFalseUsage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      String string0 = subComponent0.getPredicateFalseUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short)2175);
      subComponent0.setTable(short0);
      Short short1 = subComponent0.getTable();
      assertEquals((short)2175, (short)short1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = Short.valueOf((short)0);
      subComponent0.setMaxLength(short0);
      Short short1 = subComponent0.getMaxLength();
      assertEquals((short)0, (short)short1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      String string0 = subComponent0.getDatatype();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      String string0 = subComponent0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Predicate predicate0 = subComponent0.getPredicate();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      String string0 = subComponent0.getUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubComponent subComponent0 = new SubComponent();
      Short short0 = subComponent0.getTable();
      assertNull(short0);
  }
}
