/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:13:49 GMT 2022
 */

package org.immregistries.mqe.hl7util.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.parser.HL7QuickParser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HL7QuickParser_ESTest extends HL7QuickParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HL7QuickParser[] hL7QuickParserArray0 = HL7QuickParser.values();
      assertEquals(1, hL7QuickParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.valueOf("INSTANCE");
      assertEquals(HL7QuickParser.INSTANCE, hL7QuickParser0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      // Undeclared exception!
      try { 
        hL7QuickParser0.getPidSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      // Undeclared exception!
      try { 
        hL7QuickParser0.getMsh7MessageDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      // Undeclared exception!
      try { 
        hL7QuickParser0.getMsh4Sender((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      // Undeclared exception!
      try { 
        hL7QuickParser0.getMsh10ControlId((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      String string0 = hL7QuickParser0.getMsh4Sender("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      String string0 = hL7QuickParser0.getPidSegment("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      String string0 = hL7QuickParser0.getMsh7MessageDate("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HL7QuickParser hL7QuickParser0 = HL7QuickParser.INSTANCE;
      String string0 = hL7QuickParser0.getMsh10ControlId("I?a[AgT&");
      assertEquals("", string0);
  }
}
