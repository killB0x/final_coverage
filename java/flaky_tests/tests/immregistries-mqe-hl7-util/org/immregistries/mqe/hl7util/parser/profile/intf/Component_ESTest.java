/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:14:38 GMT 2022
 */

package org.immregistries.mqe.hl7util.parser.profile.intf;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement;
import org.immregistries.mqe.hl7util.parser.profile.generated.Predicate;
import org.immregistries.mqe.hl7util.parser.profile.intf.Component;
import org.immregistries.mqe.hl7util.parser.profile.intf.SubComponent;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Component component0 = new Component();
      component0.usage = "(v$2OMdqFR%";
      String string0 = component0.getUsage();
      assertEquals("(v$2OMdqFR%", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Component component0 = new Component();
      component0.setUsage("");
      String string0 = component0.getUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Component component0 = new Component();
      component0.table = "l&826BqXAHVJ q~";
      String string0 = component0.getTable();
      assertEquals("l&826BqXAHVJ q~", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Component component0 = new Component();
      component0.setTable("");
      String string0 = component0.getTable();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Component component0 = new Component();
      LinkedList<SubComponent> linkedList0 = new LinkedList<SubComponent>();
      component0.subComponent = (List<SubComponent>) linkedList0;
      linkedList0.add(0, (SubComponent) null);
      List<SubComponent> list0 = component0.getSubComponent();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Component component0 = new Component();
      component0.setPredicateTrueUsage("+))DOz#;0");
      String string0 = component0.getPredicateTrueUsage();
      assertEquals("+))DOz#;0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Component component0 = new Component();
      component0.predicateFalseUsage = "+))DOz#;0";
      String string0 = component0.getPredicateFalseUsage();
      assertEquals("+))DOz#;0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Component component0 = new Component();
      component0.predicateFalseUsage = "";
      String string0 = component0.getPredicateFalseUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Component component0 = new Component();
      Predicate predicate0 = new Predicate();
      component0.predicate = predicate0;
      Predicate predicate1 = component0.getPredicate();
      assertSame(predicate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Component component0 = new Component();
      component0.name = "@<]D,";
      String string0 = component0.getName();
      assertEquals("@<]D,", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Component component0 = new Component();
      component0.name = "";
      String string0 = component0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Component component0 = new Component();
      component0.minLength = null;
      Byte byte0 = Byte.valueOf((byte)53);
      component0.minLength = byte0;
      Byte byte1 = component0.getMinLength();
      assertEquals((byte)53, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Component component0 = new Component();
      Byte byte0 = Byte.valueOf((byte) (-72));
      component0.minLength = byte0;
      Byte byte1 = component0.getMinLength();
      assertEquals((byte) (-72), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Component component0 = new Component();
      component0.maxLength = "org.immregistries.mqe.hl7util.parser.profile.intf.Component";
      String string0 = component0.getMaxLength();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.intf.Component", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Component component0 = new Component();
      component0.setMaxLength("");
      String string0 = component0.getMaxLength();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Component component0 = new Component();
      component0.datatype = "@<]D,";
      String string0 = component0.getDatatype();
      assertEquals("@<]D,", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Component component0 = new Component();
      component0.datatype = "";
      String string0 = component0.getDatatype();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Component component0 = new Component();
      ConformanceStatement conformanceStatement0 = new ConformanceStatement();
      component0.setConformanceStatement(conformanceStatement0);
      ConformanceStatement conformanceStatement1 = component0.getConformanceStatement();
      assertNull(conformanceStatement1.getEnglishDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Component component0 = new Component();
      List<SubComponent> list0 = component0.getSubComponent();
      List<SubComponent> list1 = component0.getSubComponent();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Component component0 = new Component();
      Predicate predicate0 = component0.getPredicate();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Component component0 = new Component();
      Byte byte0 = Byte.valueOf((byte)0);
      component0.setMinLength(byte0);
      Byte byte1 = component0.getMinLength();
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Component component0 = new Component();
      ConformanceStatement conformanceStatement0 = component0.getConformanceStatement();
      assertNull(conformanceStatement0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Component component0 = new Component();
      component0.setDatatype("x w3*%");
      assertNull(component0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getPredicateTrueUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getDatatype();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getMaxLength();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getTable();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Component component0 = new Component();
      component0.setName("vM9");
      assertNull(component0.getPredicateTrueUsage());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Component component0 = new Component();
      component0.setPredicateTrueUsage("");
      String string0 = component0.getPredicateTrueUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Component component0 = new Component();
      Byte byte0 = component0.getMinLength();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Component component0 = new Component();
      String string0 = component0.getPredicateFalseUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Component component0 = new Component();
      component0.setPredicateFalseUsage("");
      assertNull(component0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Component component0 = new Component();
      Predicate predicate0 = new Predicate();
      component0.setPredicate(predicate0);
      assertNull(component0.getName());
  }
}
