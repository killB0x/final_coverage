/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 10:59:31 GMT 2022
 */

package org.immregistries.mqe.hl7util.transform.procedure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.immregistries.mqe.hl7util.transform.TransformRequest;
import org.immregistries.mqe.hl7util.transform.Transformer;
import org.immregistries.mqe.hl7util.transform.procedure.AddFundingEligibilityToAllRxa;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AddFundingEligibilityToAllRxa_ESTest extends AddFundingEligibilityToAllRxa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AddFundingEligibilityToAllRxa addFundingEligibilityToAllRxa0 = new AddFundingEligibilityToAllRxa();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        addFundingEligibilityToAllRxa0.doProcedure((TransformRequest) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.immregistries.mqe.hl7util.transform.procedure.AddFundingEligibilityToAllRxa", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddFundingEligibilityToAllRxa addFundingEligibilityToAllRxa0 = new AddFundingEligibilityToAllRxa();
      TransformRequest transformRequest0 = new TransformRequest("6-.Kr3Bbck%");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingEligibilityToAllRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("6-.Kr3Bbck%\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AddFundingEligibilityToAllRxa addFundingEligibilityToAllRxa0 = new AddFundingEligibilityToAllRxa();
      TransformRequest transformRequest0 = new TransformRequest("RXA|");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingEligibilityToAllRxa0.doProcedure(transformRequest0, linkedList0);
      addFundingEligibilityToAllRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("RXA|\rOBX|1|CE|64994-7^Vaccine funding program eligibility category^LN|1|V01^Not VFC eligible^HL70064||||||F|||20150817|||VXC40^Eligibility captured at the immunization level^CDCPHINVS|\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddFundingEligibilityToAllRxa addFundingEligibilityToAllRxa0 = new AddFundingEligibilityToAllRxa();
      File file0 = MockFile.createTempFile("RXA|", (String) null);
      Transformer transformer0 = new Transformer(file0);
      addFundingEligibilityToAllRxa0.setTransformer(transformer0);
  }
}
