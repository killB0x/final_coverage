/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:13:02 GMT 2022
 */

package org.immregistries.mqe.hl7util.parser.profile.intf;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.parser.profile.intf.Field;
import org.immregistries.mqe.hl7util.parser.profile.intf.Segment;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.usage = "UX0lls!N?)Jwc.jv";
      String string0 = segment0.getUsage();
      assertEquals("UX0lls!N?)Jwc.jv", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.usage = "";
      String string0 = segment0.getUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setName("org.immregistries.mqe.hl7util.parser.profile.intf.Segment");
      String string0 = segment0.getName();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.intf.Segment", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setName("");
      String string0 = segment0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      Byte byte0 = Byte.valueOf((byte)0);
      segment0.setMin(byte0);
      Byte byte1 = segment0.getMin();
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      Byte byte0 = Byte.valueOf((byte) (-36));
      segment0.setMin(byte0);
      Byte byte1 = segment0.getMin();
      assertEquals((byte) (-36), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.max = null;
      segment0.max = "org.immregistries.mqe.hl7util.parser.profile.generated.Predicate";
      String string0 = segment0.getMax();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.generated.Predicate", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setMax("");
      String string0 = segment0.getMax();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setLongName("org.immregistries.mqe.hl7util.parser.profile.intf.Segment");
      String string0 = segment0.getLongName();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.intf.Segment", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setLongName("");
      String string0 = segment0.getLongName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      segment0.field = (List<Field>) linkedList0;
      Field field0 = new Field();
      linkedList0.add(field0);
      List<Field> list0 = segment0.getField();
      assertTrue(list0.contains(field0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.getField();
      List<Field> list0 = segment0.getField();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      String string0 = segment0.getLongName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      Byte byte0 = segment0.getMin();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.setUsage("UX0lls!N?)Jwc.jv");
      assertNull(segment0.getLongName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Segment segment0 = new Segment();
      String string0 = segment0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      Byte byte0 = Byte.valueOf((byte)63);
      segment0.setMin(byte0);
      Byte byte1 = segment0.getMin();
      assertEquals((byte)63, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Segment segment0 = new Segment();
      String string0 = segment0.getMax();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Segment segment0 = new Segment();
      String string0 = segment0.getUsage();
      assertNull(string0);
  }
}
