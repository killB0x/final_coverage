/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:21:43 GMT 2022
 */

package org.immregistries.mqe.hl7util.model;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.model.CodedWithExceptions;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodedWithExceptions_ESTest extends CodedWithExceptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      codedWithExceptions0.setText((String) null);
      String string0 = codedWithExceptions0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      codedWithExceptions0.setText("1:zwda^-5P");
      String string0 = codedWithExceptions0.getText();
      assertEquals("1:zwda^-5P", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      String string0 = codedWithExceptions0.getNameOfCodingSystem();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      codedWithExceptions0.setNameOfCodingSystem("");
      String string0 = codedWithExceptions0.getNameOfCodingSystem();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("$D");
      codedWithExceptions0.setNameOfAlternateCodingSystem((String) null);
      String string0 = codedWithExceptions0.getNameOfAlternateCodingSystem();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      codedWithExceptions0.setIdentifier((String) null);
      String string0 = codedWithExceptions0.getIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("$D");
      codedWithExceptions0.setIdentifier("E`TI&o5=}oRBdmt");
      String string0 = codedWithExceptions0.getIdentifier();
      assertEquals("E`TI&o5=}oRBdmt", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("$D");
      codedWithExceptions0.setAlternateText("E`TI&o5=}oRBdmt");
      String string0 = codedWithExceptions0.getAlternateText();
      assertEquals("E`TI&o5=}oRBdmt", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      codedWithExceptions0.setAlternateIdentifier((String) null);
      String string0 = codedWithExceptions0.getAlternateIdentifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      codedWithExceptions0.setAlternateIdentifier("u5%<3H&VS6#N7M9z :");
      String string0 = codedWithExceptions0.getAlternateIdentifier();
      assertEquals("u5%<3H&VS6#N7M9z :", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      String string0 = codedWithExceptions0.getAlternateIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      String string0 = codedWithExceptions0.getNameOfCodingSystem();
      assertEquals("(h^39FR", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions("(h^39FR");
      String string0 = codedWithExceptions0.getNameOfAlternateCodingSystem();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions();
      codedWithExceptions0.setNameOfAlternateCodingSystem("org.immregistries.mqe.hl7util.model.CodedWithExceptions");
      String string0 = codedWithExceptions0.getNameOfAlternateCodingSystem();
      assertEquals("org.immregistries.mqe.hl7util.model.CodedWithExceptions", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      String string0 = codedWithExceptions0.getIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      String string0 = codedWithExceptions0.getAlternateText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      String string0 = codedWithExceptions0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodedWithExceptions codedWithExceptions0 = new CodedWithExceptions((String) null);
      codedWithExceptions0.setAlternateText((String) null);
      String string0 = codedWithExceptions0.getAlternateText();
      assertNull(string0);
  }
}
