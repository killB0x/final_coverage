/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:11:54 GMT 2022
 */

package org.immregistries.mqe.hl7util.parser.profile.intf;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.parser.profile.generated.ConformanceStatement;
import org.immregistries.mqe.hl7util.parser.profile.generated.Predicate;
import org.immregistries.mqe.hl7util.parser.profile.intf.Component;
import org.immregistries.mqe.hl7util.parser.profile.intf.Field;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Field field0 = new Field();
      Predicate predicate0 = new Predicate();
      field0.setPredicate(predicate0);
      assertNull(field0.getTable());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Field field0 = new Field();
      field0.usage = "org.immregistries.mqe.hl7util.parser.profile.intf.Field";
      String string0 = field0.getUsage();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.intf.Field", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Field field0 = new Field();
      field0.setTable("\"DtIht:lTP 7Y} .^");
      String string0 = field0.getTable();
      assertEquals("\"DtIht:lTP 7Y} .^", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Field field0 = new Field();
      field0.setPredicateTrueUsage("?wi|*hy,73B%{)gG");
      String string0 = field0.getPredicateTrueUsage();
      assertEquals("?wi|*hy,73B%{)gG", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Field field0 = new Field();
      field0.predicateTrueUsage = "";
      String string0 = field0.getPredicateTrueUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Field field0 = new Field();
      field0.setPredicateFalseUsage("\"DtIht:lTP 7Y} .^");
      String string0 = field0.getPredicateFalseUsage();
      assertEquals("\"DtIht:lTP 7Y} .^", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Field field0 = new Field();
      Predicate predicate0 = new Predicate();
      field0.predicate = predicate0;
      Predicate predicate1 = field0.getPredicate();
      assertNull(predicate1.getEnglishDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Field field0 = new Field();
      field0.setName("Gm%!N#O<");
      String string0 = field0.getName();
      assertEquals("Gm%!N#O<", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = new Field();
      field0.setName("");
      String string0 = field0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte)0);
      field0.minLength = byte0;
      Byte byte1 = field0.getMinLength();
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte)1);
      field0.setMinLength(byte0);
      Byte byte1 = field0.getMinLength();
      assertEquals((byte)1, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte)1);
      field0.min = byte0;
      Byte byte1 = field0.getMin();
      assertEquals((byte)1, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte) (-31));
      field0.min = byte0;
      Byte byte1 = field0.getMin();
      assertEquals((byte) (-31), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = new Field();
      field0.maxLength = "v";
      String string0 = field0.getMaxLength();
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Field field0 = new Field();
      field0.setMax("Q:");
      String string0 = field0.getMax();
      assertEquals("Q:", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Field field0 = new Field();
      field0.max = null;
      field0.max = "";
      String string0 = field0.getMax();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = new Field();
      field0.setDatatype("org.immregistries.mqe.hl7util.parser.profile.generated.Predicate");
      String string0 = field0.getDatatype();
      assertEquals("org.immregistries.mqe.hl7util.parser.profile.generated.Predicate", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Field field0 = new Field();
      field0.datatype = "";
      String string0 = field0.getDatatype();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = new Field();
      ConformanceStatement conformanceStatement0 = new ConformanceStatement();
      field0.setConformanceStatement(conformanceStatement0);
      ConformanceStatement conformanceStatement1 = field0.getConformanceStatement();
      assertSame(conformanceStatement1, conformanceStatement0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Field field0 = new Field();
      LinkedList<Component> linkedList0 = new LinkedList<Component>();
      Component component0 = new Component();
      linkedList0.add(component0);
      field0.component = (List<Component>) linkedList0;
      List<Component> list0 = field0.getComponent();
      assertTrue(list0.contains(component0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Field field0 = new Field();
      List<Component> list0 = field0.getComponent();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Field field0 = new Field();
      field0.setMaxLength("");
      String string0 = field0.getMaxLength();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Field field0 = new Field();
      ConformanceStatement conformanceStatement0 = field0.getConformanceStatement();
      assertNull(conformanceStatement0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getPredicateTrueUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = field0.getMin();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getMaxLength();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Field field0 = new Field();
      field0.setPredicateFalseUsage("");
      String string0 = field0.getPredicateFalseUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getTable();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getMax();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getDatatype();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = field0.getMinLength();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Field field0 = new Field();
      String string0 = field0.getPredicateFalseUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Field field0 = new Field();
      field0.setTable("");
      String string0 = field0.getTable();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte)0);
      field0.setMin(byte0);
      Byte byte1 = field0.getMin();
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Field field0 = new Field();
      Predicate predicate0 = field0.getPredicate();
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Field field0 = new Field();
      Byte byte0 = Byte.valueOf((byte) (-27));
      field0.setMinLength(byte0);
      Byte byte1 = field0.getMinLength();
      assertEquals((byte) (-27), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Field field0 = new Field();
      field0.setUsage("");
      String string0 = field0.getUsage();
      assertEquals("", string0);
  }
}
