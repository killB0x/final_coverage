/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:08:20 GMT 2022
 */

package org.immregistries.mqe.hl7util.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.builder.AckERRCode;
import org.immregistries.mqe.hl7util.model.CodedWithExceptions;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AckERRCode_ESTest extends AckERRCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AckERRCode ackERRCode0 = AckERRCode.getFromString("102");
      assertEquals(AckERRCode.CODE_102_DATA_TYPE_ERROR, ackERRCode0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AckERRCode[] ackERRCodeArray0 = AckERRCode.values();
      assertEquals(13, ackERRCodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AckERRCode ackERRCode0 = AckERRCode.valueOf("CODE_101_REQUIRED_FIELD_MISSING");
      assertEquals(AckERRCode.CODE_101_REQUIRED_FIELD_MISSING, ackERRCode0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AckERRCode ackERRCode0 = AckERRCode.getFromString("200");
      assertEquals(AckERRCode.CODE_200_UNSUPPORTED_MESSAGE_TYPE, ackERRCode0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AckERRCode.getFromString("0@Rk])uAgEX&!0TmyW ");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AckERRCode ackERRCode0 = AckERRCode.CODE_200_UNSUPPORTED_MESSAGE_TYPE;
      CodedWithExceptions codedWithExceptions0 = ackERRCode0.getCWE();
      assertEquals("200", codedWithExceptions0.getIdentifier());
      assertEquals("Unsupported message type", codedWithExceptions0.getText());
      assertEquals("HL70357", codedWithExceptions0.getNameOfCodingSystem());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AckERRCode ackERRCode0 = AckERRCode.CODE_200_UNSUPPORTED_MESSAGE_TYPE;
      String string0 = ackERRCode0.getIdentifier();
      assertEquals("200", string0);
  }
}
