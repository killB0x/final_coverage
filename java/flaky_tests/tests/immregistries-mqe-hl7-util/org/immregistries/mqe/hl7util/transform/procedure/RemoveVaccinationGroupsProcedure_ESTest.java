/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 10:53:38 GMT 2022
 */

package org.immregistries.mqe.hl7util.transform.procedure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.transform.TransformRequest;
import org.immregistries.mqe.hl7util.transform.Transformer;
import org.immregistries.mqe.hl7util.transform.procedure.RemoveVaccinationGroupsProcedure;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RemoveVaccinationGroupsProcedure_ESTest extends RemoveVaccinationGroupsProcedure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      // Undeclared exception!
      try { 
        removeVaccinationGroupsProcedure0.doProcedure((TransformRequest) null, (LinkedList<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.immregistries.mqe.hl7util.transform.procedure.RemoveVaccinationGroupsProcedure", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("where");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      linkedList0.add("equals");
      linkedList0.add("equals");
      TransformRequest transformRequest0 = new TransformRequest("ORC|");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("where"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("ORCR|");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      TransformRequest transformRequest0 = new TransformRequest("%QZfC");
      linkedList0.add("equals");
      linkedList0.add("l-.lmi0o$");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("where"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("where");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      linkedList0.add("equals");
      linkedList0.add("");
      TransformRequest transformRequest0 = new TransformRequest("ORC|");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("ORC|");
      linkedList0.add("where");
      TransformRequest transformRequest0 = new TransformRequest("ub>tt-&am~s59\"pzf&");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("where"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("ORCR|");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      TransformRequest transformRequest0 = new TransformRequest("%QZfC");
      linkedList0.add("equals");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("ORCR|"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      linkedList0.add("ORCR|");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      TransformRequest transformRequest0 = new TransformRequest("%QZfC");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("ORCR|"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      TransformRequest transformRequest0 = new TransformRequest("%QZfC");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertEquals("", transformRequest0.getUserid());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("where");
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      TransformRequest transformRequest0 = new TransformRequest("%QZfC");
      removeVaccinationGroupsProcedure0.doProcedure(transformRequest0, linkedList0);
      assertFalse(linkedList0.contains("where"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RemoveVaccinationGroupsProcedure removeVaccinationGroupsProcedure0 = new RemoveVaccinationGroupsProcedure();
      removeVaccinationGroupsProcedure0.setTransformer((Transformer) null);
  }
}
