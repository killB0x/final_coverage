/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 10:51:55 GMT 2022
 */

package org.immregistries.mqe.hl7util.transform.procedure;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.immregistries.mqe.hl7util.transform.TransformRequest;
import org.immregistries.mqe.hl7util.transform.Transformer;
import org.immregistries.mqe.hl7util.transform.procedure.AddFundingToRxa;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AddFundingToRxa_ESTest extends AddFundingToRxa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.SOURCE;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ALL;
      AddFundingToRxa.Type addFundingToRxa_Type1 = AddFundingToRxa.Type.ELIGIBILITY;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type1, addFundingToRxa_VaccinationGroups0);
      TransformRequest transformRequest0 = new TransformRequest("RXA|org.immregistries.mqe.hl7util.transform.procedure.AddFundingToRxa$1");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingToRxa0.doProcedure(transformRequest0, linkedList0);
      AddFundingToRxa addFundingToRxa1 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      addFundingToRxa1.doProcedure(transformRequest0, linkedList0);
      addFundingToRxa1.doProcedure(transformRequest0, linkedList0);
      assertEquals("RXA|org.immregistries.mqe.hl7util.transform.procedure.AddFundingToRxa$1\rOBX|1|CE|64994-7^Vaccine funding program eligibility category^LN|1|V01^Not VFC eligible^HL70064||||||F|||20150817|||VXC40^Eligibility captured at the immunization level^CDCPHINVS|\rOBX|2|CE|30963-3^Vaccine Funding Source^LN|2|VXC50^Public^CDCPHINVS||||||F|\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.ELIGIBILITY;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ADMINISTERED_ONLY;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      TransformRequest transformRequest0 = new TransformRequest("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingToRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.SOURCE;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ALL;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      // Undeclared exception!
      try { 
        addFundingToRxa0.doProcedure((TransformRequest) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.immregistries.mqe.hl7util.transform.procedure.AddFundingToRxa", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddFundingToRxa addFundingToRxa0 = null;
      try {
        addFundingToRxa0 = new AddFundingToRxa((AddFundingToRxa.Type) null, (AddFundingToRxa.VaccinationGroups) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.immregistries.mqe.hl7util.transform.procedure.AddFundingToRxa", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.SOURCE;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ADMINISTERED_ONLY;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      TransformRequest transformRequest0 = new TransformRequest("RXA|");
      addFundingToRxa0.doProcedure(transformRequest0, (LinkedList<String>) null);
      assertEquals("RXA|\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TransformRequest transformRequest0 = new TransformRequest("RXA|OBX|2|CE|30963-3^Vaccine Funding Source^LN|2|VXC50^Public^CD;PHINVS |||||F|");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.ELIGIBILITY;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ADMINISTERED_ONLY;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      addFundingToRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("RXA|OBX|2|CE|30963-3^Vaccine Funding Source^LN|2|VXC50^Public^CD;PHINVS |||||F|\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.ELIGIBILITY;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ALL;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      TransformRequest transformRequest0 = new TransformRequest("(cqA");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingToRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("(cqA\r", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.SOURCE;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ALL;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      TransformRequest transformRequest0 = new TransformRequest("00^");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      addFundingToRxa0.doProcedure(transformRequest0, linkedList0);
      assertEquals("", transformRequest0.getResultText());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AddFundingToRxa.Type addFundingToRxa_Type0 = AddFundingToRxa.Type.SOURCE;
      AddFundingToRxa.VaccinationGroups addFundingToRxa_VaccinationGroups0 = AddFundingToRxa.VaccinationGroups.ALL;
      AddFundingToRxa addFundingToRxa0 = new AddFundingToRxa(addFundingToRxa_Type0, addFundingToRxa_VaccinationGroups0);
      Transformer transformer0 = new Transformer();
      addFundingToRxa0.setTransformer(transformer0);
  }
}
