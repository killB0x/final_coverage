/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 29 11:19:58 GMT 2022
 */

package org.immregistries.mqe.hl7util.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.immregistries.mqe.hl7util.Reportable;
import org.immregistries.mqe.hl7util.builder.AckData;
import org.immregistries.mqe.hl7util.builder.AckResult;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AckData_ESTest extends AckData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setSendingFacility((String) null);
      String string0 = ackData0.getSendingFacility();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setSendingFacility("APP_ERROR");
      String string0 = ackData0.getSendingFacility();
      assertEquals("APP_ERROR", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setSendingApplication((String) null);
      String string0 = ackData0.getSendingApplication();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_REJECT;
      LinkedList<Reportable> linkedList0 = new LinkedList<Reportable>();
      MockDate mockDate0 = new MockDate(553, 553, (-1));
      AckData ackData0 = new AckData("", "'r|nlA/6", ackResult0, linkedList0, "", "'r|nlA/6", "", "'r|nlA/6", "'r|nlA/6", "{ 0Nz6", mockDate0, "'r|nlA/6", "j>5+S|9@");
      ackData0.getSendingApplication();
      assertEquals("'r|nlA/6", ackData0.getMessageVersionId());
      assertEquals("", ackData0.getReceivingApplication());
      assertEquals("", ackData0.getMessageProfileId());
      assertEquals("", ackData0.getMessageControlId());
      assertEquals("'r|nlA/6", ackData0.getProcessingControlId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setResponseType((String) null);
      String string0 = ackData0.getResponseType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setResponseType("|3&eh");
      String string0 = ackData0.getResponseType();
      assertEquals("|3&eh", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setReportables((List<Reportable>) null);
      List<Reportable> list0 = ackData0.getReportables();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_REJECT;
      LinkedList<Reportable> linkedList0 = new LinkedList<Reportable>();
      Reportable reportable0 = mock(Reportable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reportable0).toString();
      linkedList0.add(reportable0);
      MockDate mockDate0 = new MockDate(553, 553, (-1));
      AckData ackData0 = new AckData("", "'r|nlA/6", ackResult0, linkedList0, "", "'r|nlA/6", "", "'r|nlA/6", "'r|nlA/6", "{ 0Nz6", mockDate0, "'r|nlA/6", "j>5+S|9@");
      ackData0.getReportables();
      assertEquals("", ackData0.getMessageProfileId());
      assertEquals("'r|nlA/6", ackData0.getProcessingControlId());
      assertEquals("", ackData0.getMessageControlId());
      assertEquals("", ackData0.getReceivingApplication());
      assertEquals("'r|nlA/6", ackData0.getMessageVersionId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_ERROR;
      AckData ackData0 = new AckData();
      List<Reportable> list0 = ackData0.getReportables();
      MockDate mockDate0 = new MockDate((-451L));
      AckData ackData1 = new AckData("", "", ackResult0, list0, (String) null, "org.immregistries.mqe.hl7util.builder.AckData", "p4(iu,6d", (String) null, "p4(iu,6d", (String) null, mockDate0, "", (String) null);
      ackData1.getReceivingFacility();
      assertEquals("", ackData1.getMessageProfileId());
      assertEquals("", ackData1.getMessageVersionId());
      assertEquals("org.immregistries.mqe.hl7util.builder.AckData", ackData1.getProcessingControlId());
      assertEquals("p4(iu,6d", ackData1.getReceivingApplication());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_REJECT;
      AckData ackData0 = new AckData();
      List<Reportable> list0 = ackData0.getReportables();
      MockDate mockDate0 = new MockDate(0, 533, 533, 0, 0, (-1854));
      AckData ackData1 = new AckData((String) null, (String) null, ackResult0, list0, "b@OQMf!zjp|?", (String) null, "", "org.immregistries.mqe.hl7util.builder.AckData", "org.immregistries.mqe.hl7util.builder.AckData", "X(CiF]wc#YsTa", mockDate0, (String) null, "");
      ackData1.getReceivingFacility();
      assertEquals("", ackData1.getReceivingApplication());
      assertEquals("b@OQMf!zjp|?", ackData1.getMessageControlId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setReceivingApplication((String) null);
      String string0 = ackData0.getReceivingApplication();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_ERROR;
      AckData ackData0 = new AckData();
      List<Reportable> list0 = ackData0.getReportables();
      MockDate mockDate0 = new MockDate(1463L);
      AckData ackData1 = new AckData("\\NZ*BP_o", "org.immregistries.mqe.hl7util.builder.AckData", ackResult0, list0, "\\NZ*BP_o", "qV!!", "org.immregistries.mqe.hl7util.builder.AckData", "org.immregistries.mqe.hl7util.builder.AckResult", "@WiAKBwS<::d[S8(IxS", "org.immregistries.mqe.hl7util.builder.AckData", mockDate0, "org.immregistries.mqe.hl7util.builder.AckResult", "@WiAKBwS<::d[S8(IxS");
      String string0 = ackData1.getReceivingApplication();
      assertEquals("\\NZ*BP_o", ackData1.getMessageControlId());
      assertEquals("qV!!", ackData1.getProcessingControlId());
      assertEquals("\\NZ*BP_o", ackData1.getMessageProfileId());
      assertEquals("org.immregistries.mqe.hl7util.builder.AckData", ackData1.getMessageVersionId());
      assertEquals("org.immregistries.mqe.hl7util.builder.AckData", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setProfileId("`P& Nz ,Du'^vSG");
      String string0 = ackData0.getProfileId();
      assertEquals("`P& Nz ,Du'^vSG", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setProcessingControlId((String) null);
      String string0 = ackData0.getProcessingControlId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setProcessingControlId(":zF|'Lf/2_'");
      String string0 = ackData0.getProcessingControlId();
      assertEquals(":zF|'Lf/2_'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_REJECT;
      LinkedList<Reportable> linkedList0 = new LinkedList<Reportable>();
      AckData ackData0 = new AckData((String) null, (String) null, ackResult0, linkedList0, (String) null, ".", "Rejected with Errors", (String) null, (String) null, "AR", (Date) null, "", ".");
      String string0 = ackData0.getMessageVersionId();
      assertNull(string0);
      assertEquals(".", ackData0.getProcessingControlId());
      assertEquals("Rejected with Errors", ackData0.getReceivingApplication());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setMessageVersionId("?L,}w");
      String string0 = ackData0.getMessageVersionId();
      assertEquals("?L,}w", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setMessageProfileId((String) null);
      String string0 = ackData0.getMessageProfileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setMessageProfileId("upd^7{?");
      String string0 = ackData0.getMessageProfileId();
      assertEquals("upd^7{?", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setMessageControlId((String) null);
      String string0 = ackData0.getMessageControlId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_REJECT;
      AckData ackData0 = new AckData();
      List<Reportable> list0 = ackData0.getReportables();
      MockDate mockDate0 = new MockDate(0, 533, 533, 0, 0, (-1854));
      AckData ackData1 = new AckData((String) null, (String) null, ackResult0, list0, "b@OQMf!zjp|?", (String) null, "", "org.immregistries.mqe.hl7util.builder.AckData", "org.immregistries.mqe.hl7util.builder.AckData", "X(CiF]wc#YsTa", mockDate0, (String) null, "");
      String string0 = ackData1.getMessageControlId();
      assertEquals("b@OQMf!zjp|?", string0);
      assertNotNull(string0);
      assertEquals("", ackData1.getReceivingApplication());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AckResult ackResult0 = AckResult.APP_ACCEPT;
      MockDate mockDate0 = new MockDate();
      AckData ackData0 = null;
      try {
        ackData0 = new AckData("", "", ackResult0, (List<Reportable>) null, "", "", "", "", "", "", mockDate0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getSendingApplication();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getMessageVersionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getProcessingControlId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AckData ackData0 = new AckData();
      AckResult ackResult0 = AckResult.APP_REJECT;
      ackData0.setResult(ackResult0);
      assertEquals("", ackData0.getReceivingFacility());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getSendingFacility();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getReceivingApplication();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setProfileId((String) null);
      String string0 = ackData0.getProfileId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getMessageProfileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AckData ackData0 = new AckData();
      Date date0 = ackData0.getMessageDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setMessageDate((Date) null);
      Date date0 = ackData0.getMessageDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AckData ackData0 = new AckData();
      AckResult ackResult0 = ackData0.getResult();
      assertEquals("AE", ackResult0.getCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getMessageControlId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getResponseType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getReceivingFacility();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AckData ackData0 = new AckData();
      String string0 = ackData0.getProfileId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AckData ackData0 = new AckData();
      ackData0.setReceivingFacility("org.immregistries.mqe.hl7util.builder.AckData");
      assertEquals("", ackData0.getProfileId());
  }
}
