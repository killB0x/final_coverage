/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 21:06:44 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Address;
import com.github.javafaker.Ancient;
import com.github.javafaker.Animal;
import com.github.javafaker.App;
import com.github.javafaker.AquaTeenHungerForce;
import com.github.javafaker.Artist;
import com.github.javafaker.Avatar;
import com.github.javafaker.Aviation;
import com.github.javafaker.BackToTheFuture;
import com.github.javafaker.Barcode;
import com.github.javafaker.Basketball;
import com.github.javafaker.Beer;
import com.github.javafaker.BojackHorseman;
import com.github.javafaker.Book;
import com.github.javafaker.Bool;
import com.github.javafaker.Buffy;
import com.github.javafaker.Business;
import com.github.javafaker.Cat;
import com.github.javafaker.ChuckNorris;
import com.github.javafaker.Code;
import com.github.javafaker.Coin;
import com.github.javafaker.Color;
import com.github.javafaker.Commerce;
import com.github.javafaker.Company;
import com.github.javafaker.Country;
import com.github.javafaker.Crypto;
import com.github.javafaker.Currency;
import com.github.javafaker.DateAndTime;
import com.github.javafaker.Demographic;
import com.github.javafaker.Disease;
import com.github.javafaker.Dog;
import com.github.javafaker.DragonBall;
import com.github.javafaker.Dune;
import com.github.javafaker.Educator;
import com.github.javafaker.ElderScrolls;
import com.github.javafaker.EnglandFootBall;
import com.github.javafaker.Esports;
import com.github.javafaker.Faker;
import com.github.javafaker.File;
import com.github.javafaker.Finance;
import com.github.javafaker.Food;
import com.github.javafaker.Friends;
import com.github.javafaker.FunnyName;
import com.github.javafaker.GameOfThrones;
import com.github.javafaker.Gender;
import com.github.javafaker.Hacker;
import com.github.javafaker.HarryPotter;
import com.github.javafaker.Hipster;
import com.github.javafaker.HitchhikersGuideToTheGalaxy;
import com.github.javafaker.Hobbit;
import com.github.javafaker.HowIMetYourMother;
import com.github.javafaker.IdNumber;
import com.github.javafaker.Internet;
import com.github.javafaker.Job;
import com.github.javafaker.Kaamelott;
import com.github.javafaker.LeagueOfLegends;
import com.github.javafaker.Lebowski;
import com.github.javafaker.LordOfTheRings;
import com.github.javafaker.Lorem;
import com.github.javafaker.Matz;
import com.github.javafaker.Medical;
import com.github.javafaker.Mountain;
import com.github.javafaker.Music;
import com.github.javafaker.Name;
import com.github.javafaker.Nation;
import com.github.javafaker.Number;
import com.github.javafaker.Options;
import com.github.javafaker.Overwatch;
import com.github.javafaker.PhoneNumber;
import com.github.javafaker.Photography;
import com.github.javafaker.Pokemon;
import com.github.javafaker.PrincessBride;
import com.github.javafaker.ProgrammingLanguage;
import com.github.javafaker.Relationships;
import com.github.javafaker.RickAndMorty;
import com.github.javafaker.Robin;
import com.github.javafaker.RockBand;
import com.github.javafaker.Shakespeare;
import com.github.javafaker.Sip;
import com.github.javafaker.SlackEmoji;
import com.github.javafaker.Space;
import com.github.javafaker.StarCraft;
import com.github.javafaker.StarTrek;
import com.github.javafaker.Stock;
import com.github.javafaker.Superhero;
import com.github.javafaker.Team;
import com.github.javafaker.TwinPeaks;
import com.github.javafaker.University;
import com.github.javafaker.Weather;
import com.github.javafaker.Witcher;
import com.github.javafaker.Yoda;
import com.github.javafaker.Zelda;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.RandomService;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Faker_ESTest extends Faker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Faker faker0 = new Faker(locale0, (RandomService) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      RandomService randomService0 = new RandomService();
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      Faker faker0 = new Faker(fakeValuesService0, randomService0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.numerify("44");
      assertEquals("44", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Faker faker0 = new Faker();
      String string0 = faker0.numerify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1218L);
      Faker faker0 = new Faker(mockRandom0);
      String string0 = faker0.letterify("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Faker faker0 = new Faker();
      String string0 = faker0.letterify("gGejNq]JE(J2!AVz=%");
      assertEquals("gGejNq]JE(J2!AVz=%", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = new Faker(mockRandom0);
      String string0 = faker0.letterify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.expression("x/d");
      assertEquals("x/d", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = new Locale("");
      Faker faker0 = Faker.instance(locale0);
      String string0 = faker0.expression("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1218L);
      Faker faker0 = new Faker(mockRandom0);
      String string0 = faker0.bothify("lthoVf3{A]/QJ$F", false);
      assertEquals("lthoVf3{A]/QJ$F", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.bothify("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.bothify("^5LTO4nl5$]._l");
      assertEquals("^5LTO4nl5$]._l", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.bothify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.resolve("It0\nz%4<R^-7IdZTk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // It0
         // z%4<R^-7IdZTk resulted in null expression
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.resolve("hacker.noun");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/Yaml
         //
         verifyException("com.github.javafaker.service.FakeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.letterify((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Faker.instance();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Faker.instance((Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Faker.instance();
      Locale locale0 = Locale.CHINA;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Faker.instance(locale0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Faker.instance((Locale) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale locale0 = new Locale("", "_");
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        Faker.instance(locale0, (Random) mockRandom0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Faker faker0 = new Faker();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      Faker.instance(locale0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = new Locale("", "_");
      // Undeclared exception!
      try { 
        Faker.instance(locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Faker.instance();
      // Undeclared exception!
      Faker.instance();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Faker.instance();
      MockRandom mockRandom0 = new MockRandom(0L);
      Faker faker0 = new Faker(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = new Locale("Q", "Q", "1M<XIMh");
      Faker.instance(locale0);
      MockRandom mockRandom0 = new MockRandom((-3641L));
      Faker faker0 = new Faker(locale0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Faker.instance((Random) mockRandom0);
      RandomService randomService0 = new RandomService(mockRandom0);
      Locale locale0 = Locale.TAIWAN;
      Faker faker0 = new Faker(locale0, randomService0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      Faker faker0 = null;
      try {
        faker0 = new Faker((Locale) null, randomService0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Faker.instance();
      Locale locale0 = Locale.CHINA;
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = new Locale("");
      Faker.instance(locale0);
      RandomService randomService0 = new RandomService();
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      Faker faker0 = new Faker(fakeValuesService0, randomService0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Faker.instance();
      Faker faker0 = new Faker();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Company company0 = faker0.company();
      assertNotNull(company0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Dog dog0 = faker0.dog();
      assertNotNull(dog0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Faker faker0 = Faker.instance();
      PhoneNumber phoneNumber0 = faker0.phoneNumber();
      assertNotNull(phoneNumber0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.regexify("8?k)^%AU_{ymvn");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/mifmif/common/regex/Generex
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(")*MEEr:rTh");
      MockRandom mockRandom0 = new MockRandom((-2523L));
      Faker faker0 = new Faker(locale0, mockRandom0);
      Gender gender0 = faker0.gender();
      assertNotNull(gender0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Robin robin0 = faker0.robin();
      assertNotNull(robin0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Faker faker0 = new Faker();
      Address address0 = faker0.address();
      assertNotNull(address0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      MockRandom mockRandom0 = new MockRandom(4016L);
      Faker faker0 = new Faker(locale0, mockRandom0);
      TwinPeaks twinPeaks0 = faker0.twinPeaks();
      assertNotNull(twinPeaks0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.bothify((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Faker faker0 = new Faker(locale0);
      Cat cat0 = faker0.cat();
      assertNotNull(cat0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(")*MEEr:rTh");
      MockRandom mockRandom0 = new MockRandom((-2523L));
      Faker faker0 = new Faker(locale0, mockRandom0);
      Hacker hacker0 = faker0.hacker();
      assertNotNull(hacker0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Faker faker0 = new Faker();
      Number number0 = faker0.number();
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Bool bool0 = faker0.bool();
      assertNotNull(bool0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Faker faker0 = Faker.instance();
      LordOfTheRings lordOfTheRings0 = faker0.lordOfTheRings();
      assertNotNull(lordOfTheRings0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Beer beer0 = faker0.beer();
      assertNotNull(beer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Animal animal0 = faker0.animal();
      assertNotNull(animal0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Faker faker0 = new Faker();
      Ancient ancient0 = faker0.ancient();
      assertNotNull(ancient0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Matz matz0 = faker0.matz();
      assertNotNull(matz0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Faker faker0 = new Faker();
      Name name0 = faker0.name();
      assertNotNull(name0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Faker faker0 = new Faker();
      Zelda zelda0 = faker0.zelda();
      assertNotNull(zelda0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Faker faker0 = new Faker();
      FakeValuesService fakeValuesService0 = faker0.fakeValuesService();
      assertNotNull(fakeValuesService0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Faker faker0 = new Faker();
      Witcher witcher0 = faker0.witcher();
      assertNotNull(witcher0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Pokemon pokemon0 = faker0.pokemon();
      assertNotNull(pokemon0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Yoda yoda0 = faker0.yoda();
      assertNotNull(yoda0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      MockRandom mockRandom0 = new MockRandom(4016L);
      Faker faker0 = new Faker(locale0, mockRandom0);
      Artist artist0 = faker0.artist();
      assertNotNull(artist0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Book book0 = faker0.book();
      assertNotNull(book0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Faker faker0 = new Faker();
      GameOfThrones gameOfThrones0 = faker0.gameOfThrones();
      assertNotNull(gameOfThrones0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Faker faker0 = Faker.instance();
      RockBand rockBand0 = faker0.rockBand();
      assertNotNull(rockBand0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Faker faker0 = Faker.instance();
      EnglandFootBall englandFootBall0 = faker0.englandfootball();
      assertNotNull(englandFootBall0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Faker faker0 = new Faker();
      Dune dune0 = faker0.dune();
      assertNotNull(dune0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Options options0 = faker0.options();
      assertNotNull(options0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Faker faker0 = new Faker();
      SlackEmoji slackEmoji0 = faker0.slackEmoji();
      assertNotNull(slackEmoji0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Faker faker0 = new Faker();
      Sip sip0 = faker0.sip();
      assertNotNull(sip0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Faker faker0 = new Faker();
      ProgrammingLanguage programmingLanguage0 = faker0.programmingLanguage();
      assertNotNull(programmingLanguage0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Faker faker0 = new Faker();
      Overwatch overwatch0 = faker0.overwatch();
      assertNotNull(overwatch0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Faker faker0 = Faker.instance();
      ChuckNorris chuckNorris0 = faker0.chuckNorris();
      assertNotNull(chuckNorris0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Faker faker0 = Faker.instance();
      App app0 = faker0.app();
      assertNotNull(app0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Faker faker0 = new Faker();
      Medical medical0 = faker0.medical();
      assertNotNull(medical0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Coin coin0 = faker0.coin();
      assertNotNull(coin0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.bothify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Faker faker0 = Faker.instance();
      BojackHorseman bojackHorseman0 = faker0.bojackHorseman();
      assertNotNull(bojackHorseman0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Faker faker0 = new Faker();
      Business business0 = faker0.business();
      assertNotNull(business0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Faker faker0 = new Faker();
      Team team0 = faker0.team();
      assertNotNull(team0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.expression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Faker faker0 = new Faker();
      Country country0 = faker0.country();
      assertNotNull(country0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Color color0 = faker0.color();
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Faker faker0 = new Faker();
      Hobbit hobbit0 = faker0.hobbit();
      assertNotNull(hobbit0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Buffy buffy0 = faker0.buffy();
      assertNotNull(buffy0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Music music0 = faker0.music();
      assertNotNull(music0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.letterify("&u&;", false);
      assertEquals("&u&;", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Faker faker0 = Faker.instance();
      StarCraft starCraft0 = faker0.starCraft();
      assertNotNull(starCraft0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Faker faker0 = new Faker();
      AquaTeenHungerForce aquaTeenHungerForce0 = faker0.aquaTeenHungerForce();
      assertNotNull(aquaTeenHungerForce0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Code code0 = faker0.code();
      assertNotNull(code0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Faker faker0 = new Faker();
      PrincessBride princessBride0 = faker0.princessBride();
      assertNotNull(princessBride0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Esports esports0 = faker0.esports();
      assertNotNull(esports0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Faker faker0 = Faker.instance();
      IdNumber idNumber0 = faker0.idNumber();
      assertNotNull(idNumber0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Relationships relationships0 = faker0.relationships();
      assertNotNull(relationships0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Lorem lorem0 = faker0.lorem();
      assertNotNull(lorem0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Faker faker0 = new Faker();
      StarTrek starTrek0 = faker0.starTrek();
      assertNotNull(starTrek0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Currency currency0 = faker0.currency();
      assertNotNull(currency0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Faker faker0 = new Faker();
      Lebowski lebowski0 = faker0.lebowski();
      assertNotNull(lebowski0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Superhero superhero0 = faker0.superhero();
      assertNotNull(superhero0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Internet internet0 = faker0.internet();
      assertNotNull(internet0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Commerce commerce0 = faker0.commerce();
      assertNotNull(commerce0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Avatar avatar0 = faker0.avatar();
      assertNotNull(avatar0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Faker faker0 = Faker.instance();
      HarryPotter harryPotter0 = faker0.harryPotter();
      assertNotNull(harryPotter0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.numerify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Faker faker0 = new Faker();
      DateAndTime dateAndTime0 = faker0.date();
      assertNotNull(dateAndTime0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Faker faker0 = Faker.instance();
      RickAndMorty rickAndMorty0 = faker0.rickAndMorty();
      assertNotNull(rickAndMorty0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Faker faker0 = new Faker();
      Food food0 = faker0.food();
      assertNotNull(food0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Faker faker0 = new Faker();
      HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy0 = faker0.hitchhikersGuideToTheGalaxy();
      assertNotNull(hitchhikersGuideToTheGalaxy0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Faker faker0 = Faker.instance();
      File file0 = faker0.file();
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Job job0 = faker0.job();
      assertNotNull(job0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Faker faker0 = Faker.instance();
      FunnyName funnyName0 = faker0.funnyName();
      assertNotNull(funnyName0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Faker faker0 = new Faker();
      ElderScrolls elderScrolls0 = faker0.elderScrolls();
      assertNotNull(elderScrolls0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale locale0 = Locale.US;
      Faker faker0 = Faker.instance(locale0, (Random) null);
      assertNotNull(faker0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Faker faker0 = new Faker();
      Nation nation0 = faker0.nation();
      assertNotNull(nation0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Faker faker0 = new Faker();
      Educator educator0 = faker0.educator();
      assertNotNull(educator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Faker faker0 = new Faker();
      Demographic demographic0 = faker0.demographic();
      assertNotNull(demographic0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Faker faker0 = Faker.instance();
      LeagueOfLegends leagueOfLegends0 = faker0.leagueOfLegends();
      assertNotNull(leagueOfLegends0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Faker faker0 = new Faker();
      HowIMetYourMother howIMetYourMother0 = faker0.howIMetYourMother();
      assertNotNull(howIMetYourMother0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Basketball basketball0 = faker0.basketball();
      assertNotNull(basketball0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Faker faker0 = new Faker();
      Photography photography0 = faker0.photography();
      assertNotNull(photography0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Faker faker0 = Faker.instance();
      BackToTheFuture backToTheFuture0 = faker0.backToTheFuture();
      assertNotNull(backToTheFuture0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Hipster hipster0 = faker0.hipster();
      assertNotNull(hipster0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Aviation aviation0 = faker0.aviation();
      assertNotNull(aviation0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.resolve(".");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.github.javafaker.service.FakeValuesGrouping cannot be cast to class java.lang.String (com.github.javafaker.service.FakeValuesGrouping is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @43f85ab1; java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Faker.instance((Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Mountain mountain0 = faker0.mountain();
      assertNotNull(mountain0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Faker faker0 = Faker.instance();
      RandomService randomService0 = faker0.random();
      assertNotNull(randomService0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Weather weather0 = faker0.weather();
      assertNotNull(weather0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Finance finance0 = faker0.finance();
      assertNotNull(finance0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.letterify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Faker faker0 = new Faker();
      Space space0 = faker0.space();
      assertNotNull(space0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Faker faker0 = new Faker();
      Stock stock0 = faker0.stock();
      assertNotNull(stock0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Faker faker0 = new Faker();
      University university0 = faker0.university();
      assertNotNull(university0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Barcode barcode0 = faker0.barcode();
      assertNotNull(barcode0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Faker faker0 = new Faker();
      Disease disease0 = faker0.disease();
      assertNotNull(disease0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Crypto crypto0 = faker0.crypto();
      assertNotNull(crypto0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Faker faker0 = new Faker();
      Shakespeare shakespeare0 = faker0.shakespeare();
      assertNotNull(shakespeare0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Kaamelott kaamelott0 = faker0.kaamelott();
      assertNotNull(kaamelott0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Faker faker0 = new Faker(locale0);
      Friends friends0 = faker0.friends();
      assertNotNull(friends0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DragonBall dragonBall0 = faker0.dragonBall();
      assertNotNull(dragonBall0);
  }
}
