/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 20:21:49 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Faker;
import com.github.javafaker.Number;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.RandomService;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Number_ESTest extends Number_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Number number0 = faker0.number();
      number0.numberBetween((long) 1, (-3391L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      MockRandom mockRandom0 = new MockRandom(1000L);
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      number0.numberBetween(8, 905);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      number0.randomDouble((-1768), (long) (-1768), (long) (-1768));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Faker faker0 = new Faker();
      Number number0 = faker0.number();
      number0.randomDouble(4186, (-1L), 0L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      number0.randomDouble((-1786), (-1786), (-1786));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Faker faker0 = new Faker(locale0);
      Number number0 = faker0.number();
      number0.randomDouble(0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = new Locale("C'Ms`+?63hXlJ", "aS5Adu>J", "aS5Adu>J");
      Faker faker0 = new Faker(locale0);
      Number number0 = faker0.number();
      number0.randomNumber(1, true);
      number0.randomDigit();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance((Random) mockRandom0);
      Number number0 = faker0.number();
      number0.numberBetween(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      RandomService randomService0 = new RandomService();
      Faker faker0 = new Faker(locale0, randomService0);
      Number number0 = new Number(faker0);
      number0.numberBetween(0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      String string0 = number0.digits(630);
      assertEquals("074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186074293075264186", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomNumber((-167), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Number", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomDouble((-1183), (long) (-1183), 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Faker faker0 = new Faker();
      Number number0 = faker0.number();
      // Undeclared exception!
      try { 
        number0.randomDouble((-2136414143), (long) (-2136414143), (long) (-2136414143));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomDouble((-737), (-737), (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomDigitNotZero();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomDigit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.numberBetween(0L, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.numberBetween((-102), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      // Undeclared exception!
      number0.digits(2146306299);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.digit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.digits(783);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance((Random) mockRandom0);
      Number number0 = faker0.number();
      String string0 = number0.digits((-880));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      Faker faker0 = new Faker(fakeValuesService0, randomService0);
      Number number0 = new Number(faker0);
      long long0 = number0.randomNumber(0, false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = new Locale("For ever and a day.", "For ever and a day.");
      MockRandom mockRandom0 = new MockRandom(187L);
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      double double0 = number0.randomDouble(1747, 0L, 187L);
      assertEquals(1.3674794331177345, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = faker0.number();
      // Undeclared exception!
      try { 
        number0.randomDouble((-2145340449), (-2145340449), (-2145340449));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Number number0 = faker0.number();
      // Undeclared exception!
      try { 
        number0.randomNumber(1506, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance((Random) mockRandom0);
      Number number0 = faker0.number();
      long long0 = number0.randomNumber();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      long long0 = number0.numberBetween((-2527L), (long) 0);
      assertEquals((-2522L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Faker faker0 = new Faker();
      Number number0 = new Number(faker0);
      long long0 = number0.numberBetween(134L, 134L);
      assertEquals(134L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      long long0 = number0.numberBetween((-1183L), (-1185L));
      assertEquals((-1186L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = new Number(faker0);
      int int0 = number0.numberBetween(29, 11);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = new Locale("For ever and a day.", "For ever and a day.");
      MockRandom mockRandom0 = new MockRandom(187L);
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      int int0 = number0.numberBetween(3261, (-3520));
      assertEquals((-3512), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Number number0 = new Number((Faker) null);
      // Undeclared exception!
      try { 
        number0.randomNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = new Locale("For ever and a day.", "For ever and a day.");
      MockRandom mockRandom0 = new MockRandom(187L);
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      int int0 = number0.randomDigitNotZero();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = new Locale("For ever and a day.", "For ever and a day.");
      MockRandom mockRandom0 = new MockRandom(187L);
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      Number number0 = new Number(faker0);
      double double0 = number0.randomDouble(1968, 1968, (-3520));
      assertEquals((-3512.591896329019), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Faker faker0 = new Faker();
      Number number0 = new Number(faker0);
      String string0 = number0.digit();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = faker0.number();
      int int0 = number0.randomDigit();
      assertEquals(0, int0);
  }
}
