/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 20:46:40 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Faker;
import com.github.javafaker.PhoneNumber;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.RandomService;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PhoneNumber_ESTest extends PhoneNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Faker faker0 = Faker.instance(locale0);
      PhoneNumber phoneNumber0 = faker0.phoneNumber();
      String string0 = phoneNumber0.extension();
      assertEquals("0000", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Faker faker0 = new Faker();
      PhoneNumber phoneNumber0 = new PhoneNumber(faker0);
      String string0 = phoneNumber0.subscriberNumber(5156);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PhoneNumber phoneNumber0 = new PhoneNumber((Faker) null);
      // Undeclared exception!
      try { 
        phoneNumber0.subscriberNumber((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.PhoneNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PhoneNumber phoneNumber0 = new PhoneNumber((Faker) null);
      // Undeclared exception!
      try { 
        phoneNumber0.subscriberNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.PhoneNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Faker faker0 = new Faker();
      PhoneNumber phoneNumber0 = new PhoneNumber(faker0);
      // Undeclared exception!
      try { 
        phoneNumber0.phoneNumber();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/Yaml
         //
         verifyException("com.github.javafaker.service.FakeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Faker faker0 = new Faker();
      PhoneNumber phoneNumber0 = faker0.phoneNumber();
      // Undeclared exception!
      try { 
        phoneNumber0.cellPhone();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/Yaml
         //
         verifyException("com.github.javafaker.service.FakeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Faker faker0 = Faker.instance(locale0);
      PhoneNumber phoneNumber0 = faker0.phoneNumber();
      String string0 = phoneNumber0.subscriberNumber(1);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.UK;
      RandomService randomService0 = new RandomService();
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      Faker faker0 = new Faker(fakeValuesService0, randomService0);
      PhoneNumber phoneNumber0 = new PhoneNumber(faker0);
      String string0 = phoneNumber0.subscriberNumber((-1613));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Faker faker0 = Faker.instance();
      PhoneNumber phoneNumber0 = new PhoneNumber(faker0);
      String string0 = phoneNumber0.subscriberNumber();
      assertEquals("0000", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PhoneNumber phoneNumber0 = new PhoneNumber((Faker) null);
      // Undeclared exception!
      try { 
        phoneNumber0.cellPhone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.PhoneNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhoneNumber phoneNumber0 = new PhoneNumber((Faker) null);
      // Undeclared exception!
      try { 
        phoneNumber0.phoneNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.PhoneNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhoneNumber phoneNumber0 = new PhoneNumber((Faker) null);
      // Undeclared exception!
      try { 
        phoneNumber0.extension();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.PhoneNumber", e);
      }
  }
}
