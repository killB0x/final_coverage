/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 20:25:39 GMT 2022
 */

package com.github.javafaker.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.service.RandomService;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomService_ESTest extends RandomService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomService randomService0 = new RandomService(mockRandom0);
      String string0 = randomService0.hex(3230);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomService randomService0 = new RandomService(mockRandom0);
      randomService0.nextLong();
      randomService0.nextLong();
      randomService0.nextDouble();
      randomService0.nextLong();
      mockRandom0.nextFloat();
      byte[] byteArray0 = new byte[5];
      mockRandom0.nextBytes(byteArray0);
      randomService0.nextDouble();
      randomService0.nextDouble();
      long long0 = randomService0.nextLong(4L);
      assertEquals(2L, long0);
      
      String string0 = randomService0.hex(5);
      assertEquals("BBBBB", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      String string0 = randomService0.hex(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      Integer integer0 = randomService0.nextInt(1, 5);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      long long0 = randomService0.nextLong(1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      // Undeclared exception!
      try { 
        randomService0.nextLong((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomService randomService0 = new RandomService(mockRandom0);
      randomService0.nextLong();
      randomService0.nextLong();
      randomService0.nextDouble();
      randomService0.nextLong();
      randomService0.nextDouble();
      randomService0.nextDouble();
      long long0 = randomService0.nextLong(2L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      Integer integer0 = randomService0.nextInt(0, 0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      Integer integer0 = randomService0.nextInt((-129), (-129));
      assertEquals((-129), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomService randomService0 = new RandomService(mockRandom0);
      int int0 = randomService0.nextInt((-129));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      // Undeclared exception!
      try { 
        randomService0.nextInt(0, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      // Undeclared exception!
      try { 
        randomService0.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      randomService0.hex(5367);
      // Undeclared exception!
      randomService0.hex(5367);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      RandomService randomService0 = new RandomService(mockRandom0);
      randomService0.nextLong();
      randomService0.nextLong();
      randomService0.nextDouble();
      randomService0.nextLong();
      mockRandom0.nextFloat();
      byte[] byteArray0 = new byte[5];
      mockRandom0.nextBytes(byteArray0);
      randomService0.nextDouble();
      randomService0.nextDouble();
      String string0 = randomService0.hex(3230);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      String string0 = randomService0.hex((-1058));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      // Undeclared exception!
      try { 
        randomService0.nextLong(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomService randomService0 = new RandomService((Random) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      Boolean boolean0 = randomService0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomService randomService0 = new RandomService();
      String string0 = randomService0.hex();
      assertEquals("00000000", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      long long0 = randomService0.nextLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      int int0 = randomService0.nextInt((-129));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomService randomService0 = new RandomService(mockRandom0);
      double double0 = randomService0.nextDouble();
      assertEquals(0.0, double0, 0.01);
  }
}
