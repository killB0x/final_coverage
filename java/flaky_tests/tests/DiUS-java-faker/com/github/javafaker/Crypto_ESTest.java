/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 20:52:50 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Crypto;
import com.github.javafaker.Faker;
import com.github.javafaker.service.RandomService;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Crypto_ESTest extends Crypto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Crypto crypto0 = new Crypto(faker0);
      String string0 = crypto0.sha256();
      assertEquals("b0f3323e7a3cad8ae6778340cc2a17ae0cb31c818df3767cda7c3dd423725e90", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Crypto crypto0 = new Crypto((Faker) null);
      // Undeclared exception!
      try { 
        crypto0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Crypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Crypto crypto0 = new Crypto((Faker) null);
      // Undeclared exception!
      try { 
        crypto0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Crypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Crypto crypto0 = new Crypto((Faker) null);
      // Undeclared exception!
      try { 
        crypto0.md5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Crypto", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Crypto crypto0 = new Crypto(faker0);
      String string0 = crypto0.sha512();
      assertEquals("d8b5a659e365f704ab114ae7079a8da24fb9997b3052a4a63b37d654652bad6fbdd2b52d737e20a9d5ac3c5831d6afdd32ff737a3dd95269d2793bc2aa850aab", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Crypto crypto0 = new Crypto(faker0);
      String string0 = crypto0.sha1();
      assertEquals("5afd9729928ad946eee5610434e66b5f95accbaf", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      RandomService randomService0 = new RandomService((Random) null);
      Faker faker0 = new Faker(locale0, randomService0);
      Crypto crypto0 = new Crypto(faker0);
      String string0 = crypto0.md5();
      assertEquals("46bc249a5a8fc5d622cf12c42c463ae0", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Crypto crypto0 = new Crypto((Faker) null);
      // Undeclared exception!
      try { 
        crypto0.sha256();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Crypto", e);
      }
  }
}
