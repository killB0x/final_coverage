/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:51:51 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.QueryCreator;
import io.github.josevjunior.simplejdbc.UpdateBuilder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Map;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UpdateBuilder_ESTest extends UpdateBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("", "");
      String string0 = updateBuilder_UpdateParam0.getParamName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("t|fs", "t|fs");
      String string0 = updateBuilder_UpdateParam0.getColumnName();
      assertEquals("t|fs", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "");
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = new UpdateBuilder.UpdateBuilderCondition(updateBuilder0);
      UpdateBuilder updateBuilder1 = updateBuilder_UpdateBuilderCondition0.getUpdateBuilder();
      assertSame(updateBuilder0, updateBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "");
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = new UpdateBuilder.UpdateBuilderCondition(updateBuilder0);
      Map<UpdateBuilder.UpdateParam, Object> map0 = updateBuilder_UpdateBuilderCondition0.getColumnsAndValues();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      doReturn(0).when(preparedStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Object object0 = new Object();
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "");
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = new UpdateBuilder.UpdateBuilderCondition(updateBuilder0);
      updateBuilder_UpdateBuilderCondition0.col("", object0);
      int int0 = updateBuilder_UpdateBuilderCondition0.execute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = queryCreator0.update((String) null);
      String string0 = updateBuilder0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      UpdateBuilder updateBuilder0 = queryCreator0.update("io.github.josevjunior.simplejdbc.ColumnValueMapper");
      String string0 = updateBuilder0.getTableName();
      assertEquals("io.github.josevjunior.simplejdbc.ColumnValueMapper", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      UpdateBuilder updateBuilder0 = queryCreator0.update("io.github.josevjunior.simplejdbc.ColumnValueMapper");
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("q,erZs", "io.github.josevjunior.simplejdbc.ColumnValueMapper");
      UpdateBuilder updateBuilder1 = updateBuilder0.set("q,erZs", updateBuilder_UpdateParam0);
      updateBuilder1.getColumnsAndValues();
      assertEquals("q,erZs", updateBuilder_UpdateParam0.getParamName());
      assertEquals("io.github.josevjunior.simplejdbc.ColumnValueMapper", updateBuilder_UpdateParam0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "");
      Map<UpdateBuilder.UpdateParam, Object> map0 = updateBuilder0.getColumnsAndValues();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "");
      String string0 = updateBuilder0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("io.github.josevjunior.simplejdbc.ColumnValueMappers", "io.github.josevjunior.simplejdbc.ColumnValueMapper");
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam1 = new UpdateBuilder.UpdateParam("io.github.josevjunior.simplejdbc.ColumnValueMappers", "io.github.josevjunior.simplejdbc.ColumnValueMappers");
      boolean boolean0 = updateBuilder_UpdateParam0.equals(updateBuilder_UpdateParam1);
      assertFalse(boolean0);
      assertEquals("io.github.josevjunior.simplejdbc.ColumnValueMappers", updateBuilder_UpdateParam0.getParamName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("io.github.josevjunior.simplejdbc.UpdateBuilder", "io.github.josevjunior.simplejdbc.UpdateBuilder");
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam1 = new UpdateBuilder.UpdateParam("016AKz>w)yE%Sd", "016AKz>w)yE%Sd");
      boolean boolean0 = updateBuilder_UpdateParam1.equals(updateBuilder_UpdateParam0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UpdateBuilder updateBuilder0 = new UpdateBuilder((QueryCreator) null, "");
      Object object0 = new Object();
      UpdateBuilder updateBuilder1 = updateBuilder0.set("", object0);
      UpdateBuilder updateBuilder2 = updateBuilder1.set("", object0);
      assertEquals("", updateBuilder2.getTableName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("q,erZs", "io.github.josevjunior.simplejdbc.ColumnValueMapper");
      boolean boolean0 = updateBuilder_UpdateParam0.equals((Object) null);
      assertEquals("io.github.josevjunior.simplejdbc.ColumnValueMapper", updateBuilder_UpdateParam0.getColumnName());
      assertEquals("q,erZs", updateBuilder_UpdateParam0.getParamName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("", (String) null);
      boolean boolean0 = updateBuilder_UpdateParam0.equals(updateBuilder_UpdateParam0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UpdateBuilder.UpdateParam updateBuilder_UpdateParam0 = new UpdateBuilder.UpdateParam("", "");
      Object object0 = new Object();
      boolean boolean0 = updateBuilder_UpdateParam0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = queryCreator0.update((String) null);
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = updateBuilder0.where();
      // Undeclared exception!
      try { 
        updateBuilder_UpdateBuilderCondition0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The update must have a WHERE condition
         //
         verifyException("io.github.josevjunior.simplejdbc.UpdateBuilder$UpdateBuilderCondition", e);
      }
  }
}
