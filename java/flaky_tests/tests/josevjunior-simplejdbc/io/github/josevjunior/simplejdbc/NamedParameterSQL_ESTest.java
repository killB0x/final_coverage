/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:45:19 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.NamedParameterSQL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedParameterSQL_ESTest extends NamedParameterSQL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("O<u}T)=u\"18MTWRX!");
      assertEquals("O<u}T)=u\"18MTWRX!", namedParameterSQL0.getParsedQuery());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("h@/?`S[lz4M%=/Yxw");
      String string0 = namedParameterSQL0.getParsedQuery();
      assertEquals("h@/?`S[lz4M%=/Yxw", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        NamedParameterSQL.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterSQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("lM=S:sJu");
      assertEquals("lM=S?", namedParameterSQL0.getParsedQuery());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("E]-{S::SC lPIUz");
      assertEquals("E]-{S:? lPIUz", namedParameterSQL0.getParsedQuery());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("[JL(;`N^o')&H'nmc:");
      assertEquals("[JL(;`N^o')&H'nmc:", namedParameterSQL0.getParsedQuery());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("2MS\"gY\"Y5'De-x?c");
      assertEquals("2MS\"gY\"Y5'De-x?c", namedParameterSQL0.getParsedQuery());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("");
      int[] intArray0 = namedParameterSQL0.getParamIndex("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("");
      String string0 = namedParameterSQL0.getParsedQuery();
      assertEquals("", string0);
  }
}
