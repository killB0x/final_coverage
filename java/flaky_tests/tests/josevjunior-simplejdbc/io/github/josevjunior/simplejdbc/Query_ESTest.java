/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:40:12 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.ColumnValueMapper;
import io.github.josevjunior.simplejdbc.NamedParameterSQL;
import io.github.josevjunior.simplejdbc.Query;
import io.github.josevjunior.simplejdbc.QueryCreator;
import io.github.josevjunior.simplejdbc.RowMapper;
import io.github.josevjunior.simplejdbc.ScrollableResult;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import javax.sql.DataSource;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Query_ESTest extends Query_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Query<Object> query0 = queryCreator0.create("mmG@0y", (RowMapper<Object>) columnValueMapper0);
      query0.clearParameters();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object object0 = new Object();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(rowSetMetaDataImpl0, object0, object0).when(resultSet0).getObject(anyInt());
      doReturn(true, true, true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Query<Object> query0 = queryCreator0.create("The column cannot be converter to char becouse contains more than one digit", (RowMapper<Object>) columnValueMapper0);
      List<Object> list0 = query0.getResultList();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      doReturn(1746).when(preparedStatement0).getUpdateCount();
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Object> query0 = queryCreator0.create("mmG@0y", (RowMapper<Object>) columnValueMapper0);
      int int0 = query0.executeUpdate();
      assertEquals(1746, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      doReturn((-1310)).when(preparedStatement0).getUpdateCount();
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Object> query0 = queryCreator0.create("nD\"d3A/", (RowMapper<Object>) columnValueMapper0);
      int int0 = query0.executeUpdate();
      assertEquals((-1310), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = new Query<Date>((NamedParameterSQL) null, (PreparedStatement) null, queryCreator0, columnValueMapper0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        query0.setParameter("7[4tb\u0002WNN#", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Query<Object> query0 = queryCreator0.create("V=", (RowMapper<Object>) columnValueMapper0);
      List<Object> list0 = query0.getResultList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("io.github.josevjunior.simplejdbc.JdbcException");
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = new Query<Date>(namedParameterSQL0, (PreparedStatement) null, (QueryCreator) null, columnValueMapper0);
      // Undeclared exception!
      try { 
        query0.executeUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Query<Object> query0 = queryCreator0.create("", (RowMapper<Object>) null);
      // Undeclared exception!
      try { 
        query0.getResultList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Query<Object> query0 = queryCreator0.create("C1", (RowMapper<Object>) null);
      List<Object> list0 = query0.getResultList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Query<Object> query0 = queryCreator0.create("C1", (RowMapper<Object>) null);
      // Undeclared exception!
      try { 
        query0.getFirstResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Query<Object> query0 = queryCreator0.create("C1", (RowMapper<Object>) null);
      Optional<Object> optional0 = query0.getFirstResult();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(preparedStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Object> query0 = queryCreator0.create("QA0.F{V|'~CF<_D", (RowMapper<Object>) null);
      // Undeclared exception!
      try { 
        query0.executeUpdate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: The query is not a DML statement
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      doReturn(0).when(preparedStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Object> query0 = queryCreator0.create("QA0.F{V|'~CF<_D", (RowMapper<Object>) null);
      int int0 = query0.executeUpdate();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Class<Date> class0 = Date.class;
      Query<Date> query0 = queryCreator0.create("B)SFNl>b_", class0);
      Query<Date> query1 = query0.setParameter(1, (Object) queryCreator0);
      assertSame(query0, query1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = queryCreator0.create("", (RowMapper<Date>) columnValueMapper0);
      MockDate mockDate0 = new MockDate();
      Query<Date> query1 = query0.setParameter(0, (Object) mockDate0);
      assertSame(query0, query1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Date> query0 = queryCreator0.create("", (RowMapper<Date>) null);
      Timestamp timestamp0 = new Timestamp(1);
      // Undeclared exception!
      try { 
        query0.setParameter(1, (Object) timestamp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Class<Date> class0 = Date.class;
      Query<Date> query0 = queryCreator0.create("QA0.F{V|'~CF<_D", class0);
      Query<Date> query1 = query0.setParameter(0, (Object) "QA0.F{V|'~CF<_D");
      assertSame(query0, query1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Query<Date> query0 = queryCreator0.create("", (RowMapper<Date>) null);
      Query<Date> query1 = query0.setParameter((-2994), (Object) null);
      assertSame(query1, query0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("Jn!Wc2");
      Query<Object> query0 = new Query<Object>(namedParameterSQL0, (PreparedStatement) null, (QueryCreator) null, (RowMapper<Object>) null);
      // Undeclared exception!
      try { 
        query0.setParameter(">QeD", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter '>QeD' not found
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = queryCreator0.create("[I`Z`E:*i", (RowMapper<Date>) columnValueMapper0);
      ScrollableResult<Date> scrollableResult0 = query0.getScrollableResult();
      assertNotNull(scrollableResult0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("io.github.josevjunior.simplejdbc.JdbcException");
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = new Query<Date>(namedParameterSQL0, (PreparedStatement) null, (QueryCreator) null, columnValueMapper0);
      // Undeclared exception!
      try { 
        query0.getScrollableResult();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      ColumnValueMapper<Object> columnValueMapper0 = new ColumnValueMapper<Object>();
      Query<Object> query0 = queryCreator0.create("", (RowMapper<Object>) columnValueMapper0);
      PreparedStatement preparedStatement0 = query0.getNativeStatement();
      assertNull(preparedStatement0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamedParameterSQL namedParameterSQL0 = NamedParameterSQL.parse("io.github.josevjunior.simplejdbc.JdbcException");
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      Query<Date> query0 = new Query<Date>(namedParameterSQL0, (PreparedStatement) null, (QueryCreator) null, columnValueMapper0);
      // Undeclared exception!
      try { 
        query0.clearParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }
}
