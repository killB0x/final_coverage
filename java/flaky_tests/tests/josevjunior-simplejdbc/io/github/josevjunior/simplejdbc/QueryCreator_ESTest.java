/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:47:57 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.ColumnValueMapper;
import io.github.josevjunior.simplejdbc.InsertBuilder;
import io.github.josevjunior.simplejdbc.Query;
import io.github.josevjunior.simplejdbc.QueryCreator;
import io.github.josevjunior.simplejdbc.RowMapper;
import io.github.josevjunior.simplejdbc.RowMapperInjector;
import io.github.josevjunior.simplejdbc.UpdateBuilder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Date;
import java.util.HashMap;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryCreator_ESTest extends QueryCreator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      RowMapperInjector<Date> rowMapperInjector0 = (RowMapperInjector<Date>) mock(RowMapperInjector.class, new ViolatedAssumptionAnswer());
      doReturn((RowMapper) null).when(rowMapperInjector0).inject(any(java.lang.Class.class));
      QueryCreator.setDefaultMapperInjector(rowMapperInjector0);
      Class<Date> class0 = Date.class;
      QueryCreator.setDefaultTypeMapper(class0, (RowMapper) null);
      // Undeclared exception!
      try { 
        queryCreator0.create((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterSQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(preparedStatement0).toString();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      queryCreator0.create("");
      queryCreator0.closeAll();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Connection connection0 = queryCreator0.getNativeConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      // Undeclared exception!
      try { 
        queryCreator0.rollback();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.QueryCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      ColumnValueMapper<Date> columnValueMapper0 = new ColumnValueMapper<Date>();
      // Undeclared exception!
      try { 
        queryCreator0.create("io.github.josevjunior.simplejdbc.Query", (RowMapper<Date>) columnValueMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.QueryCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      // Undeclared exception!
      try { 
        queryCreator0.create("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.QueryCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      // Undeclared exception!
      try { 
        queryCreator0.commit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.QueryCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QueryCreator queryCreator0 = null;
      try {
        queryCreator0 = new QueryCreator((DataSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.QueryCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QueryCreator queryCreator0 = null;
      try {
        queryCreator0 = new QueryCreator((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Connection should not be null!
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("#VLen").when(preparedStatement0).toString();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Query<HashMap<Date, Date>> query0 = queryCreator0.create("`>=Jf1X*^", (RowMapper<HashMap<Date, Date>>) null);
      assertNotNull(query0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      queryCreator0.create("");
      queryCreator0.disposeResources();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QueryCreator.setDefaultMapperInjector((RowMapperInjector) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      Connection connection1 = queryCreator0.getNativeConnection();
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        queryCreator0.create((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterSQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      queryCreator0.commit();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      queryCreator0.rollback();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      UpdateBuilder updateBuilder0 = queryCreator0.update("l~b");
      assertEquals("l~b", updateBuilder0.getTableName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = queryCreator0.insert("l~b");
      assertEquals("l~b", insertBuilder0.getTableName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      queryCreator0.close();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Date> class0 = Date.class;
      RowMapper rowMapper0 = QueryCreator.getDefaultMapper(class0);
      QueryCreator.setDefaultTypeMapper(class0, rowMapper0);
  }
}
