/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:46:48 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.InsertBuilder;
import io.github.josevjunior.simplejdbc.QueryCreator;
import io.github.josevjunior.simplejdbc.SQLStatementBuilder;
import io.github.josevjunior.simplejdbc.UpdateBuilder;
import java.sql.Connection;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SQLStatementBuilder_ESTest extends SQLStatementBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SQLStatementBuilder sQLStatementBuilder0 = new SQLStatementBuilder();
      // Undeclared exception!
      try { 
        sQLStatementBuilder0.createUpdate((UpdateBuilder.UpdateBuilderCondition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.SQLStatementBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLStatementBuilder sQLStatementBuilder0 = new SQLStatementBuilder();
      // Undeclared exception!
      try { 
        sQLStatementBuilder0.createInsert((InsertBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.SQLStatementBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLStatementBuilder sQLStatementBuilder0 = new SQLStatementBuilder();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      Object object0 = new Object();
      InsertBuilder insertBuilder0 = queryCreator0.insert("6@1p=Vqr%$D:P'eo");
      InsertBuilder insertBuilder1 = insertBuilder0.col("mw`wQD+HC", sQLStatementBuilder0);
      insertBuilder0.col((String) null, object0);
      StringBuilder stringBuilder0 = sQLStatementBuilder0.createInsert(insertBuilder1);
      assertNotNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SQLStatementBuilder sQLStatementBuilder0 = new SQLStatementBuilder();
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      UpdateBuilder updateBuilder0 = new UpdateBuilder(queryCreator0, "~w+\"c+tIqn{p");
      Object object0 = new Object();
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = new UpdateBuilder.UpdateBuilderCondition(updateBuilder0);
      updateBuilder_UpdateBuilderCondition0.col("INSERT INTO ", "~w+\"c+tIqn{p");
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition1 = updateBuilder_UpdateBuilderCondition0.col("|ej", object0);
      StringBuilder stringBuilder0 = sQLStatementBuilder0.createUpdate(updateBuilder_UpdateBuilderCondition1);
      assertEquals("UPDATE ~w+\"c+tIqn{p SET  WHERE INSERT INTO  = :V$_INSERT INTO  AND |ej = :V$_|ej", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SQLStatementBuilder sQLStatementBuilder0 = new SQLStatementBuilder();
      UpdateBuilder updateBuilder0 = new UpdateBuilder((QueryCreator) null, "The update must have a WHERE condition");
      UpdateBuilder updateBuilder1 = updateBuilder0.set("The update must have a WHERE condition", sQLStatementBuilder0);
      updateBuilder1.set("", updateBuilder0);
      UpdateBuilder.UpdateBuilderCondition updateBuilder_UpdateBuilderCondition0 = updateBuilder1.where();
      StringBuilder stringBuilder0 = sQLStatementBuilder0.createUpdate(updateBuilder_UpdateBuilderCondition0);
      assertEquals("UPDATE The update must have a WHERE condition SET The update must have a WHERE condition = :K$_The update must have a WHERE condition,  = :K$_ WHERE ", stringBuilder0.toString());
  }
}
