/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:52:54 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.InsertBuilder;
import io.github.josevjunior.simplejdbc.QueryCreator;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Map;
import javax.sql.DataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InsertBuilder_ESTest extends InsertBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      doReturn(0).when(preparedStatement0).getUpdateCount();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = queryCreator0.insert((String) null);
      insertBuilder0.execute();
      assertNull(insertBuilder0.getTableName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      InsertBuilder insertBuilder0 = new InsertBuilder(queryCreator0, "@\"biW");
      String string0 = insertBuilder0.getTableName();
      assertEquals("@\"biW", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(dataSource0).getConnection();
      QueryCreator queryCreator0 = new QueryCreator(dataSource0);
      InsertBuilder insertBuilder0 = new InsertBuilder(queryCreator0, "");
      String string0 = insertBuilder0.getTableName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = new InsertBuilder(queryCreator0, "+QO+/]p(");
      Object object0 = new Object();
      insertBuilder0.col((String) null, object0);
      Map<String, Object> map0 = insertBuilder0.getColumnsAndValues();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = new InsertBuilder(queryCreator0, "+QO+/]p(");
      Object object0 = new Object();
      insertBuilder0.col((String) null, object0);
      // Undeclared exception!
      try { 
        insertBuilder0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Parameter 'null' not found
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = queryCreator0.insert((String) null);
      String string0 = insertBuilder0.getTableName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InsertBuilder insertBuilder0 = new InsertBuilder((QueryCreator) null, "X=I\"?K%4");
      Map<String, Object> map0 = insertBuilder0.getColumnsAndValues();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      QueryCreator queryCreator0 = new QueryCreator(connection0);
      InsertBuilder insertBuilder0 = queryCreator0.insert("");
      // Undeclared exception!
      try { 
        insertBuilder0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.Query", e);
      }
  }
}
