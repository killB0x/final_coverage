/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 21:43:14 GMT 2022
 */

package io.github.josevjunior.simplejdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.josevjunior.simplejdbc.NamedParameterStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NamedParameterStatement_ESTest extends NamedParameterStatement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null, (ResultSet) null).when(preparedStatement0).executeQuery();
      doReturn((-14), (-14), (-14), (-14), 1000).when(preparedStatement0).getMaxRows();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "X,~<Wdz2=H1d'", (-14));
      namedParameterStatement0.executeQuery();
      namedParameterStatement0.executeQuery();
      namedParameterStatement0.executeQuery();
      assertEquals((-14), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "w>dnT+zyE\"#p", 142);
      // Undeclared exception!
      try { 
        namedParameterStatement0.setString("w>dnT+zyE\"#p", "BvuJ}'b3M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: w>dnT+zyE\"#p
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "$_tzpw~om)NkQ(tR:", (-1));
      namedParameterStatement0.close();
      assertEquals((-1), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", (-1));
      namedParameterStatement0.addBatch();
      assertEquals((-1), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, int[]> hashMap0 = new HashMap<String, int[]>();
      String string0 = NamedParameterStatement.parse("", hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "");
      String string0 = namedParameterStatement0.getQuery();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 0);
      Integer integer0 = namedParameterStatement0.getOptions();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 1);
      Integer integer0 = namedParameterStatement0.getOptions();
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "O", (-1));
      Integer integer0 = namedParameterStatement0.getOptions();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "w>dnT+zyE\"#p", 142);
      namedParameterStatement0.executeUpdate();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(1163).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "w>dnT+zyE\"#p", 142);
      namedParameterStatement0.executeUpdate();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-1236)).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "w>dnT+zyE\"#p", 142);
      namedParameterStatement0.executeUpdate();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      doReturn((-1011), 65).when(preparedStatement0).getMaxRows();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "}FF`ykPVgtQuy?n8");
      ResultSet resultSet1 = namedParameterStatement0.executeQuery();
      assertSame(resultSet1, resultSet0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", (-1043));
      namedParameterStatement0.executeBatch();
      assertEquals((-1043), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", (-1043));
      namedParameterStatement0.executeBatch();
      assertEquals((-1043), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(preparedStatement0).executeBatch();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", (-1043));
      namedParameterStatement0.executeBatch();
      assertEquals((-1043), (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(preparedStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 142);
      namedParameterStatement0.execute();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("").when(preparedStatement0).toString();
      doReturn(connection0).when(preparedStatement0).getConnection();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection1, "iDC@2 +lVfX1.z", 109);
      namedParameterStatement0.clonePure("");
      assertEquals(109, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn("Y'KJIH#a").when(preparedStatement0).toString();
      doReturn(connection0).when(preparedStatement0).getConnection();
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection1).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection1, "$_tzpw~om)NkQ(tR:", 23);
      namedParameterStatement0.clonePure();
      assertEquals(23, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "I");
      // Undeclared exception!
      try { 
        namedParameterStatement0.setTimestamp("I", (Timestamp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: I
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "io.github.josevjunior.simplejdbc.NamedParameterStatement");
      // Undeclared exception!
      try { 
        namedParameterStatement0.setObject("io.github.josevjunior.simplejdbc.NamedParameterStatement", (Object) "io.github.josevjunior.simplejdbc.NamedParameterStatement", 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: io.github.josevjunior.simplejdbc.NamedParameterStatement
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "fUj|LpS,");
      // Undeclared exception!
      try { 
        namedParameterStatement0.setObject("fUj|LpS,", (Object) "fUj|LpS,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: fUj|LpS,
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 1);
      // Undeclared exception!
      try { 
        namedParameterStatement0.setLong("", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: 
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "io.github.josevjunior.simplejdbc.NamedParameterStatement");
      // Undeclared exception!
      try { 
        namedParameterStatement0.executeQuery();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "");
      // Undeclared exception!
      try { 
        namedParameterStatement0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NamedParameterStatement namedParameterStatement0 = null;
      try {
        namedParameterStatement0 = new NamedParameterStatement((Connection) null, "{ew%G%:", (-859));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 63);
      // Undeclared exception!
      try { 
        namedParameterStatement0.clonePure("qL0Z<D%b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "m$%K6#h7gfl>", 15);
      namedParameterStatement0.getQuery();
      assertEquals(15, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "1wOp@l\"H9: |sU]9", 20);
      namedParameterStatement0.getStatement();
      assertEquals(20, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null, (ResultSet) null).when(preparedStatement0).executeQuery();
      doReturn(1, 1, 3948).when(preparedStatement0).getMaxRows();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 142);
      namedParameterStatement0.executeQuery();
      namedParameterStatement0.executeQuery();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 142);
      // Undeclared exception!
      try { 
        namedParameterStatement0.setInt("", 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter not found: 
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NamedParameterStatement namedParameterStatement0 = null;
      try {
        namedParameterStatement0 = new NamedParameterStatement((Connection) null, "A:yb&%g&!q:q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NamedParameterStatement namedParameterStatement0 = null;
      try {
        namedParameterStatement0 = new NamedParameterStatement((Connection) null, "Parameter not found: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        NamedParameterStatement.parse("WON!:dV$", (Map<String, int[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = NamedParameterStatement.parse("^~P\"^\"s", (Map<String, int[]>) null);
      assertEquals("^~P\"^\"s", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "'I';w0");
      assertNull(namedParameterStatement0.getOptions());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NamedParameterStatement namedParameterStatement0 = null;
      try {
        namedParameterStatement0 = new NamedParameterStatement((Connection) null, "h#0X'F1j%Gfg)N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "io.github.josevjunior.simplejdbc.NamedParameterStatement");
      // Undeclared exception!
      try { 
        namedParameterStatement0.executeBatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(preparedStatement0).toString();
      doReturn((Connection) null).when(preparedStatement0).getConnection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "O", (-1));
      // Undeclared exception!
      try { 
        namedParameterStatement0.clonePure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "b*");
      // Undeclared exception!
      try { 
        namedParameterStatement0.clonePure("b*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "");
      // Undeclared exception!
      try { 
        namedParameterStatement0.addBatch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "");
      // Undeclared exception!
      try { 
        namedParameterStatement0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "{ew%G%:");
      Integer integer0 = namedParameterStatement0.getOptions();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "fUj|LpS,");
      // Undeclared exception!
      try { 
        namedParameterStatement0.executeUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.josevjunior.simplejdbc.NamedParameterStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(preparedStatement0).execute();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString() , anyInt());
      NamedParameterStatement namedParameterStatement0 = new NamedParameterStatement(connection0, "", 142);
      namedParameterStatement0.execute();
      assertEquals(142, (int)namedParameterStatement0.getOptions());
  }
}
