/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 11 01:15:27 GMT 2022
 */

package com.irurueta.navigation.inertial.calibration.intervals.thresholdfactor;

import org.junit.Test;
import static org.junit.Assert.*;
import com.irurueta.navigation.inertial.calibration.intervals.thresholdfactor.DefaultAccelerometerAndGyroscopeMseRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultAccelerometerAndGyroscopeMseRule_ESTest extends DefaultAccelerometerAndGyroscopeMseRule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultAccelerometerAndGyroscopeMseRule defaultAccelerometerAndGyroscopeMseRule0 = new DefaultAccelerometerAndGyroscopeMseRule();
      double double0 = defaultAccelerometerAndGyroscopeMseRule0.evaluate(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultAccelerometerAndGyroscopeMseRule defaultAccelerometerAndGyroscopeMseRule0 = new DefaultAccelerometerAndGyroscopeMseRule();
      double double0 = defaultAccelerometerAndGyroscopeMseRule0.evaluate(1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultAccelerometerAndGyroscopeMseRule defaultAccelerometerAndGyroscopeMseRule0 = new DefaultAccelerometerAndGyroscopeMseRule();
      double double0 = defaultAccelerometerAndGyroscopeMseRule0.evaluate((-260.3018508), (-1.0));
      assertEquals((-261.3018508), double0, 0.01);
  }
}
