/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:12:10 GMT 2022
 */

package net.jhorstmann.packedtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import net.jhorstmann.packedtime.PackedLocalDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PackedLocalDateTime_ESTest extends PackedLocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      LocalDateTime localDateTime1 = packedLocalDateTime0.toLocalDateTime();
      assertTrue(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.parse("2014-02-14T20:21:21.320");
      assertEquals(320, packedLocalDateTime0.getMilliSecond());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getYear();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf((-1L));
      int int0 = packedLocalDateTime0.getYear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 171);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getMonth();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf(1L);
      int int0 = packedLocalDateTime0.getMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.system(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getMilliSecond();
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1023L, 3094, zoneOffset0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getDay();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 171);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getNano();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDateTime.parse("0K");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // not a digit at index 1
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDateTime.fromLocalDateTime((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.PackedLocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf(1456L);
      String string0 = packedLocalDateTime0.toString();
      assertEquals("0000-00-00T00:00", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getMilliSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getHour();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf(1456L);
      int int0 = packedLocalDateTime0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf(1456L);
      int int0 = packedLocalDateTime0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDateTime.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf(1L);
      int int0 = packedLocalDateTime0.getDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDateTime.toLocalDateTime((-1973L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 15
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getNano();
      assertEquals(320000000, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.valueOf((-1367L));
      // Undeclared exception!
      try { 
        packedLocalDateTime0.toLocalDateTime();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 15
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      PackedLocalDateTime packedLocalDateTime0 = PackedLocalDateTime.fromLocalDateTime(localDateTime0);
      int int0 = packedLocalDateTime0.getSecond();
      assertEquals(21, int0);
  }
}
