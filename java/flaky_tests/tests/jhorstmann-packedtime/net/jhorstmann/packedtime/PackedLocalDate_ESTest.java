/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:11:28 GMT 2022
 */

package net.jhorstmann.packedtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeParseException;
import net.jhorstmann.packedtime.PackedLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PackedLocalDate_ESTest extends PackedLocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      LocalDate localDate1 = packedLocalDate0.toLocalDate();
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.parse("0039-01-01");
      assertEquals(1, packedLocalDate0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(0L);
      int int0 = packedLocalDate0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      int int0 = packedLocalDate0.getYear();
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      int int0 = packedLocalDate0.getMonth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(63L);
      int int0 = packedLocalDate0.getDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(0, 167);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      assertEquals(0, packedLocalDate0.getYear());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = Month.APRIL;
      LocalDate localDate0 = MockLocalDate.of((-1771), month0, 1);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      assertEquals((-1771), packedLocalDate0.getYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDate.parse("0#jF*}+J5T*@|");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // not a digit at index 1
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDate.fromLocalDate((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.PackedLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDate.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalDate.toLocalDate(0L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      int int0 = packedLocalDate0.getDay();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf((-2458L));
      int int0 = packedLocalDate0.getYear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(1004L);
      int int0 = packedLocalDate0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(0L);
      String string0 = packedLocalDate0.toString();
      assertEquals("0000-00-00", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(1L);
      // Undeclared exception!
      try { 
        packedLocalDate0.toLocalDate();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }
}
