/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:08:08 GMT 2022
 */

package net.jhorstmann.packedtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import net.jhorstmann.packedtime.AbstractPackedDateTime;
import net.jhorstmann.packedtime.PackedLocalDate;
import net.jhorstmann.packedtime.PackedLocalTime;
import net.jhorstmann.packedtime.PackedOffsetDateTime;
import net.jhorstmann.packedtime.PackedOffsetTime;
import net.jhorstmann.packedtime.PackedZonedDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPackedDateTime_ESTest extends AbstractPackedDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(936);
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime1 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      packedOffsetTime1.equals(packedOffsetTime0);
      assertEquals(0, packedOffsetTime1.getOffsetSecond());
      assertEquals(21, packedOffsetTime1.getMinute());
      assertEquals(21, packedOffsetTime1.getSecond());
      assertEquals(20, packedOffsetTime1.getHour());
      assertEquals(320000000, packedOffsetTime1.getNanos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(486L);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds(':', charArray0, ':');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 58 out of bounds for length 8
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds(835, charArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(15L);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds(1000000, charArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(2391);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds(0, charArray0, 314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 314 out of bounds for length 3
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(31L);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      String string0 = packedLocalDate0.toString();
      assertEquals("1970-02-01", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendDate(charArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 12 out of bounds for length 5
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractPackedDateTime.encodeWithOffsetSeconds((-1910), 1686, 1686, 0, (-1910), (-1910), (-1), (-1));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Time zone offset with second precision is not supported: -1
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = AbstractPackedDateTime.encode(9999, (-9999), 2014, (-9999), (-501), (-9999), 2014, 9999);
      assertEquals((-39791352049L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = AbstractPackedDateTime.encode((-9999), 936, 1969, 2397, 2397, 1969, 1361, (-9999));
      assertEquals((-9999L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PackedZonedDateTime packedZonedDateTime0 = PackedZonedDateTime.valueOf(60L);
      long long0 = packedZonedDateTime0.getValue();
      assertEquals(60L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PackedOffsetDateTime packedOffsetDateTime0 = PackedOffsetDateTime.valueOf((-2705));
      long long0 = packedOffsetDateTime0.getValue();
      assertEquals((-2705L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(2397074968543240L);
      int int0 = packedOffsetTime0.extractYear();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PackedOffsetDateTime packedOffsetDateTime0 = PackedOffsetDateTime.valueOf((-2705));
      int int0 = packedOffsetDateTime0.extractYear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PackedZonedDateTime packedZonedDateTime0 = PackedZonedDateTime.valueOf((-1221L));
      int int0 = packedZonedDateTime0.extractSecond();
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractOffsetSecond();
      assertEquals(0, int0);
      assertEquals(20, packedOffsetTime0.getHour());
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(320, packedOffsetTime0.getMilliSecond());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.of(localTime0, zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractOffsetSecond();
      assertEquals(320000000, packedOffsetTime0.getNanos());
      assertEquals(20, packedOffsetTime0.getHour());
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(64800, int0);
      assertEquals(21, packedOffsetTime0.getSecond());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractOffsetSecond();
      assertEquals((-64800), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractOffsetMinute();
      assertEquals(20, packedOffsetTime0.getHour());
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(320, packedOffsetTime0.getMilliSecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(5214);
      int int0 = packedOffsetTime0.extractOffsetMinute();
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractOffsetMinute();
      assertEquals((-1080), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractOffsetId();
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(0, int0);
      assertEquals(2, packedOffsetTime0.getHour());
      assertEquals(320000000, packedOffsetTime0.getNanos());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PackedZonedDateTime packedZonedDateTime0 = PackedZonedDateTime.valueOf((-1L));
      int int0 = packedZonedDateTime0.extractOffsetId();
      assertEquals(4095, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractNano();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf((-506L));
      int int0 = packedOffsetTime0.extractMonth();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = PackedLocalTime.toLocalTime(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.of(localTime0, zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractMinute();
      assertEquals(64800, packedOffsetTime0.getOffsetSecond());
      assertEquals(0, packedOffsetTime0.getHour());
      assertEquals(0, packedOffsetTime0.getMilliSecond());
      assertEquals(0, packedOffsetTime0.getSecond());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractMinute();
      assertEquals(0, packedOffsetTime0.getOffsetSecond());
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(20, packedOffsetTime0.getHour());
      assertEquals(21, int0);
      assertEquals(320, packedOffsetTime0.getMilliSecond());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      int int0 = packedOffsetTime0.extractMilli();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.of(localTime0, zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractMilli();
      assertEquals(320, int0);
      assertEquals(20, packedOffsetTime0.getHour());
      assertEquals(64800, packedOffsetTime0.getOffsetSecond());
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(21, packedOffsetTime0.getSecond());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.ofWeeks(2050);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      int int0 = packedLocalDate0.extractHour();
      assertEquals(2014, packedLocalDate0.getYear());
      assertEquals(0, int0);
      assertEquals(14, packedLocalDate0.getDay());
      assertEquals(2, packedLocalDate0.getMonth());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PackedOffsetDateTime packedOffsetDateTime0 = PackedOffsetDateTime.valueOf((-2705));
      int int0 = packedOffsetDateTime0.extractHour();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalTime localTime0 = PackedLocalTime.toLocalTime(6899L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.of(localTime0, zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractDay();
      assertEquals(0, int0);
      assertEquals(1, packedOffsetTime0.getMilliSecond());
      assertEquals(0, packedOffsetTime0.getSecond());
      assertEquals(0, packedOffsetTime0.getMinute());
      assertEquals(64800, packedOffsetTime0.getOffsetSecond());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PackedLocalDate packedLocalDate0 = PackedLocalDate.fromLocalDate(localDate0);
      int int0 = packedLocalDate0.extractDay();
      assertEquals(14, int0);
      assertEquals(2, packedLocalDate0.getMonth());
      assertEquals(2014, packedLocalDate0.getYear());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = AbstractPackedDateTime.encodeWithOffsetSeconds(35, 1314, 0, 1640, 0, 1000, 3795, (-1080));
      assertEquals(32432985873581094L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = AbstractPackedDateTime.encodeWithOffsetSeconds(1686, (-3416), 118, 1585, 1143, 39, 10, (-1080));
      assertEquals((-18370883047390170L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = AbstractPackedDateTime.encode(996, 996, 996, 996, 996, 996, 996, 996);
      assertEquals(288230096861397988L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(0L);
      char[] charArray0 = new char[23];
      int int0 = packedLocalDate0.appendOffsetSeconds(652, charArray0, 2);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(0L);
      char[] charArray0 = new char[8];
      int int0 = packedLocalDate0.appendOffsetMinute(22, charArray0, 1);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'\u0000', '+', '0', '0', ':', '2', '2', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PackedZonedDateTime packedZonedDateTime0 = PackedZonedDateTime.valueOf(349323920440L);
      // Undeclared exception!
      try { 
        packedZonedDateTime0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.PackedZonedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      // Undeclared exception!
      try { 
        packedOffsetTime0.appendTime((char[]) null, 145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf((-1394));
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds((-1394), (char[]) null, (-1394));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(28);
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetMinute(28, (char[]) null, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(936L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      PackedOffsetTime packedOffsetTime1 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      packedOffsetTime0.equals(packedOffsetTime1);
      assertEquals(21, packedOffsetTime1.getSecond());
      assertEquals(21, packedOffsetTime1.getMinute());
      assertEquals(320000000, packedOffsetTime1.getNanos());
      assertEquals(14, packedOffsetTime1.getHour());
      assertEquals(64800, packedOffsetTime1.getOffsetSecond());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(936L);
      boolean boolean0 = packedOffsetTime0.equals(packedOffsetTime0);
      assertTrue(boolean0);
      assertEquals(0, packedOffsetTime0.getSecond());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(1127L);
      boolean boolean0 = packedOffsetTime0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, packedOffsetTime0.getSecond());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      Object object0 = new Object();
      packedOffsetTime0.equals(object0);
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(64800, packedOffsetTime0.getOffsetSecond());
      assertEquals(14, packedOffsetTime0.getHour());
      assertEquals(320, packedOffsetTime0.getMilliSecond());
      assertEquals(21, packedOffsetTime0.getMinute());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(0L);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetSeconds((-32), charArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PackedLocalDate packedLocalDate0 = PackedLocalDate.valueOf(1200);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        packedLocalDate0.appendOffsetMinute(0, charArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(2397074968543240L);
      String string0 = packedOffsetTime0.toString();
      assertEquals("08:08:08-17:52", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(6899L);
      String string0 = packedOffsetTime0.toString();
      assertEquals("00:00:00.001+28:43", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(580);
      String string0 = packedOffsetTime0.toString();
      assertEquals("00:00-08:20", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(580);
      // Undeclared exception!
      try { 
        packedOffsetTime0.appendDate((char[]) null, 580);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractPackedDateTime.encodeWithOffsetSeconds(99, 99, 99, 99, 99, 99, 99, 99);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Time zone offset with second precision is not supported: 99
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractPackedDateTime.encode(1000011, 1000011, 1000011, 1000011, 1000011, 1000011, 1000011, 1000011);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Year is outside of allowed range -9999 to 9999: 1000011
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractPackedDateTime.encode((-32768), (-32768), (-32768), (-32768), (-32768), (-32768), (-32768), 1236);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Year is outside of allowed range -9999 to 9999: -32768
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(0L);
      long long0 = packedOffsetTime0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(2397074968543240L);
      packedOffsetTime0.hashCode();
      assertEquals(0, packedOffsetTime0.getMilliSecond());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PackedOffsetDateTime packedOffsetDateTime0 = PackedOffsetDateTime.valueOf((-1074));
      String string0 = packedOffsetDateTime0.toString();
      assertEquals("-0001-15-31T31:63:63.023+32:22", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.extractNano();
      assertEquals(64800, packedOffsetTime0.getOffsetSecond());
      assertEquals(320000000, int0);
      assertEquals(21, packedOffsetTime0.getMinute());
      assertEquals(21, packedOffsetTime0.getSecond());
      assertEquals(14, packedOffsetTime0.getHour());
  }
}
