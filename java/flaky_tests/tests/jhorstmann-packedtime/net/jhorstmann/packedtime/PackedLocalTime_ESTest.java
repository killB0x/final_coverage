/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:12:52 GMT 2022
 */

package net.jhorstmann.packedtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import net.jhorstmann.packedtime.PackedLocalTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PackedLocalTime_ESTest extends PackedLocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.parse("20:21:21.320");
      assertEquals(20, packedLocalTime0.getHour());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1038L);
      PackedLocalTime packedLocalTime0 = PackedLocalTime.fromLocalTime(localTime0);
      int int0 = packedLocalTime0.getSecond();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(0L);
      int int0 = packedLocalTime0.getNanos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(1L);
      int int0 = packedLocalTime0.getMilliSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = new PackedLocalTime(0L);
      int int0 = packedLocalTime0.getHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(1L);
      assertEquals(0, packedLocalTime0.getNanos());
      
      LocalTime localTime0 = packedLocalTime0.toLocalTime();
      PackedLocalTime packedLocalTime1 = PackedLocalTime.fromLocalTime(localTime0);
      assertFalse(packedLocalTime1.equals((Object)packedLocalTime0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      PackedLocalTime packedLocalTime0 = PackedLocalTime.fromLocalTime(localTime0);
      int int0 = packedLocalTime0.getMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalTime.toLocalTime((-1L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 31
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = new PackedLocalTime((-1L));
      // Undeclared exception!
      try { 
        packedLocalTime0.toLocalTime();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 31
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalTime.parse("wyK?JNulp%*-D");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // not a digit at index 0
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalTime.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(0L);
      int int0 = packedLocalTime0.getSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(0L);
      int int0 = packedLocalTime0.getMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.parse("00:00");
      assertEquals(0, packedLocalTime0.getMinute());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = PackedLocalTime.toLocalTime(0L);
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedLocalTime.fromLocalTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.PackedLocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf((-1L));
      int int0 = packedLocalTime0.getMilliSecond();
      assertEquals(1023, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = new PackedLocalTime((-1L));
      int int0 = packedLocalTime0.getHour();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf(0L);
      String string0 = packedLocalTime0.toString();
      assertEquals("00:00", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PackedLocalTime packedLocalTime0 = PackedLocalTime.valueOf((-1187L));
      int int0 = packedLocalTime0.getNanos();
      assertEquals(1023000000, int0);
  }
}
