/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 01:09:55 GMT 2022
 */

package net.jhorstmann.packedtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import net.jhorstmann.packedtime.PackedOffsetTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PackedOffsetTime_ESTest extends PackedOffsetTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      OffsetTime offsetTime0 = MockOffsetTime.now(clock0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      String string0 = packedOffsetTime0.toString();
      assertEquals("20:21Z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf((-1L));
      String string0 = packedOffsetTime0.toString();
      assertEquals("31:63:63.023+50:15", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      OffsetTime offsetTime1 = packedOffsetTime0.toOffsetTime();
      assertTrue(offsetTime1.equals((Object)offsetTime0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.parse("20:21:21.320Z");
      assertEquals(320, packedOffsetTime0.getMilliSecond());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getSecond();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getOffsetSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(1731L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getOffsetSecond();
      assertEquals(39060, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getNanos();
      assertEquals(320000000, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getMilliSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf(1L);
      int int0 = packedOffsetTime0.getHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedOffsetTime.toOffsetTime((-13L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset not in valid range: -18:00 to +18:00
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedOffsetTime.parse("net.jhorstmann.packedtime.DateTimeParser$Index");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // not a digit at index 0
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedOffsetTime.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedOffsetTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.DateTimeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1451));
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        PackedOffsetTime.fromOffsetTime(offsetTime0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Time zone offset with second precision is not supported: -1451
         //
         verifyException("net.jhorstmann.packedtime.AbstractPackedDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackedOffsetTime.fromOffsetTime((OffsetTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.jhorstmann.packedtime.PackedOffsetTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      String string0 = packedOffsetTime0.toString();
      assertEquals("00:00-18:00", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(606L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      OffsetTime offsetTime0 = MockOffsetTime.now((ZoneId) zoneOffset0);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getMilliSecond();
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OffsetTime offsetTime0 = MockOffsetTime.now();
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getHour();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getNanos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OffsetTime offsetTime0 = PackedOffsetTime.toOffsetTime(0L);
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.fromOffsetTime(offsetTime0);
      int int0 = packedOffsetTime0.getOffsetSecond();
      assertEquals((-64800), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.parse("00:00-18:00");
      assertEquals(0, packedOffsetTime0.getNanos());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PackedOffsetTime packedOffsetTime0 = PackedOffsetTime.valueOf((-807L));
      // Undeclared exception!
      try { 
        packedOffsetTime0.toOffsetTime();
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset not in valid range: -18:00 to +18:00
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }
}
