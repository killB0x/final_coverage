/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 21 04:31:05 GMT 2022
 */

package com.brightcove.castlabs.client.response;

import org.junit.Test;
import static org.junit.Assert.*;
import com.brightcove.castlabs.client.response.IngestAssetKeyError;
import com.brightcove.castlabs.client.response.IngestCENCResponse;
import com.brightcove.castlabs.client.response.IngestKeysResponse;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IngestKeysResponse_ESTest extends IngestKeysResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      ingestKeysResponse0.setKeyRotationId("pmAv'\"N#%WD3e%ECjRh");
      String string0 = ingestKeysResponse0.getKeyRotationId();
      assertEquals("pmAv'\"N#%WD3e%ECjRh", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      ingestKeysResponse0.setKeyId("<ARBe");
      String string0 = ingestKeysResponse0.getKeyId();
      assertEquals("<ARBe", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      ingestKeysResponse0.setKeyId("");
      String string0 = ingestKeysResponse0.getKeyId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      LinkedList<IngestAssetKeyError> linkedList0 = new LinkedList<IngestAssetKeyError>();
      IngestAssetKeyError ingestAssetKeyError0 = IngestAssetKeyError.MISSING_KEY;
      linkedList0.add(ingestAssetKeyError0);
      ingestKeysResponse0.setErrors(linkedList0);
      List<IngestAssetKeyError> list0 = ingestKeysResponse0.getErrors();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      IngestCENCResponse ingestCENCResponse0 = new IngestCENCResponse();
      ingestKeysResponse0.setCencResponse(ingestCENCResponse0);
      IngestCENCResponse ingestCENCResponse1 = ingestKeysResponse0.getCencResponse();
      assertSame(ingestCENCResponse1, ingestCENCResponse0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      String string0 = ingestKeysResponse0.getKeyId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      String string0 = ingestKeysResponse0.getKeyRotationId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      ingestKeysResponse0.setErrors((List<IngestAssetKeyError>) null);
      List<IngestAssetKeyError> list0 = ingestKeysResponse0.getErrors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      String string0 = ingestKeysResponse0.toString();
      assertEquals("IngestKeysResponse [keyId=null, keyRotationId=null, cencResponse=null, errors=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      List<IngestAssetKeyError> list0 = ingestKeysResponse0.getErrors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      IngestCENCResponse ingestCENCResponse0 = ingestKeysResponse0.getCencResponse();
      assertNull(ingestCENCResponse0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IngestKeysResponse ingestKeysResponse0 = new IngestKeysResponse();
      ingestKeysResponse0.setKeyRotationId("");
      String string0 = ingestKeysResponse0.getKeyRotationId();
      assertEquals("", string0);
  }
}
