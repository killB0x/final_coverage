/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:27:04 GMT 2022
 */

package net.tuis.ubench;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import net.tuis.ubench.Task;
import net.tuis.ubench.TaskRunner;
import net.tuis.ubench.UStats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskRunner_ESTest extends TaskRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TaskRunner taskRunner0 = null;
      try {
        taskRunner0 = new TaskRunner("(A;_9[N", (Task) null, (-20), (-20), (-20), (-20), (-20));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -20
         //
         verifyException("net.tuis.ubench.TaskRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TaskRunner taskRunner0 = new TaskRunner((String) null, (Task) null, 0, 0, 1428, 0.0, 0);
      // Undeclared exception!
      try { 
        taskRunner0.invoke();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.tuis.ubench.TaskRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TaskRunner taskRunner0 = new TaskRunner("(A;_9[N", (Task) null, 1, 1, 1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TaskRunner taskRunner0 = new TaskRunner("-!B", (Task) null, (-1034), 2, 1505, (-1.0), (-1034));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TaskRunner taskRunner0 = new TaskRunner((String) null, (Task) null, 0, 0, 1428, 0.0, 0);
      UStats uStats0 = taskRunner0.collect((String) null);
      assertEquals(TimeUnit.NANOSECONDS, uStats0.getGoodUnit());
  }
}
