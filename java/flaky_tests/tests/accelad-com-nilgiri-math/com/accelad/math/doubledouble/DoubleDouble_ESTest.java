/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:37:57 GMT 2022
 */

package com.accelad.math.doubledouble;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.CacheMap;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.doubledouble.DoubleDoubleCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDouble_ESTest extends DoubleDouble_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      DoubleDouble doubleDouble2 = doubleDouble0.trunc();
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble4 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.0);
      doubleDouble2.subtract(doubleDouble4);
      doubleDouble4.ne(doubleDouble3);
      doubleDouble3.cisia(doubleDouble2, doubleDouble1, doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isZero();
      doubleDouble0.toString();
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble0.abs();
      DoubleDouble.fromString("0");
      doubleDouble1.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = doubleDouble0.NaN.trunc();
      doubleDouble1.ZERO.si();
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble2);
      doubleDouble2.ONE.sin();
      doubleDouble3.cos();
      DoubleDouble doubleDouble4 = doubleDouble2.BernoulliA(0);
      // Undeclared exception!
      try { 
        doubleDouble4.compareTo((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.PI;
      DoubleDouble doubleDouble2 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble(2.4492935982947064E-16);
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble(0.0, 0.0);
      doubleDouble2.subtract(doubleDouble4);
      doubleDouble2.ne(doubleDouble3);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("com.accelad.math.doubledouble.DoubleMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.doubledouble.DoubleMap
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(2.718281828459045, 4.903750651799258E-13);
      DoubleDouble doubleDouble1 = DoubleDouble.MINUS_ONE;
      doubleDouble0.HALF.subtract(doubleDouble1);
      doubleDouble0.log();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble1 = doubleDouble0.si();
      DoubleDouble doubleDouble2 = DoubleDouble.ONE;
      doubleDouble1.isZero();
      DoubleDouble doubleDouble3 = DoubleDouble.PI;
      DoubleDouble doubleDouble4 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble5 = doubleDouble3.add(doubleDouble4);
      DoubleDouble doubleDouble6 = DoubleDouble.fromOneDouble(Double.NEGATIVE_INFINITY);
      DoubleDouble.atan2(doubleDouble5, doubleDouble6);
      doubleDouble3.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      // Undeclared exception!
      try { 
        doubleDouble1.E.pow((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      doubleDouble1.ZERO.cosh();
      DoubleDouble doubleDouble2 = DoubleDouble.NaN;
      DoubleDouble doubleDouble3 = doubleDouble2.divide(doubleDouble1);
      doubleDouble2.min(doubleDouble3);
      DoubleDouble doubleDouble4 = doubleDouble1.exp();
      doubleDouble4.isInteger();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble.fromDoubleDouble(doubleDouble1);
      doubleDouble0.ZERO.cos();
      DoubleDouble doubleDouble2 = doubleDouble1.add(doubleDouble0);
      doubleDouble0.reciprocal();
      doubleDouble0.dump();
      DoubleDouble doubleDouble3 = DoubleDouble.ZERO;
      doubleDouble1.isNaN();
      doubleDouble2.exp();
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble(1.0, 4586.240731);
      doubleDouble4.isInteger();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble1 = DoubleDouble.NaN;
      // Undeclared exception!
      try { 
        doubleDouble0.divide((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      doubleDouble0.toString();
      doubleDouble0.trunc();
      DoubleDouble doubleDouble1 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1891.28156154604);
      doubleDouble0.abs();
      DoubleDouble.fromString("0.5");
      doubleDouble1.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      doubleDouble1.rint();
      doubleDouble0.signum();
      DoubleDouble doubleDouble2 = DoubleDouble.HALF;
      doubleDouble0.doubleValue();
      DoubleDouble doubleDouble3 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble2.ONE.ceil();
      DoubleDouble doubleDouble4 = doubleDouble1.BernoulliB(0);
      doubleDouble0.abs();
      doubleDouble1.round();
      DoubleDouble doubleDouble5 = doubleDouble0.HALF.abs();
      DoubleDouble doubleDouble6 = DoubleDouble.NaN;
      doubleDouble6.negate();
      doubleDouble4.rint();
      doubleDouble0.getLowComponent();
      doubleDouble4.doubleValue();
      doubleDouble1.min(doubleDouble3);
      doubleDouble5.round();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      int int0 = 0;
      DoubleDouble doubleDouble1 = null;
      // Undeclared exception!
      try { 
        DoubleDouble.fromDoubleDouble((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.rint();
      DoubleDouble doubleDouble3 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble4 = DoubleDouble.ZERO;
      doubleDouble2.add(doubleDouble4);
      DoubleDouble doubleDouble5 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble6 = doubleDouble5.reciprocal();
      DoubleDouble doubleDouble7 = DoubleDouble.fromOneDouble((-752.147255316));
      DoubleDouble doubleDouble8 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble9 = doubleDouble7.add(doubleDouble8);
      doubleDouble6.abs();
      doubleDouble6.getHighComponent();
      doubleDouble9.isInteger();
      doubleDouble0.atan();
      doubleDouble5.compareTo(doubleDouble8);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      DoubleDouble.fromTwoDouble(1891.28156154604, 924.99266607543);
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      doubleDouble0.toString();
      DoubleDouble doubleDouble1 = DoubleDouble.fromString("0.5");
      doubleDouble1.factorial((-1));
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      doubleDouble1.getHighComponent();
      DoubleDouble doubleDouble3 = DoubleDouble.ONE;
      doubleDouble3.reciprocal();
      doubleDouble1.isInteger();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDouble doubleDouble1 = doubleDouble0.si();
      DoubleDouble doubleDouble2 = doubleDouble0.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.negate();
      doubleDouble0.cisia(doubleDouble1, doubleDouble2, doubleDouble1);
      doubleDouble3.gt(doubleDouble0);
      DoubleDouble doubleDouble4 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble5 = doubleDouble4.abs();
      doubleDouble5.dump();
      doubleDouble4.ge(doubleDouble5);
      doubleDouble0.acos();
      doubleDouble4.isInteger();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = doubleDouble0.TWO_PI.factorial(0);
      doubleDouble0.signum();
      DoubleDouble doubleDouble2 = DoubleDouble.HALF;
      doubleDouble1.doubleValue();
      DoubleDouble doubleDouble3 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble4 = doubleDouble1.ceil();
      doubleDouble3.trunc();
      doubleDouble4.trunc();
      DoubleDouble doubleDouble5 = DoubleDouble.fromTwoDouble(0, 1.0);
      doubleDouble5.abs();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.MINUS_ONE;
      doubleDouble0.compareTo(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.divide(doubleDouble0);
      doubleDouble2.divide(doubleDouble0);
      doubleDouble1.BernoulliA(0);
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      DoubleDouble.fromOneDouble((-647.309125));
      DoubleDouble doubleDouble4 = doubleDouble3.exp();
      DoubleDouble doubleDouble5 = DoubleDouble.PI;
      doubleDouble4.ONE.subtract(doubleDouble0);
      DoubleDouble doubleDouble6 = doubleDouble5.pow(0);
      DoubleDouble doubleDouble7 = DoubleDouble.E;
      doubleDouble6.trunc();
      DoubleDouble doubleDouble8 = DoubleDouble.atan2(doubleDouble4, doubleDouble4);
      doubleDouble8.tan();
      DoubleDouble doubleDouble9 = DoubleDouble.PI_2;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble2 = DoubleDouble.MINUS_ONE;
      doubleDouble0.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble0.gt(doubleDouble0);
      doubleDouble0.doubleValue();
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble.atan2(doubleDouble0, doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble(Double.NaN, 4.9689825868054855E-18);
      doubleDouble3.abs();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDouble doubleDouble1 = DoubleDouble.ZERO;
      doubleDouble1.divide(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble1.MINUS_ONE.abs();
      doubleDouble0.ge(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble2.Ci();
      DoubleDoubleCache<DoubleDouble> doubleDoubleCache0 = new DoubleDoubleCache<DoubleDouble>();
      doubleDouble3.POSITIVE_INFINITY.equals(doubleDoubleCache0);
      doubleDouble1.cosh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      doubleDouble3.divide(doubleDouble1);
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      doubleDouble3.reciprocal();
      DoubleDouble doubleDouble5 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble5.min(doubleDouble4);
      DoubleDouble doubleDouble6 = doubleDouble4.negate();
      DoubleDouble doubleDouble7 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      doubleDouble7.add(doubleDouble2);
      doubleDouble6.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      doubleDouble1.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.E;
      DoubleDouble doubleDouble3 = doubleDouble2.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>(3);
      Object object0 = new Object();
      doubleDouble0.equals(object0);
      DoubleDouble doubleDouble4 = doubleDouble3.Ci();
      DoubleDouble doubleDouble5 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble3.factorial((-741));
      DoubleDouble doubleDouble6 = DoubleDouble.HALF;
      DoubleDouble doubleDouble7 = doubleDouble4.min(doubleDouble6);
      DoubleDouble doubleDouble8 = doubleDouble3.NEGATIVE_INFINITY.subtract(doubleDouble1);
      doubleDouble8.NaN.log();
      doubleDouble3.TWO_PI.multiply(doubleDouble7);
      doubleDouble3.toString();
      doubleDouble4.atan();
      doubleDouble7.getHighComponent();
      doubleDouble1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = doubleDouble0.negate();
      DoubleDouble doubleDouble2 = DoubleDouble.MINUS_ONE;
      doubleDouble2.cisia(doubleDouble0, doubleDouble0, doubleDouble1);
      doubleDouble2.gt(doubleDouble0);
      doubleDouble0.doubleValue();
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble((-3467.0186461), (-3079.03194248));
      DoubleDouble.atan2(doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble1.add(doubleDouble2);
      doubleDouble4.abs();
      doubleDouble3.getHighComponent();
      doubleDouble4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      doubleDouble1.MINUS_ONE.acos();
      double double0 = (-1.0);
      DoubleDouble doubleDouble2 = doubleDouble0.PI_2.pow(500000);
      doubleDouble2.PI.sin();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString(" in string ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'i' at position 2 in string  in string 
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.asin();
      DoubleDouble doubleDouble3 = doubleDouble1.BernoulliA(2767);
      doubleDouble2.compareTo(doubleDouble3);
      DoubleDouble doubleDouble4 = doubleDouble3.negate();
      doubleDouble4.ZERO.add(doubleDouble3);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString(" in string ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'i' at position 2 in string  in string 
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      doubleDouble0.ge(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.si();
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble1.negate();
      doubleDouble2.sqr();
      doubleDouble1.isZero();
      DoubleDouble doubleDouble4 = doubleDouble3.max(doubleDouble2);
      DoubleDouble doubleDouble5 = doubleDouble4.MINUS_ONE.ceil();
      DoubleDouble doubleDouble6 = doubleDouble4.PI_2.log();
      DoubleDouble doubleDouble7 = doubleDouble6.TWO.log10();
      DoubleDouble doubleDouble8 = doubleDouble7.PI_2.abs();
      DoubleDouble doubleDouble9 = doubleDouble4.ceil();
      doubleDouble1.ONE.cisia(doubleDouble5, doubleDouble2, doubleDouble5);
      DoubleDouble doubleDouble10 = doubleDouble1.negate();
      DoubleDouble doubleDouble11 = doubleDouble2.BernoulliA((-408));
      doubleDouble10.ONE.divide(doubleDouble9);
      doubleDouble11.ZERO.asin();
      doubleDouble11.TWO.exp();
      DoubleDouble doubleDouble12 = doubleDouble11.multiply(doubleDouble5);
      doubleDouble3.BernoulliB((-577514855));
      DoubleDouble doubleDouble13 = doubleDouble11.rint();
      doubleDouble13.E.pow((-408));
      DoubleDouble doubleDouble14 = doubleDouble8.negate();
      doubleDouble6.gt(doubleDouble10);
      doubleDouble12.sqrt();
      doubleDouble4.negate();
      doubleDouble14.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.ONE.negate();
      DoubleDouble doubleDouble4 = doubleDouble1.trunc();
      doubleDouble3.hashCode();
      doubleDouble0.log10();
      doubleDouble4.ceil();
      // Undeclared exception!
      try { 
        doubleDouble4.toString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble5 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      doubleDouble3.reciprocal();
      doubleDouble4.doubleValue();
      DoubleDouble.fromTwoDouble((-1.0), 1.23259516440783E-32);
      DoubleDouble doubleDouble6 = DoubleDouble.atan2(doubleDouble5, doubleDouble1);
      doubleDouble3.add(doubleDouble4);
      doubleDouble6.abs();
      doubleDouble4.round();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(6.50702518925522);
      doubleDouble0.round();
      DoubleDouble doubleDouble1 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble2.isInfinite();
      doubleDouble2.add(doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble(220.483969);
      DoubleDouble doubleDouble4 = doubleDouble3.abs();
      DoubleDouble doubleDouble5 = doubleDouble0.rint();
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble7 = DoubleDouble.fromTwoDouble(220.483969, 1.23259516440783E-32);
      DoubleDouble doubleDouble8 = DoubleDouble.MINUS_ONE;
      doubleDouble7.cisia(doubleDouble0, doubleDouble0, doubleDouble8);
      DoubleDouble doubleDouble9 = doubleDouble4.acos();
      DoubleDouble doubleDouble10 = doubleDouble5.subtract(doubleDouble8);
      doubleDouble4.cisia(doubleDouble9, doubleDouble3, doubleDouble5);
      doubleDouble5.cisia(doubleDouble6, doubleDouble6, doubleDouble10);
      DoubleDouble doubleDouble11 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble11.ne(doubleDouble5);
      doubleDouble11.isZero();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.exp();
      DoubleDouble doubleDouble1 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble2 = DoubleDouble.fromOneDouble((-2.2698777452717285E-17));
      doubleDouble2.atan();
      DoubleDouble doubleDouble3 = DoubleDouble.PI;
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("~'c2jnGy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character '~' at position 1 in string ~'c2jnGy
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      doubleDouble0.min(doubleDouble1);
      doubleDouble1.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble5 = DoubleDouble.E;
      DoubleDouble.fromDoubleDouble(doubleDouble5);
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      doubleDouble3.reciprocal();
      DoubleDouble doubleDouble7 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble7.min(doubleDouble6);
      DoubleDouble doubleDouble8 = doubleDouble1.pow((-1));
      doubleDouble8.POSITIVE_INFINITY.log10();
      doubleDouble8.TWO_PI.toString();
      doubleDouble4.pow(doubleDouble7);
      doubleDouble7.pow(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      doubleDouble2.isInfinite();
      doubleDouble2.hashCode();
      doubleDouble0.toString();
      DoubleDouble doubleDouble3 = DoubleDouble.fromString("2");
      DoubleDouble doubleDouble4 = doubleDouble2.min(doubleDouble0);
      doubleDouble0.trunc();
      DoubleDouble doubleDouble5 = DoubleDouble.PI;
      DoubleDouble.atan2(doubleDouble1, doubleDouble4);
      doubleDouble2.compareTo(doubleDouble1);
      DoubleDouble doubleDouble6 = doubleDouble3.floor();
      doubleDouble1.divide(doubleDouble6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = DoubleDouble.fromTwoDouble((-1.0), 1.23259516440783E-32);
      DoubleDouble.atan2(doubleDouble1, doubleDouble2);
      doubleDouble1.log();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      doubleDouble0.sqrt();
      DoubleDouble doubleDouble1 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble2 = doubleDouble1.cos();
      DoubleDouble doubleDouble3 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble4 = doubleDouble0.rint();
      DoubleDouble doubleDouble5 = DoubleDouble.fromTwoDouble(1.34217729E8, 1.23259516440783E-32);
      doubleDouble5.cisia(doubleDouble4, doubleDouble3, doubleDouble4);
      DoubleDouble doubleDouble6 = doubleDouble2.acos();
      doubleDouble1.subtract(doubleDouble6);
      doubleDouble6.cisia(doubleDouble5, doubleDouble1, doubleDouble2);
      DoubleDouble doubleDouble7 = DoubleDouble.PI;
      doubleDouble6.getLowComponent();
      doubleDouble4.factorial(1977);
      doubleDouble4.intValue();
      doubleDouble3.exp();
      doubleDouble5.lt(doubleDouble3);
      DoubleDouble doubleDouble8 = doubleDouble5.floor();
      DoubleDouble doubleDouble9 = DoubleDouble.PI_2;
      DoubleDouble doubleDouble10 = DoubleDouble.HALF;
      doubleDouble10.log10();
      DoubleDouble doubleDouble11 = DoubleDouble.NaN;
      doubleDouble8.le(doubleDouble1);
      DoubleDouble.fromOneDouble(3467.0186461);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      DoubleDouble doubleDouble2 = doubleDouble1.E.multiply(doubleDouble0);
      doubleDouble0.ONE.pow(doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble4 = DoubleDouble.PI_2;
      doubleDouble4.cisia(doubleDouble3, doubleDouble2, doubleDouble1);
      DoubleDouble doubleDouble5 = DoubleDouble.E;
      DoubleDouble doubleDouble6 = doubleDouble3.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>(3);
      doubleDouble4.equals((Object) null);
      doubleDouble4.sin();
      Object object0 = new Object();
      doubleDouble1.tan();
      DoubleDouble doubleDouble7 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble8 = doubleDouble7.log10();
      Object object1 = new Object();
      doubleDouble6.equals(object1);
      doubleDouble8.rint();
      doubleDouble6.getLowComponent();
      doubleDouble2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      DoubleDouble doubleDouble4 = doubleDouble3.reciprocal();
      DoubleDouble.fromString("-6");
      DoubleDouble doubleDouble5 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble6 = doubleDouble0.exp();
      doubleDouble4.lt(doubleDouble0);
      doubleDouble1.floor();
      DoubleDouble doubleDouble7 = DoubleDouble.TWO_PI;
      doubleDouble2.log10();
      DoubleDouble doubleDouble8 = DoubleDouble.NaN;
      doubleDouble6.le(doubleDouble5);
      DoubleDouble.fromOneDouble(2569.269);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      DoubleDouble doubleDouble5 = doubleDouble3.reciprocal();
      DoubleDouble.fromString("-6");
      DoubleDouble doubleDouble6 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble6.min(doubleDouble4);
      doubleDouble5.factorial(0);
      doubleDouble0.intValue();
      DoubleDouble doubleDouble7 = doubleDouble0.exp();
      doubleDouble7.MINUS_ONE.sinh();
      DoubleDouble.fromTwoDouble(0, 6.283185307179586);
      doubleDouble5.acos();
      doubleDouble2.sqr();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-2998.927445226), (-2998.927445226));
      DoubleDouble doubleDouble1 = doubleDouble0.Ci();
      DoubleDouble doubleDouble2 = doubleDouble1.sinh();
      doubleDouble1.MINUS_ONE.cosh();
      DoubleDouble doubleDouble3 = doubleDouble2.TWO_PI.asin();
      DoubleDouble doubleDouble4 = DoubleDouble.atan2(doubleDouble0, doubleDouble2);
      doubleDouble1.NaN.acos();
      doubleDouble0.MINUS_ONE.round();
      doubleDouble2.ZERO.sqr();
      DoubleDouble doubleDouble5 = doubleDouble2.log();
      doubleDouble5.NaN.asin();
      doubleDouble2.getHighComponent();
      doubleDouble3.le(doubleDouble0);
      doubleDouble4.isNegative();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble((-3196.54));
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble1, doubleDouble0);
      doubleDouble1.le(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.BernoulliA((-1320));
      doubleDouble1.ONE.factorial(6);
      doubleDouble0.sqr();
      DoubleDouble.fromOneDouble(1782.56159532141);
      // Undeclared exception!
      try { 
        doubleDouble0.max((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.ONE.negate();
      doubleDouble0.cisia(doubleDouble2, doubleDouble2, doubleDouble3);
      DoubleDouble doubleDouble4 = DoubleDouble.E;
      doubleDouble2.si();
      Object object0 = new Object();
      doubleDouble3.equals(object0);
      DoubleDouble.fromTwoDouble(1089.1365, (-675.4363776526477));
      DoubleDouble doubleDouble5 = DoubleDouble.HALF;
      DoubleDouble doubleDouble6 = DoubleDouble.atan2(doubleDouble5, doubleDouble3);
      doubleDouble6.exp();
      DoubleDouble doubleDouble7 = DoubleDouble.ZERO;
      doubleDouble0.getLowComponent();
      doubleDouble7.intValue();
      DoubleDouble doubleDouble8 = DoubleDouble.HALF;
      DoubleDouble doubleDouble9 = DoubleDouble.atan2(doubleDouble7, doubleDouble6);
      doubleDouble6.HALF.subtract(doubleDouble9);
      doubleDouble8.exp();
      DoubleDouble doubleDouble10 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, (-1.0));
      doubleDouble4.ge(doubleDouble0);
      doubleDouble10.acos();
      doubleDouble6.isInteger();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble3 = doubleDouble2.cos();
      DoubleDouble doubleDouble4 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble5 = doubleDouble0.rint();
      doubleDouble2.cisia(doubleDouble5, doubleDouble4, doubleDouble5);
      DoubleDouble doubleDouble6 = doubleDouble3.acos();
      DoubleDouble doubleDouble7 = doubleDouble2.subtract(doubleDouble6);
      doubleDouble6.cisia(doubleDouble2, doubleDouble2, doubleDouble3);
      doubleDouble6.ZERO.cos();
      doubleDouble7.cisia(doubleDouble3, doubleDouble6, doubleDouble5);
      doubleDouble0.ne(doubleDouble6);
      Object object0 = new Object();
      doubleDouble5.tan();
      DoubleDouble doubleDouble8 = DoubleDouble.PI_2;
      doubleDouble8.log10();
      Object object1 = new Object();
      doubleDouble0.equals(object1);
      doubleDouble8.rint();
      doubleDouble4.getLowComponent();
      doubleDouble1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      DoubleDouble doubleDouble3 = doubleDouble2.trunc();
      DoubleDouble.atan2(doubleDouble3, doubleDouble3);
      doubleDouble1.tan();
      doubleDouble0.trunc();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble3 = doubleDouble2.cos();
      DoubleDouble doubleDouble4 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble5 = doubleDouble0.rint();
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(1.34217729E8, 1.23259516440783E-32);
      doubleDouble6.cisia(doubleDouble5, doubleDouble4, doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble3.acos();
      doubleDouble7.abs();
      DoubleDouble doubleDouble8 = doubleDouble1.rint();
      DoubleDouble doubleDouble9 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      doubleDouble0.cisia(doubleDouble8, doubleDouble3, doubleDouble7);
      DoubleDouble doubleDouble10 = doubleDouble6.acos();
      DoubleDouble doubleDouble11 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble12 = doubleDouble11.subtract(doubleDouble10);
      DoubleDouble doubleDouble13 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      doubleDouble12.cisia(doubleDouble1, doubleDouble13, doubleDouble1);
      doubleDouble9.cisia(doubleDouble5, doubleDouble11, doubleDouble1);
      doubleDouble0.ne(doubleDouble2);
      doubleDouble12.isZero();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble2 = doubleDouble0.acos();
      DoubleDouble doubleDouble3 = doubleDouble2.BernoulliA(1952257861);
      doubleDouble1.add(doubleDouble3);
      DoubleDouble doubleDouble4 = doubleDouble0.trunc();
      DoubleDouble doubleDouble5 = doubleDouble1.sin();
      Object object0 = new Object();
      doubleDouble4.tan();
      DoubleDouble doubleDouble6 = doubleDouble5.log10();
      DoubleDouble doubleDouble7 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble7.equals(doubleDouble6);
      doubleDouble5.rint();
      doubleDouble1.getLowComponent();
      doubleDouble0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = doubleDouble1.NaN.factorial((-1327));
      DoubleDouble doubleDouble3 = DoubleDouble.PI_2;
      doubleDouble2.cisia(doubleDouble1, doubleDouble3, doubleDouble3);
      DoubleDouble doubleDouble4 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble4.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>((-1327));
      DoubleDouble doubleDouble5 = doubleDouble0.exp();
      DoubleDouble doubleDouble6 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble7 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble8 = doubleDouble5.atan();
      DoubleDouble doubleDouble9 = DoubleDouble.PI;
      doubleDouble4.getLowComponent();
      doubleDouble2.factorial(449);
      doubleDouble7.intValue();
      doubleDouble2.exp();
      doubleDouble2.lt(doubleDouble8);
      DoubleDouble doubleDouble10 = doubleDouble4.floor();
      DoubleDouble doubleDouble11 = DoubleDouble.TWO_PI;
      doubleDouble5.log10();
      DoubleDouble doubleDouble12 = DoubleDouble.NaN;
      doubleDouble10.le(doubleDouble0);
      DoubleDouble.fromOneDouble(3467.0186461);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      DoubleDouble doubleDouble2 = doubleDouble1.E.multiply(doubleDouble0);
      doubleDouble0.ONE.pow(doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble4 = DoubleDouble.PI_2;
      doubleDouble4.cisia(doubleDouble3, doubleDouble2, doubleDouble1);
      DoubleDouble doubleDouble5 = DoubleDouble.E;
      doubleDouble3.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>(3);
      doubleDouble4.BernoulliA(3);
      DoubleDouble doubleDouble6 = doubleDouble2.BernoulliB((-4690));
      DoubleDouble doubleDouble7 = doubleDouble5.abs();
      doubleDouble2.round();
      DoubleDouble doubleDouble8 = doubleDouble6.negate();
      doubleDouble8.rint();
      doubleDouble6.getLowComponent();
      doubleDouble7.doubleValue();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.sin();
      doubleDouble0.HALF.multiply(doubleDouble1);
      DoubleDouble doubleDouble2 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble3 = doubleDouble0.asin();
      DoubleDouble doubleDouble4 = doubleDouble3.TWO.multiply(doubleDouble1);
      DoubleDouble doubleDouble5 = doubleDouble4.NaN.log();
      DoubleDouble doubleDouble6 = DoubleDouble.NaN;
      DoubleDouble doubleDouble7 = doubleDouble4.PI_2.pow(doubleDouble6);
      DoubleDouble doubleDouble8 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble9 = doubleDouble1.divide(doubleDouble8);
      DoubleDouble doubleDouble10 = doubleDouble9.abs();
      doubleDouble10.HALF.abs();
      doubleDouble10.log10();
      doubleDouble5.le(doubleDouble7);
      doubleDouble4.getHighComponent();
      doubleDouble6.min(doubleDouble1);
      doubleDouble2.isInfinite();
      DoubleDouble.fromDoubleDouble(doubleDouble2);
      doubleDouble3.log10();
      doubleDouble1.ge(doubleDouble5);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      doubleDouble0.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble3 = doubleDouble0.trunc();
      doubleDouble3.ZERO.hashCode();
      DoubleDouble doubleDouble4 = doubleDouble0.E.log10();
      DoubleDouble doubleDouble5 = doubleDouble3.PI.ceil();
      doubleDouble0.toString();
      DoubleDouble doubleDouble6 = DoubleDouble.fromString("3626.90777012829994419007562101");
      DoubleDouble doubleDouble7 = doubleDouble4.asin();
      doubleDouble7.PI_2.sinh();
      doubleDouble6.POSITIVE_INFINITY.exp();
      doubleDouble7.PI_2.factorial(4);
      doubleDouble5.lt(doubleDouble6);
      doubleDouble2.isInteger();
      doubleDouble3.toString();
      doubleDouble5.Ci();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromTwoDouble(506.840194720544, 1.23259516440783E-32);
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble1, doubleDouble0);
      DoubleDouble doubleDouble3 = DoubleDouble.ZERO;
      doubleDouble0.cisia(doubleDouble3, doubleDouble1, doubleDouble3);
      doubleDouble2.log10();
      doubleDouble3.isNegative();
      doubleDouble2.trunc();
      doubleDouble0.hashCode();
      doubleDouble1.log10();
      DoubleDouble doubleDouble4 = DoubleDouble.ZERO;
      doubleDouble4.ceil();
      doubleDouble4.toString();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(Double.NaN);
      doubleDouble0.Ci();
      doubleDouble0.isNaN();
      doubleDouble0.floor();
      doubleDouble0.trunc();
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble0, doubleDouble0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble3 = doubleDouble2.cos();
      DoubleDouble doubleDouble4 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble5 = doubleDouble0.rint();
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(1.34217729E8, 1.23259516440783E-32);
      doubleDouble6.cisia(doubleDouble5, doubleDouble4, doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble3.acos();
      DoubleDouble doubleDouble8 = doubleDouble2.subtract(doubleDouble7);
      doubleDouble7.cisia(doubleDouble6, doubleDouble2, doubleDouble3);
      doubleDouble8.cisia(doubleDouble3, doubleDouble7, doubleDouble5);
      doubleDouble6.ne(doubleDouble7);
      doubleDouble1.isZero();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI_2;
      // Undeclared exception!
      try { 
        doubleDouble0.ge((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      doubleDouble1.NaN.factorial((-1327));
      DoubleDouble doubleDouble2 = doubleDouble0.log();
      doubleDouble0.pow((-1327));
      doubleDouble1.BernoulliB(0);
      doubleDouble2.signum();
      doubleDouble2.getHighComponent();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble2 = DoubleDouble.HALF;
      doubleDouble2.toString();
      DoubleDouble doubleDouble3 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble1.abs();
      DoubleDouble.fromString("0.5");
      doubleDouble2.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.MINUS_ONE.dump();
      doubleDouble0.getHighComponent();
      doubleDouble0.ZERO.reciprocal();
      DoubleDouble doubleDouble1 = DoubleDouble.fromTwoDouble(361.4673, 626.227);
      DoubleDouble doubleDouble2 = doubleDouble0.PI_2.rint();
      doubleDouble0.intValue();
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble3 = doubleDouble2.TWO_PI.si();
      doubleDouble0.hashCode();
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble4 = doubleDouble0.ceil();
      doubleDouble4.TWO_PI.abs();
      DoubleDouble doubleDouble5 = doubleDouble4.HALF.si();
      doubleDouble0.round();
      DoubleDouble.fromDoubleDouble(doubleDouble2);
      DoubleDouble doubleDouble6 = doubleDouble5.reciprocal();
      CacheMap<DoubleDouble, Object> cacheMap0 = new CacheMap<DoubleDouble, Object>(0);
      CacheMap<DoubleDouble, Object> cacheMap1 = new CacheMap<DoubleDouble, Object>(2144384825);
      doubleDouble0.POSITIVE_INFINITY.pow(doubleDouble4);
      doubleDouble5.equals(cacheMap1);
      doubleDouble4.add(doubleDouble1);
      DoubleDouble.atan2(doubleDouble2, doubleDouble6);
      doubleDouble3.ne(doubleDouble6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble3 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble4 = doubleDouble3.ONE.negate();
      doubleDouble2.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      DoubleDouble doubleDouble5 = doubleDouble3.log10();
      DoubleDouble doubleDouble6 = doubleDouble3.ceil();
      doubleDouble6.toString();
      doubleDouble1.doubleValue();
      doubleDouble4.asin();
      DoubleDouble doubleDouble7 = doubleDouble4.divide(doubleDouble2);
      DoubleDouble doubleDouble8 = DoubleDouble.E;
      doubleDouble8.trunc();
      doubleDouble1.log();
      doubleDouble0.lt(doubleDouble3);
      doubleDouble7.sin();
      doubleDouble8.asin();
      doubleDouble3.toString();
      doubleDouble4.tan();
      doubleDouble8.asin();
      DoubleDouble doubleDouble9 = DoubleDouble.fromDoubleDouble(doubleDouble7);
      DoubleDouble doubleDouble10 = DoubleDouble.PI_2;
      doubleDouble9.lt(doubleDouble10);
      doubleDouble5.isInteger();
      doubleDouble10.toString();
      doubleDouble3.Ci();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      doubleDouble2.gt(doubleDouble1);
      doubleDouble2.subtract(doubleDouble1);
      doubleDouble1.si();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDouble doubleDouble1 = doubleDouble0.si();
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble3 = doubleDouble1.asin();
      DoubleDouble doubleDouble4 = doubleDouble3.negate();
      doubleDouble1.cisia(doubleDouble3, doubleDouble0, doubleDouble2);
      doubleDouble3.log10();
      doubleDouble4.ceil();
      doubleDouble0.toString();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("58u~Kc\"Z<JW)$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'u' at position 3 in string 58u~Kc\"Z<JW)$
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      DoubleDouble doubleDouble2 = doubleDouble1.E.multiply(doubleDouble0);
      DoubleDouble doubleDouble3 = doubleDouble0.ONE.pow(doubleDouble1);
      DoubleDouble doubleDouble4 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble5 = DoubleDouble.PI_2;
      doubleDouble5.cisia(doubleDouble4, doubleDouble2, doubleDouble1);
      DoubleDouble doubleDouble6 = DoubleDouble.E;
      DoubleDouble doubleDouble7 = doubleDouble4.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>(3);
      doubleDouble5.equals((Object) null);
      DoubleDouble doubleDouble8 = DoubleDouble.fromTwoDouble((-45.699341), (-154.6525));
      doubleDouble8.exp();
      DoubleDouble doubleDouble9 = DoubleDouble.ZERO;
      doubleDouble0.getLowComponent();
      doubleDouble2.factorial(0);
      doubleDouble3.intValue();
      DoubleDouble doubleDouble10 = doubleDouble3.exp();
      doubleDouble10.lt(doubleDouble0);
      DoubleDouble doubleDouble11 = doubleDouble6.floor();
      DoubleDouble doubleDouble12 = DoubleDouble.TWO_PI;
      doubleDouble12.log10();
      DoubleDouble doubleDouble13 = DoubleDouble.NaN;
      doubleDouble7.le(doubleDouble10);
      doubleDouble11.divide(doubleDouble3);
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = doubleDouble1.NaN.factorial((-1327));
      DoubleDouble doubleDouble3 = DoubleDouble.PI_2;
      doubleDouble2.cisia(doubleDouble1, doubleDouble3, doubleDouble3);
      DoubleDouble doubleDouble4 = DoubleDouble.E;
      doubleDouble4.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>((-1327));
      doubleDouble4.equals(cacheMap0);
      DoubleDouble doubleDouble5 = doubleDouble0.exp();
      DoubleDouble doubleDouble6 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble7 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble8 = doubleDouble5.atan();
      DoubleDouble doubleDouble9 = DoubleDouble.PI;
      doubleDouble4.getLowComponent();
      doubleDouble2.factorial(449);
      doubleDouble7.intValue();
      doubleDouble2.exp();
      doubleDouble2.lt(doubleDouble8);
      DoubleDouble doubleDouble10 = doubleDouble4.floor();
      DoubleDouble doubleDouble11 = DoubleDouble.TWO_PI;
      doubleDouble5.log10();
      DoubleDouble doubleDouble12 = DoubleDouble.NaN;
      doubleDouble10.le(doubleDouble0);
      DoubleDouble.fromOneDouble(3467.0186461);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.PI.asin();
      doubleDouble1.ONE.negate();
      doubleDouble0.gt(doubleDouble0);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("-E!k7uJ cgc.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid exponent !k7uJ cgc. in string -E!k7uJ cgc.
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.trunc();
      doubleDouble0.trunc();
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("e)[o^:_[(ha%vn[>}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid exponent )[o^:_[(ha%vn[>} in string e)[o^:_[(ha%vn[>}
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.rint();
      doubleDouble0.signum();
      doubleDouble2.sinh();
      doubleDouble0.doubleValue();
      DoubleDouble doubleDouble3 = doubleDouble0.asin();
      doubleDouble2.divide(doubleDouble3);
      doubleDouble0.trunc();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("e)[o^:_[(ha%vn[>}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid exponent )[o^:_[(ha%vn[>} in string e)[o^:_[(ha%vn[>}
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble2.ONE.negate();
      doubleDouble2.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble2.log10();
      doubleDouble0.reciprocal();
      DoubleDouble.fromOneDouble((-2971.06));
      doubleDouble1.TWO.exp();
      DoubleDouble doubleDouble3 = DoubleDouble.ONE;
      doubleDouble3.atan();
      DoubleDouble doubleDouble4 = DoubleDouble.PI;
      // Undeclared exception!
      try { 
        doubleDouble1.multiply((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      DoubleDouble doubleDouble3 = doubleDouble0.BernoulliA(4);
      DoubleDouble doubleDouble4 = doubleDouble3.BernoulliB(897698187);
      doubleDouble0.abs();
      doubleDouble0.TWO_PI.subtract(doubleDouble4);
      doubleDouble3.round();
      doubleDouble2.negate();
      doubleDouble3.rint();
      doubleDouble2.getLowComponent();
      doubleDouble4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.ONE.negate();
      doubleDouble0.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(0.0);
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      doubleDouble2.tan();
      doubleDouble1.round();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble.fromOneDouble(1.0);
      DoubleDouble doubleDouble2 = doubleDouble1.atan();
      DoubleDouble doubleDouble3 = DoubleDouble.PI;
      DoubleDouble doubleDouble4 = doubleDouble3.multiply(doubleDouble2);
      doubleDouble2.dump();
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble4, doubleDouble4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      doubleDouble0.si();
      DoubleDouble doubleDouble1 = doubleDouble0.cosh();
      DoubleDouble doubleDouble2 = DoubleDouble.NaN;
      doubleDouble0.divide(doubleDouble1);
      // Undeclared exception!
      try { 
        doubleDouble2.min((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.atan();
      doubleDouble1.ZERO.asin();
      doubleDouble1.ZERO.dump();
      DoubleDouble doubleDouble2 = doubleDouble0.NaN.floor();
      doubleDouble0.abs();
      doubleDouble1.divide(doubleDouble0);
      doubleDouble1.E.toString();
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 3.6787944117144233);
      doubleDouble0.PI.sqrt();
      DoubleDouble doubleDouble3 = DoubleDouble.TWO;
      DoubleDouble doubleDouble4 = DoubleDouble.atan2(doubleDouble2, doubleDouble1);
      doubleDouble4.asin();
      DoubleDouble doubleDouble5 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble5.hashCode();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      DoubleDouble doubleDouble5 = doubleDouble2.BernoulliA((-20));
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble((-20), 1.23259516440783E-32);
      doubleDouble5.reciprocal();
      CacheMap<DoubleDouble, Object> cacheMap0 = new CacheMap<DoubleDouble, Object>(1);
      doubleDouble6.ZERO.equals(cacheMap0);
      doubleDouble6.add(doubleDouble2);
      doubleDouble4.BernoulliB(1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.ONE.negate();
      doubleDouble1.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble0.gt(doubleDouble1);
      doubleDouble0.abs();
      doubleDouble3.round();
      doubleDouble0.equals(doubleDouble1);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleDouble doubleDouble0 = null;
      // Undeclared exception!
      try { 
        DoubleDouble.atan2((DoubleDouble) null, (DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      DoubleDouble doubleDouble2 = DoubleDouble.fromOneDouble(0.451582705289453);
      doubleDouble2.atan();
      DoubleDouble doubleDouble3 = DoubleDouble.MINUS_ONE;
      doubleDouble3.dump();
      DoubleDouble doubleDouble4 = doubleDouble0.floor();
      doubleDouble0.abs();
      DoubleDouble doubleDouble5 = doubleDouble1.divide(doubleDouble3);
      doubleDouble3.toString();
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble7 = DoubleDouble.TWO;
      DoubleDouble.atan2(doubleDouble6, doubleDouble4);
      doubleDouble5.asin();
      DoubleDouble doubleDouble8 = DoubleDouble.fromDoubleDouble(doubleDouble5);
      doubleDouble8.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.round();
      Object object0 = new Object();
      doubleDouble1.equals(object0);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString(")vi?)\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character ')' at position 1 in string )vi?)\"
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      doubleDouble0.isInfinite();
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble1.lt(doubleDouble0);
      doubleDouble1.log();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.E.multiply(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.ONE.pow(doubleDouble0);
      DoubleDouble doubleDouble3 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble4 = DoubleDouble.PI_2;
      doubleDouble3.POSITIVE_INFINITY.pow(doubleDouble1);
      doubleDouble4.cisia(doubleDouble3, doubleDouble1, doubleDouble0);
      DoubleDouble doubleDouble5 = DoubleDouble.E;
      doubleDouble3.si();
      CacheMap<Object, Object> cacheMap0 = new CacheMap<Object, Object>(3);
      DoubleDouble doubleDouble6 = DoubleDouble.ZERO;
      doubleDouble6.isPositive();
      doubleDouble2.exp();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.NaN.BernoulliA(1);
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble((-3467.0186461), 0.3025850929939852);
      doubleDouble1.add(doubleDouble3);
      DoubleDouble doubleDouble4 = doubleDouble2.add(doubleDouble1);
      doubleDouble4.sqrt();
      doubleDouble0.max(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble.fromTwoDouble(6.0, 6.0);
      // Undeclared exception!
      try { 
        doubleDouble1.toString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.toString();
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble1.abs();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("NaN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'N' at position 1 in string NaN
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.sqrt();
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble3 = DoubleDouble.atan2(doubleDouble0, doubleDouble2);
      doubleDouble3.intValue();
      DoubleDouble doubleDouble4 = doubleDouble0.pow(doubleDouble3);
      DoubleDouble doubleDouble5 = doubleDouble0.add(doubleDouble4);
      doubleDouble4.PI_2.equals((Object) null);
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(1.0, 0.30258509299095226);
      DoubleDouble doubleDouble7 = doubleDouble3.sqr();
      DoubleDouble doubleDouble8 = doubleDouble2.PI_2.multiply(doubleDouble6);
      doubleDouble7.ONE.Ci();
      DoubleDouble doubleDouble9 = DoubleDouble.fromTwoDouble(1.0E29, 1.23259516440783E-32);
      doubleDouble9.NaN.toString();
      doubleDouble7.intValue();
      doubleDouble6.ZERO.log();
      DoubleDouble doubleDouble10 = doubleDouble0.NEGATIVE_INFINITY.rint();
      doubleDouble4.signum();
      doubleDouble2.TWO.sinh();
      doubleDouble3.doubleValue();
      doubleDouble2.asin();
      DoubleDouble doubleDouble11 = doubleDouble2.PI.divide(doubleDouble1);
      doubleDouble8.trunc();
      DoubleDouble doubleDouble12 = doubleDouble3.log();
      doubleDouble1.lt(doubleDouble1);
      DoubleDouble doubleDouble13 = doubleDouble11.sin();
      doubleDouble13.TWO.asin();
      doubleDouble6.toString();
      DoubleDouble doubleDouble14 = doubleDouble10.tan();
      DoubleDouble doubleDouble15 = doubleDouble3.asin();
      doubleDouble15.lt(doubleDouble14);
      doubleDouble0.isInteger();
      doubleDouble5.toString();
      doubleDouble12.Ci();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      DoubleDouble doubleDouble2 = DoubleDouble.TWO_PI;
      doubleDouble2.TWO.pow(doubleDouble0);
      doubleDouble1.cisia(doubleDouble0, doubleDouble0, doubleDouble2);
      doubleDouble0.isZero();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.compareTo(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-717.1561528010164), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      DoubleDouble doubleDouble3 = doubleDouble2.ZERO.BernoulliA(8);
      doubleDouble3.sin();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble4 = doubleDouble0.trunc();
      doubleDouble4.ZERO.hashCode();
      doubleDouble0.E.log10();
      DoubleDouble doubleDouble5 = doubleDouble4.PI.ceil();
      doubleDouble0.toString();
      DoubleDouble doubleDouble6 = DoubleDouble.fromString("3611.13384719898351704614469782");
      doubleDouble6.pow(0);
      doubleDouble6.hashCode();
      DoubleDouble doubleDouble7 = DoubleDouble.fromTwoDouble(0.5, (-2540.0));
      doubleDouble7.cisia(doubleDouble1, doubleDouble6, doubleDouble5);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.acos();
      doubleDouble1.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.sinh();
      DoubleDouble doubleDouble3 = doubleDouble0.Ci();
      doubleDouble3.cosh();
      doubleDouble0.ceil();
      DoubleDouble doubleDouble4 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble5 = DoubleDouble.fromDoubleDouble(doubleDouble3);
      doubleDouble4.max(doubleDouble5);
      doubleDouble2.trunc();
      DoubleDouble doubleDouble6 = DoubleDouble.TWO;
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble2, doubleDouble3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      doubleDouble1.E.multiply(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.ONE.pow(doubleDouble1);
      DoubleDouble doubleDouble3 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble2.MINUS_ONE.si();
      DoubleDouble doubleDouble4 = doubleDouble2.ONE.add(doubleDouble3);
      doubleDouble4.POSITIVE_INFINITY.sqr();
      doubleDouble2.TWO_PI.Ci();
      doubleDouble0.HALF.atan();
      int int0 = 2417;
      DoubleDouble doubleDouble5 = DoubleDouble.NaN;
      DoubleDouble doubleDouble6 = doubleDouble0.E.divide(doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble0.TWO.BernoulliA(2417);
      DoubleDouble doubleDouble8 = doubleDouble7.ONE.BernoulliA(2417);
      doubleDouble0.HALF.sin();
      doubleDouble0.TWO_PI.reciprocal();
      DoubleDouble doubleDouble9 = DoubleDouble.fromOneDouble(3.718281828459045);
      DoubleDouble doubleDouble10 = doubleDouble9.atan();
      DoubleDouble doubleDouble11 = DoubleDouble.PI;
      doubleDouble6.multiply(doubleDouble8);
      doubleDouble11.ZERO.dump();
      doubleDouble11.PI.cos();
      doubleDouble9.cisia(doubleDouble3, doubleDouble2, doubleDouble10);
      doubleDouble0.equals(doubleDouble11);
      doubleDouble9.isInteger();
      DoubleDouble doubleDouble12 = DoubleDouble.fromDoubleDouble(doubleDouble11);
      doubleDouble10.multiply(doubleDouble0);
      doubleDouble12.gt(doubleDouble10);
      doubleDouble11.add(doubleDouble9);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("DD<0.0, 0.0>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'D' at position 1 in string DD<0.0, 0.0>
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.PI.asin();
      DoubleDouble doubleDouble2 = doubleDouble0.abs();
      doubleDouble2.BernoulliA((-6));
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble3 = DoubleDouble.PI;
      DoubleDouble doubleDouble4 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble5 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble6 = DoubleDouble.atan2(doubleDouble4, doubleDouble5);
      doubleDouble6.BernoulliB(1);
      doubleDouble5.isPositive();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = doubleDouble0.TWO_PI.factorial(0);
      DoubleDouble doubleDouble2 = doubleDouble1.PI_2.reciprocal();
      doubleDouble0.reciprocal();
      doubleDouble1.dump();
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble((-1182.0709483));
      DoubleDouble.atan2(doubleDouble3, doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble3 = doubleDouble2.cos();
      DoubleDouble doubleDouble4 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble5 = doubleDouble4.log();
      DoubleDouble doubleDouble6 = doubleDouble4.sqrt();
      DoubleDouble doubleDouble7 = DoubleDouble.HALF;
      DoubleDouble doubleDouble8 = DoubleDouble.atan2(doubleDouble4, doubleDouble3);
      doubleDouble1.dump();
      doubleDouble5.cos();
      doubleDouble5.trunc();
      doubleDouble4.floor();
      doubleDouble2.min(doubleDouble4);
      doubleDouble8.multiply(doubleDouble2);
      doubleDouble3.intValue();
      doubleDouble4.add(doubleDouble6);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.PI;
      DoubleDouble doubleDouble2 = DoubleDouble.TWO_PI;
      doubleDouble1.ge(doubleDouble0);
      doubleDouble1.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble1 = doubleDouble0.negate();
      doubleDouble1.gt(doubleDouble0);
      doubleDouble1.sqrt();
      doubleDouble1.negate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.acos();
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(1952257861);
      doubleDouble2.HALF.add(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble2.trunc();
      DoubleDouble doubleDouble4 = doubleDouble3.sin();
      Object object0 = new Object();
      DoubleDouble doubleDouble5 = doubleDouble4.NaN.tan();
      doubleDouble5.NaN.log10();
      doubleDouble0.toString();
      DoubleDouble doubleDouble6 = DoubleDouble.NaN;
      doubleDouble6.pow(1952257861);
      doubleDouble6.pow(doubleDouble1);
      DoubleDouble doubleDouble7 = doubleDouble3.sqrt();
      doubleDouble7.min(doubleDouble6);
      doubleDouble0.floor();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ONE.reciprocal();
      DoubleDouble doubleDouble3 = doubleDouble0.ZERO.sinh();
      int int0 = (-1);
      DoubleDouble doubleDouble4 = doubleDouble1.NEGATIVE_INFINITY.round();
      DoubleDouble doubleDouble5 = doubleDouble3.MINUS_ONE.BernoulliB((-1));
      doubleDouble0.isInfinite();
      DoubleDouble doubleDouble6 = doubleDouble3.TWO.abs();
      DoubleDouble doubleDouble7 = doubleDouble3.NaN.rint();
      doubleDouble1.multiply(doubleDouble3);
      DoubleDouble doubleDouble8 = DoubleDouble.fromTwoDouble(0.3002973693586406, 0.3002973693586406);
      doubleDouble8.NEGATIVE_INFINITY.cisia(doubleDouble2, doubleDouble5, doubleDouble7);
      doubleDouble8.PI_2.acos();
      DoubleDouble doubleDouble9 = doubleDouble8.TWO_PI.subtract(doubleDouble1);
      doubleDouble1.cisia(doubleDouble5, doubleDouble5, doubleDouble5);
      doubleDouble0.PI_2.cisia(doubleDouble7, doubleDouble7, doubleDouble9);
      doubleDouble2.ne(doubleDouble0);
      doubleDouble1.isZero();
      doubleDouble6.lt(doubleDouble4);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-3166.0), 1.3393857490036326E300);
      doubleDouble0.toString();
      DoubleDouble doubleDouble1 = DoubleDouble.fromString("1339385749003632603511932253040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      doubleDouble1.asin();
      doubleDouble0.BernoulliB((-1903));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.fromTwoDouble((-3166.0), (-563.35699));
      doubleDouble1.toString();
      DoubleDouble doubleDouble2 = DoubleDouble.fromString("-3729.35698999999999614374246448");
      doubleDouble2.TWO.asin();
      DoubleDouble doubleDouble3 = DoubleDouble.PI;
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble0.compareTo(doubleDouble1);
      doubleDouble0.pow(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble3 = doubleDouble0.trunc();
      doubleDouble3.ZERO.hashCode();
      doubleDouble0.E.log10();
      doubleDouble3.PI.ceil();
      doubleDouble0.HALF.toString();
      DoubleDouble doubleDouble4 = doubleDouble2.sin();
      doubleDouble4.isInteger();
      DoubleDouble doubleDouble5 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      doubleDouble5.getLowComponent();
      doubleDouble3.log10();
      doubleDouble3.le(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.ONE.negate();
      doubleDouble3.round();
      Object object0 = new Object();
      doubleDouble0.equals(object0);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.acos();
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(1952257861);
      DoubleDouble doubleDouble3 = doubleDouble2.HALF.add(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble2.trunc();
      DoubleDouble doubleDouble5 = doubleDouble4.sin();
      Object object0 = new Object();
      DoubleDouble doubleDouble6 = doubleDouble5.NaN.tan();
      doubleDouble6.NaN.log10();
      doubleDouble0.equals(object0);
      doubleDouble4.pow(doubleDouble5);
      DoubleDouble doubleDouble7 = DoubleDouble.TWO;
      doubleDouble7.abs();
      doubleDouble3.round();
      doubleDouble6.negate();
      doubleDouble5.add(doubleDouble4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.acos();
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(1952257861);
      DoubleDouble doubleDouble3 = doubleDouble2.HALF.add(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble2.trunc();
      DoubleDouble doubleDouble5 = doubleDouble4.sin();
      Object object0 = new Object();
      DoubleDouble doubleDouble6 = doubleDouble5.NaN.tan();
      doubleDouble6.NaN.log10();
      doubleDouble0.equals(object0);
      DoubleDouble doubleDouble7 = doubleDouble3.rint();
      doubleDouble7.getLowComponent();
      doubleDouble4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.acos();
      DoubleDouble doubleDouble2 = doubleDouble1.sqrt();
      DoubleDouble doubleDouble3 = doubleDouble0.TWO_PI.sinh();
      DoubleDouble doubleDouble4 = doubleDouble2.TWO_PI.cosh();
      doubleDouble4.ceil();
      doubleDouble0.dump();
      DoubleDouble doubleDouble5 = DoubleDouble.PI_2;
      doubleDouble1.MINUS_ONE.trunc();
      doubleDouble3.toString();
      doubleDouble5.isInteger();
      DoubleDouble doubleDouble6 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble7 = doubleDouble6.asin();
      doubleDouble7.reciprocal();
      doubleDouble4.negate();
      doubleDouble0.negate();
      doubleDouble3.sqr();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble((-3196.54));
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble0, doubleDouble1);
      doubleDouble0.le(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(0);
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble1, doubleDouble1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.asin();
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble.atan2(doubleDouble1, doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.acos();
      doubleDouble1.sqrt();
      doubleDouble1.sinh();
      DoubleDouble doubleDouble2 = doubleDouble0.Ci();
      doubleDouble2.cosh();
      doubleDouble0.ceil();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("w'Xh1F3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'w' at position 1 in string w'Xh1F3
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(Double.NaN);
      doubleDouble0.isNegative();
      doubleDouble0.sinh();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.dump();
      double double0 = DoubleDouble.SPLIT;
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.reciprocal();
      DoubleDouble doubleDouble2 = DoubleDouble.fromTwoDouble(361.4673, 626.227);
      DoubleDouble doubleDouble3 = doubleDouble0.PI_2.rint();
      doubleDouble0.intValue();
      doubleDouble0.isPositive();
      doubleDouble3.TWO_PI.si();
      doubleDouble0.hashCode();
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble4 = doubleDouble0.ceil();
      DoubleDouble doubleDouble5 = doubleDouble4.TWO_PI.abs();
      DoubleDouble doubleDouble6 = doubleDouble4.HALF.si();
      DoubleDouble doubleDouble7 = doubleDouble0.round();
      DoubleDouble doubleDouble8 = DoubleDouble.fromDoubleDouble(doubleDouble3);
      DoubleDouble doubleDouble9 = doubleDouble8.E.negate();
      doubleDouble6.NEGATIVE_INFINITY.reciprocal();
      DoubleDouble doubleDouble10 = doubleDouble6.min(doubleDouble5);
      doubleDouble10.PI.sin();
      doubleDouble5.isInteger();
      doubleDouble5.getLowComponent();
      DoubleDouble doubleDouble11 = doubleDouble2.log10();
      doubleDouble11.ONE.sin();
      doubleDouble7.le(doubleDouble1);
      doubleDouble8.multiply(doubleDouble1);
      doubleDouble2.gt(doubleDouble9);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = DoubleDouble.PI_2;
      doubleDouble1.POSITIVE_INFINITY.multiply(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.MINUS_ONE.add(doubleDouble1);
      doubleDouble2.NaN.BernoulliB((-1064));
      DoubleDouble doubleDouble3 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble4 = doubleDouble3.E.divide(doubleDouble0);
      DoubleDouble.fromDoubleDouble(doubleDouble2);
      doubleDouble3.TWO.abs();
      doubleDouble0.NaN.rint();
      doubleDouble3.cos();
      CacheMap<Object, DoubleDouble> cacheMap0 = new CacheMap<Object, DoubleDouble>((-1064));
      doubleDouble4.E.equals(cacheMap0);
      DoubleDouble doubleDouble5 = doubleDouble2.sqrt();
      doubleDouble5.isInteger();
      DoubleDouble doubleDouble6 = doubleDouble0.trunc();
      doubleDouble6.HALF.sqr();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble((-3221.7386408809875));
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble2.BernoulliB((-4));
      doubleDouble1.cos();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble.fromOneDouble(1.4456468917292502E-16);
      DoubleDouble doubleDouble1 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble2 = doubleDouble1.cos();
      doubleDouble2.hashCode();
      doubleDouble2.toString();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("com.accelad.math.doubledouble.DoubleMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.doubledouble.DoubleMap
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(1.0);
      doubleDouble0.pow(1952257861);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(Double.NaN);
      doubleDouble0.Ci();
      doubleDouble0.isNaN();
      doubleDouble0.floor();
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble0, doubleDouble0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      doubleDouble0.NaN.acos();
      doubleDouble0.E.log();
      Object object0 = new Object();
      doubleDouble0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI_2;
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.si();
      DoubleDouble doubleDouble2 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble3 = doubleDouble0.PI_2.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble0.MINUS_ONE.floor();
      doubleDouble4.HALF.dump();
      DoubleDouble doubleDouble5 = doubleDouble0.trunc();
      doubleDouble1.PI_2.si();
      DoubleDouble doubleDouble6 = DoubleDouble.NaN;
      DoubleDouble doubleDouble7 = DoubleDouble.fromDoubleDouble(doubleDouble6);
      doubleDouble5.isNaN();
      doubleDouble4.isNaN();
      doubleDouble6.getLowComponent();
      doubleDouble7.isInteger();
      DoubleDouble doubleDouble8 = doubleDouble7.multiply(doubleDouble2);
      doubleDouble4.floor();
      DoubleDouble doubleDouble9 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble10 = doubleDouble7.acos();
      doubleDouble10.HALF.sqr();
      doubleDouble7.cisia(doubleDouble10, doubleDouble5, doubleDouble8);
      DoubleDouble doubleDouble11 = DoubleDouble.atan2(doubleDouble3, doubleDouble9);
      doubleDouble7.add(doubleDouble11);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isZero();
      // Undeclared exception!
      try { 
        doubleDouble0.TWO_PI.cisia((DoubleDouble) null, (DoubleDouble) null, (DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.rint();
      doubleDouble1.PI_2.subtract(doubleDouble0);
      DoubleDouble doubleDouble2 = null;
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      // Undeclared exception!
      try { 
        doubleDouble0.cisia((DoubleDouble) null, (DoubleDouble) null, (DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      doubleDouble1.NaN.factorial((-1327));
      DoubleDouble doubleDouble2 = doubleDouble0.round();
      doubleDouble2.ONE.equals(doubleDouble0);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      doubleDouble0.isInteger();
      doubleDouble0.atan();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.atan();
      doubleDouble1.ZERO.dump();
      doubleDouble0.NaN.floor();
      doubleDouble0.abs();
      doubleDouble1.divide(doubleDouble0);
      doubleDouble1.E.toString();
      DoubleDouble doubleDouble2 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 3.6787944117144233);
      doubleDouble2.PI.toString();
      doubleDouble0.isInteger();
      doubleDouble0.asin();
      doubleDouble1.reciprocal();
      doubleDouble2.negate();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.PI.asin();
      DoubleDouble doubleDouble3 = doubleDouble2.ONE.negate();
      doubleDouble1.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble0.gt(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble0.abs();
      doubleDouble4.PI_2.dump();
      doubleDouble1.ge(doubleDouble2);
      doubleDouble3.acos();
      doubleDouble2.isInteger();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      doubleDouble1.lt(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.add(doubleDouble0);
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble3 = DoubleDouble.fromTwoDouble(0.3002973693586406, 0.3002973693586406);
      DoubleDouble doubleDouble4 = doubleDouble3.TWO_PI.subtract(doubleDouble1);
      doubleDouble0.ne(doubleDouble0);
      doubleDouble2.getLowComponent();
      // Undeclared exception!
      try { 
        doubleDouble4.PI.multiply((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.NaN.pow(doubleDouble1);
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      doubleDouble0.BernoulliB(0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      doubleDouble1.ZERO.cosh();
      DoubleDouble doubleDouble2 = DoubleDouble.NaN;
      doubleDouble0.tan();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-1.0), (-1.0));
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.exp();
      doubleDouble1.ONE.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.NaN.negate();
      doubleDouble2.ONE.toString();
      DoubleDouble doubleDouble3 = doubleDouble0.Ci();
      doubleDouble3.POSITIVE_INFINITY.factorial((-5));
      doubleDouble3.getHighComponent();
      Object object0 = new Object();
      doubleDouble2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-3166.0), (-3166.0));
      doubleDouble0.toString();
      DoubleDouble doubleDouble1 = DoubleDouble.fromString("-6332");
      doubleDouble0.ge(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble0.cos();
      DoubleDouble doubleDouble3 = DoubleDouble.fromDoubleDouble(doubleDouble2);
      DoubleDouble doubleDouble4 = doubleDouble0.log();
      DoubleDouble doubleDouble5 = doubleDouble2.sqrt();
      DoubleDouble doubleDouble6 = DoubleDouble.HALF;
      DoubleDouble doubleDouble7 = DoubleDouble.NaN;
      DoubleDouble doubleDouble8 = DoubleDouble.atan2(doubleDouble3, doubleDouble7);
      doubleDouble5.dump();
      DoubleDouble doubleDouble9 = DoubleDouble.fromTwoDouble(1.23259516440783E-32, 3259.93942651457);
      DoubleDouble doubleDouble10 = doubleDouble9.cos();
      doubleDouble10.ZERO.add(doubleDouble4);
      doubleDouble6.trunc();
      doubleDouble0.floor();
      DoubleDouble doubleDouble11 = doubleDouble8.min(doubleDouble1);
      doubleDouble3.multiply(doubleDouble8);
      doubleDouble9.intValue();
      doubleDouble1.add(doubleDouble11);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.TWO.cos();
      doubleDouble1.log10();
      doubleDouble0.isPositive();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("Q,7I^~hNZi~Z(ie<5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'Q' at position 1 in string Q,7I^~hNZi~Z(ie<5
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.PI.cos();
      DoubleDouble doubleDouble2 = DoubleDouble.PI_2;
      doubleDouble0.cisia(doubleDouble1, doubleDouble1, doubleDouble2);
      doubleDouble2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      doubleDouble0.dump();
      DoubleDouble doubleDouble1 = DoubleDouble.TWO;
      DoubleDouble doubleDouble2 = DoubleDouble.TWO_PI;
      doubleDouble0.ONE.pow(doubleDouble2);
      doubleDouble1.TWO_PI.sqrt();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        DoubleDouble.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(587.74185616);
      DoubleDouble doubleDouble1 = doubleDouble0.sin();
      doubleDouble1.exp();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble3 = doubleDouble0.trunc();
      doubleDouble3.ZERO.hashCode();
      doubleDouble0.E.log10();
      DoubleDouble doubleDouble4 = doubleDouble3.PI.ceil();
      doubleDouble0.toString();
      doubleDouble2.pow((-27));
      doubleDouble4.pow(doubleDouble2);
      doubleDouble2.sqrt();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble5 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      doubleDouble3.reciprocal();
      DoubleDouble doubleDouble6 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble6.min(doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble1.pow((-1));
      doubleDouble7.TWO_PI.toString();
      doubleDouble4.pow(doubleDouble6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.ONE;
      DoubleDouble doubleDouble3 = DoubleDouble.atan2(doubleDouble2, doubleDouble1);
      DoubleDouble doubleDouble4 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble0.cisia(doubleDouble2, doubleDouble4, doubleDouble4);
      DoubleDouble doubleDouble5 = doubleDouble0.log10();
      doubleDouble3.isNegative();
      doubleDouble0.trunc();
      doubleDouble0.hashCode();
      doubleDouble4.log10();
      DoubleDouble doubleDouble6 = doubleDouble2.ceil();
      doubleDouble6.toString();
      doubleDouble1.pow((-27));
      doubleDouble5.pow(doubleDouble4);
      doubleDouble3.sqrt();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ONE.reciprocal();
      doubleDouble0.ZERO.sinh();
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      doubleDouble3.POSITIVE_INFINITY.pow((-780));
      doubleDouble2.tan();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble1.reciprocal();
      doubleDouble2.HALF.rint();
      doubleDouble0.isInfinite();
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble((-1533.48535459));
      doubleDouble3.getHighComponent();
      doubleDouble1.isInteger();
      doubleDouble2.pow(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble1 = DoubleDouble.PI_2;
      doubleDouble1.tan();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDouble doubleDouble1 = doubleDouble0.ONE.log();
      DoubleDouble doubleDouble2 = doubleDouble1.TWO_PI.reciprocal();
      DoubleDouble doubleDouble3 = doubleDouble0.TWO.asin();
      doubleDouble1.ZERO.negate();
      DoubleDouble doubleDouble4 = doubleDouble1.PI_2.subtract(doubleDouble0);
      DoubleDouble doubleDouble5 = DoubleDouble.atan2(doubleDouble3, doubleDouble0);
      DoubleDouble doubleDouble6 = doubleDouble5.ONE.trunc();
      doubleDouble6.TWO.cosh();
      DoubleDouble.fromDoubleDouble(doubleDouble2);
      DoubleDouble doubleDouble7 = doubleDouble1.TWO_PI.asin();
      DoubleDouble doubleDouble8 = doubleDouble5.TWO_PI.sqrt();
      DoubleDouble doubleDouble9 = doubleDouble8.MINUS_ONE.asin();
      DoubleDouble doubleDouble10 = doubleDouble0.tan();
      DoubleDouble doubleDouble11 = doubleDouble1.cos();
      doubleDouble11.ONE.dump();
      doubleDouble3.ONE.divide(doubleDouble2);
      DoubleDouble doubleDouble12 = doubleDouble3.floor();
      doubleDouble12.Ci();
      DoubleDouble doubleDouble13 = doubleDouble12.sin();
      DoubleDouble doubleDouble14 = doubleDouble12.pow(doubleDouble2);
      doubleDouble12.TWO_PI.add(doubleDouble6);
      doubleDouble13.isInfinite();
      doubleDouble4.cisia(doubleDouble10, doubleDouble8, doubleDouble14);
      doubleDouble14.isNegative();
      doubleDouble9.doubleValue();
      DoubleDouble.fromTwoDouble((-3263.7236943115), 1.23259516440783E-32);
      doubleDouble7.log();
      doubleDouble13.floor();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-741.45));
      DoubleDouble doubleDouble1 = DoubleDouble.TWO;
      DoubleDouble doubleDouble2 = doubleDouble1.Ci();
      doubleDouble2.TWO.round();
      DoubleDouble doubleDouble3 = doubleDouble0.PI.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.PI_2.tan();
      doubleDouble3.MINUS_ONE.cosh();
      doubleDouble3.ZERO.trunc();
      DoubleDouble.fromDoubleDouble(doubleDouble4);
      DoubleDouble doubleDouble5 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble6 = doubleDouble5.E.BernoulliA(1879);
      DoubleDouble doubleDouble7 = doubleDouble6.tan();
      doubleDouble3.divide(doubleDouble5);
      DoubleDouble doubleDouble8 = DoubleDouble.fromTwoDouble((-1406.6876), (-1406.6876));
      doubleDouble8.HALF.reciprocal();
      doubleDouble8.E.cisia(doubleDouble1, doubleDouble0, doubleDouble3);
      doubleDouble0.PI.sin();
      DoubleDouble doubleDouble9 = doubleDouble0.pow((-2250));
      doubleDouble7.E.si();
      doubleDouble0.equals((Object) null);
      DoubleDouble doubleDouble10 = doubleDouble1.exp();
      doubleDouble10.NEGATIVE_INFINITY.pow(doubleDouble9);
      doubleDouble9.getLowComponent();
      doubleDouble2.factorial(46);
      doubleDouble7.intValue();
      doubleDouble3.exp();
      doubleDouble4.lt(doubleDouble5);
      doubleDouble10.floor();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("@\"wr<j 90-fm-fxRyX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character '@' at position 1 in string @\"wr<j 90-fm-fxRyX
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble1.dump();
      DoubleDouble doubleDouble2 = doubleDouble0.factorial((-1239429473));
      doubleDouble1.gt(doubleDouble0);
      doubleDouble1.divide(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      DoubleDouble doubleDouble2 = doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble3 = doubleDouble0.trunc();
      doubleDouble3.ZERO.hashCode();
      doubleDouble0.E.log10();
      doubleDouble3.BernoulliB((-1));
      doubleDouble3.lt(doubleDouble2);
      doubleDouble0.cos();
      // Undeclared exception!
      try { 
        doubleDouble1.lt((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(0.3025850929940457, 0.0);
      DoubleDouble doubleDouble1 = null;
      doubleDouble0.PI.dump();
      // Undeclared exception!
      try { 
        doubleDouble0.lt((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.negate();
      doubleDouble1.HALF.rint();
      DoubleDouble doubleDouble2 = DoubleDouble.NEGATIVE_INFINITY;
      doubleDouble0.ge(doubleDouble2);
      doubleDouble0.signum();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDouble doubleDouble1 = DoubleDouble.NaN;
      DoubleDouble.atan2(doubleDouble1, doubleDouble0);
      doubleDouble0.si();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = DoubleDouble.PI_2;
      doubleDouble0.tan();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-1897.3829840351));
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.TWO_PI.sinh();
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble0, doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble1.TWO.round();
      doubleDouble3.ZERO.cos();
      DoubleDouble doubleDouble4 = doubleDouble2.POSITIVE_INFINITY.reciprocal();
      DoubleDouble doubleDouble5 = doubleDouble2.ZERO.floor();
      doubleDouble5.ONE.sinh();
      doubleDouble0.gt(doubleDouble2);
      DoubleDouble doubleDouble6 = doubleDouble2.trunc();
      doubleDouble2.exp();
      doubleDouble4.isNegative();
      DoubleDouble doubleDouble7 = doubleDouble0.negate();
      DoubleDouble doubleDouble8 = doubleDouble7.MINUS_ONE.rint();
      DoubleDouble doubleDouble9 = doubleDouble6.PI_2.cosh();
      doubleDouble9.PI.rint();
      doubleDouble9.ONE.tan();
      doubleDouble6.pow(1062);
      doubleDouble2.getLowComponent();
      doubleDouble8.dump();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(17);
      doubleDouble2.HALF.acos();
      doubleDouble1.compareTo(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble2 = doubleDouble0.trunc();
      doubleDouble2.ZERO.hashCode();
      DoubleDouble doubleDouble3 = doubleDouble0.E.log10();
      DoubleDouble doubleDouble4 = doubleDouble2.PI.ceil();
      doubleDouble2.equals((Object) null);
      DoubleDouble doubleDouble5 = DoubleDouble.ZERO;
      doubleDouble5.pow(doubleDouble3);
      DoubleDouble doubleDouble6 = DoubleDouble.ONE;
      doubleDouble6.abs();
      doubleDouble4.doubleValue();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble0.factorial((-1623));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      doubleDouble0.ZERO.pow(4249);
      doubleDouble1.NEGATIVE_INFINITY.factorial((-2286));
      DoubleDouble doubleDouble2 = doubleDouble1.acos();
      doubleDouble2.cosh();
      doubleDouble0.ZERO.pow(doubleDouble1);
      doubleDouble0.TWO_PI.BernoulliA((-2286));
      DoubleDouble doubleDouble3 = doubleDouble0.reciprocal();
      doubleDouble3.E.acos();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      doubleDouble0.TWO_PI.BernoulliB(43);
      DoubleDouble doubleDouble1 = DoubleDouble.ONE;
      doubleDouble0.min(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble1 = doubleDouble0.asin();
      doubleDouble1.rint();
      doubleDouble0.getLowComponent();
      double double0 = DoubleDouble.EPS;
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ONE.reciprocal();
      DoubleDouble doubleDouble3 = doubleDouble0.ZERO.sinh();
      int int0 = (-1);
      doubleDouble1.NEGATIVE_INFINITY.round();
      DoubleDouble doubleDouble4 = doubleDouble3.MINUS_ONE.BernoulliB((-1));
      doubleDouble0.isInfinite();
      doubleDouble3.TWO.abs();
      DoubleDouble doubleDouble5 = doubleDouble3.NaN.rint();
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(0.3002973693586406, 0.3002973693586406);
      doubleDouble6.NEGATIVE_INFINITY.cisia(doubleDouble2, doubleDouble4, doubleDouble5);
      doubleDouble6.PI_2.acos();
      DoubleDouble doubleDouble7 = doubleDouble6.TWO_PI.subtract(doubleDouble1);
      doubleDouble1.cisia(doubleDouble4, doubleDouble4, doubleDouble4);
      doubleDouble0.PI_2.cisia(doubleDouble5, doubleDouble5, doubleDouble7);
      doubleDouble2.ne(doubleDouble0);
      doubleDouble1.isZero();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.acos();
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(1952257861);
      DoubleDouble doubleDouble3 = doubleDouble2.HALF.add(doubleDouble1);
      DoubleDouble.fromOneDouble(1952257861);
      doubleDouble3.getHighComponent();
      doubleDouble3.isInteger();
      doubleDouble3.pow(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = doubleDouble0.E.factorial((-812));
      doubleDouble0.NaN.acos();
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      doubleDouble2.add(doubleDouble0);
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble3 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      doubleDouble3.ONE.BernoulliA((-812));
      doubleDouble3.getHighComponent();
      doubleDouble2.isInteger();
      doubleDouble1.log();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.sqr();
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble2.compareTo(doubleDouble1);
      Object object0 = new Object();
      doubleDouble2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble0.BernoulliA(17);
      doubleDouble1.compareTo(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      doubleDouble0.MINUS_ONE.acos();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble1.reciprocal();
      doubleDouble1.dump();
      doubleDouble2.PI.hashCode();
      doubleDouble2.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      doubleDouble2.tan();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.PI;
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliB(0);
      doubleDouble2.pow(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.isPositive();
      doubleDouble0.asin();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.exp();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-741.45));
      DoubleDouble doubleDouble1 = DoubleDouble.TWO;
      DoubleDouble doubleDouble2 = doubleDouble1.Ci();
      DoubleDouble doubleDouble3 = doubleDouble2.TWO.round();
      DoubleDouble doubleDouble4 = doubleDouble0.PI.divide(doubleDouble1);
      DoubleDouble doubleDouble5 = doubleDouble4.PI_2.tan();
      DoubleDouble doubleDouble6 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble7 = doubleDouble4.ZERO.trunc();
      DoubleDouble doubleDouble8 = DoubleDouble.fromDoubleDouble(doubleDouble5);
      doubleDouble5.log10();
      doubleDouble1.isNegative();
      DoubleDouble doubleDouble9 = doubleDouble0.trunc();
      doubleDouble3.hashCode();
      doubleDouble7.log10();
      DoubleDouble doubleDouble10 = doubleDouble9.ceil();
      doubleDouble10.toString();
      DoubleDouble doubleDouble11 = DoubleDouble.fromString("-741");
      doubleDouble11.pow(0);
      doubleDouble8.pow(doubleDouble0);
      doubleDouble5.sqrt();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.HALF.rint();
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      DoubleDouble doubleDouble2 = DoubleDouble.TWO_PI;
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("+H6%k9#wqR8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'H' at position 2 in string +H6%k9#wqR8
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.si();
      DoubleDouble.atan2(doubleDouble1, doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble2.HALF.sinh();
      DoubleDouble doubleDouble3 = DoubleDouble.ZERO;
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(587.74185616);
      DoubleDouble doubleDouble1 = doubleDouble0.tan();
      assertEquals(0.2947066129330519, doubleDouble1.doubleValue(), 0.01);
      
      doubleDouble0.E.ceil();
      doubleDouble0.BernoulliB((-2313));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = 587.74185616;
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      // Undeclared exception!
      try { 
        doubleDouble0.add((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(1.2246467991473532E-16);
      DoubleDouble doubleDouble1 = null;
      // Undeclared exception!
      try { 
        doubleDouble0.add((DoubleDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = doubleDouble0.POSITIVE_INFINITY.abs();
      doubleDouble1.ZERO.hashCode();
      doubleDouble0.sqr();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      doubleDouble0.NEGATIVE_INFINITY.trunc();
      doubleDouble0.min(doubleDouble0);
      doubleDouble0.exp();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(587.74185616);
      DoubleDouble doubleDouble1 = doubleDouble0.rint();
      doubleDouble1.getLowComponent();
      doubleDouble1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.MINUS_ONE.dump();
      doubleDouble0.getHighComponent();
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.reciprocal();
      DoubleDouble doubleDouble2 = DoubleDouble.fromTwoDouble(361.4673, 626.227);
      DoubleDouble doubleDouble3 = doubleDouble0.PI_2.rint();
      doubleDouble0.intValue();
      doubleDouble0.isPositive();
      doubleDouble3.TWO_PI.si();
      doubleDouble0.hashCode();
      doubleDouble0.isPositive();
      DoubleDouble doubleDouble4 = doubleDouble0.ceil();
      DoubleDouble doubleDouble5 = doubleDouble4.TWO_PI.abs();
      DoubleDouble doubleDouble6 = doubleDouble4.HALF.si();
      DoubleDouble doubleDouble7 = doubleDouble0.round();
      DoubleDouble doubleDouble8 = DoubleDouble.fromDoubleDouble(doubleDouble3);
      doubleDouble8.E.negate();
      doubleDouble6.NEGATIVE_INFINITY.reciprocal();
      DoubleDouble doubleDouble9 = doubleDouble6.min(doubleDouble5);
      doubleDouble9.PI.sin();
      doubleDouble5.isInteger();
      doubleDouble5.getLowComponent();
      doubleDouble2.log10();
      doubleDouble7.le(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      DoubleDouble doubleDouble5 = doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble6 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      doubleDouble5.reciprocal();
      CacheMap<DoubleDouble, Object> cacheMap0 = new CacheMap<DoubleDouble, Object>(1);
      doubleDouble6.ZERO.equals(cacheMap0);
      doubleDouble5.add(doubleDouble2);
      doubleDouble4.BernoulliB(1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      doubleDouble0.MINUS_ONE.log10();
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble1.compareTo(doubleDouble0);
      doubleDouble2.BernoulliA(0);
      doubleDouble2.sqr();
      doubleDouble1.floor();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble1.E.multiply(doubleDouble0);
      doubleDouble1.BernoulliA((-3590));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble1.asin();
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      // Undeclared exception!
      try { 
        DoubleDouble.atan2(doubleDouble0, doubleDouble1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.rint();
      doubleDouble1.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble1.subtract(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble1.rint();
      doubleDouble0.signum();
      DoubleDouble doubleDouble3 = doubleDouble0.asin();
      DoubleDouble doubleDouble4 = doubleDouble2.divide(doubleDouble3);
      doubleDouble0.sin();
      DoubleDouble doubleDouble5 = DoubleDouble.TWO_PI;
      doubleDouble5.tan();
      DoubleDouble doubleDouble6 = doubleDouble3.asin();
      doubleDouble2.isInteger();
      doubleDouble6.toString();
      doubleDouble4.tan();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.ceil();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.acos();
      doubleDouble1.sqrt();
      DoubleDouble doubleDouble2 = doubleDouble0.TWO_PI.sinh();
      DoubleDouble doubleDouble3 = doubleDouble1.TWO_PI.Ci();
      DoubleDouble doubleDouble4 = doubleDouble3.TWO_PI.cosh();
      doubleDouble4.ceil();
      doubleDouble0.dump();
      DoubleDouble doubleDouble5 = DoubleDouble.PI_2;
      DoubleDouble doubleDouble6 = doubleDouble0.max(doubleDouble5);
      doubleDouble6.MINUS_ONE.trunc();
      DoubleDouble doubleDouble7 = DoubleDouble.TWO;
      DoubleDouble.atan2(doubleDouble7, doubleDouble7);
      DoubleDouble doubleDouble8 = doubleDouble0.asin();
      DoubleDouble doubleDouble9 = DoubleDouble.fromDoubleDouble(doubleDouble5);
      doubleDouble9.hashCode();
      doubleDouble6.cisia(doubleDouble2, doubleDouble8, doubleDouble4);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.acos();
      DoubleDouble doubleDouble2 = doubleDouble1.sqrt();
      doubleDouble2.sinh();
      DoubleDouble doubleDouble3 = doubleDouble1.Ci();
      doubleDouble2.cosh();
      DoubleDouble doubleDouble4 = DoubleDouble.HALF;
      DoubleDouble doubleDouble5 = doubleDouble4.ceil();
      doubleDouble4.dump();
      DoubleDouble doubleDouble6 = DoubleDouble.PI_2;
      doubleDouble5.max(doubleDouble3);
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("com.accelad.math.doubledouble.DoubleDoubleCache");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.doubledouble.DoubleDoubleCache
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      doubleDouble0.ZERO.cos();
      doubleDouble2.hashCode();
      doubleDouble2.ge(doubleDouble0);
      doubleDouble1.pow(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.getHighComponent();
      doubleDouble0.isInteger();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDouble doubleDouble1 = doubleDouble0.cosh();
      DoubleDouble doubleDouble2 = doubleDouble1.negate();
      doubleDouble2.TWO.reciprocal();
      doubleDouble1.min(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble1.reciprocal();
      doubleDouble0.isInfinite();
      DoubleDouble doubleDouble3 = DoubleDouble.NaN;
      DoubleDouble doubleDouble4 = doubleDouble2.divide(doubleDouble0);
      doubleDouble0.min(doubleDouble3);
      doubleDouble4.sin();
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = new Object();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      doubleDouble0.Ci();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.HALF;
      DoubleDouble doubleDouble2 = doubleDouble0.max(doubleDouble1);
      doubleDouble2.isInteger();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      doubleDouble0.PI_2.sqrt();
      DoubleDouble doubleDouble1 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble0, doubleDouble1);
      doubleDouble2.intValue();
      DoubleDouble doubleDouble3 = doubleDouble0.pow(doubleDouble2);
      DoubleDouble doubleDouble4 = doubleDouble0.add(doubleDouble3);
      doubleDouble3.PI_2.equals((Object) null);
      DoubleDouble doubleDouble5 = DoubleDouble.fromTwoDouble(1.0, 0.30258509299095226);
      DoubleDouble doubleDouble6 = doubleDouble2.sqr();
      doubleDouble1.PI_2.multiply(doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble6.ONE.Ci();
      DoubleDouble doubleDouble8 = DoubleDouble.HALF;
      doubleDouble7.max(doubleDouble6);
      doubleDouble4.cosh();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = doubleDouble0.TWO.log10();
      DoubleDouble doubleDouble2 = doubleDouble0.PI_2.negate();
      DoubleDouble doubleDouble3 = doubleDouble1.NaN.asin();
      doubleDouble0.getHighComponent();
      DoubleDouble doubleDouble4 = doubleDouble0.trunc();
      DoubleDouble doubleDouble5 = doubleDouble1.round();
      DoubleDouble doubleDouble6 = doubleDouble1.log();
      doubleDouble1.isInfinite();
      doubleDouble6.NaN.subtract(doubleDouble1);
      DoubleDouble doubleDouble7 = doubleDouble3.ceil();
      DoubleDouble doubleDouble8 = doubleDouble7.ZERO.BernoulliA((-557));
      doubleDouble8.E.cosh();
      doubleDouble6.ZERO.Ci();
      doubleDouble7.sin();
      doubleDouble6.isInfinite();
      doubleDouble4.isInfinite();
      DoubleDouble doubleDouble9 = doubleDouble5.si();
      doubleDouble9.TWO_PI.abs();
      doubleDouble3.abs();
      doubleDouble5.max(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble1 = DoubleDouble.fromOneDouble((-1568.38));
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble0, doubleDouble1);
      doubleDouble0.le(doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.acos();
      DoubleDouble doubleDouble2 = doubleDouble0.BernoulliA(1952257861);
      doubleDouble2.HALF.add(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble2.trunc();
      DoubleDouble doubleDouble4 = doubleDouble3.sin();
      Object object0 = new Object();
      DoubleDouble doubleDouble5 = doubleDouble4.NaN.tan();
      doubleDouble5.NaN.log10();
      doubleDouble0.equals(object0);
      doubleDouble3.pow(doubleDouble4);
      doubleDouble1.abs();
      doubleDouble2.doubleValue();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble1.isInteger();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(0.30258509283196067);
      DoubleDouble doubleDouble1 = doubleDouble0.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      DoubleDouble doubleDouble3 = doubleDouble2.divide(doubleDouble0);
      doubleDouble3.divide(doubleDouble1);
      doubleDouble3.BernoulliA(0);
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble((-1.7397484608419915), (-2638.0432627));
      doubleDouble1.reciprocal();
      CacheMap<DoubleDouble, Object> cacheMap0 = new CacheMap<DoubleDouble, Object>((-1));
      DoubleDouble doubleDouble5 = DoubleDouble.atan2(doubleDouble1, doubleDouble1);
      doubleDouble4.equals(doubleDouble5);
      doubleDouble5.add(doubleDouble3);
      doubleDouble2.BernoulliB(0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      doubleDouble0.compareTo(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      doubleDouble0.PI_2.reciprocal();
      doubleDouble0.isNegative();
      doubleDouble0.ge(doubleDouble0);
      doubleDouble0.cos();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.divide(doubleDouble0);
      doubleDouble2.cos();
      DoubleDouble.fromOneDouble(2493);
      DoubleDouble.atan2(doubleDouble1, doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.ZERO.cosh();
      doubleDouble0.min(doubleDouble1);
      doubleDouble0.exp();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.MINUS_ONE.atan();
      doubleDouble1.ZERO.dump();
      DoubleDouble doubleDouble2 = doubleDouble0.NaN.floor();
      doubleDouble0.abs();
      doubleDouble1.divide(doubleDouble0);
      doubleDouble1.E.toString();
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 3.6787944117144233);
      DoubleDouble doubleDouble3 = DoubleDouble.TWO;
      DoubleDouble doubleDouble4 = DoubleDouble.atan2(doubleDouble2, doubleDouble1);
      doubleDouble4.asin();
      DoubleDouble doubleDouble5 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      doubleDouble5.hashCode();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = DoubleDouble.TWO_PI;
      doubleDouble2.cisia(doubleDouble1, doubleDouble1, doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.si();
      DoubleDouble doubleDouble2 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble3 = doubleDouble0.PI.asin();
      doubleDouble3.ONE.negate();
      doubleDouble2.POSITIVE_INFINITY.cisia(doubleDouble0, doubleDouble0, doubleDouble0);
      doubleDouble0.gt(doubleDouble2);
      DoubleDouble doubleDouble4 = doubleDouble0.abs();
      doubleDouble1.doubleValue();
      DoubleDouble.fromTwoDouble(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDouble doubleDouble5 = DoubleDouble.atan2(doubleDouble4, doubleDouble3);
      DoubleDouble doubleDouble6 = doubleDouble1.add(doubleDouble3);
      doubleDouble2.abs();
      doubleDouble5.round();
      doubleDouble4.negate();
      DoubleDouble doubleDouble7 = DoubleDouble.TWO;
      doubleDouble7.add(doubleDouble0);
      doubleDouble6.sqrt();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble(1336.677);
      DoubleDouble.atan2(doubleDouble0, doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble0.ONE.dump();
      doubleDouble0.factorial(244);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ZERO;
      DoubleDouble doubleDouble1 = doubleDouble0.PI_2.rint();
      doubleDouble1.equals(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble.fromOneDouble(1.23259516440783E-32);
      DoubleDouble doubleDouble1 = DoubleDouble.PI;
      doubleDouble0.round();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      doubleDouble3.divide(doubleDouble1);
      doubleDouble2.BernoulliA(0);
      DoubleDouble doubleDouble4 = DoubleDouble.fromTwoDouble(0, 1.23259516440783E-32);
      DoubleDouble doubleDouble5 = doubleDouble3.reciprocal();
      DoubleDouble doubleDouble6 = DoubleDouble.POSITIVE_INFINITY;
      doubleDouble6.min(doubleDouble4);
      doubleDouble1.pow((-1));
      DoubleDouble doubleDouble7 = doubleDouble5.trunc();
      DoubleDouble doubleDouble8 = DoubleDouble.PI;
      DoubleDouble.atan2(doubleDouble8, doubleDouble1);
      doubleDouble7.compareTo(doubleDouble8);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble2 = doubleDouble0.trunc();
      doubleDouble2.ZERO.hashCode();
      doubleDouble0.E.log10();
      DoubleDouble doubleDouble3 = doubleDouble2.PI.ceil();
      doubleDouble0.HALF.toString();
      DoubleDouble doubleDouble4 = doubleDouble1.pow(552);
      doubleDouble4.MINUS_ONE.pow(doubleDouble2);
      doubleDouble3.sqrt();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3717.40055668608));
      doubleDouble0.MINUS_ONE.atan();
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.subtract(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble1.NaN.BernoulliA(1);
      DoubleDouble.fromTwoDouble((-3467.0186461), 0.3025850929939852);
      DoubleDouble doubleDouble2 = DoubleDouble.PI;
      DoubleDouble.fromOneDouble(0.3025850929939852);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.compareTo(doubleDouble0);
      doubleDouble0.BernoulliA(0);
      DoubleDouble doubleDouble1 = DoubleDouble.TWO;
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.BernoulliA(6);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      doubleDouble0.isZero();
      DoubleDouble doubleDouble1 = doubleDouble0.negate();
      doubleDouble1.gt(doubleDouble0);
      doubleDouble1.sqrt();
      doubleDouble0.negate();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      doubleDouble1.NaN.BernoulliA(1);
      DoubleDouble doubleDouble2 = DoubleDouble.fromTwoDouble((-3467.0186461), 0.3025850929939852);
      doubleDouble1.add(doubleDouble2);
      doubleDouble2.BernoulliB(0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      doubleDouble0.TWO.floor();
      doubleDouble0.ZERO.cos();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("+;=R]h[~3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character ';' at position 2 in string +;=R]h[~3
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-701.3822298717), 4328.29);
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble0.PI.cisia(doubleDouble1, doubleDouble1, doubleDouble1);
      doubleDouble0.HALF.log10();
      doubleDouble0.isNegative();
      DoubleDouble doubleDouble2 = doubleDouble0.trunc();
      doubleDouble2.ZERO.hashCode();
      doubleDouble0.E.log10();
      doubleDouble2.PI.ceil();
      doubleDouble0.toString();
      DoubleDouble doubleDouble3 = DoubleDouble.fromString("3626.90777012829994419007562101");
      doubleDouble3.pow(0);
      doubleDouble0.pow(doubleDouble1);
      doubleDouble1.sqrt();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("_}`+xRwNq!DW<UzC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character '_' at position 1 in string _}`+xRwNq!DW<UzC
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = doubleDouble0.trunc();
      DoubleDouble doubleDouble2 = doubleDouble0.cosh();
      doubleDouble2.min(doubleDouble1);
      doubleDouble2.exp();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble1.cisia(doubleDouble0, doubleDouble0, doubleDouble2);
      doubleDouble0.sqrt();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDouble doubleDouble1 = doubleDouble0.NEGATIVE_INFINITY.trunc();
      DoubleDouble doubleDouble2 = doubleDouble1.ZERO.cosh();
      doubleDouble0.signum();
      doubleDouble0.compareTo(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble0.divide(doubleDouble1);
      DoubleDouble doubleDouble4 = doubleDouble3.divide(doubleDouble1);
      DoubleDouble doubleDouble5 = doubleDouble4.cos();
      DoubleDouble doubleDouble6 = DoubleDouble.fromDoubleDouble(doubleDouble5);
      DoubleDouble doubleDouble7 = doubleDouble6.TWO_PI.log();
      DoubleDouble doubleDouble8 = doubleDouble4.sqrt();
      DoubleDouble doubleDouble9 = DoubleDouble.HALF;
      DoubleDouble.atan2(doubleDouble9, doubleDouble7);
      doubleDouble8.PI_2.dump();
      doubleDouble8.ZERO.cos();
      DoubleDouble doubleDouble10 = doubleDouble4.MINUS_ONE.trunc();
      doubleDouble4.floor();
      doubleDouble8.min(doubleDouble2);
      doubleDouble10.HALF.multiply(doubleDouble2);
      doubleDouble2.intValue();
      doubleDouble10.add(doubleDouble8);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      doubleDouble0.TWO_PI.factorial(0);
      DoubleDouble doubleDouble1 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDouble doubleDouble2 = doubleDouble0.add(doubleDouble1);
      DoubleDouble doubleDouble3 = doubleDouble1.reciprocal();
      doubleDouble3.NEGATIVE_INFINITY.asin();
      doubleDouble3.trunc();
      doubleDouble0.PI_2.subtract(doubleDouble2);
      doubleDouble3.si();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("com.accelad.math.doubledouble.DoubleDouble");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.doubledouble.DoubleDouble
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(2149.301, 2149.301);
      DoubleDouble doubleDouble1 = doubleDouble0.asin();
      doubleDouble0.min(doubleDouble1);
      doubleDouble0.sin();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-3467.0186461));
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      doubleDouble1.le(doubleDouble1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      doubleDouble0.isInfinite();
      doubleDouble0.isInteger();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      doubleDouble0.acos();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(2149.301, 2149.301);
      doubleDouble0.isInteger();
      DoubleDouble doubleDouble1 = doubleDouble0.asin();
      DoubleDouble doubleDouble2 = DoubleDouble.E;
      doubleDouble0.cisia(doubleDouble1, doubleDouble1, doubleDouble2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      doubleDouble0.rint();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDouble doubleDouble1 = doubleDouble0.sqrt();
      doubleDouble1.add(doubleDouble0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DoubleDouble.fromOneDouble(2493);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      doubleDouble0.si();
      doubleDouble0.sin();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      doubleDouble0.asin();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble((-1305.0), (-1305.0));
      assertEquals((-2610.0), doubleDouble0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDouble doubleDouble1 = DoubleDouble.fromDoubleDouble(doubleDouble0);
      DoubleDouble doubleDouble2 = doubleDouble1.sqrt();
      doubleDouble2.BernoulliB((-378));
      assertTrue(doubleDouble2.isNaN());
      assertTrue(doubleDouble1.isNaN());
  }
}
