/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:50:49 GMT 2022
 */

package com.accelad.math.doubledouble;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDoubleCache;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDoubleCache_ESTest extends DoubleDoubleCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleDoubleCache<Object> doubleDoubleCache0 = new DoubleDoubleCache<Object>();
      Double double0 = new Double(2006.2463840802054);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Object object0 = doubleDoubleCache0.get(double0, double0, supplier0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleDoubleCache<Object> doubleDoubleCache0 = new DoubleDoubleCache<Object>();
      Double double0 = new Double(2006.2463840802054);
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      Object object1 = doubleDoubleCache0.get(double0, double0, supplier0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleDoubleCache<Integer> doubleDoubleCache0 = new DoubleDoubleCache<Integer>();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        doubleDoubleCache0.get(double0, (Double) null, (Supplier<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }
}
