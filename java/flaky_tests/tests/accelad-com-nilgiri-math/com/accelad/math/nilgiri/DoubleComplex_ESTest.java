/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:52:18 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.nilgiri.DoubleComplex;
import com.accelad.math.nilgiri.DoubleReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleComplex_ESTest extends DoubleComplex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = new DoubleComplex();
      DoubleComplex doubleComplex2 = doubleComplex0.plus(doubleComplex1);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex2.re_double(), 0.01);
      assertEquals(1.0, doubleComplex2.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(3047.735846307217, doubleComplex2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      double double0 = doubleComplex0.re_double();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 1.0);
      double double0 = doubleComplex0.re_double();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleReal doubleReal0 = doubleComplex0.re();
      assertEquals("3047.735682251", doubleReal0.toString());
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      DoubleReal doubleReal0 = doubleComplex1.re();
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals((-1.0), doubleComplex1.im_double(), 0.01);
      assertEquals((-3047.735682251), doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      DoubleComplex doubleComplex2 = doubleComplex1.prod(4075.618567245723);
      assertEquals((-4075.618567245723), doubleComplex2.im_double(), 0.01);
      assertEquals((-4075.618567245723), doubleComplex2.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      DoubleComplex doubleComplex2 = doubleComplex1.prod((-490.57136746983));
      assertEquals(245.285683734915, doubleComplex2.im_double(), 0.01);
      assertEquals(240660.39158118653, doubleComplex2.modulus(), 0.01);
      assertEquals(240660.266581219, doubleComplex2.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.pow(0);
      assertEquals(240660.516581219, doubleComplex1.re_double(), 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals(5.791748424113919E10, doubleComplex1.absolute_square(), 0.01);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.pow((-249));
      assertEquals(116974.58219593034, doubleComplex1.modulus(), 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals((-124.49999444684103), doubleComplex1.im_double(), 0.01);
      assertEquals((-116974.51594113928), doubleComplex1.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      DoubleComplex doubleComplex2 = doubleComplex1.plus(doubleComplex1);
      assertEquals((-2.0), doubleComplex2.im_double(), 0.01);
      assertEquals(4.0, doubleComplex2.absolute_square(), 0.01);
      assertEquals(0.0, doubleComplex2.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleComplex doubleComplex1 = doubleComplex0.plus(doubleComplex0);
      assertEquals(0.0, doubleComplex1.absolute_square(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1680.4652682431888), 145.810265361228);
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      DoubleComplex doubleComplex2 = doubleComplex1.plus(0.0);
      assertEquals(1680.4652682431888, doubleComplex2.re_double(), 0.01);
      assertEquals((-145.810265361228), doubleComplex2.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.plus((-1.0));
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(1.0, doubleComplex0.absolute_square(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = new DoubleComplex();
      DoubleComplex doubleComplex2 = doubleComplex0.div(doubleComplex1);
      DoubleComplex doubleComplex3 = doubleComplex2.negate();
      assertEquals(Double.NaN, doubleComplex3.re_double(), 0.01);
      assertEquals(Double.NaN, doubleComplex3.im_double(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      assertEquals(-0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(-0.0, doubleComplex1.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 2714.25);
      DoubleComplex doubleComplex1 = doubleComplex0.mul(doubleComplex0);
      assertEquals(5.427495898061025E13, doubleComplex1.absolute_square(), 0.01);
      assertEquals(1.0, doubleComplex0.re_double(), 0.01);
      assertEquals(2714.25, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      DoubleComplex doubleComplex2 = new DoubleComplex(1.0, 0.0);
      DoubleComplex doubleComplex3 = doubleComplex2.mul(doubleComplex1);
      assertEquals(0.0, doubleComplex3.re_double(), 0.01);
      assertEquals((-1.0), doubleComplex3.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(1.0, doubleComplex3.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.mul(doubleComplex0);
      assertEquals(0.0, doubleComplex1.modulus(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(2772.6734482170373, 2772.6734482170373);
      DoubleComplex doubleComplex1 = doubleComplex0.mul((-3512L));
      assertEquals((-9737629.150138235), doubleComplex1.re_double(), 0.01);
      assertEquals((-9737629.150138235), doubleComplex1.im_double(), 0.01);
      assertEquals(1.8964284293124375E14, doubleComplex1.absolute_square(), 0.01);
      assertEquals(2772.6734482170373, doubleComplex0.im_double(), 0.01);
      assertEquals(2772.6734482170373, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1860.168017667597), 742.2320972281);
      DoubleComplex doubleComplex1 = doubleComplex0.mul((-1L));
      assertEquals(742.2320972281, doubleComplex0.im_double(), 0.01);
      assertEquals(1860.168017667597, doubleComplex1.re_double(), 0.01);
      assertEquals((-1860.168017667597), doubleComplex0.re_double(), 0.01);
      assertEquals((-742.2320972281), doubleComplex1.im_double(), 0.01);
      assertEquals(2002.7814509099642, doubleComplex1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.mul(0L);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.absolute_square(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      double double0 = doubleComplex0.modulus();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = new DoubleComplex();
      DoubleComplex doubleComplex2 = doubleComplex0.div(doubleComplex1);
      DoubleComplex doubleComplex3 = doubleComplex2.minus(doubleComplex0);
      DoubleComplex doubleComplex4 = doubleComplex3.plus(doubleComplex3);
      assertEquals(Double.NaN, doubleComplex4.re_double(), 0.01);
      assertEquals(Double.NaN, doubleComplex4.im_double(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = new DoubleComplex();
      DoubleComplex doubleComplex2 = doubleComplex1.minus(doubleComplex0);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals((-3047.735682251), doubleComplex2.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals((-1.0), doubleComplex2.im_double(), 0.01);
      assertEquals(9288693.788865969, doubleComplex2.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.minus(0.0);
      assertEquals(3047.735682251, doubleComplex1.re_double(), 0.01);
      assertEquals(1.0, doubleComplex1.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals(9288693.788865969, doubleComplex1.absolute_square(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleComplex doubleComplex1 = doubleComplex0.minus(0.0);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.inverse();
      assertEquals(0.002038437274376373, doubleComplex1.im_double(), 0.01);
      assertEquals((-0.002038437274376373), doubleComplex1.re_double(), 0.01);
      assertEquals(0.0028827856394699125, doubleComplex1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.inverse();
      assertEquals((-1.0), doubleComplex1.im_double(), 0.01);
      assertEquals(1.0, doubleComplex1.re_double(), 0.01);
      assertEquals(1.4142135623730951, doubleComplex1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.inverse();
      assertEquals(1.0, doubleComplex0.modulus(), 0.01);
      assertEquals(-0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      double double0 = doubleComplex0.im_double();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.inverse();
      DoubleReal doubleReal0 = doubleComplex1.im();
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.absolute_square(), 0.01);
      assertEquals(Double.NaN, doubleReal0.modulus(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(Double.NaN, doubleComplex1.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, (-1407.231422110874));
      DoubleReal doubleReal0 = doubleComplex0.im();
      assertEquals((-1407.231422110874), doubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.div(doubleComplex0);
      DoubleComplex doubleComplex2 = doubleComplex1.divide((-490.57136746983));
      assertEquals(1.0, doubleComplex1.re_double(), 0.01);
      assertEquals(-0.0, doubleComplex2.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(4.155235154543121E-6, doubleComplex2.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.divide(1306.7585591335);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals(2.3322867571435126, doubleComplex1.re_double(), 0.01);
      assertEquals(2.332286882687911, doubleComplex1.modulus(), 0.01);
      assertEquals(7.652523054167643E-4, doubleComplex1.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.divide((-5572.244663));
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(-0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(-0.0, doubleComplex1.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      DoubleComplex doubleComplex2 = doubleComplex0.div(doubleComplex1);
      assertEquals(1.0, doubleComplex2.modulus(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals((-1.0), doubleComplex2.re_double(), 0.01);
      assertEquals(0.0, doubleComplex2.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1860.168017667597), 742.2320972281);
      DoubleComplex doubleComplex1 = new DoubleComplex((-1860.168017667597), 2.0);
      DoubleComplex doubleComplex2 = doubleComplex0.div(doubleComplex1);
      assertEquals(1.0004278515009764, doubleComplex2.re_double(), 0.01);
      assertEquals((-0.39793783921371223), doubleComplex2.im_double(), 0.01);
      assertEquals(1.159210409936938, doubleComplex2.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-2498.61237), 0.0);
      DoubleComplex doubleComplex1 = doubleComplex0.prod(0.0);
      DoubleComplex doubleComplex2 = doubleComplex1.div(doubleComplex0);
      assertEquals(0.0, doubleComplex1.im_double(), 0.01);
      assertEquals((-2498.61237), doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex2.re_double(), 0.01);
      assertEquals(0.0, doubleComplex2.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      DoubleComplex doubleComplex2 = doubleComplex1.minus(3976.658683453);
      assertEquals((-490.57136746983), doubleComplex0.re_double(), 0.01);
      assertEquals((-0.5), doubleComplex2.im_double(), 0.01);
      assertEquals(1.995614457786799E7, doubleComplex2.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      DoubleComplex doubleComplex2 = doubleComplex1.conjugate();
      assertEquals(0.0, doubleComplex2.re_double(), 0.01);
      assertEquals(1.0, doubleComplex2.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals((-1.0), doubleComplex1.im_double(), 0.01);
      assertEquals(1.0, doubleComplex2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      assertEquals(3047.735682251, doubleComplex1.re_double(), 0.01);
      assertEquals((-1.0), doubleComplex1.im_double(), 0.01);
      assertEquals(3047.735846307217, doubleComplex1.modulus(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(0.0, 0.0);
      double double0 = doubleComplex0.absolute_square();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      // Undeclared exception!
      try { 
        doubleComplex0.plus((DoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      // Undeclared exception!
      try { 
        doubleComplex0.mul((DoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      // Undeclared exception!
      try { 
        doubleComplex0.minus((DoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      // Undeclared exception!
      try { 
        doubleComplex0.div((DoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.mul(doubleComplex0);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(8.627983230331722E13, doubleComplex1.absolute_square(), 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      double double0 = doubleComplex0.absolute_square();
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(9288693.788865969, double0, 0.01);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.divide((-490.57136746983));
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals(1.0000010388087885, doubleComplex1.absolute_square(), 0.01);
      assertEquals((-0.0010192196959614645), doubleComplex1.im_double(), 0.01);
      assertEquals((-490.57136746983), doubleComplex0.re_double(), 0.01);
      assertEquals(1.0, doubleComplex1.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      double double0 = doubleComplex0.getReal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals((-490.57136746983), doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1680.4652682431888), 145.810265361228);
      DoubleComplex doubleComplex1 = doubleComplex0.plus(0.0);
      assertEquals(145.810265361228, doubleComplex0.im_double(), 0.01);
      assertEquals((-1680.4652682431888), doubleComplex0.re_double(), 0.01);
      assertEquals((-1680.4652682431888), doubleComplex1.re_double(), 0.01);
      assertEquals(145.810265361228, doubleComplex1.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = (DoubleComplex)doubleComplex0.clone();
      assertEquals((-490.57136746983), doubleComplex1.re_double(), 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals((-490.57136746983), doubleComplex0.re_double(), 0.01);
      assertEquals(0.5, doubleComplex1.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(3047.735682251, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.mul(435L);
      assertEquals(3047.735682251, doubleComplex0.re_double(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
      assertEquals(1325765.021779185, doubleComplex1.re_double(), 0.01);
      assertEquals(435.0, doubleComplex1.im_double(), 0.01);
      assertEquals(1.7576530821981626E12, doubleComplex1.absolute_square(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1680.4652682431888), 145.810265361228);
      double double0 = doubleComplex0.modulus();
      assertEquals((-1680.4652682431888), doubleComplex0.re_double(), 0.01);
      assertEquals(145.810265361228, doubleComplex0.im_double(), 0.01);
      assertEquals(1686.7792242188557, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.plus(doubleComplex0);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals(981.1432445493757, doubleComplex1.modulus(), 0.01);
      assertEquals((-490.57136746983), doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-1680.4652682431888), 145.810265361228);
      DoubleComplex doubleComplex1 = doubleComplex0.negate();
      double double0 = doubleComplex1.im_double();
      assertEquals((-145.810265361228), double0, 0.01);
      assertEquals(145.810265361228, doubleComplex0.im_double(), 0.01);
      assertEquals((-1680.4652682431888), doubleComplex0.re_double(), 0.01);
      assertEquals(1680.4652682431888, doubleComplex1.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      DoubleComplex doubleComplex1 = doubleComplex0.pow(682);
      assertEquals((-43222.940898206776), doubleComplex1.re_double(), 0.01);
      assertEquals(340.99988589590777, doubleComplex1.im_double(), 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
      assertEquals(43224.2860069667, doubleComplex1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      String string0 = doubleComplex0.toString();
      assertEquals("(0.0 + i 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(1.0, 1.0);
      DoubleComplex doubleComplex1 = doubleComplex0.minus(doubleComplex0);
      assertEquals(1.0, doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleComplex1.modulus(), 0.01);
      assertEquals(1.0, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex(552.7, 552.7);
      double double0 = doubleComplex0.im_double();
      assertEquals(552.7, doubleComplex0.re_double(), 0.01);
      assertEquals(552.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex((-490.57136746983), 0.5);
      double double0 = doubleComplex0.re_double();
      assertEquals((-490.57136746983), double0, 0.01);
      assertEquals(0.5, doubleComplex0.im_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleComplex doubleComplex1 = doubleComplex0.conjugate();
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(-0.0, doubleComplex1.im_double(), 0.01);
      assertEquals(0.0, doubleComplex1.re_double(), 0.01);
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleReal doubleReal0 = doubleComplex0.re();
      assertEquals(0.0, doubleComplex0.im_double(), 0.01);
      assertEquals(0.0, doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DoubleComplex doubleComplex0 = new DoubleComplex();
      DoubleReal doubleReal0 = doubleComplex0.im();
      assertEquals(0.0, doubleComplex0.re_double(), 0.01);
      assertEquals(0.0, doubleReal0.getReal(), 0.01);
  }
}
