/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:41:21 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import com.accelad.math.nilgiri.DoubleDoubleRealFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDoubleRealFactory_ESTest extends DoubleDoubleRealFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.sin();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.hypot(doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(0.6927112292044428, doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val((-1816.0));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sgn(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.ifx(doubleDoubleReal0, doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleRealFactory0.pwrs(doubleDoubleReal1, doubleDoubleReal2);
      assertEquals((-1.0), doubleDoubleReal3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val((-1.0));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.uramp(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(2424.359793059775);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.tan(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.u(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.acosh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.inv(doubleDoubleReal1);
      assertEquals(1.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.buf(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.u(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.ifx(doubleDoubleReal1, doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(0.5, doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(0.0);
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.ifx(doubleDoubleReal1, doubleDoubleReal0, doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.mc(doubleDoubleReal0, doubleDoubleReal0);
      assertEquals(0.25, doubleDoubleReal1.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.flat(doubleDoubleReal0);
      assertEquals((-0.4), doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atan(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.max(doubleDoubleReal1, doubleDoubleReal0);
      assertEquals(1.0, doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atan(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.min(doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(1.1071487177940904, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val(0.0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.tan(doubleDoubleReal0);
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(0.0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.pwr(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.tan(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.tan(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.tanh(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.square(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.pow(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.square(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.one();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.mc(doubleDoubleReal0, doubleDoubleReal0);
      doubleDoubleRealFactory0.sinh(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.pow(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.flat(doubleDoubleReal1);
      doubleDoubleRealFactory0.sinh(doubleDoubleReal2);
      assertEquals((-1.0), doubleDoubleReal2.getReal(), 0.01);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sin(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sin(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sgn(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.round(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.round(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-2763.9078244));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.round(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.random(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.random(doubleDoubleReal1);
      assertEquals(0.1, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.flat(doubleDoubleReal0);
      doubleDoubleRealFactory0.rand(doubleDoubleReal0);
      assertTrue(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.pwrs(doubleDoubleReal0, doubleDoubleReal0);
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.one();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.pwrs(doubleDoubleReal0, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.zero();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.exp(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.pwr(doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.pow(doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.min(doubleDoubleReal0, doubleDoubleReal0);
      assertSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-3961.81463969));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.min(doubleDoubleReal0, doubleDoubleReal0);
      assertSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.flat(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.mc(doubleDoubleReal1, doubleDoubleReal0);
      assertEquals((-0.85), doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.max(doubleDoubleReal0, doubleDoubleReal0);
      assertSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.cos(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.max(doubleDoubleReal1, doubleDoubleReal1);
      assertEquals((-0.4161468365471424), doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.one();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.log10(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(1.0E-100);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.log10(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(6.0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.buf(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.log(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.log(doubleDoubleReal0);
      assertEquals(0.6931471805599453, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.ifx(doubleDoubleReal0, doubleDoubleReal0, (DoubleDoubleReal) null);
      assertNull(doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.hypot(doubleDoubleReal0, doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.gauss(doubleDoubleReal0);
      assertEquals(Double.NaN, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.mc(doubleDoubleReal0, doubleDoubleReal0);
      assertEquals(0.25, doubleDoubleReal1.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.log();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleRealFactory0.gauss(doubleDoubleReal2);
      assertEquals((-0.06931471805599453), doubleDoubleReal3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.acos();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.floor(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.floor(doubleDoubleReal0);
      assertEquals(Double.NEGATIVE_INFINITY, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.log10(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.flat(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-1185.5));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.exp(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.sqrt(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.ceil(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.pow(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.ceil(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.ceil(doubleDoubleReal0);
      assertEquals(Double.NEGATIVE_INFINITY, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.one();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atanh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val(1049.0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sin(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.atanh(doubleDoubleReal1);
      assertEquals((-0.29618414282766786), doubleDoubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atan(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val((-947.0));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atan(doubleDoubleReal0);
      assertEquals((-1.5697403609783052), doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.zero();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.asinh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.asinh(doubleDoubleReal0);
      assertEquals(0.48121182505960347, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-3961.81463969));
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.asinh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.rand(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.asin(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.cos(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.asin(doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.acosh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.acosh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.pow(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.acos(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.acos(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.abs(doubleDoubleReal0);
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.abs(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.val("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.val("{J1aH\"VeE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character '{' at position 1 in string {J1aH\"VeE
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.val((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.uramp((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.u((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-1629.2070769357929));
      // Undeclared exception!
      doubleDoubleRealFactory0.tanh(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.tanh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.tan(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.sqrt((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.sinh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.sin((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.sgn((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.rand((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.pwrs((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.pow((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.min((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.mc((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.max((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.log10((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.log((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.inv((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.ifx((DoubleDoubleReal) null, (DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.gauss((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.floor((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.flat((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.exp((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.cosh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.cos(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.cos((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.buf((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.atanh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.atan((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.asin((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.acos((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.uramp(doubleDoubleReal0);
      assertEquals(2.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.uramp(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val("-");
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.u(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.buf(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.min(doubleDoubleReal0, doubleDoubleReal0);
      assertSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sgn(doubleDoubleReal0);
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.acosh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.pwr((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.exp(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.tanh(doubleDoubleReal1);
      // Undeclared exception!
      doubleDoubleRealFactory0.asin(doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val((-1.0));
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.atan2(doubleDoubleReal0, doubleDoubleReal0);
        fail("Expecting exception: NotImplementedException");
      
      } catch(NotImplementedException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.ceil((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.asinh((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sqrt(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.tan((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.round((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(0.0, 364.501);
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.log10(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.abs((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.rand(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.min(doubleDoubleReal1, doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(0.0, Double.NaN);
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.acos(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.hypot((DoubleDoubleReal) null, (DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.zero();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.cosh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.tanh(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.gauss(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val("-");
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.floor(doubleDoubleReal0);
      assertEquals(-0.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.sin(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.square((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.asin(doubleDoubleReal0);
      assertEquals(Double.NaN, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleRealFactory0.random((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.log(doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.cos(doubleDoubleReal0);
      assertEquals(0.5403023058681398, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val("-");
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.atanh(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.flat(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.pow(doubleDoubleReal1, doubleDoubleReal1);
      assertEquals((-1.0), doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.sinh(doubleDoubleReal0);
      assertEquals(1.1752011936438014, doubleDoubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.inv(doubleDoubleReal0);
      assertEquals(1.0, doubleDoubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      doubleDoubleRealFactory0.atan(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.mc(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.max(doubleDoubleReal0, doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertSame(doubleDoubleReal2, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val(1.0E29);
      // Undeclared exception!
      doubleDoubleRealFactory0.sinh(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleRealFactory0.inv(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleRealFactory0.flat(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.fromTwoDouble(0.0, (-1010.7228126663077));
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleRealFactory0.pwrs(doubleDoubleReal0, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleRealFactory0.val("4");
      assertEquals(4.0, doubleDoubleReal0.getReal(), 0.01);
  }
}
