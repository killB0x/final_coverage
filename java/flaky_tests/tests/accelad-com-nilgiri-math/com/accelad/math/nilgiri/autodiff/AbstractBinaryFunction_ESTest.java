/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:45:43 GMT 2022
 */

package com.accelad.math.nilgiri.autodiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import com.accelad.math.nilgiri.DoubleDoubleRealFactory;
import com.accelad.math.nilgiri.autodiff.DifferentialFunction;
import com.accelad.math.nilgiri.autodiff.Inverse;
import com.accelad.math.nilgiri.autodiff.One;
import com.accelad.math.nilgiri.autodiff.Product;
import com.accelad.math.nilgiri.autodiff.Sum;
import com.accelad.math.nilgiri.autodiff.Variable;
import com.accelad.math.nilgiri.autodiff.Zero;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractBinaryFunction_ESTest extends AbstractBinaryFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-1775.396));
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("NaN", doubleDoubleReal0, doubleDoubleRealFactory0);
      Inverse<DoubleDoubleReal> inverse0 = new Inverse<DoubleDoubleReal>(variable0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(inverse0, variable0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = product0.rarg();
      assertTrue(differentialFunction0.isVariable());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(one0, one0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = product0.rarg();
      assertTrue(differentialFunction0.isConstant());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Sum<DoubleDoubleReal> sum0 = new Sum<DoubleDoubleReal>(zero0, zero0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = sum0.larg();
      assertFalse(differentialFunction0.isVariable());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.fromOneDouble((-918.3991323668));
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", doubleDoubleReal0, doubleDoubleRealFactory0);
      Inverse<DoubleDoubleReal> inverse0 = new Inverse<DoubleDoubleReal>(variable0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(variable0, inverse0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = product0.larg();
      assertTrue(differentialFunction0.isVariable());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Product<DoubleDoubleReal> product0 = null;
      try {
        product0 = new Product<DoubleDoubleReal>(zero0, (DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variables.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractBinaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sum<DoubleDoubleReal> sum0 = null;
      try {
        sum0 = new Sum<DoubleDoubleReal>((DifferentialFunction<DoubleDoubleReal>) null, (DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variables.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractBinaryFunction", e);
      }
  }
}
