/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:44:53 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDoubleReal_ESTest extends DoubleDoubleReal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.acosh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.TWO;
      // Undeclared exception!
      try { 
        doubleDoubleReal0.ceil();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(0.0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.asin();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.tanh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.acosh();
      doubleDoubleReal3.ONE.acos();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.log();
      doubleDoubleReal4.modulus();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      doubleDoubleReal0.ONE.acos();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.cos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.negate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.cosh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      doubleDoubleReal0.getDoubleDouble();
      doubleDoubleReal0.negate();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.exp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.log();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.tan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.square();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.floor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.log();
      // Undeclared exception!
      try { 
        doubleDoubleReal1.toString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.log10();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.negate();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.TWO.pow((-952));
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.ZERO.cosh();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.acosh();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.asinh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal0.sgn();
      doubleDoubleReal6.mul(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.negate();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal4.ceil();
      doubleDoubleReal7.pwrs(doubleDoubleReal4);
      doubleDoubleReal8.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal6.sin();
      doubleDoubleReal5.sinh();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal9.ceil();
      doubleDoubleReal6.cos();
      doubleDoubleReal2.div(doubleDoubleReal6);
      doubleDoubleReal5.ZERO.set((-952));
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal8.floor();
      doubleDoubleReal5.acosh();
      doubleDoubleReal5.ZERO.pow(doubleDoubleReal10);
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal3.floor();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal11.log();
      doubleDoubleReal13.HALF.inverse();
      doubleDoubleReal12.HALF.atan();
      doubleDoubleReal12.sgn();
      doubleDoubleReal12.ONE.pwrs(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal8.log10();
      DoubleDoubleReal doubleDoubleReal15 = doubleDoubleReal12.tan();
      DoubleDoubleReal doubleDoubleReal16 = doubleDoubleReal15.asin();
      doubleDoubleReal16.ONE.asinh();
      doubleDoubleReal5.asinh();
      DoubleDoubleReal doubleDoubleReal17 = doubleDoubleReal6.floor();
      doubleDoubleReal14.TWO.toString();
      doubleDoubleReal17.ZERO.sin();
      doubleDoubleReal15.pow(doubleDoubleReal14);
      doubleDoubleReal7.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.pow(148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.acosh();
      doubleDoubleReal1.pwrs(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.mul(4230L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.asinh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.sqrt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.log();
      // Undeclared exception!
      doubleDoubleReal1.atan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleReal0.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      doubleDoubleReal0.ZERO.set((-1199.469918));
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ZERO;
      doubleDoubleReal1.HALF.toString();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ONE.floor();
      doubleDoubleReal2.acosh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.pow(doubleDoubleReal1);
      doubleDoubleReal1.getDoubleDouble();
      doubleDoubleReal1.pwr(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ceil();
      doubleDoubleReal4.HALF.mul((-1L));
      doubleDoubleReal3.log10();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.TWO.tan();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.HALF.log();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.atanh();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.TWO.pwr(doubleDoubleReal2);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.ONE.cos();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.ZERO.exp();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.ZERO.pwr(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal6.log10();
      doubleDoubleReal1.tanh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal4.ZERO.atan();
      doubleDoubleReal5.ONE.pow(doubleDoubleReal4);
      doubleDoubleReal9.ZERO.acosh();
      doubleDoubleReal3.asin();
      doubleDoubleReal2.getDoubleDouble();
      doubleDoubleReal8.atan();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal7.cos();
      doubleDoubleReal10.TWO.toString();
      doubleDoubleReal4.log10();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal1.log();
      // Undeclared exception!
      try { 
        doubleDoubleReal11.HALF.getImaginary();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      doubleDoubleReal0.TWO.hashCode();
      doubleDoubleReal0.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ZERO;
      // Undeclared exception!
      try { 
        doubleDoubleReal0.pwr(doubleDoubleReal1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      DoubleDoubleReal doubleDoubleReal1 = new DoubleDoubleReal();
      doubleDoubleReal0.TWO.pow(doubleDoubleReal1);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.atanh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.pwr((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.log();
      // Undeclared exception!
      doubleDoubleReal1.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.floor();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.tan();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.log();
      doubleDoubleReal3.atanh();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.pwr(doubleDoubleReal1);
      doubleDoubleReal2.cos();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.exp();
      doubleDoubleReal5.pwr(doubleDoubleReal4);
      doubleDoubleReal1.log10();
      // Undeclared exception!
      doubleDoubleReal3.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ONE;
      doubleDoubleReal0.sinh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.pow(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal3 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ceil();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal2.sin();
      DoubleDoubleReal doubleDoubleReal6 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.cosh();
      doubleDoubleReal6.doubleValue();
      doubleDoubleReal2.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal5.plus(doubleDoubleReal4);
      doubleDoubleReal8.div(doubleDoubleReal0);
      doubleDoubleReal7.acos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.square();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      doubleDoubleReal1.compareTo(doubleDoubleReal0);
      doubleDoubleReal0.tan();
      doubleDoubleReal0.modulus();
      doubleDoubleReal0.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal2 = new DoubleDoubleReal((-1.0));
      doubleDoubleReal2.exp();
      doubleDoubleReal2.pow(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.ONE.pwrs(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.TWO.acos();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.atan();
      doubleDoubleReal4.ONE.equals(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal2.pow((-865));
      doubleDoubleReal5.TWO.log10();
      doubleDoubleReal3.getDoubleDouble();
      doubleDoubleReal2.ZERO.cos();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal2.TWO.sin();
      doubleDoubleReal6.TWO.tanh();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal3.asinh();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal7.TWO.cosh();
      doubleDoubleReal2.mul((-799L));
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal0.div(doubleDoubleReal7);
      doubleDoubleReal9.ONE.cosh();
      doubleDoubleReal0.round();
      doubleDoubleReal8.TWO.mul(doubleDoubleReal1);
      doubleDoubleReal7.modulus();
      doubleDoubleReal8.div(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal0.log();
      doubleDoubleReal10.ONE.negate();
      doubleDoubleReal9.log10();
      doubleDoubleReal9.mul(0L);
      doubleDoubleReal1.getDoubleDouble();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.pow((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.square();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.TWO.pow(0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.TWO.ceil();
      doubleDoubleReal3.TWO.pow((-3784));
      doubleDoubleReal3.ZERO.set(0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.mul(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal1.TWO.inverse();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal4.acosh();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.ONE.pwr(doubleDoubleReal4);
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal7.sgn();
      doubleDoubleReal7.TWO.tanh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal1.div(doubleDoubleReal4);
      doubleDoubleReal1.TWO.floor();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal6.cos();
      doubleDoubleReal10.modulus();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal9.ONE.tan();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal9.sgn();
      doubleDoubleReal12.exp();
      doubleDoubleReal12.tanh();
      doubleDoubleReal10.negate();
      doubleDoubleReal1.acosh();
      doubleDoubleReal12.sinh();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal2.div(doubleDoubleReal4);
      doubleDoubleReal13.ZERO.acos();
      doubleDoubleReal5.sin();
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal11.cos();
      doubleDoubleReal9.tan();
      doubleDoubleReal10.ONE.acosh();
      DoubleDoubleReal doubleDoubleReal15 = new DoubleDoubleReal();
      doubleDoubleReal4.equals(doubleDoubleReal15);
      doubleDoubleReal14.log();
      doubleDoubleReal8.pwrs(doubleDoubleReal10);
      doubleDoubleReal14.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.modulus();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.HALF.asinh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.sin();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.ONE.plus(doubleDoubleReal2);
      doubleDoubleReal3.HALF.sin();
      doubleDoubleReal1.TWO.square();
      doubleDoubleReal3.set(1.23259516440783E-32);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.HALF.log();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.ONE.square();
      Object object0 = new Object();
      doubleDoubleReal2.equals(object0);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.mul(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.atanh();
      doubleDoubleReal7.TWO.modulus();
      doubleDoubleReal6.ONE.toString();
      doubleDoubleReal6.ZERO.div(doubleDoubleReal3);
      doubleDoubleReal4.compareTo(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal1.pwr(doubleDoubleReal0);
      doubleDoubleReal8.pwrs(doubleDoubleReal5);
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal4.atanh();
      doubleDoubleReal4.inverse();
      doubleDoubleReal1.minus(doubleDoubleReal5);
      doubleDoubleReal9.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal("4");
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.negate();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.atanh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.TWO.acosh();
      doubleDoubleReal2.ZERO.plus(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.ceil();
      doubleDoubleReal4.ZERO.hashCode();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.ONE.tanh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal4.negate();
      doubleDoubleReal6.ZERO.mul(doubleDoubleReal4);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal2.ZERO.negate();
      doubleDoubleReal5.doubleValue();
      doubleDoubleReal7.cosh();
      doubleDoubleReal2.abs();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal1.ceil();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal4.minus(doubleDoubleReal5);
      doubleDoubleReal9.ZERO.plus(doubleDoubleReal4);
      doubleDoubleReal3.floor();
      doubleDoubleReal8.pwr(doubleDoubleReal4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-5465.564005801719));
      // Undeclared exception!
      doubleDoubleReal0.sinh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.TWO.ceil();
      doubleDoubleReal1.hashCode();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.tan();
      DoubleDoubleReal doubleDoubleReal3 = new DoubleDoubleReal((-892.04));
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.pwrs(doubleDoubleReal1);
      doubleDoubleReal2.round();
      doubleDoubleReal0.atanh();
      // Undeclared exception!
      doubleDoubleReal4.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.log();
      // Undeclared exception!
      doubleDoubleReal1.cos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.floor();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.sqrt();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.TWO.plus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.HALF.pwrs(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal0.ZERO.tanh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.minus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.mul((-584L));
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal6.HALF.sgn();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal3.ZERO.asinh();
      doubleDoubleReal8.ZERO.hashCode();
      doubleDoubleReal8.ZERO.ceil();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal8.ONE.acosh();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal0.exp();
      doubleDoubleReal2.hashCode();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal10.cosh();
      doubleDoubleReal1.getReal();
      doubleDoubleReal7.abs();
      doubleDoubleReal12.modulus();
      doubleDoubleReal4.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal11.tanh();
      DoubleDoubleReal doubleDoubleReal14 = DoubleDoubleReal.ZERO;
      doubleDoubleReal14.acosh();
      doubleDoubleReal10.pow(doubleDoubleReal1);
      doubleDoubleReal13.square();
      doubleDoubleReal5.modulus();
      doubleDoubleReal9.compareTo(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal15 = DoubleDoubleReal.ZERO;
      doubleDoubleReal15.set((-770.6204342565));
      doubleDoubleReal3.acosh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      // Undeclared exception!
      doubleDoubleReal0.cosh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      doubleDoubleReal0.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.floor();
      DoubleDoubleReal doubleDoubleReal2 = new DoubleDoubleReal(0.0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.cos();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.cosh();
      doubleDoubleReal2.log10();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.cos();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.mul((-1771L));
      doubleDoubleReal6.div(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal7 = new DoubleDoubleReal(0.0);
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal1.div(doubleDoubleReal7);
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal5.plus(doubleDoubleReal7);
      doubleDoubleReal6.acos();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal8.square();
      doubleDoubleReal6.tanh();
      DoubleDoubleReal doubleDoubleReal11 = DoubleDoubleReal.TWO;
      doubleDoubleReal11.mul(773L);
      doubleDoubleReal5.asinh();
      doubleDoubleReal9.div(doubleDoubleReal10);
      doubleDoubleReal8.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.HALF.equals((Object) null);
      doubleDoubleReal0.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      doubleDoubleReal0.TWO.equals(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = null;
      try {
        doubleDoubleReal0 = new DoubleDoubleReal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleReal0.acos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.div((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.modulus();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.HALF.asinh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.sin();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.ONE.plus(doubleDoubleReal2);
      doubleDoubleReal3.HALF.sin();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.TWO.square();
      doubleDoubleReal3.set(1.23259516440783E-32);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal1.HALF.log();
      doubleDoubleReal3.ONE.square();
      Object object0 = new Object();
      doubleDoubleReal2.equals(object0);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.mul(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.atanh();
      doubleDoubleReal6.ONE.toString();
      doubleDoubleReal7.tan();
      doubleDoubleReal0.pow(doubleDoubleReal5);
      doubleDoubleReal4.sinh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      doubleDoubleReal0.HALF.abs();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.HALF.negate();
      doubleDoubleReal0.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ceil();
      doubleDoubleReal0.toString();
      doubleDoubleReal0.ONE.pwrs(doubleDoubleReal2);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.inverse();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ZERO.exp();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.ONE.atan();
      doubleDoubleReal5.ZERO.pow(465);
      doubleDoubleReal2.HALF.acos();
      doubleDoubleReal2.hashCode();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.div(doubleDoubleReal3);
      doubleDoubleReal6.TWO.acosh();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.tan();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal7.ZERO.sgn();
      // Undeclared exception!
      try { 
        doubleDoubleReal8.ONE.getImaginary();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.floor();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.sqrt();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.TWO.plus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.HALF.pwrs(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal0.ZERO.tanh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.minus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.mul((-584L));
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal6.HALF.sgn();
      doubleDoubleReal3.ZERO.asinh();
      doubleDoubleReal8.ZERO.hashCode();
      doubleDoubleReal8.ZERO.ceil();
      doubleDoubleReal8.ONE.acosh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal0.exp();
      doubleDoubleReal9.acosh();
      doubleDoubleReal1.acos();
      doubleDoubleReal0.mul(doubleDoubleReal7);
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal7.ONE.inverse();
      doubleDoubleReal10.ONE.acos();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal9.tanh();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal11.log();
      doubleDoubleReal7.doubleValue();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal4.mul(doubleDoubleReal5);
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal13.cos();
      DoubleDoubleReal doubleDoubleReal15 = doubleDoubleReal14.floor();
      doubleDoubleReal3.set((-584L));
      doubleDoubleReal11.square();
      DoubleDoubleReal doubleDoubleReal16 = DoubleDoubleReal.ONE;
      doubleDoubleReal9.minus(doubleDoubleReal16);
      doubleDoubleReal15.minus(doubleDoubleReal12);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI_2;
      doubleDouble0.BernoulliB(3783);
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ZERO.sinh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.ceil();
      doubleDoubleReal1.ZERO.atanh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.asinh();
      doubleDoubleReal1.asin();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.pwrs(doubleDoubleReal1);
      doubleDoubleReal4.mul((-2402L));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.acosh();
      doubleDoubleReal0.compareTo(doubleDoubleReal1);
      doubleDoubleReal1.getReal();
      doubleDoubleReal1.ONE.ceil();
      doubleDoubleReal1.ZERO.set((-0.25));
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.mul(doubleDoubleReal0);
      doubleDoubleReal3.toString();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.floor();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.mul((long) 0);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal2.log10();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.pow((-2109));
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal0.asin();
      doubleDoubleReal8.ZERO.cosh();
      doubleDoubleReal0.round();
      doubleDoubleReal7.tanh();
      doubleDoubleReal5.pwr(doubleDoubleReal8);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.round();
      doubleDoubleReal1.ZERO.plus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.TWO.pow(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.ZERO.ceil();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ONE.acosh();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.ONE.cosh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal3.TWO.inverse();
      doubleDoubleReal6.div(doubleDoubleReal5);
      doubleDoubleReal2.ONE.set(1865.6);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.ONE.sqrt();
      // Undeclared exception!
      try { 
        doubleDoubleReal7.ZERO.getImaginary();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.pwrs((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.mul((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      doubleDouble0.log10();
      doubleDouble0.sqrt();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      doubleDoubleReal0.ONE.cos();
      doubleDoubleReal0.ZERO.tan();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.mul((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      doubleDoubleReal0.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.minus(doubleDoubleReal1);
      doubleDoubleReal0.getDoubleDouble();
      doubleDoubleReal0.compareTo(doubleDoubleReal2);
      doubleDoubleReal1.modulus();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.mul(doubleDoubleReal2);
      doubleDoubleReal3.getReal();
      doubleDoubleReal1.doubleValue();
      doubleDoubleReal0.modulus();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.square();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.TWO.pow(0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.TWO.ceil();
      doubleDoubleReal3.TWO.pow((-3784));
      doubleDoubleReal3.ZERO.set(0);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.mul(doubleDoubleReal1);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal1.TWO.inverse();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal4.acosh();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.ONE.pwr(doubleDoubleReal4);
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal7.sgn();
      doubleDoubleReal7.TWO.tanh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal1.div(doubleDoubleReal4);
      doubleDoubleReal1.TWO.floor();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal6.cos();
      doubleDoubleReal10.modulus();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal9.ONE.tan();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal9.sgn();
      doubleDoubleReal12.exp();
      doubleDoubleReal12.tanh();
      doubleDoubleReal10.negate();
      doubleDoubleReal1.acosh();
      doubleDoubleReal12.sinh();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal2.div(doubleDoubleReal4);
      doubleDoubleReal13.ZERO.acos();
      doubleDoubleReal5.sin();
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal11.cos();
      doubleDoubleReal9.tan();
      DoubleDoubleReal doubleDoubleReal15 = new DoubleDoubleReal();
      doubleDoubleReal4.equals(doubleDoubleReal15);
      doubleDoubleReal14.log();
      doubleDoubleReal8.pwrs(doubleDoubleReal10);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.sgn();
      doubleDoubleReal0.TWO.acos();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.acosh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.ZERO.asinh();
      doubleDoubleReal2.minus(doubleDoubleReal3);
      doubleDoubleReal0.log10();
      doubleDoubleReal3.atanh();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.round();
      doubleDoubleReal4.getDoubleDouble();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.atan();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ONE.asinh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.TWO.minus(doubleDoubleReal0);
      doubleDoubleReal0.TWO.negate();
      doubleDoubleReal3.TWO.atan();
      doubleDoubleReal1.ONE.set(3878.676517233914);
      doubleDoubleReal1.TWO.tan();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.sin();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.pow(doubleDoubleReal1);
      doubleDoubleReal1.div(doubleDoubleReal2);
      doubleDoubleReal4.ZERO.plus(doubleDoubleReal0);
      doubleDoubleReal0.negate();
      doubleDoubleReal5.round();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.round();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ONE.pow(0);
      doubleDoubleReal2.modulus();
      doubleDoubleReal1.TWO.cos();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.acos();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.log10();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.sqrt();
      doubleDoubleReal2.asinh();
      doubleDoubleReal2.log();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal0.acosh();
      doubleDoubleReal5.ONE.pwr(doubleDoubleReal6);
      DoubleDoubleReal doubleDoubleReal7 = null;
      try {
        doubleDoubleReal7 = new DoubleDoubleReal("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = null;
      try {
        doubleDoubleReal0 = new DoubleDoubleReal("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      doubleDoubleReal0.TWO.tanh();
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ONE;
      doubleDoubleReal0.mul(doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-2322.96198337));
      doubleDoubleReal0.TWO.negate();
      doubleDoubleReal0.log10();
      doubleDoubleReal0.asinh();
      long long0 = 0L;
      DoubleDoubleReal doubleDoubleReal1 = null;
      try {
        doubleDoubleReal1 = new DoubleDoubleReal("DD<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'D' at position 1 in string DD<
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.minus((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.tan();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.sgn();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.ONE.pow(doubleDoubleReal0);
      doubleDoubleReal3.atan();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ZERO.sqrt();
      doubleDoubleReal4.ONE.pwrs(doubleDoubleReal2);
      doubleDoubleReal0.set((-208.139996));
      DoubleDoubleReal doubleDoubleReal5 = DoubleDoubleReal.ZERO;
      doubleDoubleReal2.HALF.plus(doubleDoubleReal5);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.acosh();
      doubleDoubleReal6.TWO.abs();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.plus(doubleDoubleReal5);
      doubleDoubleReal7.doubleValue();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal2.acosh();
      doubleDoubleReal8.exp();
      doubleDoubleReal7.log10();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      // Undeclared exception!
      try { 
        doubleDoubleReal0.plus((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.acos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.acos();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.round();
      doubleDoubleReal0.set(0.0);
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.ceil();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.minus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.HALF.log10();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal3.log10();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.exp();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal7.HALF.round();
      doubleDoubleReal7.floor();
      doubleDoubleReal8.TWO.sqrt();
      doubleDoubleReal6.hashCode();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal6.tan();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal9.pwrs(doubleDoubleReal2);
      doubleDoubleReal10.TWO.round();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal5.atanh();
      doubleDoubleReal11.HALF.sinh();
      // Undeclared exception!
      try { 
        doubleDoubleReal3.ZERO.plus((DoubleDoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(867.017819);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ZERO.square();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ONE.cosh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.asin();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal3.ONE.acosh();
      doubleDoubleReal4.ZERO.toString();
      doubleDoubleReal3.set(513.6823);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.minus(doubleDoubleReal0);
      doubleDoubleReal5.TWO.mul(2621L);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.asin();
      doubleDoubleReal6.log10();
      doubleDoubleReal0.ONE.tan();
      doubleDoubleReal3.div(doubleDoubleReal2);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal2.ZERO.acosh();
      doubleDoubleReal7.tanh();
      DoubleDoubleReal doubleDoubleReal8 = new DoubleDoubleReal(867.017819);
      doubleDoubleReal8.ONE.mul(0L);
      doubleDoubleReal2.pow(doubleDoubleReal8);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(1.0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.TWO.cosh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.round();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.atan();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.HALF.sgn();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.HALF.sin();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.HALF.sgn();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.acosh();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleReal doubleDoubleReal8 = new DoubleDoubleReal(doubleDouble0);
      doubleDoubleReal7.HALF.pow(doubleDoubleReal8);
      doubleDoubleReal5.sinh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal0.asin();
      doubleDoubleReal9.ONE.hashCode();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal1.ZERO.cosh();
      doubleDoubleReal9.getReal();
      doubleDoubleReal1.ONE.abs();
      doubleDoubleReal2.modulus();
      doubleDoubleReal1.getDoubleDouble();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal1.tanh();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal10.acosh();
      doubleDoubleReal11.pow(doubleDoubleReal3);
      doubleDoubleReal4.square();
      doubleDoubleReal1.modulus();
      doubleDoubleReal10.compareTo(doubleDoubleReal12);
      doubleDoubleReal12.set(36.6167664);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ONE;
      doubleDoubleReal1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-428.8));
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.HALF;
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.mul(doubleDoubleReal0);
      doubleDoubleReal2.mul(0L);
      doubleDoubleReal1.ZERO.floor();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.mul(doubleDoubleReal1);
      doubleDoubleReal3.HALF.square();
      doubleDoubleReal1.doubleValue();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.TWO.sqrt();
      doubleDoubleReal1.ZERO.ceil();
      doubleDoubleReal0.asinh();
      doubleDoubleReal1.getReal();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.TWO.ceil();
      doubleDoubleReal1.ONE.plus(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.TWO.sqrt();
      doubleDoubleReal2.ZERO.ceil();
      doubleDoubleReal0.asinh();
      doubleDoubleReal2.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.mul(0L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.sgn();
      doubleDoubleReal1.HALF.mul(0L);
      doubleDoubleReal1.TWO.toString();
      // Undeclared exception!
      try { 
        doubleDoubleReal1.TWO.getImaginary();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.cosh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.round();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.HALF.pwr(doubleDoubleReal0);
      doubleDoubleReal3.ONE.modulus();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.asinh();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal4.pwr(doubleDoubleReal0);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.ONE.mul(doubleDoubleReal4);
      doubleDoubleReal6.HALF.square();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal0.pwr(doubleDoubleReal4);
      doubleDoubleReal7.ZERO.atanh();
      doubleDoubleReal2.floor();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal4.acosh();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal8.TWO.square();
      doubleDoubleReal9.HALF.acosh();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal1.tanh();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal5.pwr(doubleDoubleReal8);
      doubleDoubleReal11.ZERO.pwrs(doubleDoubleReal5);
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal4.floor();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal12.ZERO.mul(doubleDoubleReal2);
      doubleDoubleReal10.HALF.pwr(doubleDoubleReal0);
      doubleDoubleReal13.set((-1.0));
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal8.sin();
      doubleDoubleReal14.ZERO.mul(doubleDoubleReal0);
      doubleDoubleReal12.asin();
      DoubleDoubleReal doubleDoubleReal15 = null;
      try {
        doubleDoubleReal15 = new DoubleDoubleReal("com.accelad.math.nilgiri.DoubleDoubleReal");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.nilgiri.DoubleDoubleReal
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.cos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.negate();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      doubleDoubleReal0.sinh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      doubleDoubleReal0.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = null;
      try {
        doubleDoubleReal0 = new DoubleDoubleReal(",8Ty:YGF+hK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character ',' at position 1 in string ,8Ty:YGF+hK
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.log10();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.HALF.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.cosh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.asin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.acosh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      doubleDoubleReal0.ceil();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.sqrt();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal("4");
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.negate();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.ZERO.atanh();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal2.TWO.acosh();
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal2.ZERO.plus(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal0.ceil();
      doubleDoubleReal5.ZERO.hashCode();
      doubleDoubleReal5.ONE.tanh();
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal5.negate();
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.ZERO.mul(doubleDoubleReal5);
      doubleDoubleReal2.ZERO.negate();
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal3.HALF.atan();
      doubleDoubleReal2.ONE.log10();
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal3.pow((-1214));
      doubleDoubleReal9.pwr(doubleDoubleReal4);
      doubleDoubleReal8.ZERO.modulus();
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal5.log();
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal9.atan();
      DoubleDoubleReal doubleDoubleReal12 = doubleDoubleReal11.ZERO.pwrs(doubleDoubleReal6);
      doubleDoubleReal5.ceil();
      DoubleDoubleReal doubleDoubleReal13 = doubleDoubleReal0.log10();
      DoubleDoubleReal doubleDoubleReal14 = doubleDoubleReal7.exp();
      doubleDoubleReal8.sqrt();
      doubleDoubleReal6.asin();
      DoubleDoubleReal doubleDoubleReal15 = doubleDoubleReal4.sinh();
      DoubleDoubleReal doubleDoubleReal16 = doubleDoubleReal7.sin();
      doubleDoubleReal15.sin();
      doubleDoubleReal12.getDoubleDouble();
      doubleDoubleReal13.cos();
      DoubleDoubleReal doubleDoubleReal17 = doubleDoubleReal14.cos();
      doubleDoubleReal17.HALF.sin();
      doubleDoubleReal7.atan();
      doubleDoubleReal16.toString();
      doubleDoubleReal11.sqrt();
      doubleDoubleReal10.asin();
      doubleDoubleReal1.sgn();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.exp();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.HALF.log10();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal2);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = doubleDoubleReal0.equals((Object) null);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(boolean0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.mul(doubleDoubleReal2);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal3);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal2.atanh();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertNotNull(doubleDoubleReal4);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      
      String string0 = doubleDoubleReal2.toString();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertNotNull(string0);
      assertEquals("-0.301029995663981195213738894724", string0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.div(doubleDoubleReal0);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal1));
      assertNotNull(doubleDoubleReal5);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal5.getReal(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal5.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal1);
      
      int int0 = doubleDoubleReal4.compareTo(doubleDoubleReal3);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertEquals(1, int0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      
      DoubleDoubleReal doubleDoubleReal6 = new DoubleDoubleReal(389.26254);
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal3));
      assertNotNull(doubleDoubleReal6);
      assertEquals(389.26254, doubleDoubleReal6.doubleValue(), 0.01);
      assertEquals(389.26254, doubleDoubleReal6.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal6.pwr(doubleDoubleReal2);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal6.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal7.equals((Object)doubleDoubleReal5));
      assertNotNull(doubleDoubleReal7);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals(389.26254, doubleDoubleReal6.doubleValue(), 0.01);
      assertEquals(389.26254, doubleDoubleReal6.getReal(), 0.01);
      assertEquals(0.16605779914902788, doubleDoubleReal7.getReal(), 0.01);
      assertEquals(0.16605779914902788, doubleDoubleReal7.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal6, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal7, doubleDoubleReal5);
      
      DoubleDoubleReal doubleDoubleReal8 = doubleDoubleReal4.pwrs(doubleDoubleReal3);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal8.equals((Object)doubleDoubleReal6));
      assertNotNull(doubleDoubleReal8);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.doubleValue(), 0.01);
      assertEquals((-2.602940802464699), doubleDoubleReal8.doubleValue(), 0.01);
      assertEquals((-2.602940802464699), doubleDoubleReal8.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal8, doubleDoubleReal6);
      
      DoubleDoubleReal doubleDoubleReal9 = doubleDoubleReal3.atanh();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal9.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal9);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertEquals((-1.1516028355403256), doubleDoubleReal9.doubleValue(), 0.01);
      assertEquals((-1.1516028355403256), doubleDoubleReal9.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal9, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal10 = doubleDoubleReal3.inverse();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal10.equals((Object)doubleDoubleReal9));
      assertNotNull(doubleDoubleReal10);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-0.8182843670345052), doubleDoubleReal3.getReal(), 0.01);
      assertEquals((-1.222069051158877), doubleDoubleReal10.getReal(), 0.01);
      assertEquals((-1.222069051158877), doubleDoubleReal10.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal10, doubleDoubleReal9);
      
      DoubleDoubleReal doubleDoubleReal11 = doubleDoubleReal2.minus(doubleDoubleReal4);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal10));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal10));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal10));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal10));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal6));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal10));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal8));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal9));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal7));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal11.equals((Object)doubleDoubleReal6));
      assertNotNull(doubleDoubleReal11);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.getReal(), 0.01);
      assertEquals((-0.310651852518919), doubleDoubleReal4.doubleValue(), 0.01);
      assertEquals(0.009621856854937846, doubleDoubleReal11.getReal(), 0.01);
      assertEquals(0.009621856854937846, doubleDoubleReal11.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal11);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal11);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal11);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal6);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal11);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal10);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal8);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal9);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal7);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal11, doubleDoubleReal6);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = doubleDoubleReal0.TWO.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.acosh();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.exp();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.HALF.log10();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal2);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.ZERO.minus(doubleDoubleReal1);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertNotNull(doubleDoubleReal3);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals((-2.718281828459045), doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals((-2.718281828459045), doubleDoubleReal3.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.round();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertNotNull(doubleDoubleReal4);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(3.0, doubleDoubleReal4.doubleValue(), 0.01);
      assertEquals(3.0, doubleDoubleReal4.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      
      boolean boolean0 = doubleDoubleReal1.equals(doubleDoubleReal1);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertTrue(boolean0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      assertNotNull(doubleDoubleReal0);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = new DoubleDoubleReal();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      
      int int0 = doubleDoubleReal0.compareTo(doubleDoubleReal1);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertEquals(1, int0);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.sin();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDouble doubleDouble0 = doubleDoubleReal0.modulus();
      assertNotNull(doubleDouble0);
      assertEquals(1.23259516440783E-32, DoubleDouble.EPS, 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertFalse(doubleDouble0.isInfinite());
      assertEquals(0, doubleDouble0.intValue());
      assertFalse(doubleDouble0.isNegative());
      assertEquals(0.0, doubleDouble0.doubleValue(), 0.01);
      assertTrue(doubleDouble0.isZero());
      assertEquals(0, doubleDouble0.signum());
      assertFalse(doubleDouble0.isNaN());
      assertTrue(doubleDouble0.isInteger());
      assertFalse(doubleDouble0.isPositive());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      assertNotNull(doubleDoubleReal0);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.cosh();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(1.5430806348152437, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(1.5430806348152437, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      doubleDoubleReal0.set(7.0630738766065635);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertEquals(7.0630738766065635, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(7.0630738766065635, doubleDoubleReal0.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      String string0 = doubleDoubleReal0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.abs();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.ONE.exp();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal1.HALF.log10();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertNotNull(doubleDoubleReal2);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.getReal(), 0.01);
      assertEquals((-0.3010299956639812), doubleDoubleReal2.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
      
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal0.sin();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertTrue(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal3);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal3.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal3.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
      
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal0.ZERO.minus(doubleDoubleReal1);
      assertTrue(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal4.equals((Object)doubleDoubleReal2));
      assertNotNull(doubleDoubleReal4);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals((-2.718281828459045), doubleDoubleReal4.doubleValue(), 0.01);
      assertEquals((-2.718281828459045), doubleDoubleReal4.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal4, doubleDoubleReal2);
      
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal1.round();
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertTrue(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal5.equals((Object)doubleDoubleReal4));
      assertNotNull(doubleDoubleReal5);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(3.0, doubleDoubleReal5.doubleValue(), 0.01);
      assertEquals(3.0, doubleDoubleReal5.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal5, doubleDoubleReal4);
      
      boolean boolean0 = doubleDoubleReal3.equals(doubleDoubleReal1);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal4));
      assertTrue(doubleDoubleReal0.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal3));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal2));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal4));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal5));
      assertFalse(doubleDoubleReal3.equals((Object)doubleDoubleReal2));
      assertTrue(doubleDoubleReal3.equals((Object)doubleDoubleReal0));
      assertFalse(boolean0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(2.718281828459045, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal3.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal3.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal3);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal4);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal5);
      assertNotSame(doubleDoubleReal3, doubleDoubleReal2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(2.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = DoubleDoubleReal.ZERO;
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.pwr(doubleDoubleReal1);
      assertFalse(doubleDoubleReal0.equals((Object)doubleDoubleReal1));
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal0));
      assertFalse(doubleDoubleReal2.equals((Object)doubleDoubleReal1));
      assertNotNull(doubleDoubleReal2);
      assertEquals(2.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(2.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(1.0, doubleDoubleReal2.doubleValue(), 0.01);
      assertEquals(1.0, doubleDoubleReal2.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal2);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal0);
      assertNotSame(doubleDoubleReal2, doubleDoubleReal1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.pwrs(doubleDoubleReal0);
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.sgn();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.asinh();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      assertNotNull(doubleDoubleReal0);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
      
      boolean boolean0 = doubleDoubleReal0.TWO.equals(doubleDoubleReal0);
      assertFalse(boolean0);
      assertEquals(1.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(1.0, doubleDoubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.atanh();
      assertTrue(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal1.doubleValue(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      assertNotNull(doubleDoubleReal0);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.inverse();
      assertFalse(doubleDoubleReal1.equals((Object)doubleDoubleReal0));
      assertNotNull(doubleDoubleReal1);
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal1.doubleValue(), 0.01);
      assertEquals(Double.NaN, doubleDoubleReal1.getReal(), 0.01);
      assertNotSame(doubleDoubleReal0, doubleDoubleReal1);
      assertNotSame(doubleDoubleReal1, doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      doubleDoubleReal0.modulus();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.HALF.asinh();
      DoubleDoubleReal doubleDoubleReal2 = doubleDoubleReal0.sin();
      DoubleDoubleReal doubleDoubleReal3 = doubleDoubleReal1.ONE.plus(doubleDoubleReal2);
      doubleDoubleReal3.HALF.sin();
      doubleDoubleReal1.TWO.square();
      doubleDoubleReal3.set(1.23259516440783E-32);
      DoubleDoubleReal doubleDoubleReal4 = doubleDoubleReal1.HALF.log();
      DoubleDoubleReal doubleDoubleReal5 = doubleDoubleReal3.ONE.square();
      Object object0 = new Object();
      doubleDoubleReal2.equals(object0);
      DoubleDoubleReal doubleDoubleReal6 = doubleDoubleReal1.mul(doubleDoubleReal0);
      doubleDoubleReal6.ZERO.atanh();
      doubleDoubleReal6.ONE.toString();
      doubleDoubleReal6.ZERO.div(doubleDoubleReal3);
      doubleDoubleReal4.compareTo(doubleDoubleReal3);
      DoubleDoubleReal doubleDoubleReal7 = doubleDoubleReal1.pwr(doubleDoubleReal0);
      doubleDoubleReal7.pwrs(doubleDoubleReal5);
      doubleDoubleReal4.atanh();
      doubleDoubleReal4.inverse();
      doubleDoubleReal1.minus(doubleDoubleReal5);
      assertEquals(1.23259516440783E-32, doubleDoubleReal3.doubleValue(), 0.01);
      assertEquals(0.48121182505960347, doubleDoubleReal1.doubleValue(), 0.01);
  }
}
