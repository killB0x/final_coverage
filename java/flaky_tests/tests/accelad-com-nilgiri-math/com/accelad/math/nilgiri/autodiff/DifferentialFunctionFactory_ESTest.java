/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:49:49 GMT 2022
 */

package com.accelad.math.nilgiri.autodiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.nilgiri.AbstractFactory;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import com.accelad.math.nilgiri.DoubleDoubleRealFactory;
import com.accelad.math.nilgiri.autodiff.Constant;
import com.accelad.math.nilgiri.autodiff.DifferentialFunction;
import com.accelad.math.nilgiri.autodiff.DifferentialFunctionFactory;
import com.accelad.math.nilgiri.autodiff.Inverse;
import com.accelad.math.nilgiri.autodiff.Negative;
import com.accelad.math.nilgiri.autodiff.One;
import com.accelad.math.nilgiri.autodiff.PolynomialTerm;
import com.accelad.math.nilgiri.autodiff.PreEvaluator;
import com.accelad.math.nilgiri.autodiff.Product;
import com.accelad.math.nilgiri.autodiff.Sum;
import com.accelad.math.nilgiri.autodiff.Variable;
import com.accelad.math.nilgiri.autodiff.Zero;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DifferentialFunctionFactory_ESTest extends DifferentialFunctionFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.sqrt(one0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = differentialFunctionFactory0.one();
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.cosh(one0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.cos(zero0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.var((String) null, (DoubleDoubleReal) null, (PreEvaluator<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null value.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.var(":", (DoubleDoubleReal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null value.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.val((DoubleDoubleReal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null value.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.tanh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.tan((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.log((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.floor((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.exp((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.atanh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.acosh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.acos((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.cosh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.cos((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = null;
      try {
        differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>((AbstractFactory<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null value.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.DifferentialFunctionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.atan(zero0);
      Sum<DoubleDoubleReal> sum0 = new Sum<DoubleDoubleReal>(differentialFunction0, zero0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = sum0.diff((Variable<DoubleDoubleReal>) null);
      assertFalse(differentialFunction1.equals((Object)differentialFunction0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.square(zero0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(zero0, differentialFunction0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      Variable<DoubleDoubleReal> variable0 = differentialFunctionFactory0.var("Input not null value.", doubleDoubleReal0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = product0.diff(variable0);
      assertTrue(differentialFunction1.isConstant());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Zero<DoubleDoubleReal> zero0 = differentialFunctionFactory0.zero();
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.asin(zero0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.sinh(one0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(differentialFunction0, differentialFunction0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      PreEvaluator<DoubleDoubleReal> preEvaluator0 = (PreEvaluator<DoubleDoubleReal>) mock(PreEvaluator.class, new ViolatedAssumptionAnswer());
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("", doubleDoubleReal0, doubleDoubleRealFactory0, preEvaluator0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = product0.diff(variable0);
      assertFalse(differentialFunction1.isVariable());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Constant<DoubleDoubleReal> constant0 = new Constant<DoubleDoubleReal>(doubleDoubleReal0, doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.log(constant0);
      Inverse<DoubleDoubleReal> inverse0 = new Inverse<DoubleDoubleReal>(differentialFunction0);
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("yzkIm~0u}7Q_x&Sh<", doubleDoubleReal0, doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = inverse0.diff(variable0);
      assertTrue(differentialFunction1.isConstant());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      Constant<DoubleDoubleReal> constant0 = new Constant<DoubleDoubleReal>(doubleDoubleReal0, doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.pow(constant0, constant0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = differentialFunctionFactory0.one();
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.exp(one0);
      Variable<DoubleDoubleReal> variable0 = differentialFunctionFactory0.var("S", doubleDoubleReal0);
      Negative<DoubleDoubleReal> negative0 = new Negative<DoubleDoubleReal>(differentialFunction0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = negative0.diff(variable0);
      assertTrue(differentialFunction1.isConstant());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      Constant<DoubleDoubleReal> constant0 = new Constant<DoubleDoubleReal>(doubleDoubleReal0, doubleDoubleRealFactory0);
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("", doubleDoubleReal0, doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.asinh(constant0);
      Product<DoubleDoubleReal> product0 = new Product<DoubleDoubleReal>(constant0, differentialFunction0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = product0.diff(variable0);
      assertFalse(differentialFunction1.equals((Object)differentialFunction0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.sinh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.atan((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      Constant<DoubleDoubleReal> constant0 = differentialFunctionFactory0.val(doubleDoubleReal0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.pow((DifferentialFunction<DoubleDoubleReal>) null, constant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variables.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractBinaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.sqrt((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      PreEvaluator<DoubleDoubleReal> preEvaluator0 = (PreEvaluator<DoubleDoubleReal>) mock(PreEvaluator.class, new ViolatedAssumptionAnswer());
      Variable<DoubleDoubleReal> variable0 = differentialFunctionFactory0.var("-", doubleDoubleReal0, preEvaluator0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.atanh(variable0);
      PolynomialTerm<DoubleDoubleReal> polynomialTerm0 = new PolynomialTerm<DoubleDoubleReal>(2L, differentialFunction0, 1764);
      Sum<DoubleDoubleReal> sum0 = new Sum<DoubleDoubleReal>(polynomialTerm0, differentialFunction0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = sum0.diff(variable0);
      assertFalse(differentialFunction1.isVariable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.asin((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.asinh((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = differentialFunctionFactory0.one();
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.tan(one0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.acosh(one0);
      assertNotNull(differentialFunction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.sin(one0);
      Sum<DoubleDoubleReal> sum0 = new Sum<DoubleDoubleReal>(differentialFunction0, differentialFunction0);
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("a", doubleDoubleReal0, doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = sum0.diff(variable0);
      assertFalse(differentialFunction1.isVariable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-2783L));
      PreEvaluator<DoubleDoubleReal> preEvaluator0 = (PreEvaluator<DoubleDoubleReal>) mock(PreEvaluator.class, new ViolatedAssumptionAnswer());
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("", doubleDoubleReal0, doubleDoubleRealFactory0, preEvaluator0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.floor(variable0);
      PolynomialTerm<DoubleDoubleReal> polynomialTerm0 = new PolynomialTerm<DoubleDoubleReal>((-2783L), differentialFunction0, 580);
      // Undeclared exception!
      try { 
        polynomialTerm0.diff(variable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not allowed
         //
         verifyException("com.accelad.math.nilgiri.autodiff.DifferentialFunctionFactory$18", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.sin((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      // Undeclared exception!
      try { 
        differentialFunctionFactory0.square((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      One<DoubleDoubleReal> one0 = new One<DoubleDoubleReal>(doubleDoubleRealFactory0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.tanh(one0);
      Sum<DoubleDoubleReal> sum0 = new Sum<DoubleDoubleReal>(differentialFunction0, differentialFunction0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      PreEvaluator<DoubleDoubleReal> preEvaluator0 = (PreEvaluator<DoubleDoubleReal>) mock(PreEvaluator.class, new ViolatedAssumptionAnswer());
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("C[!!?bDi^RA'H4", doubleDoubleReal0, doubleDoubleRealFactory0, preEvaluator0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction1 = sum0.diff(variable0);
      assertFalse(differentialFunction1.equals((Object)differentialFunction0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DifferentialFunctionFactory<DoubleDoubleReal> differentialFunctionFactory0 = new DifferentialFunctionFactory<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Zero<DoubleDoubleReal> zero0 = differentialFunctionFactory0.zero();
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = differentialFunctionFactory0.acos(zero0);
      assertNotNull(differentialFunction0);
  }
}
