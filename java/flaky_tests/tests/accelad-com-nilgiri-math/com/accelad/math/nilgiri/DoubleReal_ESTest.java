/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:43:46 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.nilgiri.DoubleReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleReal_ESTest extends DoubleReal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = new DoubleReal();
      boolean boolean0 = doubleReal1.equals(doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(doubleReal0.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-545.754150621695));
      doubleReal0.hashCode();
      assertEquals("-545.754150621695", doubleReal0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal("0.0");
      assertEquals(0.0, doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.tanh();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.tanh();
      assertEquals("1.0", doubleReal1.toString());
      assertEquals("1447.96646106206", doubleReal0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.tan();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal1.minus(0.0);
      doubleReal2.tan();
      assertTrue(doubleReal2.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.square();
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal1.log();
      DoubleReal doubleReal3 = doubleReal2.sinh();
      assertEquals("NaN", doubleReal3.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal1.sinh();
      assertTrue(doubleReal2.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-3333.576040295));
      DoubleReal doubleReal1 = doubleReal0.sin();
      assertEquals("-3333.576040295", doubleReal0.toString());
      assertEquals("0.3393584931713211", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.minus(3105.047);
      DoubleReal doubleReal2 = doubleReal1.sin();
      assertEquals(0.0, doubleReal0.getReal(), 0.01);
      assertEquals((-0.9141711323768507), doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.sgn();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.acos();
      DoubleReal doubleReal2 = doubleReal1.sgn();
      assertEquals(1.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.cosh();
      DoubleReal doubleReal2 = doubleReal1.round();
      assertTrue(doubleReal2.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-2260.882367256015));
      DoubleReal doubleReal1 = doubleReal0.round();
      assertEquals((-2261.0), doubleReal1.getReal(), 0.01);
      assertEquals("-2260.882367256015", doubleReal0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.pwrs(doubleReal0);
      assertEquals(0.0, doubleReal0.doubleValue(), 0.01);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.plus((-184.0728161));
      DoubleReal doubleReal2 = doubleReal0.sin();
      DoubleReal doubleReal3 = doubleReal2.pwrs(doubleReal1);
      assertEquals("0.0", doubleReal2.toString());
      assertEquals("NaN", doubleReal3.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal0.inverse();
      DoubleReal doubleReal3 = doubleReal2.pwr(doubleReal1);
      assertFalse(doubleReal2.equals((Object)doubleReal1));
      assertEquals(0.0, doubleReal3.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(402.887084255);
      DoubleReal doubleReal1 = doubleReal0.prod(402.887084255);
      assertEquals(162318.00265949545, doubleReal1.getReal(), 0.01);
      assertEquals(402.887084255, doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.mul(0L);
      DoubleReal doubleReal2 = doubleReal1.pow(doubleReal0);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.pow(0);
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.tan();
      DoubleReal doubleReal2 = doubleReal1.pow((-2841));
      assertEquals(Double.NEGATIVE_INFINITY, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.pow(1575.1003970283218);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.pow((-1.0));
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.plus(doubleReal0);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.plus(0.0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.negate();
      assertFalse(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.tan();
      DoubleReal doubleReal2 = doubleReal0.mul(doubleReal1);
      assertEquals("-460.237421448627", doubleReal2.toString());
      assertEquals("1447.96646106206", doubleReal0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.mul((-1141L));
      assertEquals((-1.0), doubleReal0.doubleValue(), 0.01);
      assertEquals(1141.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.pow(doubleReal0);
      DoubleReal doubleReal2 = doubleReal1.mul((-1498L));
      assertEquals((-1498.0), doubleReal2.doubleValue(), 0.01);
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      doubleReal0.modulus();
      assertEquals(1.0, doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.minus(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.cosh();
      DoubleReal doubleReal2 = doubleReal1.minus(doubleReal0);
      assertTrue(doubleReal2.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = new DoubleReal(1);
      DoubleReal doubleReal2 = doubleReal0.minus(doubleReal1);
      assertEquals((-1.0), doubleReal2.doubleValue(), 0.01);
      assertEquals("1.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.minus(0.0);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal1.minus(0.0);
      DoubleReal doubleReal3 = doubleReal2.mul(doubleReal2);
      assertEquals("-Infinity", doubleReal2.toString());
      assertEquals("Infinity", doubleReal3.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      DoubleReal doubleReal1 = doubleReal0.log10();
      assertEquals(0.0, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.5);
      DoubleReal doubleReal1 = doubleReal0.exp();
      DoubleReal doubleReal2 = doubleReal1.log10();
      assertEquals(0.21714724095162594, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      DoubleReal doubleReal1 = doubleReal0.log();
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log();
      assertEquals("-Infinity", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      doubleReal0.set((-1295.694868186959));
      DoubleReal doubleReal1 = doubleReal0.inverse();
      assertEquals((-7.717866486569333E-4), doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      double double0 = doubleReal0.getReal();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.negate();
      double double0 = doubleReal1.getReal();
      assertEquals("1447.96646106206", doubleReal0.toString());
      assertEquals((-1447.96646106206), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      DoubleReal doubleReal1 = doubleReal0.floor();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-303.4260174633371));
      DoubleReal doubleReal1 = doubleReal0.floor();
      assertEquals((-304.0), doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.negate();
      DoubleReal doubleReal2 = doubleReal1.exp();
      assertEquals(0.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      double double0 = doubleReal0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      double double0 = doubleReal0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.pwr(doubleReal0);
      DoubleReal doubleReal2 = doubleReal0.div(doubleReal1);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-303.4260174633371));
      DoubleReal doubleReal1 = new DoubleReal();
      DoubleReal doubleReal2 = doubleReal0.div(doubleReal1);
      assertEquals(Double.NEGATIVE_INFINITY, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.div(1.0);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.3098908001114);
      DoubleReal doubleReal1 = doubleReal0.div((-59.22648963860479));
      assertEquals(1447.3098908001114, doubleReal0.doubleValue(), 0.01);
      assertEquals("-24.43686768592024", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1221.0));
      DoubleReal doubleReal1 = doubleReal0.cos();
      assertEquals((-0.47173203411403275), doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.ceil();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      DoubleReal doubleReal1 = doubleReal0.ceil();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.atanh();
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.plus((-184.0728161));
      DoubleReal doubleReal2 = doubleReal1.atanh();
      assertEquals("-184.0728161", doubleReal1.toString());
      assertEquals("NaN", doubleReal2.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.atan();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.exp();
      DoubleReal doubleReal2 = doubleReal1.atan();
      assertEquals("0.7853981633974483", doubleReal2.toString());
      assertEquals(1.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.asinh();
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.cos();
      DoubleReal doubleReal2 = doubleReal1.asinh();
      assertEquals(0.8813735870195429, doubleReal2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.asin();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-303.4260174633371));
      doubleReal0.asin();
      assertEquals((-303.4260174633371), doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1.0);
      DoubleReal doubleReal1 = doubleReal0.acosh();
      assertEquals(0.0, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.pow(doubleReal0);
      DoubleReal doubleReal2 = doubleReal1.acos();
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleReal0.plus((-184.0728161));
      doubleReal1.abs();
      assertEquals((-184.0728161), doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.pwrs((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.pwr((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.pow((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.plus((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.mul((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.div((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleReal doubleReal0 = null;
      try {
        doubleReal0 = new DoubleReal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.pow((-1175.8133347240941));
      assertEquals(Double.POSITIVE_INFINITY, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-2260.882367256015));
      double double0 = doubleReal0.doubleValue();
      assertEquals((-2260.882367256015), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = new DoubleReal(0.0);
      boolean boolean0 = doubleReal0.equals(doubleReal1);
      assertTrue(boolean0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      Object object0 = new Object();
      boolean boolean0 = doubleReal0.equals(object0);
      assertFalse(boolean0);
      assertEquals("0.0", doubleReal0.toString());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      boolean boolean0 = doubleReal0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1447.96646106206, doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      boolean boolean0 = doubleReal0.equals(doubleReal0);
      assertTrue(boolean0);
      assertEquals(1447.96646106206, doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      DoubleReal doubleReal1 = doubleReal0.sqrt();
      boolean boolean0 = doubleReal0.equals(doubleReal1);
      assertFalse(doubleReal1.equals((Object)doubleReal0));
      assertFalse(boolean0);
      assertEquals(38.05215448646844, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.atan();
      assertEquals("-1.0", doubleReal0.toString());
      assertEquals("-0.7853981633974483", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.pow(1870);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.sinh();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.round();
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.negate();
      assertFalse(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.square();
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.mul(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.log();
      DoubleReal doubleReal2 = doubleReal1.plus((-2711.7434818864));
      assertEquals(Double.NaN, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.acos();
      DoubleReal doubleReal2 = doubleReal0.plus(doubleReal1);
      assertEquals("2.141592653589793", doubleReal2.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.plus(doubleReal0);
      assertEquals((-1.0), doubleReal0.doubleValue(), 0.01);
      assertEquals(2.0, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal(1447.96646106206);
      double double0 = doubleReal0.getReal();
      assertEquals(1447.96646106206, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.sqrt();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleReal doubleReal0 = null;
      try {
        doubleReal0 = new DoubleReal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      String string0 = doubleReal0.toString();
      assertEquals("-1.0", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.prod((-3044.5747831898407));
      assertEquals("-0.0", doubleReal1.toString());
      assertEquals(0.0, doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.abs();
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.asinh();
      assertEquals((-0.8813735870195428), doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.floor();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.tanh();
      assertEquals((-1.0), doubleReal0.doubleValue(), 0.01);
      assertEquals("-0.7615941559557649", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.acosh();
      assertEquals(0.0, doubleReal0.doubleValue(), 0.01);
      assertEquals(Double.NaN, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.div((-1.0));
      assertEquals((-1.0), doubleReal0.getReal(), 0.01);
      assertEquals("1.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.div(doubleReal0);
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.atanh();
      assertEquals("-1.0", doubleReal0.toString());
      assertEquals(Double.NEGATIVE_INFINITY, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.ceil();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.pow(doubleReal0);
      assertEquals((-1.0), doubleReal0.doubleValue(), 0.01);
      assertEquals("-1.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      doubleReal0.modulus();
      assertEquals(0.0, doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      // Undeclared exception!
      try { 
        doubleReal0.minus((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.sgn();
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleReal1.inverse();
      assertEquals("-Infinity", doubleReal1.toString());
      assertEquals(-0.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.pwrs(doubleReal0);
      assertEquals((-1.0), doubleReal1.doubleValue(), 0.01);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleReal0.asin();
      assertEquals("-1.5707963267948966", doubleReal1.toString());
      assertEquals((-1.0), doubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.minus((-3044.5747831898407));
      DoubleReal doubleReal2 = doubleReal1.prod((-3044.5747831898407));
      assertEquals((-9269435.610435465), doubleReal2.doubleValue(), 0.01);
      assertEquals(0.0, doubleReal0.doubleValue(), 0.01);
  }
}
