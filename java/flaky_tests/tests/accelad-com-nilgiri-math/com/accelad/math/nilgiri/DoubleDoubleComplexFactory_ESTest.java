/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:53:53 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.nilgiri.DoubleDoubleComplex;
import com.accelad.math.nilgiri.DoubleDoubleComplexFactory;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDoubleComplexFactory_ESTest extends DoubleDoubleComplexFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      assertNotNull(doubleDoubleComplexFactory0);
      
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      doubleDoubleComplexFactory0.log10(doubleDoubleComplex0);
      // Undeclared exception!
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-915.7), (-915.7));
      // Undeclared exception!
      doubleDoubleComplexFactory0.atanh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(910.11967051332, 910.11967051332);
      // Undeclared exception!
      doubleDoubleComplexFactory0.acosh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sinh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplexFactory0.sin(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-690.0));
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      // Undeclared exception!
      doubleDoubleComplexFactory0.asinh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      doubleDoubleComplex0.equals(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex1);
      doubleDoubleComplex0.pwr(doubleDoubleComplex1);
      doubleDoubleComplex2.sinh();
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.sqrt();
      doubleDoubleComplex0.asin();
      doubleDoubleReal0.square();
      doubleDoubleComplexFactory0.random(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex1);
      doubleDoubleComplex4.atanh();
      doubleDoubleComplexFactory0.max(doubleDoubleComplex1, doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex0, doubleDoubleComplex3);
      Random.setNextRandom((-1242));
      doubleDoubleComplexFactory0.acosh(doubleDoubleComplex5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.asin(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDouble doubleDouble1 = DoubleDouble.atan2(doubleDouble0, doubleDouble0);
      DoubleDouble doubleDouble2 = DoubleDouble.fromDoubleDouble(doubleDouble1);
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble2, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplexFactory0.exp(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1.0));
      doubleDoubleComplex0.asin();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.pow(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.gauss(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-4085.601179754));
      doubleDoubleComplexFactory0.ceil(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.asin(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(0.0, 664.049741625397);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex2);
      Object object0 = new Object();
      doubleDoubleComplex2.equals(object0);
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex3.cosh();
      doubleDoubleComplex4.sin();
      doubleDoubleComplex3.div(doubleDoubleComplex4);
      doubleDoubleComplexFactory0.log10(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.atan(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.log(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.round(doubleDoubleComplex3);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(2558.20113019, 1166.60375369631);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.mc(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.gauss(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.mc(doubleDoubleComplex2, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1148.79), (-1148.79));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pow(doubleDoubleComplex2, doubleDoubleComplex2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.sinh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.gauss((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDouble doubleDouble0 = DoubleDouble.ONE;
      DoubleDoubleReal doubleDoubleReal1 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal1);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex0);
      doubleDoubleComplex0.plus(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex0);
      doubleDoubleReal1.pow(2);
      DoubleDouble doubleDouble1 = DoubleDouble.HALF;
      doubleDouble1.pow(doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex3 = new DoubleDoubleComplex(doubleDouble1, doubleDouble1);
      doubleDoubleComplex3.pwr(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex3, doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex3, doubleDoubleComplex4);
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex5);
      doubleDoubleComplexFactory0.acosh(doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.val((-6213.027077));
      doubleDoubleComplexFactory0.exp(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.acosh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(486.94074, 1577.602846945749);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.asinh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.round(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.sin(doubleDoubleComplex3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(6.0, 6.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex0, doubleDoubleComplex0);
      doubleDoubleComplexFactory0.rand(doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-6175.853672));
      // Undeclared exception!
      doubleDoubleComplexFactory0.sinh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      doubleDouble0.floor();
      doubleDoubleComplex0.log();
      doubleDoubleComplex0.sinh();
      doubleDoubleComplexFactory0.log(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1677.381591554403));
      // Undeclared exception!
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(2070.5500286, (-1878.638));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex0);
      doubleDoubleComplex0.conjugate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.val((-1878.638));
      doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex3, doubleDoubleComplex2);
      doubleDoubleComplexFactory0.asinh(doubleDoubleComplex0);
      doubleDoubleComplex1.conjugate();
      doubleDoubleComplexFactory0.asin(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.u(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.log10(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.ifx(doubleDoubleComplex3, doubleDoubleComplex0, doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-1.0));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex0, doubleDoubleComplex1, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.round(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.sgn(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.asinh(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0, 380.59925821);
      doubleDoubleComplex0.log();
      doubleDoubleComplexFactory0.exp(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.exp(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sinh(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.log(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-4578.566), (-4578.566));
      // Undeclared exception!
      doubleDoubleComplexFactory0.tanh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.uramp((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(2.718281828459045, 2.718281828459045);
      doubleDoubleComplex0.exp();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.flat(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.sin(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = new DoubleDoubleComplex(2.718281828459045, 2.718281828459045);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex2);
      doubleDoubleComplex2.pow(doubleDoubleComplex1);
      doubleDoubleComplex2.acos();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.square(doubleDoubleComplex3);
      doubleDoubleComplex4.tanh();
      doubleDoubleComplex4.acosh();
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex4, doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.val(0.0);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory1.asin(doubleDoubleComplex5);
      doubleDoubleComplexFactory1.asin(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory1.atanh(doubleDoubleComplex1);
      doubleDoubleComplexFactory1.sinh(doubleDoubleComplex7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.asinh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.log(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.random(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      doubleDouble0.reciprocal();
      doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex0, doubleDoubleComplex0);
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.pow(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex3);
      doubleDoubleComplex3.exp();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex3.plus(doubleDoubleComplex2);
      doubleDouble0.pow(0);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.round(doubleDoubleComplex4);
      doubleDoubleComplexFactory0.acos(doubleDoubleComplex5);
      doubleDoubleComplexFactory0.atan(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex7 = DoubleDoubleComplex.I;
      doubleDoubleComplexFactory0.atanh(doubleDoubleComplex7);
      doubleDoubleComplexFactory0.val((double) 0);
      DoubleDoubleComplex doubleDoubleComplex8 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      doubleDoubleComplexFactory0.uramp(doubleDoubleComplex8);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.exp(doubleDoubleComplex0);
      assertEquals(0.8414709848078965, doubleDoubleComplex1.getImaginary(), 0.01);
      
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.abs(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.round(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sin(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.round(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.val(1.23259516440783E-32);
      doubleDoubleComplexFactory0.rand(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex4.sinh();
      doubleDoubleComplexFactory0.sinh(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex5);
      doubleDoubleComplex4.equals(doubleDoubleComplex6);
      doubleDoubleComplex3.div(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.mc(doubleDoubleComplex7, doubleDoubleComplex4);
      doubleDoubleComplexFactory0.asin(doubleDoubleComplex5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex0);
      doubleDoubleComplex1.sin();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory1.pwr(doubleDoubleComplex1, doubleDoubleComplex1);
      doubleDoubleComplexFactory0.tanh(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex3 = new DoubleDoubleComplex(0.0);
      doubleDoubleComplex3.tanh();
      doubleDoubleComplex3.toString();
      doubleDoubleComplexFactory0.max(doubleDoubleComplex3, doubleDoubleComplex3);
      doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.asinh(doubleDoubleComplex4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-555.522389236), (-555.522389236));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex0, doubleDoubleComplex0);
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.min(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sinh(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.round(doubleDoubleComplex2);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.ifx((DoubleDoubleComplex) null, (DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.round((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.min(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.log(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.pwr(doubleDoubleComplex2, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pwrs((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex1, doubleDoubleComplex1);
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex2, doubleDoubleComplex2);
      doubleDoubleComplexFactory0.random(doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.exp((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory1.val((-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.max(doubleDoubleComplex1, doubleDoubleComplex0);
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.tanh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = null;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-3365.0310527), 0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.floor(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex2, doubleDoubleComplex0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.acosh(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.cosh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.acos((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      doubleDoubleComplexFactory0.sinh(doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      double double0 = (-0.5);
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-0.5));
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex2);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.atanh(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex4.atan();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-296.37693358));
      DoubleDoubleComplex doubleDoubleComplex6 = new DoubleDoubleComplex(doubleDoubleReal0);
      doubleDoubleComplex6.equals(doubleDoubleComplexFactory1);
      doubleDoubleComplexFactory1.sinh(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory1.sqrt(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplexFactory1.abs(doubleDoubleComplex5);
      doubleDoubleComplexFactory1.sinh(doubleDoubleComplex8);
      doubleDoubleComplex7.toString();
      // Undeclared exception!
      try { 
        DoubleDouble.fromString("DoubleDoubleComplex{imaginary=0, real=0.557361509721400694572507890759}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'D' at position 1 in string DoubleDoubleComplex{imaginary=0, real=0.557361509721400694572507890759}
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      doubleDouble0.log();
      DoubleDouble doubleDouble1 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atanh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = new DoubleDoubleComplex(0, 1.23259516440783E-32);
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex0, doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.round(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.ceil(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex0.acosh();
      Object object0 = new Object();
      doubleDoubleComplex3.equals(object0);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex5);
      doubleDoubleComplex6.toString();
      doubleDoubleComplexFactory0.acos(doubleDoubleComplex5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      Random.setNextRandom((-2822));
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.atan(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.gauss(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory1.buf(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.pow(doubleDoubleComplex2, doubleDoubleComplex4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-2193.63125704), 0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex0);
      doubleDoubleComplex1.atanh();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.asinh(doubleDoubleComplex1);
      DoubleDoubleComplexFactory.instance();
      doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex2, doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.inv((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble1);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.tan(doubleDoubleComplex0);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory1.tanh(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.round(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex0.pow(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplex2.conjugate();
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex3, doubleDoubleComplex4, doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplexFactory1.pwrs(doubleDoubleComplex4, doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex9 = doubleDoubleComplexFactory1.max(doubleDoubleComplex8, doubleDoubleComplex1);
      doubleDoubleComplexFactory1.cos(doubleDoubleComplex6);
      doubleDoubleComplexFactory0.flat(doubleDoubleComplex9);
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex10 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex8, doubleDoubleComplex7, doubleDoubleComplex8);
      assertEquals((-0.004085571603704468), doubleDoubleComplex10.getReal(), 0.01);
      
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex9);
      doubleDoubleComplexFactory1.cosh(doubleDoubleComplex3);
      doubleDoubleComplexFactory1.uramp(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex11 = doubleDoubleComplexFactory1.sqrt(doubleDoubleComplex1);
      doubleDoubleComplex11.atanh();
      doubleDoubleComplex3.atan();
      doubleDoubleComplexFactory0.atanh(doubleDoubleComplex7);
      doubleDoubleComplexFactory1.inv(doubleDoubleComplex7);
      doubleDoubleComplexFactory1.tanh(doubleDoubleComplex9);
      assertEquals(1.9236619552013787, doubleDoubleComplex9.getReal(), 0.01);
      
      DoubleDoubleComplexFactory.instance();
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex4);
      assertFalse(doubleDoubleComplex4.equals((Object)doubleDoubleComplex10));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      doubleDouble0.exp();
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.ZERO;
      doubleDoubleComplex1.abs();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.plus(doubleDoubleComplex1);
      doubleDoubleComplex1.plus(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.max(doubleDoubleComplex0, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex1.conjugate();
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex0.div(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.log(doubleDoubleComplex5);
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.gauss(doubleDoubleComplex6);
      doubleDoubleComplexFactory0.max(doubleDoubleComplex3, doubleDoubleComplex7);
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex4);
      double double0 = 724.8817958444;
      doubleDoubleComplexFactory0.val(1.23259516440783E-32);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory1.log10(doubleDoubleComplex4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.25, 0.25);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex0.tanh();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex2, doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex9 = doubleDoubleComplexFactory0.mc(doubleDoubleComplex8, doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex10 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex9);
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex9, doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex11 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex7);
      DoubleDoubleComplex doubleDoubleComplex12 = doubleDoubleComplexFactory0.asinh(doubleDoubleComplex9);
      doubleDoubleComplex12.log();
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex3, doubleDoubleComplex11);
      DoubleDoubleComplex doubleDoubleComplex13 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex10);
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex14 = doubleDoubleComplexFactory0.min(doubleDoubleComplex11, doubleDoubleComplex13);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex10, doubleDoubleComplex14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.one();
      doubleDoubleComplex0.pow(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex1.conjugate();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.inv(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex2.exp();
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplex2.mul(0L);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplex4.plus(doubleDoubleComplex5);
      int int0 = 0;
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      doubleDouble0.pow(0);
      doubleDoubleComplexFactory0.log10(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplexFactory0.pow(doubleDoubleComplex5, doubleDoubleComplex6);
      doubleDoubleComplexFactory0.pow(doubleDoubleComplex1, doubleDoubleComplex8);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex2, doubleDoubleComplex7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.u((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.tan(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex2);
      assertNotSame(doubleDoubleComplex3, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1.0), (-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acosh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.atan();
      doubleDoubleComplexFactory0.mc(doubleDoubleComplex2, doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.sin(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.u(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.ifx(doubleDoubleComplex3, doubleDoubleComplex1, doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex3);
      doubleDoubleComplex4.cosh();
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex4.inverse();
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplex3.acos();
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.exp(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplex1.log10();
      doubleDoubleComplex1.pwr(doubleDoubleComplex5);
      doubleDoubleComplex7.acos();
      doubleDoubleComplexFactory0.ifx(doubleDoubleComplex3, doubleDoubleComplex3, doubleDoubleComplex7);
      doubleDoubleComplex6.mul(1282L);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      doubleDoubleComplex7.atanh();
      DoubleDoubleComplex doubleDoubleComplex9 = DoubleDoubleComplex.I;
      doubleDoubleComplexFactory1.sgn(doubleDoubleComplex9);
      doubleDoubleComplexFactory0.sgn(doubleDoubleComplex6);
      doubleDoubleComplex2.plus(doubleDoubleComplex8);
      doubleDoubleComplexFactory1.asin(doubleDoubleComplex9);
      doubleDoubleComplexFactory0.zero();
      doubleDoubleComplexFactory0.square(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.floor(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val("A-=|Y[VnYF5nhKxUB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'A' at position 1 in string A-=|Y[VnYF5nhKxUB
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.hypot((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.ifx((DoubleDoubleComplex) null, (DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log10((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.25, 0.25);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.pwrs(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex2);
      doubleDoubleComplexFactory1.abs(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplex1.tanh();
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex4, doubleDoubleComplex0);
      doubleDoubleComplexFactory1.cos(doubleDoubleComplex5);
      doubleDoubleComplexFactory1.tanh(doubleDoubleComplex6);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex8 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex9 = doubleDoubleComplexFactory1.mc(doubleDoubleComplex8, doubleDoubleComplex8);
      doubleDoubleComplexFactory0.rand(doubleDoubleComplex6);
      doubleDoubleComplexFactory0.hypot(doubleDoubleComplex3, doubleDoubleComplex7);
      doubleDoubleComplexFactory0.val(0.0);
      doubleDoubleComplexFactory0.min(doubleDoubleComplex9, doubleDoubleComplex7);
      doubleDoubleComplexFactory1.cosh(doubleDoubleComplex2);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex1, doubleDoubleComplex9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0, 3320.72759);
      doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.abs(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.tanh();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex1, doubleDoubleComplex1);
      doubleDoubleComplexFactory0.cos(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.uramp(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex3);
      doubleDoubleComplexFactory0.mc(doubleDoubleComplex5, doubleDoubleComplex1);
      doubleDoubleComplexFactory0.rand(doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex6, doubleDoubleComplex4);
      doubleDoubleComplexFactory0.val((-952.425313));
      doubleDoubleComplexFactory0.min(doubleDoubleComplex4, doubleDoubleComplex5);
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex6);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex7, doubleDoubleComplex5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.acosh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = DoubleDoubleComplex.I;
      doubleDoubleComplex2.equals(doubleDoubleComplexFactory0);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex1.inverse();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex2);
      doubleDoubleComplex2.div(doubleDoubleComplex4);
      doubleDoubleComplex0.cosh();
      // Undeclared exception!
      try { 
        doubleDoubleComplex3.atanh();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      assertEquals(0.0, doubleDoubleComplex0.getImaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.25, 0.25);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex1);
      doubleDoubleComplex2.toString();
      doubleDoubleComplex1.exp();
      doubleDoubleComplex0.cosh();
      DoubleDoubleComplex doubleDoubleComplex3 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex3, doubleDoubleComplex1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.u(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.ceil((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble1);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory1.hypot(doubleDoubleComplex1, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex0.log10();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.asinh(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory1.atanh(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex4);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory1.mc(doubleDoubleComplex5, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplex3.log();
      doubleDoubleComplexFactory1.gauss(doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex9 = doubleDoubleComplexFactory0.mc(doubleDoubleComplex6, doubleDoubleComplex4);
      assertEquals((-9.567287304581418), doubleDoubleComplex9.getReal(), 0.01);
      
      doubleDoubleComplexFactory1.zero();
      DoubleDoubleComplex doubleDoubleComplex10 = doubleDoubleComplexFactory1.sgn(doubleDoubleComplex8);
      doubleDoubleComplex5.mul(doubleDoubleComplex10);
      doubleDoubleComplex5.atanh();
      doubleDoubleComplexFactory1.round(doubleDoubleComplex7);
      doubleDoubleComplex0.atanh();
      doubleDoubleComplex1.mul(doubleDoubleComplex10);
      DoubleDoubleComplex doubleDoubleComplex11 = doubleDoubleComplexFactory1.gauss(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex12 = doubleDoubleComplexFactory1.log10(doubleDoubleComplex3);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory2 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex13 = doubleDoubleComplexFactory2.log10(doubleDoubleComplex12);
      DoubleDoubleComplex doubleDoubleComplex14 = doubleDoubleComplexFactory1.square(doubleDoubleComplex12);
      assertEquals((-0.012447544322274207), doubleDoubleComplex14.getImaginary(), 0.01);
      
      DoubleDoubleComplex doubleDoubleComplex15 = doubleDoubleComplexFactory1.pwrs(doubleDoubleComplex11, doubleDoubleComplex13);
      assertEquals(1.6802172315968338, doubleDoubleComplex15.getReal(), 0.01);
      
      doubleDoubleComplexFactory1.asin(doubleDoubleComplex3);
      assertFalse(doubleDoubleComplex0.equals((Object)doubleDoubleComplex2));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.gauss(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      doubleDoubleComplexFactory0.tanh(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.asinh(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.asinh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(2070.5500286, (-1878.638));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwr(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex1);
      doubleDoubleComplex0.conjugate();
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.val((-1878.638));
      doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex4, doubleDoubleComplex3);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.asinh(doubleDoubleComplex1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex0.minus(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.sgn(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.atanh(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.acos(doubleDoubleComplex4);
      doubleDoubleComplexFactory0.round(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log10(doubleDoubleComplex3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.atanh(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = new DoubleDoubleComplex((-1.0), (-1.0));
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex1, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex1);
      doubleDoubleComplex4.acosh();
      Object object0 = new Object();
      doubleDoubleComplex2.equals(object0);
      doubleDoubleComplexFactory0.acos(doubleDoubleComplex4);
      assertTrue(doubleDoubleComplex4.equals((Object)doubleDoubleComplex3));
      assertTrue(doubleDoubleComplex0.equals((Object)doubleDoubleComplex3));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.one();
      assertEquals(0.0, doubleDoubleComplex0.getImaginary(), 0.01);
      
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acos(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex0, doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.asinh();
      doubleDoubleComplexFactory0.round(doubleDoubleComplex1);
      doubleDoubleComplex0.toString();
      doubleDoubleComplexFactory0.acos(doubleDoubleComplex1);
      doubleDoubleComplex0.abs();
      doubleDoubleComplex0.negate();
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.one();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.pwr(doubleDoubleComplex2, doubleDoubleComplex3);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      doubleDoubleComplex1.equals(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory1.exp(doubleDoubleComplex0);
      doubleDoubleComplexFactory0.sin(doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory1.zero();
      doubleDoubleComplex6.div(doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex6, doubleDoubleComplex2, doubleDoubleComplex0);
      assertEquals(1.0, doubleDoubleComplex7.getReal(), 0.01);
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex4));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.MINUS_ONE;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      doubleDouble0.exp();
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.ZERO;
      doubleDoubleComplex1.abs();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.plus(doubleDoubleComplex1);
      doubleDoubleComplex1.plus(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.max(doubleDoubleComplex0, doubleDoubleComplex1);
      doubleDoubleComplex1.conjugate();
      doubleDoubleComplex0.div(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex3);
      doubleDoubleComplex4.sin();
      // Undeclared exception!
      try { 
        doubleDoubleComplex1.log10();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.buf((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = DoubleDoubleComplex.I;
      doubleDoubleComplex1.minus(doubleDoubleComplex2);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.acos(doubleDoubleComplex3);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log10(doubleDoubleComplex4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      double double0 = (-1724.0065084287116);
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.val((-1724.0065084287116));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.floor(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.max(doubleDoubleComplex2, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex2.log10();
      doubleDoubleComplex4.acosh();
      DoubleDoubleComplex doubleDoubleComplex5 = null;
      doubleDoubleComplex0.cos();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pwr(doubleDoubleComplex3, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0, 0.0);
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      doubleDoubleReal0.tan();
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.atanh();
      doubleDoubleComplex0.minus(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.round(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex3.acosh();
      doubleDoubleComplex4.sinh();
      doubleDoubleComplex2.cosh();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.round(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(901.2250651, 901.2250651);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory1.ifx(doubleDoubleComplex0, doubleDoubleComplex1, doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory1.sgn(doubleDoubleComplex2);
      doubleDoubleComplexFactory1.rand(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex3);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory2 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory2.max((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory1.square(doubleDoubleComplex0);
      assertEquals(1.0, doubleDoubleComplex1.getReal(), 0.01);
      
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.log10(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex2);
      assertNotSame(doubleDoubleComplex1, doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log10(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      doubleDoubleReal0.abs();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val("com.accelad.math.nilgiri.DoubleDoubleComplexFactory");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character 'c' at position 1 in string com.accelad.math.nilgiri.DoubleDoubleComplexFactory
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.flat((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.random(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.flat(doubleDoubleComplex1);
      doubleDoubleComplex2.inverse();
      doubleDoubleComplex2.div(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.log();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.square((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.mc((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.val(1714.935520477);
      assertEquals(1714.935520477, doubleDoubleComplex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.25, 0.25);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplex0.tanh();
      DoubleDoubleComplex doubleDoubleComplex5 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex3, doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex6 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex7 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex5);
      doubleDoubleComplexFactory0.uramp(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex8 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex7);
      DoubleDoubleComplex doubleDoubleComplex9 = doubleDoubleComplexFactory0.mc(doubleDoubleComplex8, doubleDoubleComplex3);
      DoubleDoubleComplex doubleDoubleComplex10 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex9);
      DoubleDoubleComplex doubleDoubleComplex11 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex9, doubleDoubleComplex6);
      doubleDoubleComplexFactory0.val(0.0);
      doubleDoubleComplexFactory0.min(doubleDoubleComplex11, doubleDoubleComplex11);
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex4);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex10, doubleDoubleComplex2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.uramp(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acos(doubleDoubleComplex0);
      doubleDoubleComplex1.mul(760L);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex1);
      doubleDoubleComplex2.toString();
      doubleDoubleComplex0.exp();
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.cosh();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex3, doubleDoubleComplex1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.floor((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplex0.cosh();
      doubleDoubleComplex0.acos();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex0, doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = DoubleDoubleComplex.I;
      doubleDoubleComplexFactory0.buf(doubleDoubleComplex2);
      doubleDoubleComplexFactory0.floor(doubleDoubleComplex0);
      doubleDoubleComplex1.acos();
      doubleDoubleComplex1.pow(0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplex3.pow(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex0, doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      doubleDoubleComplexFactory0.abs(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.pwrs(doubleDoubleComplex1, doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atanh(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      double double0 = 0.0;
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.inv(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atanh(doubleDoubleComplex2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.val("' at position ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Unexpected character ''' at position 1 in string ' at position 
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.rand((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      doubleDoubleReal0.pow(0);
      doubleDoubleComplex0.negate();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.rand(doubleDoubleComplex0);
      doubleDoubleComplex1.div(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log(doubleDoubleComplex1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acosh(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.acos(doubleDoubleComplex1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.buf(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex0, doubleDoubleComplex0);
      doubleDoubleComplex1.tanh();
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex1);
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      doubleDoubleComplexFactory1.random(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.plus(doubleDoubleComplex0);
      doubleDoubleComplexFactory1.buf(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.acos(doubleDoubleComplex2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.max((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.acosh(doubleDoubleComplex0);
      assertEquals(1.5707963267948966, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex0, doubleDoubleComplex0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.sqrt((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplexFactory0.sqrt(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.acosh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.max(doubleDoubleComplex2, doubleDoubleComplex2);
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex3);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atan2(doubleDoubleComplex1, doubleDoubleComplex3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = null;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.random((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.random((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.asin((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ceil(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.tan(doubleDoubleComplex2);
      assertTrue(doubleDoubleComplex3.equals((Object)doubleDoubleComplex1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      doubleDoubleComplex0.abs();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atanh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.exp(doubleDoubleComplex2);
      doubleDoubleComplex0.conjugate();
      DoubleDoubleComplex doubleDoubleComplex4 = null;
      // Undeclared exception!
      try { 
        doubleDoubleComplex3.minus((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.cos((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cos(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex1, doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.cosh(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pwr((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.one();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.asin(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.inv(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.asin(doubleDoubleComplex0);
      doubleDoubleComplex0.div(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atan(doubleDoubleComplex1);
      doubleDoubleComplexFactory0.exp(doubleDoubleComplex2);
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(1.4456468917292502E-16);
      DoubleDoubleComplex doubleDoubleComplex3 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      doubleDoubleComplex3.cos();
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.tan();
      DoubleDoubleComplex doubleDoubleComplex4 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex3);
      doubleDoubleComplex4.inverse();
      doubleDoubleComplex4.log();
      doubleDoubleComplexFactory0.pwr(doubleDoubleComplex4, doubleDoubleComplex4);
      doubleDoubleComplexFactory0.zero();
      doubleDoubleComplexFactory0.inv(doubleDoubleComplex3);
      DoubleDoubleReal doubleDoubleReal2 = DoubleDoubleReal.TWO;
      DoubleDoubleComplex doubleDoubleComplex5 = new DoubleDoubleComplex(doubleDoubleReal2, doubleDoubleReal1);
      doubleDoubleComplex5.toString();
      doubleDoubleComplexFactory0.cosh(doubleDoubleComplex5);
      DoubleDoubleComplex doubleDoubleComplex6 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.cos(doubleDoubleComplex6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.sgn((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = null;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.sgn((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.one();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sgn(doubleDoubleComplex0);
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.one();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex0, doubleDoubleComplex0, doubleDoubleComplex0);
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.ifx(doubleDoubleComplex0, doubleDoubleComplex0, doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log(doubleDoubleComplex1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = null;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.abs((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.abs((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex0, doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.sin((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.one();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.tanh(doubleDoubleComplex0);
      assertNotSame(doubleDoubleComplex1, doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplexFactory doubleDoubleComplexFactory1 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.sin(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory1.tanh(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplexFactory0.hypot(doubleDoubleComplex2, doubleDoubleComplex1);
      assertEquals(0.0, doubleDoubleComplex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pow(doubleDoubleComplex0, doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pow((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.square(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      doubleDoubleReal0.tan();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplexFactory0.square(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.pow(doubleDoubleComplex1, doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.min((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO_PI;
      DoubleDouble doubleDouble1 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble1);
      doubleDoubleComplex0.log();
      doubleDoubleComplexFactory0.tan(doubleDoubleComplex0);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.min((DoubleDoubleComplex) null, (DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.tan((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      DoubleDoubleComplex doubleDoubleComplex0 = doubleDoubleComplexFactory0.zero();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.exp();
      doubleDoubleComplex0.negate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplexFactory0.atanh(doubleDoubleComplex0);
      doubleDoubleComplex2.atanh();
      doubleDoubleComplex2.minus(doubleDoubleComplex0);
      doubleDoubleComplex2.mul(292L);
      doubleDoubleComplex0.equals(doubleDoubleComplex1);
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.log(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DoubleDoubleComplexFactory doubleDoubleComplexFactory0 = DoubleDoubleComplexFactory.instance();
      // Undeclared exception!
      try { 
        doubleDoubleComplexFactory0.atanh((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplexFactory", e);
      }
  }
}
