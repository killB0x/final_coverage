/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:46:30 GMT 2022
 */

package com.accelad.math.nilgiri.autodiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import com.accelad.math.nilgiri.DoubleDoubleRealFactory;
import com.accelad.math.nilgiri.autodiff.DifferentialFunction;
import com.accelad.math.nilgiri.autodiff.Inverse;
import com.accelad.math.nilgiri.autodiff.PolynomialTerm;
import com.accelad.math.nilgiri.autodiff.PreEvaluator;
import com.accelad.math.nilgiri.autodiff.Variable;
import com.accelad.math.nilgiri.autodiff.Zero;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractUnaryFunction_ESTest extends AbstractUnaryFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal((-1L));
      PreEvaluator<DoubleDoubleReal> preEvaluator0 = (PreEvaluator<DoubleDoubleReal>) mock(PreEvaluator.class, new ViolatedAssumptionAnswer());
      Variable<DoubleDoubleReal> variable0 = new Variable<DoubleDoubleReal>("tioM,Hy Q7r ", doubleDoubleReal0, doubleDoubleRealFactory0, preEvaluator0);
      PolynomialTerm<DoubleDoubleReal> polynomialTerm0 = new PolynomialTerm<DoubleDoubleReal>((-1L), variable0, 0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = polynomialTerm0.arg();
      assertFalse(differentialFunction0.isConstant());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Inverse<DoubleDoubleReal> inverse0 = null;
      try {
        inverse0 = new Inverse<DoubleDoubleReal>((DifferentialFunction<DoubleDoubleReal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input not null variable.
         //
         verifyException("com.accelad.math.nilgiri.autodiff.AbstractUnaryFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleDoubleRealFactory doubleDoubleRealFactory0 = DoubleDoubleRealFactory.instance();
      Zero<DoubleDoubleReal> zero0 = new Zero<DoubleDoubleReal>(doubleDoubleRealFactory0);
      Inverse<DoubleDoubleReal> inverse0 = new Inverse<DoubleDoubleReal>(zero0);
      DifferentialFunction<DoubleDoubleReal> differentialFunction0 = inverse0.arg();
      assertTrue(differentialFunction0.isConstant());
  }
}
