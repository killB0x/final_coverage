/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:42:42 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.nilgiri.DoubleReal;
import com.accelad.math.nilgiri.DoubleRealFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleRealFactory_ESTest extends DoubleRealFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.hypot(doubleReal1, doubleReal0);
      assertEquals(1.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      DoubleReal doubleReal1 = doubleRealFactory0.square(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.pwrs(doubleReal0, doubleReal1);
      assertEquals(Double.POSITIVE_INFINITY, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleRealFactory0.pwr(doubleReal0, doubleReal1);
      assertEquals(Double.POSITIVE_INFINITY, doubleReal2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.u(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(0.5);
      DoubleReal doubleReal1 = doubleRealFactory0.inv(doubleReal0);
      assertEquals(0.5, doubleReal0.doubleValue(), 0.01);
      assertEquals("1.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.5);
      DoubleReal doubleReal1 = doubleRealFactory0.buf(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.uramp(doubleReal1);
      assertTrue(doubleReal2.equals((Object)doubleReal1));
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.gauss(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.mc(doubleReal1, doubleReal0);
      assertEquals("0.0", doubleReal2.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleReal0.div(186.68);
      DoubleReal doubleReal2 = doubleRealFactory0.mc(doubleReal1, doubleReal0);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.mc(doubleReal0, doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.flat(doubleReal0);
      assertTrue(doubleReal2.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.mc(doubleReal0, doubleReal0);
      doubleRealFactory0.max(doubleReal1, doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
      assertTrue(doubleReal0.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.min(doubleReal1, doubleReal0);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.tanh(doubleReal1);
      assertEquals(0.7615941559557649, doubleReal2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.tanh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal3 = doubleRealFactory0.ifx(doubleReal2, doubleReal0, doubleReal1);
      assertEquals(1.0, doubleReal3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(0.0);
      DoubleReal doubleReal1 = doubleRealFactory0.tan(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.square(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.sqrt(doubleReal0);
      assertNotSame(doubleReal0, doubleReal1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.sqrt(doubleReal1);
      assertEquals(1.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(0.0);
      DoubleReal doubleReal1 = doubleRealFactory0.sinh(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.sin(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.sin(doubleReal1);
      assertNotSame(doubleReal2, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.sgn(doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.sgn(doubleReal1);
      assertEquals("1.0", doubleReal2.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val((-563.733));
      DoubleReal doubleReal1 = doubleRealFactory0.sgn(doubleReal0);
      assertEquals("-1.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.round(doubleReal0);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.round(doubleReal1);
      assertNotSame(doubleReal0, doubleReal2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.flat(doubleReal0);
      assertEquals((-1.0), doubleReal1.doubleValue(), 0.01);
      
      doubleRealFactory0.rand(doubleReal0);
      assertFalse(doubleReal0.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.pwrs(doubleReal0, doubleReal0);
      assertTrue(doubleReal1.equals((Object)doubleReal0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(473.0);
      DoubleReal doubleReal1 = doubleRealFactory0.rand(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.pow(doubleReal1, doubleReal0);
      assertEquals(0.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleReal1.negate();
      DoubleReal doubleReal3 = doubleRealFactory0.pow(doubleReal2, doubleReal1);
      assertEquals("-1.0", doubleReal3.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(246.128980510117);
      DoubleReal doubleReal1 = doubleRealFactory0.min(doubleReal0, doubleReal0);
      assertEquals(246.128980510117, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.acos(doubleReal0);
      DoubleReal doubleReal2 = doubleReal1.atanh();
      DoubleReal doubleReal3 = doubleRealFactory0.mc(doubleReal2, doubleReal2);
      DoubleReal doubleReal4 = doubleRealFactory0.max(doubleReal3, doubleReal3);
      assertNotSame(doubleReal4, doubleReal3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.log10(doubleReal1);
      assertEquals("0.0", doubleReal2.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.log10(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.0);
      DoubleReal doubleReal1 = doubleRealFactory0.log(doubleReal0);
      assertEquals(Double.NEGATIVE_INFINITY, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.ifx(doubleReal0, doubleReal0, (DoubleReal) null);
      assertNull(doubleReal1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.ifx(doubleReal0, doubleReal0, doubleReal0);
      assertSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.5);
      DoubleReal doubleReal1 = doubleRealFactory0.ifx(doubleReal0, doubleReal0, doubleReal0);
      assertEquals(0.5, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.hypot(doubleReal0, doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.pow(doubleReal0, doubleReal0);
      doubleRealFactory0.gauss(doubleReal1);
      DoubleReal doubleReal2 = doubleRealFactory0.gauss(doubleReal1);
      assertEquals(0.1, doubleReal2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      doubleRealFactory0.gauss(doubleReal0);
      DoubleReal doubleReal1 = doubleRealFactory0.val((-9.223372036854776E18));
      DoubleReal doubleReal2 = doubleRealFactory0.ceil(doubleReal1);
      DoubleReal doubleReal3 = doubleRealFactory0.gauss(doubleReal2);
      assertEquals("-9.2233720368547763E17", doubleReal3.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.5);
      DoubleReal doubleReal1 = doubleRealFactory0.floor(doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      DoubleReal doubleReal1 = doubleRealFactory0.floor(doubleReal0);
      assertEquals(869.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.exp(doubleReal0);
      assertEquals("2.718281828459045", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      DoubleReal doubleReal1 = doubleRealFactory0.exp(doubleReal0);
      assertEquals("Infinity", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      doubleRealFactory0.cos(doubleReal0);
      assertEquals(869.9636004, doubleReal0.doubleValue(), 0.01);
      assertEquals(869.9636004, doubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.ceil(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      DoubleReal doubleReal1 = doubleRealFactory0.ceil(doubleReal0);
      assertEquals("870.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.buf(doubleReal1);
      assertEquals(1.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.atanh(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal((-1.0));
      DoubleReal doubleReal1 = doubleRealFactory0.atanh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.flat(doubleReal1);
      assertEquals(Double.NaN, doubleReal2.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.atan2(doubleReal0, doubleReal0);
      assertEquals(0.0, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleReal0.log10();
      DoubleReal doubleReal2 = doubleRealFactory0.atan2(doubleReal1, doubleReal0);
      assertEquals((-1.5707963267948966), doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.atan2(doubleReal0, doubleReal0);
      assertEquals(0.7853981633974483, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.atan(doubleReal1);
      assertNotSame(doubleReal0, doubleReal2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val((-563.733));
      DoubleReal doubleReal1 = doubleRealFactory0.atan(doubleReal0);
      assertEquals((-1.5690224392433298), doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.asinh(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(246.128980510117);
      DoubleReal doubleReal1 = doubleRealFactory0.asinh(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cosh(doubleReal0);
      DoubleReal doubleReal2 = doubleReal1.negate();
      DoubleReal doubleReal3 = doubleRealFactory0.asinh(doubleReal2);
      assertNotSame(doubleReal1, doubleReal3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.asin(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val((-1.0));
      DoubleReal doubleReal1 = doubleRealFactory0.asin(doubleReal0);
      assertEquals((-1.5707963267948966), doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.acosh(doubleReal1);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.inv(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.acos(doubleReal1);
      assertEquals(0.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.abs(doubleReal0);
      assertEquals(0.0, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.val("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.val((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.uramp((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.u((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.tanh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.tan((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.square((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.sinh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.sin((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.round((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.random((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.rand((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.pwrs((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.pwr((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.pow((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.min((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.mc((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.max((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.log10((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.log((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.inv((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.ifx((DoubleReal) null, (DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.hypot((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.gauss((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.floor((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.cos((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.ceil((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.buf((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.atanh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.atan((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.asin((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.acosh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.acos((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.abs((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal(0.5);
      DoubleReal doubleReal1 = doubleRealFactory0.uramp(doubleReal0);
      assertEquals(0.5, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val(869.9636004);
      DoubleReal doubleReal1 = doubleRealFactory0.inv(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.uramp(doubleReal0);
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.u(doubleReal0);
      assertEquals(1.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.buf(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.exp(doubleReal1);
      DoubleReal doubleReal3 = doubleRealFactory0.flat(doubleReal2);
      assertEquals((-2.718281828459045), doubleReal3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.max(doubleReal0, doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.inv(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.min(doubleReal0, doubleReal1);
      assertFalse(doubleReal2.equals((Object)doubleReal1));
      assertEquals(1.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.one();
      DoubleReal doubleReal1 = doubleRealFactory0.floor(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal((-1.5700769024585828));
      DoubleReal doubleReal1 = doubleRealFactory0.pwrs(doubleReal0, doubleReal0);
      assertEquals(0.4924805480172544, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.atan2((DoubleReal) null, (DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.log10(doubleReal0);
      assertNotSame(doubleReal0, doubleReal1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.tan(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.asin(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.round(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.atanh(doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.cosh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.flat((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.log(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.tanh(doubleReal0);
      assertEquals(0.0, doubleReal1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.atan(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.asinh((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.acosh(doubleReal0);
      assertEquals(Double.NaN, doubleReal1.modulus(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.pwr(doubleReal0, doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.max(doubleReal1, doubleReal0);
      assertEquals(1.0, doubleReal2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.exp((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.cos(doubleReal0);
      DoubleReal doubleReal2 = doubleRealFactory0.u(doubleReal1);
      assertEquals(1.0, doubleReal2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.val("7");
      DoubleReal doubleReal1 = doubleRealFactory0.sinh(doubleReal0);
      assertNotSame(doubleReal1, doubleReal0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.random(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.sqrt((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      // Undeclared exception!
      try { 
        doubleRealFactory0.sgn((DoubleReal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleRealFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = new DoubleReal();
      DoubleReal doubleReal1 = doubleRealFactory0.mc(doubleReal0, doubleReal0);
      doubleRealFactory0.random(doubleReal0);
      assertTrue(doubleReal0.equals((Object)doubleReal1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.abs(doubleReal0);
      assertEquals("0.0", doubleReal1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DoubleRealFactory doubleRealFactory0 = DoubleRealFactory.instance();
      DoubleReal doubleReal0 = doubleRealFactory0.zero();
      DoubleReal doubleReal1 = doubleRealFactory0.sin(doubleReal0);
      assertEquals(0.0, doubleReal1.doubleValue(), 0.01);
  }
}
