/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 15:39:59 GMT 2022
 */

package com.accelad.math.nilgiri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.accelad.math.doubledouble.DoubleDouble;
import com.accelad.math.nilgiri.DoubleDoubleComplex;
import com.accelad.math.nilgiri.DoubleDoubleReal;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleDoubleComplex_ESTest extends DoubleDoubleComplex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow(15);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow(1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal();
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ZERO.cos();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
      
      DoubleDoubleComplex doubleDoubleComplex2 = new DoubleDoubleComplex(doubleDoubleReal0);
      assertFalse(doubleDoubleComplex2.equals((Object)doubleDoubleComplex1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      String string0 = doubleDoubleComplex0.toString();
      assertEquals("DoubleDoubleComplex{imaginary=0, real=0}", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0, (-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.exp();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.tanh();
      assertEquals((-0.6490586262393074), doubleDoubleComplex2.getImaginary(), 0.01);
      assertEquals(0.8514190944727165, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.tanh();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.negate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.tanh();
      assertEquals((-1.5574077246549023), doubleDoubleComplex2.getImaginary(), 0.01);
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sqrt();
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sqrt();
      assertEquals(0.7071067811865476, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.negate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.sinh();
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sinh();
      assertEquals(1.1752011936438014, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sinh();
      assertEquals(0.4573041531842492, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0, (-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sinh();
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.sin();
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.negate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.sin();
      assertEquals((-0.8414709848078965), doubleDoubleComplex2.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.re();
      assertNull(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.re();
      assertEquals(0.0, doubleDoubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-397.432));
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.re();
      assertEquals((-397.432), doubleDoubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(2207.62875);
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-2120.1971219542), (-1116.6679062768));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.pwr(doubleDoubleComplex1);
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.sin();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.pwr(doubleDoubleComplex0);
      assertEquals(0.9869969443009391, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals(1.1752011936438014, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(32.0, 32.0);
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.pwr(doubleDoubleComplex1);
      assertEquals((-0.6215477017620192), doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-3285.3137), 1134.8388);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.I.pow(doubleDoubleComplex1);
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.23259516440783E-32);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pow(doubleDoubleComplex0);
      assertEquals(1.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pwr(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.pow(doubleDoubleComplex1);
      assertEquals(6.63846068891343E-33, doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(10.0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.I.pow(doubleDoubleComplex1);
      assertEquals((-1.0), doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ZERO.conjugate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.ZERO.plus(doubleDoubleComplex1);
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-1407.19483));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.ZERO.plus(doubleDoubleComplex1);
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ZERO.plus(doubleDoubleComplex0);
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.plus(doubleDoubleComplex0);
      assertEquals(5.43656365691809, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(5.43656365691809, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-0.5));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.mul(doubleDoubleComplex1);
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(10.0);
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(10.0, 10.0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.mul(doubleDoubleComplex1);
      assertEquals(100.0, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals(100.0, doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-2.0));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.mul(doubleDoubleComplex1);
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals((-2.0), doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.mul(577L);
      assertEquals(577.0, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.mul((-1237L));
      assertEquals((-1237.0), doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.mul(2134L);
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.mul(2L);
      assertEquals(2.0, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-2331.534562), (-2331.534562));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.I.mul((-2886L));
      assertEquals((-2886.0), doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1.0), (-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.minus(doubleDoubleComplex1);
      assertEquals((-2.0), doubleDoubleComplex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(32.0, 32.0);
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.minus(doubleDoubleComplex1);
      assertEquals(31.0, doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.I.log10();
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.6821881769209207, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log10();
      assertEquals(0.3010299956639812, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.23259516440783E-32, 1.23259516440783E-32);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log10();
      assertEquals((-31.758664542550015), doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.34109408846046035, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.E;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.cos();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.log10();
      assertEquals(0.880758183181845, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals((-1.1819472411290906), doubleDoubleComplex2.getImaginary(), 0.01);
      assertEquals((-6.938409184691264), doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log();
      assertNotSame(doubleDoubleComplex0, doubleDoubleComplex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(119.2685962790083, 0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.log();
      assertEquals(4.781378061249987, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atan();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.log();
      assertEquals((-3.0814879110195774E-33), doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals((-6.646185273467505E-33), doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ONE;
      DoubleDoubleReal doubleDoubleReal1 = doubleDoubleReal0.negate();
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal1);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.inverse();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.inverse();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.I.inverse();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.sin();
      assertEquals(0.0, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals((-1.1752011936438014), doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.im();
      assertNull(doubleDoubleReal0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.im();
      assertEquals(0.0, doubleDoubleReal0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.negate();
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex1.im();
      DoubleDoubleComplex doubleDoubleComplex2 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.tanh();
      assertEquals((-0.7615941559557649), doubleDoubleComplex3.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.23259516440783E-32, 1.23259516440783E-32);
      double double0 = doubleDoubleComplex0.getReal();
      assertEquals(1.23259516440783E-32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-0.5));
      double double0 = doubleDoubleComplex0.getReal();
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      double double0 = doubleDoubleComplex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      double double0 = doubleDoubleComplex0.getImaginary();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1065.2555872), 0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.exp();
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.PI;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.exp();
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1));
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.div(doubleDoubleComplex1);
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1065.2555872), 0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.div(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(1.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.div(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.negate();
      assertEquals(Double.NaN, doubleDoubleComplex3.getReal(), 0.01);
      assertEquals(Double.NaN, doubleDoubleComplex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.cosh();
      assertEquals(3.2978948363112366, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.0);
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.minus(doubleDoubleComplex1);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.cosh();
      assertEquals(0.833730025131149, doubleDoubleComplex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(980.0, 980.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.cos();
      assertEquals(Double.NaN, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.conjugate();
      assertEquals(-0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-2331.534562), (-2331.534562));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.conjugate();
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex0.mul(doubleDoubleComplex1);
      assertEquals(1.0872106827601062E7, doubleDoubleComplex2.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atanh();
      assertEquals(0.40235947810852507, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.5535743588970452, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      doubleDoubleComplex0.atanh();
      DoubleDouble doubleDouble0 = DoubleDouble.TWO;
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1.0), (-1.0));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atanh();
      assertEquals((-1.0172219678978514), doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals((-0.40235947810852507), doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atan();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atan();
      assertEquals(0.40235947810852507, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(0.5535743588970452, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-3161.758545722297));
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.atan();
      assertEquals((-6.809168576573183E-34), doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals((-1.5704800471194582), doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.asin();
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.acosh();
      assertEquals(0.881373587019543, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.acosh();
      assertEquals((-2.465190328815662E-32), doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(0.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.ONE.acosh();
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.acos();
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
      assertEquals(1.5707963267948966, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.abs();
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
      assertEquals(1.0, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.toString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(3310.8114508719, 3310.8114508719);
      // Undeclared exception!
      doubleDoubleComplex0.tanh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.tanh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleReal doubleDoubleReal0 = new DoubleDoubleReal(doubleDouble0);
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      // Undeclared exception!
      doubleDoubleComplex0.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.tan();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.sinh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplex0.sin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplex0.cos();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.sin();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pwr((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pwr(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow(doubleDoubleComplex0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow(1250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.plus((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.mul((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.minus((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.log10();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.TWO;
      DoubleDoubleReal doubleDoubleReal1 = new DoubleDoubleReal(1.3393857490036326E300);
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0, doubleDoubleReal1);
      // Undeclared exception!
      doubleDoubleComplex0.log();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.log();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.log();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NEGATIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplex0.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.div((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1483.1);
      // Undeclared exception!
      doubleDoubleComplex0.cosh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.cosh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.POSITIVE_INFINITY;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, doubleDouble0);
      // Undeclared exception!
      doubleDoubleComplex0.cos();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      doubleDoubleComplex0.sin();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.cos();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.cos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.conjugate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1256.4), (-1256.4));
      // Undeclared exception!
      doubleDoubleComplex0.atanh();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplex0.sin();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atanh();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atanh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atanh();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplex0.I.cos();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atan();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atan();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.asinh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.asin();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.acosh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ZERO;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.inverse();
      // Undeclared exception!
      try { 
        doubleDoubleComplex1.acosh();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Angle of (0, 0)
         //
         verifyException("com.accelad.math.doubledouble.DoubleDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.acos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.abs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDoubleReal0);
      DoubleDoubleComplex doubleDoubleComplex1 = new DoubleDoubleComplex((-1407.19483));
      boolean boolean0 = doubleDoubleComplex0.equals(doubleDoubleComplex1);
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = DoubleDoubleComplex.I;
      boolean boolean0 = doubleDoubleComplex0.equals(doubleDoubleComplex1);
      assertFalse(boolean0);
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      boolean boolean0 = doubleDoubleComplex0.equals(doubleDoubleComplex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pow((-458));
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.negate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.exp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow((DoubleDoubleComplex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.sqrt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.23259516440783E-32);
      doubleDoubleComplex0.re();
      assertEquals(0.0, doubleDoubleComplex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.sin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.abs();
      boolean boolean0 = doubleDoubleComplex1.equals(doubleDoubleComplex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleReal doubleDoubleReal0 = DoubleDoubleReal.HALF;
      boolean boolean0 = doubleDoubleComplex0.equals(doubleDoubleReal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      boolean boolean0 = doubleDoubleComplex0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.I.pow((-1));
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.asinh();
      assertTrue(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
      assertTrue(doubleDoubleComplex2.equals((Object)doubleDoubleComplex0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pow(0);
      assertSame(doubleDoubleComplex1, doubleDoubleComplex0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pow(0);
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
      assertEquals(Double.NaN, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1059.30149627086));
      // Undeclared exception!
      doubleDoubleComplex0.sinh();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.cosh();
      assertEquals(1.5430806348152437, doubleDoubleComplex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.0);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.I.acos();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1870.067600091247), (-1870.067600091247));
      double double0 = doubleDoubleComplex0.getImaginary();
      assertEquals((-1870.067600091247), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      double double0 = doubleDoubleComplex0.getReal();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null, (DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.mul((-661L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.pwr(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex2 = doubleDoubleComplex1.div(doubleDoubleComplex0);
      DoubleDoubleComplex doubleDoubleComplex3 = doubleDoubleComplex2.plus(doubleDoubleComplex1);
      assertEquals((-1.0), doubleDoubleComplex3.getImaginary(), 0.01);
      assertEquals(1.0, doubleDoubleComplex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.tanh();
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals(1.5574077246549023, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1659.4097217, 1659.4097217);
      DoubleDoubleReal doubleDoubleReal0 = doubleDoubleComplex0.im();
      assertEquals(1659.4097217, doubleDoubleReal0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.asin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(207.17407269, 207.17407269);
      // Undeclared exception!
      doubleDoubleComplex0.acosh();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DoubleDouble doubleDouble0 = DoubleDouble.NaN;
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(doubleDouble0, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.ONE;
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.asinh();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.atan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex();
      doubleDoubleComplex0.atanh();
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.mul(0L);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDouble) null, (DoubleDouble) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.log10();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleReal", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((DoubleDoubleReal) null);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.tan();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.accelad.math.nilgiri.DoubleDoubleComplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1.0);
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.minus(doubleDoubleComplex0);
      assertEquals(0.0, doubleDoubleComplex0.getImaginary(), 0.01);
      assertFalse(doubleDoubleComplex1.equals((Object)doubleDoubleComplex0));
      assertEquals(0.0, doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = DoubleDoubleComplex.I;
      DoubleDoubleComplex doubleDoubleComplex1 = doubleDoubleComplex0.conjugate();
      assertEquals(0.0, doubleDoubleComplex1.getReal(), 0.01);
      assertEquals((-1.0), doubleDoubleComplex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex(1659.4097217, 1659.4097217);
      // Undeclared exception!
      try { 
        doubleDoubleComplex0.pow(3);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DoubleDoubleComplex doubleDoubleComplex0 = new DoubleDoubleComplex((-1870.067600091247), (-1870.067600091247));
      doubleDoubleComplex0.ONE.hashCode();
  }
}
