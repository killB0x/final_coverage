/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 18:45:09 GMT 2022
 */

package com.github.echisan.wbp4j.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.echisan.wbp4j.http.DefaultWbpHttpRequest;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultWbpHttpRequest_ESTest extends DefaultWbpHttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest(hashMap0);
      try { 
        defaultWbpHttpRequest0.doPostMultiPart((String) null, hashMap0, "s11uStvV");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      defaultWbpHttpRequest0.setHeader(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest((Map<String, String>) null);
      Map<String, String> map0 = defaultWbpHttpRequest0.getHeader();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest(hashMap0);
      hashMap0.put("POST", "POST");
      Map<String, String> map0 = defaultWbpHttpRequest0.getHeader();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      Map<String, String> map0 = defaultWbpHttpRequest0.getHeader();
      try { 
        defaultWbpHttpRequest0.doPostMultiPart("", map0, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        defaultWbpHttpRequest0.doPost("8j14`nij$f~^Ix", (Map<String, String>) hashMap0, (Map<String, String>) hashMap0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 8j14`nij$f~^Ix
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        defaultWbpHttpRequest0.doGet("", (Map<String, String>) hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      try { 
        defaultWbpHttpRequest0.doGet("gE~)", (Map<String, String>) null, (Map<String, String>) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: gE~)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      Map<String, String> map0 = defaultWbpHttpRequest0.getHeader();
      try { 
        defaultWbpHttpRequest0.doPost("=", map0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: =
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      Map<String, String> map0 = defaultWbpHttpRequest0.getHeader();
      // Undeclared exception!
      try { 
        defaultWbpHttpRequest0.doGet("[-G7!", map0, map0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      // Undeclared exception!
      try { 
        defaultWbpHttpRequest0.setHeader((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.echisan.wbp4j.http.DefaultWbpHttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      try { 
        defaultWbpHttpRequest0.doPost("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest((Map<String, String>) null);
      try { 
        defaultWbpHttpRequest0.doGet("U1(L5", (Map<String, String>) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: U1(L5
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWbpHttpRequest defaultWbpHttpRequest0 = new DefaultWbpHttpRequest();
      try { 
        defaultWbpHttpRequest0.doGet("?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: ?
         //
         verifyException("java.net.URL", e);
      }
  }
}
