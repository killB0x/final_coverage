/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 19:00:37 GMT 2022
 */

package com.github.echisan.wbp4j;

import org.junit.Test;
import static org.junit.Assert.*;
import com.github.echisan.wbp4j.SzvoneLoginRequest;
import com.github.echisan.wbp4j.WbpLoginRequest;
import com.github.echisan.wbp4j.cache.AbstractCookieContext;
import com.github.echisan.wbp4j.cache.CookieContext;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLoginRequest_ESTest extends AbstractLoginRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      String string0 = wbpLoginRequest0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      SzvoneLoginRequest szvoneLoginRequest0 = new SzvoneLoginRequest(cookieContext0);
      szvoneLoginRequest0.setUsernamePassword("Content-Type", "]Cx4soHt@:0");
      String string0 = szvoneLoginRequest0.getUsername();
      assertEquals("Content-Type", string0);
      assertEquals("]Cx4soHt@:0", szvoneLoginRequest0.getPassword());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      wbpLoginRequest0.setUsernamePassword("", "C%@i+6S~5vl%]5C");
      String string0 = wbpLoginRequest0.getUsername();
      assertEquals("", string0);
      assertEquals("C%@i+6S~5vl%]5C", wbpLoginRequest0.getPassword());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SzvoneLoginRequest szvoneLoginRequest0 = new SzvoneLoginRequest((AbstractCookieContext) null);
      szvoneLoginRequest0.setUsernamePassword("~3Ro':91*f><(", "from");
      String string0 = szvoneLoginRequest0.getPassword();
      assertEquals("~3Ro':91*f><(", szvoneLoginRequest0.getUsername());
      assertEquals("from", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      wbpLoginRequest0.setUsernamePassword("", "");
      String string0 = wbpLoginRequest0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SzvoneLoginRequest szvoneLoginRequest0 = new SzvoneLoginRequest((AbstractCookieContext) null);
      Map<String, String> map0 = szvoneLoginRequest0.getDefaultLoginHeader();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SzvoneLoginRequest szvoneLoginRequest0 = new SzvoneLoginRequest((AbstractCookieContext) null);
      szvoneLoginRequest0.setUsernamePassword("~3Ro':91*f><(", "from");
      boolean boolean0 = szvoneLoginRequest0.checkAccount();
      assertEquals("~3Ro':91*f><(", szvoneLoginRequest0.getUsername());
      assertEquals("from", szvoneLoginRequest0.getPassword());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      wbpLoginRequest0.setUsernamePassword("8", "");
      boolean boolean0 = wbpLoginRequest0.checkAccount();
      assertEquals("8", wbpLoginRequest0.getUsername());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      wbpLoginRequest0.setUsernamePassword("", "");
      boolean boolean0 = wbpLoginRequest0.checkAccount();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      wbpLoginRequest0.setUsernamePassword("8", (String) null);
      boolean boolean0 = wbpLoginRequest0.checkAccount();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CookieContext cookieContext0 = new CookieContext();
      WbpLoginRequest wbpLoginRequest0 = new WbpLoginRequest(cookieContext0);
      boolean boolean0 = wbpLoginRequest0.checkAccount();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SzvoneLoginRequest szvoneLoginRequest0 = new SzvoneLoginRequest((AbstractCookieContext) null);
      String string0 = szvoneLoginRequest0.getPassword();
      assertNull(string0);
  }
}
