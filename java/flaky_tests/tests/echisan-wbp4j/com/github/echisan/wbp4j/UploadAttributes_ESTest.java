/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 19:13:20 GMT 2022
 */

package com.github.echisan.wbp4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.echisan.wbp4j.UploadAttributes;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UploadAttributes_ESTest extends UploadAttributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setUrl("os X@[w1KlD9~7|pP1Y");
      String string0 = uploadAttributes0.getUrl();
      assertEquals("os X@[w1KlD9~7|pP1Y", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setUrl("");
      String string0 = uploadAttributes0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "RiK|MU7v$J<nG~VCEx=");
      uploadAttributes0.setHeaders(hashMap0);
      Map<String, String> map0 = uploadAttributes0.getHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setCookie("RiK|MU7v$J<nG~VCEx=");
      String string0 = uploadAttributes0.getCookie();
      assertEquals("RiK|MU7v$J<nG~VCEx=", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setContext((Map<Object, Object>) null);
      Map<Object, Object> map0 = uploadAttributes0.getContext();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>(0);
      Object object0 = new Object();
      hashMap0.put(object0, "RiK|MU7v$J<nG~VCEx=");
      uploadAttributes0.setContext(hashMap0);
      Map<Object, Object> map0 = uploadAttributes0.getContext();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setBase64("!q}");
      String string0 = uploadAttributes0.getBase64();
      assertEquals("!q}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      // Undeclared exception!
      try { 
        uploadAttributes0.setHeaders((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      // Undeclared exception!
      try { 
        uploadAttributes0.addAllHeaders((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      Map<Object, Object> map0 = uploadAttributes0.getContext();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      String string0 = uploadAttributes0.getBase64();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setBase64("");
      String string0 = uploadAttributes0.getBase64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      uploadAttributes0.setCookie("");
      String string0 = uploadAttributes0.getCookie();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      Map<String, String> map0 = uploadAttributes0.getHeaders();
      uploadAttributes0.addAllHeaders(map0);
      assertNull(uploadAttributes0.getUrl());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      String string0 = uploadAttributes0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UploadAttributes uploadAttributes0 = new UploadAttributes();
      String string0 = uploadAttributes0.getCookie();
      assertNull(string0);
  }
}
