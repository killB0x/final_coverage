/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:06:14 GMT 2022
 */

package com.tomtom.traffic.iqr.io.premium.blob;

import org.junit.Test;
import static org.junit.Assert.*;
import com.tomtom.traffic.iqr.io.premium.blob.FlexSpeedEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlexSpeedEncoding_ESTest extends FlexSpeedEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(255.0);
      assertEquals((short)1023, short0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(1.0);
      assertEquals((short)64, short0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode((short) (-1));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = FlexSpeedEncoding.decode((short) (-2833));
      assertEquals(3.734375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = FlexSpeedEncoding.decode((short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = FlexSpeedEncoding.decode((short)1110);
      assertEquals(1.34375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(4.5625);
      assertEquals((short)274, short0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(1989.3807445101584);
      assertEquals((short)1023, short0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(0.0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      short short0 = FlexSpeedEncoding.encode(2.0);
      assertEquals((short)128, short0);
  }
}
