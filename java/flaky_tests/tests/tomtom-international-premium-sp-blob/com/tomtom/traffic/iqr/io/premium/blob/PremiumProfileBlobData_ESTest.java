/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:05:08 GMT 2022
 */

package com.tomtom.traffic.iqr.io.premium.blob;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData;
import java.util.function.IntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PremiumProfileBlobData_ESTest extends PremiumProfileBlobData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 0, (IntFunction<PremiumProfileBlobData.DaySpeedsAccessor>) null, 0);
      int int0 = premiumProfileBlobData0.getWeekendSpeed();
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(1262, 1262);
      int int0 = premiumProfileBlobData0.getWeekendSpeed();
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(1262, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1262, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 0, (IntFunction<PremiumProfileBlobData.DaySpeedsAccessor>) null, 0);
      int int0 = premiumProfileBlobData0.getWeekDaySpeed();
      assertEquals(0, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      IntFunction<PremiumProfileBlobData.DaySpeedsAccessor> intFunction0 = PremiumProfileBlobData.arrayToSpeedsAccessor(doubleArray0);
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(818, 818, intFunction0, 972);
      int int0 = premiumProfileBlobData0.getWeekDaySpeed();
      assertEquals(818, int0);
      assertEquals(818, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(972, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(903, 903);
      int int0 = premiumProfileBlobData0.getTimeResolutionMinutes();
      assertEquals(0, int0);
      assertEquals(903, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(903, premiumProfileBlobData0.getWeekendSpeed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      IntFunction<PremiumProfileBlobData.DaySpeedsAccessor> intFunction0 = PremiumProfileBlobData.arrayToSpeedsAccessor(doubleArray0);
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 1, intFunction0, 1);
      int int0 = premiumProfileBlobData0.getTimeResolutionMinutes();
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(3, 3, (double[][]) null, 3);
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.hasDaySpeeds(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[15][1];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-1357), (-1357), doubleArray0, (-1357));
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.hasDaySpeeds((-1357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1357 out of bounds for length 15
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(3, 3, (double[][]) null, 3);
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.getDaySpeedsAsArray(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2085), (-2085), doubleArray0, (-2085));
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.getDaySpeedsAsArray((-2085));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2085 out of bounds for length 4
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(3, 3, (double[][]) null, 3);
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.getDaySpeeds(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(11, 11, doubleArray0, 11);
      // Undeclared exception!
      try { 
        premiumProfileBlobData0.getDaySpeeds(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 11 out of bounds for length 2
         //
         verifyException("com.tomtom.traffic.iqr.io.premium.blob.PremiumProfileBlobData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 1, doubleArray0, 1637);
      premiumProfileBlobData0.getDaySpeeds(1);
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1637, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 1, doubleArray0, 1637);
      premiumProfileBlobData0.getDaySpeeds(3);
      assertEquals(1637, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2518), (-2518));
      premiumProfileBlobData0.getDaySpeeds((-2518));
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals((-2518), premiumProfileBlobData0.getWeekendSpeed());
      assertEquals((-2518), premiumProfileBlobData0.getWeekDaySpeed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 1, doubleArray0, 1637);
      premiumProfileBlobData0.getDaySpeedsAsArray(3);
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1637, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2518), (-2518));
      premiumProfileBlobData0.getDaySpeedsAsArray((-2518));
      assertEquals((-2518), premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals((-2518), premiumProfileBlobData0.getWeekDaySpeed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      IntFunction<PremiumProfileBlobData.DaySpeedsAccessor> intFunction0 = PremiumProfileBlobData.arrayToSpeedsAccessor(doubleArray0);
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(588, 588, intFunction0, 0);
      boolean boolean0 = premiumProfileBlobData0.hasDaySpeeds(0);
      assertEquals(588, premiumProfileBlobData0.getWeekendSpeed());
      assertFalse(boolean0);
      assertEquals(588, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      IntFunction<PremiumProfileBlobData.DaySpeedsAccessor> intFunction0 = PremiumProfileBlobData.arrayToSpeedsAccessor(doubleArray0);
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(588, 588, intFunction0, 0);
      boolean boolean0 = premiumProfileBlobData0.hasDaySpeeds(0);
      assertEquals(588, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(588, premiumProfileBlobData0.getWeekendSpeed());
      assertTrue(boolean0);
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2518), (-2518));
      boolean boolean0 = premiumProfileBlobData0.hasDaySpeeds((-2518));
      assertEquals((-2518), premiumProfileBlobData0.getWeekendSpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertFalse(boolean0);
      assertEquals((-2518), premiumProfileBlobData0.getWeekDaySpeed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(0, 0, doubleArray0, 0);
      boolean boolean0 = premiumProfileBlobData0.hasDailySpeeds();
      assertEquals(0, premiumProfileBlobData0.getWeekendSpeed());
      assertTrue(boolean0);
      assertEquals(0, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2518), (-2518));
      boolean boolean0 = premiumProfileBlobData0.hasDailySpeeds();
      assertFalse(boolean0);
      assertEquals((-2518), premiumProfileBlobData0.getWeekendSpeed());
      assertEquals((-2518), premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2330), 1, doubleArray0, (-2330));
      int int0 = premiumProfileBlobData0.getTimeResolutionMinutes();
      assertEquals((-2330), premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals((-2330), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      IntFunction<PremiumProfileBlobData.DaySpeedsAccessor> intFunction0 = PremiumProfileBlobData.arrayToSpeedsAccessor(doubleArray0);
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-1), 0, intFunction0, 0);
      int int0 = premiumProfileBlobData0.getWeekDaySpeed();
      assertEquals(0, premiumProfileBlobData0.getWeekendSpeed());
      assertEquals((-1), int0);
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData(1, 1, doubleArray0, 1);
      premiumProfileBlobData0.getDaySpeedsAsArray(1);
      assertEquals(1, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals(1, premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(1, premiumProfileBlobData0.getWeekendSpeed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PremiumProfileBlobData premiumProfileBlobData0 = new PremiumProfileBlobData((-2518), (-2518));
      int int0 = premiumProfileBlobData0.getWeekendSpeed();
      assertEquals((-2518), premiumProfileBlobData0.getWeekDaySpeed());
      assertEquals(0, premiumProfileBlobData0.getTimeResolutionMinutes());
      assertEquals((-2518), int0);
  }
}
