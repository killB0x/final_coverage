/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 13:04:41 GMT 2022
 */

package hu.meza.tools.barrier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import hu.meza.tools.barrier.CircuitBreaker;
import hu.meza.tools.barrier.CircuitMonitor;
import hu.meza.tools.barrier.Command;
import hu.meza.tools.barrier.CoolDownStrategy;
import hu.meza.tools.barrier.Response;
import hu.meza.tools.barrier.TriggerStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CircuitBreaker_ESTest extends CircuitBreaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CircuitBreaker circuitBreaker0 = new CircuitBreaker((CoolDownStrategy) null, (TriggerStrategy) null);
      // Undeclared exception!
      try { 
        circuitBreaker0.isBroken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hu.meza.tools.barrier.CircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CircuitBreaker circuitBreaker0 = new CircuitBreaker((CoolDownStrategy) null, (TriggerStrategy) null);
      // Undeclared exception!
      try { 
        circuitBreaker0.execute((Command) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("hu.meza.tools.barrier.CircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(coolDownStrategy0).isCool();
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      Command<Object> command0 = (Command<Object>) mock(Command.class, new ViolatedAssumptionAnswer());
      Response response0 = circuitBreaker0.execute(command0);
      assertFalse(response0.success());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(coolDownStrategy0).isCool();
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      boolean boolean0 = circuitBreaker0.isBroken();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(coolDownStrategy0).isCool();
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      boolean boolean0 = circuitBreaker0.isBroken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      circuitBreaker0.addListener((CircuitMonitor) null);
      circuitBreaker0.removeListener((CircuitMonitor) null);
      assertTrue(circuitBreaker0.isBroken());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      CircuitMonitor circuitMonitor0 = mock(CircuitMonitor.class, new ViolatedAssumptionAnswer());
      circuitBreaker0.removeListener(circuitMonitor0);
      assertTrue(circuitBreaker0.isBroken());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CoolDownStrategy coolDownStrategy0 = mock(CoolDownStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(coolDownStrategy0).isCool();
      CircuitBreaker circuitBreaker0 = new CircuitBreaker(coolDownStrategy0, (TriggerStrategy) null);
      Command<Object> command0 = (Command<Object>) mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(command0).execute();
      Response response0 = circuitBreaker0.execute(command0);
      assertTrue(response0.success());
  }
}
