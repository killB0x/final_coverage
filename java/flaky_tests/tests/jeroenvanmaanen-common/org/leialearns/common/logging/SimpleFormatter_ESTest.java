/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 01:35:44 GMT 2022
 */

package org.leialearns.common.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.logging.MockLogRecord;
import org.junit.runner.RunWith;
import org.leialearns.common.logging.SimpleFormatter;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleFormatter_ESTest extends SimpleFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Boolean boolean0 = Boolean.FALSE;
      SimpleFormatter.SilentSetting<Boolean> simpleFormatter_SilentSetting0 = simpleFormatter0.new SilentSetting<Boolean>("", boolean0);
      Logger logger0 = simpleFormatter_SilentSetting0.getLogger();
      assertNotNull(logger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      String string0 = simpleFormatter0.implode("~?+b2.", list0);
      assertEquals("java.class~?+b2.java.properties", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = simpleFormatter0.implode("g@tn+bT,i_A", linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      String string0 = simpleFormatter0.fix(":./s)y!", 60);
      assertEquals("                                                     :./s)y!", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      String string0 = simpleFormatter0.fix("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      simpleFormatter0.setRegexFormat(false);
      // Undeclared exception!
      try { 
        simpleFormatter0.setRegexFormat(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value was already set to another value: Regex format flag == [java.lang.Boolean@0000000003], not: [java.lang.Boolean@0000000004]
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.reduceStackBlock((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.implode("w[o[!", (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.logging.SimpleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.format((LogRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.logging.SimpleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.FINER;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "h/^LJ)Z_Ab");
      // Undeclared exception!
      try { 
        simpleFormatter0.format(mockLogRecord0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      simpleFormatter0.fix("RTVSEhuf>g];0@96f]", 2147483645);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.fix((String) null, 1291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.logging.SimpleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.fix("? [Bk>qSd_'_0?gJ:'", (-702));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      // Undeclared exception!
      try { 
        simpleFormatter0.reduceStackBlock("");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.SEVERE;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "org.leialearns.common.Setting");
      mockLogRecord0.setSourceClassName("org.leialearns.common.Setting");
      MockThrowable mockThrowable0 = new MockThrowable();
      mockLogRecord0.setThrown(mockThrowable0);
      String string0 = simpleFormatter0.format(mockLogRecord0);
      assertEquals("2014-02-14T20:21:21.320|  SEVERE|org.leialearns|common.Setting|null|org.leialearns.common.Setting\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.INFO;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "org.leialearns.common.logging.SimpleFormatter$SilentSetting");
      mockLogRecord0.setSourceClassName("org.leialearns.common.logging.SimpleFormatter$SilentSetting");
      String string0 = simpleFormatter0.format(mockLogRecord0);
      assertEquals("2014-02-14T20:21:21.320|    INFO|org.leialearns|logging.SimpleFormatter$SilentSetting|null|org.leialearns.common.logging.SimpleFormatter$SilentSetting\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.SEVERE;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "..");
      mockLogRecord0.setSourceClassName("..");
      simpleFormatter0.setRegexFormat(true);
      // Undeclared exception!
      try { 
        simpleFormatter0.format(mockLogRecord0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.INFO;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "|");
      mockLogRecord0.setSourceClassName("-=<,+v8'");
      simpleFormatter0.setRegexFormat(true);
      String string0 = simpleFormatter0.format(mockLogRecord0);
      assertEquals("2014-02-14T20:21:21.320|    INFO||-=<,+v8'|null||\n", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleFormatter simpleFormatter0 = new SimpleFormatter();
      Level level0 = Level.FINEST;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "pQr_5X}4alV[i%9");
      mockLogRecord0.setSourceClassName(", ");
      String string0 = simpleFormatter0.format(mockLogRecord0);
      assertEquals("2014-02-14T20:21:21.320|  FINEST||, |null|pQr_5X}4alV[i%9\n", string0);
  }
}
