/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 01:37:16 GMT 2022
 */

package org.leialearns.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Function;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.leialearns.common.Setting;
import org.slf4j.Logger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Setting_ESTest extends Setting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("%-V@Be>5/)6w");
      Object object0 = setting0.offerInternal("%-V@Be>5/)6w");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("", "");
      setting0.get();
      Boolean boolean0 = Boolean.valueOf("");
      Object object0 = setting0.offerInternal(boolean0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Setting<Boolean> setting0 = new Setting<Boolean>("L(p^{?", boolean0);
      Logger logger0 = setting0.getLogger();
      assertNotNull(logger0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Setting<Object> setting0 = new Setting<Object>("E%]n", supplier0);
      Function<Object, Object> function0 = Function.identity();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      Object object0 = setting0.getInternal(function0, supplier1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>((String) null, (Object) null);
      // Undeclared exception!
      try { 
        setting0.offerInternal((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value should not be null: null
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>((String) null);
      // Undeclared exception!
      try { 
        setting0.offer((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value should not be null: null
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("FGV~rhv$t-ZPc1");
      setting0.set(setting0);
      // Undeclared exception!
      try { 
        setting0.getInternal((Function<Object, Object>) null, (Supplier<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("RL4CZ_P1=k874HPd[");
      Function<Object, Object> function0 = Function.identity();
      // Undeclared exception!
      try { 
        setting0.getInternal(function0, (Supplier<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("], not: [", (Supplier<Object>) null);
      // Undeclared exception!
      try { 
        setting0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Setting<Object> setting0 = new Setting<Object>("L(p^{?", boolean0);
      setting0.offer(boolean0);
      boolean boolean1 = setting0.offer(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("", "");
      setting0.get();
      setting0.set("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>((String) null);
      // Undeclared exception!
      try { 
        setting0.set((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value should not be null: null
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Setting<Object> setting0 = new Setting<Object>("L(p^{?", boolean0);
      Object object0 = new Object();
      boolean boolean1 = setting0.offer(boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = setting0.offer(object0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Setting<Boolean> setting0 = new Setting<Boolean>("[java.lang.String@0000000002|java.lang.String@0000000003]", (Boolean) null);
      // Undeclared exception!
      try { 
        setting0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value is not set: [java.lang.String@0000000002|java.lang.String@0000000003]
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf("[java.lang.String@0000000002|?]");
      Setting<Boolean> setting0 = new Setting<Boolean>("", boolean1);
      setting0.offer(boolean1);
      // Undeclared exception!
      try { 
        setting0.set(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Value was already set to another value:  == [java.lang.Boolean@0000000002], not: [java.lang.Boolean@0000000003]
         //
         verifyException("org.leialearns.common.Setting", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Setting<Boolean> setting0 = new Setting<Boolean>("xs<R\u0000HVX]b_");
      Boolean boolean0 = Boolean.FALSE;
      setting0.set(boolean0);
      boolean boolean1 = setting0.isFixated();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("", "");
      String string0 = setting0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("", "");
      boolean boolean0 = setting0.isFixated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Setting<Object> setting0 = new Setting<Object>("", "");
      setting0.get();
      Function<Object, Object> function0 = Function.identity();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Object object0 = setting0.getInternal(function0, supplier0);
      assertEquals("", object0);
  }
}
