/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 01:40:01 GMT 2022
 */

package org.leialearns.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.leialearns.common.Pair;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Pair<CharBuffer, CharBuffer> pair0 = new Pair<CharBuffer, CharBuffer>(charBuffer0, charBuffer0);
      String string0 = pair0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = pair0.getRight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 2359);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      Pair<Integer, Comparable<Object>> pair0 = new Pair<Integer, Comparable<Object>>(integer0, comparable0);
      Comparable<Object> comparable1 = pair0.getRight();
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = pair0.getLeft();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Pair<CharBuffer, CharBuffer> pair0 = new Pair<CharBuffer, CharBuffer>(charBuffer0, charBuffer0);
      CharBuffer charBuffer1 = pair0.getLeft();
      assertSame(charBuffer0, charBuffer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Pair<CharBuffer, CharBuffer> pair0 = new Pair<CharBuffer, CharBuffer>(charBuffer0, charBuffer0);
      int int0 = pair0.compare(charBuffer0, charBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-492));
      Integer integer1 = new Integer((-3436));
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer1);
      int int0 = pair0.compare(integer0, integer1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(850);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Pair<Integer, Comparable<Object>> pair0 = new Pair<Integer, Comparable<Object>>(integer0, comparable0);
      int int0 = pair0.compare((Integer) null, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        pair0.compareTo((Pair<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.leialearns.common.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 2359);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Pair<Comparable<Object>, Integer> pair0 = new Pair<Comparable<Object>, Integer>(comparable0, integer0);
      Pair<Comparable<Object>, Integer> pair1 = new Pair<Comparable<Object>, Integer>((Comparable<Object>) null, integer0);
      int int0 = pair0.compareTo(pair1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = new Integer(626);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>((Integer) null, integer0);
      int int0 = pair0.compareTo(pair1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      int int0 = pair0.compareTo(pair0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 2359);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparable0).compareTo(any());
      Pair<Comparable<Object>, Integer> pair0 = new Pair<Comparable<Object>, Integer>(comparable0, integer0);
      int int0 = pair0.compareTo(pair0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1312);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, (Integer) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, integer0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = new Integer(626);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>((Integer) null, integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(1758);
      Pair<CharBuffer, CharBuffer> pair1 = new Pair<CharBuffer, CharBuffer>(charBuffer0, charBuffer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = pair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        pair0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
