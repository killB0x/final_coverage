/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 19 20:51:39 GMT 2022
 */

package com.github.panhongan.utils.dag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.panhongan.utils.dag.Vertex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vertex_ESTest extends Vertex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vertex vertex0 = new Vertex("]n`}9E.75@,cG=qO?");
      vertex0.addDownstream(vertex0);
      vertex0.addDownstream(vertex0);
      vertex0.decreaseInDegree();
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vertex vertex0 = new Vertex((String) null);
      vertex0.getName();
      assertEquals(0, vertex0.getInDegree());
      assertFalse(vertex0.isTraversed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      vertex0.getName();
      assertEquals(0, vertex0.getInDegree());
      assertFalse(vertex0.isTraversed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      int int0 = vertex0.getInDegree();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vertex vertex0 = new Vertex("]n`}9E.75@,cG=qO?");
      vertex0.addDownstream(vertex0);
      vertex0.getEdges();
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      Vertex vertex1 = Vertex.copy(vertex0);
      assertEquals(1, vertex0.getInDegree());
      assertEquals(1, vertex1.getInDegree());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      // Undeclared exception!
      try { 
        vertex0.restore((Vertex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.dag.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vertex vertex0 = new Vertex((String) null);
      vertex0.addDownstream(vertex0);
      // Undeclared exception!
      try { 
        vertex0.removeEdge("-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.dag.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vertex vertex0 = new Vertex((String) null);
      vertex0.addDownstream(vertex0);
      // Undeclared exception!
      try { 
        vertex0.findEdge((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.dag.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vertex.copy((Vertex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.panhongan.utils.dag.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.getName();
      assertFalse(vertex0.isTraversed());
      assertEquals(0, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vertex vertex0 = new Vertex("]n`}9E.75@,cG=qO?");
      vertex0.addDownstream(vertex0);
      vertex0.addDownstream(vertex0);
      vertex0.toString();
      assertEquals(2, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vertex vertex0 = new Vertex((String) null);
      String string0 = vertex0.toString();
      assertFalse(vertex0.isTraversed());
      assertEquals("name = null, inDegree = 0, children = []", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      vertex0.removeEdge("com.github.panhongan.utils.dag.Vertex");
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      vertex0.removeEdge("");
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      Vertex vertex1 = Vertex.copy(vertex0);
      vertex1.addDownstream(vertex0);
      vertex0.removeEdge(vertex1);
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      vertex0.removeEdge(vertex0);
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vertex vertex0 = new Vertex("com.github.panhongan.utils.dag.Vertex");
      vertex0.addDownstream(vertex0);
      vertex0.findEdge("com.github.panhongan.utils.dag.Vertex");
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      vertex0.addDownstream(vertex0);
      vertex0.findEdge("(#p[Vo+h");
      assertEquals(1, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      vertex0.addDownstream((Vertex) null);
      assertEquals(0, vertex0.getInDegree());
      assertFalse(vertex0.isTraversed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vertex vertex0 = new Vertex("oNgafN'vtn{");
      // Undeclared exception!
      try { 
        vertex0.decreaseInDegree();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exceptional inDegree : vertex_name = oNgafN'vtn{, inDegree = -1
         //
         verifyException("com.github.panhongan.utils.dag.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vertex vertex0 = new Vertex("FZE=d-!*K");
      vertex0.increaseInDegree();
      assertEquals(1, vertex0.getInDegree());
      
      vertex0.decreaseInDegree();
      assertEquals(0, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      vertex0.getEdges();
      assertEquals(0, vertex0.getInDegree());
      assertFalse(vertex0.isTraversed());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      int int0 = vertex0.getInDegree();
      assertEquals(0, int0);
      assertFalse(vertex0.isTraversed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vertex vertex0 = new Vertex("FZE=d-!*K");
      boolean boolean0 = vertex0.isTraversed();
      assertFalse(boolean0);
      assertEquals(0, vertex0.getInDegree());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      assertFalse(vertex0.isTraversed());
      
      vertex0.markTraversed();
      boolean boolean0 = vertex0.isTraversed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vertex vertex0 = new Vertex("");
      vertex0.restore(vertex0);
      assertEquals(0, vertex0.getInDegree());
      assertFalse(vertex0.isTraversed());
  }
}
