/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 12:18:42 GMT 2022
 */

package com.irurueta.navigation.indoor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.irurueta.navigation.indoor.RadioSourceType;
import com.irurueta.navigation.indoor.WifiAccessPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WifiAccessPoint_ESTest extends WifiAccessPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("", 2688.576964);
      wifiAccessPoint0.getSsid();
      assertEquals(2688.576964, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("9vx9DX8E3>ccLvD#s}?", 0.0, "");
      String string0 = wifiAccessPoint0.getSsid();
      assertEquals("", string0);
      assertEquals(0.0, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("9vx9DX8E3>ccLvD#s}?", 0.0, "");
      double double0 = wifiAccessPoint0.getFrequency();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", wifiAccessPoint0.getSsid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("P^'krH?yeM{,", 1730.0854420921, "P^'krH?yeM{,");
      wifiAccessPoint0.getBssid();
      assertEquals(1730.0854420921, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("", 0.0, "{HM]QjSRm");
      wifiAccessPoint0.getBssid();
      assertEquals(0.0, wifiAccessPoint0.getFrequency(), 0.01);
      assertEquals("{HM]QjSRm", wifiAccessPoint0.getSsid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint();
      // Undeclared exception!
      try { 
        wifiAccessPoint0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.navigation.indoor.WifiAccessPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint();
      WifiAccessPoint wifiAccessPoint1 = new WifiAccessPoint();
      // Undeclared exception!
      try { 
        wifiAccessPoint0.equals(wifiAccessPoint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("&=Vd#", 1000.05565, "BEACON");
      WifiAccessPoint wifiAccessPoint1 = new WifiAccessPoint();
      boolean boolean0 = wifiAccessPoint0.equals(wifiAccessPoint1);
      assertEquals(1000.05565, wifiAccessPoint0.getFrequency(), 0.01);
      assertEquals("BEACON", wifiAccessPoint0.getSsid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("oGK_T-W", 0.0);
      boolean boolean0 = wifiAccessPoint0.equals(wifiAccessPoint0);
      assertTrue(boolean0);
      assertEquals(0.0, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint();
      boolean boolean0 = wifiAccessPoint0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("P^'krH?yeM{,", 1730.0854420921, "P^'krH?yeM{,");
      boolean boolean0 = wifiAccessPoint0.equals("P^'krH?yeM{,");
      assertEquals(1730.0854420921, wifiAccessPoint0.getFrequency(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = null;
      try {
        wifiAccessPoint0 = new WifiAccessPoint("!sh!=2$G[L4ES2r", (-3035.63931), "!sh!=2$G[L4ES2r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.navigation.indoor.WifiAccessPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = null;
      try {
        wifiAccessPoint0 = new WifiAccessPoint((String) null, (-2486.98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.irurueta.navigation.indoor.WifiAccessPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("P^'krH?yeM{,", 1730.0854420921, "P^'krH?yeM{,");
      wifiAccessPoint0.hashCode();
      assertEquals(1730.0854420921, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("P^'krH?yeM{,", 1730.0854420921, "P^'krH?yeM{,");
      double double0 = wifiAccessPoint0.getFrequency();
      assertEquals(1730.0854420921, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint();
      RadioSourceType radioSourceType0 = wifiAccessPoint0.getType();
      assertEquals(RadioSourceType.WIFI_ACCESS_POINT, radioSourceType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint("P^'krH?yeM{,", 1730.0854420921, "P^'krH?yeM{,");
      wifiAccessPoint0.getSsid();
      assertEquals(1730.0854420921, wifiAccessPoint0.getFrequency(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WifiAccessPoint wifiAccessPoint0 = new WifiAccessPoint();
      String string0 = wifiAccessPoint0.getBssid();
      assertNull(string0);
  }
}
