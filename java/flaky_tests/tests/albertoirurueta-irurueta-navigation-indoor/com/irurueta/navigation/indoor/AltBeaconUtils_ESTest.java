/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 12:21:15 GMT 2022
 */

package com.irurueta.navigation.indoor;

import org.junit.Test;
import static org.junit.Assert.*;
import com.irurueta.navigation.indoor.AltBeaconUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AltBeaconUtils_ESTest extends AltBeaconUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower(0.0, 829.99466979383, (-1.0), 4123.04754900468, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower((-1.0), Double.POSITIVE_INFINITY, 966.0, 1109.803862797743, 2.385672579618471E7);
      assertEquals(2.385672579618471E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower((-3229.148305), (-3229.148305), (-1.0), (-3229.148305), (-3229.148305));
      assertEquals((-3229.1479952728746), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower(1803.952, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower((-984.6092320286132), (-4762.001830155184));
      assertEquals(4.836438330304826, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = AltBeaconUtils.getTransmittedPower(546.1528862, (-2.385672579618471E7));
      assertEquals((-43681.4056997374), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower(0.0, (-889.9714648186865), 4552.2270666548, 1.0, (-889.9714648186865));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower((-1417.95238191), (-5280.00219135187), (-1417.95238191), (-2549.863059), 188.019566);
      assertEquals(188.02758928952048, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower((-1927.683), 0.0, 121.5676, (-4034.51863629033), (-1066.1111064553422));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower(Double.POSITIVE_INFINITY, 2.99792458E8);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower((-3229.148305), 734.621741573565);
      assertEquals((-2372202.5516184256), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio(4034.51863629033, 4034.51863629033, 2.99792458E8, 2.99792458E8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio(1522.5463, Double.POSITIVE_INFINITY, 0.0, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio((-4306.11636364475), (-1.0), (-4306.11636364475), 2485.90408);
      assertEquals((-0.6339963784522993), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio(0.0, 12.566370614359172);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio(11.544476905793173, 11.544476905793173);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = AltBeaconUtils.getPathLossExponent(Double.POSITIVE_INFINITY);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = AltBeaconUtils.getPathLossExponent((-898.40702458));
      assertEquals(0.001113081234496685, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = AltBeaconUtils.getK(0.0, (-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = AltBeaconUtils.getK((-2363.78), 1.0);
      assertEquals((-4.2305121458003703E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = AltBeaconUtils.getK(Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = AltBeaconUtils.getK(0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency((-984.6092320286132), 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency((-1417.95238191), 1.0);
      assertEquals((-3.382770116727385E10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency(Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency((-5009.81029555952));
      assertEquals((-4762.001830155184), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance((-1223.9307052079257), 1315.34, 0.0, 0.0, 1315.34);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance((-131900.50577906682), (-5459.119006), 1.0, 0.0, (-6077.852979096506));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance(0.0, (-889.9714648186865), 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance(411.93322926744, (-503.612490241), 411.93322926744, 817.9789);
      assertEquals(411.93322926744, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance(1.0, 0.0, (-1341.39466), (-1.0));
      assertEquals((-1340.39466), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient2(Double.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient2(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1WithFrequency(0.0, (-3521.9892065));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1WithFrequency((-392.8726163373), (-1.0));
      assertEquals((-1.6468002344233262E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1((-1151.091247369676), 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1((-2734.9405), 1.0);
      assertEquals((-2734.9405), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = AltBeaconUtils.getFrequency(3451.4);
      assertEquals(6912.188038530658, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = AltBeaconUtils.getK((-1.0));
      assertEquals((-2.385672579618471E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = AltBeaconUtils.getReceivedPower(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = AltBeaconUtils.getK(0.0, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = AltBeaconUtils.getRatio(966.0, (-2.385672579618471E7));
      assertEquals((-4.0491725824106495E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient2((-398.1383779));
      assertEquals(0.002511689541898844, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = AltBeaconUtils.getPathLossExponent(5375.676892135);
      assertEquals((-1.860230851045143E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = AltBeaconUtils.getCoefficient1WithFrequency(0.0, 188.02758928952048);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = AltBeaconUtils.getDistance(5375.676892135, 5375.676892135, 5375.676892135, 5375.676892135, 5375.676892135);
      assertEquals(10751.35378427, double0, 0.01);
  }
}
