/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 07:23:57 GMT 2022
 */

package de.binfalse.bflog;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.binfalse.bflog.LOGGER;
import de.binfalse.bflog.samplecallbacks.LogCollector;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LOGGER_ESTest extends LOGGER_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      LOGGER.error(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = LOGGER.hasLevel((-3310));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LOGGER.rmLevel(1672);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LOGGER.addLevel((-2230));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = LOGGER.setLogFile("_\tat");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LOGGER.setLogFile("de.binfalse.bflog.samplecallbacks.LogCollector");
      LOGGER.setLogToFile(true);
      MockException mockException0 = new MockException();
      LOGGER.warn("de.binfalse.bflog.samplecallbacks.LogCollector", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LOGGER.closeLogger();
      boolean boolean0 = LOGGER.isWarnEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LOGGER.setLevel(3);
      boolean boolean0 = LOGGER.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LOGGER.closeLogger();
      boolean boolean0 = LOGGER.isErrorEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LOGGER.setMinLevel((-54));
      boolean boolean0 = LOGGER.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.warn((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.warn("7IF(TgL'4X4Zc,G\"&+", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.warn((Exception) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.setLogFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.setLogFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LOGGER.setMinLevel((-1497));
      // Undeclared exception!
      try { 
        LOGGER.info((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LOGGER.setMinLevel((-1));
      // Undeclared exception!
      try { 
        LOGGER.info(": ", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.error((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LOGGER.setMinLevel((-1));
      // Undeclared exception!
      try { 
        LOGGER.debug("", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      LOGGER.setLevel(1);
      // Undeclared exception!
      try { 
        LOGGER.debug((Exception) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        LOGGER.error("xrH]f22c~", (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = LOGGER.hasLevel(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = LOGGER.setLogFile((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LOGGER.closeLogger();
      LOGGER.warn((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      LOGGER.debug(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LOGGER.setLevel(1303);
      Object[] objectArray0 = new Object[15];
      LOGGER.info(objectArray0);
      assertEquals(15, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      LOGGER.info(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LOGGER.closeLogger();
      LOGGER.error((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockException mockException0 = new MockException("DEBUG", (Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      LOGGER.warn((Exception) mockException0, (Object[]) stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockException mockException0 = new MockException();
      LOGGER.debug((Exception) mockException0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockException mockException0 = new MockException();
      LOGGER.setMinLevel((-856));
      // Undeclared exception!
      try { 
        LOGGER.info((Exception) mockException0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockException mockException0 = new MockException((String) null, mockThrowable0);
      LOGGER.info((Exception) mockException0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        LOGGER.error((Exception) mockException0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LOGGER.setLevel(1303);
      Object[] objectArray0 = new Object[15];
      MockException mockException0 = new MockException();
      LOGGER.error((Exception) mockException0, objectArray0);
      assertEquals(15, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LOGGER.closeLogger();
      MockException mockException0 = new MockException("");
      LOGGER.warn("", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LOGGER.setMinLevel((-1777));
      MockException mockException0 = new MockException();
      LOGGER.debug("i", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockException mockException0 = new MockException("DEBUG", (Throwable) null);
      LOGGER.debug("DEBUG", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockException mockException0 = new MockException("WARNS");
      LOGGER.info("{UqDfy+hIvf", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LOGGER.closeLogger();
      MockException mockException0 = new MockException("");
      LOGGER.error("", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      LOGGER.warn(objectArray0);
      assertEquals(11, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LOGGER.setLogFile("r0,VKAHXA>o");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LOGGER.setLogToFile(true);
      LOGGER.closeLogger();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LOGGER.setLogToStdOut(true);
      LogCollector logCollector0 = new LogCollector();
      logCollector0.logged(12, "i44");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LOGGER.setMinLevel(8);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      File file0 = MockFile.createTempFile("DEBUG", "DEBUG");
      boolean boolean0 = LOGGER.setLogFile(file0);
      assertTrue(boolean0);
      
      boolean boolean1 = LOGGER.setLogToFile(false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = LOGGER.setLogToFile(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LOGGER.setLogFile("r0,VKAHXA>o");
      LOGGER.setLogToFile(true);
      LOGGER.closeLogger();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile("*bwAK\".wOmZ", "error closing logfile");
      MockFile mockFile0 = new MockFile(file0, "*bwAK\".wOmZ");
      boolean boolean0 = LOGGER.setLogFile((File) mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LOGGER.closeLogger();
      LOGGER.addLevel(1);
      Object[] objectArray0 = new Object[7];
      MockException mockException0 = new MockException("");
      LOGGER.debug((Exception) mockException0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LOGGER.setLevel(10);
      MockException mockException0 = new MockException("WARNS");
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      LOGGER.warn((Exception) mockException0, (Object[]) stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LOGGER.addLevel(1);
      // Undeclared exception!
      try { 
        LOGGER.debug((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.binfalse.bflog.LOGGER", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = LOGGER.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LOGGER.setLogStackTrace(true);
      LOGGER.setLevel(10);
      MockException mockException0 = new MockException("WARNS");
      LOGGER.info("\t\tat ", (Exception) mockException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LOGGER lOGGER0 = new LOGGER();
      assertTrue(lOGGER0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = LOGGER.setLogFile("U^KW!;N");
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("U^KW!;N");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      boolean boolean1 = LOGGER.setLogToFile(true);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LogCollector logCollector0 = new LogCollector();
      LOGGER.rmCallBack(logCollector0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = LOGGER.isDebugEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = LOGGER.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LogCollector logCollector0 = new LogCollector();
      LOGGER.addCallback(logCollector0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LOGGER.setLogToStdErr(false);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = LOGGER.isErrorEnabled();
      assertTrue(boolean0);
  }
}
