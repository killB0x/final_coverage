/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:30:55 GMT 2022
 */

package com.fredhopper.lifecycle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fredhopper.lifecycle.Container;
import com.fredhopper.lifecycle.LifeCycle;
import com.fredhopper.lifecycle.State;
import com.fredhopper.lifecycle.StateListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLifeCycle_ESTest extends AbstractLifeCycle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      State state0 = State.PAUSED;
      container0.publishState(state0, state0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      State state0 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, true);
      assertNotNull(container0);
      
      container0.initLifeCycle();
      container0.startLifeCycle();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stateListener0).toString();
      container0.addStateListener(stateListener0);
      container0.initLifeCycle();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      Container container0 = new Container(lifeCycle0, false, false);
      assertNotNull(container0);
      
      String string0 = container0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      container0.getState();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      State state0 = State.STOPPED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      State state1 = container0.getState();
      assertSame(state0, state1);
      assertSame(state1, state0);
      assertEquals(State.STOPPED, state1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      assertNotNull(container0);
      
      try { 
        container0.resume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      State state0 = State.STOPPED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, true);
      assertNotNull(container0);
      
      try { 
        container0.pause();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to PAUSED for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      State state0 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      try { 
        container0.changeState(state0, state0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to RUNNING for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      State state0 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, true);
      assertNotNull(container0);
      
      container0.addStateListener((StateListener) null);
      try { 
        container0.publishState(state0, state0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertNotNull(container1);
      assertFalse(container1.equals((Object)container0));
      
      try { 
        container1.doPause();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to PAUSED for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      State state0 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.removeStateListener(stateListener0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      container0.initLifeCycle();
      try { 
        container0.initLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from STOPPED to INITIALIZED for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      State state0 = State.INITIALIZED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      try { 
        container0.resume();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from PAUSED to RUNNING for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      State state0 = State.STARTING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      try { 
        container0.stopLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to STOPPING for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      State state0 = State.INITIALIZED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      try { 
        container0.startLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from INITIALIZED to STARTING for Container[LifeCycle$MockitoMock$1700574002@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }
}
