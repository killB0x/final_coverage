/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 16:29:25 GMT 2022
 */

package com.fredhopper.lifecycle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fredhopper.lifecycle.Container;
import com.fredhopper.lifecycle.LifeCycle;
import com.fredhopper.lifecycle.State;
import com.fredhopper.lifecycle.StateListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Container_ESTest extends Container_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      assertNotNull(container0);
      
      // Undeclared exception!
      try { 
        container0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      State state0 = State.INITIALIZED;
      State state1 = State.RUNNING;
      State state2 = State.PAUSED;
      State state3 = State.STOPPING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1, state2, state1, state3).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertNotNull(container0);
      
      State state4 = State.INITIALIZED;
      container0.publishState(state0, state4);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state4));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state4));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state1));
      assertFalse(state4.equals((Object)state3));
      assertNotSame(state0, state2);
      assertSame(state0, state4);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state4);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state4);
      assertNotSame(state3, state2);
      assertNotSame(state4, state2);
      assertNotSame(state4, state1);
      assertNotSame(state4, state3);
      assertSame(state4, state0);
      
      container0.doStartLifeCycle();
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state4));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state4));
      assertFalse(state3.equals((Object)state2));
      assertNotSame(state0, state2);
      assertSame(state0, state4);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state4);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state3, state0);
      assertNotSame(state3, state1);
      assertNotSame(state3, state4);
      assertNotSame(state3, state2);
      
      State state5 = container0.getState();
      assertEquals(State.STOPPING, state5);
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state4));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state4));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state5.equals((Object)state0));
      assertFalse(state5.equals((Object)state2));
      assertFalse(state5.equals((Object)state4));
      assertFalse(state5.equals((Object)state1));
      assertNotSame(state0, state2);
      assertNotSame(state0, state5);
      assertSame(state0, state4);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state4);
      assertNotSame(state1, state5);
      assertNotSame(state2, state5);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state3, state0);
      assertSame(state3, state5);
      assertNotSame(state3, state1);
      assertNotSame(state3, state4);
      assertNotSame(state3, state2);
      assertSame(state5, state3);
      assertNotSame(state5, state0);
      assertNotSame(state5, state2);
      assertNotSame(state5, state4);
      assertNotSame(state5, state1);
      
      container0.doResume();
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state5));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state4));
      assertFalse(state1.equals((Object)state5));
      assertFalse(state2.equals((Object)state5));
      assertFalse(state2.equals((Object)state4));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state4));
      assertFalse(state3.equals((Object)state2));
      assertNotSame(state0, state2);
      assertNotSame(state0, state5);
      assertSame(state0, state4);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state4);
      assertNotSame(state1, state5);
      assertNotSame(state2, state5);
      assertNotSame(state2, state4);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state0);
      assertNotSame(state3, state0);
      assertSame(state3, state5);
      assertNotSame(state3, state1);
      assertNotSame(state3, state4);
      assertNotSame(state3, state2);
      
      try { 
        container0.doStartLifeCycle();
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      State state0 = State.STARTING;
      State state1 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1, (State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotNull(container0);
      
      Container container1 = new Container(container0, false, false);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      Container container2 = new Container(container1);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertFalse(container2.equals((Object)container0));
      assertFalse(container2.equals((Object)container1));
      assertNotNull(container2);
      
      String string0 = container2.toString();
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container1.equals((Object)container2));
      assertFalse(container1.equals((Object)container0));
      assertFalse(container2.equals((Object)container0));
      assertFalse(container2.equals((Object)container1));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      assertNotSame(container1, container2);
      assertNotSame(container1, container0);
      assertNotSame(container2, container0);
      assertNotSame(container2, container1);
      assertNotNull(string0);
      
      Container container3 = new Container(container2, false, false);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container1.equals((Object)container2));
      assertFalse(container1.equals((Object)container0));
      assertFalse(container2.equals((Object)container0));
      assertFalse(container2.equals((Object)container1));
      assertFalse(container3.equals((Object)container0));
      assertFalse(container3.equals((Object)container2));
      assertFalse(container3.equals((Object)container1));
      assertNotNull(container3);
      
      State state2 = container3.getState();
      assertEquals(State.STARTING, state2);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container0.equals((Object)container3));
      assertFalse(container1.equals((Object)container2));
      assertFalse(container1.equals((Object)container3));
      assertFalse(container1.equals((Object)container0));
      assertFalse(container2.equals((Object)container0));
      assertFalse(container2.equals((Object)container3));
      assertFalse(container2.equals((Object)container1));
      assertFalse(container3.equals((Object)container0));
      assertFalse(container3.equals((Object)container2));
      assertFalse(container3.equals((Object)container1));
      assertFalse(state2.equals((Object)state1));
      assertSame(state0, state2);
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      assertNotSame(container0, container3);
      assertNotSame(container1, container2);
      assertNotSame(container1, container3);
      assertNotSame(container1, container0);
      assertNotSame(container2, container0);
      assertNotSame(container2, container3);
      assertNotSame(container2, container1);
      assertNotSame(container3, container0);
      assertNotSame(container3, container2);
      assertNotSame(container3, container1);
      assertNotSame(state2, state1);
      assertSame(state2, state0);
      
      State state3 = container0.getState();
      assertEquals(State.RUNNING, state3);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container0.equals((Object)container3));
      assertFalse(state3.equals((Object)state0));
      assertFalse(state3.equals((Object)state2));
      assertSame(state0, state2);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertSame(state1, state3);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      assertNotSame(container0, container3);
      assertNotSame(state3, state0);
      assertNotSame(state3, state2);
      assertSame(state3, state1);
      
      container0.doPause();
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container0.equals((Object)container3));
      assertSame(state0, state2);
      assertNotSame(state0, state3);
      assertNotSame(state0, state1);
      assertSame(state1, state3);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      assertNotSame(container0, container3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      State state0 = State.INITIALIZED;
      State state1 = State.STOPPED;
      State state2 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1, state2, state1, state1).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertNotNull(container0);
      
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.removeStateListener(stateListener0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
      
      container0.doStopLifeCycle();
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state0, state2);
      assertNotSame(state1, state0);
      assertNotSame(state1, state2);
      assertNotSame(state2, state1);
      assertNotSame(state2, state0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      State state0 = State.STARTING;
      State state1 = State.STOPPING;
      State state2 = State.INITIALIZED;
      State state3 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1, state2, state3, state1).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state0));
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state0));
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      container1.doStartLifeCycle();
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertNotSame(state0, state1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state3, state2);
      assertNotSame(state3, state1);
      assertNotSame(state3, state0);
      assertNotSame(container0, container1);
      assertNotSame(container1, container0);
      
      State state4 = container1.getState();
      assertEquals(State.STOPPING, state4);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertFalse(state4.equals((Object)state3));
      assertFalse(state4.equals((Object)state2));
      assertFalse(state4.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state0, state3);
      assertNotSame(state0, state2);
      assertNotSame(state0, state4);
      assertNotSame(state1, state3);
      assertNotSame(state1, state2);
      assertNotSame(state1, state0);
      assertSame(state1, state4);
      assertNotSame(state2, state0);
      assertNotSame(state2, state1);
      assertNotSame(state2, state3);
      assertNotSame(state2, state4);
      assertNotSame(state3, state2);
      assertNotSame(state3, state4);
      assertNotSame(state3, state1);
      assertNotSame(state3, state0);
      assertNotSame(container0, container1);
      assertNotSame(container1, container0);
      assertNotSame(state4, state3);
      assertNotSame(state4, state2);
      assertSame(state4, state1);
      assertNotSame(state4, state0);
      
      try { 
        container1.doResume();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from PAUSED to RUNNING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      State state0 = State.RUNNING;
      State state1 = State.INITIALIZED;
      State state2 = State.STARTING;
      State state3 = State.STOPPED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, (State) null).when(lifeCycle0).getState();
      boolean boolean0 = true;
      Container container0 = new Container(lifeCycle0, true, true);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state0.equals((Object)state2));
      assertFalse(state0.equals((Object)state3));
      assertFalse(state1.equals((Object)state2));
      assertFalse(state1.equals((Object)state3));
      assertFalse(state1.equals((Object)state0));
      assertFalse(state2.equals((Object)state3));
      assertFalse(state2.equals((Object)state1));
      assertFalse(state2.equals((Object)state0));
      assertFalse(state3.equals((Object)state1));
      assertFalse(state3.equals((Object)state2));
      assertFalse(state3.equals((Object)state0));
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      try { 
        container0.stopLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to STOPPING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      State state0 = State.STARTING;
      State state1 = State.RUNNING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotNull(container0);
      
      container0.removeStateListener((StateListener) null);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      
      Container container1 = new Container(container0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      container1.doInitLifeCycle();
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(container0, container1);
      assertNotSame(container1, container0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      State state0 = State.INITIALIZED;
      State state1 = State.STOPPED;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state1, (State) null, (State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotNull(container0);
      
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.removeStateListener(stateListener0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      
      Container container1 = new Container(container0, false, false);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      Container container2 = new Container(container0);
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container2.equals((Object)container1));
      assertFalse(container2.equals((Object)container0));
      assertNotNull(container2);
      
      container2.doStopLifeCycle();
      assertFalse(state0.equals((Object)state1));
      assertFalse(state1.equals((Object)state0));
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertFalse(container2.equals((Object)container1));
      assertFalse(container2.equals((Object)container0));
      assertNotSame(state0, state1);
      assertNotSame(state1, state0);
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      assertNotSame(container2, container1);
      assertNotSame(container2, container0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Container container0 = null;
      try {
        container0 = new Container((LifeCycle) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, false);
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      try { 
        container1.doPause();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to PAUSED for Container[LifeCycle$MockitoMock$1560179082@6]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, false);
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      Container container2 = new Container(container1, false, false);
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertFalse(container2.equals((Object)container1));
      assertFalse(container2.equals((Object)container0));
      assertNotNull(container2);
      
      container0.doResume();
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
      
      container0.getState();
      assertFalse(container0.equals((Object)container1));
      assertFalse(container0.equals((Object)container2));
      assertNotSame(container0, container1);
      assertNotSame(container0, container2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      assertNotNull(container0);
      
      Container container1 = new Container(container0);
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      try { 
        container1.pause();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to PAUSED for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      Container container0 = new Container((LifeCycle) null, false, false);
      assertNotNull(container0);
      
      try { 
        container0.pause();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      Container container1 = new Container(container0, false, true);
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      container0.getState();
      assertFalse(container0.equals((Object)container1));
      assertNotSame(container0, container1);
      
      container0.doInitLifeCycle();
      assertFalse(container0.equals((Object)container1));
      assertNotSame(container0, container1);
      
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container1.removeStateListener(stateListener0);
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertNotSame(container0, container1);
      assertNotSame(container1, container0);
      
      try { 
        container1.startLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from INITIALIZED to STARTING for Container[Container@1]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      assertNotNull(container0);
      
      Container container1 = new Container(container0, false, false);
      assertFalse(container1.equals((Object)container0));
      assertNotNull(container1);
      
      container1.getState();
      assertFalse(container0.equals((Object)container1));
      assertFalse(container1.equals((Object)container0));
      assertNotSame(container0, container1);
      assertNotSame(container1, container0);
      
      try { 
        container1.doStopLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from RUNNING to STOPPING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.addStateListener(stateListener0);
      Container container1 = new Container(container0, false, false);
      container1.toString();
      try { 
        container1.doStartLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from INITIALIZED to STARTING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      try { 
        container0.doStartLifeCycle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      Container container1 = new Container(container0, false, true);
      try { 
        container1.doStartLifeCycle();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from INITIALIZED to STARTING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      State state0 = State.RUNNING;
      State state1 = State.STARTING;
      State state2 = State.STOPPING;
      State state3 = State.STOPPING;
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn(state0, state0, state1, state2, state3).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, true, true);
      Container container1 = new Container(container0);
      container1.doStartLifeCycle();
      container1.getState();
      try { 
        container1.doResume();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from PAUSED to RUNNING for Container[LifeCycle$MockitoMock$1560179082@3]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      State state0 = State.STOPPED;
      container0.publishState(state0, state0);
      try { 
        container0.doResume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      Container container1 = new Container(container0);
      Container container2 = new Container(container1, true, true);
      try { 
        container1.doStopLifeCycle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      try { 
        container0.doInitLifeCycle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      try { 
        container0.doStopLifeCycle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Container container0 = null;
      try {
        container0 = new Container((LifeCycle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0);
      Container container1 = new Container(container0, false, false);
      Container container2 = new Container(container1, true, true);
      assertFalse(container2.equals((Object)container1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Container container0 = new Container((LifeCycle) null, false, false);
      try { 
        container0.stopLifeCycle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fredhopper.lifecycle.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LifeCycle lifeCycle0 = mock(LifeCycle.class, new ViolatedAssumptionAnswer());
      doReturn((State) null, (State) null, (State) null).when(lifeCycle0).getState();
      Container container0 = new Container(lifeCycle0, false, false);
      StateListener stateListener0 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.removeStateListener(stateListener0);
      StateListener stateListener1 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container0.addStateListener(stateListener1);
      container0.get();
      Container container1 = new Container(container0);
      State state0 = State.STOPPING;
      State state1 = State.INITIALIZED;
      StateListener stateListener2 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container1.addStateListener(stateListener2);
      container1.publishState(state0, state1);
      container1.initLifeCycle();
      StateListener stateListener3 = mock(StateListener.class, new ViolatedAssumptionAnswer());
      container1.get();
      try { 
        container1.doResume();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change state from PAUSED to RUNNING for Container[LifeCycle$MockitoMock$1560179082@6]
         //
         verifyException("com.fredhopper.lifecycle.AbstractLifeCycle", e);
      }
  }
}
