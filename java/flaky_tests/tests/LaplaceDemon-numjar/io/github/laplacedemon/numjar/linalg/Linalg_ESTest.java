/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 19:30:37 GMT 2022
 */

package io.github.laplacedemon.numjar.linalg;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.laplacedemon.numjar.NumJar;
import io.github.laplacedemon.numjar.linalg.Linalg;
import io.github.laplacedemon.numjar.ndarray.Array2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Linalg_ESTest extends Linalg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[6];
      Array2D array2D0 = new Array2D(doubleArray0, (-2077), 0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invU(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = new Array2D((double[]) null, (-1), (-1));
      assertNotNull(array2D0);
      
      Array2D array2D1 = numJar0.linalg.inv(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(1, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      Array2D array2D0 = new Array2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D0);
      assertEquals(2, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invL(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[8][8];
      int[] intArray0 = new int[9];
      intArray0[0] = 2710;
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(doubleArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[5];
      intArray0[0] = (-535);
      Array2D array2D0 = new Array2D(doubleArray0, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-535), 0, 0, 0, 0}, intArray0);
      assertEquals(9, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.inv(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[4];
      intArray0[0] = 31;
      Array2D array2D0 = new Array2D(doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {31, 0, 0, 0}, intArray0);
      assertEquals(7, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.det(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[6][9];
      double double0 = numJar0.linalg.determinant(doubleArray0, (-2704));
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[3][8];
      double double0 = numJar0.linalg.determinant(doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = new Array2D((double[]) null, (-1), (-1));
      assertNotNull(array2D0);
      
      double double0 = numJar0.linalg.det(array2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(2, 2);
      assertNotNull(array2D0);
      assertEquals(4, array2D0.size());
      
      Array2D array2D1 = numJar0.arccos(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(4, array2D0.size());
      assertEquals(4, array2D1.size());
      
      double double0 = numJar0.linalg.determinant(array2D1, 2);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D0.equals((Object)array2D1));
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, array2D0.size());
      assertEquals(4, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(0, 0);
      assertNotNull(array2D0);
      assertEquals(0, array2D0.size());
      
      double double0 = numJar0.linalg.determinant(array2D0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, array2D0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(17, 17);
      assertNotNull(array2D0);
      assertEquals(289, array2D0.size());
      
      Array2D array2D1 = numJar0.linalg.invU(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(289, array2D0.size());
      assertEquals(289, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(0, 0);
      assertNotNull(array2D0);
      assertEquals(0, array2D0.size());
      
      Array2D array2D1 = numJar0.linalg.invL(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertTrue(array2D1.equals((Object)array2D0));
      assertEquals(0, array2D0.size());
      assertEquals(0, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(0, 0);
      assertNotNull(array2D0);
      assertEquals(0, array2D0.size());
      
      Array2D array2D1 = numJar0.linalg.inv(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertTrue(array2D1.equals((Object)array2D0));
      assertEquals(0, array2D0.size());
      assertEquals(0, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 626.2051163298;
      doubleArray0[0] = doubleArray1;
      double double0 = numJar0.linalg.determinant(doubleArray0, 1);
      assertEquals(3, doubleArray0.length);
      assertEquals(626.2051163298, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double double0 = numJar0.linalg.determinant(doubleArray0, 1);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3050.736883);
      doubleArray0[0] = doubleArray1;
      Array2D array2D0 = new Array2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D0);
      assertEquals(1, array2D0.size());
      
      Array2D array2D1 = numJar0.abs(array2D0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(1, array2D0.size());
      assertEquals(1, array2D1.size());
      
      double double0 = numJar0.linalg.determinant(array2D1, 1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D0.equals((Object)array2D1));
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(3050.736883, double0, 0.01);
      assertEquals(1, array2D0.size());
      assertEquals(1, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3050.736883);
      doubleArray0[0] = doubleArray1;
      Array2D array2D0 = new Array2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D0);
      assertEquals(1, array2D0.size());
      
      double double0 = numJar0.linalg.determinant(array2D0, 1);
      assertEquals(1, doubleArray0.length);
      assertEquals((-3050.736883), double0, 0.01);
      assertEquals(1, array2D0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3050.736883);
      doubleArray0[0] = doubleArray1;
      Array2D array2D0 = new Array2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D0);
      assertEquals(1, array2D0.size());
      
      Array2D array2D1 = numJar0.abs(array2D0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(1, array2D0.size());
      assertEquals(1, array2D1.size());
      
      double double0 = numJar0.linalg.det(array2D1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D0.equals((Object)array2D1));
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(3050.736883, double0, 0.01);
      assertEquals(1, array2D0.size());
      assertEquals(1, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3050.736883);
      doubleArray0[0] = doubleArray1;
      Array2D array2D0 = new Array2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2D0);
      assertEquals(1, array2D0.size());
      
      double double0 = numJar0.linalg.det(array2D0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-3050.736883), double0, 0.01);
      assertEquals(1, array2D0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invU((Array2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[5];
      Array2D array2D0 = new Array2D(doubleArray0, 226, 226);
      assertEquals(5, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invU(array2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 227 out of bounds for length 5
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(809, 809);
      assertNotNull(array2D0);
      assertEquals(654481, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.invL(array2D0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invL((Array2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[0];
      Array2D array2D0 = new Array2D(doubleArray0, 31, 31);
      assertEquals(0, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.invL(array2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 0
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(809, 809);
      assertNotNull(array2D0);
      assertEquals(654481, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.inv(array2D0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.inv((Array2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[0];
      Array2D array2D0 = new Array2D(doubleArray0, 226, 226);
      assertEquals(0, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.inv(array2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(17, 17);
      assertNotNull(array2D0);
      assertEquals(289, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.determinant(array2D0, 17);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.determinant((Array2D) null, 3380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(17, 17);
      assertNotNull(array2D0);
      assertEquals(289, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.determinant(array2D0, 4363);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(17, 17);
      assertNotNull(array2D0);
      assertEquals(289, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.det(array2D0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.det((Array2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[2];
      Array2D array2D0 = new Array2D(doubleArray0, 20, 20);
      assertEquals(2, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.det(array2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.LU((double[][]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[6][2];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2317);
      intArray0[1] = (-2317);
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(doubleArray0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2317
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][1];
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("io.github.laplacedemon.numjar.ndarray.Array2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.ones(40, 40);
      assertNotNull(array2D0);
      assertEquals(1600, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.LU(array2D0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.LU((Array2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[] doubleArray0 = new double[0];
      Array2D array2D0 = new Array2D(doubleArray0, 31, 31);
      assertEquals(0, doubleArray0.length);
      assertNotNull(array2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, array2D0.size());
      
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(array2D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(106, 106);
      assertNotNull(array2D0);
      assertEquals(11236, array2D0.size());
      
      // Undeclared exception!
      numJar0.linalg.invU(array2D0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(0, 0);
      assertNotNull(array2D0);
      assertEquals(0, array2D0.size());
      
      Array2D array2D1 = numJar0.linalg.invU(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertTrue(array2D1.equals((Object)array2D0));
      assertEquals(0, array2D0.size());
      assertEquals(0, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(4, 4);
      assertNotNull(array2D0);
      assertEquals(16, array2D0.size());
      
      Array2D array2D1 = numJar0.linalg.invL(array2D0);
      assertNotNull(array2D1);
      assertNotSame(array2D0, array2D1);
      assertNotSame(array2D1, array2D0);
      assertFalse(array2D1.equals((Object)array2D0));
      assertEquals(16, array2D0.size());
      assertEquals(16, array2D1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = new Array2D((double[]) null, 1314, (-1));
      assertNotNull(array2D0);
      
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      Array2D array2D0 = numJar0.zeros(8, 8);
      assertNotNull(array2D0);
      assertEquals(64, array2D0.size());
      
      Array2D[] array2DArray0 = numJar0.linalg.LU(array2D0);
      assertEquals(2, array2DArray0.length);
      assertNotNull(array2DArray0);
      assertEquals(64, array2D0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[7][5];
      double double0 = numJar0.linalg.determinant(doubleArray0, 4);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      assertNotNull(numJar0);
      
      double[][] doubleArray0 = new double[1][2];
      // Undeclared exception!
      try { 
        numJar0.linalg.determinant(doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      // Undeclared exception!
      try { 
        numJar0.linalg.determinant((double[][]) null, 2829);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      double[][] doubleArray0 = new double[8][1];
      Array2D array2D0 = new Array2D(doubleArray0);
      // Undeclared exception!
      try { 
        numJar0.linalg.invU(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Linalg linalg0 = new Linalg((NumJar) null);
      double[] doubleArray0 = new double[4];
      Array2D array2D0 = new Array2D(doubleArray0, 191, (-1));
      // Undeclared exception!
      try { 
        linalg0.invL(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      double[][] doubleArray0 = new double[0][1];
      int[] intArray0 = new int[9];
      intArray0[1] = 20;
      // Undeclared exception!
      try { 
        numJar0.linalg.LU(doubleArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      double[][] doubleArray0 = new double[4][6];
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 4;
      Array2D[] array2DArray0 = numJar0.linalg.LU(doubleArray0, intArray0);
      assertEquals(2, array2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      Array2D array2D0 = numJar0.zeros(17, 75);
      // Undeclared exception!
      try { 
        numJar0.linalg.det(array2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Last 2 dimensions of the array must be square
         //
         verifyException("io.github.laplacedemon.numjar.linalg.Linalg", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NumJar numJar0 = NumJar.as();
      Array2D array2D0 = numJar0.zeros(2, 2);
      double double0 = numJar0.linalg.determinant(array2D0, 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      Array2D array2D0 = numJar0.ones(4, 4);
      double double0 = numJar0.linalg.determinant(array2D0, 4);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NumJar numJar0 = NumJar.INS;
      Array2D array2D0 = numJar0.ones(4, 4);
      Array2D array2D1 = numJar0.linalg.inv(array2D0);
      assertEquals(16, array2D1.size());
  }
}
