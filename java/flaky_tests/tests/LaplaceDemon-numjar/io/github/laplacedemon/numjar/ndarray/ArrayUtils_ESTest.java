/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 01 19:31:54 GMT 2022
 */

package io.github.laplacedemon.numjar.ndarray;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.laplacedemon.numjar.ndarray.ArrayUtils;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[9];
      intArray1[7] = 1;
      ArrayUtils.boardcastShape(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 929;
      intArray0[1] = 131;
      ArrayUtils.cumprod(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-5397);
      ArrayUtils.cumprod(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.boardcastShape(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 929;
      intArray0[1] = 131;
      Consumer<int[]> consumer0 = (Consumer<int[]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      ArrayUtils.foreach(intArray0, consumer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.foreach(intArray0, (Consumer<int[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.ndarray.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.cumprod((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.ndarray.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.boardcastShape((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.ndarray.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 929;
      Consumer<int[]> consumer0 = (Consumer<int[]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ArrayUtils.foreach(intArray0, consumer0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int[] intArray1 = new int[7];
      int[] intArray2 = ArrayUtils.boardcastShape(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      intArray1[1] = 1;
      int[] intArray2 = ArrayUtils.boardcastShape(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 1}, intArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-796);
      int[] intArray1 = new int[6];
      // Undeclared exception!
      try { 
        ArrayUtils.boardcastShape(intArray1, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.laplacedemon.numjar.ndarray.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.cumprod(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
  }
}
