/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:30:13 GMT 2022
 */

package jetbrick.template.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import jetbrick.template.compiler.JavaSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaSource_ESTest extends JavaSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B/Z9GMPHQ-Sg.v");
      JavaSource javaSource0 = new JavaSource("", (String) null, mockFile0);
      String string0 = javaSource0.getSourceCode();
      assertEquals("", javaSource0.getQualifiedClassName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      JavaSource javaSource0 = new JavaSource("", "", mockFile0);
      String string0 = javaSource0.getSourceCode();
      assertEquals("", javaSource0.getQualifiedClassName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("", "0c^dK\"?", mockFile0);
      String string0 = javaSource0.getQualifiedClassName();
      assertEquals("", string0);
      assertEquals("0c^dK\"?", javaSource0.getSourceCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaSource javaSource0 = new JavaSource("Ke%4.Cb0e7R", "Nw8Gtf", (File) null);
      javaSource0.getOutputdir();
      assertEquals("Nw8Gtf", javaSource0.getSourceCode());
      assertEquals("Ke%4.Cb0e7R", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("", "0c^dK\"?", mockFile0);
      File file0 = javaSource0.getClassFile();
      JavaSource javaSource1 = new JavaSource("utf-8", "jetbrick.template.utils.IoUtils", file0);
      File file1 = javaSource1.getOutputdir();
      assertEquals("", javaSource0.getQualifiedClassName());
      assertEquals("jetbrick.template.utils.IoUtils", javaSource1.getSourceCode());
      assertEquals("/home/user/jetbrick.template.compiler.JavaSource/utf-8/.class", file1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, " c.@");
      JavaSource javaSource0 = new JavaSource("XJ", "XJ", mockFile0);
      mockFile0.mkdirs();
      javaSource0.getOutputdir();
      assertEquals("XJ", javaSource0.getSourceCode());
      assertEquals("XJ", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, " c.@");
      JavaSource javaSource0 = new JavaSource("XJ", "XJ", mockFile0);
      javaSource0.saveJavaFile();
      File file0 = javaSource0.getJavaFile();
      assertEquals(2L, file0.length());
      assertEquals("XJ", javaSource0.getQualifiedClassName());
      assertEquals("/home/user/ c.@/XJ.java", file0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaSource javaSource0 = new JavaSource("", "", (File) null);
      File file0 = javaSource0.getClassFile();
      assertEquals("", javaSource0.getSourceCode());
      assertEquals("", javaSource0.getQualifiedClassName());
      assertEquals(".class", file0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("}y{ge");
      JavaSource javaSource0 = new JavaSource("}y{ge", "}y{ge", mockFile0);
      // Undeclared exception!
      try { 
        javaSource0.saveJavaFile();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("jetbrick.template.utils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaSource javaSource0 = new JavaSource("", "", (File) null);
      // Undeclared exception!
      try { 
        javaSource0.saveJavaFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.compiler.JavaSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      JavaSource javaSource0 = new JavaSource("", (String) null, mockFile0);
      // Undeclared exception!
      try { 
        javaSource0.saveJavaFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.compiler.JavaSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      JavaSource javaSource0 = new JavaSource("", "", mockFile0);
      try { 
        javaSource0.saveJavaFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("}y{>ge", "}y{>ge");
      JavaSource javaSource0 = new JavaSource("}y{>ge", "}y{>ge", file0);
      try { 
        javaSource0.saveJavaFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaSource javaSource0 = null;
      try {
        javaSource0 = new JavaSource((String) null, (String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.compiler.JavaSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".class");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      JavaSource javaSource0 = new JavaSource("", "", mockFile0);
      javaSource0.clean();
      assertEquals("", javaSource0.getSourceCode());
      assertEquals("", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("utf-8", "jetbrick.template.compiler.JavaSource", mockFile0);
      javaSource0.clean();
      assertEquals("jetbrick.template.compiler.JavaSource", javaSource0.getSourceCode());
      assertEquals("utf-8", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("utf-8", "jetbrick.template.compiler.JavaSource", mockFile0);
      javaSource0.saveJavaFile();
      javaSource0.clean();
      assertEquals("jetbrick.template.compiler.JavaSource", javaSource0.getSourceCode());
      assertEquals("utf-8", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("utf-8", "jetbrick.template.compiler.JavaSource", mockFile0);
      String string0 = javaSource0.getSourceCode();
      assertEquals("jetbrick.template.compiler.JavaSource", string0);
      assertEquals("utf-8", javaSource0.getQualifiedClassName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("utf-8", "jetbrick.template.compiler.JavaSource", mockFile0);
      String string0 = javaSource0.getQualifiedClassName();
      assertEquals("jetbrick.template.compiler.JavaSource", javaSource0.getSourceCode());
      assertEquals("utf-8", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("jetbrick.template.compiler.JavaSource", "utf-8");
      JavaSource javaSource0 = new JavaSource("utf-8", "jetbrick.template.compiler.JavaSource", mockFile0);
      File file0 = javaSource0.getClassFile();
      assertEquals("utf-8", javaSource0.getQualifiedClassName());
      assertEquals("utf-8.class", file0.getName());
      assertEquals("jetbrick.template.compiler.JavaSource", javaSource0.getSourceCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaSource javaSource0 = new JavaSource("", "", (File) null);
      File file0 = javaSource0.getJavaFile();
      assertEquals("", javaSource0.getQualifiedClassName());
      assertEquals("", javaSource0.getSourceCode());
      assertEquals(".java", file0.toString());
  }
}
