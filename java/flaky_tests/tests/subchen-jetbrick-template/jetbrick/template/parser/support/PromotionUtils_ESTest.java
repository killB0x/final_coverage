/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:23:43 GMT 2022
 */

package jetbrick.template.parser.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jetbrick.template.parser.support.PromotionUtils;
import jetbrick.template.parser.support.TypedKlass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PromotionUtils_ESTest extends PromotionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.class;
      Class<?> class2 = PromotionUtils.get_binary_shift(class1, class0, (String) null);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = Object.class;
      Class<?> class2 = PromotionUtils.get_binary_basic(class0, class1, "+{");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypedKlass typedKlass0 = PromotionUtils.getResultClassForConditionalOperator((TypedKlass) null, (TypedKlass) null);
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_unary_inc_dec(class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_unary_inc_dec(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.support.PromotionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_unary_basic(class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_unary_basic(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.support.PromotionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_binary_bitwise(class0, class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        PromotionUtils.get_binary_bitwise(class0, class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.support.PromotionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PromotionUtils.get_binary_basic(class0, class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        PromotionUtils.get_binary_basic(class0, class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.support.PromotionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.NULL;
      // Undeclared exception!
      try { 
        PromotionUtils.getResultClassForConditionalOperator((TypedKlass) null, typedKlass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.support.PromotionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.JetForStatus;
      TypedKlass typedKlass1 = TypedKlass.JetWriter;
      TypedKlass typedKlass2 = PromotionUtils.getResultClassForConditionalOperator(typedKlass0, typedKlass1);
      assertNotSame(typedKlass2, typedKlass0);
      assertNotSame(typedKlass2, typedKlass1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.VOID;
      Class<Character> class0 = Character.class;
      TypedKlass typedKlass1 = TypedKlass.create(class0, typedKlass0.EMPTY_TYPE_ARGS);
      TypedKlass typedKlass2 = PromotionUtils.getResultClassForConditionalOperator(typedKlass0, typedKlass1);
      assertFalse(typedKlass2.isPrimitive());
      assertNotSame(typedKlass2, typedKlass1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypedKlass typedKlass0 = TypedKlass.create(class0);
      TypedKlass typedKlass1 = TypedKlass.JetWriter;
      TypedKlass typedKlass2 = PromotionUtils.getResultClassForConditionalOperator(typedKlass1, typedKlass0);
      assertNotSame(typedKlass2, typedKlass1);
      assertNotSame(typedKlass2, typedKlass0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.VOID;
      Class<Character> class0 = Character.class;
      TypedKlass typedKlass1 = TypedKlass.create(class0, typedKlass0.EMPTY_TYPE_ARGS);
      TypedKlass typedKlass2 = TypedKlass.WildcharTypedKlass;
      TypedKlass typedKlass3 = PromotionUtils.getResultClassForConditionalOperator(typedKlass1, typedKlass2);
      assertSame(typedKlass3, typedKlass2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.VOID;
      Class<Character> class0 = Character.class;
      TypedKlass typedKlass1 = TypedKlass.create(class0, typedKlass0.EMPTY_TYPE_ARGS);
      TypedKlass typedKlass2 = TypedKlass.create(class0, typedKlass0.EMPTY_TYPE_ARGS);
      TypedKlass typedKlass3 = PromotionUtils.getResultClassForConditionalOperator(typedKlass2, typedKlass0);
      TypedKlass typedKlass4 = PromotionUtils.getResultClassForConditionalOperator(typedKlass3, typedKlass1);
      assertSame(typedKlass4, typedKlass3);
      assertNotSame(typedKlass4, typedKlass2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Character> class0 = Character.class;
      TypedKlass typedKlass0 = TypedKlass.create(class0);
      TypedKlass typedKlass1 = typedKlass0.asUnboxedTypedKlass();
      TypedKlass typedKlass2 = typedKlass1.asBoxedTypedKlass();
      TypedKlass typedKlass3 = PromotionUtils.getResultClassForConditionalOperator(typedKlass2, typedKlass1);
      TypedKlass typedKlass4 = PromotionUtils.getResultClassForConditionalOperator(typedKlass0, typedKlass3);
      assertSame(typedKlass4, typedKlass3);
      assertTrue(typedKlass3.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.VOID;
      TypedKlass typedKlass1 = PromotionUtils.getResultClassForConditionalOperator(typedKlass0, (TypedKlass) null);
      assertFalse(typedKlass1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.VOID;
      TypedKlass typedKlass1 = typedKlass0.asBoxedTypedKlass();
      TypedKlass typedKlass2 = PromotionUtils.getResultClassForConditionalOperator(typedKlass1, typedKlass0);
      assertFalse(typedKlass2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.JetForStatus;
      TypedKlass typedKlass1 = PromotionUtils.getResultClassForConditionalOperator(typedKlass0, (TypedKlass) null);
      assertNotNull(typedKlass1);
      assertSame(typedKlass1, typedKlass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypedKlass typedKlass0 = TypedKlass.Object;
      TypedKlass typedKlass1 = PromotionUtils.getResultClassForConditionalOperator((TypedKlass) null, typedKlass0);
      assertNotNull(typedKlass1);
      assertSame(typedKlass1, typedKlass0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      Class<?> class2 = PromotionUtils.get_binary_compare(class1, class0, "(A+%");
      assertEquals(1041, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_compare(class0, class0, "l");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Object> class1 = Object.class;
      Class<?> class2 = PromotionUtils.get_binary_bitwise(class0, class1, "|h7j[4AjjE");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_compare(class0, class0, "|_lPzW;");
      Class<?> class2 = PromotionUtils.get_binary_bitwise(class1, class0, "|_lPzW;");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_compare(class0, class0, "|");
      Class<?> class2 = PromotionUtils.get_binary_bitwise(class1, class1, "|");
      assertFalse(class2.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.TYPE;
      Class<?> class2 = PromotionUtils.get_binary_bitwise(class1, class0, "|7j[4AjjR");
      assertEquals("int", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_bitwise(class0, class0, "^S0");
      assertNotNull(class1);
      assertEquals("int", class1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_bitwise(class0, class0, "97bXlc/");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_bitwise(class0, class0, "&EUm]{G8:jYs?$t3OF");
      assertEquals("int", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Character> class1 = Character.TYPE;
      Class<?> class2 = PromotionUtils.get_binary_shift(class1, class0, "_BlVtK'$ABcY<9q2q");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_shift(class0, class0, "");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      Class<?> class2 = PromotionUtils.get_binary_basic(class0, class1, "8x#GgW");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, "/DGG+9Wb~B:Xi~F3l>");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, ".Ce- ;K");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, ",eY?D>`");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, (Class<?>) null, "*=4r7H");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, (Class<?>) null, ")nJC0}THD");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, "(");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, "'\u0000'");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      Class<?> class2 = PromotionUtils.get_binary_basic(class0, class1, "&h]q(q,;q=");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, "-(");
      assertNotNull(class1);
      assertEquals("int", class1.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_binary_basic(class0, class0, "%n\"R");
      assertEquals("int", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_unary_inc_dec(class0, "yNnj");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_unary_inc_dec(class0, "-(");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PromotionUtils.get_unary_inc_dec(class0, "+ (s>TP");
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_unary_basic(class0, "~\"Zu");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PromotionUtils.get_unary_basic(class0, "~o");
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PromotionUtils.get_unary_basic(class0, "-i,p{WFM<6");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = PromotionUtils.get_unary_basic(class0, "|7j[4AjjR");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<?> class0 = PromotionUtils.get_unary_basic((Class<?>) null, "+ (s>TP");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PromotionUtils promotionUtils0 = new PromotionUtils();
  }
}
