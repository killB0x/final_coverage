/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:08:12 GMT 2022
 */

package jetbrick.template.parser.support;

import org.junit.Test;
import static org.junit.Assert.*;
import jetbrick.template.parser.support.PrimitiveClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrimitiveClassUtils_ESTest extends PrimitiveClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0, false);
      Class<?> class2 = PrimitiveClassUtils.asBoxedClass(class1, false);
      assertNotSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<?> class0 = PrimitiveClassUtils.asBoxedClass((Class<?>) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0, true);
      String string0 = PrimitiveClassUtils.getDefaultValueAsSource(class1);
      assertEquals("'\u0000'", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = PrimitiveClassUtils.getDefaultValueAsSource((Class<?>) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = PrimitiveClassUtils.getDefaultValueAsSource(class0);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<?> class0 = PrimitiveClassUtils.asBoxedClass((Class<?>) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0, true);
      Class<?> class2 = PrimitiveClassUtils.asBoxedClass(class1, true);
      assertSame(class1, class2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PrimitiveClassUtils.asUnboxedClass(class0, true);
      boolean boolean0 = PrimitiveClassUtils.isUnboxedClass(class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = PrimitiveClassUtils.isUnboxedClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = PrimitiveClassUtils.isUnboxedClass((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = PrimitiveClassUtils.isBoxedClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = PrimitiveClassUtils.isBoxedClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrimitiveClassUtils primitiveClassUtils0 = new PrimitiveClassUtils();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = PrimitiveClassUtils.asBoxedClass(class0);
      Class<?> class2 = PrimitiveClassUtils.asUnboxedClass(class1);
      assertFalse(class2.isSynthetic());
  }
}
