/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:44:29 GMT 2022
 */

package jetbrick.template.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jetbrick.template.parser.TypedKlassParser;
import jetbrick.template.parser.VariableResolver;
import jetbrick.template.parser.support.TypedKlass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypedKlassParser_ESTest extends TypedKlassParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'A';
      charArray0[2] = 'i';
      charArray0[3] = '1';
      charArray0[4] = '_';
      charArray0[5] = 'W';
      charArray0[6] = '9';
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
      assertNotNull(typedKlassParser0);
      assertArrayEquals(new char[] {'H', 'A', 'i', '1', '_', 'W', '9', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      TypedKlass typedKlass0 = typedKlassParser0.asTypedKlass();
      assertNull(typedKlass0);
      assertArrayEquals(new char[] {'H', 'A', 'i', '1', '_', 'W', '9', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = ' ';
      charArray0[2] = 'Z';
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
      assertNotNull(typedKlassParser0);
      assertArrayEquals(new char[] {'j', ' ', 'Z'}, charArray0);
      assertEquals(3, charArray0.length);
      
      TypedKlass typedKlass0 = typedKlassParser0.asTypedKlass();
      assertNull(typedKlass0);
      assertArrayEquals(new char[] {'j', ' ', 'Z'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'z';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
      assertNotNull(typedKlassParser0);
      assertArrayEquals(new char[] {'Y', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      
      TypedKlass typedKlass0 = typedKlassParser0.asTypedKlass();
      assertNull(typedKlass0);
      assertArrayEquals(new char[] {'Y', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("iBiQW{,9obdpR(h1;b");
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = '<';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '>';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
      assertNotNull(typedKlassParser0);
      assertArrayEquals(new char[] {'F', 'F', '<', '1', '1', '>', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      TypedKlass typedKlass0 = typedKlassParser0.asTypedKlass();
      assertNull(typedKlass0);
      assertArrayEquals(new char[] {'F', 'F', '<', '1', '1', '>', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, (VariableResolver) null);
      assertNotNull(typedKlassParser0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        typedKlassParser0.asTypedKlass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.TypedKlassParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      assertNotNull(variableResolver0);
      
      TypedKlassParser typedKlassParser0 = null;
      try {
        typedKlassParser0 = new TypedKlassParser((char[]) null, variableResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.TypedKlassParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("qualifiedClassName must not be null.");
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      char[] charArray0 = new char[6];
      charArray0[0] = '\t';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = '[';
      charArray0[2] = ' ';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, variableResolver0);
      // Undeclared exception!
      try { 
        typedKlassParser0.asTypedKlass();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error. match '\u0000', expected ']'
         //
         verifyException("jetbrick.template.parser.TypedKlassParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '<';
      charArray0[2] = ' ';
      charArray0[3] = '{';
      TypedKlassParser typedKlassParser0 = new TypedKlassParser(charArray0, (VariableResolver) null);
      // Undeclared exception!
      try { 
        typedKlassParser0.asTypedKlass();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error, no lable found.
         //
         verifyException("jetbrick.template.parser.TypedKlassParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("int");
      assertTrue(typedKlass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("Syntax error. match '");
      assertNull(typedKlass0);
  }
}
