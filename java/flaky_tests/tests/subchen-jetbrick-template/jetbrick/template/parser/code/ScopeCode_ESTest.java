/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:13:58 GMT 2022
 */

package jetbrick.template.parser.code;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jetbrick.template.parser.code.BlockCode;
import jetbrick.template.parser.code.Code;
import jetbrick.template.parser.code.LineCode;
import jetbrick.template.parser.code.MacroCode;
import jetbrick.template.parser.code.MethodCode;
import jetbrick.template.parser.code.ScopeCode;
import jetbrick.template.parser.code.SegmentListCode;
import jetbrick.template.parser.code.TagCode;
import jetbrick.template.parser.code.TemplateClassCode;
import jetbrick.template.parser.support.TypedKlass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopeCode_ESTest extends ScopeCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      ScopeCode scopeCode0 = new ScopeCode(methodCode0, "context");
      TagCode tagCode0 = scopeCode0.createTagCode();
      templateClassCode0.setEncoding("");
      TypedKlass typedKlass0 = TypedKlass.Object;
      methodCode0.define("context", typedKlass0, true);
      MacroCode macroCode0 = scopeCode0.createMacroCode();
      macroCode0.setName("context");
      methodCode0.setBodyCode(tagCode0);
      scopeCode0.createBlockCode(888);
      scopeCode0.define("Zub'j8Fd.:o\"6 ", typedKlass0, true);
      scopeCode0.createLineCode("context");
      TypedKlass typedKlass1 = TypedKlass.VOID;
      typedKlass0.asBoxedTypedKlass();
      tagCode0.setLine(888);
      methodCode0.define("context", typedKlass1);
      methodCode0.createMacroCode();
      TypedKlass typedKlass2 = scopeCode0.resolve(",o`SUL{T'kRB7y[", false);
      assertNull(typedKlass2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScopeCode scopeCode0 = new ScopeCode((ScopeCode) null, "");
      TypedKlass typedKlass0 = TypedKlass.VOID;
      scopeCode0.define("*l$eHp2!yeh!F", typedKlass0);
      TagCode tagCode0 = new TagCode(scopeCode0, "?r#kI;P-GREy");
      scopeCode0.bodyCode = (Code) null;
      MethodCode methodCode0 = tagCode0.getMethodCode();
      ScopeCode scopeCode1 = methodCode0.pop();
      methodCode0.define("", typedKlass0, true);
      scopeCode1.createLineCode("?r#kI;P-GREy");
      TypedKlass typedKlass1 = TypedKlass.VOID;
      Class<MethodCode> class0 = MethodCode.class;
      TypedKlass typedKlass2 = TypedKlass.create(class0, typedKlass0.EMPTY_TYPE_ARGS);
      typedKlass2.asBoxedTypedKlass();
      tagCode0.setLine(0);
      scopeCode1.define("", typedKlass2);
      scopeCode0.createMacroCode();
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode1 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass3 = methodCode1.resolve("47`+1PwQ~XV2-<*_-w2", true);
      assertNull(typedKlass3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      MacroCode macroCode0 = new MacroCode(methodCode0);
      TypedKlass typedKlass0 = TypedKlass.VOID;
      methodCode0.define("", typedKlass0);
      TagCode tagCode0 = new TagCode(methodCode0, (String) null);
      MethodCode methodCode1 = tagCode0.getMethodCode();
      ScopeCode scopeCode0 = methodCode1.pop();
      methodCode0.define("RT):Cl%b;%)Q", typedKlass0, true);
      scopeCode0.createLineCode((String) null);
      TypedKlass typedKlass1 = TypedKlass.VOID;
      typedKlass0.asBoxedTypedKlass();
      TagCode tagCode1 = methodCode1.createTagCode();
      tagCode1.setLine(1456);
      scopeCode0.define((String) null, typedKlass0);
      methodCode0.createMacroCode();
      TypedKlass typedKlass2 = scopeCode0.resolve((String) null, true);
      assertTrue(typedKlass2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      MacroCode macroCode0 = methodCode0.createMacroCode();
      assertNotNull(macroCode0);
      
      templateClassCode0.setTemplateName("");
      ScopeCode scopeCode0 = methodCode0.push();
      LineCode lineCode0 = scopeCode0.createLineCode("context");
      MethodCode methodCode1 = macroCode0.getMethodCode();
      templateClassCode0.addMacro(macroCode0);
      methodCode1.createMacroCode();
      methodCode0.setBodyCode(lineCode0);
      macroCode0.setName("Ey%{");
      ScopeCode scopeCode1 = scopeCode0.push();
      templateClassCode0.addField("context", "context");
      scopeCode0.setBodyCode(macroCode0);
      methodCode1.setBodyCode(methodCode0);
      scopeCode0.toString();
      methodCode0.toString();
      methodCode0.define((String) null, (TypedKlass) null);
      scopeCode0.define("context", (TypedKlass) null);
      methodCode0.createLineCode("");
      methodCode0.toString();
      scopeCode1.resolve("o7.F6Sk56E>", true);
      scopeCode0.define("    final JetContext context = $ctx.getContext();\n    final JetWriter $out = $ctx.getWriter();\n      context\n    $out.flush();\n", (TypedKlass) null);
      TypedKlass typedKlass0 = scopeCode1.resolve("", true);
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      methodCode0.setBodyCode(templateClassCode0);
      // Undeclared exception!
      try { 
        methodCode0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      ScopeCode scopeCode0 = new ScopeCode((ScopeCode) null, "");
      String string1 = "*l$eHp2!yeh!F";
      TypedKlass typedKlass0 = TypedKlass.VOID;
      scopeCode0.define("*l$eHp2!yeh!F", typedKlass0);
      TagCode tagCode0 = new TagCode(scopeCode0, "?r#kI;P-GREy");
      scopeCode0.bodyCode = (Code) null;
      tagCode0.getMethodCode();
      ScopeCode scopeCode1 = new ScopeCode(scopeCode0, "context");
      // Undeclared exception!
      try { 
        scopeCode1.define("", typedKlass0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.code.ScopeCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      ScopeCode scopeCode0 = methodCode0.push();
      assertNotNull(scopeCode0);
      
      TypedKlass typedKlass0 = TypedKlass.VOID;
      boolean boolean0 = scopeCode0.define("\n", typedKlass0, true);
      assertTrue(boolean0);
      
      ScopeCode scopeCode1 = scopeCode0.push();
      LineCode lineCode0 = scopeCode1.createLineCode("context");
      assertEquals("        context\n", lineCode0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      MethodCode methodCode1 = new MethodCode(methodCode0, "context", true);
      ScopeCode scopeCode0 = new ScopeCode(methodCode1, "");
      TagCode tagCode0 = scopeCode0.createTagCode();
      MethodCode methodCode2 = tagCode0.getMethodCode();
      MacroCode macroCode0 = methodCode2.createMacroCode();
      MethodCode methodCode3 = macroCode0.getMethodCode();
      ScopeCode scopeCode1 = methodCode3.pop();
      assertNotSame(methodCode3, scopeCode1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      BlockCode blockCode0 = methodCode0.createBlockCode(512);
      assertNotNull(blockCode0);
      
      ScopeCode scopeCode0 = methodCode0.pop();
      assertNull(scopeCode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = TypedKlass.WildcharTypedKlass;
      methodCode0.define("context", typedKlass0, true);
      boolean boolean0 = methodCode0.define("s}%T&", typedKlass0);
      assertTrue(boolean0);
      
      boolean boolean1 = methodCode0.define("context", typedKlass0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScopeCode scopeCode0 = new ScopeCode((ScopeCode) null, "");
      String string0 = "*l$eHp2!yeh!F";
      TypedKlass typedKlass0 = TypedKlass.VOID;
      scopeCode0.define("*l$eHp2!yeh!F", typedKlass0);
      TagCode tagCode0 = new TagCode(scopeCode0, "?r#kI;P-GREy");
      scopeCode0.bodyCode = (Code) null;
      MethodCode methodCode0 = tagCode0.getMethodCode();
      ScopeCode scopeCode1 = methodCode0.pop();
      // Undeclared exception!
      try { 
        scopeCode1.define("", typedKlass0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.code.ScopeCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = TypedKlass.JetForStatus;
      methodCode0.define("context", typedKlass0, true);
      ScopeCode scopeCode0 = methodCode0.push();
      assertNotNull(scopeCode0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = methodCode0.resolve("context", true);
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MethodCode methodCode0 = new MethodCode((ScopeCode) null, "", true);
      TypedKlass typedKlass0 = TypedKlass.WildcharTypedKlass;
      TypedKlass typedKlass1 = typedKlass0.asBoxedTypedKlass();
      methodCode0.define("", typedKlass0);
      ScopeCode scopeCode0 = methodCode0.push();
      TypedKlass typedKlass2 = TypedKlass.VOID;
      typedKlass2.asUnboxedTypedKlass();
      scopeCode0.define("context", typedKlass2);
      methodCode0.define("8sH3c.nW", typedKlass2, true);
      typedKlass1.toString();
      typedKlass1.toString();
      methodCode0.define("context", typedKlass0, true);
      typedKlass2.asUnboxedTypedKlass();
      methodCode0.resolve("", true);
      Class<MethodCode> class0 = MethodCode.class;
      TypedKlass.create(class0, typedKlass2.EMPTY_TYPE_ARGS);
      scopeCode0.createMacroCode();
      String string0 = "*%&L53 q/a7Wt1bZH";
      scopeCode0.define("*%&L53 q/a7Wt1bZH", typedKlass1);
      scopeCode0.setBodyCode((Code) null);
      scopeCode0.resolve("", true);
      methodCode0.createBlockCode(0);
      methodCode0.createLineCode(":");
      scopeCode0.resolve("", false);
      // Undeclared exception!
      try { 
        methodCode0.createBlockCode((-2336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2336
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      // Undeclared exception!
      try { 
        methodCode0.createBlockCode((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      Class<Object> class0 = Object.class;
      templateClassCode0.setTemplateName("context");
      methodCode0.bodyCode = (Code) templateClassCode0;
      methodCode0.createMacroCode();
      // Undeclared exception!
      try { 
        templateClassCode0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = TypedKlass.Object;
      methodCode0.define("context", typedKlass0);
      ScopeCode scopeCode0 = new ScopeCode(methodCode0, "yO5ntV)?DxQ");
      ScopeCode scopeCode1 = methodCode0.push();
      TypedKlass typedKlass1 = scopeCode1.resolve("context", true);
      assertFalse(typedKlass1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScopeCode scopeCode0 = new ScopeCode((ScopeCode) null, "");
      TypedKlass typedKlass0 = TypedKlass.VOID;
      scopeCode0.define("", typedKlass0);
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      MacroCode macroCode0 = new MacroCode(methodCode0);
      MethodCode methodCode1 = macroCode0.getMethodCode();
      methodCode0.createLineCode("  ");
      MethodCode methodCode2 = new MethodCode(methodCode1, (String) null, true);
      TypedKlass typedKlass0 = TypedKlass.Object;
      methodCode0.define("context", typedKlass0);
      ScopeCode scopeCode0 = new ScopeCode(methodCode2, "context");
      ScopeCode scopeCode1 = scopeCode0.push();
      TypedKlass typedKlass1 = scopeCode1.resolve((String) null, true);
      assertNull(typedKlass1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      LineCode lineCode0 = methodCode0.createLineCode("context");
      assertEquals("    context\n", lineCode0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TagCode tagCode0 = new TagCode(methodCode0, "context");
      MethodCode methodCode1 = tagCode0.getMethodCode();
      ScopeCode scopeCode0 = new ScopeCode(methodCode1, "context");
      methodCode0.push();
      MethodCode methodCode2 = new MethodCode(scopeCode0, "&tY", true);
      Class<Object> class0 = Object.class;
      TypedKlass typedKlass0 = TypedKlass.JetWriter;
      methodCode2.define("context", typedKlass0, true);
      TypedKlass typedKlass1 = TypedKlass.create(class0);
      methodCode0.createBlockCode(691);
      methodCode2.define("context", typedKlass1, true);
      // Undeclared exception!
      try { 
        scopeCode0.createBlockCode((-2476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2476
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      methodCode0.setBodyCode(templateClassCode0);
      methodCode0.createLineCode("context");
      MacroCode macroCode0 = methodCode0.createMacroCode();
      assertNotNull(macroCode0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TagCode tagCode0 = methodCode0.createTagCode();
      assertNotNull(tagCode0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = methodCode0.resolve("context", false);
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      TypedKlass typedKlass0 = TypedKlass.JetContext;
      boolean boolean0 = methodCode0.define("", typedKlass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      TagCode tagCode0 = new TagCode((ScopeCode) null, (String) null);
      MethodCode methodCode0 = tagCode0.getMethodCode();
      ScopeCode scopeCode0 = new ScopeCode(methodCode0, "");
      MacroCode macroCode0 = new MacroCode(scopeCode0);
      MethodCode methodCode1 = macroCode0.getMethodCode();
      String string1 = "";
      methodCode1.createLineCode("");
      tagCode0.setLine(1024);
      SegmentListCode segmentListCode0 = new SegmentListCode(0);
      macroCode0.setDefineListCode(segmentListCode0);
      methodCode1.push();
      scopeCode0.createTagCode();
      segmentListCode0.toString();
      MethodCode methodCode2 = new MethodCode(methodCode1, "context", false);
      boolean boolean0 = false;
      methodCode2.resolve("context", false);
      methodCode2.setBodyCode(tagCode0);
      tagCode0.setTagId("context");
      scopeCode0.createTagCode();
      ScopeCode scopeCode1 = methodCode0.push();
      scopeCode1.define("Mo *nsY", (TypedKlass) null, false);
      scopeCode1.define("A/xv", (TypedKlass) null);
      // Undeclared exception!
      try { 
        methodCode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.code.ScopeCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TemplateClassCode templateClassCode0 = new TemplateClassCode();
      MethodCode methodCode0 = templateClassCode0.getMethodCode();
      // Undeclared exception!
      try { 
        methodCode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.code.ScopeCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MacroCode macroCode0 = new MacroCode((ScopeCode) null);
      int int0 = (-2117);
      macroCode0.setName("\n");
      // Undeclared exception!
      try { 
        macroCode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.code.ScopeCode", e);
      }
  }
}
