/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:20:31 GMT 2022
 */

package jetbrick.template.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import jetbrick.template.parser.VariableResolver;
import jetbrick.template.parser.support.TypedKlass;
import jetbrick.template.runtime.JetFunctions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VariableResolver_ESTest extends VariableResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<?> class0 = variableResolver0.resolveClass(".zgp");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addGlobalVariable("boolean", "get{}");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addGlobalVariable("isJetbrick.template.parser.VariableResolver", "get}.*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ClassNotFoundException: isJetbrick.template.parser.VariableResolver
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 6);
      Class<JetFunctions> class0 = JetFunctions.class;
      classArray0[0] = class0;
      Method method0 = variableResolver0.resolveStaticMethod(classArray0[0], (String) null, classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Method method0 = variableResolver0.resolveMethod(class0, "uuid", (Class<?>[]) null);
      assertFalse(method0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveFunction("uuid", (Class<?>[]) null);
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("boolean");
      assertTrue(typedKlass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("jetbrick.template.parser.VariableResolver");
      assertFalse(typedKlass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 5);
      Method method0 = variableResolver0.resolveStaticMethod(class0, "debug", classArray0);
      assertTrue(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<?> class0 = variableResolver0.resolveClass("jetbrick.template.JetConfig$CompileStrategy");
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<?> class0 = variableResolver0.resolveClass("jetbrick.template.utils.finder.PackagesFinder$1");
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<?> class0 = variableResolver0.resolveClass("boolean");
      assertEquals("boolean", class0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 1);
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveStaticMethod((Class<?>) null, "ctxpath", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveStaticField((Class<?>) null, "geSl.(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveProperty((Class<?>) null, ".zip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      // Undeclared exception!
      try { 
        variableResolver0.resolveProperty(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        variableResolver0.resolveMethod((Class<?>) null, "toString", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      // Undeclared exception!
      try { 
        variableResolver0.resolveMethod(class0, (String) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        variableResolver0.resolveConstructor((Class<?>) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addTagClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addTagClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addMethodClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addMethodClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addImportPackage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addImportClass("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class not found: }
         //
         verifyException("jetbrick.template.utils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addImportClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addFunctionClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addFunctionClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass((String) null);
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addTagClass("jetbrick.template.JetEngine");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      variableResolver0.addFunctionClass(class0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addFunctionClass("long");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addMethodClass("jetbrick.template.parser.VariableResolver");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportPackage("KYb/w%*1\"P|8g{=A)8");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportPackage("java.util");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 2);
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Method method0 = variableResolver0.resolveStaticMethod(class0, "read", classArray0);
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 0);
      Class<JetFunctions> class0 = JetFunctions.class;
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveStaticMethod(class0, "/S9{#B^05Z1]aU~#H{B", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Method method0 = variableResolver0.resolveStaticMethod(class0, "notifyAll", (Class<?>[]) null);
      assertEquals("notifyAll", method0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Field field0 = variableResolver0.resolveStaticField(class0, "o.~n]lmHvT]_r$Og");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveTagMethod("3$S {hjRW_2", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 3);
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Constructor<?> constructor0 = variableResolver0.resolveConstructor(class0, classArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Constructor<?> constructor0 = variableResolver0.resolveConstructor(class0, (Class<?>[]) null);
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 6);
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveFunction_advanced("read", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 2);
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveFunction_advanced("read", classArray0);
      assertFalse(method0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveFunction_advanced("N3Jd[jq]1[yv(", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveFunction_advanced("ctxpath", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 0);
      Method method0 = variableResolver0.resolveFunction("3MF+;ZH1E", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 8);
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveFunction("debug", classArray0);
      assertTrue(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 0);
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Method method0 = variableResolver0.resolveToolMethod_advanced(class0, "Ah", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<JetFunctions>[] classArray0 = (Class<JetFunctions>[]) Array.newInstance(Class.class, 6);
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      variableResolver0.addMethodClass(class0);
      Method method0 = variableResolver0.resolveToolMethod(class0, "read", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Method method0 = variableResolver0.resolveToolMethod(class0, "getPackageName must be not null.", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      variableResolver0.addMethodClass(class0);
      // Undeclared exception!
      try { 
        variableResolver0.resolveToolMethod(class0, "read", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<JetFunctions> class0 = JetFunctions.class;
      VariableResolver variableResolver0 = new VariableResolver();
      Method method0 = variableResolver0.resolveMethod(class0, "jx", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      Member member0 = variableResolver0.resolveProperty(class0, "/S9{#B^05Z1]aU~#H{B");
      assertNull(member0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<JetFunctions> class0 = JetFunctions.class;
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.resolveProperty(class0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveVariable("is[");
      assertFalse(typedKlass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addGlobalVariable("boolean", "boolean");
      TypedKlass typedKlass0 = variableResolver0.resolveVariable("boolean");
      assertTrue(typedKlass0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("java.util");
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.resolveTypedKlass("ClassNotFoundException: ");
      TypedKlass typedKlass0 = variableResolver0.resolveTypedKlass("ClassNotFoundException: ");
      assertNull(typedKlass0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      Class<JetFunctions> class0 = JetFunctions.class;
      variableResolver0.addTagClass(class0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addTagClass("t}[}T&}r]`xR&R");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot resolve class: t}[}T&}r]`xR&R
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addFunctionClass("HlmW=-lwC~d3u");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot resolve class: HlmW=-lwC~d3u
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      // Undeclared exception!
      try { 
        variableResolver0.addMethodClass("/S9{#B^05Z1]aU~#H{B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot resolve class: /S9{#B^05Z1]aU~#H{B
         //
         verifyException("jetbrick.template.parser.VariableResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addGlobalVariable("boolean", "boolean");
      variableResolver0.addGlobalVariable("boolean", "boolean");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportClass("jetbrick.template.resource.SourceCodeResource");
      variableResolver0.addImportClass("jetbrick.template.resource.SourceCodeResource");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportPackage("java.util.*");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportPackage("java.util.**");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VariableResolver variableResolver0 = new VariableResolver();
      variableResolver0.addImportPackage("Cannot resolve class: .**");
  }
}
