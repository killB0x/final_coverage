/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:15:03 GMT 2022
 */

package jetbrick.template.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import jetbrick.template.JetContext;
import jetbrick.template.JetEngine;
import jetbrick.template.JetTemplate;
import jetbrick.template.runtime.JetPageContext;
import jetbrick.template.runtime.JetTagContext;
import jetbrick.template.runtime.JetTags;
import jetbrick.template.runtime.JetWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JetTags_ESTest extends JetTags_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      JetPageContext jetPageContext0 = mock(JetPageContext.class, new ViolatedAssumptionAnswer());
      doReturn("v'hWIy:").when(jetPageContext0).getAbsolutionName(anyString());
      JetEngine jetEngine0 = mock(JetEngine.class, new ViolatedAssumptionAnswer());
      doReturn((JetTemplate) null).when(jetEngine0).getTemplate(anyString());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn("v'hWIy:").when(jetTagContext0).getBodyContent();
      doReturn(jetContext0, jetContext0).when(jetTagContext0).getContext();
      doReturn(jetEngine0).when(jetTagContext0).getEngine();
      doReturn(jetPageContext0).when(jetTagContext0).getPageContext();
      doReturn((JetWriter) null).when(jetTagContext0).getWriter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        JetTags.layout(jetTagContext0, "C:U|6", (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetTags.session_cache((JetTagContext) null, "ZP", 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jetContext0).get(anyString());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn(jetContext0).when(jetTagContext0).getContext();
      // Undeclared exception!
      try { 
        JetTags.session_cache(jetTagContext0, "78]Z`?w)Gak?^", 20L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/servlet/http/HttpSession
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetTags.block((JetTagContext) null, "Y|tZYe&):d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetTags.application_cache((JetTagContext) null, "ZP", 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jetContext0).get(anyString());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn(jetContext0).when(jetTagContext0).getContext();
      // Undeclared exception!
      try { 
        JetTags.application_cache(jetTagContext0, "E{%`-8bqi-1", 1L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javax/servlet/ServletContext
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetTags.layout((JetTagContext) null, "RZnk", (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jetContext0).get(anyString());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn(jetContext0).when(jetTagContext0).getContext();
      JetTags.default_block(jetTagContext0, "d");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(jetContext0).get(anyString());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn(jetContext0).when(jetTagContext0).getContext();
      doReturn((JetWriter) null).when(jetTagContext0).getWriter();
      // Undeclared exception!
      try { 
        JetTags.default_block(jetTagContext0, "d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("o=", "o=");
      // Undeclared exception!
      try { 
        JetTags.layout((JetTagContext) null, "o=", (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetTags.layout((JetTagContext) null, "1v'?^N!}UaW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetTags", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JetContext jetContext0 = mock(JetContext.class, new ViolatedAssumptionAnswer());
      JetTagContext jetTagContext0 = mock(JetTagContext.class, new ViolatedAssumptionAnswer());
      doReturn("oBpDcIoo%'n").when(jetTagContext0).getBodyContent();
      doReturn(jetContext0).when(jetTagContext0).getContext();
      JetTags.block(jetTagContext0, "oBpDcIoo%'n");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JetTags jetTags0 = new JetTags();
  }
}
