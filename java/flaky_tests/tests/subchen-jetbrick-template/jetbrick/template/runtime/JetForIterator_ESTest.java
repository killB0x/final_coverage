/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:49:04 GMT 2022
 */

package jetbrick.template.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.LinkOption;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.function.Consumer;
import jetbrick.template.runtime.JetForIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JetForIterator_ESTest extends JetForIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JetForIterator<StringTokenizer> jetForIterator0 = new JetForIterator<StringTokenizer>((Object) null);
      assertTrue(jetForIterator0.isEven());
      
      jetForIterator0.index = (-1);
      boolean boolean0 = jetForIterator0.isEven();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      assertFalse(jetForIterator0.isOdd());
      
      jetForIterator0.index = (-1653);
      boolean boolean0 = jetForIterator0.isOdd();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      jetForIterator0.hasNext();
      assertTrue(jetForIterator0.empty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JetForIterator<StringTokenizer> jetForIterator0 = new JetForIterator<StringTokenizer>((Object) null);
      JetForIterator<Object> jetForIterator1 = new JetForIterator<Object>(jetForIterator0);
      int int0 = jetForIterator1.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jetForIterator0.forEachRemaining(consumer0);
      int int0 = jetForIterator0.getIndex();
      assertTrue(jetForIterator0.isOdd());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      jetForIterator0.index = (-2963);
      int int0 = jetForIterator0.getIndex();
      assertEquals((-2963), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<StringTokenizer, StringTokenizer> hashMap0 = new HashMap<StringTokenizer, StringTokenizer>();
      JetForIterator<Class<StringTokenizer>> jetForIterator0 = new JetForIterator<Class<StringTokenizer>>(hashMap0);
      // Undeclared exception!
      try { 
        jetForIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      // Undeclared exception!
      try { 
        jetForIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.EmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<StringTokenizer, StringTokenizer> hashMap0 = new HashMap<StringTokenizer, StringTokenizer>();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(hashMap0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("7e[H-U%;2/>SL");
      hashMap0.put(stringTokenizer0, stringTokenizer0);
      // Undeclared exception!
      try { 
        jetForIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(";_K`", (String) null);
      JetForIterator<Object> jetForIterator0 = null;
      try {
        jetForIterator0 = new JetForIterator<Object>(stringTokenizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("L7eIhMG=W", "!3>]CS", false);
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(stringTokenizer0);
      boolean boolean0 = jetForIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JetForIterator<HashMap<StringTokenizer, Object>> jetForIterator0 = new JetForIterator<HashMap<StringTokenizer, Object>>((Object) null);
      boolean boolean0 = jetForIterator0.isEven();
      assertEquals(0, jetForIterator0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      jetForIterator0.next();
      boolean boolean0 = jetForIterator0.isEven();
      assertTrue(jetForIterator0.isFirst());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      JetForIterator<Class<StringTokenizer>> jetForIterator1 = new JetForIterator<Class<StringTokenizer>>(jetForIterator0);
      boolean boolean0 = jetForIterator0.isOdd();
      assertEquals(1, jetForIterator0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      boolean boolean0 = jetForIterator0.isOdd();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      boolean boolean0 = jetForIterator0.isLast();
      assertTrue(jetForIterator0.empty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      boolean boolean0 = jetForIterator0.isLast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<StringTokenizer> jetForIterator0 = new JetForIterator<StringTokenizer>(object0);
      boolean boolean0 = jetForIterator0.isFirst();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      boolean boolean0 = jetForIterator0.empty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<StringTokenizer, StringTokenizer> hashMap0 = new HashMap<StringTokenizer, StringTokenizer>();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(hashMap0);
      boolean boolean0 = jetForIterator0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>((Object) null);
      int int0 = jetForIterator0.getIndex();
      assertEquals(0, int0);
      assertEquals(0, jetForIterator0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      int int0 = jetForIterator0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<Object> jetForIterator0 = new JetForIterator<Object>(object0);
      JetForIterator<HashMap<Object, Object>> jetForIterator1 = new JetForIterator<HashMap<Object, Object>>(jetForIterator0);
      // Undeclared exception!
      try { 
        jetForIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.runtime.JetForIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      JetForIterator<StringTokenizer> jetForIterator0 = new JetForIterator<StringTokenizer>(object0);
      JetForIterator<HashMap<LinkOption, Object>> jetForIterator1 = new JetForIterator<HashMap<LinkOption, Object>>(jetForIterator0);
      boolean boolean0 = jetForIterator0.isFirst();
      assertFalse(jetForIterator0.isEven());
      assertTrue(boolean0);
  }
}
