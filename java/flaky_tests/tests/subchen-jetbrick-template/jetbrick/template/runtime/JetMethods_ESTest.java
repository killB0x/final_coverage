/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:28:59 GMT 2022
 */

package jetbrick.template.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import jetbrick.template.runtime.JetMethods;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JetMethods_ESTest extends JetMethods_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      Character character0 = JetMethods.asChar(object0);
      assertEquals('j', (char)character0);
      
      Character character1 = Character.valueOf('(');
      Object object1 = JetMethods.asDefault(character1, character0);
      assertEquals('(', object1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.asDate((String) null, "M /|7io");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'i'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JetMethods.unescapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = JetMethods.unescapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl((String) null, "+>t/QSf");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl("", "y");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl("'6xX<<eX5vJ}");
      assertEquals("'6xX<<eX5vJ}", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = JetMethods.unescapeJavaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JetMethods.unescapeJavaScript("o]M`Pf>C");
      assertEquals("o]M`Pf>C", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JetMethods.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = JetMethods.unescapeJava("JUqfS-");
      assertEquals("JUqfS-", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JetMethods.toUnderlineName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = JetMethods.toUnderlineName("true");
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JetMethods.toCapitalizeCamelCase("/<dw =fn+d7PIw=Zf");
      assertEquals("/<dw =fn+d7piw=zf", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = JetMethods.toCapitalizeCamelCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JetMethods.toCamelCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JetMethods.toCamelCase("[kOWW)dMoK");
      assertEquals("[koww)dmok", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      int int0 = JetMethods.sum(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-584);
      int int0 = JetMethods.sum(intArray0);
      assertEquals((-584), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JetMethods.repeat((String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JetMethods.repeat("u@0", (-2068038041));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '1';
      int int0 = JetMethods.min(intArray0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = (-1355);
      int int0 = JetMethods.min(intArray0);
      assertEquals((-1355), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '1';
      int int0 = JetMethods.max(intArray0);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4509);
      int int0 = JetMethods.max(intArray0);
      assertEquals((-4509), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JetMethods.format((short) (-2927), "on");
      assertEquals("-on2927", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String string0 = JetMethods.format((Date) mockDate0, "X");
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(408, (short)491, (short) (-103));
      String string0 = JetMethods.format((Date) mockDate0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JetMethods.format((Number) null, "+^''@TfhyRjID~Gc");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JetMethods.format((Number) 1306, "");
      assertEquals("1,306", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JetMethods.format((Number) (-57.2F));
      assertEquals("-57.20", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JetMethods.format(0L, "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JetMethods.format(0, "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JetMethods.format((-3150.7F), "/<dw =fn+d7PIw=Zf");
      assertEquals("-/<dw =fn+d7PIw=Zf3151", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JetMethods.format((double) 66L, "yes");
      assertEquals("yes66", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JetMethods.escapeXml("yes");
      assertEquals("yes", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JetMethods.escapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JetMethods.escapeUrl((String) null, "L\"=gyWuSS]|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JetMethods.escapeUrl("java.lang.character@0000000003", "java.lang.character@0000000003");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JetMethods.escapeUrl("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JetMethods.escapeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JetMethods.escapeUrl("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JetMethods.escapeJavaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JetMethods.escapeJavaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JetMethods.escapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JetMethods.escapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'r';
      int int0 = JetMethods.avg(intArray0);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1741);
      int int0 = JetMethods.avg(intArray0);
      assertEquals((-217), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = JetMethods.asShort(long0);
      assertEquals((short)1, (short)short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long((-1055L));
      Short short0 = JetMethods.asShort(long0);
      assertEquals((short) (-1055), (short)short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(1863L);
      Long long1 = JetMethods.asLong(long0);
      assertEquals(1863L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1527L));
      Long long1 = JetMethods.asLong(long0);
      assertEquals((-1527L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      List<Boolean> list0 = JetMethods.asList(booleanArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[0];
      List<Short> list0 = JetMethods.asList(shortArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      List<Object> list0 = JetMethods.asList(objectArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[0];
      List<Long> list0 = JetMethods.asList(longArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[0];
      List<Float> list0 = JetMethods.asList(floatArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      List<Double> list0 = JetMethods.asList(doubleArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[0];
      List<Character> list0 = JetMethods.asList(charArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[5];
      List<Character> list0 = JetMethods.asList(charArray0);
      List<Character> list1 = JetMethods.asList((Collection<Character>) list0);
      assertEquals(5, list1.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = JetMethods.asInt(long0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long(3195L);
      Integer integer0 = JetMethods.asInt(long0);
      assertEquals(3195, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Float float0 = JetMethods.asFloat(long0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(1L);
      Float float0 = JetMethods.asFloat(long0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(2557L);
      Double double0 = JetMethods.asDouble(long0);
      assertEquals(2557.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long((-1869L));
      Double double0 = JetMethods.asDouble(long0);
      assertEquals((-1869.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JetMethods.asDefault((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Date date0 = JetMethods.asDate("yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Date date0 = JetMethods.asDate("", "");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Date date0 = JetMethods.asDate("1919-03-26 22:31:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long(0L);
      Byte byte0 = JetMethods.asByte(long0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long((-3238L));
      Byte byte0 = JetMethods.asByte(long0);
      assertEquals((byte)90, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = JetMethods.asBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((short) (-1400), "'J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"'J\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        JetMethods.format((Date) mockDate0, "}'_es]&o;8v:LI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((Number) 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format(0L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format(7, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((-4307.0F), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format(1.0, "EEE, dd MMM yy HH:mm:ss z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"EEE, dd MMM yy HH:mm:ss z\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((byte)38, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((byte)0, "java.lang.Character%400000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"java.lang.Character%400000000001\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JetMethods.asDefault((Object) null, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JetMethods.asString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      String string0 = JetMethods.asString(character0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      List<Double> list0 = JetMethods.asList((double[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      List<Double> list0 = JetMethods.asList(doubleArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      List<Float> list0 = JetMethods.asList((float[]) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[7];
      List<Float> list0 = JetMethods.asList(floatArray0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      List<Long> list0 = JetMethods.asList((long[]) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[1];
      List<Long> list0 = JetMethods.asList(longArray0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[4];
      List<Integer> list0 = JetMethods.asList(intArray0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      List<Integer> list0 = JetMethods.asList((int[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      List<Integer> list0 = JetMethods.asList(intArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      List<Short> list0 = JetMethods.asList((short[]) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[1];
      List<Short> list0 = JetMethods.asList(shortArray0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      List<Byte> list0 = JetMethods.asList(byteArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      List<Byte> list0 = JetMethods.asList((byte[]) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      List<Byte> list0 = JetMethods.asList(byteArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      List<Character> list0 = JetMethods.asList((char[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      List<Boolean> list0 = JetMethods.asList((boolean[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      List<Boolean> list0 = JetMethods.asList(booleanArray0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      List<Object> list0 = JetMethods.asList((Object[]) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      List<Object> list0 = JetMethods.asList(objectArray0);
      assertEquals(12, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      List<Character> list0 = JetMethods.asList((Collection<Character>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      List<Object> list0 = JetMethods.asList((Collection<Object>) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedHashSet<LinkedList<Character>> linkedHashSet0 = new LinkedHashSet<LinkedList<Character>>();
      List<LinkedList<Character>> list0 = JetMethods.asList((Collection<LinkedList<Character>>) linkedHashSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.asDouble("java.lang.long@0000000002");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = JetMethods.asDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(0L);
      Double double0 = JetMethods.asDouble(long0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long((-2450L));
      Float float0 = JetMethods.asFloat(long0);
      assertEquals((-2450.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = JetMethods.asFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      Character character0 = JetMethods.asChar(object0);
      // Undeclared exception!
      try { 
        JetMethods.asFloat(character0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JetMethods.asLong(object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = JetMethods.asLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = JetMethods.asLong(long0);
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = JetMethods.asInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long((-1869L));
      Integer integer0 = JetMethods.asInt(long0);
      assertEquals((-1869), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Character character0 = Character.valueOf('T');
      // Undeclared exception!
      try { 
        JetMethods.asShort(character0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Character@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Short short0 = JetMethods.asShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(0L);
      Short short0 = JetMethods.asShort(long0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JetMethods.asByte(object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Byte byte0 = JetMethods.asByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long long0 = new Long((-2175L));
      Byte byte0 = JetMethods.asByte(long0);
      assertEquals((byte) (-127), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      Character character0 = JetMethods.asChar(object0);
      // Undeclared exception!
      try { 
        JetMethods.asInt(character0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Character@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Character character0 = JetMethods.asChar((Object) null);
      assertEquals('\u0000', (char)character0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      Character character1 = JetMethods.asChar(character0);
      assertEquals('9', (char)character1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = JetMethods.asBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = JetMethods.asBoolean(object0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = JetMethods.asBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = JetMethods.min((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JetMethods.unescapeXml("^LVVz-U");
      assertEquals("^LVVz-U", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = JetMethods.sum((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = Double.valueOf((-1294.97152194159));
      // Undeclared exception!
      try { 
        JetMethods.format((Number) double0, "java.time.chrono.japanesedate@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"java.time.chrono.japanesedate@0000000001\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JetMethods.escapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((short)19, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((long) (byte)98, "java.lang.Character%400000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"java.lang.Character%400000000002\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockDate mockDate0 = new MockDate(18, 18, 18, (-2669), (-2669));
      String string0 = JetMethods.format((Date) mockDate0);
      assertEquals("1919-03-26 22:31:00", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((-320.1894), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((-1768), "EEE, dd MMM yyyy HH:mm:ss z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"EEE, dd MMM yyyy HH:mm:ss z\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JetMethods.toUnderlineName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JetMethods.escapeJavaScript("java.lang.character@0000000002");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JetMethods.toCapitalizeCamelCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JetMethods jetMethods0 = new JetMethods();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JetMethods.escapeJava("yyyy-MM-dd'T'HH:mm:ss:SSSZZ");
      assertEquals("yyyy-MM-dd\\'T\\'HH:mm:ss:SSSZZ", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((Date) null, "yyyy-MM-dd'T'HH:mm:ss:SSSZZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JetMethods.repeat("", 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JetMethods.toCamelCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JetMethods.unescapeJavaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = JetMethods.avg(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Character character0 = Character.valueOf('H');
      String string0 = JetMethods.asJSON(character0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.asDate((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JetMethods.format((Number) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.format((-1.0F), "JU_'v}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"JU_'v}\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        JetMethods.escapeUrl("l0$t", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JetMethods.format((byte)71, "\\");
      assertEquals("\\71", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Date date0 = JetMethods.asDate("yyyy-MM-dd'T'HH:mm:ss:SSSZZ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl("java.lang.long@0000000002", "java.lang.long@0000000002");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = JetMethods.unescapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = JetMethods.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JetMethods.unescapeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JetMethods.escapeUrl("java.lang.Character@0000000002");
      assertEquals("java.lang.Character%400000000002", string0);
  }
}
