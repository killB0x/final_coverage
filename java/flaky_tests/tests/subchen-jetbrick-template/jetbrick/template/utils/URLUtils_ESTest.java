/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:07:10 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.net.URLStreamHandler;
import jetbrick.template.utils.URLUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URLUtils_ESTest extends URLUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zip", "zip", 2530, "!/", uRLStreamHandler0);
      File file0 = URLUtils.toFileObject(uRL0);
      assertEquals("!", file0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("vfs:");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URL uRL0 = URLUtils.fromFile("vfs:");
      File file0 = URLUtils.toFileObject(uRL0);
      assertEquals("/home/user/vfs:", file0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = URLUtils.fromFile(".V%:");
      File file0 = URLUtils.toFileObject(uRL0);
      assertEquals(".V%:", file0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "file:", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        URLUtils.toFilePath(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%xd", "%xd");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        URLUtils.toFilePath(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \"xd\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL((URL) null, "ykm62:kt(s}!", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        URLUtils.toFileObject(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "%t0.EA,C;d _A");
      // Undeclared exception!
      try { 
        URLUtils.toFileObject(uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \"t0\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.fromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLUtils.fromFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.URLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("vfs", "!/", 4310, "!/", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("vfs", "MQihmfN|", 4310, "vfs", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("vfs", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zip", "X<#X8M#K", 0, "file:!/", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zip", "zip", 0, "zip", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("zip", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("jar", "vfs:", 1, "zip", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("zip", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 1, "jar");
      File file0 = URLUtils.toFileObject(uRL0);
      URL uRL1 = URLUtils.fromFile(file0);
      String string0 = URLUtils.toFilePath(uRL1);
      assertEquals("/home/user/jar", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("vfs", "y!/", 4310, "y!/", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 2663, "", uRLStreamHandler0);
      String string0 = URLUtils.toFilePath(uRL0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zip", "X<#X8M#K", 0, "file:!/", uRLStreamHandler0);
      File file0 = URLUtils.toFileObject(uRL0);
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = URLUtils.toFilePath((URL) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = URLUtils.toFileObject((URL) null);
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URLUtils uRLUtils0 = new URLUtils();
  }
}
