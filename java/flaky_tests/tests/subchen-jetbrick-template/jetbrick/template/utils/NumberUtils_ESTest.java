/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:57:26 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jetbrick.template.utils.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = NumberUtils.sum(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = Integer.MIN_VALUE;
      int int0 = NumberUtils.sum(intArray0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-321);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-321), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1841;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1841, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = Integer.MIN_VALUE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 806;
      int int0 = NumberUtils.avg(intArray0);
      assertEquals(134, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = Integer.MIN_VALUE;
      int int0 = NumberUtils.avg(intArray0);
      assertEquals((-357913941), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.format((Number) 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.format((Number) 0, "7Hp=r^8Sy)8?[@'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"7Hp=r^8Sy)8?[@'\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.sum(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = Integer.valueOf(Integer.MIN_VALUE);
      String string0 = NumberUtils.format((Number) integer0, "###,##0.00");
      assertEquals("-2,147,483,648.00", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = NumberUtils.format((Number) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = NumberUtils.min((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = NumberUtils.max((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = NumberUtils.avg(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = NumberUtils.avg((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = NumberUtils.sum(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = NumberUtils.sum((int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = NumberUtils.format((Number) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = Integer.valueOf(Integer.MIN_VALUE);
      String string0 = NumberUtils.format((Number) integer0);
      assertNotNull(string0);
      assertEquals("-2,147,483,648.00", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }
}
