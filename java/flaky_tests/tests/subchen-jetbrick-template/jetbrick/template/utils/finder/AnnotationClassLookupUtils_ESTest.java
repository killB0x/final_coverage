/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:33:35 GMT 2022
 */

package jetbrick.template.utils.finder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import jetbrick.template.utils.finder.AnnotationClassLookupUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnnotationClassLookupUtils_ESTest extends AnnotationClassLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Set<Class<?>> set0 = AnnotationClassLookupUtils.getClasses(classArray0, false);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        AnnotationClassLookupUtils.getClasses((List<String>) linkedList0, true, (Class<? extends Annotation>[]) classArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.finder.AnnotationClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9;OaN?6wn2Cr;nlp";
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 3);
      Class<Annotation> class0 = Annotation.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = class0;
      Set<Class<?>> set0 = AnnotationClassLookupUtils.getClasses(stringArray0, false, classArray0, false);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        AnnotationClassLookupUtils.getClasses((List<String>) linkedList0, true, (Class<? extends Annotation>[]) classArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PackageName must be not null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        AnnotationClassLookupUtils.getClasses(stringArray0, false, classArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PackageName must be not null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        AnnotationClassLookupUtils.getClasses(stringArray0, false, classArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.finder.AnnotationClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/share/java/java-atk-wrapper.jar");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "jetbrick.template.utils.finder.AnnotationClassLookupUtils$1");
      Set<Class<?>> set0 = AnnotationClassLookupUtils.getClasses(classArray0, true);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        AnnotationClassLookupUtils.getClasses(classArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.finder.AnnotationClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Set<Class<?>> set0 = AnnotationClassLookupUtils.getClasses((List<String>) linkedList0, true, (Class<? extends Annotation>[]) classArray0, true);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AnnotationClassLookupUtils annotationClassLookupUtils0 = new AnnotationClassLookupUtils();
  }
}
