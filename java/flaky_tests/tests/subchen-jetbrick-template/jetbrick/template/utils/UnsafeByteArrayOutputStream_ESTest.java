/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:09:15 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import jetbrick.template.utils.UnsafeByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnsafeByteArrayOutputStream_ESTest extends UnsafeByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      unsafeByteArrayOutputStream0.count = (int) (byte)29;
      unsafeByteArrayOutputStream0.write(byteArray0);
      assertEquals(34, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      unsafeByteArrayOutputStream0.write(0);
      unsafeByteArrayOutputStream0.write(0);
      assertEquals(2, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(1);
      unsafeByteArrayOutputStream0.write(1);
      assertEquals(1, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      unsafeByteArrayOutputStream0.write(0);
      unsafeByteArrayOutputStream0.toString();
      assertEquals(1, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      unsafeByteArrayOutputStream0.write(byteArray0);
      unsafeByteArrayOutputStream0.toByteArray();
      assertEquals(8, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(1744);
      unsafeByteArrayOutputStream0.write(1744);
      int int0 = unsafeByteArrayOutputStream0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = (int) (byte) (-32);
      int int0 = unsafeByteArrayOutputStream0.size();
      assertEquals((-32), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      unsafeByteArrayOutputStream0.count = (int) (byte)29;
      unsafeByteArrayOutputStream0.buffer = byteArray0;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(unsafeByteArrayOutputStream0);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.writeTo(filterOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        unsafeByteArrayOutputStream0.writeTo(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write((byte[]) null, 812, 812);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.buffer = null;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write((-885));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = (-312);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write((-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -312 out of bounds for length 32
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      unsafeByteArrayOutputStream0.count = 0;
      unsafeByteArrayOutputStream0.count = (-2608);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toString("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = (-23);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.buffer = null;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.buffer = null;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toByteBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = 4878;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toByteBuffer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.buffer = null;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = (-2670);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.toByteArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2670
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream((byte)0);
      unsafeByteArrayOutputStream0.write(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write(byteArray0, 0, (-891));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.count = 2326;
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.writeTo(unsafeByteArrayOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream((byte)6);
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write(byteArray0, (int) (byte)6, (int) (byte)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      // Undeclared exception!
      try { 
        unsafeByteArrayOutputStream0.write(byteArray0, (int) (byte) (-22), (int) (byte) (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      unsafeByteArrayOutputStream0.write(0);
      unsafeByteArrayOutputStream0.count = 0;
      byte[] byteArray0 = new byte[1];
      unsafeByteArrayOutputStream0.write(byteArray0);
      assertEquals(1, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = null;
      try {
        unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream((-1315));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1315
         //
         verifyException("jetbrick.template.utils.UnsafeByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      ByteBuffer byteBuffer0 = unsafeByteArrayOutputStream0.toByteBuffer();
      assertEquals(0, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      unsafeByteArrayOutputStream0.reset();
      assertEquals(0, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.close();
      assertEquals(0, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      String string0 = unsafeByteArrayOutputStream0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      unsafeByteArrayOutputStream0.writeTo(unsafeByteArrayOutputStream0);
      assertEquals(0, unsafeByteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      byte[] byteArray0 = unsafeByteArrayOutputStream0.toByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream(0);
      try { 
        unsafeByteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnsafeByteArrayOutputStream unsafeByteArrayOutputStream0 = new UnsafeByteArrayOutputStream();
      int int0 = unsafeByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }
}
