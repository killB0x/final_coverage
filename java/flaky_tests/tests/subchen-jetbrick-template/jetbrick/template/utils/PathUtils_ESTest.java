/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:46:01 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import jetbrick.template.utils.PathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathUtils_ESTest extends PathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = PathUtils.getAbsolutionName("/", "/@");
      assertEquals("/@", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = PathUtils.combinePathName("/z/6Q%fy", "Hg(5/", true);
      assertEquals("z/6Q%fyHg(5/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = PathUtils.getStandardizedTemplateRoot("J+", true);
      assertEquals("/J+", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = PathUtils.getStandardizedTemplateRoot("!Z/aL=385h/foJ", false);
      assertEquals("/!Z/aL=385h/foJ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = PathUtils.getAbsolutionName("/home/user", "..");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("W^/home/user");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "buD%D*");
      MockFile mockFile0 = new MockFile("W^", "/home/user");
      File file0 = PathUtils.getCanonicalFile(mockFile0);
      assertEquals("/home/user/W^/home", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("/..", (String) null);
      File file1 = PathUtils.getCanonicalFile(file0);
      assertEquals(0L, file1.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = PathUtils.getCanonicalFile(mockFile0);
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = PathUtils.getAbsolutionName("/", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = PathUtils.combinePathName("", "", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        PathUtils.getCurrentPath();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("jetbrick.template.utils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("jetbrick.template.utils.ExceptionUtils", "jetbrick.template.utils.ExceptionUtils");
      // Undeclared exception!
      try { 
        PathUtils.getCanonicalPath(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("jetbrick.template.utils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getCanonicalPath((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        PathUtils.getCanonicalFile(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("jetbrick.template.utils.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getCanonicalFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAbsolutionName((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.combinePathName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getStandardizedName("..");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Resource path is not under template root path: ..
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = PathUtils.getStandardizedName("/z/6Q%fy");
      assertEquals("/z/6Q%fy", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAbsolutionName("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseFile must be start with '/'.
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = PathUtils.combinePathName("", (String) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = PathUtils.combinePathName("3", "/3", true);
      assertEquals("3/3", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = PathUtils.combinePathName("/", "//Q", true);
      assertEquals("/Q", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = PathUtils.getStandardizedTemplateRoot("q:Zqk02a[>;m@>IM/", false);
      assertEquals("/q:Zqk02a[>;m@>IM", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = PathUtils.getStandardizedTemplateRoot("/", true);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = PathUtils.getStandardizedTemplateRoot("", false);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getStandardizedTemplateRoot((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path is null.
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = PathUtils.getStandardizedName(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getStandardizedName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource path is null or empty.
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getAbsolutionName("/3", "..");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Resource path is not under template root path: /..
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        PathUtils.getStandardizedName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource path is null or empty.
         //
         verifyException("jetbrick.template.utils.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = PathUtils.getCurrentPath();
      assertEquals("/home/user", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*Jjjfr-}0fL'hEQ4'-2");
      File file0 = PathUtils.getCanonicalFile(mockFile0);
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = MockFile.createTempFile("jetbrick.template.utils.PathUtils", "LgOc~X:tjetbrick.template.utils.PathUtils", (File) null);
      String string0 = PathUtils.getCanonicalPath(file0);
      assertEquals("/tmp/jetbrick.template.utils.PathUtils0LgOc~X:tjetbrick.template.utils.PathUtils", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PathUtils pathUtils0 = new PathUtils();
  }
}
