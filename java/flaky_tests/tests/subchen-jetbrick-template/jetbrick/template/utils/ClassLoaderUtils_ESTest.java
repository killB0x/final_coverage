/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:42:40 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jetbrick.template.utils.ClassLoaderUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassLoaderUtils_ESTest extends ClassLoaderUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        ClassLoaderUtils.loadClass("<Q|.af[][]");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class not found: <Q|.af[][]
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        ClassLoaderUtils.loadClass(".r<fw-'vQG");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class not found: .r<fw-'vQG
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
      Collection<URL> collection0 = ClassLoaderUtils.getClasspathURLs(classLoader0, "<Q|.af[]");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      uRLArray0[1] = uRLArray0[0];
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
      Class<?> class0 = ClassLoaderUtils.loadClass("int[]", (ClassLoader) uRLClassLoader0);
      assertEquals("class [I", class0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ClassLoaderUtils.getCanonicalClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassLoaderUtils.loadClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassLoaderUtils.getClasspathURLs((ClassLoader) null, "El4L(]!7pQXZ5ST}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassLoaderUtils.getClasspathURLs((ClassLoader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL[] uRLArray0 = new URL[0];
          URL[] uRLArray1 = new URL[2];
          URL uRL0 = MockURL.getFtpExample();
          uRLArray1[0] = uRL0;
          URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
          URL uRL1 = MockURL.URL(uRL0, "iVj:YH?Y?pR+zN}|]", uRLStreamHandler0);
          uRLArray1[1] = uRL1;
          URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0);
          URLClassLoader uRLClassLoader1 = URLClassLoader.newInstance(uRLArray1, (ClassLoader) uRLClassLoader0);
          // Undeclared exception!
          try { 
            ClassLoaderUtils.getClasspathURLs((ClassLoader) uRLClassLoader1);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ClassLoaderUtils.getCanonicalClassName("sun.misc.Launher$AppClasLoader[]");
      assertEquals("[Lsun.misc.Launher$AppClasLoader;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ClassLoaderUtils.getCanonicalClassName("long[]");
      assertEquals("[J", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ClassLoaderUtils.getCanonicalClassName("/K; v:");
      assertEquals("/K;v:", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL[] uRLArray0 = new URL[2];
          URL uRL0 = MockURL.getHttpExample();
          uRLArray0[0] = uRL0;
          uRLArray0[1] = uRLArray0[0];
          ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
          URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0, classLoader0);
          try { 
            ClassLoaderUtils.loadClass("Th.IN3X\"Fyk+qEk_{mY", (ClassLoader) uRLClassLoader0);
            fail("Expecting exception: ClassNotFoundException");
          
          } catch(ClassNotFoundException e) {
             //
             // Class not found: Th.IN3X\"Fyk+qEk_{mY
             //
             verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL[] uRLArray0 = new URL[2];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      uRLArray0[1] = uRLArray0[0];
      ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
      URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0, classLoader0);
      Class<?> class0 = ClassLoaderUtils.loadClass("short", (ClassLoader) uRLClassLoader0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        ClassLoaderUtils.loadClass("", (ClassLoader) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class not found: 
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<?> class0 = ClassLoaderUtils.loadClass("char[]");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassLoaderUtils.getCanonicalClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        ClassLoaderUtils.loadClass("sun.misc.Launcher$AppClassLoader", classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class not found: sun.misc.Launcher$AppClassLoader
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
      // Undeclared exception!
      try { 
        ClassLoaderUtils.loadClass((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualifiedClassName must not be null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
      // Undeclared exception!
      try { 
        ClassLoaderUtils.getClasspathURLs(classLoader0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PackageName must be not null.
         //
         verifyException("jetbrick.template.utils.ClassLoaderUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoaderUtils.getContextClassLoader();
      Collection<URL> collection0 = ClassLoaderUtils.getClasspathURLs(classLoader0, "");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL[] uRLArray0 = new URL[3];
          URL uRL0 = MockURL.getHttpExample();
          URL uRL1 = MockURL.URL(uRL0, "/jre/lib/");
          uRLArray0[0] = uRL1;
          uRLArray0[1] = uRL0;
          uRLArray0[2] = uRLArray0[1];
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          URLStreamHandlerFactory uRLStreamHandlerFactory0 = mock(URLStreamHandlerFactory.class, new ViolatedAssumptionAnswer());
          doReturn((URLStreamHandler) null).when(uRLStreamHandlerFactory0).createURLStreamHandler(anyString());
          URLClassLoader uRLClassLoader0 = new URLClassLoader(uRLArray0, classLoader0, uRLStreamHandlerFactory0);
          Collection<URL> collection0 = ClassLoaderUtils.getClasspathURLs((ClassLoader) uRLClassLoader0);
          assertTrue(collection0.contains(uRL0));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoaderUtils classLoaderUtils0 = new ClassLoaderUtils();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<?> class0 = ClassLoaderUtils.loadClass("short");
      assertFalse(class0.isSynthetic());
  }
}
