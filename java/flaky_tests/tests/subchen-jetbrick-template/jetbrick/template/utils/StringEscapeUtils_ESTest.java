/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 10:12:03 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jetbrick.template.utils.StringEscapeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringEscapeUtils_ESTest extends StringEscapeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&ltD;");
      assertEquals("&ltD;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&l[D");
      assertEquals("&l[D", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("`-{{bS&b?");
      assertEquals("`-{{bS&b?", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString("\f");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString(" oT[ sgS''Ko_M");
      assertEquals("\"oT[ sgS''Ko_\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJavaScript(" oT[ sgS''Ko_M");
      assertEquals(" oT[ sgS''Ko_M", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("WehR=N.G");
      assertEquals("WehR=N.G", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl("", "\" \"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJavaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJavaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl("fxS]}eb~CA7Q]%<b", "/`lVjA/UxUX");
      assertEquals("fxS]}eb~CA7Q]%<b", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJavaScript((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJavaScript("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeUrl(">", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeUrl("fxS]}eb~CA7Q]%<b", "UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \"<b\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.unescapeUrl("&q>v5%uot;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 0 in: \"uo\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringEscapeUtils.escapeUrl("3(qr rpg_WvW{A4", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl("<H", "&lt;H");
      assertEquals("<H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\\'");
      assertEquals("\\\\\\'", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("x=\"@0h(Zb@E_%%");
      assertEquals("x=\\\"@0h(Zb@E_%%", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("f]Wvp/$]:/+@");
      assertEquals("f]Wvp/$]:/+@", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString("bs!B>M0EM *\"r3H[OL_");
      assertEquals("\"s!B>M0EM *\\\"r3H[OL\"", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl((String) null, "*Tg,<F!7d:<Rk8:e");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl((String) null, "'D)z^mzR-Ta'_5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml(";v]b4.88J@&__6&");
      assertEquals(";v]b4.88J@&amp;__6&amp;", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("rH>uwX%83&tf,");
      assertEquals("rH&gt;uwX%83&amp;tf,", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("'/5x,0{BW");
      assertEquals("&apos;/5x,0{BW", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml(">");
      assertEquals("&gt;", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("(H\"b)h0=R>Nt");
      assertEquals("(H&quot;b)h0=R&gt;Nt", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("<aNRlkU5'");
      assertEquals("&lt;aNRlkU5&apos;", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("MEWWc0 -$<_$H ");
      assertEquals("MEWWc0 -$&lt;_$H ", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("}M`ww'\u0001Y7<Y[");
      assertEquals("}M`ww&apos;\u0001Y7&lt;Y[", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("&amp;");
      assertEquals("&amp;amp;", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("\"owe\"");
      assertEquals("&quot;owe&quot;", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml("utI1=Rp)");
      assertEquals("utI1=Rp)", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&quot;quot&quot;");
      assertEquals("\"quot\"", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("\"&quot;owe&quot\"");
      assertEquals("\"\"owe&quot\"", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&quo:;");
      assertEquals("&quo:;", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&qucot;");
      assertEquals("&qucot;", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&q>v5%uot;");
      assertEquals("&q>v5%uot;", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&qtx;");
      assertEquals("&qtx;", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&apos;;");
      assertEquals("';", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&aposwK;");
      assertEquals("&aposwK;", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&apo\"s&;");
      assertEquals("&apo\"s&;", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&ap&os;");
      assertEquals("&ap&os;", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&amp;");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("i.E{cFxV5mdRN&amp;]gd3&amp;");
      assertEquals("i.E{cFxV5mdRN&]gd3&", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("\"v]b4.88J@&amp;__6&amp\"");
      assertEquals("\"v]b4.88J@&__6&amp\"", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&amKDS");
      assertEquals("&amKDS", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&amp");
      assertEquals("&amp", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("];H+8k^I&gt;D8");
      assertEquals("];H+8k^I>D8", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&gt;");
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&gtA5;");
      assertEquals("&gtA5;", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&g(t;");
      assertEquals("&g(t;", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("\"WO#OF&amp;LO&gt;&lt\"");
      assertEquals("\"WO#OF&LO>&lt\"", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&lt;aNRlkU5&apos;");
      assertEquals("<aNRlkU5'", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("&lxtQbj;");
      assertEquals("&lxtQbj;", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("}M`ww&apos;\u0001Y7&lt;Y[");
      assertEquals("}M`ww'\u0001Y7<Y[", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("MEWWc0 -$&lt;_$H ");
      assertEquals("MEWWc0 -$<_$H ", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeXml((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\r");
      assertEquals("\\r", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\f");
      assertEquals("\\f", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\n");
      assertEquals("\\n", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\t");
      assertEquals("\\t", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("\b");
      assertEquals("\\b", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("\\'");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("\\");
      assertEquals("\\", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeJava((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString("\"&quot;owe&quot\"");
      assertEquals("\"&quot;owe&quot\"", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = StringEscapeUtils.asCanonicalJavaString((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJavaScript("\"v]b4.88J@&__6&amp\"");
      assertEquals("\\\"v]b4.88J@&__6&amp\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeUrl(";v]b4.88J@&amp;__6&amp;");
      assertNotNull(string0);
      assertEquals("%3Bv%5Db%7F4.88J%40%26amp%3B__6%26amp%3B", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = StringEscapeUtils.unescapeUrl("P");
      assertEquals("P", string0);
      assertNotNull(string0);
  }
}
