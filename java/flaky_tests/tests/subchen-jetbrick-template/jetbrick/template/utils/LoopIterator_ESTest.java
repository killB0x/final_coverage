/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:24:02 GMT 2022
 */

package jetbrick.template.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import jetbrick.template.utils.LoopIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoopIterator_ESTest extends LoopIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator((-781), 1);
      assertEquals(783, loopIterator0.getSize());
      assertTrue(loopIterator0.hasNext());
      assertNotNull(loopIterator0);
      
      Integer integer0 = loopIterator0.next();
      assertEquals(783, loopIterator0.getSize());
      assertTrue(loopIterator0.hasNext());
      assertNotNull(integer0);
      assertEquals((-781), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(1, 1, 0);
      assertTrue(loopIterator0.hasNext());
      assertNotNull(loopIterator0);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      loopIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(1, (-1), (-1));
      assertTrue(loopIterator0.hasNext());
      assertEquals(3, loopIterator0.getSize());
      assertNotNull(loopIterator0);
      
      Integer integer0 = loopIterator0.next();
      assertTrue(loopIterator0.hasNext());
      assertEquals(3, loopIterator0.getSize());
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(0, 0, 1);
      assertEquals(1, loopIterator0.getSize());
      assertTrue(loopIterator0.hasNext());
      assertNotNull(loopIterator0);
      
      Integer integer0 = loopIterator0.next();
      assertEquals(1, loopIterator0.getSize());
      assertFalse(loopIterator0.hasNext());
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = loopIterator0.hasNext();
      assertEquals(1, loopIterator0.getSize());
      assertFalse(loopIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(572, (-1), 572);
      assertFalse(loopIterator0.hasNext());
      assertEquals(0, loopIterator0.getSize());
      assertNotNull(loopIterator0);
      
      int int0 = loopIterator0.getSize();
      assertFalse(loopIterator0.hasNext());
      assertEquals(0, loopIterator0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(1, (-1183));
      assertFalse(loopIterator0.hasNext());
      assertEquals((-1183), loopIterator0.getSize());
      assertNotNull(loopIterator0);
      
      int int0 = loopIterator0.getSize();
      assertFalse(loopIterator0.hasNext());
      assertEquals((-1183), loopIterator0.getSize());
      assertEquals((-1183), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(2851, 1, 0);
      assertTrue(loopIterator0.hasNext());
      assertNotNull(loopIterator0);
      
      // Undeclared exception!
      try { 
        loopIterator0.getSize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jetbrick.template.utils.LoopIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator((-1), (-1));
      assertTrue(loopIterator0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopIterator0.forEachRemaining(consumer0);
      assertEquals(1, loopIterator0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LoopIterator loopIterator0 = new LoopIterator(1, (-1), (-1));
      assertTrue(loopIterator0.hasNext());
      
      loopIterator0.forEachRemaining(consumer0);
      assertEquals(3, loopIterator0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(0, (-907));
      // Undeclared exception!
      try { 
        loopIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.LoopIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator(1, (-1), (-1));
      boolean boolean0 = loopIterator0.hasNext();
      assertEquals(3, loopIterator0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator((-1), (-1));
      int int0 = loopIterator0.getSize();
      assertEquals(1, int0);
      assertTrue(loopIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LoopIterator loopIterator0 = new LoopIterator((-904), (-904));
      // Undeclared exception!
      try { 
        loopIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jetbrick.template.utils.LoopIterator", e);
      }
  }
}
