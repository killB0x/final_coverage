/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 11:10:26 GMT 2022
 */

package jetbrick.template;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import jetbrick.template.JetContext;
import jetbrick.template.JetGlobalVariables;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JetContext_ESTest extends JetContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JetContext jetContext0 = new JetContext(hashMap0);
      JetContext jetContext1 = new JetContext(jetContext0, hashMap0);
      jetContext1.getParent();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      // Undeclared exception!
      try { 
        jetContext0.putAll((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ((JetContext) object0).isSimpleModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JetContext jetContext0 = new JetContext(hashMap0);
      JetContext jetContext1 = new JetContext(jetContext0, hashMap0);
      jetContext1.putAsParents("", jetContext1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      jetContext0.putAsParents("pM", (Object) null);
      jetContext0.getContext();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      JetGlobalVariables jetGlobalVariables0 = mock(JetGlobalVariables.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jetGlobalVariables0).get(any(jetbrick.template.JetContext.class) , anyString());
      jetContext0.setGlobalVariables(jetGlobalVariables0);
      Object object0 = jetContext0.get("");
      assertEquals("jetbrick.template.JetContext", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      JetGlobalVariables jetGlobalVariables0 = mock(JetGlobalVariables.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jetGlobalVariables0).get(any(jetbrick.template.JetContext.class) , anyString());
      jetContext0.setGlobalVariables(jetGlobalVariables0);
      Object object0 = jetContext0.get((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      Map<String, Object> map0 = jetContext0.getContext();
      JetContext jetContext1 = new JetContext(jetContext0, map0);
      Object object0 = jetContext1.get("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      boolean boolean0 = jetContext0.isSimpleModel();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      Map<String, Object> map0 = jetContext0.getContext();
      JetContext jetContext1 = new JetContext(jetContext0, map0);
      boolean boolean0 = jetContext1.isSimpleModel();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      jetContext0.put("jetbrick.template.JetContext", "jetbrick.template.JetContext");
      Object object0 = jetContext0.get("jetbrick.template.JetContext");
      assertEquals("jetbrick.template.JetContext", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JetContext jetContext0 = new JetContext(hashMap0);
      Set<String> set0 = jetContext0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JetContext jetContext0 = new JetContext(hashMap0);
      JetContext jetContext1 = jetContext0.getParent();
      assertNull(jetContext1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JetContext jetContext0 = new JetContext();
      Map<String, Object> map0 = jetContext0.getContext();
      jetContext0.putAll(map0);
      assertEquals(0, map0.size());
  }
}
