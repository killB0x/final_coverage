/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:15:24 GMT 2022
 */

package org.gatein.api.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gatein.api.security.Group;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Group_ESTest extends Group_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Group group0 = new Group("Group[groupId=null]");
      String string0 = group0.getId();
      assertEquals("Group[groupId=null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Group group0 = new Group(stringArray0);
      String string0 = group0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Group group0 = null;
      try {
        group0 = new Group(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be empty
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Group group0 = null;
      try {
        group0 = new Group("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be empty
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "o^y.?";
      Group group0 = new Group(stringArray0);
      Group group1 = new Group(stringArray0);
      boolean boolean0 = group0.equals(group1);
      assertTrue(boolean0);
      assertEquals("/o^y.?/", group1.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      Group group1 = new Group("'{JMQZTv");
      boolean boolean0 = group0.equals(group1);
      assertFalse(boolean0);
      assertEquals("'{JMQZTv", group1.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      Group group1 = new Group(stringArray0);
      boolean boolean0 = group1.equals(group0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      boolean boolean0 = group0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Group group0 = new Group(stringArray0);
      boolean boolean0 = group0.equals(group0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      Group group1 = new Group("Group[groupId=null]");
      boolean boolean0 = group1.equals(group0);
      assertFalse(boolean0);
      assertEquals("Group[groupId=null]", group1.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      group0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y,f?L Tv?kz>";
      Group group0 = new Group(stringArray0);
      group0.hashCode();
      assertEquals("y,f?L Tv?kz>", group0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Group group0 = new Group(stringArray0);
      String string0 = group0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Group group0 = new Group("Ua{WRt80");
      group0.toString();
      assertEquals("Ua{WRt80", group0.getId());
  }
}
