/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:08:05 GMT 2022
 */

package org.gatein.api.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gatein.api.security.Group;
import org.gatein.api.security.Membership;
import org.gatein.api.security.Permission;
import org.gatein.api.security.User;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Permission_ESTest extends Permission_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      Permission permission0 = new Permission(membership0);
      assertFalse(permission0.isAccessibleToEveryone());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Permission.any(stringArray0);
      User user0 = new User("<)y1yV-a#w\"?m]3X|%");
      Permission permission0 = new Permission(user0);
      assertFalse(permission0.isAccessibleToEveryone());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Permission.any(stringArray0);
      Group group0 = new Group(stringArray0);
      Permission permission0 = new Permission("r#bSmJ3+Uzw[!y", group0);
      assertFalse(permission0.isAccessibleToEveryone());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Permission.any(stringArray0);
      // Undeclared exception!
      try { 
        Permission.any(stringArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Permission.any((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Permission permission0 = null;
      try {
        permission0 = new Permission((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.security.Membership", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Permission permission0 = null;
      try {
        permission0 = new Permission((Set<Membership>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Permission permission0 = null;
      try {
        permission0 = new Permission("K`X4noqa1|VeFJR~]<", (Group) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Group group0 = new Group("z`x{f`:vn}b]");
      Permission permission0 = new Permission("b**P.q", group0);
      Object object0 = new Object();
      boolean boolean0 = permission0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      boolean boolean0 = permission0.equals(permission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      User user0 = new User("");
      Permission permission1 = new Permission(user0);
      boolean boolean0 = permission0.equals(permission1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      permission0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      String string0 = permission0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User("");
      Permission permission0 = new Permission(user0);
      String string0 = permission0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      boolean boolean0 = permission0.isAccessibleToEveryone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Permission permission0 = new Permission();
      Permission permission1 = Permission.everyone();
      boolean boolean0 = permission1.equals(permission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      String[] stringArray0 = new String[1];
      Membership membership0 = Membership.any(stringArray0);
      Permission permission1 = permission0.addMembership(membership0);
      assertFalse(permission1.isAccessibleToEveryone());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Permission permission0 = Permission.everyone();
      Set<Membership> set0 = permission0.getMemberships();
      Permission permission1 = new Permission(set0);
      boolean boolean0 = permission1.equals(permission0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User("");
      Permission permission0 = new Permission(user0);
      boolean boolean0 = permission0.isAccessibleToEveryone();
      assertFalse(boolean0);
  }
}
