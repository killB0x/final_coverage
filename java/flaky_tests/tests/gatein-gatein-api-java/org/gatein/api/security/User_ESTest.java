/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:12:36 GMT 2022
 */

package org.gatein.api.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gatein.api.security.User;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = User.anonymous();
      String string0 = user0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User("F2");
      String string0 = user0.getId();
      assertEquals("F2", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = null;
      try {
        user0 = new User((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // id cannot be null. If the user is unknown, use User.anonymous() instead
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User("");
      User user1 = new User("");
      boolean boolean0 = user0.equals(user1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User("");
      User user1 = User.anonymous();
      boolean boolean0 = user1.equals(user0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User("");
      User user1 = User.anonymous();
      boolean boolean0 = user0.equals(user1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User("");
      boolean boolean0 = user0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = User.anonymous();
      boolean boolean0 = user0.equals(user0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User("");
      Object object0 = new Object();
      boolean boolean0 = user0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = User.anonymous();
      user0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User("");
      user0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User("");
      boolean boolean0 = user0.isAnonymous();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = User.anonymous();
      boolean boolean0 = user0.isAnonymous();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User("");
      String string0 = user0.getId();
      assertEquals("", string0);
  }
}
