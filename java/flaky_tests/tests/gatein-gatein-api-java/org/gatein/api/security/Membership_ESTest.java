/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 18:54:48 GMT 2022
 */

package org.gatein.api.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gatein.api.security.Group;
import org.gatein.api.security.Membership;
import org.gatein.api.security.User;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Membership_ESTest extends Membership_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Membership.fromString(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid membership string :
         //
         verifyException("org.gatein.api.security.Membership", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      String string0 = membership0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Membership membership0 = Membership.fromString("");
      String string0 = membership0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      String string0 = membership0.getMembershipType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Membership membership0 = Membership.fromString("");
      String string0 = membership0.getMembershipType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Group group0 = new Group("If the user is unknown, use User.anonymous() instead");
      Membership membership0 = new Membership("If the user is unknown, use User.anonymous() instead", group0);
      membership0.getGroup();
      assertEquals("If the user is unknown, use User.anonymous() instead", membership0.getMembershipType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Membership.any(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be empty
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Membership membership0 = null;
      try {
        membership0 = new Membership((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.security.Membership", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Membership membership0 = null;
      try {
        membership0 = new Membership("org.gatein.api.security.Group", (Group) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // group cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Membership.fromString("*:/RVi6Z:uyzZz/#X2'/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid membership string *:/RVi6Z:uyzZz/#X2'/
         //
         verifyException("org.gatein.api.security.Membership", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      Membership membership1 = Membership.fromString("1cCY*cN3f k&OWh");
      boolean boolean0 = membership0.equals(membership1);
      assertFalse(boolean0);
      assertEquals("1cCY*cN3f k&OWh", membership1.getMembershipType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      Membership membership1 = new Membership(user0);
      boolean boolean0 = membership0.equals(membership1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Membership membership0 = Membership.any(stringArray0);
      Membership membership1 = Membership.any(stringArray0);
      boolean boolean0 = membership0.equals(membership1);
      assertEquals("*", membership1.getMembershipType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      Membership membership1 = Membership.fromString("");
      boolean boolean0 = membership0.equals(membership1);
      assertEquals("", membership1.getMembershipType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      String[] stringArray0 = new String[3];
      Membership membership1 = Membership.any(stringArray0);
      boolean boolean0 = membership1.equals(membership0);
      assertEquals("*", membership1.getMembershipType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      Membership membership1 = Membership.fromString("&:I!_|");
      boolean boolean0 = membership0.equals(membership1);
      assertEquals("&", membership1.getMembershipType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      boolean boolean0 = membership0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      boolean boolean0 = membership0.equals(membership0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      Object object0 = new Object();
      boolean boolean0 = membership0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = User.anonymous();
      Membership membership0 = new Membership(user0);
      membership0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      membership0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Membership membership0 = Membership.fromString("U%$X:k1");
      membership0.hashCode();
      assertEquals("U%$X", membership0.getMembershipType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      String string0 = membership0.toString();
      assertEquals("&:I!_|", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Membership membership0 = Membership.fromString("U%$X:k1");
      String string0 = membership0.toString();
      assertEquals("U%$X:k1", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      Group group0 = membership0.getGroup();
      assertNull(group0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      User user0 = new User("&:I!_|");
      Membership membership0 = new Membership(user0);
      String string0 = membership0.getMembershipType();
      assertEquals("&:I!_|", string0);
  }
}
