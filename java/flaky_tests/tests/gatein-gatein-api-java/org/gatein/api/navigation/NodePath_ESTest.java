/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 18:59:00 GMT 2022
 */

package org.gatein.api.navigation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gatein.api.navigation.NodePath;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodePath_ESTest extends NodePath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("+\"`+");
      NodePath nodePath1 = NodePath.fromString("UMp+]r1gY~+N3ylm");
      int int0 = nodePath0.compareTo(nodePath1);
      assertEquals((-42), int0);
      assertEquals("UMp+]r1gY~+N3ylm", nodePath1.getLastSegment());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      String[] stringArray0 = new String[4];
      NodePath nodePath1 = NodePath.path(stringArray0);
      boolean boolean0 = nodePath1.isParent(nodePath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("/G^CL9.I;&\"A");
      nodePath0.subPath(0, 0);
      assertEquals(1, nodePath0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[16];
      NodePath nodePath0 = NodePath.path(stringArray0);
      NodePath nodePath1 = nodePath0.subPath(0, 7);
      assertEquals(7, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("*#VW>QTw~n+3[nfZ");
      NodePath nodePath1 = nodePath0.subPath(0);
      assertEquals(1, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      NodePath nodePath0 = NodePath.path(stringArray0);
      int int0 = nodePath0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      Iterator<String> iterator0 = nodePath0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      NodePath nodePath0 = NodePath.path(stringArray0);
      String string0 = nodePath0.getSegment(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("fqTyEdSru#q??0*y?");
      String string0 = nodePath0.getSegment(0);
      assertEquals("fqTyEdSru#q??0*y?", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      NodePath nodePath0 = NodePath.path(stringArray0);
      String string0 = nodePath0.getSegment(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      NodePath nodePath0 = NodePath.path(stringArray0);
      String string0 = nodePath0.getLastSegment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      String[] stringArray0 = nodePath0.asArray();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      String[] stringArray0 = new String[0];
      NodePath nodePath1 = nodePath0.append(stringArray0);
      assertTrue(nodePath1.equals((Object)nodePath0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      NodePath nodePath1 = nodePath0.append(nodePath0);
      assertEquals(0, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("*#VW>QTw~n+3[nfZ");
      NodePath nodePath1 = nodePath0.append(nodePath0);
      assertEquals(2, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.subPath(24, (-227321924));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(24) > toIndex(-227321924)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.subPath((-720));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -720
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodePath.path((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elements cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.isParent((NodePath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.navigation.NodePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodePath.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.append((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elements cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.append((NodePath) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.navigation.NodePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.subPath(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      // Undeclared exception!
      try { 
        nodePath0.getSegment(2311);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      int int0 = nodePath0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("");
      Object object0 = new Object();
      boolean boolean0 = nodePath0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      NodePath nodePath1 = nodePath0.subPath(0);
      boolean boolean0 = nodePath0.equals(nodePath1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      boolean boolean0 = nodePath0.equals(nodePath0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      boolean boolean0 = nodePath0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tH)2^@q";
      stringArray0[1] = "";
      NodePath nodePath0 = NodePath.path(stringArray0);
      NodePath nodePath1 = nodePath0.parent();
      int int0 = nodePath0.compareTo(nodePath1);
      assertEquals(1, int0);
      assertEquals(2, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tH)2^@q";
      NodePath nodePath0 = NodePath.path(stringArray0);
      NodePath nodePath1 = NodePath.fromString("+}*V");
      int int0 = nodePath0.compareTo(nodePath1);
      assertEquals(1, nodePath1.size());
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("z;tH)2^nq");
      NodePath nodePath1 = nodePath0.parent();
      int int0 = nodePath1.compareTo(nodePath0);
      assertEquals((-1), int0);
      assertEquals(1, nodePath0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tH)2^@q";
      stringArray0[1] = "";
      stringArray0[2] = "";
      NodePath nodePath0 = NodePath.path(stringArray0);
      int int0 = nodePath0.compareTo(nodePath0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("\"bQU/M");
      NodePath nodePath1 = nodePath0.parent();
      boolean boolean0 = nodePath1.isParent(nodePath0);
      assertEquals(1, nodePath1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      NodePath nodePath1 = NodePath.fromString("+}*V");
      boolean boolean0 = nodePath1.isParent(nodePath0);
      assertFalse(boolean0);
      assertEquals(1, nodePath1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      boolean boolean0 = nodePath0.isParent(nodePath0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      NodePath nodePath1 = nodePath0.parent();
      assertNull(nodePath1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("tH)2^@q");
      String string0 = nodePath0.getLastSegment();
      assertEquals("tH)2^@q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      NodePath nodePath0 = NodePath.path(stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nodePath0.forEach(consumer0);
      assertEquals(4, nodePath0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      // Undeclared exception!
      try { 
        nodePath0.subPath(58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(58) > toIndex(3)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      String string0 = nodePath0.toString();
      assertEquals("/null/null/null", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      List<String> list0 = nodePath0.asList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      // Undeclared exception!
      try { 
        nodePath0.compareTo(nodePath0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.navigation.NodePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[3];
      NodePath nodePath0 = NodePath.path(stringArray0);
      String[] stringArray1 = nodePath0.asArray();
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[4];
      NodePath nodePath0 = NodePath.path(stringArray0);
      NodePath nodePath1 = nodePath0.append(stringArray0);
      assertNotSame(nodePath1, nodePath0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("+}*V");
      NodePath nodePath1 = nodePath0.parent();
      assertNotNull(nodePath1);
      
      String string0 = nodePath1.getLastSegment();
      assertNull(string0);
      assertFalse(nodePath0.equals((Object)nodePath1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      nodePath0.hashCode();
  }
}
