/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:02:43 GMT 2022
 */

package org.gatein.api.navigation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.gatein.api.navigation.PublicationDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PublicationDate_ESTest extends PublicationDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-1), (-1), 0, 1046);
      PublicationDate publicationDate0 = PublicationDate.between(mockDate0, mockDate0);
      publicationDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.between(date0, date0);
      PublicationDate publicationDate1 = PublicationDate.endingOn(date0);
      boolean boolean0 = publicationDate0.equals(publicationDate1);
      assertFalse(boolean0);
      assertFalse(publicationDate1.equals((Object)publicationDate0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      PublicationDate publicationDate1 = PublicationDate.startingOn(mockDate0);
      boolean boolean0 = publicationDate1.equals(publicationDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.endingOn(date0);
      Date date1 = publicationDate0.getEnd();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.startingOn(date0);
      Date date1 = publicationDate0.getStart();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(3746L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.endingOn(date0);
      Date date1 = publicationDate0.getEnd();
      Date date2 = publicationDate0.getEnd();
      assertNotNull(date2);
      
      PublicationDate publicationDate1 = PublicationDate.between(date2, date1);
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", date2.toString());
      assertFalse(publicationDate1.equals((Object)publicationDate0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.startingOn(date0);
      MockDate mockDate0 = new MockDate(0, (-1), (-1), 0, 0, 0);
      boolean boolean0 = publicationDate0.within((Date) mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      // Undeclared exception!
      try { 
        publicationDate0.within((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // date cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        PublicationDate.startingOn((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        PublicationDate.endingOn((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // end cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      boolean boolean0 = publicationDate0.within((-1000L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      PublicationDate publicationDate0 = PublicationDate.startingOn(mockDate0);
      boolean boolean0 = publicationDate0.within((long) 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-654), 588, (-654), (-654), (-654));
      PublicationDate publicationDate0 = PublicationDate.between(mockDate0, mockDate0);
      boolean boolean0 = publicationDate0.within(1559L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      PublicationDate publicationDate1 = PublicationDate.endingOn(mockDate0);
      boolean boolean0 = publicationDate1.equals(publicationDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.startingOn(date0);
      MockDate mockDate0 = new MockDate(0, (-1), (-1), 0, 0, 0);
      PublicationDate publicationDate1 = PublicationDate.startingOn(mockDate0);
      boolean boolean0 = publicationDate1.equals(publicationDate0);
      assertFalse(boolean0);
      assertFalse(publicationDate0.equals((Object)publicationDate1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303L);
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      boolean boolean0 = publicationDate0.equals(mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      boolean boolean0 = publicationDate0.equals(publicationDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303L);
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      PublicationDate publicationDate1 = PublicationDate.startingOn(mockDate0);
      boolean boolean0 = publicationDate0.equals(publicationDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.startingOn(mockDate0);
      Date date0 = publicationDate0.getEnd();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      PublicationDate publicationDate0 = PublicationDate.endingOn(date0);
      Date date1 = publicationDate0.getStart();
      assertNull(date1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303L);
      PublicationDate publicationDate0 = PublicationDate.startingOn(mockDate0);
      Date date0 = publicationDate0.getStart();
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.between(mockDate0, mockDate0);
      boolean boolean0 = publicationDate0.within(3104L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(0L);
      // Undeclared exception!
      try { 
        PublicationDate.between(mockDate0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End date must be after start date
         //
         verifyException("org.gatein.api.navigation.PublicationDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303L);
      PublicationDate publicationDate0 = PublicationDate.startingOn(mockDate0);
      boolean boolean0 = publicationDate0.within((Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303L);
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      boolean boolean0 = publicationDate0.within((Date) mockDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      PublicationDate publicationDate0 = PublicationDate.endingOn(mockDate0);
      String string0 = publicationDate0.toString();
      assertNotNull(string0);
  }
}
