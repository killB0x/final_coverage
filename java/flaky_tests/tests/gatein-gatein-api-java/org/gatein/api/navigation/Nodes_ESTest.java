/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:19:08 GMT 2022
 */

package org.gatein.api.navigation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gatein.api.navigation.Node;
import org.gatein.api.navigation.NodePath;
import org.gatein.api.navigation.NodeVisitor;
import org.gatein.api.navigation.Nodes;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Nodes_ESTest extends Nodes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Nodes.asList((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.navigation.Nodes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(node0).getChildCount();
      // Undeclared exception!
      try { 
        Nodes.asList(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeVisitor nodeVisitor0 = Nodes.visitNodes((-487));
      assertNotNull(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeVisitor nodeVisitor0 = Nodes.visitNodes(1);
      assertNotNull(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeVisitor nodeVisitor0 = Nodes.visitNodes(0);
      assertNotNull(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodePath nodePath0 = NodePath.fromString("");
      NodeVisitor nodeVisitor0 = Nodes.visitChildren();
      NodeVisitor nodeVisitor1 = Nodes.visitNodes(nodePath0, nodeVisitor0);
      assertFalse(nodeVisitor1.equals((Object)nodeVisitor0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(node0).iterator();
      doReturn(993).when(node0).getChildCount();
      List<Node> list0 = Nodes.asList(node0);
      assertFalse(list0.contains(node0));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Nodes.visitAll();
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(node0).iterator();
      doReturn(993).when(node0).getChildCount();
      List<Node> list0 = Nodes.asList(node0);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(node0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeVisitor nodeVisitor0 = Nodes.visitNone();
      assertNotNull(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeVisitor nodeVisitor0 = Nodes.visitNodes(12);
      assertNotNull(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodePath nodePath0 = NodePath.root();
      NodeVisitor nodeVisitor0 = Nodes.visitNodes(nodePath0);
      assertNotNull(nodeVisitor0);
  }
}
