/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:17:58 GMT 2022
 */

package org.gatein.api.common.i18n;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.gatein.api.common.i18n.Localized;
import org.gatein.api.common.i18n.LocalizedString;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Localized_ESTest extends Localized_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("N[9(Ay(SLQi+IM");
      Locale locale0 = Locale.CANADA_FRENCH;
      localizedString0.setLocalizedValue(locale0, "LocalizedString[values=java.util.HashMap$Values@0000000004]");
      Localized.Value<String> localized_Value0 = localizedString0.getLocalizedValue(locale0);
      Locale locale1 = localized_Value0.getLocale();
      assertEquals("fr_CA", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("N[9(Ay(SLQi+IM");
      Locale locale0 = Locale.CANADA_FRENCH;
      localizedString0.getLocalizedValue(locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("N[9(Ay(SLQi+IM");
      Locale locale0 = Locale.CANADA_FRENCH;
      localizedString0.removeLocalizedValue(locale0);
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("&/mlg6)Oqh`bT7{z");
      Locale locale0 = Locale.FRENCH;
      Localized<String> localized0 = localizedString0.setLocalizedValue(locale0, "");
      assertSame(localizedString0, localized0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueMap contains a null value for key locale ");
      Iterator<String> iterator0 = localizedString0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueMap contains a null value for key locale ");
      Locale locale0 = Locale.GERMANY;
      String string0 = localizedString0.getValue(locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Locale, String> hashMap0 = new HashMap<Locale, String>();
      Locale locale0 = new Locale("org.gatein.api.common.i18n.LocalizedString", "q~8t`;D?y4siOM", "org.gatein.api.common.i18n.LocalizedString");
      hashMap0.put(locale0, "org.gatein.api.common.i18n.LocalizedString");
      LocalizedString localizedString0 = new LocalizedString(hashMap0);
      String string0 = localizedString0.getValue(locale0);
      assertEquals("org.gatein.api.common.i18n.LocalizedString", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueMap contains a null value for key locale ");
      Collection<Localized.Value<String>> collection0 = (Collection<Localized.Value<String>>)localizedString0.getLocalizedValues();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("foioK");
      Localized.Value<String> localized_Value0 = localizedString0.getLocalizedValue((Locale) null);
      String string0 = localized_Value0.getValue();
      assertEquals("foioK", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Locale, String> hashMap0 = new HashMap<Locale, String>();
      LocalizedString localizedString0 = new LocalizedString(hashMap0);
      Locale locale0 = Locale.KOREAN;
      localizedString0.setLocalizedValue(locale0, (String) null);
      localizedString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("values");
      localizedString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      HashMap<Locale, String> hashMap0 = new HashMap<Locale, String>();
      LocalizedString localizedString0 = new LocalizedString(hashMap0);
      LocalizedString localizedString1 = localizedString0.setLocalizedValue(locale0, (String) null);
      LocalizedString localizedString2 = new LocalizedString(locale0, "2z");
      assertFalse(localizedString2.equals((Object)localizedString0));
      
      localizedString2.setLocalizedValue(locale0, (String) null);
      boolean boolean0 = localizedString1.equals(localizedString2);
      assertTrue(localizedString2.equals((Object)localizedString0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LocalizedString localizedString0 = new LocalizedString(locale0, "h(Xg#o&^OO");
      LocalizedString localizedString1 = new LocalizedString(locale0, "h(Xg#o&^OO");
      boolean boolean0 = localizedString0.equals(localizedString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueMap contains a null value for key locale ");
      LocalizedString localizedString1 = new LocalizedString("valueMap contains a null value for key locale ");
      boolean boolean0 = localizedString0.equals(localizedString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("");
      Localized.Value<String> localized_Value0 = localizedString0.getLocalizedValue((Locale) null);
      assertNotNull(localized_Value0);
      
      boolean boolean0 = localized_Value0.equals(localizedString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueEap contains a null value for key locale ");
      Locale locale0 = Locale.KOREAN;
      LocalizedString localizedString1 = new LocalizedString(locale0, "valueEap contains a null value for key locale ");
      boolean boolean0 = localizedString0.equals(localizedString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("");
      LocalizedString localizedString1 = new LocalizedString(localizedString0);
      boolean boolean0 = localizedString0.equals(localizedString1);
      assertFalse(localizedString1.isLocalized());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      HashMap<Locale, String> hashMap0 = new HashMap<Locale, String>(0);
      LocalizedString localizedString0 = new LocalizedString(hashMap0);
      LocalizedString localizedString1 = localizedString0.setLocalizedValue(locale0, (String) null);
      LocalizedString localizedString2 = new LocalizedString(locale0, "");
      boolean boolean0 = localizedString1.equals(localizedString2);
      assertFalse(localizedString2.equals((Object)localizedString1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("l${>+b68oOFp");
      boolean boolean0 = localizedString0.equals("l${>+b68oOFp");
      assertFalse(boolean0);
      assertFalse(localizedString0.isLocalized());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("valueMap contains a null value for key locale ");
      boolean boolean0 = localizedString0.equals(localizedString0);
      assertFalse(localizedString0.isLocalized());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalizedString localizedString0 = null;
      try {
        localizedString0 = new LocalizedString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // valueMap contains a null value for key locale null
         //
         verifyException("org.gatein.api.common.i18n.Localized", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("?[+d&=24");
      Locale locale0 = Locale.US;
      LocalizedString localizedString1 = localizedString0.setLocalizedValue(locale0, "?[+d&=24");
      Localized.Value<String> localized_Value0 = localizedString1.getLocalizedValue(locale0);
      String string0 = localized_Value0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalizedString localizedString0 = new LocalizedString("");
      localizedString0.toString();
      assertFalse(localizedString0.isLocalized());
  }
}
