/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 19:04:35 GMT 2022
 */

package org.gatein.api.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.gatein.api.common.Attributes;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = Attributes.toString(class0, (Object) class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Attributes.toString(class0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("Invalid type", class0);
      String string0 = attributes0.remove(attributes_Key0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("OFMoO{nqRi*N+h[O", class0);
      Class<Byte> class1 = Byte.class;
      Attributes.Key<Byte> attributes_Key1 = Attributes.key("OFMoO{nqRi*N+h[O", class1);
      Byte byte0 = new Byte((byte)1);
      attributes0.put(attributes_Key1, byte0);
      String string0 = attributes0.remove(attributes_Key0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key(" cannot be null. ", class0);
      Attributes attributes0 = new Attributes();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      attributes0.merge(" cannot be null. ", "MFK*D~s-!OQ|T", biFunction0);
      String string0 = attributes0.put(attributes_Key0, "MFK*D~s-!OQ|T");
      assertEquals("MFK*D~s-!OQ|T", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Attributes.fromString(class0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Attributes.fromString(class0, " cannot be empty");
      assertEquals(" cannot be empty", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Attributes.toString(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes.Key<HashMap<String, String>> attributes_Key0 = (Attributes.Key<HashMap<String, String>>) mock(Attributes.Key.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(attributes_Key0).getType();
      // Undeclared exception!
      try { 
        attributes0.put(attributes_Key0, (HashMap<String, String>) attributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.common.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Attributes.key("z+'J>+$KHsV", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported key type java.lang.Object. Key type has to either be String or implement 'valueOf(String.class)'
         //
         verifyException("org.gatein.api.common.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.get((Attributes.Key<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attributes.fromString((Class<Object>) null, "Cll>h4{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.gatein.api.common.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("", class0);
      Attributes attributes0 = new Attributes();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      attributes0.merge("", "", biFunction0);
      String string0 = attributes0.get(attributes_Key0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key(". Key type has to either be String or implement 'valueOf(String.class)'", class0);
      Byte byte0 = attributes0.get(attributes_Key0);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Attributes attributes0 = new Attributes(hashMap0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("", class0);
      Class<String> class1 = attributes_Key0.getType();
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key("values", class0);
      String string0 = attributes_Key0.getName();
      assertEquals("values", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("#!#w?hPn#BZ!", class0);
      Attributes.Key<String> attributes_Key1 = Attributes.key("',rNTDO2A@?", class0);
      boolean boolean0 = attributes_Key1.equals(attributes_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("", class0);
      Attributes.Key<String> attributes_Key1 = Attributes.key("", class0);
      boolean boolean0 = attributes_Key0.equals(attributes_Key1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("type", class0);
      boolean boolean0 = attributes_Key0.equals(attributes_Key0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("", class0);
      boolean boolean0 = attributes_Key0.equals("5RuR^&RX@z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Attributes.fromString(class0, "Could not initialize VALUE_OF_CACHE in org.gatein.api.common.Attributes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported key type java.lang.Object. Key type has to either be String or implement 'valueOf(String.class)'
         //
         verifyException("org.gatein.api.common.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<Object> class0 = Object.class;
      Attributes.Key<Object> attributes_Key0 = (Attributes.Key<Object>) mock(Attributes.Key.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(attributes_Key0).getType();
      // Undeclared exception!
      try { 
        attributes0.put(attributes_Key0, (Object) "t ZRzwn{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value class is not the same as key type
         //
         verifyException("org.gatein.api.common.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("ss9NE", class0);
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.put(attributes_Key0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<String> class0 = String.class;
      Attributes.Key<String> attributes_Key0 = Attributes.key("/-HA<IFBOL^t2FTk=$", class0);
      Attributes attributes0 = new Attributes();
      attributes0.put(attributes_Key0, "/-HA<IFBOL^t2FTk=$");
      boolean boolean0 = attributes0.containsKey(attributes_Key0);
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key("z+'J>+$KHsV", class0);
      boolean boolean0 = attributes0.containsKey(attributes_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key("mk#EQ?qM", class0);
      Function<String, String> function0 = Function.identity();
      attributes0.computeIfAbsent("mk#EQ?qM", function0);
      boolean boolean0 = attributes0.containsKey(attributes_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key("JPDzVo5%v49xI_", class0);
      String string0 = attributes0.remove((Object) attributes_Key0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Attributes.Key<Byte> attributes_Key0 = Attributes.key("b]Z~<", class0);
      String string0 = attributes_Key0.toString();
      assertEquals("b]Z~<", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = null;
      try {
        attributes0 = new Attributes((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // values cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.remove((Attributes.Key<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key cannot be null
         //
         verifyException("org.gatein.api.internal.Parameters", e);
      }
  }
}
