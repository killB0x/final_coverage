/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:37:07 GMT 2022
 */

package com.nofacepress.flexlock.handle;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nofacepress.flexlock.handle.FlexLockHandle;
import com.nofacepress.flexlock.handle.FlexLockHandlePool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlexLockHandlePool_ESTest extends FlexLockHandlePool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      FlexLockHandlePool<Object> flexLockHandlePool1 = new FlexLockHandlePool<Object>();
      FlexLockHandle flexLockHandle0 = flexLockHandlePool1.reserve(flexLockHandlePool0);
      Object object0 = flexLockHandlePool1.release(flexLockHandle0);
      flexLockHandlePool0.reserve(object0);
      flexLockHandlePool0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      Object object0 = new Object();
      FlexLockHandle flexLockHandle1 = flexLockHandlePool0.reserve(object0);
      flexLockHandle0.toString();
      flexLockHandle0.toString();
      flexLockHandle1.toString();
      flexLockHandlePool0.release(flexLockHandle0);
      FlexLockHandlePool<FlexLockHandle> flexLockHandlePool1 = new FlexLockHandlePool<FlexLockHandle>();
      flexLockHandle0.toString();
      flexLockHandlePool1.reserve(flexLockHandle0);
      flexLockHandle0.toString();
      flexLockHandlePool1.reserve(flexLockHandle1);
      flexLockHandlePool1.release(flexLockHandle0);
      flexLockHandlePool1.toString();
      flexLockHandlePool0.release(flexLockHandle1);
      flexLockHandlePool0.release(flexLockHandle1);
      flexLockHandlePool0.reserve((Object) null);
      flexLockHandlePool0.toString();
      FlexLockHandle flexLockHandle2 = new FlexLockHandle();
      flexLockHandle1.toString();
      flexLockHandle2.toString();
      flexLockHandlePool0.reserve(flexLockHandle2);
      String string0 = null;
      Integer integer0 = Integer.getInteger((String) null, 0);
      FlexLockHandle flexLockHandle3 = new FlexLockHandle(integer0);
      flexLockHandle3.toString();
      flexLockHandlePool1.release(flexLockHandle3);
      FlexLockHandlePool<FlexLockHandle> flexLockHandlePool2 = new FlexLockHandlePool<FlexLockHandle>();
      // Undeclared exception!
      try { 
        flexLockHandlePool2.release(flexLockHandle1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      Object object0 = new Object();
      FlexLockHandle flexLockHandle0 = flexLockHandlePool0.reserve(object0);
      Object object1 = flexLockHandlePool0.release(flexLockHandle0);
      FlexLockHandle flexLockHandle1 = flexLockHandlePool0.reserve(object1);
      assertEquals(0, (int)flexLockHandle1.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      Object object0 = new Object();
      FlexLockHandle flexLockHandle0 = flexLockHandlePool0.reserve(object0);
      flexLockHandlePool0.release(flexLockHandle0);
      Object object1 = flexLockHandlePool0.release(flexLockHandle0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      FlexLockHandle flexLockHandle0 = flexLockHandlePool0.reserve(object0);
      Object object1 = flexLockHandlePool0.release(flexLockHandle0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FlexLockHandlePool<FlexLockHandle> flexLockHandlePool0 = new FlexLockHandlePool<FlexLockHandle>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      flexLockHandle0.toString();
      flexLockHandle0.toString();
      flexLockHandle0.toString();
      FlexLockHandle flexLockHandle1 = flexLockHandlePool0.reserve(flexLockHandle0);
      FlexLockHandlePool<Object> flexLockHandlePool1 = new FlexLockHandlePool<Object>();
      flexLockHandle1.toString();
      flexLockHandle1.toString();
      flexLockHandlePool0.reserve(flexLockHandle1);
      flexLockHandlePool1.reserve(flexLockHandle0);
      flexLockHandlePool1.release(flexLockHandle0);
      FlexLockHandle flexLockHandle2 = flexLockHandlePool0.reserve(flexLockHandle1);
      flexLockHandle2.toString();
      flexLockHandle2.toString();
      flexLockHandle2.toString();
      // Undeclared exception!
      try { 
        flexLockHandlePool1.release(flexLockHandle2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      // Undeclared exception!
      try { 
        flexLockHandlePool0.release((FlexLockHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.handle.FlexLockHandlePool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      // Undeclared exception!
      try { 
        flexLockHandlePool0.release(flexLockHandle0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      FlexLockHandle flexLockHandle1 = flexLockHandlePool0.reserve(flexLockHandle0);
      assertEquals(0, (int)flexLockHandle1.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlexLockHandlePool<Object> flexLockHandlePool0 = new FlexLockHandlePool<Object>();
      String string0 = flexLockHandlePool0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlexLockHandlePool<FlexLockHandle> flexLockHandlePool0 = new FlexLockHandlePool<FlexLockHandle>();
      FlexLockHandlePool<Object> flexLockHandlePool1 = new FlexLockHandlePool<Object>();
      Object object0 = new Object();
      FlexLockHandle flexLockHandle0 = flexLockHandlePool1.reserve(object0);
      flexLockHandlePool0.reserve(flexLockHandle0);
      String string0 = flexLockHandlePool0.toString();
      assertNotNull(string0);
  }
}
