/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:34:58 GMT 2022
 */

package com.nofacepress.flexlock.handle;

import org.junit.Test;
import static org.junit.Assert.*;
import com.nofacepress.flexlock.handle.FlexLockHandle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlexLockHandle_ESTest extends FlexLockHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      FlexLockHandle flexLockHandle0 = new FlexLockHandle(integer0);
      Integer integer1 = flexLockHandle0.getIndex();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      Integer integer0 = flexLockHandle0.getIndex();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1575));
      FlexLockHandle flexLockHandle0 = new FlexLockHandle(integer0);
      Integer integer1 = flexLockHandle0.getIndex();
      assertEquals((-1575), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      flexLockHandle0.canEqual(flexLockHandle0);
      assertEquals(0, (int)flexLockHandle0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      FlexLockHandle flexLockHandle0 = new FlexLockHandle(integer0);
      boolean boolean0 = flexLockHandle0.canEqual(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1044);
      FlexLockHandle flexLockHandle0 = new FlexLockHandle(integer0);
      Integer integer1 = flexLockHandle0.getIndex();
      assertEquals(1044, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      String string0 = flexLockHandle0.getUuid();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      Random.setNextRandom(0);
      Integer integer0 = new Integer(0);
      FlexLockHandle flexLockHandle1 = new FlexLockHandle(integer0);
      boolean boolean0 = flexLockHandle0.equals(flexLockHandle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      FlexLockHandle flexLockHandle1 = new FlexLockHandle();
      boolean boolean0 = flexLockHandle1.equals(flexLockHandle0);
      assertEquals(0, (int)flexLockHandle1.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      FlexLockHandle flexLockHandle1 = new FlexLockHandle();
      boolean boolean0 = flexLockHandle0.equals(flexLockHandle1);
      assertEquals(0, (int)flexLockHandle1.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      FlexLockHandle flexLockHandle1 = new FlexLockHandle((Integer) null);
      boolean boolean0 = flexLockHandle1.equals(flexLockHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      boolean boolean0 = flexLockHandle0.equals("FlexLockHandle(index=0, uuid=00000000-0100-4000-8200-000003000000)");
      assertEquals(0, (int)flexLockHandle0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      boolean boolean0 = flexLockHandle0.equals(flexLockHandle0);
      assertEquals(0, (int)flexLockHandle0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle((Integer) null);
      flexLockHandle0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      flexLockHandle0.hashCode();
      assertEquals(0, (int)flexLockHandle0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      String string0 = flexLockHandle0.toString();
      assertEquals("FlexLockHandle(index=0, uuid=00000000-0100-4000-8200-000003000000)", string0);
  }
}
