/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:35:55 GMT 2022
 */

package com.nofacepress.flexlock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.nofacepress.flexlock.FlexLock;
import com.nofacepress.flexlock.FlexLockRegistry;
import com.nofacepress.flexlock.handle.FlexLockHandle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlexLock_ESTest extends FlexLock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLockHandle flexLockHandle0 = flexLockRegistry0.tryLock("", (-1403));
      FlexLock<Object> flexLock0 = new FlexLock<Object>("", flexLockRegistry0);
      FlexLock<FlexLock<Object>> flexLock1 = new FlexLock<FlexLock<Object>>(flexLock0, (FlexLockRegistry<FlexLock<Object>>) null, flexLockHandle0);
      FlexLockRegistry<FlexLock<Object>> flexLockRegistry1 = flexLock1.getRegistry();
      assertNull(flexLockRegistry1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = new FlexLockRegistry<String>();
      flexLockRegistry0.setPollingIntervalInMilliseconds((-2921L));
      FlexLock<String> flexLock0 = new FlexLock<String>("d?[D8RB`", flexLockRegistry0, (FlexLockHandle) null);
      FlexLockRegistry<String> flexLockRegistry1 = flexLock0.getRegistry();
      assertSame(flexLockRegistry0, flexLockRegistry1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FlexLockRegistry<FlexLock<Object>> flexLockRegistry0 = new FlexLockRegistry<FlexLock<Object>>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      FlexLock<FlexLock<Object>> flexLock0 = new FlexLock<FlexLock<Object>>((FlexLock<Object>) null, flexLockRegistry0, flexLockHandle0);
      Object object0 = flexLock0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = new FlexLockRegistry<String>();
      FlexLock<String> flexLock0 = new FlexLock<String>("", flexLockRegistry0);
      flexLock0.lock(1);
      FlexLockHandle flexLockHandle0 = flexLock0.getHandle();
      assertEquals(0, (int)flexLockHandle0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FlexLock<Object> flexLock0 = new FlexLock<Object>("d?[D8RB`", (FlexLockRegistry<Object>) null);
      // Undeclared exception!
      try { 
        flexLock0.unlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.FlexLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = new FlexLockRegistry<String>();
      FlexLockHandle flexLockHandle0 = new FlexLockHandle();
      FlexLock<String> flexLock0 = new FlexLock<String>("Ma:VT9SFro-o *?/~WD", flexLockRegistry0, flexLockHandle0);
      // Undeclared exception!
      try { 
        flexLock0.unlock();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>(flexLockRegistry0, flexLockRegistry0);
      flexLock0.tryLock(1);
      try { 
        flexLock0.tryLock(1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.FlexLockRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FlexLock<Object> flexLock0 = new FlexLock<Object>("", (FlexLockRegistry<Object>) null);
      // Undeclared exception!
      try { 
        flexLock0.lock((-3083));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.FlexLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>(", handle=", flexLockRegistry0);
      FlexLock<Object> flexLock1 = new FlexLock<Object>((Object) null, flexLockRegistry0);
      // Undeclared exception!
      try { 
        flexLock1.equals(flexLock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.FlexLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = (FlexLockRegistry<String>) mock(FlexLockRegistry.class, new ViolatedAssumptionAnswer());
      FlexLock<String> flexLock0 = new FlexLock<String>("On", flexLockRegistry0);
      FlexLockHandle flexLockHandle0 = flexLock0.getHandle();
      assertNull(flexLockHandle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>("t;\"X*3^3P}$V,0Wd!^", flexLockRegistry0, (FlexLockHandle) null);
      FlexLockRegistry<FlexLock<Object>> flexLockRegistry1 = new FlexLockRegistry<FlexLock<Object>>();
      FlexLock<FlexLock<Object>> flexLock1 = new FlexLock<FlexLock<Object>>(flexLock0, flexLockRegistry1);
      boolean boolean0 = flexLock1.tryLock((-161));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLockRegistry<String> flexLockRegistry1 = new FlexLockRegistry<String>();
      FlexLock<String> flexLock0 = new FlexLock<String>("D]m+@*u_>lMu>KZ^_4t", flexLockRegistry1, (FlexLockHandle) null);
      FlexLock<Object> flexLock1 = new FlexLock<Object>(flexLockRegistry1, flexLockRegistry0);
      Object object0 = flexLock1.getKey();
      boolean boolean0 = flexLock0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>(", handle=", flexLockRegistry0);
      boolean boolean0 = flexLock0.equals(flexLock0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>("t;\"X*3^3P}$V,0Wd!^", flexLockRegistry0, (FlexLockHandle) null);
      FlexLockRegistry<String> flexLockRegistry1 = new FlexLockRegistry<String>();
      FlexLock<String> flexLock1 = new FlexLock<String>("D]m+@*u_>lMu>KZ^_4t", flexLockRegistry1, (FlexLockHandle) null);
      Object object0 = flexLock0.getKey();
      boolean boolean0 = flexLock1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>("t;\"X*3^3P}$V,0Wd!^", flexLockRegistry0, (FlexLockHandle) null);
      flexLock0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = new FlexLockRegistry<String>();
      FlexLock<String> flexLock0 = new FlexLock<String>("d?[D8RB`", flexLockRegistry0, (FlexLockHandle) null);
      flexLock0.unlock();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>("t;\"X*3^3P}$V,0Wd!^", flexLockRegistry0, (FlexLockHandle) null);
      flexLock0.setHandle((FlexLockHandle) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FlexLockRegistry<Object> flexLockRegistry0 = new FlexLockRegistry<Object>();
      FlexLock<Object> flexLock0 = new FlexLock<Object>(flexLockRegistry0, flexLockRegistry0);
      String string0 = flexLock0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FlexLock<Object> flexLock0 = new FlexLock<Object>("d?[D8RB`", (FlexLockRegistry<Object>) null);
      // Undeclared exception!
      try { 
        flexLock0.tryLock(354);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.nofacepress.flexlock.FlexLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FlexLockRegistry<String> flexLockRegistry0 = new FlexLockRegistry<String>();
      FlexLock<String> flexLock0 = new FlexLock<String>("d?[D8RB`", flexLockRegistry0, (FlexLockHandle) null);
      FlexLockRegistry<String> flexLockRegistry1 = flexLock0.getRegistry();
      assertSame(flexLockRegistry0, flexLockRegistry1);
  }
}
