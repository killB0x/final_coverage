/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 12:55:21 GMT 2022
 */

package com.xero.models.payrollnz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.payrollnz.Benefit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Benefit_ESTest extends Benefit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Benefit.CalculationTypeNZEnum benefit_CalculationTypeNZEnum0 = Benefit.CalculationTypeNZEnum.fromValue("FixedAmount");
      assertEquals(Benefit.CalculationTypeNZEnum.FIXEDAMOUNT, benefit_CalculationTypeNZEnum0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Benefit.CategoryEnum benefit_CategoryEnum0 = Benefit.CategoryEnum.fromValue("ComplyingFund");
      assertEquals(Benefit.CategoryEnum.COMPLYINGFUND, benefit_CategoryEnum0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Benefit.CalculationTypeNZEnum benefit_CalculationTypeNZEnum0 = Benefit.CalculationTypeNZEnum.fromValue("PercentageOfTaxableEarnings");
      assertEquals(Benefit.CalculationTypeNZEnum.PERCENTAGEOFTAXABLEEARNINGS, benefit_CalculationTypeNZEnum0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Benefit.CalculationTypeNZEnum.fromValue("Wrong date format");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'Wrong date format'
         //
         verifyException("com.xero.models.payrollnz.Benefit$CalculationTypeNZEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Benefit.CategoryEnum benefit_CategoryEnum0 = Benefit.CategoryEnum.fromValue("Other");
      assertEquals(Benefit.CategoryEnum.OTHER, benefit_CategoryEnum0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Benefit.CategoryEnum.fromValue("PercentageOfTaxableEarnings");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'PercentageOfTaxableEarnings'
         //
         verifyException("com.xero.models.payrollnz.Benefit$CategoryEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Benefit benefit0 = null;
      try {
        benefit0 = new Benefit();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/threeten/bp/ZoneId
         //
         verifyException("com.xero.models.payrollnz.Benefit", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Benefit.CategoryEnum benefit_CategoryEnum0 = Benefit.CategoryEnum.KIWISAVER;
      String string0 = benefit_CategoryEnum0.toString();
      assertEquals("KiwiSaver", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Benefit.CategoryEnum benefit_CategoryEnum0 = Benefit.CategoryEnum.COMPLYINGFUND;
      String string0 = benefit_CategoryEnum0.getValue();
      assertEquals("ComplyingFund", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Benefit.CalculationTypeNZEnum benefit_CalculationTypeNZEnum0 = Benefit.CalculationTypeNZEnum.FIXEDAMOUNT;
      String string0 = benefit_CalculationTypeNZEnum0.toString();
      assertEquals("FixedAmount", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Benefit.CalculationTypeNZEnum benefit_CalculationTypeNZEnum0 = Benefit.CalculationTypeNZEnum.FIXEDAMOUNT;
      String string0 = benefit_CalculationTypeNZEnum0.getValue();
      assertEquals("FixedAmount", string0);
  }
}
