/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:12:53 GMT 2022
 */

package com.xero.models.payrollnz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.payrollnz.Reimbursement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reimbursement_ESTest extends Reimbursement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Reimbursement.StandardTypeOfUnitsEnum reimbursement_StandardTypeOfUnitsEnum0 = Reimbursement.StandardTypeOfUnitsEnum.fromValue("km");
      assertEquals(Reimbursement.StandardTypeOfUnitsEnum.KM, reimbursement_StandardTypeOfUnitsEnum0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Reimbursement.CalculationTypeEnum reimbursement_CalculationTypeEnum0 = Reimbursement.CalculationTypeEnum.fromValue("FixedAmount");
      assertEquals(Reimbursement.CalculationTypeEnum.FIXEDAMOUNT, reimbursement_CalculationTypeEnum0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Reimbursement.ReimbursementCategoryEnum reimbursement_ReimbursementCategoryEnum0 = Reimbursement.ReimbursementCategoryEnum.fromValue("NoGST");
      assertEquals(Reimbursement.ReimbursementCategoryEnum.NOGST, reimbursement_ReimbursementCategoryEnum0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Reimbursement.StandardTypeOfUnitsEnum reimbursement_StandardTypeOfUnitsEnum0 = Reimbursement.StandardTypeOfUnitsEnum.fromValue("Hours");
      assertEquals(Reimbursement.StandardTypeOfUnitsEnum.HOURS, reimbursement_StandardTypeOfUnitsEnum0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reimbursement.StandardTypeOfUnitsEnum.fromValue("Unknown");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'Unknown'
         //
         verifyException("com.xero.models.payrollnz.Reimbursement$StandardTypeOfUnitsEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reimbursement.CalculationTypeEnum reimbursement_CalculationTypeEnum0 = Reimbursement.CalculationTypeEnum.fromValue("Unknown");
      assertEquals(Reimbursement.CalculationTypeEnum.UNKNOWN, reimbursement_CalculationTypeEnum0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reimbursement.CalculationTypeEnum.fromValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'null'
         //
         verifyException("com.xero.models.payrollnz.Reimbursement$CalculationTypeEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reimbursement.ReimbursementCategoryEnum.fromValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'null'
         //
         verifyException("com.xero.models.payrollnz.Reimbursement$ReimbursementCategoryEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Reimbursement.ReimbursementCategoryEnum reimbursement_ReimbursementCategoryEnum0 = Reimbursement.ReimbursementCategoryEnum.fromValue("GST");
      String string0 = reimbursement_ReimbursementCategoryEnum0.toString();
      assertEquals("GST", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reimbursement.ReimbursementCategoryEnum reimbursement_ReimbursementCategoryEnum0 = Reimbursement.ReimbursementCategoryEnum.GST;
      String string0 = reimbursement_ReimbursementCategoryEnum0.getValue();
      assertEquals("GST", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reimbursement reimbursement0 = null;
      try {
        reimbursement0 = new Reimbursement();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/threeten/bp/ZoneId
         //
         verifyException("com.xero.models.payrollnz.Reimbursement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Reimbursement.StandardTypeOfUnitsEnum reimbursement_StandardTypeOfUnitsEnum0 = Reimbursement.StandardTypeOfUnitsEnum.HOURS;
      String string0 = reimbursement_StandardTypeOfUnitsEnum0.getValue();
      assertEquals("Hours", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reimbursement.StandardTypeOfUnitsEnum reimbursement_StandardTypeOfUnitsEnum0 = Reimbursement.StandardTypeOfUnitsEnum.HOURS;
      String string0 = reimbursement_StandardTypeOfUnitsEnum0.toString();
      assertEquals("Hours", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Reimbursement.CalculationTypeEnum reimbursement_CalculationTypeEnum0 = Reimbursement.CalculationTypeEnum.RATEPERUNIT;
      String string0 = reimbursement_CalculationTypeEnum0.getValue();
      assertEquals("RatePerUnit", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Reimbursement.CalculationTypeEnum reimbursement_CalculationTypeEnum0 = Reimbursement.CalculationTypeEnum.RATEPERUNIT;
      String string0 = reimbursement_CalculationTypeEnum0.toString();
      assertEquals("RatePerUnit", string0);
  }
}
