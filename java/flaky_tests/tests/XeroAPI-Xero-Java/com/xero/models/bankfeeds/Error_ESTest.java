/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 14:50:59 GMT 2022
 */

package com.xero.models.bankfeeds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.bankfeeds.Error;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Error_ESTest extends Error_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Error.TypeEnum error_TypeEnum0 = Error.TypeEnum.fromValue("statement-not-found");
      assertEquals(Error.TypeEnum.STATEMENT_NOT_FOUND, error_TypeEnum0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Error.TypeEnum error_TypeEnum0 = Error.TypeEnum.fromValue("feed-not-found-or-already-deleted");
      assertEquals(Error.TypeEnum.FEED_NOT_FOUND_OR_ALREADY_DELETED, error_TypeEnum0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Error.TypeEnum.fromValue("o`>geqc^J;d=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'o`>geqc^J;d='
         //
         verifyException("com.xero.models.bankfeeds.Error$TypeEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Error.TypeEnum error_TypeEnum0 = Error.TypeEnum.FEED_CONNECTED_IN_DIFFERENT_ORGANISATION;
      String string0 = error_TypeEnum0.toString();
      assertEquals("feed-connected-in-different-organisation", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Error.TypeEnum error_TypeEnum0 = Error.TypeEnum.FEED_NOT_FOUND_OR_ALREADY_DELETED;
      String string0 = error_TypeEnum0.getValue();
      assertEquals("feed-not-found-or-already-deleted", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Error error0 = null;
      try {
        error0 = new Error();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/threeten/bp/ZoneId
         //
         verifyException("com.xero.models.bankfeeds.Error", e);
      }
  }
}
