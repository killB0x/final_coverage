/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 12:27:48 GMT 2022
 */

package com.xero.models.payrolluk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.payrolluk.Deduction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deduction_ESTest extends Deduction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deduction.CalculationTypeEnum deduction_CalculationTypeEnum0 = Deduction.CalculationTypeEnum.fromValue("PercentageOfGross");
      assertEquals(Deduction.CalculationTypeEnum.PERCENTAGEOFGROSS, deduction_CalculationTypeEnum0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Deduction.DeductionCategoryEnum deduction_DeductionCategoryEnum0 = Deduction.DeductionCategoryEnum.fromValue("StakeholderPensionPostTax");
      assertEquals(Deduction.DeductionCategoryEnum.STAKEHOLDERPENSIONPOSTTAX, deduction_DeductionCategoryEnum0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Deduction.CalculationTypeEnum deduction_CalculationTypeEnum0 = Deduction.CalculationTypeEnum.fromValue("FixedAmount");
      assertEquals(Deduction.CalculationTypeEnum.FIXEDAMOUNT, deduction_CalculationTypeEnum0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Deduction.CalculationTypeEnum.fromValue("StakeholderPensionPostTax");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'StakeholderPensionPostTax'
         //
         verifyException("com.xero.models.payrolluk.Deduction$CalculationTypeEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Deduction.DeductionCategoryEnum deduction_DeductionCategoryEnum0 = Deduction.DeductionCategoryEnum.fromValue("CapitalContributions");
      assertEquals(Deduction.DeductionCategoryEnum.CAPITALCONTRIBUTIONS, deduction_DeductionCategoryEnum0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Deduction.DeductionCategoryEnum.fromValue("^/Date(-(d+)([+-]d+)?)/$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value '^/Date(-(d+)([+-]d+)?)/$'
         //
         verifyException("com.xero.models.payrolluk.Deduction$DeductionCategoryEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Deduction deduction0 = null;
      try {
        deduction0 = new Deduction();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/threeten/bp/ZoneId
         //
         verifyException("com.xero.models.payrolluk.Deduction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Deduction.DeductionCategoryEnum deduction_DeductionCategoryEnum0 = Deduction.DeductionCategoryEnum.UKOTHER;
      String string0 = deduction_DeductionCategoryEnum0.toString();
      assertEquals("UkOther", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Deduction.DeductionCategoryEnum deduction_DeductionCategoryEnum0 = Deduction.DeductionCategoryEnum.UKOTHER;
      String string0 = deduction_DeductionCategoryEnum0.getValue();
      assertEquals("UkOther", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deduction.CalculationTypeEnum deduction_CalculationTypeEnum0 = Deduction.CalculationTypeEnum.PERCENTAGEOFGROSS;
      String string0 = deduction_CalculationTypeEnum0.getValue();
      assertEquals("PercentageOfGross", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Deduction.CalculationTypeEnum deduction_CalculationTypeEnum0 = Deduction.CalculationTypeEnum.PERCENTAGEOFGROSS;
      String string0 = deduction_CalculationTypeEnum0.toString();
      assertEquals("PercentageOfGross", string0);
  }
}
