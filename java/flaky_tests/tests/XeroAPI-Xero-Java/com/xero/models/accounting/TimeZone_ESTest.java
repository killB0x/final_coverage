/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 20:18:01 GMT 2022
 */

package com.xero.models.accounting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.accounting.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeZone_ESTest extends TimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.fromValue("HAWAIIANSTANDARDTIME");
      assertEquals(TimeZone.HAWAIIANSTANDARDTIME, timeZone0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeZone[] timeZoneArray0 = TimeZone.values();
      assertEquals(109, timeZoneArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.valueOf("RUSSIANSTANDARDTIME");
      assertEquals(TimeZone.RUSSIANSTANDARDTIME, timeZone0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.fromValue("ESOUTHAMERICASTANDARDTIME");
      assertEquals(TimeZone.ESOUTHAMERICASTANDARDTIME, timeZone0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeZone.fromValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'null'
         //
         verifyException("com.xero.models.accounting.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.ESOUTHAMERICASTANDARDTIME;
      String string0 = timeZone0.getValue();
      assertEquals("ESOUTHAMERICASTANDARDTIME", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.ESOUTHAMERICASTANDARDTIME;
      String string0 = timeZone0.toString();
      assertEquals("ESOUTHAMERICASTANDARDTIME", string0);
  }
}
