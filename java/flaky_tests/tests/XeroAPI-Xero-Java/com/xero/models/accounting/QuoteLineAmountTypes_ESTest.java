/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 20:10:02 GMT 2022
 */

package com.xero.models.accounting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.accounting.QuoteLineAmountTypes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuoteLineAmountTypes_ESTest extends QuoteLineAmountTypes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuoteLineAmountTypes quoteLineAmountTypes0 = QuoteLineAmountTypes.fromValue("EXCLUSIVE");
      assertEquals(QuoteLineAmountTypes.EXCLUSIVE, quoteLineAmountTypes0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuoteLineAmountTypes[] quoteLineAmountTypesArray0 = QuoteLineAmountTypes.values();
      assertEquals(3, quoteLineAmountTypesArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuoteLineAmountTypes quoteLineAmountTypes0 = QuoteLineAmountTypes.valueOf("EXCLUSIVE");
      assertEquals(QuoteLineAmountTypes.EXCLUSIVE, quoteLineAmountTypes0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuoteLineAmountTypes quoteLineAmountTypes0 = QuoteLineAmountTypes.fromValue("NOTAX");
      assertEquals(QuoteLineAmountTypes.NOTAX, quoteLineAmountTypes0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuoteLineAmountTypes.fromValue("Pyj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'Pyj'
         //
         verifyException("com.xero.models.accounting.QuoteLineAmountTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuoteLineAmountTypes quoteLineAmountTypes0 = QuoteLineAmountTypes.INCLUSIVE;
      String string0 = quoteLineAmountTypes0.toString();
      assertEquals("INCLUSIVE", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuoteLineAmountTypes quoteLineAmountTypes0 = QuoteLineAmountTypes.EXCLUSIVE;
      String string0 = quoteLineAmountTypes0.getValue();
      assertEquals("EXCLUSIVE", string0);
  }
}
