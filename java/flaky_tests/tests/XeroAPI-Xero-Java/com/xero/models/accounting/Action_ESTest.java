/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 18:14:06 GMT 2022
 */

package com.xero.models.accounting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.accounting.Action;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Action_ESTest extends Action_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Action.StatusEnum action_StatusEnum0 = Action.StatusEnum.fromValue("NOT-ALLOWED");
      assertEquals(Action.StatusEnum.NOT_ALLOWED, action_StatusEnum0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Action.StatusEnum action_StatusEnum0 = Action.StatusEnum.fromValue("ALLOWED");
      assertEquals(Action.StatusEnum.ALLOWED, action_StatusEnum0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Action.StatusEnum.fromValue("rdr84?O cb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'rdr84?O cb'
         //
         verifyException("com.xero.models.accounting.Action$StatusEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Action action0 = null;
      try {
        action0 = new Action();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/threeten/bp/ZoneId
         //
         verifyException("com.xero.models.accounting.Action", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Action.StatusEnum action_StatusEnum0 = Action.StatusEnum.ALLOWED;
      String string0 = action_StatusEnum0.toString();
      assertEquals("ALLOWED", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Action.StatusEnum action_StatusEnum0 = Action.StatusEnum.NOT_ALLOWED;
      String string0 = action_StatusEnum0.getValue();
      assertEquals("NOT-ALLOWED", string0);
  }
}
