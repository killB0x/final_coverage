/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 20:16:13 GMT 2022
 */

package com.xero.models.accounting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.accounting.CurrencyCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CurrencyCode_ESTest extends CurrencyCode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.fromValue("TWD");
      assertEquals(CurrencyCode.TWD, currencyCode0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CurrencyCode[] currencyCodeArray0 = CurrencyCode.values();
      assertEquals(166, currencyCodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.valueOf("GGP");
      assertEquals(CurrencyCode.GGP, currencyCode0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.GGP;
      String string0 = currencyCode0.toString();
      assertEquals("GGP", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.UGX;
      String string0 = currencyCode0.getValue();
      assertEquals("UGX", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        CurrencyCode.fromValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'null'
         //
         verifyException("com.xero.models.accounting.CurrencyCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.fromValue("");
      String string0 = currencyCode0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CurrencyCode currencyCode0 = CurrencyCode.fromValue("");
      String string0 = currencyCode0.toString();
      assertEquals("", string0);
  }
}
