/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 20:13:33 GMT 2022
 */

package com.xero.models.payrollau;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.payrollau.TFNExemptionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TFNExemptionType_ESTest extends TFNExemptionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TFNExemptionType tFNExemptionType0 = TFNExemptionType.fromValue("NOTQUOTED");
      assertEquals(TFNExemptionType.NOTQUOTED, tFNExemptionType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TFNExemptionType[] tFNExemptionTypeArray0 = TFNExemptionType.values();
      assertEquals(4, tFNExemptionTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TFNExemptionType tFNExemptionType0 = TFNExemptionType.valueOf("PENSIONER");
      assertEquals(TFNExemptionType.PENSIONER, tFNExemptionType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TFNExemptionType tFNExemptionType0 = TFNExemptionType.fromValue("PENDING");
      assertEquals(TFNExemptionType.PENDING, tFNExemptionType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        TFNExemptionType.fromValue("Unexpected value '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'Unexpected value ''
         //
         verifyException("com.xero.models.payrollau.TFNExemptionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TFNExemptionType tFNExemptionType0 = TFNExemptionType.PENDING;
      String string0 = tFNExemptionType0.getValue();
      assertEquals("PENDING", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TFNExemptionType tFNExemptionType0 = TFNExemptionType.PENDING;
      String string0 = tFNExemptionType0.toString();
      assertEquals("PENDING", string0);
  }
}
