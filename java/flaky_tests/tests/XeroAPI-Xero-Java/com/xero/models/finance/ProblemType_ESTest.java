/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 20:12:40 GMT 2022
 */

package com.xero.models.finance;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.xero.models.finance.ProblemType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProblemType_ESTest extends ProblemType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProblemType problemType0 = ProblemType.fromValue("organisation-offline");
      assertEquals(ProblemType.ORGANISATION_OFFLINE, problemType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProblemType[] problemTypeArray0 = ProblemType.values();
      assertEquals(10, problemTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProblemType problemType0 = ProblemType.valueOf("ORGANISATION_OFFLINE");
      assertEquals("organisation-offline", problemType0.getValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProblemType problemType0 = ProblemType.fromValue("request-timeout");
      assertEquals(ProblemType.REQUEST_TIMEOUT, problemType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProblemType.fromValue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'null'
         //
         verifyException("com.xero.models.finance.ProblemType", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProblemType problemType0 = ProblemType.ORGANISATION_NOT_FOUND;
      String string0 = problemType0.toString();
      assertEquals("organisation-not-found", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProblemType problemType0 = ProblemType.ORGANISATION_OFFLINE;
      String string0 = problemType0.getValue();
      assertEquals("organisation-offline", string0);
  }
}
