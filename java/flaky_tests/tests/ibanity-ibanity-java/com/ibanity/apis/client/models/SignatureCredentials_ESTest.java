/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:06:12 GMT 2022
 */

package com.ibanity.apis.client.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ibanity.apis.client.models.SignatureCredentials;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SignatureCredentials_ESTest extends SignatureCredentials_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      String string0 = signatureCredentials0.getPrivateKeyPassphrase();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      signatureCredentials_SignatureCredentialsBuilder0.privateKeyPassphrase("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      String string0 = signatureCredentials0.getPrivateKeyPassphrase();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(privateKey0).toString();
      SignatureCredentials signatureCredentials0 = new SignatureCredentials(x509Certificate0, privateKey0, "p7bYWe5.6Y;BH_iM", "");
      signatureCredentials0.getPrivateKey();
      assertEquals("p7bYWe5.6Y;BH_iM", signatureCredentials0.getPrivateKeyPassphrase());
      assertEquals("", signatureCredentials0.getCertificateId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      String string0 = signatureCredentials0.getCertificateId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      signatureCredentials_SignatureCredentialsBuilder0.certificateId("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      String string0 = signatureCredentials0.getCertificateId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.canEqual(signatureCredentials0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = signatureCredentials0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      SignatureCredentials signatureCredentials0 = new SignatureCredentials((X509Certificate) null, privateKey0, ")", ")");
      String string0 = signatureCredentials0.getCertificateId();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      SignatureCredentials signatureCredentials0 = new SignatureCredentials(x509Certificate0, privateKey0, "p7bYWe5.6Y;BH_iM", "");
      String string0 = signatureCredentials0.getPrivateKeyPassphrase();
      assertEquals("p7bYWe5.6Y;BH_iM", string0);
      assertEquals("", signatureCredentials0.getCertificateId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      X509Certificate x509Certificate0 = signatureCredentials0.getCertificate();
      assertNull(x509Certificate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      PrivateKey privateKey0 = signatureCredentials0.getPrivateKey();
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder1 = signatureCredentials_SignatureCredentialsBuilder0.certificateId("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials_SignatureCredentialsBuilder0.certificateId("bT|&gL(.F");
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder1.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials_SignatureCredentialsBuilder0.certificateId("?XSJ.tuP9-}bTI4");
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertFalse(signatureCredentials1.equals((Object)signatureCredentials0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      signatureCredentials_SignatureCredentialsBuilder0.certificateId("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      signatureCredentials_SignatureCredentialsBuilder0.privateKeyPassphrase("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials_SignatureCredentialsBuilder0.privateKeyPassphrase("O~DNR\u0003kA/o");
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertFalse(boolean0);
      assertFalse(signatureCredentials1.equals((Object)signatureCredentials0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials_SignatureCredentialsBuilder0.privateKeyPassphrase("@,6pYx{rjX");
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials1.equals(signatureCredentials0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(privateKey0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.privateKey(privateKey0);
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials1.equals(signatureCredentials0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(privateKey0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.privateKey(privateKey0);
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertFalse(signatureCredentials1.equals((Object)signatureCredentials0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "?XSJ.tuP9-}bTI4").when(privateKey0).toString();
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder1 = signatureCredentials_SignatureCredentialsBuilder0.privateKey(privateKey0);
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder1.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(x509Certificate0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.certificate(x509Certificate0);
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials1.equals(signatureCredentials0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = new SignatureCredentials.SignatureCredentialsBuilder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(x509Certificate0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.certificate(x509Certificate0);
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertFalse(boolean0);
      assertFalse(signatureCredentials1.equals((Object)signatureCredentials0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "xr&y:WrRk", "", "", "").when(x509Certificate0).toString();
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder1 = signatureCredentials_SignatureCredentialsBuilder0.certificate(x509Certificate0);
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      SignatureCredentials signatureCredentials1 = signatureCredentials_SignatureCredentialsBuilder1.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials_SignatureCredentialsBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      boolean boolean0 = signatureCredentials0.equals(signatureCredentials0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      signatureCredentials_SignatureCredentialsBuilder0.privateKeyPassphrase("E}4%R?Ce{@zl@>1`w");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(privateKey0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.privateKey(privateKey0);
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "xr&y:WrRk", "").when(x509Certificate0).toString();
      signatureCredentials_SignatureCredentialsBuilder0.certificate(x509Certificate0);
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      String string0 = signatureCredentials_SignatureCredentialsBuilder0.toString();
      assertEquals("SignatureCredentials.SignatureCredentialsBuilder(certificate=null, privateKey=null, privateKeyPassphrase=null, certificateId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      signatureCredentials_SignatureCredentialsBuilder0.certificateId("");
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      signatureCredentials0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SignatureCredentials.SignatureCredentialsBuilder signatureCredentials_SignatureCredentialsBuilder0 = SignatureCredentials.builder();
      SignatureCredentials signatureCredentials0 = signatureCredentials_SignatureCredentialsBuilder0.build();
      String string0 = signatureCredentials0.toString();
      assertEquals("SignatureCredentials(certificate=null, privateKey=null, privateKeyPassphrase=null, certificateId=null)", string0);
  }
}
