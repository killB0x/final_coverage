/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:16:51 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.isabel_connect.models.create.InitialTokenCreateQuery;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InitialTokenCreateQuery_ESTest extends InitialTokenCreateQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setRedirectUri(")");
      String string0 = initialTokenCreateQuery0.getRedirectUri();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setRedirectUri("");
      String string0 = initialTokenCreateQuery0.getRedirectUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setAuthorizationCode("InitialTokenCreateQuery(authorizationCode=");
      String string0 = initialTokenCreateQuery0.getAuthorizationCode();
      assertEquals("InitialTokenCreateQuery(authorizationCode=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setAuthorizationCode("");
      String string0 = initialTokenCreateQuery0.getAuthorizationCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.canEqual(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InitialTokenCreateQuery initialTokenCreateQuery0 = null;
      try {
        initialTokenCreateQuery0 = new InitialTokenCreateQuery((InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.isabel_connect.models.TokenQuery$TokenQueryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      String string0 = initialTokenCreateQuery0.getAuthorizationCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      String string0 = initialTokenCreateQuery0.getRedirectUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertTrue(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      
      initialTokenCreateQuery1.setRedirectUri("");
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery1);
      assertFalse(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setRedirectUri("InitialTokenCreateQuery(authorizationCode=");
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setAuthorizationCode("");
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertFalse(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      
      initialTokenCreateQuery1.setAuthorizationCode("");
      boolean boolean0 = initialTokenCreateQuery1.equals(initialTokenCreateQuery0);
      assertTrue(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertTrue(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      
      initialTokenCreateQuery1.setAuthorizationCode("");
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery1);
      assertFalse(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setAuthorizationCode("^[wCVP.");
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setRedirectUri("[6)");
      initialTokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setAuthorizationCode("");
      initialTokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      boolean boolean0 = initialTokenCreateQuery0.canEqual(initialTokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      String string0 = initialTokenCreateQuery0.toString();
      assertEquals("InitialTokenCreateQuery(authorizationCode=null, redirectUri=null)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      Map<String, String> map0 = initialTokenCreateQuery0.requestArguments();
      assertEquals(3, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      String[] stringArray0 = initialTokenCreateQuery0.path();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InitialTokenCreateQuery.InitialTokenCreateQueryBuilder<?, ?> initialTokenCreateQuery_InitialTokenCreateQueryBuilder0 = InitialTokenCreateQuery.builder();
      InitialTokenCreateQuery initialTokenCreateQuery0 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      initialTokenCreateQuery0.setRedirectUri("");
      InitialTokenCreateQuery initialTokenCreateQuery1 = new InitialTokenCreateQuery(initialTokenCreateQuery_InitialTokenCreateQueryBuilder0);
      assertFalse(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      
      initialTokenCreateQuery1.setRedirectUri("");
      boolean boolean0 = initialTokenCreateQuery0.equals(initialTokenCreateQuery1);
      assertTrue(initialTokenCreateQuery1.equals((Object)initialTokenCreateQuery0));
      assertTrue(boolean0);
  }
}
