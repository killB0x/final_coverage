/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:34:15 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.AccountInformationAccessRequestReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountInformationAccessRequestReadQuery_ESTest extends AccountInformationAccessRequestReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = accountInformationAccessRequestReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1771);
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID1 = accountInformationAccessRequestReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      String string0 = accountInformationAccessRequestReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("", uUID0, uUID0, hashMap0);
      String string0 = accountInformationAccessRequestReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = accountInformationAccessRequestReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("H@a");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("Rvy^{J=vS", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = accountInformationAccessRequestReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("lLZGr8KR*0eo&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("lLZGr8KR*0eo&", uUID0, uUID0, hashMap0);
      hashMap0.put("lLZGr8KR*0eo&", "");
      Map<String, String> map0 = accountInformationAccessRequestReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-205));
      UUID uUID0 = MockUUID.fromString((String) null);
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestReadQuery0.getAdditionalHeaders();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = new AccountInformationAccessRequestReadQuery("#)TAT7}aD7", uUID0, uUID0, map0);
      UUID uUID1 = accountInformationAccessRequestReadQuery1.getAccountInformationAccessRequestId();
      assertEquals((-3674937292478201856L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("lLZGr8KR*0eo&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("lLZGr8KR*0eo&", uUID0, uUID0, hashMap0);
      UUID uUID1 = accountInformationAccessRequestReadQuery0.getAccountInformationAccessRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("lLZGr8KR*0eo&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("lLZGr8KR*0eo&", uUID0, uUID0, hashMap0);
      UUID uUID1 = accountInformationAccessRequestReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("lLZGr8KR*0eo&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("lLZGr8KR*0eo&", uUID0, uUID0, hashMap0);
      String string0 = accountInformationAccessRequestReadQuery0.getCustomerAccessToken();
      assertEquals("lLZGr8KR*0eo&", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = accountInformationAccessRequestReadQuery0.getAccountInformationAccessRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.additionalHeaders(hashMap0);
      hashMap0.put("aZB)IKzwzU2)BX", "");
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.additionalHeaders(hashMap1);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = AccountInformationAccessRequestReadQuery.builder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertFalse(accountInformationAccessRequestReadQuery1.equals((Object)accountInformationAccessRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery1.equals(accountInformationAccessRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertFalse(accountInformationAccessRequestReadQuery1.equals((Object)accountInformationAccessRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery1.equals(accountInformationAccessRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestReadQuery1.equals((Object)accountInformationAccessRequestReadQuery0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("3C#|hMp~ ,J");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = new AccountInformationAccessRequestReadQuery("3C#|hMp~ ,J", uUID0, uUID0, hashMap0);
      boolean boolean0 = accountInformationAccessRequestReadQuery1.equals(accountInformationAccessRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("3D#7hMp~ ,J");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("3D#7hMp~ ,J", uUID0, uUID0, hashMap0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery1.equals(accountInformationAccessRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.customerAccessToken(")XZ>-,");
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder1.build();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = new AccountInformationAccessRequestReadQuery("", uUID0, uUID0, (Map<String, String>) null);
      accountInformationAccessRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      accountInformationAccessRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      accountInformationAccessRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery1 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestReadQuery0.equals(accountInformationAccessRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = new AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder();
      AccountInformationAccessRequestReadQuery accountInformationAccessRequestReadQuery0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.build();
      String string0 = accountInformationAccessRequestReadQuery0.toString();
      assertEquals("AccountInformationAccessRequestReadQuery(customerAccessToken=null, accountInformationAccessRequestId=null, financialInstitutionId=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0 = AccountInformationAccessRequestReadQuery.builder();
      String string0 = accountInformationAccessRequestReadQuery_AccountInformationAccessRequestReadQueryBuilder0.toString();
      assertEquals("AccountInformationAccessRequestReadQuery.AccountInformationAccessRequestReadQueryBuilder(customerAccessToken=null, accountInformationAccessRequestId=null, financialInstitutionId=null, additionalHeaders$value=null)", string0);
  }
}
