/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:31:17 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete.FinancialInstitutionTransactionDeleteQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionTransactionDeleteQuery_ESTest extends FinancialInstitutionTransactionDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = new FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder();
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionTransactionId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder1.build();
      financialInstitutionTransactionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID1);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.fromString("FinancialInstitutionTransactionDeleteQuery(financialInstitutionId=0f060000-1006-4000-9106-000012060000, financialInstitutionUserId=0f060000-1006-4000-9106-000012060000, financialInstitutionAccountId=0f060000-1006-4000-9106-000012060000, financialInstitutionTransactionId=0f060000-1006-4000-9106-000012060000)");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID1, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID1, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-956));
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionUserId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dVeTM");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionUserId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(2232);
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString(".]p");
      financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionTransactionId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionTransactionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dVeTM");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionTransactionId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(2232);
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString(".]p");
      financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionId();
      assertEquals((-5041779779703406592L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dVeTM");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(2232);
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString(".]p");
      financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dVeTM");
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionAccountId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.canEqual(financialInstitutionTransactionDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.canEqual("FinancialInstitutionTransactionDeleteQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, financialInstitutionUserId=00000000-0100-4000-8200-000003000000, financialInstitutionAccountId=00000000-0100-4000-8200-000003000000, financialInstitutionTransactionId=00000000-0100-4000-8200-000003000000)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionTransactionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionDeleteQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = new FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionTransactionId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery1.equals(financialInstitutionTransactionDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionTransactionDeleteQuery1.equals((Object)financialInstitutionTransactionDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, uUID0, (UUID) null);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(financialInstitutionTransactionDeleteQuery1.equals((Object)financialInstitutionTransactionDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = new FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery1.equals(financialInstitutionTransactionDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, uUID0, (UUID) null, uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, uUID0, (UUID) null, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, uUID0, (UUID) null, (UUID) null);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery(uUID0, (UUID) null, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = new FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals("FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=00000000-0100-4000-8200-000003000000, financialInstitutionTransactionId=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery0.equals(financialInstitutionTransactionDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      financialInstitutionTransactionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      financialInstitutionTransactionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      String string0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.toString();
      assertEquals("FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionTransactionId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      financialInstitutionTransactionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = new FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.build();
      String string0 = financialInstitutionTransactionDeleteQuery0.toString();
      assertEquals("FinancialInstitutionTransactionDeleteQuery(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionTransactionId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0 = FinancialInstitutionTransactionDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery.FinancialInstitutionTransactionDeleteQueryBuilder financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder1 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = financialInstitutionTransactionDeleteQuery_FinancialInstitutionTransactionDeleteQueryBuilder1.build();
      financialInstitutionTransactionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery0 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionDeleteQuery financialInstitutionTransactionDeleteQuery1 = new FinancialInstitutionTransactionDeleteQuery((UUID) null, (UUID) null, uUID0, (UUID) null);
      boolean boolean0 = financialInstitutionTransactionDeleteQuery1.equals(financialInstitutionTransactionDeleteQuery0);
      assertFalse(boolean0);
  }
}
