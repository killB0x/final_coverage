/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:48:19 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.isabel_connect.models.Transaction;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transaction_ESTest extends Transaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(3020L);
      transaction0.setValueDate(localDate0);
      LocalDate localDate1 = transaction0.getValueDate();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setStatus("d?J0n");
      String string0 = transaction0.getStatus();
      assertEquals("d?J0n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setStatus("");
      String string0 = transaction0.getStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformationType("%\"WsSh7GF*'_");
      String string0 = transaction0.getRemittanceInformationType();
      assertEquals("%\"WsSh7GF*'_", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformationType("");
      String string0 = transaction0.getRemittanceInformationType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformation("WEY:v?65?2K#");
      String string0 = transaction0.getRemittanceInformation();
      assertEquals("WEY:v?65?2K#", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setInternalId("0[@-aAQbNWa9<]3");
      String string0 = transaction0.getInternalId();
      assertEquals("0[@-aAQbNWa9<]3", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setExecutionDate(localDate0);
      LocalDate localDate1 = transaction0.getExecutionDate();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("transaction");
      String string0 = transaction0.getEndToEndId();
      assertEquals("transaction", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("");
      String string0 = transaction0.getEndToEndId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("<");
      String string0 = transaction0.getCounterpartName();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("");
      String string0 = transaction0.getCounterpartName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartFinancialInstitutionBic("u|vfE3a{f]");
      String string0 = transaction0.getCounterpartFinancialInstitutionBic();
      assertEquals("u|vfE3a{f]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartFinancialInstitutionBic("");
      String string0 = transaction0.getCounterpartFinancialInstitutionBic();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartAccountReference("d?J0n");
      String string0 = transaction0.getCounterpartAccountReference();
      assertEquals("d?J0n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartAccountReference("");
      String string0 = transaction0.getCounterpartAccountReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1121));
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      BigDecimal bigDecimal1 = bigDecimal0.setScale((-1121), roundingMode0);
      transaction0.setAmount(bigDecimal1);
      BigDecimal bigDecimal2 = transaction0.getAmount();
      assertEquals((short)0, bigDecimal2.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = new BigDecimal((-2228L));
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertEquals((short) (-2228), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = new BigDecimal((-1311L));
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertEquals((byte) (-31), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setAdditionalInformation("<");
      String string0 = transaction0.getAdditionalInformation();
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setAdditionalInformation("");
      String string0 = transaction0.getAdditionalInformation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.canEqual(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transaction transaction0 = null;
      try {
        transaction0 = new Transaction((Transaction.TransactionBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.isabel_connect.models.IsabelModel$IsabelModelBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = transaction0.getAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getRemittanceInformation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = transaction0.getValueDate();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getEndToEndId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getAdditionalInformation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCounterpartAccountReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCounterpartName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCounterpartFinancialInstitutionBic();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getRemittanceInformationType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getInternalId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = transaction0.getExecutionDate();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setExecutionDate(localDate0);
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setExecutionDate(localDate0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setExecutionDate(localDate0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      LocalDate localDate0 = MockLocalDate.now();
      transaction1.setValueDate(localDate0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setValueDate(localDate0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setAdditionalInformation("transaction");
      Transaction.TransactionBuilder<?, ?> transaction_TransactionBuilder0 = transaction0.toBuilder();
      Transaction transaction1 = new Transaction(transaction_TransactionBuilder0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("transaction", transaction1.getAdditionalInformation());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setAdditionalInformation("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setAdditionalInformation("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction0.setStatus("transaction");
      assertFalse(transaction0.equals((Object)transaction1));
      
      transaction1.setStatus("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertTrue(transaction0.equals((Object)transaction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setStatus("");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setStatus("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformationType("{accountId}");
      Transaction.TransactionBuilder<?, ?> transaction_TransactionBuilder0 = transaction0.toBuilder();
      Transaction transaction1 = new Transaction(transaction_TransactionBuilder0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("{accountId}", transaction1.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setRemittanceInformationType("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setRemittanceInformationType("");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction1.setRemittanceInformation("transaction");
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction0.setRemittanceInformation("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setRemittanceInformation("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setRemittanceInformation("");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction1.setInternalId("`W.3Vf)v?9");
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction0.setInternalId("`W.3Vf)v?9");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setInternalId("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setInternalId("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("transaction");
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setEndToEndId("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setEndToEndId("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setEndToEndId("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("");
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartName("");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("transaction");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
      assertEquals("transaction", transaction0.getCounterpartName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartFinancialInstitutionBic("{accountId}");
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartFinancialInstitutionBic("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartFinancialInstitutionBic("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartFinancialInstitutionBic("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartAccountReference("'");
      Transaction.TransactionBuilder<?, ?> transaction_TransactionBuilder0 = transaction0.toBuilder();
      Transaction transaction1 = new Transaction(transaction_TransactionBuilder0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("'", transaction1.getCounterpartAccountReference());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartAccountReference("`W.3Vf)v?9");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartAccountReference("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = new BigDecimal((-2228L));
      transaction0.setAmount(bigDecimal0);
      Transaction.TransactionBuilder<?, ?> transaction_TransactionBuilder0 = transaction0.toBuilder();
      Transaction transaction1 = new Transaction(transaction_TransactionBuilder0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction1.setAmount(bigDecimal0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setRequestId("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.equals("{accountId}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.of((-364), 1, 1);
      transaction0.setExecutionDate(localDate0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setValueDate(localDate0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setAdditionalInformation("%,Fre");
      transaction0.hashCode();
      assertEquals("%,Fre", transaction0.getAdditionalInformation());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setStatus("^jv:s.||uMh/U=FK");
      transaction0.hashCode();
      assertEquals("^jv:s.||uMh/U=FK", transaction0.getStatus());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformationType("%,Fre");
      transaction0.hashCode();
      assertEquals("%,Fre", transaction0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformation(", counterpartFinancialInstitutionBic=");
      transaction0.hashCode();
      assertEquals(", counterpartFinancialInstitutionBic=", transaction0.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setInternalId("");
      transaction0.hashCode();
      assertEquals("", transaction0.getInternalId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("");
      transaction0.hashCode();
      assertEquals("", transaction0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("{accountId}");
      transaction0.hashCode();
      assertEquals("{accountId}", transaction0.getCounterpartName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartAccountReference("");
      transaction0.hashCode();
      assertEquals("", transaction0.getCounterpartAccountReference());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = new BigDecimal((-2313.82578707774));
      transaction0.setAmount(bigDecimal0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("transaction");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("transaction", transaction0.getCounterpartName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setAmount(bigDecimal0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      LocalDate localDate0 = MockLocalDate.now();
      transaction0.setExecutionDate(localDate0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      LocalDate localDate0 = MockLocalDate.from(offsetDateTime0);
      transaction0.setValueDate(localDate0);
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setValueDate(localDate0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartFinancialInstitutionBic("{accountId}");
      transaction0.hashCode();
      assertEquals("{accountId}", transaction0.getCounterpartFinancialInstitutionBic());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformation("");
      String string0 = transaction0.getRemittanceInformation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Transaction.TransactionBuilder<?, ?> transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = new Transaction(transaction_TransactionBuilder0);
      transaction0.setInternalId("");
      String string0 = transaction0.getInternalId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.toString();
      assertEquals("Transaction(super=IsabelModel(id=null, selfLink=null, requestId=null), amount=null, counterpartAccountReference=null, counterpartFinancialInstitutionBic=null, counterpartName=null, endToEndId=null, internalId=null, remittanceInformation=null, remittanceInformationType=null, status=null, additionalInformation=null, valueDate=null, executionDate=null)", string0);
  }
}
