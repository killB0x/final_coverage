/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:09:19 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.isabel_connect.models.InitialToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InitialToken_ESTest extends InitialToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshToken("&bUx?==,");
      String string0 = initialToken0.getRefreshToken();
      assertEquals("&bUx?==,", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshToken("");
      String string0 = initialToken0.getRefreshToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InitialToken.InitialTokenBuilder<?, ?> initialToken_InitialTokenBuilder0 = InitialToken.builder();
      InitialToken initialToken0 = new InitialToken(initialToken_InitialTokenBuilder0);
      initialToken0.setAccessToken("com.ibanity.apis.client.products.isabel_connect.models.InitialToken$InitialTokenBuilder");
      String string0 = initialToken0.getAccessToken();
      assertEquals("com.ibanity.apis.client.products.isabel_connect.models.InitialToken$InitialTokenBuilder", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InitialToken.InitialTokenBuilder<?, ?> initialToken_InitialTokenBuilder0 = InitialToken.builder();
      InitialToken initialToken0 = new InitialToken(initialToken_InitialTokenBuilder0);
      initialToken0.setAccessToken("");
      String string0 = initialToken0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      boolean boolean0 = initialToken0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshToken("&bUxZ==,");
      InitialToken.InitialTokenBuilder<?, ?> initialToken_InitialTokenBuilder0 = initialToken0.toBuilder();
      InitialToken initialToken1 = new InitialToken(initialToken_InitialTokenBuilder0);
      boolean boolean0 = initialToken1.equals(initialToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      InitialToken initialToken1 = new InitialToken();
      assertTrue(initialToken1.equals((Object)initialToken0));
      
      initialToken1.setTokenType(")kkI=!Q^i<1g>Q1Qe.");
      boolean boolean0 = initialToken0.equals(initialToken1);
      assertFalse(initialToken1.equals((Object)initialToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      boolean boolean0 = initialToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      boolean boolean0 = initialToken0.equals(initialToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setAccessToken("Token(accessToken=");
      initialToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setAccessToken("");
      InitialToken.InitialTokenBuilder<?, ?> initialToken_InitialTokenBuilder0 = initialToken0.toBuilder();
      InitialToken initialToken1 = new InitialToken(initialToken_InitialTokenBuilder0);
      boolean boolean0 = initialToken1.equals(initialToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshToken("U*Sb");
      initialToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.toString();
      assertEquals("InitialToken(super=Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, refreshExpiresIn=0, scope=null), accessToken=null, refreshToken=null)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InitialToken.InitialTokenBuilder<?, ?> initialToken_InitialTokenBuilder0 = InitialToken.builder();
      InitialToken initialToken0 = new InitialToken(initialToken_InitialTokenBuilder0);
      boolean boolean0 = initialToken0.canEqual(initialToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InitialToken initialToken0 = null;
      try {
        initialToken0 = new InitialToken((InitialToken.InitialTokenBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.isabel_connect.models.Token$TokenBuilder", e);
      }
  }
}
