/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:22:04 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read.FinancialInstitutionTransactionReadQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionTransactionReadQuery_ESTest extends FinancialInstitutionTransactionReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID1, uUID0);
      financialInstitutionTransactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UUID uUID1 = MockUUID.fromString("");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID1, (UUID) null);
      financialInstitutionTransactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = new FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      financialInstitutionTransactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", financialInstitutionAccountId=");
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID0, uUID1);
      financialInstitutionTransactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionTransactionId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder1.build();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", financialInstitutionAccountId=");
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID0, uUID1);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID1, uUID1);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionTransactionReadQuery1.equals((Object)financialInstitutionTransactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", financialInstitutionAccountId=");
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID0, uUID1);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID1, uUID0, uUID1);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom((-1016));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionUserId();
      assertEquals("f8030000-f903-4000-ba03-0000fb030000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionTransactionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-1443));
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionTransactionId();
      assertEquals("a3050000-a405-4000-a505-0000a6050000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom((-1016));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.setNextRandom((-1443));
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.canEqual(financialInstitutionTransactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", financialInstitutionAccountId=");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionUserId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionAccountId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionTransactionReadQuery0.getFinancialInstitutionTransactionId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = new FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionTransactionId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionTransactionReadQuery1.equals((Object)financialInstitutionTransactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = new FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery1.equals(financialInstitutionTransactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery1.equals(financialInstitutionTransactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = new FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionTransactionReadQuery1.equals((Object)financialInstitutionTransactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, (UUID) null);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals("FinancialInstitutionTransactionReadQuery(financialInstitutionId=a3050000-a405-4000-a505-0000a6050000, financialInstitutionUserId=a3050000-a405-4000-a505-0000a6050000, financialInstitutionAccountId=a3050000-a405-4000-a505-0000a6050000, financialInstitutionTransactionId=a3050000-a405-4000-a505-0000a6050000)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      financialInstitutionTransactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      String string0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionTransactionId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("`e?");
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery(uUID0, uUID0, uUID0, uUID0);
      String string0 = financialInstitutionTransactionReadQuery0.toString();
      assertEquals("FinancialInstitutionTransactionReadQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, financialInstitutionUserId=00000000-0100-4000-8200-000003000000, financialInstitutionAccountId=00000000-0100-4000-8200-000003000000, financialInstitutionTransactionId=00000000-0100-4000-8200-000003000000)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery.FinancialInstitutionTransactionReadQueryBuilder financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0 = FinancialInstitutionTransactionReadQuery.builder();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = financialInstitutionTransactionReadQuery_FinancialInstitutionTransactionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery0 = new FinancialInstitutionTransactionReadQuery((UUID) null, (UUID) null, (UUID) null, (UUID) null);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionTransactionReadQuery financialInstitutionTransactionReadQuery1 = new FinancialInstitutionTransactionReadQuery((UUID) null, (UUID) null, uUID0, uUID0);
      boolean boolean0 = financialInstitutionTransactionReadQuery0.equals(financialInstitutionTransactionReadQuery1);
      assertFalse(boolean0);
  }
}
