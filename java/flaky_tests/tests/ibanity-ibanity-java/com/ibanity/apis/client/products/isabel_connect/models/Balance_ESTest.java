/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:44:21 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.isabel_connect.models.Balance;
import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Balance_ESTest extends Balance_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSubtype("FzMYp)D;4l");
      String string0 = balance0.getSubtype();
      assertEquals("FzMYp)D;4l", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSubtype("");
      String string0 = balance0.getSubtype();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSelfLink("U_!BI=z+mIj;|13-+");
      String string0 = balance0.getSelfLink();
      assertEquals("U_!BI=z+mIj;|13-+", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSelfLink("");
      String string0 = balance0.getSelfLink();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setRequestId(":z,qA?M/@`\"3");
      String string0 = balance0.getRequestId();
      assertEquals(":z,qA?M/@`\"3", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setRequestId("");
      String string0 = balance0.getRequestId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Balance balance0 = new Balance();
      Period period0 = Period.of((-1), 1, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      balance0.setDatetime(localDateTime0);
      LocalDateTime localDateTime1 = balance0.getDatetime();
      assertSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      balance0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = balance0.getAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = new BigDecimal((-2358));
      balance0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = balance0.getAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Balance balance0 = new Balance();
      boolean boolean0 = balance0.canEqual(balance0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Balance balance0 = new Balance();
      Object object0 = new Object();
      boolean boolean0 = balance0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Balance balance0 = new Balance();
      LocalDateTime localDateTime0 = balance0.getDatetime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.getSubtype();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = balance0.getAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      balance0.setSubtype("balance");
      assertFalse(balance0.equals((Object)balance1));
      
      balance1.setSubtype("balance");
      boolean boolean0 = balance1.equals(balance0);
      assertTrue(balance1.equals((Object)balance0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setSubtype("balance");
      boolean boolean0 = balance0.equals(balance1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setSubtype("balance");
      boolean boolean0 = balance1.equals(balance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      balance0.setAmount(bigDecimal0);
      Balance balance1 = new Balance();
      assertFalse(balance1.equals((Object)balance0));
      
      balance1.setAmount(bigDecimal0);
      boolean boolean0 = balance0.equals(balance1);
      assertTrue(balance1.equals((Object)balance0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      balance0.setAmount(bigDecimal0);
      Balance balance1 = new Balance();
      boolean boolean0 = balance1.equals(balance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      balance0.setAmount(bigDecimal0);
      Balance balance1 = new Balance();
      boolean boolean0 = balance0.equals(balance1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Balance balance0 = new Balance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      balance0.setDatetime(localDateTime0);
      Balance balance1 = new Balance();
      assertFalse(balance1.equals((Object)balance0));
      
      balance1.setDatetime(localDateTime0);
      boolean boolean0 = balance0.equals(balance1);
      assertTrue(balance1.equals((Object)balance0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Balance balance0 = new Balance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      balance0.setDatetime(localDateTime0);
      Balance balance1 = new Balance();
      boolean boolean0 = balance1.equals(balance0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Balance balance0 = new Balance();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      balance0.setDatetime(localDateTime0);
      Balance balance1 = new Balance();
      boolean boolean0 = balance0.equals(balance1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setRequestId("vqOx&p");
      Balance.BalanceBuilder<?, ?> balance_BalanceBuilder0 = balance0.toBuilder();
      Balance balance1 = new Balance(balance_BalanceBuilder0);
      boolean boolean0 = balance0.equals(balance1);
      assertEquals("vqOx&p", balance1.getRequestId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setRequestId("balance");
      boolean boolean0 = balance0.equals(balance1);
      assertFalse(balance1.equals((Object)balance0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setRequestId("balance");
      boolean boolean0 = balance1.equals(balance0);
      assertFalse(balance1.equals((Object)balance0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      balance0.setSelfLink("balance");
      assertFalse(balance0.equals((Object)balance1));
      
      balance1.setSelfLink("balance");
      boolean boolean0 = balance1.equals(balance0);
      assertTrue(balance0.equals((Object)balance1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setSelfLink("balance");
      boolean boolean0 = balance0.equals(balance1);
      assertFalse(balance1.equals((Object)balance0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Balance balance0 = new Balance();
      Balance balance1 = new Balance();
      assertTrue(balance1.equals((Object)balance0));
      
      balance1.setSelfLink("balance");
      boolean boolean0 = balance1.equals(balance0);
      assertFalse(balance1.equals((Object)balance0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Balance balance0 = new Balance();
      Object object0 = new Object();
      boolean boolean0 = balance0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Balance balance0 = new Balance();
      boolean boolean0 = balance0.equals(balance0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSubtype("com.ibanity.apis.client.products.isabel_connect.models.Balance$BalanceBuilder");
      balance0.hashCode();
      assertEquals("com.ibanity.apis.client.products.isabel_connect.models.Balance$BalanceBuilder", balance0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Balance balance0 = new Balance();
      Instant instant0 = MockInstant.ofEpochMilli((-416L));
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      balance0.setDatetime(localDateTime0);
      balance0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setRequestId("");
      balance0.hashCode();
      assertEquals("", balance0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Balance balance0 = new Balance();
      balance0.setSelfLink("y)Q#)x2=2l#pU\"_iSK");
      balance0.hashCode();
      assertEquals("y)Q#)x2=2l#pU\"_iSK", balance0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Balance balance0 = new Balance();
      String string0 = balance0.toString();
      assertEquals("Balance(selfLink=null, requestId=null, datetime=null, amount=null, subtype=null)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Balance balance0 = new Balance();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      balance0.setAmount(bigDecimal0);
      balance0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Balance.BalanceBuilder<?, ?> balance_BalanceBuilder0 = Balance.builder();
      Balance balance0 = new Balance(balance_BalanceBuilder0);
      BigDecimal bigDecimal0 = new BigDecimal(43);
      balance0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = balance0.getAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }
}
