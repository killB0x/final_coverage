/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:51:28 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.TransactionReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransactionReadQuery_ESTest extends TransactionReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("C^6(J\rxj%MW\"[=I");
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-193));
      UUID uUID0 = MockUUID.fromString(", additionalHeaders$value=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("Psx}q~I#C+T}C", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = transactionReadQuery0.getTransactionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-1239));
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("Q", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = transactionReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("Q", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = transactionReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.customerAccessToken("]nr");
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      String string0 = transactionReadQuery0.getCustomerAccessToken();
      assertEquals("]nr", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      transactionReadQuery_TransactionReadQueryBuilder0.customerAccessToken("");
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      String string0 = transactionReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders(hashMap0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(43);
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      hashMap0.put(", transactionId=", "");
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(3277);
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery("", uUID0, uUID0, uUID0, map0);
      UUID uUID1 = transactionReadQuery1.getAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("C^6(J\rxj%MW\"[=I");
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID1 = transactionReadQuery0.getAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      String string0 = transactionReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = transactionReadQuery0.getTransactionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = transactionReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = transactionReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, (Map<String, String>) null);
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery("", uUID0, uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, (Map<String, String>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(",");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(",");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("@");
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(",");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("A\"d\"x<R}2D42d[1Kx");
      transactionReadQuery_TransactionReadQueryBuilder0.financialInstitutionId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery((String) null, uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.customerAccessToken("I&F;BR,+;ROTk");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery("TransactionReadQuery.TransactionReadQueryBuilder(customerAccessToken=", uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery_TransactionReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("c7PMS%SI1Ucd=7J4iP");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      String string0 = hashMap0.getOrDefault(transactionReadQuery0, "c7PMS%SI1Ucd=7J4iP");
      assertEquals("c7PMS%SI1Ucd=7J4iP", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("c7PMS%SI1Ucd=7J4iP");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      String string0 = transactionReadQuery0.toString();
      assertEquals("TransactionReadQuery(customerAccessToken=, financialInstitutionId=00000000-0100-4000-8200-000003000000, accountId=00000000-0100-4000-8200-000003000000, transactionId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder1.build();
      UUID uUID1 = transactionReadQuery0.getTransactionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      String string0 = transactionReadQuery_TransactionReadQueryBuilder0.toString();
      assertEquals("TransactionReadQuery.TransactionReadQueryBuilder(customerAccessToken=null, financialInstitutionId=null, accountId=null, transactionId=null, additionalHeaders$value=null)", string0);
  }
}
