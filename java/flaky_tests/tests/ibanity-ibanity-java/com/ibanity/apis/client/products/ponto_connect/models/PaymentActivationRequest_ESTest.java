/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:12:47 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.PaymentActivationRequest;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentActivationRequest_ESTest extends PaymentActivationRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      paymentActivationRequest_PaymentActivationRequestBuilder0.selfLink("BmLo1h<(_U<");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      String string0 = paymentActivationRequest0.getSelfLink();
      assertNotNull(string0);
      assertEquals("BmLo1h<(_U<", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      paymentActivationRequest0.setSelfLink("");
      String string0 = paymentActivationRequest0.getSelfLink();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest0.setRequestId("da}G");
      paymentActivationRequest0.getRequestId();
      assertEquals("da}G", paymentActivationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest0.setRequestId("");
      paymentActivationRequest0.getRequestId();
      assertEquals("", paymentActivationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest0.setRedirectLink("paymentActivationRequest");
      paymentActivationRequest0.getRedirectLink();
      assertEquals("paymentActivationRequest", paymentActivationRequest0.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      paymentActivationRequest_PaymentActivationRequestBuilder0.redirectLink("");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      String string0 = paymentActivationRequest0.getRedirectLink();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(1468);
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      UUID uUID0 = MockUUID.fromString("paymentActivationRequest");
      paymentActivationRequest_PaymentActivationRequestBuilder0.id(uUID0);
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      UUID uUID1 = paymentActivationRequest0.getId();
      assertEquals((-4754393828414914560L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      UUID uUID0 = MockUUID.fromString("");
      paymentActivationRequest0.setId(uUID0);
      UUID uUID1 = paymentActivationRequest0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      boolean boolean0 = paymentActivationRequest0.canEqual(paymentActivationRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      boolean boolean0 = paymentActivationRequest0.canEqual("PaymentActivationRequest(id=null, selfLink=null, requestId=null, redirectLink=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      String string0 = paymentActivationRequest0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      String string0 = paymentActivationRequest0.getRedirectLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      UUID uUID0 = paymentActivationRequest0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      String string0 = paymentActivationRequest0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest1.setRedirectLink("{paymentActivationRequestId}");
      boolean boolean0 = paymentActivationRequest1.equals(paymentActivationRequest0);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest_PaymentActivationRequestBuilder0.redirectLink("PaymentActivationRequest(id=");
      PaymentActivationRequest paymentActivationRequest1 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(boolean0);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      paymentActivationRequest_PaymentActivationRequestBuilder0.redirectLink("");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      PaymentActivationRequest paymentActivationRequest1 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertTrue(boolean0);
      assertEquals("", paymentActivationRequest1.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      PaymentActivationRequest paymentActivationRequest1 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest0.setRequestId("da}G");
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest paymentActivationRequest1 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest1.setRequestId("paymentActivationRequest");
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      paymentActivationRequest_PaymentActivationRequestBuilder0.requestId("");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      PaymentActivationRequest paymentActivationRequest1 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertEquals("", paymentActivationRequest1.getRequestId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      paymentActivationRequest0.setSelfLink("paymentActivationRequest");
      assertFalse(paymentActivationRequest0.equals((Object)paymentActivationRequest1));
      
      paymentActivationRequest1.setSelfLink("paymentActivationRequest");
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertTrue(paymentActivationRequest0.equals((Object)paymentActivationRequest1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest1.setSelfLink("paymentActivationRequest");
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest0.setSelfLink("paymentActivationRequest");
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      UUID uUID0 = MockUUID.randomUUID();
      paymentActivationRequest0.setId(uUID0);
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      assertFalse(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      
      paymentActivationRequest1.setId(uUID0);
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertTrue(paymentActivationRequest1.equals((Object)paymentActivationRequest0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      UUID uUID0 = MockUUID.randomUUID();
      paymentActivationRequest0.setId(uUID0);
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      boolean boolean0 = paymentActivationRequest0.equals("paymentActivationRequest");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      boolean boolean0 = paymentActivationRequest0.equals(paymentActivationRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder1 = paymentActivationRequest_PaymentActivationRequestBuilder0.redirectLink("65](,mYV,05qI'udeN");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder1.build();
      paymentActivationRequest0.hashCode();
      assertEquals("65](,mYV,05qI'udeN", paymentActivationRequest0.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest0.setSelfLink("paymentActivationRequest");
      paymentActivationRequest0.hashCode();
      assertEquals("paymentActivationRequest", paymentActivationRequest0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      UUID uUID0 = MockUUID.fromString("");
      paymentActivationRequest0.setId(uUID0);
      paymentActivationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = PaymentActivationRequest.builder();
      String string0 = paymentActivationRequest_PaymentActivationRequestBuilder0.toString();
      assertEquals("PaymentActivationRequest.PaymentActivationRequestBuilder(id=null, selfLink=null, requestId=null, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaymentActivationRequest.PaymentActivationRequestBuilder paymentActivationRequest_PaymentActivationRequestBuilder0 = new PaymentActivationRequest.PaymentActivationRequestBuilder();
      paymentActivationRequest_PaymentActivationRequestBuilder0.requestId("");
      PaymentActivationRequest paymentActivationRequest0 = paymentActivationRequest_PaymentActivationRequestBuilder0.build();
      paymentActivationRequest0.hashCode();
      assertEquals("", paymentActivationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      UUID uUID0 = MockUUID.fromString("paymentActivationRequest");
      paymentActivationRequest0.setId(uUID0);
      PaymentActivationRequest paymentActivationRequest1 = new PaymentActivationRequest();
      boolean boolean0 = paymentActivationRequest1.equals(paymentActivationRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaymentActivationRequest paymentActivationRequest0 = new PaymentActivationRequest();
      String string0 = paymentActivationRequest0.toString();
      assertEquals("PaymentActivationRequest(id=null, selfLink=null, requestId=null, redirectLink=null)", string0);
  }
}
