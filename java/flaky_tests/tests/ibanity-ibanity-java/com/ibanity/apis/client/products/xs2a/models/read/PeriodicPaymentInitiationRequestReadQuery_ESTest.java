/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:10:08 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.PeriodicPaymentInitiationRequestReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationRequestReadQuery_ESTest extends PeriodicPaymentInitiationRequestReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      periodicPaymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(3038);
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("X`}Xo)OwG", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = periodicPaymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertEquals((-6914432799121670144L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID1 = periodicPaymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(3038);
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("X`}Xo)OwG", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = periodicPaymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertEquals((-6914432799121670144L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1.build();
      UUID uUID1 = periodicPaymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("8kGL.<~[]ucga&", uUID0, uUID0, (Map<String, String>) null);
      String string0 = periodicPaymentInitiationRequestReadQuery0.getCustomerAccessToken();
      assertEquals("8kGL.<~[]ucga&", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.customerAccessToken("");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      String string0 = periodicPaymentInitiationRequestReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("8kGL.<~[]ucga&", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = periodicPaymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.additionalHeaders(hashMap0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("", (UUID) null, (UUID) null, hashMap0);
      hashMap0.put("", "");
      Map<String, String> map0 = periodicPaymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.canEqual(periodicPaymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      String string0 = periodicPaymentInitiationRequestReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequestReadQuery0.equals((Object)periodicPaymentInitiationRequestReadQuery1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery1);
      assertFalse(periodicPaymentInitiationRequestReadQuery1.equals((Object)periodicPaymentInitiationRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery1);
      assertFalse(periodicPaymentInitiationRequestReadQuery1.equals((Object)periodicPaymentInitiationRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.customerAccessToken("YC@&=-Ty..<R");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.customerAccessToken("");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery1);
      assertFalse(periodicPaymentInitiationRequestReadQuery1.equals((Object)periodicPaymentInitiationRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("X`}Xo)OwG", uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder1.build();
      periodicPaymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("JyH^yXX%R*(", uUID0, uUID0, hashMap0);
      periodicPaymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.customerAccessToken(")");
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      String string0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder(customerAccessToken=null, financialInstitutionId=null, paymentInitiationRequestId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = PeriodicPaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery1.equals(periodicPaymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0 = new PeriodicPaymentInitiationRequestReadQuery.PeriodicPaymentInitiationRequestReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery1 = periodicPaymentInitiationRequestReadQuery_PeriodicPaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestReadQuery0.equals(periodicPaymentInitiationRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestReadQuery periodicPaymentInitiationRequestReadQuery0 = new PeriodicPaymentInitiationRequestReadQuery("X`}Xo)OwG", uUID0, uUID0, (Map<String, String>) null);
      String string0 = periodicPaymentInitiationRequestReadQuery0.toString();
      assertEquals("PeriodicPaymentInitiationRequestReadQuery(customerAccessToken=X`}Xo)OwG, financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, additionalHeaders=null)", string0);
  }
}
