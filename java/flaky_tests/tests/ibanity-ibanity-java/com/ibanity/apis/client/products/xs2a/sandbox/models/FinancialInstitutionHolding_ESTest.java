/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:36:46 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.FinancialInstitutionHolding;
import java.math.BigDecimal;
import java.time.Clock;
import java.time.Instant;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionHolding_ESTest extends FinancialInstitutionHolding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      financialInstitutionHolding0.setUpdatedAt(instant0);
      Instant instant1 = financialInstitutionHolding0.getUpdatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(915);
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.fromString("holding");
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      UUID uUID1 = financialInstitutionHolding0.getFinancialInstitutionAccountId();
      assertEquals((-7709318134611378176L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.fromString("holding");
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      UUID uUID1 = financialInstitutionHolding0.getFinancialInstitutionAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      financialInstitutionHolding0.setCreatedAt(instant0);
      Instant instant1 = financialInstitutionHolding0.getCreatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding0.canEqual(financialInstitutionHolding0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = financialInstitutionHolding0.canEqual(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = null;
      try {
        financialInstitutionHolding0 = new FinancialInstitutionHolding((FinancialInstitutionHolding.FinancialInstitutionHoldingBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.xs2a.models.Holding$HoldingBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = financialInstitutionHolding0.getUpdatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = financialInstitutionHolding0.getCreatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      financialInstitutionHolding0.setUpdatedAt(instant0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      assertFalse(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      
      financialInstitutionHolding1.setUpdatedAt(instant0);
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertTrue(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      assertTrue(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      
      Instant instant0 = MockInstant.now();
      financialInstitutionHolding1.setUpdatedAt(instant0);
      boolean boolean0 = financialInstitutionHolding1.equals(financialInstitutionHolding0);
      assertFalse(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      Instant instant0 = MockInstant.now();
      financialInstitutionHolding0.setCreatedAt(instant0);
      assertFalse(financialInstitutionHolding0.equals((Object)financialInstitutionHolding1));
      
      financialInstitutionHolding1.setCreatedAt(instant0);
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertTrue(financialInstitutionHolding0.equals((Object)financialInstitutionHolding1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      assertTrue(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      
      Instant instant0 = MockInstant.now();
      financialInstitutionHolding1.setCreatedAt(instant0);
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertFalse(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.fromString("holding");
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      assertFalse(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      
      financialInstitutionHolding1.setFinancialInstitutionAccountId(uUID0);
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertTrue(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.fromString("holding");
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding1.equals(financialInstitutionHolding0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.fromString("holding");
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      assertTrue(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      
      financialInstitutionHolding1.setReferenceType("{holdingId}");
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertFalse(financialInstitutionHolding1.equals((Object)financialInstitutionHolding0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = MockInstant.ofEpochMilli((-3L));
      financialInstitutionHolding0.setUpdatedAt(instant0);
      financialInstitutionHolding0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      financialInstitutionHolding0.setCreatedAt(instant0);
      financialInstitutionHolding0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHolding0.setFinancialInstitutionAccountId(uUID0);
      financialInstitutionHolding0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = MockInstant.now();
      financialInstitutionHolding0.setCreatedAt(instant0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionHolding.FinancialInstitutionHoldingBuilder<?, ?> financialInstitutionHolding_FinancialInstitutionHoldingBuilder0 = FinancialInstitutionHolding.builder();
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding(financialInstitutionHolding_FinancialInstitutionHoldingBuilder0);
      boolean boolean0 = financialInstitutionHolding0.equals(financialInstitutionHolding_FinancialInstitutionHoldingBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      Instant instant0 = MockInstant.now();
      financialInstitutionHolding0.setUpdatedAt(instant0);
      FinancialInstitutionHolding financialInstitutionHolding1 = new FinancialInstitutionHolding();
      boolean boolean0 = financialInstitutionHolding1.equals(financialInstitutionHolding0);
      assertFalse(boolean0);
      assertFalse(financialInstitutionHolding0.equals((Object)financialInstitutionHolding1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      String string0 = financialInstitutionHolding0.toString();
      assertEquals("FinancialInstitutionHolding(super=Holding(id=null, selfLink=null, requestId=null, name=null, reference=null, referenceType=null, subtype=null, quantity=null, totalValuation=null, totalValuationCurrency=null, lastValuationCurrency=null, lastValuation=null, lastValuationDate=null), financialInstitutionAccountId=null, createdAt=null, updatedAt=null)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionHolding financialInstitutionHolding0 = new FinancialInstitutionHolding();
      UUID uUID0 = financialInstitutionHolding0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }
}
