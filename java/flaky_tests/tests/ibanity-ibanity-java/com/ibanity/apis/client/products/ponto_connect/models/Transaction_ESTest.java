/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 07:58:40 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Transaction;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Transaction_ESTest extends Transaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      ZoneId zoneId0 = ZoneId.systemDefault();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now(zoneId0);
      Instant instant0 = MockInstant.from(offsetDateTime0);
      transaction0.setValueDate(instant0);
      Instant instant1 = transaction0.getValueDate();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setSelfLink(", internalReference=");
      String string0 = transaction0.getSelfLink();
      assertEquals(", internalReference=", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setSelfLink("");
      String string0 = transaction0.getSelfLink();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRequestId(".8Tm3R?M");
      String string0 = transaction0.getRequestId();
      assertEquals(".8Tm3R?M", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.requestId("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getRequestId();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.remittanceInformationType("transaction");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getRemittanceInformationType();
      assertNotNull(string0);
      assertEquals("transaction", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.remittanceInformationType("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getRemittanceInformationType();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.remittanceInformation("d:.>D&W");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getRemittanceInformation();
      assertEquals("d:.>D&W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.remittanceInformation("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getRemittanceInformation();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.purposeCode(", amount=");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getPurposeCode();
      assertNotNull(string0);
      assertEquals(", amount=", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.purposeCode("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getPurposeCode();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setProprietaryBankTransactionCode("=P%7vkF!kbV");
      String string0 = transaction0.getProprietaryBankTransactionCode();
      assertEquals("=P%7vkF!kbV", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.proprietaryBankTransactionCode("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getProprietaryBankTransactionCode();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.mandateId("{Fj");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getMandateId();
      assertNotNull(string0);
      assertEquals("{Fj", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.mandateId("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getMandateId();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.internalReference("\"J9");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getInternalReference();
      assertNotNull(string0);
      assertEquals("\"J9", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.internalReference("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getInternalReference();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Random.setNextRandom(1271);
      Transaction transaction0 = new Transaction();
      UUID uUID0 = MockUUID.randomUUID();
      transaction0.setId(uUID0);
      UUID uUID1 = transaction0.getId();
      assertEquals((-647392442273480704L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      UUID uUID0 = MockUUID.randomUUID();
      transaction0.setId(uUID0);
      UUID uUID1 = transaction0.getId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.fee(bigDecimal0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      BigDecimal bigDecimal1 = transaction0.getFee();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setFee(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getFee();
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      BigDecimal bigDecimal0 = new BigDecimal((-3688.08632874329));
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.fee(bigDecimal0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      BigDecimal bigDecimal1 = transaction0.getFee();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Instant instant0 = MockInstant.now();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.executionDate(instant0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Instant instant1 = transaction0.getExecutionDate();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.endToEndId("Id");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getEndToEndId();
      assertEquals("Id", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("");
      String string0 = transaction0.getEndToEndId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.digest(", creditorId=");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getDigest();
      assertNotNull(string0);
      assertEquals(", creditorId=", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.setDigest("");
      transaction0.getDigest();
      assertEquals("", transaction0.getDigest());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setDescription("{transactionId}");
      String string0 = transaction0.getDescription();
      assertEquals("{transactionId}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.description("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getDescription();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.currency("transaction");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCurrency();
      assertNotNull(string0);
      assertEquals("transaction", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCurrency("");
      String string0 = transaction0.getCurrency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCreditorId("7_.Q%![X94sumnXIg~>");
      String string0 = transaction0.getCreditorId();
      assertEquals("7_.Q%![X94sumnXIg~>", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCreditorId("");
      String string0 = transaction0.getCreditorId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartReference("n");
      String string0 = transaction0.getCounterpartReference();
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartReference("");
      String string0 = transaction0.getCounterpartReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.counterpartName("![WW");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCounterpartName();
      assertEquals("![WW", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartName("");
      String string0 = transaction0.getCounterpartName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.cardReferenceType("TZN$jaHD4jwDNXOD9");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCardReferenceType();
      assertNotNull(string0);
      assertEquals("TZN$jaHD4jwDNXOD9", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCardReferenceType("");
      String string0 = transaction0.getCardReferenceType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.cardReference("?<+|#*4");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCardReference();
      assertNotNull(string0);
      assertEquals("?<+|#*4", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.setCardReference("");
      String string0 = transaction0.getCardReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.bankTransactionCode("bns\"&!U");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getBankTransactionCode();
      assertEquals("bns\"&!U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setBankTransactionCode("");
      String string0 = transaction0.getBankTransactionCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal((-468), mathContext0);
      transaction0.setAmount(bigDecimal0);
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.amount(bigDecimal0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      BigDecimal bigDecimal1 = transaction0.getAmount();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setAdditionalInformation(", description=");
      String string0 = transaction0.getAdditionalInformation();
      assertEquals(", description=", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.additionalInformation("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      String string0 = transaction0.getAdditionalInformation();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.canEqual(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      UUID uUID0 = MockUUID.fromString("+9$Xqq}D");
      boolean boolean0 = transaction0.canEqual(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Instant instant0 = transaction0.getExecutionDate();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = transaction0.getFee();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCreditorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getCardReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCardReferenceType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getPurposeCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getDigest();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = transaction0.getAmount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getAdditionalInformation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getEndToEndId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Instant instant0 = transaction0.getValueDate();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getRemittanceInformation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCounterpartReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getProprietaryBankTransactionCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getMandateId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getRemittanceInformationType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getCounterpartName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      UUID uUID0 = transaction0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getBankTransactionCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      String string0 = transaction0.getInternalReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCardReferenceType("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setCardReferenceType("{transactionId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.cardReferenceType("=7~v!7Ti@fd+.[");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCardReference("{transactionId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCardReference("{transactionId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setFee(bigDecimal0);
      Transaction transaction1 = new Transaction();
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction1.setFee(bigDecimal0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setFee(bigDecimal0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.internalReference("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("", transaction1.getInternalReference());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setInternalReference("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.internalReference("");
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertEquals("", transaction1.getInternalReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setDigest("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setDigest("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setAdditionalInformation("{transactionId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setAdditionalInformation("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCreditorId("{transactionId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.creditorId("UVF!^YSfwH0g");
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertEquals("UVF!^YSfwH0g", transaction1.getCreditorId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setMandateId("transaction");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("transaction", transaction0.getMandateId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setMandateId("{transactionId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.mandateId("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.purposeCode("transaction");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("transaction", transaction1.getPurposeCode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setPurposeCode("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.purposeCode("transaction");
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("transaction");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
      assertEquals("transaction", transaction0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("transaction");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
      assertEquals("transaction", transaction0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.endToEndId("]ck}q&GNYv1]");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      transaction0.equals(transaction1);
      assertEquals("]ck}q&GNYv1]", transaction1.getEndToEndId());
      assertEquals("]ck}q&GNYv1]", transaction0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setProprietaryBankTransactionCode("{transactionId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setProprietaryBankTransactionCode("{transactionId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction0.setBankTransactionCode("m\"WS");
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertEquals("m\"WS", transaction0.getBankTransactionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction0.setBankTransactionCode("transaction");
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartReference("{transactionId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartReference("{transactionId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartName("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCounterpartName("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setRemittanceInformation("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setRemittanceInformation("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.remittanceInformation("=7~v!7Ti@fd+.[");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setRemittanceInformationType("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.remittanceInformationType("Sl%$ {UT+Ij:Q^n\rj");
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.description("");
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertEquals("", transaction1.getDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      Instant instant0 = MockInstant.now();
      transaction1.setExecutionDate(instant0);
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      transaction0.setExecutionDate(instant0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      Instant instant0 = MockInstant.now();
      transaction1.setValueDate(instant0);
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setCurrency("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.currency("transaction");
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setAmount(bigDecimal0);
      Transaction transaction1 = new Transaction();
      transaction1.setAmount(bigDecimal0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      transaction1.setAmount(bigDecimal0);
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRequestId("{transactionId}");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
      assertEquals("{transactionId}", transaction0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRequestId("{transactionId}");
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction0.equals((Object)transaction1));
      assertEquals("{transactionId}", transaction0.getRequestId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setSelfLink("transaction");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.selfLink("%Y2]7}4M>B|K,");
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction1.equals(transaction0);
      assertEquals("%Y2]7}4M>B|K,", transaction1.getSelfLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      UUID uUID0 = MockUUID.randomUUID();
      transaction0.setId(uUID0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      UUID uUID0 = MockUUID.randomUUID();
      transaction1.setId(uUID0);
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Object object0 = new Object();
      boolean boolean0 = transaction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCardReferenceType(", remittanceInformationType=");
      transaction0.hashCode();
      assertEquals(", remittanceInformationType=", transaction0.getCardReferenceType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.cardReference(", remittanceInformation=");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      transaction_TransactionBuilder0.fee(bigDecimal0);
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.internalReference("Id");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setDigest("");
      transaction0.hashCode();
      assertEquals("", transaction0.getDigest());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.setAdditionalInformation("");
      transaction0.hashCode();
      assertEquals("", transaction0.getAdditionalInformation());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.creditorId("{transactionId}");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
      assertEquals("{transactionId}", transaction0.getCreditorId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.mandateId("Lz9-L;O1H<j$}n!a#m");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setPurposeCode("Id");
      transaction0.hashCode();
      assertEquals("Id", transaction0.getPurposeCode());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setProprietaryBankTransactionCode("transaction");
      transaction0.hashCode();
      assertEquals("transaction", transaction0.getProprietaryBankTransactionCode());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCounterpartReference("fk]Gy&.=c&#)q+6@/");
      transaction0.hashCode();
      assertEquals("fk]Gy&.=c&#)q+6@/", transaction0.getCounterpartReference());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.counterpartName("transaction");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRemittanceInformation(", remittanceInformationType=");
      transaction0.hashCode();
      assertEquals(", remittanceInformationType=", transaction0.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      transaction_TransactionBuilder0.remittanceInformationType("Id");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Instant instant0 = MockInstant.now();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.executionDate(instant0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Instant instant0 = MockInstant.ofEpochSecond((-1018L));
      transaction0.setValueDate(instant0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      transaction0.setAmount(bigDecimal0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setRequestId("transaction");
      transaction0.hashCode();
      assertEquals("transaction", transaction0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.selfLink("bb\"z");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.proprietaryBankTransactionCode("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.counterpartReference("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("", transaction1.getCounterpartReference());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.selfLink("%Y2]7}4M>B|K,");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("%Y2]7}4M>B|K,", transaction1.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.bankTransactionCode("'h\"_-`Co|ET=_S");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      transaction0.equals(transaction1);
      assertEquals("'h\"_-`Co|ET=_S", transaction1.getBankTransactionCode());
      assertEquals("'h\"_-`Co|ET=_S", transaction0.getBankTransactionCode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.cardReference("~U|UQcglHD#QA#n");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.currency("transaction");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("transaction", transaction1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.remittanceInformationType("Sl%$ {UT+Ij:Q^n\rj");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("Sl%$ {UT+Ij:Q^n\rj", transaction1.getRemittanceInformationType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      transaction_TransactionBuilder0.description("");
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.additionalInformation("");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.requestId("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("", transaction1.getRequestId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.digest("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertEquals("", transaction1.getDigest());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.counterpartName("f6vq-YrzEVrg");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder1.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
      assertEquals("f6vq-YrzEVrg", transaction1.getCounterpartName());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      transaction_TransactionBuilder0.creditorId("UVF!^YSfwH0g");
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      transaction0.equals(transaction1);
      assertEquals("UVF!^YSfwH0g", transaction1.getCreditorId());
      assertEquals("UVF!^YSfwH0g", transaction0.getCreditorId());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.description("");
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      String string0 = transaction_TransactionBuilder0.toString();
      assertEquals("Transaction.TransactionBuilder(id=null, selfLink=null, requestId=null, amount=null, currency=null, valueDate=null, executionDate=null, description=null, remittanceInformationType=null, remittanceInformation=null, counterpartName=null, counterpartReference=null, bankTransactionCode=null, proprietaryBankTransactionCode=null, endToEndId=null, purposeCode=null, mandateId=null, creditorId=null, additionalInformation=null, digest=null, internalReference=null, fee=null, cardReference=null, cardReferenceType=null)", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.executionDate(instant0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = new Transaction.TransactionBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      transaction_TransactionBuilder0.id(uUID0);
      Transaction transaction0 = transaction_TransactionBuilder0.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Instant instant0 = MockInstant.now();
      transaction0.setValueDate(instant0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.toString();
      assertEquals("Transaction(id=null, selfLink=null, requestId=null, amount=null, currency=null, valueDate=null, executionDate=null, description=null, remittanceInformationType=null, remittanceInformation=null, counterpartName=null, counterpartReference=null, bankTransactionCode=null, proprietaryBankTransactionCode=null, endToEndId=null, purposeCode=null, mandateId=null, creditorId=null, additionalInformation=null, digest=null, internalReference=null, fee=null, cardReference=null, cardReferenceType=null)", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      transaction0.setAmount(bigDecimal0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
      assertFalse(transaction0.equals((Object)transaction1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Transaction.TransactionBuilder transaction_TransactionBuilder0 = Transaction.builder();
      Instant instant0 = MockInstant.ofEpochSecond(2L);
      Transaction.TransactionBuilder transaction_TransactionBuilder1 = transaction_TransactionBuilder0.valueDate(instant0);
      Transaction transaction0 = transaction_TransactionBuilder1.build();
      Transaction transaction1 = transaction_TransactionBuilder0.build();
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      transaction0.setFee(bigDecimal0);
      Transaction transaction1 = new Transaction();
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setCurrency("{transactionId}");
      transaction0.hashCode();
      assertEquals("{transactionId}", transaction0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setBankTransactionCode("transaction");
      transaction0.hashCode();
      assertEquals("transaction", transaction0.getBankTransactionCode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      UUID uUID0 = MockUUID.randomUUID();
      transaction0.setId(uUID0);
      transaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setDescription("{transactionId}");
      transaction0.hashCode();
      assertEquals("{transactionId}", transaction0.getDescription());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      transaction0.setEndToEndId("transaction");
      transaction0.hashCode();
      assertEquals("transaction", transaction0.getEndToEndId());
  }
}
