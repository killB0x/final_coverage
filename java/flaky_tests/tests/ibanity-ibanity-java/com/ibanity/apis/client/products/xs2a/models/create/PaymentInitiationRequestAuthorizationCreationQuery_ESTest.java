/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:41:31 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.create.PaymentInitiationRequestAuthorizationCreationQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentInitiationRequestAuthorizationCreationQuery_ESTest extends PaymentInitiationRequestAuthorizationCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString("/P<Ps#?");
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      paymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "/Z", hashMap0, hashMap0);
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, (String) null, hashMap0, hashMap0);
      hashMap0.put((String) null, ":?Dikx&`@\";L;x\"mT^K");
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(180);
      UUID uUID0 = MockUUID.fromString("");
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      UUID uUID1 = paymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      UUID uUID1 = paymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-713));
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", hashMap0, hashMap0);
      UUID uUID1 = paymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals((-3962604718743470080L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", hashMap0, hashMap0);
      UUID uUID1 = paymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      String string0 = paymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("_;pJD%k<26X3au1<", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", (Map<String, String>) null, (Map<String, String>) null);
      String string0 = paymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, hashMap0);
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, (String) null, hashMap0, hashMap0);
      hashMap0.put((String) null, ":?Dikx&`@\";L;x\"mT^K");
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.canEqual(paymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.canEqual(paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = paymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      UUID uUID0 = MockUUID.fromString("d]MTd#cgm-nu7\"O");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "d]MTd#cgm-nu7\"O", hashMap0, map0);
      paymentInitiationRequestAuthorizationCreationQuery1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = paymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = paymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = paymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery1.equals(paymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.paymentInitiationRequestId(uUID0);
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.customerAccessToken("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.paymentInitiationRequestId(uUID0);
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.customerAccessToken("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("pw|Z Os({T;5");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(paymentInitiationRequestAuthorizationCreationQuery1.equals((Object)paymentInitiationRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder2 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder2.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(paymentInitiationRequestAuthorizationCreationQuery1.equals((Object)paymentInitiationRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(paymentInitiationRequestAuthorizationCreationQuery1.equals((Object)paymentInitiationRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery1 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "Ryoa((!@gzU", hashMap0, hashMap0);
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestAuthorizationCreationQuery0.equals(paymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      paymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      paymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_;pJD%k<26X3au1<");
      PaymentInitiationRequestAuthorizationCreationQuery paymentInitiationRequestAuthorizationCreationQuery0 = new PaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_;pJD%k<26X3au1<", (Map<String, String>) null, (Map<String, String>) null);
      String string0 = paymentInitiationRequestAuthorizationCreationQuery0.toString();
      assertEquals("PaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, customerAccessToken=_;pJD%k<26X3au1<, queryParameters=null, additionalHeaders=null)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PaymentInitiationRequestAuthorizationCreationQuery.builder();
      String string0 = paymentInitiationRequestAuthorizationCreationQuery_PaymentInitiationRequestAuthorizationCreationQueryBuilder0.toString();
      assertEquals("PaymentInitiationRequestAuthorizationCreationQuery.PaymentInitiationRequestAuthorizationCreationQueryBuilder(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters$value=null, additionalHeaders$value=null)", string0);
  }
}
