/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:40:17 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.isabel_connect.models.create.AccessTokenCreateQuery;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessTokenCreateQuery_ESTest extends AccessTokenCreateQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.setRefreshToken("grant_type");
      String string0 = accessTokenCreateQuery0.getRefreshToken();
      assertEquals("grant_type", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.setRefreshToken("");
      String string0 = accessTokenCreateQuery0.getRefreshToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.canEqual(accessTokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessTokenCreateQuery accessTokenCreateQuery0 = null;
      try {
        accessTokenCreateQuery0 = new AccessTokenCreateQuery((AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.isabel_connect.models.TokenQuery$TokenQueryBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      AccessTokenCreateQuery accessTokenCreateQuery1 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.setRefreshToken("com.ibanity.apis.client.products.isabel_connect.models.TokenQuery");
      assertFalse(accessTokenCreateQuery0.equals((Object)accessTokenCreateQuery1));
      
      accessTokenCreateQuery1.setRefreshToken("com.ibanity.apis.client.products.isabel_connect.models.TokenQuery");
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery1);
      assertTrue(accessTokenCreateQuery1.equals((Object)accessTokenCreateQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      AccessTokenCreateQuery accessTokenCreateQuery1 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      assertTrue(accessTokenCreateQuery1.equals((Object)accessTokenCreateQuery0));
      
      accessTokenCreateQuery1.setRefreshToken("9A9d");
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery1);
      assertFalse(accessTokenCreateQuery1.equals((Object)accessTokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.setRefreshToken("");
      AccessTokenCreateQuery accessTokenCreateQuery1 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      AccessTokenCreateQuery accessTokenCreateQuery1 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.equals(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      accessTokenCreateQuery0.setRefreshToken(";s,(tw`y0{u");
      accessTokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      boolean boolean0 = accessTokenCreateQuery0.canEqual(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      String[] stringArray0 = accessTokenCreateQuery0.path();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      String string0 = accessTokenCreateQuery0.toString();
      assertEquals("AccessTokenCreateQuery(refreshToken=null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      String string0 = accessTokenCreateQuery0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessTokenCreateQuery.AccessTokenCreateQueryBuilder<?, ?> accessTokenCreateQuery_AccessTokenCreateQueryBuilder0 = AccessTokenCreateQuery.builder();
      AccessTokenCreateQuery accessTokenCreateQuery0 = new AccessTokenCreateQuery(accessTokenCreateQuery_AccessTokenCreateQueryBuilder0);
      Map<String, String> map0 = accessTokenCreateQuery0.requestArguments();
      assertFalse(map0.isEmpty());
  }
}
